<Type Name="MethodBuilder" FullName="System.Reflection.Emit.MethodBuilder">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1c326ce4485972d79684bb82a71a18147414a2bd" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39819437" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class MethodBuilder : System.Reflection.MethodInfo, System.Runtime.InteropServices._MethodBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit MethodBuilder extends System.Reflection.MethodInfo implements class System.Runtime.InteropServices._MethodBuilder" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.Emit.MethodBuilder" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class MethodBuilder&#xA;Inherits MethodInfo&#xA;Implements _MethodBuilder" />
  <TypeSignature Language="C++ CLI" Value="public ref class MethodBuilder sealed : System::Reflection::MethodInfo, System::Runtime::InteropServices::_MethodBuilder" />
  <TypeSignature Language="F#" Value="type MethodBuilder = class&#xA;    inherit MethodInfo&#xA;    interface _MethodBuilder" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.Emit</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Reflection.MethodInfo</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.InteropServices._MethodBuilder</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._MethodBuilder))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="e838e-101">Définit et représente une méthode (ou un constructeur) sur une classe dynamique.</span>
      <span class="sxs-lookup">
        <span data-stu-id="e838e-101">Defines and represents a method (or constructor) on a dynamic class.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e838e-102">Le <xref:System.Reflection.Emit.MethodBuilder> classe est utilisée pour décrire complètement une méthode en langage intermédiaire Microsoft (MSIL), y compris le nom, attributs, la signature et méthode corps.</span><span class="sxs-lookup"><span data-stu-id="e838e-102">The <xref:System.Reflection.Emit.MethodBuilder> class is used to fully describe a method in Microsoft intermediate language (MSIL), including the name, attributes, signature, and method body.</span></span> <span data-ttu-id="e838e-103">Il est utilisé conjointement avec la <xref:System.Reflection.Emit.TypeBuilder> classe pour créer des classes lors de l’exécution.</span><span class="sxs-lookup"><span data-stu-id="e838e-103">It is used in conjunction with the <xref:System.Reflection.Emit.TypeBuilder> class to create classes at runtime.</span></span>  
  
## <a name="global-methods-and-methods-as-type-members"></a><span data-ttu-id="e838e-104">Méthodes globales et des méthodes en tant que membres de type</span><span class="sxs-lookup"><span data-stu-id="e838e-104">Global methods and methods as type members</span></span>  
 <span data-ttu-id="e838e-105">Vous pouvez utiliser la réflexion émettre pour définir des méthodes globales et pour définir des méthodes en tant que membres de type.</span><span class="sxs-lookup"><span data-stu-id="e838e-105">You can use reflection emit to define global methods and to define methods as type members.</span></span> <span data-ttu-id="e838e-106">Les API qui définissent les méthodes retournent <xref:System.Reflection.Emit.MethodBuilder> objets.</span><span class="sxs-lookup"><span data-stu-id="e838e-106">The APIs that define methods return <xref:System.Reflection.Emit.MethodBuilder> objects.</span></span>  
  
### <a name="global-methods"></a><span data-ttu-id="e838e-107">Méthodes globales</span><span class="sxs-lookup"><span data-stu-id="e838e-107">Global methods</span></span>  
 <span data-ttu-id="e838e-108">Une méthode globale est définie à l’aide de la <xref:System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod%2A?displayProperty=nameWithType> (méthode), qui retourne un **MethodBuilder** objet.</span><span class="sxs-lookup"><span data-stu-id="e838e-108">A global method is defined by using the <xref:System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod%2A?displayProperty=nameWithType> method, which returns a **MethodBuilder** object.</span></span>  
  
 <span data-ttu-id="e838e-109">Méthodes globales doivent être statiques.</span><span class="sxs-lookup"><span data-stu-id="e838e-109">Global methods must be static.</span></span> <span data-ttu-id="e838e-110">Si un module dynamique contient des méthodes globales, la <xref:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions%2A?displayProperty=nameWithType> méthode doit être appelée avant de rendre le module dynamique ou l’assembly dynamique conteneur car le common language runtime diffère la correction du module dynamique jusqu'à ce que toutes les fonctions globales ont été définis.</span><span class="sxs-lookup"><span data-stu-id="e838e-110">If a dynamic module contains global methods, the <xref:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions%2A?displayProperty=nameWithType> method must be called before persisting the dynamic module or the containing dynamic assembly because the common language runtime postpones fixing up the dynamic module until all global functions have been defined.</span></span>  
  
 <span data-ttu-id="e838e-111">Une méthode native globale est définie à l’aide de la <xref:System.Reflection.Emit.ModuleBuilder.DefinePInvokeMethod%2A?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="e838e-111">A global native method is defined by using the <xref:System.Reflection.Emit.ModuleBuilder.DefinePInvokeMethod%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="e838e-112">Code non managé (PInvoke) les méthodes ne doivent pas être déclarées abstraites ou virtuelles.</span><span class="sxs-lookup"><span data-stu-id="e838e-112">Platform invoke (PInvoke) methods must not be declared abstract or virtual.</span></span> <span data-ttu-id="e838e-113">Les jeux de runtime le <xref:System.Reflection.MethodAttributes.PinvokeImpl?displayProperty=nameWithType> attribut pour une plateforme appeler la méthode.</span><span class="sxs-lookup"><span data-stu-id="e838e-113">The runtime sets the <xref:System.Reflection.MethodAttributes.PinvokeImpl?displayProperty=nameWithType> attribute for a platform invoke method.</span></span>  
  
### <a name="methods-as-members-of-types"></a><span data-ttu-id="e838e-114">Méthodes en tant que membres de types</span><span class="sxs-lookup"><span data-stu-id="e838e-114">Methods as members of types</span></span>  
 <span data-ttu-id="e838e-115">Une méthode est définie comme un membre de type à l’aide de la <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=nameWithType> (méthode), qui retourne un <xref:System.Reflection.Emit.MethodBuilder> objet.</span><span class="sxs-lookup"><span data-stu-id="e838e-115">A method is defined as a type member by using the <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=nameWithType> method, which returns a <xref:System.Reflection.Emit.MethodBuilder> object.</span></span>  
  
 <span data-ttu-id="e838e-116">Le <xref:System.Reflection.Emit.MethodBuilder.DefineParameter%2A> méthode est utilisée pour définir le nom et les attributs d’un paramètre ou de la valeur de retour.</span><span class="sxs-lookup"><span data-stu-id="e838e-116">The <xref:System.Reflection.Emit.MethodBuilder.DefineParameter%2A> method is used to set the name and parameter attributes of a parameter, or of the return value.</span></span> <span data-ttu-id="e838e-117">Le <xref:System.Reflection.Emit.ParameterBuilder> objet retourné par cette méthode représente un paramètre ou la valeur de retour.</span><span class="sxs-lookup"><span data-stu-id="e838e-117">The <xref:System.Reflection.Emit.ParameterBuilder> object returned by this method represents a parameter or the return value.</span></span> <span data-ttu-id="e838e-118">Le <xref:System.Reflection.Emit.ParameterBuilder> objet peut être utilisé pour définir le marshaling, pour définir la valeur de constante et appliquer des attributs personnalisés.</span><span class="sxs-lookup"><span data-stu-id="e838e-118">The <xref:System.Reflection.Emit.ParameterBuilder> object can be used to set the marshaling, to set the constant value, and to apply custom attributes.</span></span>  
  
## <a name="attributes"></a><span data-ttu-id="e838e-119">Attributs</span><span class="sxs-lookup"><span data-stu-id="e838e-119">Attributes</span></span>  
 <span data-ttu-id="e838e-120">Membres de la <xref:System.Reflection.MethodAttributes> énumération définir le caractère précis d’une méthode dynamique :</span><span class="sxs-lookup"><span data-stu-id="e838e-120">Members of the <xref:System.Reflection.MethodAttributes> enumeration define the precise character of a dynamic method:</span></span>  
  
-   <span data-ttu-id="e838e-121">Les méthodes statiques sont spécifiées à l’aide de la <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType> attribut.</span><span class="sxs-lookup"><span data-stu-id="e838e-121">Static methods are specified using the <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType> attribute.</span></span>  
  
-   <span data-ttu-id="e838e-122">Les méthodes finales (les méthodes qui ne peut pas être substituées) sont spécifiés à l’aide de la <xref:System.Reflection.MethodAttributes.Final?displayProperty=nameWithType> attribut.</span><span class="sxs-lookup"><span data-stu-id="e838e-122">Final methods (methods that cannot be overridden) are specified using the <xref:System.Reflection.MethodAttributes.Final?displayProperty=nameWithType> attribute.</span></span>  
  
-   <span data-ttu-id="e838e-123">Méthodes virtuelles sont spécifiés à l’aide de la <xref:System.Reflection.MethodAttributes.Virtual?displayProperty=nameWithType> attribut.</span><span class="sxs-lookup"><span data-stu-id="e838e-123">Virtual methods are specified using the <xref:System.Reflection.MethodAttributes.Virtual?displayProperty=nameWithType> attribute.</span></span>  
  
-   <span data-ttu-id="e838e-124">Méthodes abstraites sont spécifiés à l’aide de la <xref:System.Reflection.MethodAttributes.Abstract?displayProperty=nameWithType> attribut.</span><span class="sxs-lookup"><span data-stu-id="e838e-124">Abstract methods are specified using the <xref:System.Reflection.MethodAttributes.Abstract?displayProperty=nameWithType> attribute.</span></span>  
  
-   <span data-ttu-id="e838e-125">Plusieurs attributs déterminent la visibilité de la méthode.</span><span class="sxs-lookup"><span data-stu-id="e838e-125">Several attributes determine method visibility.</span></span> <span data-ttu-id="e838e-126">Consultez la description de la <xref:System.Reflection.MethodAttributes> énumération.</span><span class="sxs-lookup"><span data-stu-id="e838e-126">See the description of the <xref:System.Reflection.MethodAttributes> enumeration.</span></span>  
  
-   <span data-ttu-id="e838e-127">Les méthodes qui implémentent les opérateurs surchargés doivent définir le <xref:System.Reflection.MethodAttributes.SpecialName?displayProperty=nameWithType> attribut.</span><span class="sxs-lookup"><span data-stu-id="e838e-127">Methods that implement overloaded operators must set the <xref:System.Reflection.MethodAttributes.SpecialName?displayProperty=nameWithType> attribute.</span></span>  
  
-   <span data-ttu-id="e838e-128">Les finaliseurs doivent définir le <xref:System.Reflection.MethodAttributes.SpecialName?displayProperty=nameWithType> attribut.</span><span class="sxs-lookup"><span data-stu-id="e838e-128">Finalizers must set the <xref:System.Reflection.MethodAttributes.SpecialName?displayProperty=nameWithType> attribute.</span></span>  
  
## <a name="known-issues"></a><span data-ttu-id="e838e-129">Problèmes connus</span><span class="sxs-lookup"><span data-stu-id="e838e-129">Known Issues</span></span>  
  
-   <span data-ttu-id="e838e-130">Bien que <xref:System.Reflection.Emit.MethodBuilder> est dérivée de <xref:System.Reflection.MethodInfo>, certaines des méthodes abstraites définies dans le <xref:System.Reflection.MethodInfo> classe ne sont pas totalement implémentées dans <xref:System.Reflection.Emit.MethodBuilder>.</span><span class="sxs-lookup"><span data-stu-id="e838e-130">Although <xref:System.Reflection.Emit.MethodBuilder> is derived from <xref:System.Reflection.MethodInfo>, some of the abstract methods defined in the <xref:System.Reflection.MethodInfo> class are not fully implemented in <xref:System.Reflection.Emit.MethodBuilder>.</span></span> <span data-ttu-id="e838e-131">Ces <xref:System.Reflection.Emit.MethodBuilder> méthodes lèvent le <xref:System.NotSupportedException>.</span><span class="sxs-lookup"><span data-stu-id="e838e-131">These <xref:System.Reflection.Emit.MethodBuilder> methods throw the <xref:System.NotSupportedException>.</span></span> <span data-ttu-id="e838e-132">Par exemple le <xref:System.Reflection.Emit.MethodBuilder.Invoke%2A?displayProperty=nameWithType> méthode n’est pas totalement implémentée.</span><span class="sxs-lookup"><span data-stu-id="e838e-132">For example the <xref:System.Reflection.Emit.MethodBuilder.Invoke%2A?displayProperty=nameWithType> method is not fully implemented.</span></span> <span data-ttu-id="e838e-133">Vous pouvez refléter ces méthodes en récupérant l’à l’aide du type englobant le <xref:System.Type.GetType%2A?displayProperty=nameWithType> ou <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> méthodes.</span><span class="sxs-lookup"><span data-stu-id="e838e-133">You can reflect on these methods by retrieving the enclosing type using the <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> methods.</span></span>  
  
-   <span data-ttu-id="e838e-134">Modificateurs personnalisés sont pris en charge avec le .NET Framework version 2.0.</span><span class="sxs-lookup"><span data-stu-id="e838e-134">Custom modifiers are supported starting with the .NET Framework version 2.0.</span></span> <span data-ttu-id="e838e-135">Ils ne sont pas pris en charge dans les versions antérieures.</span><span class="sxs-lookup"><span data-stu-id="e838e-135">They are not supported in earlier versions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e838e-136">L’exemple suivant utilise la <xref:System.Reflection.Emit.MethodBuilder> classe pour créer une méthode dans un type dynamique.</span><span class="sxs-lookup"><span data-stu-id="e838e-136">The following example uses the <xref:System.Reflection.Emit.MethodBuilder> class to create a method within a dynamic type.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.MethodBuilder Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder Example/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit.MethodBuilder Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder Example/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit.MethodBuilder Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MethodBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; MethodBuilder();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddDeclarativeSecurity">
      <MemberSignature Language="C#" Value="public void AddDeclarativeSecurity (System.Security.Permissions.SecurityAction action, System.Security.PermissionSet pset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddDeclarativeSecurity(valuetype System.Security.Permissions.SecurityAction action, class System.Security.PermissionSet pset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity(System.Security.Permissions.SecurityAction,System.Security.PermissionSet)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddDeclarativeSecurity (action As SecurityAction, pset As PermissionSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddDeclarativeSecurity(System::Security::Permissions::SecurityAction action, System::Security::PermissionSet ^ pset);" />
      <MemberSignature Language="F#" Value="member this.AddDeclarativeSecurity : System.Security.Permissions.SecurityAction * System.Security.PermissionSet -&gt; unit" Usage="methodBuilder.AddDeclarativeSecurity (action, pset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Security.Permissions.SecurityAction" />
        <Parameter Name="pset" Type="System.Security.PermissionSet" />
      </Parameters>
      <Docs>
        <param name="action">
          <span data-ttu-id="e838e-137">Action de sécurité à effectuer (Demand, Assert, etc).</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-137">The security action to be taken (Demand, Assert, and so on).</span>
          </span>
        </param>
        <param name="pset">
          <span data-ttu-id="e838e-138">Jeu d’autorisations auquel la mesure s’applique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-138">The set of permissions the action applies to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e838e-139">Ajoute la sécurité déclarative à cette méthode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-139">Adds declarative security to this method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e838e-140"><xref:System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity%2A> peut être appelée plusieurs fois, chaque appel spécifiant une action de sécurité (tels que `Demand`, `Assert`, et `Deny`) et un jeu d’autorisations que l’action s’applique.</span><span class="sxs-lookup"><span data-stu-id="e838e-140"><xref:System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity%2A> can be called several times, with each call specifying a security action (such as `Demand`, `Assert`, and `Deny`) and a set of permissions that the action applies to.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e838e-141">Dans les versions de .NET Framework 1.0, 1.1 et 2.0, les attributs de sécurité déclarative appliqués à une méthode à l’aide de la <xref:System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity%2A> méthode sont stockés dans l’ancien format de métadonnées XML.</span><span class="sxs-lookup"><span data-stu-id="e838e-141">In the .NET Framework versions 1.0, 1.1, and 2.0, the declarative security attributes applied to a method by using the <xref:System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity%2A> method are stored in the old XML metadata format.</span></span> <span data-ttu-id="e838e-142">Consultez l’émission d’attributs de sécurité déclarative.</span><span class="sxs-lookup"><span data-stu-id="e838e-142">See Emitting Declarative Security Attributes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e838e-143">L’exemple de code ci-dessous illustre l’utilisation contextuelle de `AddDeclarativeSecurity` indiquant que l’appelant d’une méthode d’avoir des autorisations illimitées.</span><span class="sxs-lookup"><span data-stu-id="e838e-143">The code sample below illustrates the contextual use of `AddDeclarativeSecurity` to require the caller of a method to have unrestricted permissions.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity Example/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity Example/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="e838e-144">L’<paramref name="action" /> n’est pas valide (<see langword="RequestMinimum" />, <see langword="RequestOptional" /> et <see langword="RequestRefuse" /> ne sont pas valides).</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-144">The <paramref name="action" /> is invalid (<see langword="RequestMinimum" />, <see langword="RequestOptional" />, and <see langword="RequestRefuse" /> are invalid).</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e838e-145">Le type conteneur a été créé à l’aide de <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-145">The containing type has been created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span>
          </span>
          <span data-ttu-id="e838e-146">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-146">-or-</span>
          </span>
          <span data-ttu-id="e838e-147">Le jeu d’autorisations <paramref name="pset" /> contient une action qui a déjà été ajoutée par <see cref="M:System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity(System.Security.Permissions.SecurityAction,System.Security.PermissionSet)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-147">The permission set <paramref name="pset" /> contains an action that was added earlier by <see cref="M:System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity(System.Security.Permissions.SecurityAction,System.Security.PermissionSet)" />.</span>
          </span>
          <span data-ttu-id="e838e-148">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-148">-or-</span>
          </span>
          <span data-ttu-id="e838e-149">Pour la méthode actuelle, la propriété <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> est <see langword="true" />, mais la propriété <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> est <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-149">For the current method, the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> property is <see langword="false" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e838e-150">
            <paramref name="pset" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-150">
              <paramref name="pset" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodAttributes Attributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.MethodAttributes Attributes" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.MethodBuilder.Attributes" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Attributes As MethodAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MethodAttributes Attributes { System::Reflection::MethodAttributes get(); };" />
      <MemberSignature Language="F#" Value="member this.Attributes : System.Reflection.MethodAttributes" Usage="System.Reflection.Emit.MethodBuilder.Attributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e838e-151">Récupère les attributs de cette méthode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-151">Retrieves the attributes for this method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e838e-152">Lecture seule.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-152">Read-only.</span>
          </span>
          <span data-ttu-id="e838e-153">Récupère le <see langword="MethodAttributes" /> de cette méthode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-153">Retrieves the <see langword="MethodAttributes" /> for this method.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CallingConvention">
      <MemberSignature Language="C#" Value="public override System.Reflection.CallingConventions CallingConvention { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.CallingConventions CallingConvention" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.MethodBuilder.CallingConvention" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CallingConvention As CallingConventions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::CallingConventions CallingConvention { System::Reflection::CallingConventions get(); };" />
      <MemberSignature Language="F#" Value="member this.CallingConvention : System.Reflection.CallingConventions" Usage="System.Reflection.Emit.MethodBuilder.CallingConvention" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.CallingConventions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e838e-154">Retourne la convention d’appel de la méthode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-154">Returns the calling convention of the method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e838e-155">Lecture seule.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-155">Read-only.</span>
          </span>
          <span data-ttu-id="e838e-156">Convention d’appel de la méthode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-156">The calling convention of the method.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContainsGenericParameters">
      <MemberSignature Language="C#" Value="public override bool ContainsGenericParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ContainsGenericParameters" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.MethodBuilder.ContainsGenericParameters" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ContainsGenericParameters As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool ContainsGenericParameters { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ContainsGenericParameters : bool" Usage="System.Reflection.Emit.MethodBuilder.ContainsGenericParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e838e-157">Non pris en charge pour ce type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-157">Not supported for this type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e838e-158">Non pris en charge.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-158">Not supported.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e838e-159">Un <xref:System.Reflection.Emit.MethodBuilder> représente toujours une définition de méthode générique et ne peut donc pas être appelé.</span><span class="sxs-lookup"><span data-stu-id="e838e-159">A <xref:System.Reflection.Emit.MethodBuilder> always represents a generic method definition, and thus cannot be invoked.</span></span>  
  
 <span data-ttu-id="e838e-160">Pour plus d’informations, consultez <xref:System.Reflection.MethodBase.IsGenericMethod%2A?displayProperty=nameWithType> et <xref:System.Reflection.MethodBase.ContainsGenericParameters%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="e838e-160">For more information, see <xref:System.Reflection.MethodBase.IsGenericMethod%2A?displayProperty=nameWithType> and <xref:System.Reflection.MethodBase.ContainsGenericParameters%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="e838e-161">Pour plus d’informations sur les types génériques, consultez <xref:System.Type.IsGenericType%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="e838e-161">For information on generic types, see <xref:System.Type.IsGenericType%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="e838e-162">La méthode appelée n’est pas prise en charge dans la classe de base.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-162">The invoked method is not supported in the base class.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="P:System.Type.IsGenericType" />
      </Docs>
    </Member>
    <Member MemberName="CreateMethodBody">
      <MemberSignature Language="C#" Value="public void CreateMethodBody (byte[] il, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CreateMethodBody(unsigned int8[] il, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.CreateMethodBody(System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CreateMethodBody (il As Byte(), count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CreateMethodBody(cli::array &lt;System::Byte&gt; ^ il, int count);" />
      <MemberSignature Language="F#" Value="member this.CreateMethodBody : byte[] * int -&gt; unit" Usage="methodBuilder.CreateMethodBody (il, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="il" Type="System.Byte[]" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="il">
          <span data-ttu-id="e838e-163">Tableau contenant des instructions MSIL valides.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-163">An array containing valid MSIL instructions.</span>
          </span>
          <span data-ttu-id="e838e-164">Si ce paramètre est <see langword="null" />, le corps de la méthode est effacé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-164">If this parameter is <see langword="null" />, the method's body is cleared.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="e838e-165">Nombre d’octets valides dans le tableau MSIL.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-165">The number of valid bytes in the MSIL array.</span>
          </span>
          <span data-ttu-id="e838e-166">Cette valeur est ignorée si MSIL est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-166">This value is ignored if MSIL is <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e838e-167">Crée le corps de la méthode en utilisant un tableau d’octets d’instructions MSIL (Microsoft Intermediate Language) spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-167">Creates the body of the method using a supplied byte array of Microsoft intermediate language (MSIL) instructions.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e838e-168">Cette méthode crée le corps de la méthode de `il`, un tableau contenant des instructions MSIL comme opcodes.</span><span class="sxs-lookup"><span data-stu-id="e838e-168">This method creates the method's body from `il`, an array containing MSIL instructions as opcodes.</span></span> <span data-ttu-id="e838e-169">Le nombre d’octets d’instructions MSIL valide est fourni par le nombre.</span><span class="sxs-lookup"><span data-stu-id="e838e-169">The number of bytes of valid MSIL is given by count.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e838e-170">Cela est actuellement pas entièrement pris en charge.</span><span class="sxs-lookup"><span data-stu-id="e838e-170">This is currently not fully supported.</span></span> <span data-ttu-id="e838e-171">L’utilisateur ne peut pas fournir l’emplacement des corrections de jeton et les gestionnaires d’exceptions.</span><span class="sxs-lookup"><span data-stu-id="e838e-171">The user cannot supply the location of token fix ups and exception handlers.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e838e-172">Dans l’exemple ci-dessous, une méthode simple qui ajoute deux entiers est générée via à l’aide de l’opcode `CreateMethodBody`.</span><span class="sxs-lookup"><span data-stu-id="e838e-172">In the example provided below, a simple method that adds two integers is generated via opcode using `CreateMethodBody`.</span></span>  
  
 [!code-cpp[System.Refelction.Emit.MethodBuilder.CreateMethodBody Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Refelction.Emit.MethodBuilder.CreateMethodBody Example/CPP/source.cpp#1)]
 [!code-csharp[System.Refelction.Emit.MethodBuilder.CreateMethodBody Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Refelction.Emit.MethodBuilder.CreateMethodBody Example/CS/source.cs#1)]
 [!code-vb[System.Refelction.Emit.MethodBuilder.CreateMethodBody Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Refelction.Emit.MethodBuilder.CreateMethodBody Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="e838e-173">
            <paramref name="count" /> n’est pas compris dans la plage d’index du tableau d’instructions MSIL fourni, et <paramref name="il" /> n’est pas <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-173">The <paramref name="count" /> is not within the range of indexes of the supplied MSIL instruction array and <paramref name="il" /> is not <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e838e-174">Le type conteneur a déjà été créé à l’aide de <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-174">The containing type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span>
          </span>
          <span data-ttu-id="e838e-175">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-175">-or-</span>
          </span>
          <span data-ttu-id="e838e-176">Cette méthode a été appelée précédemment sur ce <see langword="MethodBuilder" /> avec un argument <paramref name="il" /> qui n’était pas <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-176">This method was called previously on this <see langword="MethodBuilder" /> with an <paramref name="il" /> argument that was not <see langword="null" />.</span>
          </span>
          <span data-ttu-id="e838e-177">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-177">-or-</span>
          </span>
          <span data-ttu-id="e838e-178">Pour la méthode actuelle, la propriété <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> est <see langword="true" />, mais la propriété <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> est <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-178">For the current method, the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> property is <see langword="false" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DeclaringType">
      <MemberSignature Language="C#" Value="public override Type DeclaringType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type DeclaringType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.MethodBuilder.DeclaringType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property DeclaringType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ DeclaringType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeclaringType : Type" Usage="System.Reflection.Emit.MethodBuilder.DeclaringType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e838e-179">Retourne le type qui déclare cette méthode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-179">Returns the type that declares this method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e838e-180">Lecture seule.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-180">Read-only.</span>
          </span>
          <span data-ttu-id="e838e-181">Type qui déclare cette méthode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-181">The type that declares this method.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e838e-182">Le code suivant illustre l’utilisation de la `Type` propriété.</span><span class="sxs-lookup"><span data-stu-id="e838e-182">The following code illustrates the use of the `Type` property.</span></span>  
  
 [!code-cpp[MethodBuilderClass_TypeSample#1](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBuilderClass_TypeSample/CPP/methodbuilderclass.cpp#1)]
 [!code-csharp[MethodBuilderClass_TypeSample#1](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBuilderClass_TypeSample/CS/methodbuilderclass.cs#1)]
 [!code-vb[MethodBuilderClass_TypeSample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBuilderClass_TypeSample/VB/methodbuilderclass.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefineGenericParameters">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.GenericTypeParameterBuilder[] DefineGenericParameters (params string[] names);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.GenericTypeParameterBuilder[] DefineGenericParameters(string[] names) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.DefineGenericParameters(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineGenericParameters (ParamArray names As String()) As GenericTypeParameterBuilder()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::Emit::GenericTypeParameterBuilder ^&gt; ^ DefineGenericParameters(... cli::array &lt;System::String ^&gt; ^ names);" />
      <MemberSignature Language="F#" Value="member this.DefineGenericParameters : string[] -&gt; System.Reflection.Emit.GenericTypeParameterBuilder[]" Usage="methodBuilder.DefineGenericParameters names" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.GenericTypeParameterBuilder[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="names" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="names">
          <span data-ttu-id="e838e-183">Tableau de chaînes qui représentent les noms des paramètres de type générique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-183">An array of strings that represent the names of the generic type parameters.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e838e-184">Définit le nombre de paramètres de type générique pour la méthode actuelle, indique leur nom et retourne un tableau d’objets <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> pouvant être utilisés pour définir leurs contraintes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-184">Sets the number of generic type parameters for the current method, specifies their names, and returns an array of <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> objects that can be used to define their constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e838e-185">Tableau d’objets <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> représentant les paramètres de type de la méthode générique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-185">An array of <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> objects representing the type parameters of the generic method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e838e-186">Appel de la <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> méthode rend la méthode actuelle générique.</span><span class="sxs-lookup"><span data-stu-id="e838e-186">Calling the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> method makes the current method generic.</span></span> <span data-ttu-id="e838e-187">Il n’existe aucun moyen d’annuler cette modification.</span><span class="sxs-lookup"><span data-stu-id="e838e-187">There is no way to undo this change.</span></span> <span data-ttu-id="e838e-188">Appeler cette méthode une deuxième fois provoque un <xref:System.InvalidOperationException>.</span><span class="sxs-lookup"><span data-stu-id="e838e-188">Calling this method a second time causes an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="e838e-189">Les paramètres de type de la méthode générique peuvent être récupérées ultérieurement à l’aide de la <xref:System.Reflection.Emit.MethodBuilder.GetGenericArguments%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="e838e-189">The type parameters of the generic method can be retrieved later by using the <xref:System.Reflection.Emit.MethodBuilder.GetGenericArguments%2A> method.</span></span>  
  
 <span data-ttu-id="e838e-190">Par convention, un nom de paramètre de type est une lettre majuscule unique.</span><span class="sxs-lookup"><span data-stu-id="e838e-190">By convention, a type parameter name is a single uppercase letter.</span></span>  
  
 <span data-ttu-id="e838e-191">Pour plus d’informations, consultez <xref:System.Reflection.MethodBase.IsGenericMethod%2A?displayProperty=nameWithType> et <xref:System.Reflection.MethodInfo.GetGenericMethodDefinition%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="e838e-191">For more information, see <xref:System.Reflection.MethodBase.IsGenericMethod%2A?displayProperty=nameWithType> and <xref:System.Reflection.MethodInfo.GetGenericMethodDefinition%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="e838e-192">Pour plus d’informations sur les types génériques, consultez <xref:System.Type.IsGenericType%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="e838e-192">For information on generic types, see <xref:System.Type.IsGenericType%2A?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e838e-193">L’exemple de code suivant crée un type dynamique, `DemoType`, qui contient la méthode générique dynamique `DemoMethod`.</span><span class="sxs-lookup"><span data-stu-id="e838e-193">The following code example creates a dynamic type, `DemoType`, which contains the dynamic generic method `DemoMethod`.</span></span> <span data-ttu-id="e838e-194">Cette méthode a deux paramètres de type générique, un d’eux est utilisé comme un paramètre et l’autre comme type de retour.</span><span class="sxs-lookup"><span data-stu-id="e838e-194">This method has two generic type parameters, one of which is used as a parameter, and the other as the return type.</span></span>  
  
 <span data-ttu-id="e838e-195">Quand le code est exécuté, l’assembly dynamique est enregistré en tant que DemoGenericMethod1.dll, et peut être examiné à l’aide de [Ildasm.exe (désassembleur IL)](~/docs/framework/tools/ildasm-exe-il-disassembler.md).</span><span class="sxs-lookup"><span data-stu-id="e838e-195">When the code is executed, the dynamic assembly is saved as DemoGenericMethod1.dll, and can be examined using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e838e-196">Cet exemple de code génère un corps de méthode simple qui retourne simplement une référence null.</span><span class="sxs-lookup"><span data-stu-id="e838e-196">This code example generates a simple method body that merely returns a null reference.</span></span> <span data-ttu-id="e838e-197">Pour obtenir un exemple de code avec un corps de méthode entièrement développé plus qui crée et utilise des types génériques, consultez [Comment : définir une méthode générique avec l’émission de réflexion](~/docs/framework/reflection-and-codedom/how-to-define-a-generic-method-with-reflection-emit.md).</span><span class="sxs-lookup"><span data-stu-id="e838e-197">For a code example with a more fully developed method body that creates and uses generic types, see [How to: Define a Generic Method with Reflection Emit](~/docs/framework/reflection-and-codedom/how-to-define-a-generic-method-with-reflection-emit.md).</span></span>  
  
 [!code-cpp[GenericMethodBuilder#1](~/samples/snippets/cpp/VS_Snippets_CLR/GenericMethodBuilder/cpp/source.cpp#1)]
 [!code-csharp[GenericMethodBuilder#1](~/samples/snippets/csharp/VS_Snippets_CLR/GenericMethodBuilder/CS/source.cs#1)]
 [!code-vb[GenericMethodBuilder#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/GenericMethodBuilder/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e838e-198">Des paramètres de type générique ont déjà été définis pour cette méthode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-198">Generic type parameters have already been defined for this method.</span>
          </span>
          <span data-ttu-id="e838e-199">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-199">-or-</span>
          </span>
          <span data-ttu-id="e838e-200">La méthode a déjà été exécutée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-200">The method has been completed already.</span>
          </span>
          <span data-ttu-id="e838e-201">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-201">-or-</span>
          </span>
          <span data-ttu-id="e838e-202">La méthode <see cref="M:System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)" /> a été appelée pour la méthode actuelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-202">The <see cref="M:System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)" /> method has been called for the current method.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e838e-203">
            <paramref name="names" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-203">
              <paramref name="names" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="e838e-204">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-204">-or-</span>
          </span>
          <span data-ttu-id="e838e-205">Un élément de <paramref name="names" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-205">An element of <paramref name="names" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e838e-206">
            <paramref name="names" /> est un tableau vide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-206">
              <paramref name="names" /> is an empty array.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="P:System.Type.IsGenericType" />
        <altmember cref="Overload:System.Reflection.Emit.TypeBuilder.DefineMethod" />
      </Docs>
    </Member>
    <Member MemberName="DefineParameter">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.ParameterBuilder DefineParameter (int position, System.Reflection.ParameterAttributes attributes, string strParamName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.ParameterBuilder DefineParameter(int32 position, valuetype System.Reflection.ParameterAttributes attributes, string strParamName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineParameter (position As Integer, attributes As ParameterAttributes, strParamName As String) As ParameterBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::ParameterBuilder ^ DefineParameter(int position, System::Reflection::ParameterAttributes attributes, System::String ^ strParamName);" />
      <MemberSignature Language="F#" Value="member this.DefineParameter : int * System.Reflection.ParameterAttributes * string -&gt; System.Reflection.Emit.ParameterBuilder" Usage="methodBuilder.DefineParameter (position, attributes, strParamName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.ParameterBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="System.Int32" />
        <Parameter Name="attributes" Type="System.Reflection.ParameterAttributes" />
        <Parameter Name="strParamName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="position">
          <span data-ttu-id="e838e-207">Position du paramètre dans la liste des paramètres.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-207">The position of the parameter in the parameter list.</span>
          </span>
          <span data-ttu-id="e838e-208">Les paramètres sont indexés en commençant par le numéro 1 pour le premier paramètre ; le numéro 0 représente la valeur de retour de la méthode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-208">Parameters are indexed beginning with the number 1 for the first parameter; the number 0 represents the return value of the method.</span>
          </span>
        </param>
        <param name="attributes">
          <span data-ttu-id="e838e-209">Attributs du paramètre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-209">The parameter attributes of the parameter.</span>
          </span>
        </param>
        <param name="strParamName">
          <span data-ttu-id="e838e-210">Nom du paramètre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-210">The name of the parameter.</span>
          </span>
          <span data-ttu-id="e838e-211">Le nom peut être la chaîne Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-211">The name can be the null string.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e838e-212">Définit les attributs de paramètre et le nom d’un paramètre de cette méthode, ou de la valeur de retour de cette méthode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-212">Sets the parameter attributes and the name of a parameter of this method, or of the return value of this method.</span>
          </span>
          <span data-ttu-id="e838e-213">Retourne un ParameterBuilder qui peut être utilisé pour appliquer des attributs personnalisés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-213">Returns a ParameterBuilder that can be used to apply custom attributes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e838e-214">Retourne un objet <see langword="ParameterBuilder" /> qui représente un paramètre de cette méthode ou la valeur de retour de cette méthode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-214">Returns a <see langword="ParameterBuilder" /> object that represents a parameter of this method or the return value of this method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e838e-215">Le <xref:System.Reflection.Emit.ParameterBuilder> objet retourné par cette méthode peut être utilisé pour définir la valeur par défaut pour un paramètre ou pour appliquer des attributs personnalisés.</span><span class="sxs-lookup"><span data-stu-id="e838e-215">The <xref:System.Reflection.Emit.ParameterBuilder> object returned by this method can be used to set the default value for a parameter or to apply custom attributes.</span></span>  
  
 <span data-ttu-id="e838e-216">Paramètre la numérotation commence à 1, par conséquent, `position` est 1 pour le premier paramètre.</span><span class="sxs-lookup"><span data-stu-id="e838e-216">Parameter numbering begins with 1, so `position` is 1 for the first parameter.</span></span> <span data-ttu-id="e838e-217">Si `position` est égal à zéro, cette méthode affecte la valeur de retour.</span><span class="sxs-lookup"><span data-stu-id="e838e-217">If `position` is zero, this method affects the return value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e838e-218">Dans les versions 1.0 et 1.1 du .NET Framework, une exception est levée si `position` est égal à zéro, donc cette méthode ne peut pas être utilisée pour modifier les attributs de la valeur de retour dans ces versions.</span><span class="sxs-lookup"><span data-stu-id="e838e-218">In the .NET Framework versions 1.0 and 1.1, an exception is thrown if `position` is zero, so this method cannot be used to modify attributes of the return value in those versions.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="e838e-219">La méthode n'a pas de paramètre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-219">The method has no parameters.</span>
          </span>
          <span data-ttu-id="e838e-220">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-220">-or-</span>
          </span>
          <span data-ttu-id="e838e-221">
            <paramref name="position" /> est inférieur à zéro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-221">
              <paramref name="position" /> is less than zero.</span>
          </span>
          <span data-ttu-id="e838e-222">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-222">-or-</span>
          </span>
          <span data-ttu-id="e838e-223">
            <paramref name="position" /> est supérieur au nombre de paramètres de la méthode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-223">
              <paramref name="position" /> is greater than the number of the method's parameters.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e838e-224">Le type conteneur a déjà été créé à l’aide de <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-224">The containing type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span>
          </span>
          <span data-ttu-id="e838e-225">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-225">-or-</span>
          </span>
          <span data-ttu-id="e838e-226">Pour la méthode actuelle, la propriété <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> est <see langword="true" />, mais la propriété <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> est <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-226">For the current method, the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> property is <see langword="false" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="methodBuilder.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="e838e-227">Objet à comparer avec cette instance <see langword="MethodBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-227">The object to compare with this <see langword="MethodBuilder" /> instance.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e838e-228">Détermine si l’objet spécifié est égal à cette instance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-228">Determines whether the given object is equal to this instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e838e-229">
            <see langword="true" /> si <paramref name="obj" /> est une instance de <see langword="MethodBuilder" /> et s’il est égal à cet objet ; sinon <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-229">
              <see langword="true" /> if <paramref name="obj" /> is an instance of <see langword="MethodBuilder" /> and is equal to this object; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e838e-230">L’égalité est déterminée en ayant le même nom, attributs et la signature.</span><span class="sxs-lookup"><span data-stu-id="e838e-230">Equality is determined by having the same name, attributes, and signature.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBaseDefinition">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodInfo GetBaseDefinition ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.MethodInfo GetBaseDefinition() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.GetBaseDefinition" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBaseDefinition () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Reflection::MethodInfo ^ GetBaseDefinition();" />
      <MemberSignature Language="F#" Value="override this.GetBaseDefinition : unit -&gt; System.Reflection.MethodInfo" Usage="methodBuilder.GetBaseDefinition " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e838e-231">Retourne l’implémentation de base pour une méthode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-231">Return the base implementation for a method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e838e-232">Implémentation de base de cette méthode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-232">The base implementation of this method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e838e-233">Cela retourne toujours en cours `MethodBuilder` objet.</span><span class="sxs-lookup"><span data-stu-id="e838e-233">This always returns the current `MethodBuilder` object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCustomAttributes">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e838e-234">Retourne les attributs personnalisés définis pour cette méthode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-234">Returns the custom attributes defined for this method.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public override object[] GetCustomAttributes (bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object[] GetCustomAttributes(bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.GetCustomAttributes(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCustomAttributes (inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(bool inherit);" />
      <MemberSignature Language="F#" Value="override this.GetCustomAttributes : bool -&gt; obj[]" Usage="methodBuilder.GetCustomAttributes inherit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="inherit">
          <span data-ttu-id="e838e-235">Spécifie s’il faut rechercher les attributs personnalisés dans la chaîne d’héritage de ce membre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-235">Specifies whether to search this member's inheritance chain to find the custom attributes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e838e-236">Retourne tous les attributs personnalisés définis pour cette méthode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-236">Returns all the custom attributes defined for this method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e838e-237">Retourne un tableau d’objets représentant tous les attributs personnalisés de cette méthode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-237">Returns an array of objects representing all the custom attributes of this method.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="e838e-238">Cette méthode n’est pas prise en charge pour l’instant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-238">This method is not currently supported.</span>
          </span>
          <span data-ttu-id="e838e-239">Récupérez la méthode à l’aide de <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> et appelez <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /> sur le <see cref="T:System.Reflection.MethodInfo" /> retourné.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-239">Retrieve the method using <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> and call <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /> on the returned <see cref="T:System.Reflection.MethodInfo" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public override object[] GetCustomAttributes (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object[] GetCustomAttributes(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.GetCustomAttributes(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCustomAttributes (attributeType As Type, inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(Type ^ attributeType, bool inherit);" />
      <MemberSignature Language="F#" Value="override this.GetCustomAttributes : Type * bool -&gt; obj[]" Usage="methodBuilder.GetCustomAttributes (attributeType, inherit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType">
          <span data-ttu-id="e838e-240">Type d’attribut personnalisé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-240">The custom attribute type.</span>
          </span>
        </param>
        <param name="inherit">
          <span data-ttu-id="e838e-241">Spécifie s’il faut rechercher les attributs personnalisés dans la chaîne d’héritage de ce membre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-241">Specifies whether to search this member's inheritance chain to find the custom attributes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e838e-242">Retourne les attributs personnalisés identifiés par le type donné.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-242">Returns the custom attributes identified by the given type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e838e-243">Retourne un tableau d'objets représentant les attributs de cette méthode dont le type est <paramref name="attributeType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-243">Returns an array of objects representing the attributes of this method that are of type <paramref name="attributeType" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="e838e-244">Cette méthode n’est pas prise en charge pour l’instant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-244">This method is not currently supported.</span>
          </span>
          <span data-ttu-id="e838e-245">Récupérez la méthode à l’aide de <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> et appelez <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /> sur le <see cref="T:System.Reflection.MethodInfo" /> retourné.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-245">Retrieve the method using <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> and call <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /> on the returned <see cref="T:System.Reflection.MethodInfo" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetGenericArguments">
      <MemberSignature Language="C#" Value="public override Type[] GetGenericArguments ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type[] GetGenericArguments() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.GetGenericArguments" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetGenericArguments () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;Type ^&gt; ^ GetGenericArguments();" />
      <MemberSignature Language="F#" Value="override this.GetGenericArguments : unit -&gt; Type[]" Usage="methodBuilder.GetGenericArguments " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e838e-246">Retourne un tableau d’objets <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> qui représentent les paramètres de type de la méthode, si elle est générique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-246">Returns an array of <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> objects that represent the type parameters of the method, if it is generic.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e838e-247">Tableau d’objets <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> représentant les paramètres de type, si la méthode est générique, ou <see langword="null" /> si la méthode n’est pas générique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-247">An array of <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> objects representing the type parameters, if the method is generic, or <see langword="null" /> if the method is not generic.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e838e-248">Les paramètres de type d’une méthode générique sont également retournés par la <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> méthode qui est utilisée pour les définir.</span><span class="sxs-lookup"><span data-stu-id="e838e-248">The type parameters of a generic method also are returned by the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> method that is used to define them.</span></span>  
  
 <span data-ttu-id="e838e-249">Pour plus d’informations, consultez <xref:System.Reflection.MethodBase.IsGenericMethod%2A?displayProperty=nameWithType> et <xref:System.Reflection.MethodInfo.GetGenericArguments%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="e838e-249">For more information, see <xref:System.Reflection.MethodBase.IsGenericMethod%2A?displayProperty=nameWithType> and <xref:System.Reflection.MethodInfo.GetGenericArguments%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="e838e-250">Pour plus d’informations sur les types génériques, consultez <xref:System.Type.IsGenericType%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="e838e-250">For information on generic types, see <xref:System.Type.IsGenericType%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="P:System.Type.IsGenericType" />
      </Docs>
    </Member>
    <Member MemberName="GetGenericMethodDefinition">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodInfo GetGenericMethodDefinition ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.MethodInfo GetGenericMethodDefinition() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.GetGenericMethodDefinition" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetGenericMethodDefinition () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Reflection::MethodInfo ^ GetGenericMethodDefinition();" />
      <MemberSignature Language="F#" Value="override this.GetGenericMethodDefinition : unit -&gt; System.Reflection.MethodInfo" Usage="methodBuilder.GetGenericMethodDefinition " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e838e-251">Retourne cette méthode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-251">Returns this method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e838e-252">Instance actuelle de <see cref="T:System.Reflection.Emit.MethodBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-252">The current instance of <see cref="T:System.Reflection.Emit.MethodBuilder" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e838e-253">Un <xref:System.Reflection.Emit.MethodBuilder> ne peut pas être utilisé pour émettre une méthode générique construite directement.</span><span class="sxs-lookup"><span data-stu-id="e838e-253">A <xref:System.Reflection.Emit.MethodBuilder> cannot be used to emit a constructed generic method directly.</span></span> <span data-ttu-id="e838e-254">La méthode émise est une définition de méthode générique.</span><span class="sxs-lookup"><span data-stu-id="e838e-254">The emitted method is a generic method definition.</span></span>  
  
 <span data-ttu-id="e838e-255">Pour plus d’informations, consultez <xref:System.Reflection.MethodBase.IsGenericMethod%2A?displayProperty=nameWithType> et <xref:System.Reflection.MethodInfo.GetGenericMethodDefinition%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="e838e-255">For more information, see <xref:System.Reflection.MethodBase.IsGenericMethod%2A?displayProperty=nameWithType> and <xref:System.Reflection.MethodInfo.GetGenericMethodDefinition%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="e838e-256">Pour plus d’informations sur les types génériques, consultez <xref:System.Type.IsGenericType%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="e838e-256">For information on generic types, see <xref:System.Type.IsGenericType%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e838e-257">La méthode actuelle n’est pas générique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-257">The current method is not generic.</span>
          </span>
          <span data-ttu-id="e838e-258">Autrement dit, la propriété <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> retourne <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-258">That is, the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> property returns <see langword="false" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="P:System.Type.IsGenericType" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="methodBuilder.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e838e-259">Obtient le code de hachage de cette méthode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-259">Gets the hash code for this method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e838e-260">Code de hachage de cette méthode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-260">The hash code for this method.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetILGenerator">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e838e-261">Retourne un <see langword="ILGenerator" /> pour cette méthode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-261">Returns an <see langword="ILGenerator" /> for this method.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetILGenerator">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.ILGenerator GetILGenerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.ILGenerator GetILGenerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.GetILGenerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetILGenerator () As ILGenerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::ILGenerator ^ GetILGenerator();" />
      <MemberSignature Language="F#" Value="member this.GetILGenerator : unit -&gt; System.Reflection.Emit.ILGenerator" Usage="methodBuilder.GetILGenerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.ILGenerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e838e-262">Retourne un <see langword="ILGenerator" /> pour cette méthode avec une taille de flux MSIL (Microsoft Intermediate Language) par défaut de 64 octets.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-262">Returns an <see langword="ILGenerator" /> for this method with a default Microsoft intermediate language (MSIL) stream size of 64 bytes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e838e-263">Retourne un objet <see langword="ILGenerator" /> pour cette méthode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-263">Returns an <see langword="ILGenerator" /> object for this method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e838e-264">L’exemple de code ci-dessous illustre l’utilisation contextuelle de la `GetILGenerator` (méthode), créant et en émettant un assembly dynamique qui calcule le produit scalaire de deux points dans l’espace 3D.</span><span class="sxs-lookup"><span data-stu-id="e838e-264">The code sample below demonstrates the contextual usage of the `GetILGenerator` method, creating and emitting a dynamic assembly that will calculate the dot product of two points in 3D space.</span></span>  
  
 [!code-cpp[System.Reflection.Emit ILGenerator Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit ILGenerator Example/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit ILGenerator Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit ILGenerator Example/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit ILGenerator Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit ILGenerator Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e838e-265">La méthode ne doit pas avoir de corps en raison de ses indicateurs <see cref="T:System.Reflection.MethodAttributes" /> ou <see cref="T:System.Reflection.MethodImplAttributes" /> (par exemple, l’indicateur <see cref="F:System.Reflection.MethodAttributes.PinvokeImpl" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-265">The method should not have a body because of its <see cref="T:System.Reflection.MethodAttributes" /> or <see cref="T:System.Reflection.MethodImplAttributes" /> flags, for example because it has the <see cref="F:System.Reflection.MethodAttributes.PinvokeImpl" /> flag.</span>
          </span>
          <span data-ttu-id="e838e-266">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-266">-or-</span>
          </span>
          <span data-ttu-id="e838e-267">La méthode est une méthode générique, mais pas une définition de méthode générique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-267">The method is a generic method, but not a generic method definition.</span>
          </span>
          <span data-ttu-id="e838e-268">Autrement dit, la propriété <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> est <see langword="true" />, mais la propriété <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> est <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-268">That is, the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> property is <see langword="false" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetILGenerator">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.ILGenerator GetILGenerator (int size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.ILGenerator GetILGenerator(int32 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.GetILGenerator(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetILGenerator (size As Integer) As ILGenerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::ILGenerator ^ GetILGenerator(int size);" />
      <MemberSignature Language="F#" Value="member this.GetILGenerator : int -&gt; System.Reflection.Emit.ILGenerator" Usage="methodBuilder.GetILGenerator size" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.ILGenerator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="size">
          <span data-ttu-id="e838e-269">Taille du flux MSIL, en octets.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-269">The size of the MSIL stream, in bytes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e838e-270">Retourne un <see langword="ILGenerator" /> pour cette méthode avec la taille du flux MSIL (Microsoft Intermediate Language) spécifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-270">Returns an <see langword="ILGenerator" /> for this method with the specified Microsoft intermediate language (MSIL) stream size.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e838e-271">Retourne un objet <see langword="ILGenerator" /> pour cette méthode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-271">Returns an <see langword="ILGenerator" /> object for this method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e838e-272">L’exemple de code ci-dessous illustre l’utilisation contextuelle de la `GetILGenerator` (méthode), créant et en émettant un assembly dynamique qui calcule le produit scalaire de deux points dans l’espace 3D.</span><span class="sxs-lookup"><span data-stu-id="e838e-272">The code sample below demonstrates the contextual usage of the `GetILGenerator` method, creating and emitting a dynamic assembly that will calculate the dot product of two points in 3D space.</span></span>  
  
 [!code-cpp[System.Reflection.Emit ILGenerator Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit ILGenerator Example/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit ILGenerator Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit ILGenerator Example/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit ILGenerator Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit ILGenerator Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e838e-273">La méthode ne doit pas avoir de corps en raison de ses indicateurs <see cref="T:System.Reflection.MethodAttributes" /> ou <see cref="T:System.Reflection.MethodImplAttributes" /> (par exemple, l’indicateur <see cref="F:System.Reflection.MethodAttributes.PinvokeImpl" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-273">The method should not have a body because of its <see cref="T:System.Reflection.MethodAttributes" /> or <see cref="T:System.Reflection.MethodImplAttributes" /> flags, for example because it has the <see cref="F:System.Reflection.MethodAttributes.PinvokeImpl" /> flag.</span>
          </span>
          <span data-ttu-id="e838e-274">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-274">-or-</span>
          </span>
          <span data-ttu-id="e838e-275">La méthode est une méthode générique, mais pas une définition de méthode générique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-275">The method is a generic method, but not a generic method definition.</span>
          </span>
          <span data-ttu-id="e838e-276">Autrement dit, la propriété <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> est <see langword="true" />, mais la propriété <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> est <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-276">That is, the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> property is <see langword="false" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetMethodImplementationFlags">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodImplAttributes GetMethodImplementationFlags ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Reflection.MethodImplAttributes GetMethodImplementationFlags() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.GetMethodImplementationFlags" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMethodImplementationFlags () As MethodImplAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Reflection::MethodImplAttributes GetMethodImplementationFlags();" />
      <MemberSignature Language="F#" Value="override this.GetMethodImplementationFlags : unit -&gt; System.Reflection.MethodImplAttributes" Usage="methodBuilder.GetMethodImplementationFlags " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodImplAttributes</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e838e-277">Retourne les indicateurs d’implémentation pour la méthode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-277">Returns the implementation flags for the method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e838e-278">Retourne les indicateurs d’implémentation pour la méthode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-278">Returns the implementation flags for the method.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetModule">
      <MemberSignature Language="C#" Value="public System.Reflection.Module GetModule ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Module GetModule() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.GetModule" />
      <MemberSignature Language="VB.NET" Value="Public Function GetModule () As Module" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Module ^ GetModule();" />
      <MemberSignature Language="F#" Value="member this.GetModule : unit -&gt; System.Reflection.Module" Usage="methodBuilder.GetModule " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Module</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e838e-279">Retourne une référence au module qui contient cette méthode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-279">Returns a reference to the module that contains this method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e838e-280">Retourne une référence au module qui contient cette méthode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-280">Returns a reference to the module that contains this method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e838e-281">L’exemple de code ci-dessous illustre l’utilisation de la `GetModule` méthode pour récupérer des informations sur un module généré dynamiquement.</span><span class="sxs-lookup"><span data-stu-id="e838e-281">The sample code below illustrates the usage of the `GetModule` method to retrieve information about a dynamically-generated module.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.MethodBuilder.GetModule#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.GetModule/CPP/source3.cpp#1)]
 [!code-csharp[System.Reflection.Emit.MethodBuilder.GetModule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.GetModule/CS/source3.cs#1)]
 [!code-vb[System.Reflection.Emit.MethodBuilder.GetModule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.GetModule/VB/source3.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetParameters">
      <MemberSignature Language="C#" Value="public override System.Reflection.ParameterInfo[] GetParameters ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.ParameterInfo[] GetParameters() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.GetParameters" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetParameters () As ParameterInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::ParameterInfo ^&gt; ^ GetParameters();" />
      <MemberSignature Language="F#" Value="override this.GetParameters : unit -&gt; System.Reflection.ParameterInfo[]" Usage="methodBuilder.GetParameters " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ParameterInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e838e-282">Retourne les paramètres de cette méthode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-282">Returns the parameters of this method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e838e-283">Tableau d’objets <see langword="ParameterInfo" /> qui représentent les paramètres de la méthode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-283">An array of <see langword="ParameterInfo" /> objects that represent the parameters of the method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e838e-284">L’exemple de code ci-dessous illustre l’utilisation de `GetParameters` pour découvrir des informations sur les paramètres passés à une méthode générée dynamiquement.</span><span class="sxs-lookup"><span data-stu-id="e838e-284">The code sample below illustrates the use of `GetParameters` to discover information on the parameters passed to a dynamically-generated method.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.MethodBuilder.GetParameters Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.GetParameters Example/CPP/source4.cpp#1)]
 [!code-csharp[System.Reflection.Emit.MethodBuilder.GetParameters Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.GetParameters Example/CS/source4.cs#1)]
 [!code-vb[System.Reflection.Emit.MethodBuilder.GetParameters Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.GetParameters Example/VB/source4.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="e838e-285">Cette méthode n’est pas prise en charge pour l’instant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-285">This method is not currently supported.</span>
          </span>
          <span data-ttu-id="e838e-286">Récupérez la méthode à l’aide de <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> et appelez <see langword="GetParameters" /> sur le <see cref="T:System.Reflection.MethodInfo" /> retourné.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-286">Retrieve the method using <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> and call <see langword="GetParameters" /> on the returned <see cref="T:System.Reflection.MethodInfo" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetToken">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.MethodToken GetToken ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Reflection.Emit.MethodToken GetToken() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.GetToken" />
      <MemberSignature Language="VB.NET" Value="Public Function GetToken () As MethodToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::MethodToken GetToken();" />
      <MemberSignature Language="F#" Value="member this.GetToken : unit -&gt; System.Reflection.Emit.MethodToken" Usage="methodBuilder.GetToken " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.MethodToken</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e838e-287">Retourne le <see langword="MethodToken" /> représentant le jeton de cette méthode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-287">Returns the <see langword="MethodToken" /> that represents the token for this method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e838e-288">Retourne le <see langword="MethodToken" /> de cette méthode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-288">Returns the <see langword="MethodToken" /> of this method.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitLocals">
      <MemberSignature Language="C#" Value="public bool InitLocals { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool InitLocals" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.MethodBuilder.InitLocals" />
      <MemberSignature Language="VB.NET" Value="Public Property InitLocals As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool InitLocals { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.InitLocals : bool with get, set" Usage="System.Reflection.Emit.MethodBuilder.InitLocals" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e838e-289">Obtient ou définit une valeur booléenne qui indique si les variables locales de la méthode sont initialisées à zéro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-289">Gets or sets a Boolean value that specifies whether the local variables in this method are zero initialized.</span>
          </span>
          <span data-ttu-id="e838e-290">La valeur par défaut de cette propriété est <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-290">The default value of this property is <see langword="true" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e838e-291">
            <see langword="true" /> si les variables locales dans la méthode doivent être initialisées à zéro ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-291">
              <see langword="true" /> if the local variables in this method should be zero initialized; otherwise <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e838e-292">Si cette propriété est définie sur `true`, MSIL émis comprend l’initialisation de variables locales.</span><span class="sxs-lookup"><span data-stu-id="e838e-292">If this property is set to `true`, the emitted MSIL includes initialization of local variables.</span></span> <span data-ttu-id="e838e-293">Si elle est définie sur `false`, les variables locales ne sont pas initialisées et le code généré est non vérifiable.</span><span class="sxs-lookup"><span data-stu-id="e838e-293">If it is set to `false`, local variables are not initialized and the generated code is unverifiable.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e838e-294">Pour la méthode actuelle, la propriété <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> est <see langword="true" />, mais la propriété <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> est <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-294">For the current method, the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> property is <see langword="false" />.</span>
          </span>
          <span data-ttu-id="e838e-295">(Get ou set).</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-295">(Get or set.)</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public override object Invoke (object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object Invoke(object obj, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object[] parameters, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ Invoke(System::Object ^ obj, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ parameters, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="override this.Invoke : obj * System.Reflection.BindingFlags * System.Reflection.Binder * obj[] * System.Globalization.CultureInfo -&gt; obj" Usage="methodBuilder.Invoke (obj, invokeAttr, binder, parameters, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="parameters" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="e838e-296">Objet sur lequel appeler la méthode spécifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-296">The object on which to invoke the specified method.</span>
          </span>
          <span data-ttu-id="e838e-297">Si la méthode est statique, ce paramètre est ignoré.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-297">If the method is static, this parameter is ignored.</span>
          </span>
        </param>
        <param name="invokeAttr">
          <span data-ttu-id="e838e-298">Il doit s'agir d'un bit indicateur de <see cref="T:System.Reflection.BindingFlags" /> : <see langword="InvokeMethod" />, <see langword="NonPublic" />, etc.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-298">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" /> : <see langword="InvokeMethod" />, <see langword="NonPublic" />, and so on.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="e838e-299">Objet qui active la liaison, la contrainte de types d’arguments, l’appel des membres et la récupération des objets MemberInfo par le biais de la réflexion.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-299">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of MemberInfo objects via reflection.</span>
          </span>
          <span data-ttu-id="e838e-300">Si le binder est <see langword="null" />, le binder par défaut est utilisé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-300">If binder is <see langword="null" />, the default binder is used.</span>
          </span>
          <span data-ttu-id="e838e-301">Pour plus d'informations, consultez <see cref="T:System.Reflection.Binder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-301">For more details, see <see cref="T:System.Reflection.Binder" />.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="e838e-302">Liste d’arguments.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-302">An argument list.</span>
          </span>
          <span data-ttu-id="e838e-303">Il s’agit d’un tableau d’arguments possédant les mêmes nombre, ordre et type que les paramètres de la méthode à appeler.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-303">This is an array of arguments with the same number, order, and type as the parameters of the method to be invoked.</span>
          </span>
          <span data-ttu-id="e838e-304">En l'absence de paramètres, la valeur est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-304">If there are no parameters this should be <see langword="null" />.</span>
          </span>
        </param>
        <param name="culture">
          <span data-ttu-id="e838e-305">Instance de <see cref="T:System.Globalization.CultureInfo" /> utilisée pour régir la contrainte des types.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-305">An instance of <see cref="T:System.Globalization.CultureInfo" /> used to govern the coercion of types.</span>
          </span>
          <span data-ttu-id="e838e-306">Si la valeur est null, <see cref="T:System.Globalization.CultureInfo" /> du thread en cours est utilisé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-306">If this is null, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.</span>
          </span>
          <span data-ttu-id="e838e-307">(Par exemple, cela est nécessaire pour la conversion d'un <see cref="T:System.String" /> représentant 1000 en une valeur <see cref="T:System.Double" />, car 1000 est représenté de différentes manières selon la culture.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-307">(Note that this is necessary to, for example, convert a <see cref="T:System.String" /> that represents 1000 to a <see cref="T:System.Double" /> value, since 1000 is represented differently by different cultures.)</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e838e-308">Appelle de manière dynamique la méthode réfléchie par cette instance sur l’objet donné, en passant les paramètres spécifiés et en tenant compte des contraintes du binder donné.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-308">Dynamically invokes the method reflected by this instance on the given object, passing along the specified parameters, and under the constraints of the given binder.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e838e-309">Retourne un objet contenant la valeur de retour de la méthode appelée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-309">Returns an object containing the return value of the invoked method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e838e-310">Si la méthode est statique, le `obj` paramètre est ignoré.</span><span class="sxs-lookup"><span data-stu-id="e838e-310">If the method is static, the `obj` parameter is ignored.</span></span> <span data-ttu-id="e838e-311">Pour les méthodes non statiques, `obj` doit être une instance d’une classe qui hérite ou déclare la méthode doit être du même type que cette classe.</span><span class="sxs-lookup"><span data-stu-id="e838e-311">For non-static methods, `obj` should be an instance of a class that inherits or declares the method and must be the same type as this class.</span></span> <span data-ttu-id="e838e-312">Si la méthode n’a aucun paramètre, la valeur de `parameters` doit être `null`.</span><span class="sxs-lookup"><span data-stu-id="e838e-312">If the method has no parameters, the value of `parameters` should be `null`.</span></span> <span data-ttu-id="e838e-313">Sinon, le nombre, le type et l’ordre des éléments dans le tableau de paramètres doivent être identiques sur le nombre, le type et l’ordre des paramètres de la méthode réfléchie par cette instance.</span><span class="sxs-lookup"><span data-stu-id="e838e-313">Otherwise the number, type, and order of elements in the parameters array should be identical to the number, type, and order of parameters for the method reflected by this instance.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e838e-314">Restrictions d’accès sont ignorées pour le code de confiance.</span><span class="sxs-lookup"><span data-stu-id="e838e-314">Access restrictions are ignored for fully-trusted code.</span></span> <span data-ttu-id="e838e-315">Autrement dit, propriétés, méthodes, champs et constructeurs privés sont accessibles et appelé à l’aide de la réflexion chaque fois que le code est entièrement fiables.</span><span class="sxs-lookup"><span data-stu-id="e838e-315">That is, private constructors, methods, fields, and properties can be accessed and invoked using Reflection whenever the code is fully-trusted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="e838e-316">Cette méthode n’est pas prise en charge pour l’instant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-316">This method is not currently supported.</span>
          </span>
          <span data-ttu-id="e838e-317">Récupérez la méthode à l’aide de <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> et appelez <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> sur le <see cref="T:System.Reflection.MethodInfo" /> retourné.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-317">Retrieve the method using <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> and call <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> on the returned <see cref="T:System.Reflection.MethodInfo" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="IsConstructedGenericMethod">
      <MemberSignature Language="C#" Value="public override bool IsConstructedGenericMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsConstructedGenericMethod" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.MethodBuilder.IsConstructedGenericMethod" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsConstructedGenericMethod As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsConstructedGenericMethod { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsConstructedGenericMethod : bool" Usage="System.Reflection.Emit.MethodBuilder.IsConstructedGenericMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDefined">
      <MemberSignature Language="C#" Value="public override bool IsDefined (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsDefined(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.IsDefined(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsDefined (attributeType As Type, inherit As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsDefined(Type ^ attributeType, bool inherit);" />
      <MemberSignature Language="F#" Value="override this.IsDefined : Type * bool -&gt; bool" Usage="methodBuilder.IsDefined (attributeType, inherit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType">
          <span data-ttu-id="e838e-318">Type d’attribut personnalisé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-318">The custom attribute type.</span>
          </span>
        </param>
        <param name="inherit">
          <span data-ttu-id="e838e-319">Spécifie s’il faut rechercher les attributs personnalisés dans la chaîne d’héritage de ce membre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-319">Specifies whether to search this member's inheritance chain to find the custom attributes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e838e-320">Vérifie si le type d’attribut personnalisé spécifié est défini.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-320">Checks if the specified custom attribute type is defined.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e838e-321">
            <see langword="true" /> si le type d'attribut personnalisé spécifié est défini ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-321">
              <see langword="true" /> if the specified custom attribute type is defined; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="e838e-322">Cette méthode n’est pas prise en charge pour l’instant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-322">This method is not currently supported.</span>
          </span>
          <span data-ttu-id="e838e-323">Récupérez la méthode à l’aide de <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> et appelez <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /> sur le <see cref="T:System.Reflection.MethodInfo" /> retourné.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-323">Retrieve the method using <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> and call <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /> on the returned <see cref="T:System.Reflection.MethodInfo" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="IsGenericMethod">
      <MemberSignature Language="C#" Value="public override bool IsGenericMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGenericMethod" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsGenericMethod As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsGenericMethod { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsGenericMethod : bool" Usage="System.Reflection.Emit.MethodBuilder.IsGenericMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e838e-324">Obtient une valeur indiquant si la méthode est une méthode générique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-324">Gets a value indicating whether the method is a generic method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e838e-325">
            <see langword="true" /> si la méthode est générique ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-325">
              <see langword="true" /> if the method is generic; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e838e-326">Une méthode est générique si elle possède des paramètres de type.</span><span class="sxs-lookup"><span data-stu-id="e838e-326">A method is generic if it has type parameters.</span></span> <span data-ttu-id="e838e-327">Vous pouvez rendre une méthode générique en appelant le <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> méthode pour ajouter des paramètres de type.</span><span class="sxs-lookup"><span data-stu-id="e838e-327">You can make a method generic by calling the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> method to add type parameters.</span></span> <span data-ttu-id="e838e-328">Cette modification ne peut pas être annulée.</span><span class="sxs-lookup"><span data-stu-id="e838e-328">This change cannot be reversed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e838e-329">L’exemple de code suivant affiche l’état d’une méthode.</span><span class="sxs-lookup"><span data-stu-id="e838e-329">The following code example displays the status of a method.</span></span> <span data-ttu-id="e838e-330">Ce code fait partie d’un exemple plus complet fourni pour le <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="e838e-330">This code is part of a larger example provided for the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> method.</span></span>  
  
 [!code-cpp[GenericMethodBuilder#7](~/samples/snippets/cpp/VS_Snippets_CLR/GenericMethodBuilder/cpp/source.cpp#7)]
 [!code-csharp[GenericMethodBuilder#7](~/samples/snippets/csharp/VS_Snippets_CLR/GenericMethodBuilder/CS/source.cs#7)]
 [!code-vb[GenericMethodBuilder#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/GenericMethodBuilder/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsGenericMethodDefinition">
      <MemberSignature Language="C#" Value="public override bool IsGenericMethodDefinition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGenericMethodDefinition" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsGenericMethodDefinition As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsGenericMethodDefinition { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsGenericMethodDefinition : bool" Usage="System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e838e-331">Obtient une valeur indiquant si l’objet <see cref="T:System.Reflection.Emit.MethodBuilder" /> actuel représente la définition d’une méthode générique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-331">Gets a value indicating whether the current <see cref="T:System.Reflection.Emit.MethodBuilder" /> object represents the definition of a generic method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e838e-332">
            <see langword="true" /> si l’objet <see cref="T:System.Reflection.Emit.MethodBuilder" /> actuel représente la définition d’une méthode générique ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-332">
              <see langword="true" /> if the current <see cref="T:System.Reflection.Emit.MethodBuilder" /> object represents the definition of a generic method; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e838e-333">Un <xref:System.Reflection.Emit.MethodBuilder> peut uniquement être utilisé pour créer des définitions de méthode générique ; il ne peut pas être utilisé pour créer une méthode générique construite directement.</span><span class="sxs-lookup"><span data-stu-id="e838e-333">A <xref:System.Reflection.Emit.MethodBuilder> can only be used to create generic method definitions; it cannot be used to create a constructed generic method directly.</span></span> <span data-ttu-id="e838e-334">Toutefois, une sous-classe de <xref:System.Reflection.Emit.MethodBuilder> peut représenter une méthode générique construite.</span><span class="sxs-lookup"><span data-stu-id="e838e-334">However, a subclass of <xref:System.Reflection.Emit.MethodBuilder> might represent a constructed generic method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e838e-335">L’exemple de code suivant affiche l’état d’une méthode.</span><span class="sxs-lookup"><span data-stu-id="e838e-335">The following code example displays the status of a method.</span></span> <span data-ttu-id="e838e-336">Ce code fait partie d’un exemple plus complet fourni pour le <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="e838e-336">This code is part of a larger example provided for the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> method.</span></span>  
  
 [!code-cpp[GenericMethodBuilder#7](~/samples/snippets/cpp/VS_Snippets_CLR/GenericMethodBuilder/cpp/source.cpp#7)]
 [!code-csharp[GenericMethodBuilder#7](~/samples/snippets/csharp/VS_Snippets_CLR/GenericMethodBuilder/CS/source.cs#7)]
 [!code-vb[GenericMethodBuilder#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/GenericMethodBuilder/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSecurityCritical">
      <MemberSignature Language="C#" Value="public override bool IsSecurityCritical { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecurityCritical" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.MethodBuilder.IsSecurityCritical" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSecurityCritical As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecurityCritical { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSecurityCritical : bool" Usage="System.Reflection.Emit.MethodBuilder.IsSecurityCritical" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e838e-337">Lève une exception <see cref="T:System.NotSupportedException" /> dans tous les cas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-337">Throws a <see cref="T:System.NotSupportedException" /> in all cases.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e838e-338">Lève une exception <see cref="T:System.NotSupportedException" /> dans tous les cas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-338">Throws a <see cref="T:System.NotSupportedException" /> in all cases.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e838e-339">Pour déterminer si une méthode dans un assembly dynamique est critique de sécurité, complétez le type en appelant <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=nameWithType>, appelez le <xref:System.Type.GetMethod%2A> méthode sur le type terminé et obtenez le <xref:System.Reflection.MethodBase.IsSecurityCritical%2A> propriété sur le <xref:System.Reflection.MethodInfo>.</span><span class="sxs-lookup"><span data-stu-id="e838e-339">To determine whether a method in a dynamic assembly is security-critical, complete the type by calling <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=nameWithType>, call the <xref:System.Type.GetMethod%2A> method on the completed type, and get the <xref:System.Reflection.MethodBase.IsSecurityCritical%2A> property on the resulting <xref:System.Reflection.MethodInfo>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="e838e-340">Dans tous les cas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-340">In all cases.</span>
          </span>
          <span data-ttu-id="e838e-341">Cette propriété n’est pas pris en charge dans les assemblys dynamiques.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-341">This property is not supported in dynamic assemblies.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="IsSecuritySafeCritical">
      <MemberSignature Language="C#" Value="public override bool IsSecuritySafeCritical { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecuritySafeCritical" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.MethodBuilder.IsSecuritySafeCritical" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSecuritySafeCritical As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecuritySafeCritical { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSecuritySafeCritical : bool" Usage="System.Reflection.Emit.MethodBuilder.IsSecuritySafeCritical" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e838e-342">Lève une exception <see cref="T:System.NotSupportedException" /> dans tous les cas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-342">Throws a <see cref="T:System.NotSupportedException" /> in all cases.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e838e-343">Lève une exception <see cref="T:System.NotSupportedException" /> dans tous les cas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-343">Throws a <see cref="T:System.NotSupportedException" /> in all cases.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e838e-344">Pour déterminer si une méthode dans un assembly dynamique est critique sécurisé, complétez le type en appelant <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=nameWithType>, appelez le <xref:System.Type.GetMethod%2A> méthode sur le type terminé et obtenez le <xref:System.Reflection.MethodBase.IsSecuritySafeCritical%2A> propriété sur le <xref:System.Reflection.MethodInfo>.</span><span class="sxs-lookup"><span data-stu-id="e838e-344">To determine whether a method in a dynamic assembly is security-safe-critical, complete the type by calling <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=nameWithType>, call the <xref:System.Type.GetMethod%2A> method on the completed type, and get the <xref:System.Reflection.MethodBase.IsSecuritySafeCritical%2A> property on the resulting <xref:System.Reflection.MethodInfo>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="e838e-345">Dans tous les cas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-345">In all cases.</span>
          </span>
          <span data-ttu-id="e838e-346">Cette propriété n’est pas pris en charge dans les assemblys dynamiques.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-346">This property is not supported in dynamic assemblies.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="IsSecurityTransparent">
      <MemberSignature Language="C#" Value="public override bool IsSecurityTransparent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecurityTransparent" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.MethodBuilder.IsSecurityTransparent" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSecurityTransparent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecurityTransparent { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSecurityTransparent : bool" Usage="System.Reflection.Emit.MethodBuilder.IsSecurityTransparent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e838e-347">Lève une exception <see cref="T:System.NotSupportedException" /> dans tous les cas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-347">Throws a <see cref="T:System.NotSupportedException" /> in all cases.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e838e-348">Lève une exception <see cref="T:System.NotSupportedException" /> dans tous les cas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-348">Throws a <see cref="T:System.NotSupportedException" /> in all cases.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e838e-349">Pour déterminer si une méthode dans un assembly dynamique est transparent de sécurité, complétez le type en appelant <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=nameWithType>, appelez le <xref:System.Type.GetMethod%2A> méthode sur le type terminé et obtenez le <xref:System.Reflection.MethodBase.IsSecurityTransparent%2A> propriété sur le <xref:System.Reflection.MethodInfo>.</span><span class="sxs-lookup"><span data-stu-id="e838e-349">To determine whether a method in a dynamic assembly is security-transparent, complete the type by calling <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=nameWithType>, call the <xref:System.Type.GetMethod%2A> method on the completed type, and get the <xref:System.Reflection.MethodBase.IsSecurityTransparent%2A> property on the resulting <xref:System.Reflection.MethodInfo>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="e838e-350">Dans tous les cas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-350">In all cases.</span>
          </span>
          <span data-ttu-id="e838e-351">Cette propriété n’est pas pris en charge dans les assemblys dynamiques.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-351">This property is not supported in dynamic assemblies.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="MakeGenericMethod">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodInfo MakeGenericMethod (params Type[] typeArguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.MethodInfo MakeGenericMethod(class System.Type[] typeArguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.MakeGenericMethod(System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MakeGenericMethod (ParamArray typeArguments As Type()) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Reflection::MethodInfo ^ MakeGenericMethod(... cli::array &lt;Type ^&gt; ^ typeArguments);" />
      <MemberSignature Language="F#" Value="override this.MakeGenericMethod : Type[] -&gt; System.Reflection.MethodInfo" Usage="methodBuilder.MakeGenericMethod typeArguments" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeArguments" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="typeArguments">
          <span data-ttu-id="e838e-352">Tableau d’objets <see cref="T:System.Type" /> qui représentent les arguments de type de la méthode générique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-352">An array of <see cref="T:System.Type" /> objects that represent the type arguments for the generic method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e838e-353">Retourne une méthode générique construite à partir de la définition de méthode générique actuelle avec les arguments de type générique spécifiés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-353">Returns a generic method constructed from the current generic method definition using the specified generic type arguments.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e838e-354">
            <see cref="T:System.Reflection.MethodInfo" /> représentant la méthode générique construite à partir de la définition de méthode générique actuelle avec les arguments de type générique spécifiés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-354">A <see cref="T:System.Reflection.MethodInfo" /> representing the generic method constructed from the current generic method definition using the specified generic type arguments.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e838e-355">Lorsque vous émettez du code dynamique, vous devrez peut-être émettre un appel à une méthode construite à partir de la définition de méthode générique représentée par un <xref:System.Reflection.Emit.MethodBuilder>, avant que le type englobant est terminé.</span><span class="sxs-lookup"><span data-stu-id="e838e-355">When you are emitting dynamic code, you might need to emit a call to a method constructed from the generic method definition represented by a <xref:System.Reflection.Emit.MethodBuilder>, before the enclosing type has been completed.</span></span> <span data-ttu-id="e838e-356">Vous pouvez utiliser la <xref:System.Reflection.Emit.MethodBuilder.MakeGenericMethod%2A> méthode pour créer un <xref:System.Reflection.MethodInfo> à une telle méthode construite et utiliser le <xref:System.Reflection.MethodInfo> dans l’appel émis.</span><span class="sxs-lookup"><span data-stu-id="e838e-356">You can use the <xref:System.Reflection.Emit.MethodBuilder.MakeGenericMethod%2A> method to create a <xref:System.Reflection.MethodInfo> for such a constructed method, and use the <xref:System.Reflection.MethodInfo> in the emitted call.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e838e-357">L’exemple de code suivant crée une méthode construite à partir d’une définition de méthode générique incomplète dans un type incomplet.</span><span class="sxs-lookup"><span data-stu-id="e838e-357">The following code example creates a constructed method from an incomplete generic method definition in an incomplete type.</span></span>  
  
 <span data-ttu-id="e838e-358">L’exemple crée un module et un assembly temporaire avec un seul type, ajoute une méthode `M`et rend la méthode générique en ajoutant un paramètre T de type à l’aide de la <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="e838e-358">The example creates a transient assembly and module with a single type, adds a method `M`, and makes the method generic by adding a type parameter T using the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> method.</span></span> <span data-ttu-id="e838e-359">Le paramètre de type est utilisé comme type de paramètre de la méthode et également en tant que son type de retour.</span><span class="sxs-lookup"><span data-stu-id="e838e-359">The type parameter is used as the type of the method's parameter, and also as its return type.</span></span> <span data-ttu-id="e838e-360">La définition de méthode générique n’est pas spécifiée un corps et le type englobant n’est pas terminé.</span><span class="sxs-lookup"><span data-stu-id="e838e-360">The generic method definition is not given a body, and the enclosing type is not completed.</span></span> <span data-ttu-id="e838e-361">Le <xref:System.Reflection.Emit.MethodBuilder.MakeGenericMethod%2A> méthode est ensuite utilisée pour rendre la méthode construite `M<String>` (`M(Of String)` en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="e838e-361">The <xref:System.Reflection.Emit.MethodBuilder.MakeGenericMethod%2A> method is then used to make the constructed method `M<String>` (`M(Of String)` in Visual Basic).</span></span> <span data-ttu-id="e838e-362">L’exemple de code ne comporte aucune sortie, car la sous-classe de <xref:System.Reflection.MethodInfo> retourné par le <xref:System.Reflection.Emit.MethodBuilder.MakeGenericMethod%2A> (méthode) n’autorise pas la réflexion sur ses paramètres.</span><span class="sxs-lookup"><span data-stu-id="e838e-362">The example code has no output, because the subclass of <xref:System.Reflection.MethodInfo> returned by the <xref:System.Reflection.Emit.MethodBuilder.MakeGenericMethod%2A> method does not allow reflection over its parameters.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e838e-363">Pour un autre exemple de code qui utilise <xref:System.Reflection.Emit.MethodBuilder.MakeGenericMethod%2A>, consultez <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A>.</span><span class="sxs-lookup"><span data-stu-id="e838e-363">For another code example that uses <xref:System.Reflection.Emit.MethodBuilder.MakeGenericMethod%2A>, see <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A>.</span></span> <span data-ttu-id="e838e-364"><xref:System.Reflection.Emit.MethodBuilder.MakeGenericMethod%2A> est également largement utilisé lors de l’émission de code qui utilise des types génériques.</span><span class="sxs-lookup"><span data-stu-id="e838e-364"><xref:System.Reflection.Emit.MethodBuilder.MakeGenericMethod%2A> is also used extensively when emitting code that uses generic types.</span></span> <span data-ttu-id="e838e-365">Consultez [Comment : définir une méthode générique avec la réflexion émettre](~/docs/framework/reflection-and-codedom/how-to-define-a-generic-method-with-reflection-emit.md).</span><span class="sxs-lookup"><span data-stu-id="e838e-365">See [How to: Define a Generic Method with Reflection Emit](~/docs/framework/reflection-and-codedom/how-to-define-a-generic-method-with-reflection-emit.md).</span></span>  
  
 [!code-cpp[MethodBuilder.MakeGenericMethod#1](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBuilder.MakeGenericMethod/cpp/source.cpp#1)]
 [!code-csharp[MethodBuilder.MakeGenericMethod#1](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBuilder.MakeGenericMethod/cs/source.cs#1)]
 [!code-vb[MethodBuilder.MakeGenericMethod#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBuilder.MakeGenericMethod/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MethodHandle">
      <MemberSignature Language="C#" Value="public override RuntimeMethodHandle MethodHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.RuntimeMethodHandle MethodHandle" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.MethodBuilder.MethodHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property MethodHandle As RuntimeMethodHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property RuntimeMethodHandle MethodHandle { RuntimeMethodHandle get(); };" />
      <MemberSignature Language="F#" Value="member this.MethodHandle : RuntimeMethodHandle" Usage="System.Reflection.Emit.MethodBuilder.MethodHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.RuntimeMethodHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e838e-366">Récupère le handle interne de la méthode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-366">Retrieves the internal handle for the method.</span>
          </span>
          <span data-ttu-id="e838e-367">Utilisez ce handle pour accéder au handle des métadonnées sous-jacentes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-367">Use this handle to access the underlying metadata handle.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e838e-368">Lecture seule.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-368">Read-only.</span>
          </span>
          <span data-ttu-id="e838e-369">Handle interne de la méthode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-369">The internal handle for the method.</span>
          </span>
          <span data-ttu-id="e838e-370">Utilisez ce handle pour accéder au handle des métadonnées sous-jacentes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-370">Use this handle to access the underlying metadata handle.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="e838e-371">Cette méthode n’est pas prise en charge pour l’instant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-371">This method is not currently supported.</span>
          </span>
          <span data-ttu-id="e838e-372">Récupérez la méthode à l’aide de <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> et appelez <see cref="P:System.Reflection.MethodBase.MethodHandle" /> sur le <see cref="T:System.Reflection.MethodInfo" /> retourné.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-372">Retrieve the method using <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> and call <see cref="P:System.Reflection.MethodBase.MethodHandle" /> on the returned <see cref="T:System.Reflection.MethodInfo" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="MethodImplementationFlags">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodImplAttributes MethodImplementationFlags { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.MethodImplAttributes MethodImplementationFlags" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.MethodBuilder.MethodImplementationFlags" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property MethodImplementationFlags As MethodImplAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MethodImplAttributes MethodImplementationFlags { System::Reflection::MethodImplAttributes get(); };" />
      <MemberSignature Language="F#" Value="member this.MethodImplementationFlags : System.Reflection.MethodImplAttributes" Usage="System.Reflection.Emit.MethodBuilder.MethodImplementationFlags" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodImplAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Module">
      <MemberSignature Language="C#" Value="public override System.Reflection.Module Module { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Module Module" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.MethodBuilder.Module" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Module As Module" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::Module ^ Module { System::Reflection::Module ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Module : System.Reflection.Module" Usage="System.Reflection.Emit.MethodBuilder.Module" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Module</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e838e-373">Obtient le module dans lequel la méthode actuelle est définie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-373">Gets the module in which the current method is being defined.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e838e-374">
            <see cref="T:System.Reflection.Module" /> dans lequel le membre représenté par les <see cref="T:System.Reflection.MemberInfo" /> en cours est défini.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-374">The <see cref="T:System.Reflection.Module" /> in which the member represented by the current <see cref="T:System.Reflection.MemberInfo" /> is being defined.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e838e-375">Cette propriété est fournie pour des raisons pratiques.</span><span class="sxs-lookup"><span data-stu-id="e838e-375">This property is provided as a convenience.</span></span> <span data-ttu-id="e838e-376">Il est équivalent à l’utilisation de la <xref:System.Reflection.Emit.MethodBuilder.DeclaringType%2A> propriété pour obtenir le type dans lequel la méthode est déclarée et en appelant le <xref:System.Type.Module%2A> propriété des résultats de <xref:System.Type> objet.</span><span class="sxs-lookup"><span data-stu-id="e838e-376">It is equivalent to using the <xref:System.Reflection.Emit.MethodBuilder.DeclaringType%2A> property to get the type in which the method is being declared, and then calling the <xref:System.Type.Module%2A> property of the resulting <xref:System.Type> object.</span></span>  
  
 <span data-ttu-id="e838e-377">Cette propriété équivaut également à appeler <xref:System.Reflection.Emit.MethodBuilder.GetModule%2A>.</span><span class="sxs-lookup"><span data-stu-id="e838e-377">This property is also equivalent to calling <xref:System.Reflection.Emit.MethodBuilder.GetModule%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public override string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.MethodBuilder.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Reflection.Emit.MethodBuilder.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e838e-378">Récupère le nom de cette méthode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-378">Retrieves the name of this method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e838e-379">Lecture seule.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-379">Read-only.</span>
          </span>
          <span data-ttu-id="e838e-380">Récupère une chaîne contenant le nom simple de cette méthode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-380">Retrieves a string containing the simple name of this method.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReflectedType">
      <MemberSignature Language="C#" Value="public override Type ReflectedType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ReflectedType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.MethodBuilder.ReflectedType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReflectedType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ ReflectedType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReflectedType : Type" Usage="System.Reflection.Emit.MethodBuilder.ReflectedType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e838e-381">Récupère la classe qui a été utilisée dans la réflexion pour obtenir cet objet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-381">Retrieves the class that was used in reflection to obtain this object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e838e-382">Lecture seule.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-382">Read-only.</span>
          </span>
          <span data-ttu-id="e838e-383">Le type qui a été utilisé pour obtenir cette méthode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-383">The type used to obtain this method.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReturnParameter">
      <MemberSignature Language="C#" Value="public override System.Reflection.ParameterInfo ReturnParameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.ParameterInfo ReturnParameter" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.MethodBuilder.ReturnParameter" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReturnParameter As ParameterInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::ParameterInfo ^ ReturnParameter { System::Reflection::ParameterInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReturnParameter : System.Reflection.ParameterInfo" Usage="System.Reflection.Emit.MethodBuilder.ReturnParameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ParameterInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e838e-384">Obtient un objet <see cref="T:System.Reflection.ParameterInfo" /> qui contient des informations relatives au type de retour de la méthode, telles que la présence de modificateurs personnalisés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-384">Gets a <see cref="T:System.Reflection.ParameterInfo" /> object that contains information about the return type of the method, such as whether the return type has custom modifiers.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e838e-385">Objet <see cref="T:System.Reflection.ParameterInfo" /> qui contient des informations sur le type de retour.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-385">A <see cref="T:System.Reflection.ParameterInfo" /> object that contains information about the return type.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e838e-386">Concepteurs de compilateurs peuvent utiliser le <xref:System.Reflection.ParameterInfo> objet retourné par cette propriété pour découvrir si personnalisé modificateurs, tels que <xref:Microsoft.VisualC.IsConstModifier>, ont été appliqués au type de retour.</span><span class="sxs-lookup"><span data-stu-id="e838e-386">Compiler designers can use the <xref:System.Reflection.ParameterInfo> object returned by this property to discover whether custom modifiers, such as <xref:Microsoft.VisualC.IsConstModifier>, have been applied to the return type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e838e-387">Le type de déclaration n’a pas été créé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-387">The declaring type has not been created.</span>
          </span>
        </exception>
        <altmember cref="M:System.Reflection.ParameterInfo.GetOptionalCustomModifiers" />
        <altmember cref="M:System.Reflection.ParameterInfo.GetRequiredCustomModifiers" />
      </Docs>
    </Member>
    <Member MemberName="ReturnType">
      <MemberSignature Language="C#" Value="public override Type ReturnType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ReturnType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.MethodBuilder.ReturnType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReturnType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ ReturnType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReturnType : Type" Usage="System.Reflection.Emit.MethodBuilder.ReturnType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e838e-388">Obtient le type de retour de la méthode représentée par ce <see cref="T:System.Reflection.Emit.MethodBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-388">Gets the return type of the method represented by this <see cref="T:System.Reflection.Emit.MethodBuilder" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e838e-389">Type de retour de la méthode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-389">The return type of the method.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="e838e-390">À partir de .NET Framework 2.0 et .NET Compact Framework 2.0, ce membre est hérité de la classe de base <xref:System.Reflection.MethodInfo>.</span><span class="sxs-lookup"><span data-stu-id="e838e-390">Starting with the .NET Framework 2.0 and the .NET Compact Framework 2.0, this member is inherited from the base class, <xref:System.Reflection.MethodInfo>.</span></span> <span data-ttu-id="e838e-391">Consultez <xref:System.Reflection.MethodInfo.ReturnType%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="e838e-391">See <xref:System.Reflection.MethodInfo.ReturnType%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReturnTypeCustomAttributes">
      <MemberSignature Language="C#" Value="public override System.Reflection.ICustomAttributeProvider ReturnTypeCustomAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.ICustomAttributeProvider ReturnTypeCustomAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.MethodBuilder.ReturnTypeCustomAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReturnTypeCustomAttributes As ICustomAttributeProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::ICustomAttributeProvider ^ ReturnTypeCustomAttributes { System::Reflection::ICustomAttributeProvider ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReturnTypeCustomAttributes : System.Reflection.ICustomAttributeProvider" Usage="System.Reflection.Emit.MethodBuilder.ReturnTypeCustomAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ICustomAttributeProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e838e-392">Retourne les attributs personnalisés du type de retour de la méthode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-392">Returns the custom attributes of the method's return type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e838e-393">Lecture seule.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-393">Read-only.</span>
          </span>
          <span data-ttu-id="e838e-394">Attributs personnalisés du type de retour de la méthode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-394">The custom attributes of the method's return type.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e838e-395">Cette méthode retourne toujours la valeur `null`.</span><span class="sxs-lookup"><span data-stu-id="e838e-395">This method always returns `null`.</span></span> <span data-ttu-id="e838e-396">Obtenir le <xref:System.Reflection.MethodInfo> après la contenant <xref:System.Type> a été créé et appelé <xref:System.Reflection.MethodInfo.ReturnTypeCustomAttributes%2A> sur le <xref:System.Reflection.MethodInfo>.</span><span class="sxs-lookup"><span data-stu-id="e838e-396">Get the <xref:System.Reflection.MethodInfo> after the containing <xref:System.Type> has been created and invoked <xref:System.Reflection.MethodInfo.ReturnTypeCustomAttributes%2A> on the <xref:System.Reflection.MethodInfo>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetCustomAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e838e-397">Définit un attribut personnalisé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-397">Sets a custom attribute.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetCustomAttribute">
      <MemberSignature Language="C#" Value="public void SetCustomAttribute (System.Reflection.Emit.CustomAttributeBuilder customBuilder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCustomAttribute(class System.Reflection.Emit.CustomAttributeBuilder customBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetCustomAttribute (customBuilder As CustomAttributeBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetCustomAttribute(System::Reflection::Emit::CustomAttributeBuilder ^ customBuilder);" />
      <MemberSignature Language="F#" Value="member this.SetCustomAttribute : System.Reflection.Emit.CustomAttributeBuilder -&gt; unit" Usage="methodBuilder.SetCustomAttribute customBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="customBuilder" Type="System.Reflection.Emit.CustomAttributeBuilder" />
      </Parameters>
      <Docs>
        <param name="customBuilder">
          <span data-ttu-id="e838e-398">Instance d’une classe d’assistance pour décrire l’attribut personnalisé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-398">An instance of a helper class to describe the custom attribute.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e838e-399">Définit un attribut personnalisé à l’aide d’un générateur d’attributs personnalisés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-399">Sets a custom attribute using a custom attribute builder.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e838e-400">Le <xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A> méthode peut interagir avec le <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> méthode lorsque les deux méthodes sont utilisées conjointement.</span><span class="sxs-lookup"><span data-stu-id="e838e-400">The <xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A> method can interact with the <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> method when the two methods are used in combination.</span></span> <span data-ttu-id="e838e-401">Consultez la section Notes de la <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> méthode pour plus d’informations.</span><span class="sxs-lookup"><span data-stu-id="e838e-401">See the Remarks section of the <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> method for details.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e838e-402">
            <paramref name="customBuilder" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-402">
              <paramref name="customBuilder" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e838e-403">Pour la méthode actuelle, la propriété <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> est <see langword="true" />, mais la propriété <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> est <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-403">For the current method, the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> property is <see langword="false" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SetCustomAttribute">
      <MemberSignature Language="C#" Value="public void SetCustomAttribute (System.Reflection.ConstructorInfo con, byte[] binaryAttribute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCustomAttribute(class System.Reflection.ConstructorInfo con, unsigned int8[] binaryAttribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetCustomAttribute (con As ConstructorInfo, binaryAttribute As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetCustomAttribute(System::Reflection::ConstructorInfo ^ con, cli::array &lt;System::Byte&gt; ^ binaryAttribute);" />
      <MemberSignature Language="F#" Value="member this.SetCustomAttribute : System.Reflection.ConstructorInfo * byte[] -&gt; unit" Usage="methodBuilder.SetCustomAttribute (con, binaryAttribute)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinmac-3.0">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="con" Type="System.Reflection.ConstructorInfo" />
        <Parameter Name="binaryAttribute" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="con">
          <span data-ttu-id="e838e-404">Le constructeur de l’attribut personnalisé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-404">The constructor for the custom attribute.</span>
          </span>
        </param>
        <param name="binaryAttribute">
          <span data-ttu-id="e838e-405">Objet blob d’octets représentant les attributs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-405">A byte blob representing the attributes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e838e-406">Définit un attribut personnalisé à l’aide d’un objet blob d’attribut personnalisé spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-406">Sets a custom attribute using a specified custom attribute blob.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e838e-407">Pour plus d’informations sur la façon de mettre en forme `binaryAttribute`, consultez la documentation du Common Language Infrastructure (CLI), en particulier « Partition II : Metadata Definition et Semantics ».</span><span class="sxs-lookup"><span data-stu-id="e838e-407">For details on how to format `binaryAttribute`, see the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics".</span></span> <span data-ttu-id="e838e-408">La documentation est disponible en ligne. Consultez [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) sur MSDN et [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) sur le site web d’Ecma International.</span><span class="sxs-lookup"><span data-stu-id="e838e-408">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 <span data-ttu-id="e838e-409">Le <xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A> méthode peut interagir avec le <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> méthode lorsque les deux méthodes sont utilisées conjointement.</span><span class="sxs-lookup"><span data-stu-id="e838e-409">The <xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A> method can interact with the <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> method when the two methods are used in combination.</span></span> <span data-ttu-id="e838e-410">Consultez la section Notes de la <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> méthode pour plus d’informations.</span><span class="sxs-lookup"><span data-stu-id="e838e-410">See the Remarks section of the <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> method for details.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e838e-411">
            <paramref name="con" /> ou <paramref name="binaryAttribute" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-411">
              <paramref name="con" /> or <paramref name="binaryAttribute" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e838e-412">Pour la méthode actuelle, la propriété <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> est <see langword="true" />, mais la propriété <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> est <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-412">For the current method, the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> property is <see langword="false" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SetImplementationFlags">
      <MemberSignature Language="C#" Value="public void SetImplementationFlags (System.Reflection.MethodImplAttributes attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetImplementationFlags(valuetype System.Reflection.MethodImplAttributes attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetImplementationFlags (attributes As MethodImplAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetImplementationFlags(System::Reflection::MethodImplAttributes attributes);" />
      <MemberSignature Language="F#" Value="member this.SetImplementationFlags : System.Reflection.MethodImplAttributes -&gt; unit" Usage="methodBuilder.SetImplementationFlags attributes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributes" Type="System.Reflection.MethodImplAttributes" />
      </Parameters>
      <Docs>
        <param name="attributes">
          <span data-ttu-id="e838e-413">Indicateurs d’implémentation à définir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-413">The implementation flags to set.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e838e-414">Définit les indicateurs d’implémentation de cette méthode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-414">Sets the implementation flags for this method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e838e-415">Lorsque vous utilisez le <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> méthode en combinaison avec le <xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A> (méthode), tenez compte des interactions potentielles.</span><span class="sxs-lookup"><span data-stu-id="e838e-415">When you use the <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> method in combination with the <xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A> method, be aware of potential interactions.</span></span> <span data-ttu-id="e838e-416">Par exemple, à l’aide de la <xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A> méthode pour ajouter le <xref:System.Runtime.InteropServices.DllImportAttribute> ensembles d’attributs également le <xref:System.Reflection.MethodImplAttributes.PreserveSig?displayProperty=nameWithType> indicateur.</span><span class="sxs-lookup"><span data-stu-id="e838e-416">For example, using the <xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A> method to add the <xref:System.Runtime.InteropServices.DllImportAttribute> attribute also sets the <xref:System.Reflection.MethodImplAttributes.PreserveSig?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="e838e-417">Si vous appelez ensuite la <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> (méthode), le <xref:System.Reflection.MethodImplAttributes.PreserveSig> indicateur est remplacé.</span><span class="sxs-lookup"><span data-stu-id="e838e-417">If you subsequently call the <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> method, the <xref:System.Reflection.MethodImplAttributes.PreserveSig> flag is overwritten.</span></span> <span data-ttu-id="e838e-418">Il existe deux façons d’éviter ce problème :</span><span class="sxs-lookup"><span data-stu-id="e838e-418">There are two ways to avoid this:</span></span>  
  
-   <span data-ttu-id="e838e-419">Appelez le <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> méthode avant d’appeler le <xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="e838e-419">Call the <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> method before you call the <xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A> method.</span></span> <span data-ttu-id="e838e-420">Le <xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A> méthode respecte toujours les indicateurs d’implémentation de méthode existant.</span><span class="sxs-lookup"><span data-stu-id="e838e-420">The <xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A> method always respects existing method implementation flags.</span></span>  
  
-   <span data-ttu-id="e838e-421">Lorsque vous définissez des indicateurs d’implémentation, appelez le <xref:System.Reflection.Emit.MethodBuilder.GetMethodImplementationFlags%2A> méthode pour récupérer les indicateurs existants, utilisez au niveau du bit ou pour ajouter votre indicateur, puis appelez le <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="e838e-421">When you set implementation flags, call the <xref:System.Reflection.Emit.MethodBuilder.GetMethodImplementationFlags%2A> method to retrieve the existing flags, use bitwise OR to add your flag, and then call the <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e838e-422">L’exemple de code ci-dessous illustre l’utilisation contextuelle de la `SetImplementationFlags` méthode pour décrire l’implémentation de MSIL dans un corps de méthode.</span><span class="sxs-lookup"><span data-stu-id="e838e-422">The code sample below illustrates the contextual use of the `SetImplementationFlags` method to describe the implementation of MSIL in a method body.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.MethodBuilder.SetImplementationFlags Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.SetImplementationFlags Example/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit.MethodBuilder.SetImplementationFlags Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.SetImplementationFlags Example/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit.MethodBuilder.SetImplementationFlags Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.SetImplementationFlags Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e838e-423">Le type conteneur a déjà été créé à l’aide de <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-423">The containing type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span>
          </span>
          <span data-ttu-id="e838e-424">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-424">-or-</span>
          </span>
          <span data-ttu-id="e838e-425">Pour la méthode actuelle, la propriété <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> est <see langword="true" />, mais la propriété <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> est <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-425">For the current method, the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> property is <see langword="false" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SetMarshal">
      <MemberSignature Language="C#" Value="public void SetMarshal (System.Reflection.Emit.UnmanagedMarshal unmanagedMarshal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetMarshal(class System.Reflection.Emit.UnmanagedMarshal unmanagedMarshal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.SetMarshal(System.Reflection.Emit.UnmanagedMarshal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetMarshal(System::Reflection::Emit::UnmanagedMarshal ^ unmanagedMarshal);" />
      <MemberSignature Language="F#" Value="member this.SetMarshal : System.Reflection.Emit.UnmanagedMarshal -&gt; unit" Usage="methodBuilder.SetMarshal unmanagedMarshal" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinmac-3.0">
          <AttributeName>System.Obsolete("An alternate API is available: Emit the MarshalAs custom attribute instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Obsolete("An alternate API is available: Emit the MarshalAs custom attribute instead. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unmanagedMarshal" Type="System.Reflection.Emit.UnmanagedMarshal" />
      </Parameters>
      <Docs>
        <param name="unmanagedMarshal">
          <span data-ttu-id="e838e-426">Informations de marshaling pour le type de retour de cette méthode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-426">Marshaling information for the return type of this method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e838e-427">Définit les informations de marshaling pour le type de retour de cette méthode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-427">Sets marshaling information for the return type of this method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e838e-428">L’exemple de code ci-dessous illustre l’utilisation contextuelle de la `SetMarshal` méthode à marshaler les résultats d’un appel de méthode comme un type différent.</span><span class="sxs-lookup"><span data-stu-id="e838e-428">The code sample below illustrates the contextual usage of the `SetMarshal` method to marshal the results of a method call as a different type.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.MethodBuilder.SetMarshal Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.SetMarshal Example/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit.MethodBuilder.SetMarshal Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.SetMarshal Example/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit.MethodBuilder.SetMarshal Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.SetMarshal Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e838e-429">Le type conteneur a déjà été créé à l’aide de <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-429">The containing type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span>
          </span>
          <span data-ttu-id="e838e-430">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-430">-or-</span>
          </span>
          <span data-ttu-id="e838e-431">Pour la méthode actuelle, la propriété <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> est <see langword="true" />, mais la propriété <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> est <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-431">For the current method, the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> property is <see langword="false" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SetMethodBody">
      <MemberSignature Language="C#" Value="public void SetMethodBody (byte[] il, int maxStack, byte[] localSignature, System.Collections.Generic.IEnumerable&lt;System.Reflection.Emit.ExceptionHandler&gt; exceptionHandlers, System.Collections.Generic.IEnumerable&lt;int&gt; tokenFixups);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetMethodBody(unsigned int8[] il, int32 maxStack, unsigned int8[] localSignature, class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Reflection.Emit.ExceptionHandler&gt; exceptionHandlers, class System.Collections.Generic.IEnumerable`1&lt;int32&gt; tokenFixups) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.SetMethodBody(System.Byte[],System.Int32,System.Byte[],System.Collections.Generic.IEnumerable{System.Reflection.Emit.ExceptionHandler},System.Collections.Generic.IEnumerable{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetMethodBody (il As Byte(), maxStack As Integer, localSignature As Byte(), exceptionHandlers As IEnumerable(Of ExceptionHandler), tokenFixups As IEnumerable(Of Integer))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetMethodBody(cli::array &lt;System::Byte&gt; ^ il, int maxStack, cli::array &lt;System::Byte&gt; ^ localSignature, System::Collections::Generic::IEnumerable&lt;System::Reflection::Emit::ExceptionHandler&gt; ^ exceptionHandlers, System::Collections::Generic::IEnumerable&lt;int&gt; ^ tokenFixups);" />
      <MemberSignature Language="F#" Value="member this.SetMethodBody : byte[] * int * byte[] * seq&lt;System.Reflection.Emit.ExceptionHandler&gt; * seq&lt;int&gt; -&gt; unit" Usage="methodBuilder.SetMethodBody (il, maxStack, localSignature, exceptionHandlers, tokenFixups)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="il" Type="System.Byte[]" />
        <Parameter Name="maxStack" Type="System.Int32" />
        <Parameter Name="localSignature" Type="System.Byte[]" />
        <Parameter Name="exceptionHandlers" Type="System.Collections.Generic.IEnumerable&lt;System.Reflection.Emit.ExceptionHandler&gt;" />
        <Parameter Name="tokenFixups" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="il">
          <span data-ttu-id="e838e-432">Tableau qui contient des instructions MSIL valides.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-432">An array that contains valid MSIL instructions.</span>
          </span>
        </param>
        <param name="maxStack">
          <span data-ttu-id="e838e-433">Profondeur maximale de l’évaluation de la pile.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-433">The maximum stack evaluation depth.</span>
          </span>
        </param>
        <param name="localSignature">
          <span data-ttu-id="e838e-434">Tableau d’octets qui contient la structure de variable locale sérialisée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-434">An array of bytes that contain the serialized local variable structure.</span>
          </span>
          <span data-ttu-id="e838e-435">Spécifie <see langword="null" /> si la méthode n'a aucune variable locale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-435">Specify <see langword="null" /> if the method has no local variables.</span>
          </span>
        </param>
        <param name="exceptionHandlers">
          <span data-ttu-id="e838e-436">Collection qui contient les gestionnaires d’exceptions pour la méthode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-436">A collection that contains the exception handlers for the method.</span>
          </span>
          <span data-ttu-id="e838e-437">Spécifie <see langword="null" /> si la méthode n'a aucun gestionnaire d'exceptions.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-437">Specify <see langword="null" /> if the method has no exception handlers.</span>
          </span>
        </param>
        <param name="tokenFixups">
          <span data-ttu-id="e838e-438">Collection de valeurs qui représentent des offsets dans <c>il</c>, dont chacun spécifie le début d’un jeton pouvant être modifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-438">A collection of values that represent offsets in <c>il</c>, each of which specifies the beginning of a token that may be modified.</span>
          </span>
          <span data-ttu-id="e838e-439">Spécifie <see langword="null" /> si aucun jeton de la méthode ne doit être modifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-439">Specify <see langword="null" /> if the method has no tokens that have to be modified.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e838e-440">Crée le corps de la méthode en utilisant un tableau d’octets d’instructions MSIL (Microsoft Intermediate Language) spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-440">Creates the body of the method by using a specified byte array of Microsoft intermediate language (MSIL) instructions.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e838e-441">
            <paramref name="il" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-441">
              <paramref name="il" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="e838e-442">
            <paramref name="maxStack" /> est un nombre négatif.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-442">
              <paramref name="maxStack" /> is negative.</span>
          </span>
          <span data-ttu-id="e838e-443">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-443">-or-</span>
          </span>
          <span data-ttu-id="e838e-444">Un des <paramref name="exceptionHandlers" /> spécifie un décalage en dehors de <paramref name="il" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-444">One of <paramref name="exceptionHandlers" /> specifies an offset outside of <paramref name="il" />.</span>
          </span>
          <span data-ttu-id="e838e-445">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-445">-or-</span>
          </span>
          <span data-ttu-id="e838e-446">Un des <paramref name="tokenFixups" /> spécifie un décalage qui est en dehors du tableau <paramref name="il" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-446">One of <paramref name="tokenFixups" /> specifies an offset that is outside the <paramref name="il" /> array.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e838e-447">Le type conteneur a été créé au préalable à l'aide de la méthode <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-447">The containing type was previously created using the <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> method.</span>
          </span>
          <span data-ttu-id="e838e-448">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-448">-or-</span>
          </span>
          <span data-ttu-id="e838e-449">La méthode a été appelée précédemment sur cet objet <see cref="T:System.Reflection.Emit.MethodBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-449">This method was called previously on this <see cref="T:System.Reflection.Emit.MethodBuilder" /> object.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SetParameters">
      <MemberSignature Language="C#" Value="public void SetParameters (params Type[] parameterTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetParameters(class System.Type[] parameterTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.SetParameters(System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetParameters (ParamArray parameterTypes As Type())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetParameters(... cli::array &lt;Type ^&gt; ^ parameterTypes);" />
      <MemberSignature Language="F#" Value="member this.SetParameters : Type[] -&gt; unit" Usage="methodBuilder.SetParameters parameterTypes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameterTypes" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="parameterTypes">
          <span data-ttu-id="e838e-450">Tableau d’objets <see cref="T:System.Type" /> représentant les types des paramètres.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-450">An array of <see cref="T:System.Type" /> objects representing the parameter types.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e838e-451">Définit le nombre et les types des paramètres d’une méthode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-451">Sets the number and types of parameters for a method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e838e-452">Si le nombre et les types de paramètres sont connus lorsque la méthode est définie, elles peuvent être définies à l’aide de toute surcharge de la <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=nameWithType> méthode qui accepte un tableau de types de paramètre.</span><span class="sxs-lookup"><span data-stu-id="e838e-452">If the number and types of the parameters are known when the method is defined, they can be set using any overload of the <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=nameWithType> method that accepts an array of parameter types.</span></span> <span data-ttu-id="e838e-453">Toutefois, une méthode générique peut avoir des paramètres dont les types sont spécifiées par un ou plusieurs de ses propres paramètres de type générique, qui ne peut pas être définis jusqu'à une fois que la méthode a été définie.</span><span class="sxs-lookup"><span data-stu-id="e838e-453">However, a generic method can have parameters whose types are specified by one or more of its own generic type parameters, which cannot be defined until after the method has been defined.</span></span> <span data-ttu-id="e838e-454">Utilisez cette méthode pour définir les types de paramètres dans ce cas.</span><span class="sxs-lookup"><span data-stu-id="e838e-454">Use this method to set the parameter types in that case.</span></span>  
  
 <span data-ttu-id="e838e-455">Si le type de retour a des modificateurs personnalisés facultatifs ou requis, tels que <xref:System.Runtime.CompilerServices.IsConst>, utilisez le <xref:System.Reflection.Emit.MethodBuilder.SetSignature%28System.Type%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%5B%5D%2CSystem.Type%5B%5D%5B%5D%29> surcharge de méthode.</span><span class="sxs-lookup"><span data-stu-id="e838e-455">If the return type has optional or required custom modifiers, such as <xref:System.Runtime.CompilerServices.IsConst>, use the <xref:System.Reflection.Emit.MethodBuilder.SetSignature%28System.Type%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%5B%5D%2CSystem.Type%5B%5D%5B%5D%29> method overload.</span></span>  
  
 <span data-ttu-id="e838e-456">Appel de cette méthode remplace tous les types de paramètre qui ont été définies à l’aide de la <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="e838e-456">Calling this method replaces any parameter types that were set using the <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e838e-457">Le code suivant exemple utilise le <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> méthode pour rendre une méthode générique.</span><span class="sxs-lookup"><span data-stu-id="e838e-457">The following code example uses the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> method to make a method generic.</span></span> <span data-ttu-id="e838e-458">Le <xref:System.Reflection.Emit.MethodBuilder.SetParameters%2A> méthode est utilisée pour donner à la méthode un paramètre dont le type sera spécifié par le premier paramètre de type générique.</span><span class="sxs-lookup"><span data-stu-id="e838e-458">The <xref:System.Reflection.Emit.MethodBuilder.SetParameters%2A> method is used to give the method one parameter, whose type will be specified by the first generic type parameter.</span></span> <span data-ttu-id="e838e-459">Le <xref:System.Reflection.Emit.MethodBuilder.SetReturnType%2A> méthode est utilisée pour donner à la méthode à un type de retour, spécifié par le deuxième paramètre de type générique.</span><span class="sxs-lookup"><span data-stu-id="e838e-459">The <xref:System.Reflection.Emit.MethodBuilder.SetReturnType%2A> method is used to give the method a return type, specified by the second generic type parameter.</span></span>  
  
 <span data-ttu-id="e838e-460">Ce code fait partie d’un exemple plus complet fourni pour le <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="e838e-460">This code is part of a larger example provided for the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> method.</span></span>  
  
 [!code-cpp[GenericMethodBuilder#3](~/samples/snippets/cpp/VS_Snippets_CLR/GenericMethodBuilder/cpp/source.cpp#3)]
 [!code-csharp[GenericMethodBuilder#3](~/samples/snippets/csharp/VS_Snippets_CLR/GenericMethodBuilder/CS/source.cs#3)]
 [!code-vb[GenericMethodBuilder#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/GenericMethodBuilder/VB/source.vb#3)]  
[!code-cpp[GenericMethodBuilder#5](~/samples/snippets/cpp/VS_Snippets_CLR/GenericMethodBuilder/cpp/source.cpp#5)]
[!code-csharp[GenericMethodBuilder#5](~/samples/snippets/csharp/VS_Snippets_CLR/GenericMethodBuilder/CS/source.cs#5)]
[!code-vb[GenericMethodBuilder#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/GenericMethodBuilder/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e838e-461">La méthode actuelle est générique, mais n’est pas une définition de méthode générique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-461">The current method is generic, but is not a generic method definition.</span>
          </span>
          <span data-ttu-id="e838e-462">Autrement dit, la propriété <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> est <see langword="true" />, mais la propriété <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> est <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-462">That is, the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> property is <see langword="false" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Reflection.Emit.MethodBuilder.SetReturnType(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="SetReturnType">
      <MemberSignature Language="C#" Value="public void SetReturnType (Type returnType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetReturnType(class System.Type returnType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.SetReturnType(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetReturnType (returnType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetReturnType(Type ^ returnType);" />
      <MemberSignature Language="F#" Value="member this.SetReturnType : Type -&gt; unit" Usage="methodBuilder.SetReturnType returnType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="returnType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="returnType">
          <span data-ttu-id="e838e-463">Objet <see cref="T:System.Type" /> qui représente le type de retour de la méthode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-463">A <see cref="T:System.Type" /> object that represents the return type of the method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e838e-464">Définit le type de retour de la méthode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-464">Sets the return type of the method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e838e-465">Utilisez cette méthode pour définir le type de retour d’une méthode générique, lorsque le type de retour est spécifié par un des paramètres de type générique de la méthode.</span><span class="sxs-lookup"><span data-stu-id="e838e-465">Use this method to set the return type of a generic method, when the return type is specified by one of the generic type parameters of the method.</span></span> <span data-ttu-id="e838e-466">Si le type de retour a des modificateurs personnalisés facultatifs ou requis, tels que <xref:System.Runtime.CompilerServices.IsConst>, utilisez le <xref:System.Reflection.Emit.MethodBuilder.SetSignature%28System.Type%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%5B%5D%2CSystem.Type%5B%5D%5B%5D%29> surcharge de méthode.</span><span class="sxs-lookup"><span data-stu-id="e838e-466">If the return type has optional or required custom modifiers, such as <xref:System.Runtime.CompilerServices.IsConst>, use the <xref:System.Reflection.Emit.MethodBuilder.SetSignature%28System.Type%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%5B%5D%2CSystem.Type%5B%5D%5B%5D%29> method overload.</span></span>  
  
 <span data-ttu-id="e838e-467">Appel de cette méthode remplace un type de retour établi à l’aide de la <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="e838e-467">Calling this method replaces a return type established using the <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e838e-468">Le code suivant exemple utilise le <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> méthode pour rendre une méthode générique.</span><span class="sxs-lookup"><span data-stu-id="e838e-468">The following code example uses the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> method to make a method generic.</span></span> <span data-ttu-id="e838e-469">Le <xref:System.Reflection.Emit.MethodBuilder.SetParameters%2A> méthode est utilisée pour donner à la méthode un paramètre dont le type sera spécifié par le premier paramètre de type générique.</span><span class="sxs-lookup"><span data-stu-id="e838e-469">The <xref:System.Reflection.Emit.MethodBuilder.SetParameters%2A> method is used to give the method one parameter, whose type will be specified by the first generic type parameter.</span></span> <span data-ttu-id="e838e-470">Le <xref:System.Reflection.Emit.MethodBuilder.SetReturnType%2A> méthode est utilisée pour donner à la méthode à un type de retour, spécifié par le deuxième paramètre de type générique.</span><span class="sxs-lookup"><span data-stu-id="e838e-470">The <xref:System.Reflection.Emit.MethodBuilder.SetReturnType%2A> method is used to give the method a return type, specified by the second generic type parameter.</span></span>  
  
 <span data-ttu-id="e838e-471">Ce code fait partie d’un exemple plus complet fourni pour le <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="e838e-471">This code is part of a larger example provided for the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> method.</span></span>  
  
 [!code-cpp[GenericMethodBuilder#3](~/samples/snippets/cpp/VS_Snippets_CLR/GenericMethodBuilder/cpp/source.cpp#3)]
 [!code-csharp[GenericMethodBuilder#3](~/samples/snippets/csharp/VS_Snippets_CLR/GenericMethodBuilder/CS/source.cs#3)]
 [!code-vb[GenericMethodBuilder#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/GenericMethodBuilder/VB/source.vb#3)]  
[!code-cpp[GenericMethodBuilder#5](~/samples/snippets/cpp/VS_Snippets_CLR/GenericMethodBuilder/cpp/source.cpp#5)]
[!code-csharp[GenericMethodBuilder#5](~/samples/snippets/csharp/VS_Snippets_CLR/GenericMethodBuilder/CS/source.cs#5)]
[!code-vb[GenericMethodBuilder#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/GenericMethodBuilder/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e838e-472">La méthode actuelle est générique, mais n’est pas une définition de méthode générique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-472">The current method is generic, but is not a generic method definition.</span>
          </span>
          <span data-ttu-id="e838e-473">Autrement dit, la propriété <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> est <see langword="true" />, mais la propriété <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> est <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-473">That is, the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> property is <see langword="false" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Reflection.Emit.MethodBuilder.SetParameters(System.Type[])" />
      </Docs>
    </Member>
    <Member MemberName="SetSignature">
      <MemberSignature Language="C#" Value="public void SetSignature (Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetSignature(class System.Type returnType, class System.Type[] returnTypeRequiredCustomModifiers, class System.Type[] returnTypeOptionalCustomModifiers, class System.Type[] parameterTypes, class System.Type[][] parameterTypeRequiredCustomModifiers, class System.Type[][] parameterTypeOptionalCustomModifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.SetSignature(System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetSignature (returnType As Type, returnTypeRequiredCustomModifiers As Type(), returnTypeOptionalCustomModifiers As Type(), parameterTypes As Type(), parameterTypeRequiredCustomModifiers As Type()(), parameterTypeOptionalCustomModifiers As Type()())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetSignature(Type ^ returnType, cli::array &lt;Type ^&gt; ^ returnTypeRequiredCustomModifiers, cli::array &lt;Type ^&gt; ^ returnTypeOptionalCustomModifiers, cli::array &lt;Type ^&gt; ^ parameterTypes, cli::array &lt;cli::array &lt;Type ^&gt; ^&gt; ^ parameterTypeRequiredCustomModifiers, cli::array &lt;cli::array &lt;Type ^&gt; ^&gt; ^ parameterTypeOptionalCustomModifiers);" />
      <MemberSignature Language="F#" Value="member this.SetSignature : Type * Type[] * Type[] * Type[] * Type[][] * Type[][] -&gt; unit" Usage="methodBuilder.SetSignature (returnType, returnTypeRequiredCustomModifiers, returnTypeOptionalCustomModifiers, parameterTypes, parameterTypeRequiredCustomModifiers, parameterTypeOptionalCustomModifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="returnTypeRequiredCustomModifiers" Type="System.Type[]" />
        <Parameter Name="returnTypeOptionalCustomModifiers" Type="System.Type[]" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="parameterTypeRequiredCustomModifiers" Type="System.Type[][]" />
        <Parameter Name="parameterTypeOptionalCustomModifiers" Type="System.Type[][]" />
      </Parameters>
      <Docs>
        <param name="returnType">
          <span data-ttu-id="e838e-474">Type de retour de la méthode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-474">The return type of the method.</span>
          </span>
        </param>
        <param name="returnTypeRequiredCustomModifiers">
          <span data-ttu-id="e838e-475">Tableau de types représentant les modificateurs personnalisés requis, tels qu’<see cref="T:System.Runtime.CompilerServices.IsConst" />, pour le type de retour de la méthode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-475">An array of types representing the required custom modifiers, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />, for the return type of the method.</span>
          </span>
          <span data-ttu-id="e838e-476">Si le type de retour ne possède pas de modificateur personnalisé requis, spécifiez <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-476">If the return type has no required custom modifiers, specify <see langword="null" />.</span>
          </span>
        </param>
        <param name="returnTypeOptionalCustomModifiers">
          <span data-ttu-id="e838e-477">Tableau de types représentant les modificateurs personnalisés facultatifs, tels qu’<see cref="T:System.Runtime.CompilerServices.IsConst" />, pour le type de retour de la méthode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-477">An array of types representing the optional custom modifiers, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />, for the return type of the method.</span>
          </span>
          <span data-ttu-id="e838e-478">Si le type de retour ne possède pas de modificateur personnalisé facultatif, spécifiez <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-478">If the return type has no optional custom modifiers, specify <see langword="null" />.</span>
          </span>
        </param>
        <param name="parameterTypes">
          <span data-ttu-id="e838e-479">Types des paramètres de la méthode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-479">The types of the parameters of the method.</span>
          </span>
        </param>
        <param name="parameterTypeRequiredCustomModifiers">
          <span data-ttu-id="e838e-480">Tableau de tableaux de types.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-480">An array of arrays of types.</span>
          </span>
          <span data-ttu-id="e838e-481">Chaque tableau de types représente les modificateurs personnalisés obligatoires pour le paramètre correspondant, comme <see cref="T:System.Runtime.CompilerServices.IsConst" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-481">Each array of types represents the required custom modifiers for the corresponding parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />.</span>
          </span>
          <span data-ttu-id="e838e-482">Si un paramètre particulier ne possède pas de modificateurs personnalisés obligatoires, spécifiez <see langword="null" /> plutôt qu’un tableau de types.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-482">If a particular parameter has no required custom modifiers, specify <see langword="null" /> instead of an array of types.</span>
          </span>
          <span data-ttu-id="e838e-483">Si aucun paramètre ne possède de modificateur personnalisé requis, spécifiez <see langword="null" /> plutôt qu’un tableau de tableaux.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-483">If none of the parameters have required custom modifiers, specify <see langword="null" /> instead of an array of arrays.</span>
          </span>
        </param>
        <param name="parameterTypeOptionalCustomModifiers">
          <span data-ttu-id="e838e-484">Tableau de tableaux de types.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-484">An array of arrays of types.</span>
          </span>
          <span data-ttu-id="e838e-485">Chaque tableau de types représente les modificateurs personnalisés facultatifs pour le paramètre correspondant, comme <see cref="T:System.Runtime.CompilerServices.IsConst" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-485">Each array of types represents the optional custom modifiers for the corresponding parameter, such as <see cref="T:System.Runtime.CompilerServices.IsConst" />.</span>
          </span>
          <span data-ttu-id="e838e-486">Si un paramètre particulier ne possède pas de modificateurs personnalisés facultatifs, spécifiez <see langword="null" /> plutôt qu’un tableau de types.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-486">If a particular parameter has no optional custom modifiers, specify <see langword="null" /> instead of an array of types.</span>
          </span>
          <span data-ttu-id="e838e-487">Si aucun paramètre ne possède de modificateur personnalisé facultatif, spécifiez <see langword="null" /> plutôt qu’un tableau de tableaux.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-487">If none of the parameters have optional custom modifiers, specify <see langword="null" /> instead of an array of arrays.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e838e-488">Définit la signature de la méthode, y compris le type de retour, les types de paramètres, ainsi que les modificateurs personnalisés requis et facultatifs du type de retour et des types de paramètres.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-488">Sets the method signature, including the return type, the parameter types, and the required and optional custom modifiers of the return type and parameter types.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e838e-489">Si le type de retour et le nombre et les types des paramètres sont connus lorsque la méthode est définie, ils peuvent être établies à l’aide de toute surcharge de la <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=nameWithType> méthode qui accepte un tableau de types de paramètre.</span><span class="sxs-lookup"><span data-stu-id="e838e-489">If the return type and the number and types of the parameters are known when the method is defined, they can be established using any overload of the <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=nameWithType> method that accepts an array of parameter types.</span></span> <span data-ttu-id="e838e-490">Toutefois, une méthode générique peut avoir des paramètres dont les types sont spécifiées par un ou plusieurs de ses propres paramètres de type générique, qui ne peut pas être définis jusqu'à une fois que la méthode a été définie.</span><span class="sxs-lookup"><span data-stu-id="e838e-490">However, a generic method can have parameters whose types are specified by one or more of its own generic type parameters, which cannot be defined until after the method has been defined.</span></span> <span data-ttu-id="e838e-491">Utilisez cette méthode pour définir les types de paramètres dans ce cas.</span><span class="sxs-lookup"><span data-stu-id="e838e-491">Use this method to set the parameter types in that case.</span></span>  
  
 <span data-ttu-id="e838e-492">Si ni le type de retour ni les types de paramètres possèdent de modificateur personnalisé facultatif ou obligatoire, tel que <xref:Microsoft.VisualC.IsConstModifier>, vous pouvez utiliser la <xref:System.Reflection.Emit.MethodBuilder.SetReturnType%2A> et <xref:System.Reflection.Emit.MethodBuilder.SetParameters%2A> méthodes.</span><span class="sxs-lookup"><span data-stu-id="e838e-492">If neither the return type nor the parameter types have optional or required custom modifiers, such as <xref:Microsoft.VisualC.IsConstModifier>, you can use the <xref:System.Reflection.Emit.MethodBuilder.SetReturnType%2A> and <xref:System.Reflection.Emit.MethodBuilder.SetParameters%2A> methods.</span></span>  
  
 <span data-ttu-id="e838e-493">Appel de cette méthode remplace les paramètres et le type de retour établi à l’aide de la <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="e838e-493">Calling this method replaces the parameters and return type established using the <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e838e-494">L’exemple de code suivant contient le code source pour une classe générique nommée Sample qui possède un paramètre de type `T`.</span><span class="sxs-lookup"><span data-stu-id="e838e-494">The following code example contains source code for a generic class named Sample that has a type parameter `T`.</span></span> <span data-ttu-id="e838e-495">La classe possède un champ nommé `Field`, de type `T`et une méthode générique `GM` avec son propre paramètre de type `U`.</span><span class="sxs-lookup"><span data-stu-id="e838e-495">The class has a field named `Field`, of type `T`, and a generic method `GM` with its own type parameter, `U`.</span></span> <span data-ttu-id="e838e-496">Méthode `GM` crée une instance d’exemple, en remplaçant son propre paramètre de type `U` pour le paramètre de type de l’échantillon et stocke son paramètre d’entrée dans `Field`.</span><span class="sxs-lookup"><span data-stu-id="e838e-496">Method `GM` creates an instance of Sample, substituting its own type parameter `U` for the type parameter of Sample, and stores its input parameter in `Field`.</span></span> <span data-ttu-id="e838e-497">Ce code source est compilé mais pas utilisé ; Vous pouvez l’afficher avec le [Ildasm.exe (désassembleur IL)](~/docs/framework/tools/ildasm-exe-il-disassembler.md)et la comparer au code émis par la classe `Example`.</span><span class="sxs-lookup"><span data-stu-id="e838e-497">This source code is compiled but not used; you can view it with the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), and compare it to the code emitted by class `Example`.</span></span>  
  
 <span data-ttu-id="e838e-498">Le code de classe `Example` illustre l’utilisation de la <xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A> méthode pour émettre le code générique.</span><span class="sxs-lookup"><span data-stu-id="e838e-498">The code in class `Example` demonstrates the use of the <xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A> method in emitting generic code.</span></span> <span data-ttu-id="e838e-499">Le `Main` méthode de classe `Example` crée un assembly dynamique qui contient une classe nommée `Sample`et utilise le <xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A?displayProperty=nameWithType> méthode pour le rendre générique en ajoutant un paramètre de type nommé `T`.</span><span class="sxs-lookup"><span data-stu-id="e838e-499">The `Main` method of class `Example` creates a dynamic assembly containing a class named `Sample`, and uses the <xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A?displayProperty=nameWithType> method to make it generic by adding a type parameter named `T`.</span></span> <span data-ttu-id="e838e-500">Un constructeur par défaut et un champ nommé `Field`, de type `T`, sont ajoutés à la classe `Sample`.</span><span class="sxs-lookup"><span data-stu-id="e838e-500">A default constructor and a field named `Field`, of type `T`, are added to class `Sample`.</span></span> <span data-ttu-id="e838e-501">Une méthode `GM` est ajoutée et transformée en une méthode générique à l’aide de la <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="e838e-501">A method `GM` is added, and turned into a generic method using the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> method.</span></span> <span data-ttu-id="e838e-502">Le paramètre de type `GM` est nommé `U`.</span><span class="sxs-lookup"><span data-stu-id="e838e-502">The type parameter of `GM` is named `U`.</span></span> <span data-ttu-id="e838e-503">Une fois que le paramètre de type est défini, la signature de `GM` est ajouté, à l’aide de la <xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="e838e-503">Once the type parameter is defined, the signature of `GM` is added, using the <xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A> method.</span></span> <span data-ttu-id="e838e-504">N’est aucun type de retour et aucun modificateur requis ou personnalisé, donc tous les paramètres de cette méthode sont `null` sauf `parameterTypes`, qui définit le type du seul paramètre de la méthode ; il est défini sur le paramètre de type de la méthode, `U`.</span><span class="sxs-lookup"><span data-stu-id="e838e-504">There is no return type, and no required or custom modifiers, so all the parameters of this method are `null` except `parameterTypes`, which sets the type of the only parameter of the method; this is set to the method's type parameter, `U`.</span></span> <span data-ttu-id="e838e-505">Le corps de la méthode crée une instance du type construit `Sample<U>` (`Sample(Of U)` en Visual Basic), affecte le paramètre de la méthode `Field`, puis imprime la valeur de `Field`.</span><span class="sxs-lookup"><span data-stu-id="e838e-505">The body of the method creates an instance of the constructed type `Sample<U>` (`Sample(Of U)` in Visual Basic), assigns the method's parameter to `Field`, and then prints the value of `Field`.</span></span> <span data-ttu-id="e838e-506">Un type factice est défini pour contenir la méthode de point d’entrée `Main`.</span><span class="sxs-lookup"><span data-stu-id="e838e-506">A dummy type is defined, to hold the entry point method `Main`.</span></span> <span data-ttu-id="e838e-507">Dans le corps de `Main`, statiques `GM` méthode est appelée sur le type générique construit `Sample<int>` (`Sample(Of Integer)` en Visual Basic), avec le type <xref:System.String> remplacé par `U`.</span><span class="sxs-lookup"><span data-stu-id="e838e-507">In the body of `Main`, the static `GM` method is invoked on the constructed generic type `Sample<int>` (`Sample(Of Integer)` in Visual Basic), with type <xref:System.String> substituted for `U`.</span></span> <span data-ttu-id="e838e-508">Le <xref:System.Reflection.Emit.TypeBuilder.GetMethod%2A?displayProperty=nameWithType> méthode est utilisée pour créer un <xref:System.Reflection.MethodInfo> pour la méthode statique `GM` méthode du type générique construit `Sample<U>`et le <xref:System.Reflection.MethodInfo.MakeGenericMethod%2A?displayProperty=nameWithType> méthode est ensuite utilisée pour créer un <xref:System.Reflection.MethodInfo> pouvant être émis dans un appel de méthode.</span><span class="sxs-lookup"><span data-stu-id="e838e-508">The <xref:System.Reflection.Emit.TypeBuilder.GetMethod%2A?displayProperty=nameWithType> method is used to create a <xref:System.Reflection.MethodInfo> for the static `GM` method of the constructed generic type `Sample<U>`, and the <xref:System.Reflection.MethodInfo.MakeGenericMethod%2A?displayProperty=nameWithType> method is then used to create a <xref:System.Reflection.MethodInfo> that can emitted in a method call.</span></span>  
  
 <span data-ttu-id="e838e-509">Lorsque l’exemple de code est exécuté, il enregistre l’assembly émis en tant que TypeBuilderGetFieldExample.exe.</span><span class="sxs-lookup"><span data-stu-id="e838e-509">When the code example is run, it saves the emitted assembly as TypeBuilderGetFieldExample.exe.</span></span> <span data-ttu-id="e838e-510">Vous pouvez exécuter TypeBuilderGetFieldExample.exe, et vous pouvez utiliser la [Ildasm.exe (désassembleur IL)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) pour comparer le code émis avec le code pour le `Sample` classe qui est compilé dans l’exemple de code lui-même.</span><span class="sxs-lookup"><span data-stu-id="e838e-510">You can run TypeBuilderGetFieldExample.exe, and you can use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to compare the emitted code with the code for the `Sample` class that is compiled into the code example itself.</span></span>  
  
 [!code-csharp[TypeBuilder.GetField_Generic#1](~/samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder.GetField_Generic/cs/source.cs#1)]
 [!code-vb[TypeBuilder.GetField_Generic#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TypeBuilder.GetField_Generic/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e838e-511">La méthode actuelle est générique, mais n’est pas une définition de méthode générique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-511">The current method is generic, but is not a generic method definition.</span>
          </span>
          <span data-ttu-id="e838e-512">Autrement dit, la propriété <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> est <see langword="true" />, mais la propriété <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> est <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-512">That is, the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> property is <see langword="false" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Reflection.Emit.MethodBuilder.SetReturnType(System.Type)" />
        <altmember cref="M:System.Reflection.Emit.MethodBuilder.SetParameters(System.Type[])" />
      </Docs>
    </Member>
    <Member MemberName="SetSymCustomAttribute">
      <MemberSignature Language="C#" Value="public void SetSymCustomAttribute (string name, byte[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetSymCustomAttribute(string name, unsigned int8[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.SetSymCustomAttribute(System.String,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetSymCustomAttribute (name As String, data As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetSymCustomAttribute(System::String ^ name, cli::array &lt;System::Byte&gt; ^ data);" />
      <MemberSignature Language="F#" Value="member this.SetSymCustomAttribute : string * byte[] -&gt; unit" Usage="methodBuilder.SetSymCustomAttribute (name, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="data" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="e838e-513">Nom de l’attribut personnalisé symbolique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-513">The name of the symbolic custom attribute.</span>
          </span>
        </param>
        <param name="data">
          <span data-ttu-id="e838e-514">Objet blob d’octets qui représente la valeur de l’attribut personnalisé symbolique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-514">The byte blob that represents the value of the symbolic custom attribute.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e838e-515">Définissez un attribut personnalisé symbolique à l’aide d’un objet blob.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-515">Set a symbolic custom attribute using a blob.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e838e-516">Contrairement à l’attribut personnalisé de métadonnées, cet attribut personnalisé est associé à un writer de symbole.</span><span class="sxs-lookup"><span data-stu-id="e838e-516">Unlike the metadata custom attribute, this custom attribute is associated with a symbol writer.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e838e-517">L’exemple de code ci-dessous illustre l’utilisation contextuelle de la `SetSymCustomAttribute` méthode pour définir les valeurs d’octets pour le nom et la clé d’un attribut personnalisé est attaché à une méthode.</span><span class="sxs-lookup"><span data-stu-id="e838e-517">The code sample below illustrates the contextual usage of the `SetSymCustomAttribute` method to set the byte values for the name and key of a custom attribute attached to a method.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.MethodBuilder.SetSymCustomAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.SetSymCustomAttribute Example/CPP/source2.cpp#1)]
 [!code-csharp[System.Reflection.Emit.MethodBuilder.SetSymCustomAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.SetSymCustomAttribute Example/CS/source2.cs#1)]
 [!code-vb[System.Reflection.Emit.MethodBuilder.SetSymCustomAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.SetSymCustomAttribute Example/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e838e-518">Le type conteneur a déjà été créé à l’aide de <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-518">The containing type was previously created using <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span>
          </span>
          <span data-ttu-id="e838e-519">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-519">-or-</span>
          </span>
          <span data-ttu-id="e838e-520">Le module qui contient cette méthode n’est pas un module de débogage.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-520">The module that contains this method is not a debug module.</span>
          </span>
          <span data-ttu-id="e838e-521">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-521">-or-</span>
          </span>
          <span data-ttu-id="e838e-522">Pour la méthode actuelle, la propriété <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> est <see langword="true" />, mais la propriété <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> est <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-522">For the current method, the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> property is <see langword="true" />, but the <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> property is <see langword="false" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Signature">
      <MemberSignature Language="C#" Value="public string Signature { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Signature" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.MethodBuilder.Signature" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Signature As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Signature { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Signature : string" Usage="System.Reflection.Emit.MethodBuilder.Signature" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e838e-523">Récupère la signature de la méthode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-523">Retrieves the signature of the method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e838e-524">Lecture seule.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-524">Read-only.</span>
          </span>
          <span data-ttu-id="e838e-525">Chaîne contenant la signature de la méthode réfléchie par cette instance de <see langword="MethodBase" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-525">A String containing the signature of the method reflected by this <see langword="MethodBase" /> instance.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._MethodBuilder.GetIDsOfNames">
      <MemberSignature Language="C#" Value="void _MethodBuilder.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._MethodBuilder.GetIDsOfNames([in]valuetype System.Guid&amp; riid, native int rgszNames, unsigned int32 cNames, unsigned int32 lcid, native int rgDispId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetIDsOfNames (ByRef riid As Guid, rgszNames As IntPtr, cNames As UInteger, lcid As UInteger, rgDispId As IntPtr) Implements _MethodBuilder.GetIDsOfNames" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._MethodBuilder.GetIDsOfNames(Guid % riid, IntPtr rgszNames, System::UInt32 cNames, System::UInt32 lcid, IntPtr rgDispId) = System::Runtime::InteropServices::_MethodBuilder::GetIDsOfNames;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._MethodBuilder.GetIDsOfNames(System.Guid,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="riid" Type="System.Guid" RefType="ref" />
        <Parameter Name="rgszNames" Type="System.IntPtr" />
        <Parameter Name="cNames" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="rgDispId" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="riid">
          <span data-ttu-id="e838e-526">Réservé à un usage ultérieur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-526">Reserved for future use.</span>
          </span>
          <span data-ttu-id="e838e-527">Doit être IID_NULL.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-527">Must be IID_NULL.</span>
          </span>
        </param>
        <param name="rgszNames">
          <span data-ttu-id="e838e-528">Tableau passé des noms à mapper.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-528">Passed-in array of names to be mapped.</span>
          </span>
        </param>
        <param name="cNames">
          <span data-ttu-id="e838e-529">Compte des noms à mapper.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-529">Count of the names to be mapped.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="e838e-530">Contexte des paramètres régionaux dans lequel interpréter les noms.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-530">The locale context in which to interpret the names.</span>
          </span>
        </param>
        <param name="rgDispId">
          <span data-ttu-id="e838e-531">Tableau, alloué par l'appelant, qui reçoit les ID correspondant aux noms.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-531">Caller-allocated array that receives the IDs corresponding to the names.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e838e-532">Mappe un jeu de noms avec un jeu correspondant d'identificateurs de dispatch.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-532">Maps a set of names to a corresponding set of dispatch identifiers.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e838e-533">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="e838e-533">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="e838e-534">Pour plus d’informations sur `IDispatch::GetIDsOfNames`, consultez MSDN Library.</span><span class="sxs-lookup"><span data-stu-id="e838e-534">For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="e838e-535">L’accès à liaison tardive à l’aide de l’interface <c>IDispatch</c> COM n’est pas pris en charge.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-535">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._MethodBuilder.GetTypeInfo">
      <MemberSignature Language="C#" Value="void _MethodBuilder.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._MethodBuilder.GetTypeInfo(unsigned int32 iTInfo, unsigned int32 lcid, native int ppTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfo (iTInfo As UInteger, lcid As UInteger, ppTInfo As IntPtr) Implements _MethodBuilder.GetTypeInfo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._MethodBuilder.GetTypeInfo(System::UInt32 iTInfo, System::UInt32 lcid, IntPtr ppTInfo) = System::Runtime::InteropServices::_MethodBuilder::GetTypeInfo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._MethodBuilder.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iTInfo" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="ppTInfo" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="iTInfo">
          <span data-ttu-id="e838e-536">Informations de type à retourner.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-536">The type information to return.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="e838e-537">Identificateur des paramètres régionaux pour les informations de type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-537">The locale identifier for the type information.</span>
          </span>
        </param>
        <param name="ppTInfo">
          <span data-ttu-id="e838e-538">Reçoit un pointeur vers l'objet d'informations de type demandé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-538">Receives a pointer to the requested type information object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e838e-539">Récupère les informations de type pour un objet, qui peuvent être utilisées ensuite pour obtenir les informations de type d'une interface.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-539">Retrieves the type information for an object, which can then be used to get the type information for an interface.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e838e-540">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="e838e-540">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="e838e-541">Pour plus d’informations sur `IDispatch::GetTypeInfo`, consultez MSDN Library.</span><span class="sxs-lookup"><span data-stu-id="e838e-541">For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="e838e-542">L’accès à liaison tardive à l’aide de l’interface <c>IDispatch</c> COM n’est pas pris en charge.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-542">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._MethodBuilder.GetTypeInfoCount">
      <MemberSignature Language="C#" Value="void _MethodBuilder.GetTypeInfoCount (out uint pcTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._MethodBuilder.GetTypeInfoCount([out] unsigned int32&amp; pcTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#GetTypeInfoCount(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfoCount (ByRef pcTInfo As UInteger) Implements _MethodBuilder.GetTypeInfoCount" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._MethodBuilder.GetTypeInfoCount([Runtime::InteropServices::Out] System::UInt32 % pcTInfo) = System::Runtime::InteropServices::_MethodBuilder::GetTypeInfoCount;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._MethodBuilder.GetTypeInfoCount(System.UInt32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcTInfo" Type="System.UInt32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pcTInfo">
          <span data-ttu-id="e838e-543">Pointe vers un emplacement qui reçoit le nombre d'interfaces d'informations de type fourni par l'objet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-543">Points to a location that receives the number of type information interfaces provided by the object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e838e-544">Récupère le nombre d'interfaces d'informations de type fourni par un objet (0 ou 1).</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-544">Retrieves the number of type information interfaces that an object provides (either 0 or 1).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e838e-545">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="e838e-545">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="e838e-546">Pour plus d’informations sur `IDispatch::GetTypeInfoCount`, consultez MSDN Library.</span><span class="sxs-lookup"><span data-stu-id="e838e-546">For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="e838e-547">L’accès à liaison tardive à l’aide de l’interface <c>IDispatch</c> COM n’est pas pris en charge.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-547">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._MethodBuilder.Invoke">
      <MemberSignature Language="C#" Value="void _MethodBuilder.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._MethodBuilder.Invoke(unsigned int32 dispIdMember, [in]valuetype System.Guid&amp; riid, unsigned int32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub Invoke (dispIdMember As UInteger, ByRef riid As Guid, lcid As UInteger, wFlags As Short, pDispParams As IntPtr, pVarResult As IntPtr, pExcepInfo As IntPtr, puArgErr As IntPtr) Implements _MethodBuilder.Invoke" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._MethodBuilder.Invoke(System::UInt32 dispIdMember, Guid % riid, System::UInt32 lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr) = System::Runtime::InteropServices::_MethodBuilder::Invoke;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._MethodBuilder.Invoke(System.UInt32,System.Guid,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dispIdMember" Type="System.UInt32" />
        <Parameter Name="riid" Type="System.Guid" RefType="ref" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="wFlags" Type="System.Int16" />
        <Parameter Name="pDispParams" Type="System.IntPtr" />
        <Parameter Name="pVarResult" Type="System.IntPtr" />
        <Parameter Name="pExcepInfo" Type="System.IntPtr" />
        <Parameter Name="puArgErr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="dispIdMember">
          <span data-ttu-id="e838e-548">Identifie le membre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-548">Identifies the member.</span>
          </span>
        </param>
        <param name="riid">
          <span data-ttu-id="e838e-549">Réservé à un usage ultérieur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-549">Reserved for future use.</span>
          </span>
          <span data-ttu-id="e838e-550">Doit être IID_NULL.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-550">Must be IID_NULL.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="e838e-551">Contexte des paramètres régionaux dans lequel interpréter les arguments.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-551">The locale context in which to interpret arguments.</span>
          </span>
        </param>
        <param name="wFlags">
          <span data-ttu-id="e838e-552">Indicateurs décrivant le contexte de l'appel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-552">Flags describing the context of the call.</span>
          </span>
        </param>
        <param name="pDispParams">
          <span data-ttu-id="e838e-553">Pointeur vers une structure qui contient un tableau d’arguments, un tableau d’arguments DISPID pour les arguments nommés et le nombre d’éléments de chaque tableau.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-553">Pointer to a structure containing an array of arguments, an array of argument DispIDs for named arguments, and counts for the number of elements in the arrays.</span>
          </span>
        </param>
        <param name="pVarResult">
          <span data-ttu-id="e838e-554">Pointeur vers l'emplacement où le résultat doit être stocké.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-554">Pointer to the location where the result is to be stored.</span>
          </span>
        </param>
        <param name="pExcepInfo">
          <span data-ttu-id="e838e-555">Pointeur vers une structure qui contient les informations sur les exceptions.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-555">Pointer to a structure that contains exception information.</span>
          </span>
        </param>
        <param name="puArgErr">
          <span data-ttu-id="e838e-556">Index du premier argument comportant une erreur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-556">The index of the first argument that has an error.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e838e-557">Fournit l'accès aux propriétés et aux méthodes exposées par un objet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-557">Provides access to properties and methods exposed by an object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e838e-558">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="e838e-558">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="e838e-559">Pour plus d’informations sur `IDispatch::Invoke`, consultez MSDN Library.</span><span class="sxs-lookup"><span data-stu-id="e838e-559">For more information about `IDispatch::Invoke`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="e838e-560">L’accès à liaison tardive à l’aide de l’interface <c>IDispatch</c> COM n’est pas pris en charge.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-560">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.MethodBuilder.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="methodBuilder.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e838e-561">Retourne cette instance <see langword="MethodBuilder" /> sous forme de chaîne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-561">Returns this <see langword="MethodBuilder" /> instance as a string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e838e-562">Retourne une chaîne contenant le nom, les attributs, la signature de méthode, les exceptions et la signature locale de cette méthode, suivis du flux MSIL (Microsoft Intermediate Language) actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e838e-562">Returns a string containing the name, attributes, method signature, exceptions, and local signature of this method followed by the current Microsoft intermediate language (MSIL) stream.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>