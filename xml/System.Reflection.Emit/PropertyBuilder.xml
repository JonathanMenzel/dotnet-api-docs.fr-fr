<Type Name="PropertyBuilder" FullName="System.Reflection.Emit.PropertyBuilder">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9b4691189941f262e81f8ea24f4b5db63cbe0485" />
    <Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="11/17/2018" />
    <Meta Name="ms.locfileid" Value="51911118" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class PropertyBuilder : System.Reflection.PropertyInfo, System.Runtime.InteropServices._PropertyBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit PropertyBuilder extends System.Reflection.PropertyInfo implements class System.Runtime.InteropServices._PropertyBuilder" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.Emit.PropertyBuilder" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class PropertyBuilder&#xA;Inherits PropertyInfo&#xA;Implements _PropertyBuilder" />
  <TypeSignature Language="C++ CLI" Value="public ref class PropertyBuilder sealed : System::Reflection::PropertyInfo, System::Runtime::InteropServices::_PropertyBuilder" />
  <TypeSignature Language="F#" Value="type PropertyBuilder = class&#xA;    inherit PropertyInfo&#xA;    interface _PropertyBuilder" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.Emit</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Reflection.PropertyInfo</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.InteropServices._PropertyBuilder</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._PropertyBuilder))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="5650a-101">Définit les propriétés d'un type.</span>
      <span class="sxs-lookup">
        <span data-stu-id="5650a-101">Defines the properties for a type.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5650a-102">Un `PropertyBuilder` est toujours associé à un `TypeBuilder`.</span><span class="sxs-lookup"><span data-stu-id="5650a-102">A `PropertyBuilder` is always associated with a `TypeBuilder`.</span></span> <span data-ttu-id="5650a-103">`TypeBuilder`.</span><span class="sxs-lookup"><span data-stu-id="5650a-103">The `TypeBuilder`.</span></span> <span data-ttu-id="5650a-104">`DefineProperty` méthode retournera un nouveau `PropertyBuilder` à un client.</span><span class="sxs-lookup"><span data-stu-id="5650a-104">`DefineProperty` method will return a new `PropertyBuilder` to a client.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5650a-105">L’exemple de code suivant montre comment implémenter des propriétés dans un type dynamique en utilisant un `PropertyBuilder` obtenu via <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A?displayProperty=nameWithType> pour créer l’infrastructure de la propriété et associé à un <xref:System.Reflection.Emit.MethodBuilder> pour implémenter la logique de langage intermédiaire dans la propriété.</span><span class="sxs-lookup"><span data-stu-id="5650a-105">The following code sample demonstrates how to implement properties in a dynamic type using a `PropertyBuilder` obtained via <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A?displayProperty=nameWithType> to create the property framework and an associated <xref:System.Reflection.Emit.MethodBuilder> to implement the IL logic within the property.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.PropertyBuilder Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.PropertyBuilder Example/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit.PropertyBuilder Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.PropertyBuilder Example/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit.PropertyBuilder Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.PropertyBuilder Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PropertyBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.PropertyBuilder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; PropertyBuilder();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddOtherMethod">
      <MemberSignature Language="C#" Value="public void AddOtherMethod (System.Reflection.Emit.MethodBuilder mdBuilder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddOtherMethod(class System.Reflection.Emit.MethodBuilder mdBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.PropertyBuilder.AddOtherMethod(System.Reflection.Emit.MethodBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddOtherMethod (mdBuilder As MethodBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddOtherMethod(System::Reflection::Emit::MethodBuilder ^ mdBuilder);" />
      <MemberSignature Language="F#" Value="member this.AddOtherMethod : System.Reflection.Emit.MethodBuilder -&gt; unit" Usage="propertyBuilder.AddOtherMethod mdBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mdBuilder" Type="System.Reflection.Emit.MethodBuilder" />
      </Parameters>
      <Docs>
        <param name="mdBuilder">
          <span data-ttu-id="5650a-106">Objet <see langword="MethodBuilder" /> qui représente l'autre méthode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-106">A <see langword="MethodBuilder" /> object that represents the other method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5650a-107">Ajoute une des autres méthodes associées à cette propriété.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-107">Adds one of the other methods associated with this property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5650a-108">
            <paramref name="mdBuilder" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-108">
              <paramref name="mdBuilder" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="5650a-109">La méthode <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> a été appelée sur le type englobant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-109">
              <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> has been called on the enclosing type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public override System.Reflection.PropertyAttributes Attributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.PropertyAttributes Attributes" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.PropertyBuilder.Attributes" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Attributes As PropertyAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::PropertyAttributes Attributes { System::Reflection::PropertyAttributes get(); };" />
      <MemberSignature Language="F#" Value="member this.Attributes : System.Reflection.PropertyAttributes" Usage="System.Reflection.Emit.PropertyBuilder.Attributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5650a-110">Obtient les attributs de cette propriété.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-110">Gets the attributes for this property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5650a-111">Attributs de cette propriété.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-111">Attributes of this property.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanRead">
      <MemberSignature Language="C#" Value="public override bool CanRead { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanRead" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.PropertyBuilder.CanRead" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanRead As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanRead { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanRead : bool" Usage="System.Reflection.Emit.PropertyBuilder.CanRead" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5650a-112">Obtient une valeur indiquant si la propriété peut être lue.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-112">Gets a value indicating whether the property can be read.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5650a-113">
            <see langword="true" /> si la propriété peut être lue ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-113">
              <see langword="true" /> if this property can be read; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5650a-114">Propriété booléenne qui indique si la propriété peut être lue.</span><span class="sxs-lookup"><span data-stu-id="5650a-114">Boolean property indicating if the property can be read.</span></span> <span data-ttu-id="5650a-115">Si la propriété n’a pas d’accesseur get, il ne peut pas être lu.</span><span class="sxs-lookup"><span data-stu-id="5650a-115">If the property does not have a get accessor, it cannot be read.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanWrite">
      <MemberSignature Language="C#" Value="public override bool CanWrite { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanWrite" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.PropertyBuilder.CanWrite" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanWrite As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanWrite { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanWrite : bool" Usage="System.Reflection.Emit.PropertyBuilder.CanWrite" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5650a-116">Obtient une valeur indiquant s'il est possible d'écrire dans la propriété.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-116">Gets a value indicating whether the property can be written to.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5650a-117">
            <see langword="true" /> s'il est possible d'écrire dans la propriété ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-117">
              <see langword="true" /> if this property can be written to; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5650a-118">Propriété booléenne qui indique si la propriété peut être écrite.</span><span class="sxs-lookup"><span data-stu-id="5650a-118">Boolean property indicating if the property can be written to.</span></span> <span data-ttu-id="5650a-119">Si la propriété n’a pas un accesseur set, il ne peut pas être écrit dans.</span><span class="sxs-lookup"><span data-stu-id="5650a-119">If the property does not have a set accessor, it cannot be written to.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeclaringType">
      <MemberSignature Language="C#" Value="public override Type DeclaringType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type DeclaringType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.PropertyBuilder.DeclaringType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property DeclaringType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ DeclaringType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeclaringType : Type" Usage="System.Reflection.Emit.PropertyBuilder.DeclaringType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5650a-120">Obtient la classe qui déclare ce membre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-120">Gets the class that declares this member.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5650a-121">Objet <see langword="Type" /> de la classe qui déclare ce membre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-121">The <see langword="Type" /> object for the class that declares this member.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAccessors">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodInfo[] GetAccessors (bool nonPublic);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.MethodInfo[] GetAccessors(bool nonPublic) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.PropertyBuilder.GetAccessors(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetAccessors (nonPublic As Boolean) As MethodInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::MethodInfo ^&gt; ^ GetAccessors(bool nonPublic);" />
      <MemberSignature Language="F#" Value="override this.GetAccessors : bool -&gt; System.Reflection.MethodInfo[]" Usage="propertyBuilder.GetAccessors nonPublic" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nonPublic" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="nonPublic">
          <span data-ttu-id="5650a-122">Indique si des méthodes non publiques doivent être retournées dans le tableau <see langword="MethodInfo" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-122">Indicates whether non-public methods should be returned in the <see langword="MethodInfo" /> array.</span>
          </span>
          <span data-ttu-id="5650a-123">
            <see langword="true" /> si les méthodes non publiques doivent être incluses ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-123">
              <see langword="true" /> if non-public methods are to be included; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5650a-124">Retourne un tableau d'accesseurs <see langword="get" /> et <see langword="set" /> publics et non publics sur cette propriété.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-124">Returns an array of the public and non-public <see langword="get" /> and <see langword="set" /> accessors on this property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5650a-125">Tableau de type <see langword="MethodInfo" /> contenant les accesseurs publics ou non publics correspondants ou un tableau vide s'il n'existe aucun accesseur correspondant sur cette propriété.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-125">An array of type <see langword="MethodInfo" /> containing the matching public or non-public accessors, or an empty array if matching accessors do not exist on this property.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5650a-126">Pour obtenir les accesseurs d’une propriété, reflètent le type de la propriété parent à l’aide de Type.GetType ou Assembly.GetType, récupérer l’objet de propriété de la réflexion du type et appeler PropertyInfo.GetAccessors.</span><span class="sxs-lookup"><span data-stu-id="5650a-126">To get the accessors of a property, reflect on the property's parent type using Type.GetType or Assembly.GetType, retrieve the Reflection property object from the type, and call PropertyInfo.GetAccessors.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="5650a-127">Cette méthode n'est pas prise en charge.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-127">This method is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCustomAttributes">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="5650a-128">Retourne tous les attributs personnalisés définis sur cette propriété.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-128">Returns all the custom attributes defined on this property.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public override object[] GetCustomAttributes (bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object[] GetCustomAttributes(bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.PropertyBuilder.GetCustomAttributes(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCustomAttributes (inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(bool inherit);" />
      <MemberSignature Language="F#" Value="override this.GetCustomAttributes : bool -&gt; obj[]" Usage="propertyBuilder.GetCustomAttributes inherit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="inherit">
          <span data-ttu-id="5650a-129">Si <see langword="true" />, recherche les attributs personnalisés dans la chaîne d'héritage de cette propriété.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-129">If <see langword="true" />, walks up this property's inheritance chain to find the custom attributes</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5650a-130">Retourne un tableau de tous les attributs personnalisés de cette propriété.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-130">Returns an array of all the custom attributes for this property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5650a-131">Tableau de tous les attributs personnalisés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-131">An array of all the custom attributes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5650a-132">Refléter le type de la propriété parent à l’aide de Type.GetType ou Assembly.GetType, récupérer l’objet de propriété de la réflexion du type et appeler PropertyInfo.GetCustomAttributes.</span><span class="sxs-lookup"><span data-stu-id="5650a-132">Reflect on the property's parent type using Type.GetType or Assembly.GetType, retrieve the Reflection property object from the type, and call PropertyInfo.GetCustomAttributes.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="5650a-133">Cette méthode n'est pas prise en charge.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-133">This method is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public override object[] GetCustomAttributes (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object[] GetCustomAttributes(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.PropertyBuilder.GetCustomAttributes(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCustomAttributes (attributeType As Type, inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(Type ^ attributeType, bool inherit);" />
      <MemberSignature Language="F#" Value="override this.GetCustomAttributes : Type * bool -&gt; obj[]" Usage="propertyBuilder.GetCustomAttributes (attributeType, inherit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType">
          <span data-ttu-id="5650a-134">Tableau d'attributs personnalisés identifiés par type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-134">An array of custom attributes identified by type.</span>
          </span>
        </param>
        <param name="inherit">
          <span data-ttu-id="5650a-135">Si <see langword="true" />, recherche les attributs personnalisés dans la chaîne d'héritage de cette propriété.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-135">If <see langword="true" />, walks up this property's inheritance chain to find the custom attributes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5650a-136">Retourne un tableau des attributs personnalisés identifiés par <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-136">Returns an array of custom attributes identified by <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5650a-137">Un tableau d'attributs personnalisés définis sur ce membre réfléchi, ou <see langword="null" /> si aucun attribut n'est défini sur le membre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-137">An array of custom attributes defined on this reflected member, or <see langword="null" /> if no attributes are defined on this member.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5650a-138">Refléter le type de la propriété parent à l’aide de Type.GetType ou Assembly.GetType, récupérer l’objet de propriété de la réflexion du type et appeler PropertyInfo.GetCustomAttributes.</span><span class="sxs-lookup"><span data-stu-id="5650a-138">Reflect on the property's parent type using Type.GetType or Assembly.GetType, retrieve the Reflection property object from the type, and call PropertyInfo.GetCustomAttributes.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="5650a-139">Cette méthode n'est pas prise en charge.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-139">This method is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetGetMethod">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodInfo GetGetMethod (bool nonPublic);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.MethodInfo GetGetMethod(bool nonPublic) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.PropertyBuilder.GetGetMethod(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetGetMethod (nonPublic As Boolean) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Reflection::MethodInfo ^ GetGetMethod(bool nonPublic);" />
      <MemberSignature Language="F#" Value="override this.GetGetMethod : bool -&gt; System.Reflection.MethodInfo" Usage="propertyBuilder.GetGetMethod nonPublic" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nonPublic" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="nonPublic">
          <span data-ttu-id="5650a-140">Indique si des accesseurs GET non publics doivent être retournés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-140">Indicates whether non-public get accessors should be returned.</span>
          </span>
          <span data-ttu-id="5650a-141">
            <see langword="true" /> si les méthodes non publiques doivent être incluses ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-141">
              <see langword="true" /> if non-public methods are to be included; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5650a-142">Retourne l'accesseur GET public et non public de cette propriété.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-142">Returns the public and non-public get accessor for this property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5650a-143">Objet <see langword="MethodInfo" /> représentant l'accesseur GET de cette propriété si <paramref name="nonPublic" /> est <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-143">A <see langword="MethodInfo" /> object representing the get accessor for this property, if <paramref name="nonPublic" /> is <see langword="true" />.</span>
          </span>
          <span data-ttu-id="5650a-144">Retourne <see langword="null" /> si <paramref name="nonPublic" /> est <see langword="false" /> et si l'accesseur GET est non public ou si <paramref name="nonPublic" /> est <see langword="true" /> mais qu'il n'existe pas d'accesseur GET.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-144">Returns <see langword="null" /> if <paramref name="nonPublic" /> is <see langword="false" /> and the get accessor is non-public, or if <paramref name="nonPublic" /> is <see langword="true" /> but no get accessors exist.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5650a-145">Pour obtenir l’accesseur Get d’une propriété, reflètent le type de la propriété parent à l’aide de Type.GetType ou Assembly.GetType, récupérer l’objet de propriété de la réflexion du type et appeler PropertyInfo.GetGetMethod.</span><span class="sxs-lookup"><span data-stu-id="5650a-145">To get the getter of a property, reflect on the property's parent type using Type.GetType or Assembly.GetType, retrieve the Reflection property object from the type, and call PropertyInfo.GetGetMethod.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIndexParameters">
      <MemberSignature Language="C#" Value="public override System.Reflection.ParameterInfo[] GetIndexParameters ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.ParameterInfo[] GetIndexParameters() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.PropertyBuilder.GetIndexParameters" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetIndexParameters () As ParameterInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::ParameterInfo ^&gt; ^ GetIndexParameters();" />
      <MemberSignature Language="F#" Value="override this.GetIndexParameters : unit -&gt; System.Reflection.ParameterInfo[]" Usage="propertyBuilder.GetIndexParameters " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ParameterInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="5650a-146">Retourne un tableau de tous les paramètres d'index de la propriété.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-146">Returns an array of all the index parameters for the property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5650a-147">Tableau de type <see langword="ParameterInfo" /> contenant les paramètres des index.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-147">An array of type <see langword="ParameterInfo" /> containing the parameters for the indexes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5650a-148">Pour obtenir les paramètres d’index d’une propriété, reflètent le type de la propriété parent à l’aide de Type.GetType ou Assembly.GetType, récupérer l’objet de propriété de la réflexion du type et appeler PropertyInfo.GetIndexParameters.</span><span class="sxs-lookup"><span data-stu-id="5650a-148">To get the index parameters of a property, reflect on the property's parent type using Type.GetType or Assembly.GetType, retrieve the Reflection property object from the type, and call PropertyInfo.GetIndexParameters.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="5650a-149">Cette méthode n'est pas prise en charge.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-149">This method is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetSetMethod">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodInfo GetSetMethod (bool nonPublic);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.MethodInfo GetSetMethod(bool nonPublic) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.PropertyBuilder.GetSetMethod(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetSetMethod (nonPublic As Boolean) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Reflection::MethodInfo ^ GetSetMethod(bool nonPublic);" />
      <MemberSignature Language="F#" Value="override this.GetSetMethod : bool -&gt; System.Reflection.MethodInfo" Usage="propertyBuilder.GetSetMethod nonPublic" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nonPublic" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="nonPublic">
          <span data-ttu-id="5650a-150">Indique si l’accesseur doit être retourné s’il est non public.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-150">Indicates whether the accessor should be returned if it is non-public.</span>
          </span>
          <span data-ttu-id="5650a-151">
            <see langword="true" /> si les méthodes non publiques doivent être incluses ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-151">
              <see langword="true" /> if non-public methods are to be included; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5650a-152">Retourne l'accesseur set public de cette propriété.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-152">Returns the set accessor for this property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5650a-153">La méthode <see langword="Set" /> de la propriété, ou <see langword="null" />, tel qu'indiqué dans le tableau suivant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-153">The property's <see langword="Set" /> method, or <see langword="null" />, as shown in the following table.</span>
          </span>
          <list type="table">
            <listheader>
              <term>
                <span data-ttu-id="5650a-154">Value</span>
                <span class="sxs-lookup">
                  <span data-stu-id="5650a-154">Value</span>
                </span>
              </term>
              <description>
                <span data-ttu-id="5650a-155">Condition</span>
                <span class="sxs-lookup">
                  <span data-stu-id="5650a-155">Condition</span>
                </span>
              </description>
            </listheader>
            <item>
              <term>
                <span data-ttu-id="5650a-156">Objet <see cref="T:System.Reflection.MethodInfo" /> représentant la méthode Set de cette propriété.</span>
                <span class="sxs-lookup">
                  <span data-stu-id="5650a-156">A <see cref="T:System.Reflection.MethodInfo" /> object representing the Set method for this property.</span>
                </span>
              </term>
              <description>
                <span data-ttu-id="5650a-157">L’accesseur set est public.</span>
                <span class="sxs-lookup">
                  <span data-stu-id="5650a-157">The set accessor is public.</span>
                </span>
                <span data-ttu-id="5650a-158">
                  <paramref name="nonPublic" /> est true et les méthodes non publiques peuvent être retournées.</span>
                <span class="sxs-lookup">
                  <span data-stu-id="5650a-158">
                    <paramref name="nonPublic" /> is true and non-public methods can be returned.</span>
                </span>
              </description>
            </item>
            <item>
              <term>
                <span data-ttu-id="5650a-159">null</span>
                <span class="sxs-lookup">
                  <span data-stu-id="5650a-159">null</span>
                </span>
              </term>
              <description>
                <span data-ttu-id="5650a-160">
                  <paramref name="nonPublic" /> est true, mais la propriété est en lecture seule.</span>
                <span class="sxs-lookup">
                  <span data-stu-id="5650a-160">
                    <paramref name="nonPublic" /> is true, but the property is read-only.</span>
                </span>
                <span data-ttu-id="5650a-161">
                  <paramref name="nonPublic" /> a la valeur false et l'accesseur set est non public.</span>
                <span class="sxs-lookup">
                  <span data-stu-id="5650a-161">
                    <paramref name="nonPublic" /> is false and the set accessor is non-public.</span>
                </span>
              </description>
            </item>
          </list>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5650a-162">Pour obtenir la méthode setter d’une propriété, reflètent le type de la propriété parent à l’aide de Type.GetType ou Assembly.GetType, récupérer l’objet de propriété de la réflexion du type et appeler PropertyInfo.GetSetMethod.</span><span class="sxs-lookup"><span data-stu-id="5650a-162">To get the setter of a property, reflect on the property's parent type using Type.GetType or Assembly.GetType, retrieve the Reflection property object from the type, and call PropertyInfo.GetSetMethod.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetValue">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="5650a-163">Obtient la valeur de la propriété en appelant l'accesseur GET.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-163">Gets the value of the property by calling the getter.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public override object GetValue (object obj, object[] index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object GetValue(object obj, object[] index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetValue (obj As Object, index As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ GetValue(System::Object ^ obj, cli::array &lt;System::Object ^&gt; ^ index);" />
      <MemberSignature Language="F#" Value="override this.GetValue : obj * obj[] -&gt; obj" Usage="propertyBuilder.GetValue (obj, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="index" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="5650a-164">Objet dont la valeur de propriété sera retournée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-164">The object whose property value will be returned.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="5650a-165">Valeurs d'index facultatives pour les propriétés indexées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-165">Optional index values for indexed properties.</span>
          </span>
          <span data-ttu-id="5650a-166">Cette valeur doit être <see langword="null" /> pour les propriétés non indexées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-166">This value should be <see langword="null" /> for non-indexed properties.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5650a-167">Obtient la valeur de la propriété indexée en appelant la méthode de l'accesseur GET de la propriété.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-167">Gets the value of the indexed property by calling the property's getter method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5650a-168">Valeur de la propriété indexée spécifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-168">The value of the specified indexed property.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5650a-169">Pour obtenir la valeur d’une propriété, indiquer le type de la propriété parent à l’aide de Type.GetType ou Assembly.GetType, récupérer le `Reflection` objet de propriété du type, puis appeler `PropertyInfo.GetValue`.</span><span class="sxs-lookup"><span data-stu-id="5650a-169">To get the value of a property, reflect on the property's parent type using Type.GetType or Assembly.GetType, retrieve the `Reflection` property object from the type, and call `PropertyInfo.GetValue`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="5650a-170">Cette méthode n'est pas prise en charge.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-170">This method is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public override object GetValue (object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] index, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object GetValue(object obj, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object[] index, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ GetValue(System::Object ^ obj, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ index, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="override this.GetValue : obj * System.Reflection.BindingFlags * System.Reflection.Binder * obj[] * System.Globalization.CultureInfo -&gt; obj" Usage="propertyBuilder.GetValue (obj, invokeAttr, binder, index, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="index" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="5650a-171">Objet dont la valeur de propriété sera retournée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-171">The object whose property value will be returned.</span>
          </span>
        </param>
        <param name="invokeAttr">
          <span data-ttu-id="5650a-172">Attribut d’appel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-172">The invocation attribute.</span>
          </span>
          <span data-ttu-id="5650a-173">Il doit s'agir d'un bit indicateur de <see langword="BindingFlags" /> : <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="Static" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" /> ou <see langword="SetProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-173">This must be a bit flag from <see langword="BindingFlags" /> : <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="Static" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.</span>
          </span>
          <span data-ttu-id="5650a-174">Un attribut d’appel approprié doit être spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-174">A suitable invocation attribute must be specified.</span>
          </span>
          <span data-ttu-id="5650a-175">Si le membre à appeler est statique, l'indicateur <see langword="Static" /> de <see langword="BindingFlags" /> doit être défini.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-175">If a static member is to be invoked, the <see langword="Static" /> flag of <see langword="BindingFlags" /> must be set.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="5650a-176">Objet qui active la liaison, la contrainte de types d'arguments, l'appel des membres et la récupération d'objets <see langword="MemberInfo" /> par le biais de la réflexion.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-176">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see langword="MemberInfo" /> objects using reflection.</span>
          </span>
          <span data-ttu-id="5650a-177">Si <c>binder</c> a la valeur <see langword="null" />, le binder par défaut est utilisé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-177">If <c>binder</c> is <see langword="null" />, the default binder is used.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="5650a-178">Valeurs d'index facultatives pour les propriétés indexées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-178">Optional index values for indexed properties.</span>
          </span>
          <span data-ttu-id="5650a-179">Cette valeur doit être <see langword="null" /> pour les propriétés non indexées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-179">This value should be <see langword="null" /> for non-indexed properties.</span>
          </span>
        </param>
        <param name="culture">
          <span data-ttu-id="5650a-180">Objet <see langword="CultureInfo" /> qui représente la culture pour laquelle la ressource doit être localisée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-180">The <see langword="CultureInfo" /> object that represents the culture for which the resource is to be localized.</span>
          </span>
          <span data-ttu-id="5650a-181">Notez que si la ressource n'est pas localisée pour cette culture, la méthode <see langword="CultureInfo.Parent" /> sera appelée pour rechercher une correspondance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-181">Note that if the resource is not localized for this culture, the <see langword="CultureInfo.Parent" /> method will be called successively in search of a match.</span>
          </span>
          <span data-ttu-id="5650a-182">Si cette valeur est <see langword="null" />, <see langword="CultureInfo" /> est obtenu à partir de la propriété <see langword="CultureInfo.CurrentUICulture" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-182">If this value is <see langword="null" />, the <see langword="CultureInfo" /> is obtained from the <see langword="CultureInfo.CurrentUICulture" /> property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5650a-183">Obtient la valeur d'une propriété ayant la liaison, l'index et le <see langword="CultureInfo" /> spécifiés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-183">Gets the value of a property having the specified binding, index, and <see langword="CultureInfo" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5650a-184">Valeur de propriété pour <paramref name="obj" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-184">The property value for <paramref name="obj" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5650a-185">Pour obtenir la valeur d’une propriété, reflètent le type de la propriété parent à l’aide de Type.GetType ou Assembly.GetType, récupérer l’objet de propriété de la réflexion du type et appeler PropertyInfo.GetValue.</span><span class="sxs-lookup"><span data-stu-id="5650a-185">To get the value of a property, reflect on the property's parent type using Type.GetType or Assembly.GetType, retrieve the Reflection property object from the type, and call PropertyInfo.GetValue.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="5650a-186">Cette méthode n'est pas prise en charge.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-186">This method is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="IsDefined">
      <MemberSignature Language="C#" Value="public override bool IsDefined (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsDefined(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.PropertyBuilder.IsDefined(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsDefined (attributeType As Type, inherit As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsDefined(Type ^ attributeType, bool inherit);" />
      <MemberSignature Language="F#" Value="override this.IsDefined : Type * bool -&gt; bool" Usage="propertyBuilder.IsDefined (attributeType, inherit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType">
          <span data-ttu-id="5650a-187">Objet <see langword="Type" /> auquel les attributs personnalisés sont appliqués.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-187">The <see langword="Type" /> object to which the custom attributes are applied.</span>
          </span>
        </param>
        <param name="inherit">
          <span data-ttu-id="5650a-188">Spécifie s'il faut rechercher les attributs personnalisés dans la chaîne d'héritage de cette propriété.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-188">Specifies whether to walk up this property's inheritance chain to find the custom attributes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5650a-189">Indique si une ou plusieurs instances de <paramref name="attributeType" /> sont définies sur cette propriété.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-189">Indicates whether one or more instance of <paramref name="attributeType" /> is defined on this property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5650a-190">
            <see langword="true" /> si une ou plusieurs instances de <paramref name="attributeType" /> sont définies sur cette propriété ; sinon <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-190">
              <see langword="true" /> if one or more instance of <paramref name="attributeType" /> is defined on this property; otherwise <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5650a-191">Refléter le type de la propriété parent à l’aide de Type.GetType ou Assembly.GetType, récupérer l’objet de propriété de la réflexion du type et appeler PropertyInfo.IsDefined.</span><span class="sxs-lookup"><span data-stu-id="5650a-191">Reflect on the property's parent type using Type.GetType or Assembly.GetType, retrieve the Reflection property object from the type, and call PropertyInfo.IsDefined.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="5650a-192">Cette méthode n'est pas prise en charge.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-192">This method is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Module">
      <MemberSignature Language="C#" Value="public override System.Reflection.Module Module { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Module Module" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.PropertyBuilder.Module" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Module As Module" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::Module ^ Module { System::Reflection::Module ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Module : System.Reflection.Module" Usage="System.Reflection.Emit.PropertyBuilder.Module" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Module</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5650a-193">Obtient le module dans lequel le type qui déclare la propriété actuelle est défini.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-193">Gets the module in which the type that declares the current property is being defined.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5650a-194">
            <see cref="T:System.Reflection.Module" /> dans lequel le type qui déclare la propriété actuelle est défini.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-194">The <see cref="T:System.Reflection.Module" /> in which the type that declares the current property is defined.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5650a-195">Cette propriété est fournie par commodité pour l’utilisateur.</span><span class="sxs-lookup"><span data-stu-id="5650a-195">This property is provided as a convenience for the user.</span></span> <span data-ttu-id="5650a-196">Il est équivalent à l’utilisation de la <xref:System.Reflection.Emit.PropertyBuilder.DeclaringType%2A> propriété pour obtenir le type dans lequel la propriété est déclarée et en appelant le <xref:System.Type.Module%2A> propriété des résultats de <xref:System.Type> objet.</span><span class="sxs-lookup"><span data-stu-id="5650a-196">It is equivalent to using the <xref:System.Reflection.Emit.PropertyBuilder.DeclaringType%2A> property to get the type in which the property is declared, and then calling the <xref:System.Type.Module%2A> property of the resulting <xref:System.Type> object.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.Module" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public override string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.PropertyBuilder.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Reflection.Emit.PropertyBuilder.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5650a-197">Obtient le nom de ce membre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-197">Gets the name of this member.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5650a-198">
            <see cref="T:System.String" /> contenant le nom de ce membre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-198">A <see cref="T:System.String" /> containing the name of this member.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyToken">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.PropertyToken PropertyToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.Emit.PropertyToken PropertyToken" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.PropertyBuilder.PropertyToken" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PropertyToken As PropertyToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::Emit::PropertyToken PropertyToken { System::Reflection::Emit::PropertyToken get(); };" />
      <MemberSignature Language="F#" Value="member this.PropertyToken : System.Reflection.Emit.PropertyToken" Usage="System.Reflection.Emit.PropertyBuilder.PropertyToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.PropertyToken</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5650a-199">Récupère le jeton de cette propriété.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-199">Retrieves the token for this property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5650a-200">Lecture seule.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-200">Read-only.</span>
          </span>
          <span data-ttu-id="5650a-201">Récupère le jeton de cette propriété.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-201">Retrieves the token for this property.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyType">
      <MemberSignature Language="C#" Value="public override Type PropertyType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type PropertyType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.PropertyBuilder.PropertyType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property PropertyType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ PropertyType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PropertyType : Type" Usage="System.Reflection.Emit.PropertyBuilder.PropertyType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5650a-202">Obtient le type du champ de cette propriété.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-202">Gets the type of the field of this property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5650a-203">Type de cette propriété.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-203">The type of this property.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReflectedType">
      <MemberSignature Language="C#" Value="public override Type ReflectedType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ReflectedType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.PropertyBuilder.ReflectedType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReflectedType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ ReflectedType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReflectedType : Type" Usage="System.Reflection.Emit.PropertyBuilder.ReflectedType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5650a-204">Obtient l'objet classe utilisé pour obtenir cette instance de <see langword="MemberInfo" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-204">Gets the class object that was used to obtain this instance of <see langword="MemberInfo" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5650a-205">Objet <see langword="Type" /> via lequel cet objet <see langword="MemberInfo" /> a été obtenu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-205">The <see langword="Type" /> object through which this <see langword="MemberInfo" /> object was obtained.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetConstant">
      <MemberSignature Language="C#" Value="public void SetConstant (object defaultValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetConstant(object defaultValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.PropertyBuilder.SetConstant(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetConstant (defaultValue As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetConstant(System::Object ^ defaultValue);" />
      <MemberSignature Language="F#" Value="member this.SetConstant : obj -&gt; unit" Usage="propertyBuilder.SetConstant defaultValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="defaultValue">
          <span data-ttu-id="5650a-206">Valeur par défaut de cette propriété.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-206">The default value of this property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5650a-207">Définit la valeur par défaut de cette propriété.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-207">Sets the default value of this property.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5650a-208">`defaultValue` est limité aux types suivants : `Boolean`, `SByte`, `Int16`, `Int32`, `Int64`, `Byte`, `UInt16`, `UInt32`, `UInt64`, `Single`, `Double`, `DateTime` , `Char`, `String`, et `Enum`.</span><span class="sxs-lookup"><span data-stu-id="5650a-208">`defaultValue` is restricted to the following types: `Boolean`, `SByte`, `Int16`, `Int32`, `Int64`, `Byte`, `UInt16`, `UInt32`, `UInt64`, `Single`, `Double`, `DateTime`, `Char`, `String`, and `Enum`.</span></span> <span data-ttu-id="5650a-209">Si le type de propriété est un type référence, la conformité CLS requiert `defaultValue` être `null`.</span><span class="sxs-lookup"><span data-stu-id="5650a-209">If the property type is a reference type, CLS compliance requires `defaultValue` to be `null`.</span></span> <span data-ttu-id="5650a-210">Cependant, depuis le [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], `defaultValue` peut être non null pour les types référence tant que la valeur peut être assignée à ce type de référence.</span><span class="sxs-lookup"><span data-stu-id="5650a-210">However, starting with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], `defaultValue` can be non-null for reference types as long as the value can be assigned to that reference type.</span></span> <span data-ttu-id="5650a-211">Par exemple, un `Int32` valeur peut être assignée à une propriété de type <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="5650a-211">For example, an `Int32` value can be assigned to a property of type <xref:System.Object>.</span></span> <span data-ttu-id="5650a-212">Ce n’est pas conforme CLS, mais il peut être utile dans les scénarios d’interopérabilité.</span><span class="sxs-lookup"><span data-stu-id="5650a-212">This is not CLS-compliant, but it can be useful in interop scenarios.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="5650a-213">La méthode <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> a été appelée sur le type englobant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-213">
              <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> has been called on the enclosing type.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="5650a-214">La propriété ne correspond pas à un type pris en charge.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-214">The property is not one of the supported types.</span>
          </span>
          <span data-ttu-id="5650a-215">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-215">-or-</span>
          </span>
          <span data-ttu-id="5650a-216">Le type de <paramref name="defaultValue" /> ne correspond pas au type de la propriété.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-216">The type of <paramref name="defaultValue" /> does not match the type of the property.</span>
          </span>
          <span data-ttu-id="5650a-217">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-217">-or-</span>
          </span>
          <span data-ttu-id="5650a-218">La propriété est de type <see cref="T:System.Object" /> ou d'un autre type référence, <paramref name="defaultValue" /> n'est pas <see langword="null" /> et la valeur ne peut pas être assignée au type référence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-218">The property is of type <see cref="T:System.Object" /> or other reference type, <paramref name="defaultValue" /> is not <see langword="null" />, and the value cannot be assigned to the reference type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetCustomAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="5650a-219">Définit un attribut personnalisé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-219">Sets a custom attribute.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetCustomAttribute">
      <MemberSignature Language="C#" Value="public void SetCustomAttribute (System.Reflection.Emit.CustomAttributeBuilder customBuilder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCustomAttribute(class System.Reflection.Emit.CustomAttributeBuilder customBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.PropertyBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetCustomAttribute (customBuilder As CustomAttributeBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetCustomAttribute(System::Reflection::Emit::CustomAttributeBuilder ^ customBuilder);" />
      <MemberSignature Language="F#" Value="member this.SetCustomAttribute : System.Reflection.Emit.CustomAttributeBuilder -&gt; unit" Usage="propertyBuilder.SetCustomAttribute customBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="customBuilder" Type="System.Reflection.Emit.CustomAttributeBuilder" />
      </Parameters>
      <Docs>
        <param name="customBuilder">
          <span data-ttu-id="5650a-220">Instance d’une classe d’assistance pour définir l’attribut personnalisé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-220">An instance of a helper class to define the custom attribute.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5650a-221">Définit un attribut personnalisé à l’aide d’un générateur d’attributs personnalisés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-221">Set a custom attribute using a custom attribute builder.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5650a-222">
            <paramref name="customBuilder" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-222">
              <paramref name="customBuilder" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="5650a-223">si <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> a été appelé sur le type englobant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-223">if <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> has been called on the enclosing type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SetCustomAttribute">
      <MemberSignature Language="C#" Value="public void SetCustomAttribute (System.Reflection.ConstructorInfo con, byte[] binaryAttribute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCustomAttribute(class System.Reflection.ConstructorInfo con, unsigned int8[] binaryAttribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.PropertyBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetCustomAttribute (con As ConstructorInfo, binaryAttribute As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetCustomAttribute(System::Reflection::ConstructorInfo ^ con, cli::array &lt;System::Byte&gt; ^ binaryAttribute);" />
      <MemberSignature Language="F#" Value="member this.SetCustomAttribute : System.Reflection.ConstructorInfo * byte[] -&gt; unit" Usage="propertyBuilder.SetCustomAttribute (con, binaryAttribute)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="con" Type="System.Reflection.ConstructorInfo" />
        <Parameter Name="binaryAttribute" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="con">
          <span data-ttu-id="5650a-224">Le constructeur de l’attribut personnalisé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-224">The constructor for the custom attribute.</span>
          </span>
        </param>
        <param name="binaryAttribute">
          <span data-ttu-id="5650a-225">Objet blob d’octets représentant les attributs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-225">A byte blob representing the attributes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5650a-226">Définit un attribut personnalisé à l’aide d’un objet blob d’attribut personnalisé spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-226">Set a custom attribute using a specified custom attribute blob.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5650a-227">Consultez la spécification de métadonnées dans la documentation ECMA Partition II pour plus d’informations sur la mise en forme `binaryAttribute`.</span><span class="sxs-lookup"><span data-stu-id="5650a-227">See the metadata specification in the ECMA Partition II documentation for details on how to format `binaryAttribute`.</span></span> <span data-ttu-id="5650a-228">La documentation Partition II est disponible en ligne sur MSDN ([ECMA c# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?linkid=65555) page Web) et sur le site Web ECMA ([Standard ECMA-335 Common Language Infrastructure](https://go.microsoft.com/fwlink/?linkid=65552) document).</span><span class="sxs-lookup"><span data-stu-id="5650a-228">The Partition II documentation is available online on MSDN ([ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?linkid=65555) Web page) and on the ECMA Web site ([Standard ECMA-335 Common Language Infrastructure](https://go.microsoft.com/fwlink/?linkid=65552) document).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5650a-229">
            <paramref name="con" /> ou <paramref name="binaryAttribute" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-229">
              <paramref name="con" /> or <paramref name="binaryAttribute" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="5650a-230">La méthode <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> a été appelée sur le type englobant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-230">
              <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> has been called on the enclosing type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SetGetMethod">
      <MemberSignature Language="C#" Value="public void SetGetMethod (System.Reflection.Emit.MethodBuilder mdBuilder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetGetMethod(class System.Reflection.Emit.MethodBuilder mdBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.PropertyBuilder.SetGetMethod(System.Reflection.Emit.MethodBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetGetMethod (mdBuilder As MethodBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetGetMethod(System::Reflection::Emit::MethodBuilder ^ mdBuilder);" />
      <MemberSignature Language="F#" Value="member this.SetGetMethod : System.Reflection.Emit.MethodBuilder -&gt; unit" Usage="propertyBuilder.SetGetMethod mdBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mdBuilder" Type="System.Reflection.Emit.MethodBuilder" />
      </Parameters>
      <Docs>
        <param name="mdBuilder">
          <span data-ttu-id="5650a-231">Objet <see langword="MethodBuilder" /> qui représente la méthode qui obtient la valeur de la propriété.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-231">A <see langword="MethodBuilder" /> object that represents the method that gets the property value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5650a-232">Définit la méthode qui obtient la valeur de la propriété.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-232">Sets the method that gets the property value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="5650a-233">L’exemple de code suivant montre comment attacher une méthode dynamique à un `get` propriété créée avec `PropertyBuilder` à l’aide de `SetGetMethod`.</span><span class="sxs-lookup"><span data-stu-id="5650a-233">The following code sample demonstrates how to attach a dynamic method to a `get` property created with `PropertyBuilder` using `SetGetMethod`.</span></span>  
  
 [!code-cpp[PropertyBuilder_SetGetMethod_4#1](~/samples/snippets/cpp/VS_Snippets_CLR/PropertyBuilder_SetGetMethod_4/CPP/propertybuilder_setgetmethod_4.cpp#1)]
 [!code-csharp[PropertyBuilder_SetGetMethod_4#1](~/samples/snippets/csharp/VS_Snippets_CLR/PropertyBuilder_SetGetMethod_4/CS/propertybuilder_setgetmethod_4.cs#1)]
 [!code-vb[PropertyBuilder_SetGetMethod_4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/PropertyBuilder_SetGetMethod_4/VB/propertybuilder_setgetmethod_4.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5650a-234">
            <paramref name="mdBuilder" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-234">
              <paramref name="mdBuilder" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="5650a-235">La méthode <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> a été appelée sur le type englobant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-235">
              <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> has been called on the enclosing type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SetSetMethod">
      <MemberSignature Language="C#" Value="public void SetSetMethod (System.Reflection.Emit.MethodBuilder mdBuilder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetSetMethod(class System.Reflection.Emit.MethodBuilder mdBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.PropertyBuilder.SetSetMethod(System.Reflection.Emit.MethodBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetSetMethod (mdBuilder As MethodBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetSetMethod(System::Reflection::Emit::MethodBuilder ^ mdBuilder);" />
      <MemberSignature Language="F#" Value="member this.SetSetMethod : System.Reflection.Emit.MethodBuilder -&gt; unit" Usage="propertyBuilder.SetSetMethod mdBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mdBuilder" Type="System.Reflection.Emit.MethodBuilder" />
      </Parameters>
      <Docs>
        <param name="mdBuilder">
          <span data-ttu-id="5650a-236">Objet <see langword="MethodBuilder" /> qui représente la méthode qui définit la valeur de la propriété.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-236">A <see langword="MethodBuilder" /> object that represents the method that sets the property value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5650a-237">Définit la méthode qui définit la valeur de la propriété.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-237">Sets the method that sets the property value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="5650a-238">L’exemple de code suivant montre comment attacher une méthode dynamique à un `set` propriété créée avec `PropertyBuilder` à l’aide de `SetSetMethod`.</span><span class="sxs-lookup"><span data-stu-id="5650a-238">The following code sample demonstrates how to attach a dynamic method to a `set` property created with `PropertyBuilder` using `SetSetMethod`.</span></span>  
  
 [!code-cpp[PropertyBuilder_SetGetMethod_4#2](~/samples/snippets/cpp/VS_Snippets_CLR/PropertyBuilder_SetGetMethod_4/CPP/propertybuilder_setgetmethod_4.cpp#2)]
 [!code-csharp[PropertyBuilder_SetGetMethod_4#2](~/samples/snippets/csharp/VS_Snippets_CLR/PropertyBuilder_SetGetMethod_4/CS/propertybuilder_setgetmethod_4.cs#2)]
 [!code-vb[PropertyBuilder_SetGetMethod_4#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/PropertyBuilder_SetGetMethod_4/VB/propertybuilder_setgetmethod_4.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="5650a-239">
            <paramref name="mdBuilder" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-239">
              <paramref name="mdBuilder" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="5650a-240">La méthode <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> a été appelée sur le type englobant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-240">
              <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> has been called on the enclosing type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetValue">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="5650a-241">Assigne la valeur donnée à la propriété de l'objet désigné.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-241">Sets the property value for the given object to the given value.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public override void SetValue (object obj, object value, object[] index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void SetValue(object obj, object value, object[] index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub SetValue (obj As Object, value As Object, index As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void SetValue(System::Object ^ obj, System::Object ^ value, cli::array &lt;System::Object ^&gt; ^ index);" />
      <MemberSignature Language="F#" Value="override this.SetValue : obj * obj * obj[] -&gt; unit" Usage="propertyBuilder.SetValue (obj, value, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="index" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="5650a-242">Objet dont la valeur de propriété sera définie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-242">The object whose property value will be set.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="5650a-243">Nouvelle valeur de cette propriété.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-243">The new value for this property.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="5650a-244">Valeurs d'index facultatives pour les propriétés indexées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-244">Optional index values for indexed properties.</span>
          </span>
          <span data-ttu-id="5650a-245">Cette valeur doit être <see langword="null" /> pour les propriétés non indexées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-245">This value should be <see langword="null" /> for non-indexed properties.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5650a-246">Définit la valeur de la propriété avec des valeurs d'index facultatives pour les propriétés d'index.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-246">Sets the value of the property with optional index values for index properties.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5650a-247">Pour définir la valeur d’une propriété, réfléchir sur le parent de la propriété type à l’aide <xref:System.Type.GetType%2A?displayProperty=nameWithType> ou <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType>, récupérer le <xref:System.Reflection.PropertyInfo> objet du type, puis appeler <xref:System.Reflection.PropertyInfo.SetValue%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="5650a-247">To set the value of a property, reflect on the property's parent type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType>, retrieve the <xref:System.Reflection.PropertyInfo> object from the type, and call <xref:System.Reflection.PropertyInfo.SetValue%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="5650a-248">Cette méthode n'est pas prise en charge.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-248">This method is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public override void SetValue (object obj, object value, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] index, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void SetValue(object obj, object value, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object[] index, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void SetValue(System::Object ^ obj, System::Object ^ value, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ index, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="override this.SetValue : obj * obj * System.Reflection.BindingFlags * System.Reflection.Binder * obj[] * System.Globalization.CultureInfo -&gt; unit" Usage="propertyBuilder.SetValue (obj, value, invokeAttr, binder, index, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="index" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="5650a-249">Objet dont la valeur de propriété sera retournée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-249">The object whose property value will be returned.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="5650a-250">Nouvelle valeur de cette propriété.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-250">The new value for this property.</span>
          </span>
        </param>
        <param name="invokeAttr">
          <span data-ttu-id="5650a-251">Attribut d’appel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-251">The invocation attribute.</span>
          </span>
          <span data-ttu-id="5650a-252">Il doit s'agir d'un bit indicateur de <see langword="BindingFlags" /> : <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="Static" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" /> ou <see langword="SetProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-252">This must be a bit flag from <see langword="BindingFlags" /> : <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="Static" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.</span>
          </span>
          <span data-ttu-id="5650a-253">Un attribut d’appel approprié doit être spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-253">A suitable invocation attribute must be specified.</span>
          </span>
          <span data-ttu-id="5650a-254">Si le membre à appeler est statique, l'indicateur <see langword="Static" /> de <see langword="BindingFlags" /> doit être défini.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-254">If a static member is to be invoked, the <see langword="Static" /> flag of <see langword="BindingFlags" /> must be set.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="5650a-255">Objet qui active la liaison, la contrainte de types d'arguments, l'appel des membres et la récupération d'objets <see langword="MemberInfo" /> par le biais de la réflexion.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-255">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see langword="MemberInfo" /> objects using reflection.</span>
          </span>
          <span data-ttu-id="5650a-256">Si <c>binder</c> a la valeur <see langword="null" />, le binder par défaut est utilisé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-256">If <c>binder</c> is <see langword="null" />, the default binder is used.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="5650a-257">Valeurs d'index facultatives pour les propriétés indexées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-257">Optional index values for indexed properties.</span>
          </span>
          <span data-ttu-id="5650a-258">Cette valeur doit être <see langword="null" /> pour les propriétés non indexées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-258">This value should be <see langword="null" /> for non-indexed properties.</span>
          </span>
        </param>
        <param name="culture">
          <span data-ttu-id="5650a-259">Objet <see langword="CultureInfo" /> qui représente la culture pour laquelle la ressource doit être localisée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-259">The <see langword="CultureInfo" /> object that represents the culture for which the resource is to be localized.</span>
          </span>
          <span data-ttu-id="5650a-260">Notez que si la ressource n'est pas localisée pour cette culture, la méthode <see langword="CultureInfo.Parent" /> sera appelée pour rechercher une correspondance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-260">Note that if the resource is not localized for this culture, the <see langword="CultureInfo.Parent" /> method will be called successively in search of a match.</span>
          </span>
          <span data-ttu-id="5650a-261">Si cette valeur est <see langword="null" />, <see langword="CultureInfo" /> est obtenu à partir de la propriété <see langword="CultureInfo.CurrentUICulture" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-261">If this value is <see langword="null" />, the <see langword="CultureInfo" /> is obtained from the <see langword="CultureInfo.CurrentUICulture" /> property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5650a-262">Assigne la valeur donnée à la propriété de l'objet désigné.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-262">Sets the property value for the given object to the given value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5650a-263">Pour définir la valeur d’une propriété, réfléchir sur le parent de la propriété type à l’aide <xref:System.Type.GetType%2A?displayProperty=nameWithType> ou <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType>, récupérer le <xref:System.Reflection.PropertyInfo> objet du type, puis appeler <xref:System.Reflection.PropertyInfo.SetValue%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="5650a-263">To set the value of a property, reflect on the property's parent type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType>, retrieve the <xref:System.Reflection.PropertyInfo> object from the type, and call <xref:System.Reflection.PropertyInfo.SetValue%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="5650a-264">Cette méthode n'est pas prise en charge.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-264">This method is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._PropertyBuilder.GetIDsOfNames">
      <MemberSignature Language="C#" Value="void _PropertyBuilder.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._PropertyBuilder.GetIDsOfNames([in]valuetype System.Guid&amp; riid, native int rgszNames, unsigned int32 cNames, unsigned int32 lcid, native int rgDispId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetIDsOfNames (ByRef riid As Guid, rgszNames As IntPtr, cNames As UInteger, lcid As UInteger, rgDispId As IntPtr) Implements _PropertyBuilder.GetIDsOfNames" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._PropertyBuilder.GetIDsOfNames(Guid % riid, IntPtr rgszNames, System::UInt32 cNames, System::UInt32 lcid, IntPtr rgDispId) = System::Runtime::InteropServices::_PropertyBuilder::GetIDsOfNames;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyBuilder.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="riid" Type="System.Guid" RefType="ref" />
        <Parameter Name="rgszNames" Type="System.IntPtr" />
        <Parameter Name="cNames" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="rgDispId" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="riid">
          <span data-ttu-id="5650a-265">Réservé à un usage ultérieur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-265">Reserved for future use.</span>
          </span>
          <span data-ttu-id="5650a-266">Doit être IID_NULL.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-266">Must be IID_NULL.</span>
          </span>
        </param>
        <param name="rgszNames">
          <span data-ttu-id="5650a-267">Tableau passé des noms à mapper.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-267">Passed-in array of names to be mapped.</span>
          </span>
        </param>
        <param name="cNames">
          <span data-ttu-id="5650a-268">Compte des noms à mapper.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-268">Count of the names to be mapped.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="5650a-269">Contexte des paramètres régionaux dans lequel interpréter les noms.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-269">The locale context in which to interpret the names.</span>
          </span>
        </param>
        <param name="rgDispId">
          <span data-ttu-id="5650a-270">Tableau alloué par l'appelant et recevant les ID qui correspondent aux noms.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-270">Caller-allocated array which receives the IDs corresponding to the names.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5650a-271">Mappe un jeu de noms avec un jeu correspondant d'identificateurs de dispatch.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-271">Maps a set of names to a corresponding set of dispatch identifiers.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5650a-272">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="5650a-272">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="5650a-273">Pour plus d’informations sur `IDispatch::GetIDsOfNames`, consultez MSDN Library.</span><span class="sxs-lookup"><span data-stu-id="5650a-273">For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="5650a-274">La méthode est appelée à liaison tardive à l’aide de l’interface <c>IDispatch</c> COM.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-274">The method is called late-bound using the COM <c>IDispatch</c> interface.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._PropertyBuilder.GetTypeInfo">
      <MemberSignature Language="C#" Value="void _PropertyBuilder.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._PropertyBuilder.GetTypeInfo(unsigned int32 iTInfo, unsigned int32 lcid, native int ppTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfo (iTInfo As UInteger, lcid As UInteger, ppTInfo As IntPtr) Implements _PropertyBuilder.GetTypeInfo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._PropertyBuilder.GetTypeInfo(System::UInt32 iTInfo, System::UInt32 lcid, IntPtr ppTInfo) = System::Runtime::InteropServices::_PropertyBuilder::GetTypeInfo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyBuilder.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iTInfo" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="ppTInfo" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="iTInfo">
          <span data-ttu-id="5650a-275">Informations de type à retourner.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-275">The type information to return.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="5650a-276">Identificateur des paramètres régionaux pour les informations de type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-276">The locale identifier for the type information.</span>
          </span>
        </param>
        <param name="ppTInfo">
          <span data-ttu-id="5650a-277">Reçoit un pointeur vers l'objet d'informations de type demandé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-277">Receives a pointer to the requested type information object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5650a-278">Récupère les informations de type pour un objet, qui peuvent être utilisées ensuite pour obtenir les informations de type d'une interface.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-278">Retrieves the type information for an object, which can then be used to get the type information for an interface.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5650a-279">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="5650a-279">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="5650a-280">Pour plus d’informations sur `IDispatch::GetTypeInfo`, consultez MSDN Library.</span><span class="sxs-lookup"><span data-stu-id="5650a-280">For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="5650a-281">La méthode est appelée à liaison tardive à l’aide de l’interface <c>IDispatch</c> COM.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-281">The method is called late-bound using the COM <c>IDispatch</c> interface.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._PropertyBuilder.GetTypeInfoCount">
      <MemberSignature Language="C#" Value="void _PropertyBuilder.GetTypeInfoCount (out uint pcTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._PropertyBuilder.GetTypeInfoCount([out] unsigned int32&amp; pcTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#GetTypeInfoCount(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfoCount (ByRef pcTInfo As UInteger) Implements _PropertyBuilder.GetTypeInfoCount" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._PropertyBuilder.GetTypeInfoCount([Runtime::InteropServices::Out] System::UInt32 % pcTInfo) = System::Runtime::InteropServices::_PropertyBuilder::GetTypeInfoCount;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyBuilder.GetTypeInfoCount(System.UInt32@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcTInfo" Type="System.UInt32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pcTInfo">
          <span data-ttu-id="5650a-282">Pointe vers un emplacement qui reçoit le nombre d'interfaces d'informations de type fourni par l'objet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-282">Points to a location that receives the number of type information interfaces provided by the object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5650a-283">Récupère le nombre d'interfaces d'informations de type fourni par un objet (0 ou 1).</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-283">Retrieves the number of type information interfaces that an object provides (either 0 or 1).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5650a-284">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="5650a-284">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="5650a-285">Pour plus d’informations sur `IDispatch::GetTypeInfoCount`, consultez MSDN Library.</span><span class="sxs-lookup"><span data-stu-id="5650a-285">For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="5650a-286">La méthode est appelée à liaison tardive à l’aide de l’interface <c>IDispatch</c> COM.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-286">The method is called late-bound using the COM <c>IDispatch</c> interface.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._PropertyBuilder.Invoke">
      <MemberSignature Language="C#" Value="void _PropertyBuilder.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._PropertyBuilder.Invoke(unsigned int32 dispIdMember, [in]valuetype System.Guid&amp; riid, unsigned int32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.PropertyBuilder.System#Runtime#InteropServices#_PropertyBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub Invoke (dispIdMember As UInteger, ByRef riid As Guid, lcid As UInteger, wFlags As Short, pDispParams As IntPtr, pVarResult As IntPtr, pExcepInfo As IntPtr, puArgErr As IntPtr) Implements _PropertyBuilder.Invoke" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._PropertyBuilder.Invoke(System::UInt32 dispIdMember, Guid % riid, System::UInt32 lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr) = System::Runtime::InteropServices::_PropertyBuilder::Invoke;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._PropertyBuilder.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dispIdMember" Type="System.UInt32" />
        <Parameter Name="riid" Type="System.Guid" RefType="ref" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="wFlags" Type="System.Int16" />
        <Parameter Name="pDispParams" Type="System.IntPtr" />
        <Parameter Name="pVarResult" Type="System.IntPtr" />
        <Parameter Name="pExcepInfo" Type="System.IntPtr" />
        <Parameter Name="puArgErr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="dispIdMember">
          <span data-ttu-id="5650a-287">Identifie le membre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-287">Identifies the member.</span>
          </span>
        </param>
        <param name="riid">
          <span data-ttu-id="5650a-288">Réservé à un usage ultérieur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-288">Reserved for future use.</span>
          </span>
          <span data-ttu-id="5650a-289">Doit être IID_NULL.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-289">Must be IID_NULL.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="5650a-290">Contexte des paramètres régionaux dans lequel interpréter les arguments.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-290">The locale context in which to interpret arguments.</span>
          </span>
        </param>
        <param name="wFlags">
          <span data-ttu-id="5650a-291">Indicateurs décrivant le contexte de l'appel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-291">Flags describing the context of the call.</span>
          </span>
        </param>
        <param name="pDispParams">
          <span data-ttu-id="5650a-292">Pointeur vers une structure qui contient un tableau d’arguments, un tableau d’arguments DISPID pour les arguments nommés et le nombre d’éléments de chaque tableau.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-292">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</span>
          </span>
        </param>
        <param name="pVarResult">
          <span data-ttu-id="5650a-293">Pointeur vers l'emplacement où le résultat doit être stocké.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-293">Pointer to the location where the result is to be stored.</span>
          </span>
        </param>
        <param name="pExcepInfo">
          <span data-ttu-id="5650a-294">Pointeur vers une structure qui contient les informations sur les exceptions.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-294">Pointer to a structure that contains exception information.</span>
          </span>
        </param>
        <param name="puArgErr">
          <span data-ttu-id="5650a-295">Index du premier argument comportant une erreur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-295">The index of the first argument that has an error.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5650a-296">Fournit l'accès aux propriétés et aux méthodes exposées par un objet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-296">Provides access to properties and methods exposed by an object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5650a-297">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="5650a-297">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="5650a-298">Pour plus d’informations sur `IDispatch::Invoke`, consultez MSDN Library.</span><span class="sxs-lookup"><span data-stu-id="5650a-298">For more information about `IDispatch::Invoke`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="5650a-299">La méthode est appelée à liaison tardive à l’aide de l’interface <c>IDispatch</c> COM.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5650a-299">The method is called late-bound using the COM <c>IDispatch</c> interface.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>