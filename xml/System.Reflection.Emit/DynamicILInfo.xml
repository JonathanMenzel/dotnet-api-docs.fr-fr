<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="DynamicILInfo.xml" source-language="en-US" target-language="fr-FR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5027718ba7331018405b1f33c2a7cd8dbe961edfe.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">027718ba7331018405b1f33c2a7cd8dbe961edfe</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinandroid-7.1,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.DynamicILInfo">
          <source>Provides support for alternative ways to generate the Microsoft intermediate language (MSIL) and metadata for a dynamic method, including methods for creating tokens and for inserting the code, exception handling, and local variable signature blobs.</source>
          <target state="translated">Fournit la prise en charge d'autres façons de générer le code MSIL (Microsoft Intermediate Language) et les métadonnées d'une méthode dynamique, y compris les méthodes pour créer des jetons et pour insérer le code, la gestion des exceptions et les blobs de signature de variables locales.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicILInfo">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> class allows developers to write their own MSIL generators instead of using <ph id="ph2">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph>.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> classe permet aux développeurs d’écrire leurs propres générateurs MSIL au lieu d’utiliser <ph id="ph2">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicILInfo">
          <source>To create instances of other types, call methods, and so on, the MSIL you generate must include tokens for those entities.</source>
          <target state="translated">Pour créer des instances d’autres types, appeler des méthodes et ainsi de suite, le langage MSIL que vous générez doit inclure des jetons pour ces entités.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicILInfo">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> class provides several overloads of the <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A&gt;</ph> method, which return tokens valid in the scope of the current <ph id="ph3">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph>.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> classe fournit plusieurs surcharges de la <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A&gt;</ph> (méthode), qui retournent des jetons valides dans l’étendue du courant <ph id="ph3">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicILInfo">
          <source>For example, if you need to call an overload of the <ph id="ph1">&lt;xref:System.Console.WriteLine%2A?displayProperty=nameWithType&gt;</ph> method, you can obtain a <ph id="ph2">&lt;xref:System.RuntimeMethodHandle&gt;</ph> for that overload and pass it to the <ph id="ph3">&lt;xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A&gt;</ph> method to obtain a token to embed in your MSIL.</source>
          <target state="translated">Par exemple, si vous avez besoin d’appeler une surcharge de la <ph id="ph1">&lt;xref:System.Console.WriteLine%2A?displayProperty=nameWithType&gt;</ph> (méthode), vous pouvez obtenir un <ph id="ph2">&lt;xref:System.RuntimeMethodHandle&gt;</ph> pour cette surcharge et passez à le <ph id="ph3">&lt;xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A&gt;</ph> méthode pour obtenir un jeton à incorporer dans votre code MSIL.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicILInfo">
          <source>Once you have created <ph id="ph1">&lt;xref:System.Byte&gt;</ph> arrays for your local variable signature, exceptions, and code body, you can use the <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicILInfo.SetCode%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Reflection.Emit.DynamicILInfo.SetExceptions%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Reflection.Emit.DynamicILInfo.SetLocalSignature%2A&gt;</ph> methods to insert them into the <ph id="ph5">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> associated with your <ph id="ph6">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> object.</source>
          <target state="translated">Une fois que vous avez créé <ph id="ph1">&lt;xref:System.Byte&gt;</ph> tableaux pour la signature de variable locale, des exceptions et des corps de code, vous pouvez utiliser la <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicILInfo.SetCode%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Reflection.Emit.DynamicILInfo.SetExceptions%2A&gt;</ph>, et <ph id="ph4">&lt;xref:System.Reflection.Emit.DynamicILInfo.SetLocalSignature%2A&gt;</ph> méthodes pour les insérer dans le <ph id="ph5">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> associé à votre <ph id="ph6">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> objet.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicILInfo">
          <source>Generating your own metadata and MSIL requires familiarity with the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</source>
          <target state="translated">Génération de vos propres métadonnées et MSIL nécessite une connaissance de la documentation du Common Language Infrastructure (CLI), en particulier « Partition II : Metadata Definition et Semantics » et « Partition III : CIL Instruction Set ».</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicILInfo">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">La documentation est disponible en ligne. Consultez <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> sur MSDN et <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> sur le site web d’Ecma International.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicILInfo">
          <source>Do not use <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> to generate code that creates a delegate to another dynamic method by calling the delegate constructor directly.</source>
          <target state="translated">N’utilisez pas <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> pour générer le code qui crée un délégué à une autre méthode dynamique en appelant le constructeur délégué directement.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicILInfo">
          <source>Instead, use the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A&gt;</ph> method to create the delegate.</source>
          <target state="translated">Utilisez plutôt le <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A&gt;</ph> méthode pour créer le délégué.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicILInfo">
          <source>A delegate that is created with the delegate constructor does not have a reference to the target dynamic method.</source>
          <target state="translated">Un délégué est créé avec le constructeur délégué n’a pas une référence à la méthode dynamique cible.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicILInfo">
          <source>The dynamic method might be reclaimed by garbage collection while the delegate is still in use.</source>
          <target state="translated">La méthode dynamique peut être récupérée par le garbage collection, tandis que le délégué est en cours d’utilisation.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.DynamicILInfo.DynamicMethod">
          <source>Gets the dynamic method whose body is generated by the current instance.</source>
          <target state="translated">Obtient la méthode dynamique dont le corps est généré par l'instance actuelle.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicILInfo.DynamicMethod">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicMethod" /&gt;</ph> object representing the dynamic method for which the current <ph id="ph2">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph> object is generating code.</source>
          <target state="translated">Objet <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicMethod" /&gt;</ph> qui représente la méthode dynamique pour laquelle l'objet <ph id="ph2">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph> actuel génère le code.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicILInfo.DynamicMethod">
          <source>A <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> object is always associated with a dynamic method.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> objet est toujours associé à une méthode dynamique.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicILInfo.DynamicMethod">
          <source>The purpose of the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> class is to provide another way of inserting the MSIL stream, exception handling, and local variable signature into a dynamic method, for developers who want to generate MSIL without using the <ph id="ph2">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph> class.</source>
          <target state="translated">L’objectif de la <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> classe est de fournir une autre façon d’insérer le flux MSIL, la gestion des exceptions et la signature de variable locale dans une méthode dynamique, pour les développeurs qui souhaitent génèrent du code MSIL sans utiliser la <ph id="ph2">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.DynamicILInfo">
          <source>Gets a token, valid in the scope of the current <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph>, representing a string, field, method, type, or signature in the MSIL stream for the associated dynamic method.</source>
          <target state="translated">Obtient un jeton, valide dans la portée du <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph> actuel, représentant une chaîne, un champ, une méthode, un type ou une signature dans le flux MSIL de la méthode dynamique associée.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Byte[])">
          <source>An array that contains the signature.</source>
          <target state="translated">Tableau qui contient la signature.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Byte[])">
          <source>Gets a token, valid in the scope of the current <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph>, representing the signature for the associated dynamic method.</source>
          <target state="translated">Obtient un jeton, valide dans la portée du <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph> actuel, représentant la signature de la méthode dynamique associée.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Byte[])">
          <source>A token that can be embedded in the metadata and the MSIL stream for the associated dynamic method.</source>
          <target state="translated">Jeton qui peut être incorporé dans les métadonnées et le flux MSIL de la méthode dynamique associée.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Byte[])">
          <source>For information on signature blobs, see the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics".</source>
          <target state="translated">Pour plus d’informations sur les objets BLOB de signature, consultez la documentation du Common Language Infrastructure (CLI), en particulier « Partition II : Metadata Definition et Semantics ».</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Byte[])">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">La documentation est disponible en ligne. Consultez <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> sur MSDN et <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> sur le site web d’Ecma International.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Reflection.Emit.DynamicMethod)">
          <source>The dynamic method to call.</source>
          <target state="translated">Méthode dynamique à appeler.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Reflection.Emit.DynamicMethod)">
          <source>Gets a token, valid in the scope of the current <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph>, representing a dynamic method to be called from the associated method.</source>
          <target state="translated">Obtient un jeton, valide dans la portée du <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph> actuel, représentant une méthode dynamique à appeler par la méthode associée.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Reflection.Emit.DynamicMethod)">
          <source>A token that can be embedded in the MSIL stream for the associated dynamic method, as the target of an MSIL instruction.</source>
          <target state="translated">Jeton qui peut être incorporé dans le flux MSIL de la méthode dynamique associée, comme cible d'une instruction MSIL.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Reflection.Emit.DynamicMethod)">
          <source>The token returned by this method overload allows you to call a dynamic method from the dynamic method associated with the current <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> object.</source>
          <target state="translated">Le jeton retourné par cette surcharge de méthode vous permet d’appeler une méthode dynamique à partir de la méthode dynamique associée actuel <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> objet.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Reflection.Emit.DynamicMethod)">
          <source>To call the associated dynamic method recursively, pass the value of the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo.DynamicMethod%2A&gt;</ph> property.</source>
          <target state="translated">Pour appeler la méthode dynamique associée de manière récursive, passez la valeur de la <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo.DynamicMethod%2A&gt;</ph> propriété.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle)">
          <source>The field to be accessed.</source>
          <target state="translated">Champ auquel accéder.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle)">
          <source>Gets a token, valid in the scope of the current <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph>, representing a field to be accessed from the associated dynamic method.</source>
          <target state="translated">Obtient un jeton, valide dans la portée du <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph> actuel, représentant un champ accessible à partir de la méthode dynamique associée.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle)">
          <source>A token that can be used as the operand of an MSIL instruction that accesses fields, in the scope of the current <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph> object.</source>
          <target state="translated">Jeton qui peut être utilisé comme opérande d'une instruction MSIL qui accède à des champs, dans la portée de l'objet <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph> actuel.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle)">
          <source>You must obtain a token for any field that will be accessed by the dynamic method associated with the current <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> object.</source>
          <target state="translated">Vous devez obtenir un jeton pour un champ qui sera accessible par la méthode dynamique associée actuel <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> objet.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle)">
          <source>Use the <ph id="ph1">&lt;xref:System.Type.GetField%2A?displayProperty=nameWithType&gt;</ph> method to get a <ph id="ph2">&lt;xref:System.Reflection.FieldInfo&gt;</ph> for the field you want to access, then use the <ph id="ph3">&lt;xref:System.Reflection.FieldInfo.FieldHandle%2A&gt;</ph> property to get the <ph id="ph4">&lt;xref:System.RuntimeFieldHandle&gt;</ph>.</source>
          <target state="translated">Utilisez le <ph id="ph1">&lt;xref:System.Type.GetField%2A?displayProperty=nameWithType&gt;</ph> méthode pour obtenir un <ph id="ph2">&lt;xref:System.Reflection.FieldInfo&gt;</ph> pour le champ que vous souhaitez accéder, puis utilisez le <ph id="ph3">&lt;xref:System.Reflection.FieldInfo.FieldHandle%2A&gt;</ph> propriété à obtenir le <ph id="ph4">&lt;xref:System.RuntimeFieldHandle&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle)">
          <source>The method to be accessed.</source>
          <target state="translated">Méthode à laquelle accéder.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle)">
          <source>Gets a token, valid in the scope of the current <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph>, representing a method to be accessed from the associated dynamic method.</source>
          <target state="translated">Obtient un jeton, valide dans la portée du <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph> actuel, représentant une méthode à laquelle accéder à partir de la méthode dynamique associée.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle)">
          <source>A token that can be used as the operand of an MSIL instruction that accesses methods, such as <ph id="ph1">&lt;see cref="F:System.Reflection.Emit.OpCodes.Call" /&gt;</ph> or <ph id="ph2">&lt;see cref="F:System.Reflection.Emit.OpCodes.Ldtoken" /&gt;</ph>, in the scope of the current <ph id="ph3">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph> object.</source>
          <target state="translated">Jeton qui peut être utilisé comme opérande d'une instruction MSIL qui accède à des méthodes, telles que <ph id="ph1">&lt;see cref="F:System.Reflection.Emit.OpCodes.Call" /&gt;</ph> ou <ph id="ph2">&lt;see cref="F:System.Reflection.Emit.OpCodes.Ldtoken" /&gt;</ph>, dans la portée de l'objet <ph id="ph3">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph> actuel.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle)">
          <source>You must obtain a token for any method that will be accessed by the dynamic method associated with the current <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> object.</source>
          <target state="translated">Vous devez obtenir un jeton pour toute méthode qui sera accessible par la méthode dynamique associée actuel <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> objet.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle)">
          <source>Use the <ph id="ph1">&lt;xref:System.Type.GetMethod%2A?displayProperty=nameWithType&gt;</ph> method to get a <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> for the method you want to access, and then use the <ph id="ph3">&lt;xref:System.Reflection.MethodBase.MethodHandle%2A&gt;</ph> property to get the <ph id="ph4">&lt;xref:System.RuntimeMethodHandle&gt;</ph>.</source>
          <target state="translated">Utilisez le <ph id="ph1">&lt;xref:System.Type.GetMethod%2A?displayProperty=nameWithType&gt;</ph> méthode pour obtenir un <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> pour la méthode que vous souhaitez accéder, puis utilisez le <ph id="ph3">&lt;xref:System.Reflection.MethodBase.MethodHandle%2A&gt;</ph> propriété à obtenir le <ph id="ph4">&lt;xref:System.RuntimeMethodHandle&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle)">
          <source>For a method that belongs to a generic type, use the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%28System.RuntimeMethodHandle%2CSystem.RuntimeTypeHandle%29&gt;</ph> method overload and specify a <ph id="ph2">&lt;xref:System.RuntimeTypeHandle&gt;</ph> for the generic type.</source>
          <target state="translated">Pour une méthode qui appartient à un type générique, utilisez le <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%28System.RuntimeMethodHandle%2CSystem.RuntimeTypeHandle%29&gt;</ph> surcharge de méthode et spécifiez un <ph id="ph2">&lt;xref:System.RuntimeTypeHandle&gt;</ph> pour le type générique.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeTypeHandle)">
          <source>The type to be used.</source>
          <target state="translated">Type à utiliser.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeTypeHandle)">
          <source>Gets a token, valid in the scope of the current <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph>, representing a type to be used in the associated dynamic method.</source>
          <target state="translated">Obtient un jeton, valide dans la portée du <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph> actuel, représentant un type à utiliser dans la méthode dynamique associée.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeTypeHandle)">
          <source>A token that can be used as the operand of an MSIL instruction that requires a type, in the scope of the current <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph> object.</source>
          <target state="translated">Jeton qui peut être utilisé comme opérande d'une instruction MSIL qui nécessite un type, dans la portée de l'objet <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph> actuel.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeTypeHandle)">
          <source>The token returned by this method overload allows you to define a local variable type, and emit MSIL to create an instance of a type in the dynamic method associated with the current <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> object.</source>
          <target state="translated">Le jeton retourné par cette surcharge de méthode vous permet de définir un type de variable locale et émettre du code MSIL pour créer une instance d’un type dans la méthode dynamique associée en cours <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> objet.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeTypeHandle)">
          <source>To get a <ph id="ph1">&lt;xref:System.RuntimeTypeHandle&gt;</ph> representing a type, use the <ph id="ph2">&lt;xref:System.Type.TypeHandle%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">Pour obtenir un <ph id="ph1">&lt;xref:System.RuntimeTypeHandle&gt;</ph> représentant un type, utilisez le <ph id="ph2">&lt;xref:System.Type.TypeHandle%2A?displayProperty=nameWithType&gt;</ph> propriété.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.String)">
          <source>The string to be used.</source>
          <target state="translated">Chaîne à utiliser.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.String)">
          <source>Gets a token, valid in the scope of the current <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph>, representing a string literal to be used in the associated dynamic method.</source>
          <target state="translated">Obtient un jeton, valide dans la portée du <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph> actuel, représentant un littéral de chaîne à utiliser dans la méthode dynamique associée.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.String)">
          <source>A token that can be used as the operand of an MSIL instruction that requires a string, in the scope of the current <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph> object.</source>
          <target state="translated">Jeton qui peut être utilisé comme opérande d'une instruction MSIL qui nécessite une chaîne, dans la portée de l'objet <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph> actuel.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>The field to be accessed.</source>
          <target state="translated">Champ auquel accéder.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>The generic type the field belongs to.</source>
          <target state="translated">Type générique auquel le champ appartient.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>Gets a token, valid in the scope of the current <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph>, representing a field to be accessed from the associated dynamic method; the field is on the specified generic type.</source>
          <target state="translated">Obtient un jeton, valide dans la portée du <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph> actuel, représentant un champ accessible à partir de la méthode dynamique associée ; le champ est du type générique spécifié.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>A token that can be used as the operand of an MSIL instruction that accesses fields in the scope of the current <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph> object.</source>
          <target state="translated">Jeton qui peut être utilisé comme opérande d'une instruction MSIL qui accède à des champs dans la portée de l'objet <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph> actif.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>You must obtain a token for any field that will be accessed by the dynamic method associated with the current <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> object.</source>
          <target state="translated">Vous devez obtenir un jeton pour un champ qui sera accessible par la méthode dynamique associée actuel <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> objet.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>Use the <ph id="ph1">&lt;xref:System.Type.GetField%2A?displayProperty=nameWithType&gt;</ph> method to get a <ph id="ph2">&lt;xref:System.Reflection.FieldInfo&gt;</ph> for the field you want to access, and then use the <ph id="ph3">&lt;xref:System.Reflection.FieldInfo.FieldHandle%2A&gt;</ph> property to get the <ph id="ph4">&lt;xref:System.RuntimeFieldHandle&gt;</ph>.</source>
          <target state="translated">Utilisez le <ph id="ph1">&lt;xref:System.Type.GetField%2A?displayProperty=nameWithType&gt;</ph> méthode pour obtenir un <ph id="ph2">&lt;xref:System.Reflection.FieldInfo&gt;</ph> pour le champ que vous souhaitez accéder, puis utilisez le <ph id="ph3">&lt;xref:System.Reflection.FieldInfo.FieldHandle%2A&gt;</ph> propriété à obtenir le <ph id="ph4">&lt;xref:System.RuntimeFieldHandle&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)">
          <source>The method.</source>
          <target state="translated">Méthode.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)">
          <source>The generic type the method belongs to.</source>
          <target state="translated">Type générique auquel la méthode appartient.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)">
          <source>Gets a token, valid in the scope of the current <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph>, representing a method on a generic type.</source>
          <target state="translated">Obtient un jeton, valide dans la portée du <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph> actuel, qui représente une méthode sur un type générique.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)">
          <source>A token that can be used as the operand of an MSIL instruction that accesses methods, such as <ph id="ph1">&lt;see cref="F:System.Reflection.Emit.OpCodes.Call" /&gt;</ph> or <ph id="ph2">&lt;see cref="F:System.Reflection.Emit.OpCodes.Ldtoken" /&gt;</ph>, in the scope of the current <ph id="ph3">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph> object.</source>
          <target state="translated">Jeton qui peut être utilisé comme opérande d'une instruction MSIL qui accède à des méthodes, telles que <ph id="ph1">&lt;see cref="F:System.Reflection.Emit.OpCodes.Call" /&gt;</ph> ou <ph id="ph2">&lt;see cref="F:System.Reflection.Emit.OpCodes.Ldtoken" /&gt;</ph>, dans la portée de l'objet <ph id="ph3">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph> actuel.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)">
          <source>You must obtain a token for any method that will be called by the dynamic method associated with the current <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> object.</source>
          <target state="translated">Vous devez obtenir un jeton pour toute méthode qui sera appelée par la méthode dynamique associée actuel <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> objet.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)">
          <source>Use the <ph id="ph1">&lt;xref:System.Type.GetMethod%2A?displayProperty=nameWithType&gt;</ph> method to get a <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> for the method you want to call, and then use the <ph id="ph3">&lt;xref:System.Reflection.MethodBase.MethodHandle%2A&gt;</ph> property to get the <ph id="ph4">&lt;xref:System.RuntimeMethodHandle&gt;</ph>.</source>
          <target state="translated">Utilisez le <ph id="ph1">&lt;xref:System.Type.GetMethod%2A?displayProperty=nameWithType&gt;</ph> méthode pour obtenir un <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> pour la méthode que vous souhaitez appeler, puis utilisez le <ph id="ph3">&lt;xref:System.Reflection.MethodBase.MethodHandle%2A&gt;</ph> propriété à obtenir le <ph id="ph4">&lt;xref:System.RuntimeMethodHandle&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.DynamicILInfo">
          <source>Sets the code body of the associated dynamic method.</source>
          <target state="translated">Définit le corps du code de la méthode dynamique associée.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)">
          <source>An array that contains the MSIL stream.</source>
          <target state="translated">Tableau qui contient le flux MSIL.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)">
          <source>The maximum number of items on the operand stack when the method is executing.</source>
          <target state="translated">Nombre maximal d'éléments sur le tas d'opérandes lorsque la méthode s'exécute.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)">
          <source>Sets the code body of the associated dynamic method.</source>
          <target state="translated">Définit le corps du code de la méthode dynamique associée.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)">
          <source>No validity checks are performed on the MSIL stream.</source>
          <target state="translated">Aucune vérification de validité est effectuée sur le flux MSIL.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)">
          <source>Calling this method a second time replaces the first MSIL stream with the second.</source>
          <target state="translated">Appelez cette méthode une deuxième fois remplace le premier flux MSIL la seconde.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)">
          <source>Generating your own metadata and MSIL requires familiarity with the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</source>
          <target state="translated">Génération de vos propres métadonnées et MSIL nécessite une connaissance de la documentation du Common Language Infrastructure (CLI), en particulier « Partition II : Metadata Definition et Semantics » et « Partition III : CIL Instruction Set ».</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">La documentation est disponible en ligne. Consultez <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> sur MSDN et <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> sur le site web d’Ecma International.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)">
          <source>A pointer to a byte array containing the MSIL stream.</source>
          <target state="translated">Pointeur vers un tableau d'octets qui contient le flux MSIL.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)">
          <source>The number of bytes in the MSIL stream.</source>
          <target state="translated">Nombre d'octets dans le flux MSIL.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)">
          <source>The maximum number of items on the operand stack when the method is executing.</source>
          <target state="translated">Nombre maximal d'éléments sur le tas d'opérandes lorsque la méthode s'exécute.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)">
          <source>Sets the code body of the associated dynamic method.</source>
          <target state="translated">Définit le corps du code de la méthode dynamique associée.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)">
          <source>No validity checks are performed on the MSIL stream.</source>
          <target state="translated">Aucune vérification de validité est effectuée sur le flux MSIL.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)">
          <source>Calling this method a second time replaces the first MSIL stream with the second.</source>
          <target state="translated">Appelez cette méthode une deuxième fois remplace le premier flux MSIL la seconde.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)">
          <source>Generating your own metadata and MSIL requires familiarity with the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set."</source>
          <target state="translated">Génération de vos propres métadonnées et MSIL requiert connaissance de la documentation du Common Language Infrastructure (CLI), en particulier « Partition II : Metadata Definition et Semantics » et « Partition III : jeu d’instructions CIL. »</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">La documentation est disponible en ligne. Consultez <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> sur MSDN et <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> sur le site web d’Ecma International.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="code" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and <ph id="ph3">&lt;paramref name="codeSize" /&gt;</ph> is greater than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="code" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph> et  <ph id="ph3">&lt;paramref name="codeSize" /&gt;</ph> est supérieur à 0.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="codeSize" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="codeSize" /&gt;</ph> est inférieur à 0.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">requiert une confiance totale pour l’appelant immédiat.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Ce membre ne peut pas être utilisé par le code de confiance partielle ou transparent.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.DynamicILInfo">
          <source>Sets the exception metadata for the associated dynamic method.</source>
          <target state="translated">Définit les métadonnées d'exception de la méthode dynamique associée.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])">
          <source>An array that contains the exception metadata.</source>
          <target state="translated">Tableau qui contient les métadonnées d'exception.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])">
          <source>Sets the exception metadata for the associated dynamic method.</source>
          <target state="translated">Définit les métadonnées d'exception de la méthode dynamique associée.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])">
          <source>The exception metadata for a method defines the location and size of all <ph id="ph1">`try`</ph>, <ph id="ph2">`catch`</ph>, <ph id="ph3">`finally`</ph>, filter, and fault blocks.</source>
          <target state="translated">Les métadonnées d’exception pour une méthode définissent l’emplacement et la taille de tous les <ph id="ph1">`try`</ph>, <ph id="ph2">`catch`</ph>, <ph id="ph3">`finally`</ph>, filtre et les blocs d’erreur.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])">
          <source>For information on the layout of this metadata, see the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics".</source>
          <target state="translated">Pour plus d’informations sur la disposition de ces métadonnées, consultez la documentation du Common Language Infrastructure (CLI), en particulier « Partition II : Metadata Definition et Semantics ».</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">La documentation est disponible en ligne. Consultez <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> sur MSDN et <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> sur le site web d’Ecma International.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)">
          <source>A pointer to a byte array containing the exception metadata.</source>
          <target state="translated">Pointeur vers un tableau d'octets qui contient les métadonnées d'exception.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)">
          <source>The number of bytes of exception metadata.</source>
          <target state="translated">Nombre d'octets de métadonnées d'exception.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)">
          <source>Sets the exception metadata for the associated dynamic method.</source>
          <target state="translated">Définit les métadonnées d'exception de la méthode dynamique associée.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)">
          <source>The exception metadata for a method defines the location and size of all <ph id="ph1">`try`</ph>, <ph id="ph2">`catch`</ph>, <ph id="ph3">`finally`</ph>, filter, and fault blocks.</source>
          <target state="translated">Les métadonnées d’exception pour une méthode définissent l’emplacement et la taille de tous les <ph id="ph1">`try`</ph>, <ph id="ph2">`catch`</ph>, <ph id="ph3">`finally`</ph>, filtre et les blocs d’erreur.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)">
          <source>For information on the layout of this metadata, see the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</source>
          <target state="translated">Pour plus d’informations sur la disposition de ces métadonnées, consultez la documentation du Common Language Infrastructure (CLI), en particulier « Partition II : Metadata Definition et Semantics » et « Partition III : CIL Instruction Set ».</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">La documentation est disponible en ligne. Consultez <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> sur MSDN et <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> sur le site web d’Ecma International.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="exceptions" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and <ph id="ph3">&lt;paramref name="exceptionSize" /&gt;</ph> is greater than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="exceptions" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph> et  <ph id="ph3">&lt;paramref name="exceptionSize" /&gt;</ph> est supérieur à 0.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="exceptionSize" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="exceptionSize" /&gt;</ph> est inférieur à 0.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">requiert une confiance totale pour l’appelant immédiat.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Ce membre ne peut pas être utilisé par le code de confiance partielle ou transparent.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.DynamicILInfo">
          <source>Sets the local variable signature that describes the layout of local variables for the associated dynamic method.</source>
          <target state="translated">Définit la signature des variables locales qui décrit la mise en forme des variables locales de la méthode dynamique associée.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])">
          <source>An array that contains the layout of local variables for the associated <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicMethod" /&gt;</ph>.</source>
          <target state="translated">Tableau qui contient la structure des variables locales du <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicMethod" /&gt;</ph> associé.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])">
          <source>Sets the local variable signature that describes the layout of local variables for the associated dynamic method.</source>
          <target state="translated">Définit la signature des variables locales qui décrit la mise en forme des variables locales de la méthode dynamique associée.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])">
          <source>The local variable signature describes the layout of a method's local variables.</source>
          <target state="translated">La signature de variable locale décrit la disposition des variables locales d’une méthode.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])">
          <source>To simplify construction of the local variable signature, use the <ph id="ph1">`static`</ph> (<ph id="ph2">`Shared`</ph> in Visual Basic) <ph id="ph3">&lt;xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=nameWithType&gt;</ph> method to get a <ph id="ph4">&lt;xref:System.Reflection.Emit.SignatureHelper&gt;</ph> for the local signature.</source>
          <target state="translated">Pour simplifier la construction de la signature de variable locale, utilisez la <ph id="ph1">`static`</ph> (<ph id="ph2">`Shared`</ph> en Visual Basic) <ph id="ph3">&lt;xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=nameWithType&gt;</ph> méthode pour obtenir un <ph id="ph4">&lt;xref:System.Reflection.Emit.SignatureHelper&gt;</ph> pour la signature locale.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])">
          <source>For information on local variable signatures, see the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics".</source>
          <target state="translated">Pour plus d’informations sur les signatures de variables locales, consultez la documentation du Common Language Infrastructure (CLI), en particulier « Partition II : Metadata Definition et Semantics ».</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">La documentation est disponible en ligne. Consultez <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> sur MSDN et <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> sur le site web d’Ecma International.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)">
          <source>An array that contains the layout of local variables for the associated <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicMethod" /&gt;</ph>.</source>
          <target state="translated">Tableau qui contient la structure des variables locales du <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicMethod" /&gt;</ph> associé.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)">
          <source>The number of bytes in the signature.</source>
          <target state="translated">Nombre d'octets dans la signature.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)">
          <source>Sets the local variable signature that describes the layout of local variables for the associated dynamic method.</source>
          <target state="translated">Définit la signature des variables locales qui décrit la mise en forme des variables locales de la méthode dynamique associée.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)">
          <source>The local variable signature describes the layout of a method's local variables.</source>
          <target state="translated">La signature de variable locale décrit la disposition des variables locales d’une méthode.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)">
          <source>To simplify construction of the local variable signature, use the <ph id="ph1">`static`</ph> (<ph id="ph2">`Shared`</ph> in Visual Basic) <ph id="ph3">&lt;xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=nameWithType&gt;</ph> method to get a <ph id="ph4">&lt;xref:System.Reflection.Emit.SignatureHelper&gt;</ph> for the local signature.</source>
          <target state="translated">Pour simplifier la construction de la signature de variable locale, utilisez la <ph id="ph1">`static`</ph> (<ph id="ph2">`Shared`</ph> en Visual Basic) <ph id="ph3">&lt;xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=nameWithType&gt;</ph> méthode pour obtenir un <ph id="ph4">&lt;xref:System.Reflection.Emit.SignatureHelper&gt;</ph> pour la signature locale.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)">
          <source>For information on local variable signatures, see the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics".</source>
          <target state="translated">Pour plus d’informations sur les signatures de variables locales, consultez la documentation du Common Language Infrastructure (CLI), en particulier « Partition II : Metadata Definition et Semantics ».</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">La documentation est disponible en ligne. Consultez <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> sur MSDN et <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> sur le site web d’Ecma International.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="localSignature" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and <ph id="ph3">&lt;paramref name="signatureSize" /&gt;</ph> is greater than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="localSignature" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph> et  <ph id="ph3">&lt;paramref name="signatureSize" /&gt;</ph> est supérieur à 0.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="signatureSize" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="signatureSize" /&gt;</ph> est inférieur à 0.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">requiert une confiance totale pour l’appelant immédiat.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Ce membre ne peut pas être utilisé par le code de confiance partielle ou transparent.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>