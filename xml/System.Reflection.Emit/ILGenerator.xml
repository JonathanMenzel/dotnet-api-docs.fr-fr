<Type Name="ILGenerator" FullName="System.Reflection.Emit.ILGenerator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0ca2e1013cb2b77f0e0eafae9f9f5baa73cf5d97" />
    <Meta Name="ms.sourcegitcommit" Value="f9e3295b6cc303a611a73a84c4b27f9da792ad0d" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/26/2018" />
    <Meta Name="ms.locfileid" Value="31911413" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ILGenerator : System.Runtime.InteropServices._ILGenerator" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi beforefieldinit ILGenerator extends System.Object implements class System.Runtime.InteropServices._ILGenerator" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.Emit.ILGenerator" />
  <TypeSignature Language="VB.NET" Value="Public Class ILGenerator&#xA;Implements _ILGenerator" />
  <TypeSignature Language="C++ CLI" Value="public ref class ILGenerator : System::Runtime::InteropServices::_ILGenerator" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.Emit.ILGeneration</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.InteropServices._ILGenerator</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._ILGenerator))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="03824-101">Génère des instructions MSIL (Microsoft Intermediate Language).</span>
      <span class="sxs-lookup">
        <span data-stu-id="03824-101">Generates Microsoft intermediate language (MSIL) instructions.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03824-102"><xref:System.Reflection.Emit.ILGenerator> est utilisé pour générer des corps de méthode pour les méthodes et des constructeurs dans des assemblys dynamiques (représenté par la <xref:System.Reflection.Emit.MethodBuilder> et <xref:System.Reflection.Emit.ConstructorBuilder> classes) et pour les méthodes dynamiques autonome (représenté par la <xref:System.Reflection.Emit.DynamicMethod> classe).</span><span class="sxs-lookup"><span data-stu-id="03824-102"><xref:System.Reflection.Emit.ILGenerator> is used to generate method bodies for methods and constructors in dynamic assemblies (represented by the <xref:System.Reflection.Emit.MethodBuilder> and <xref:System.Reflection.Emit.ConstructorBuilder> classes) and for standalone dynamic methods (represented by the <xref:System.Reflection.Emit.DynamicMethod> class).</span></span> <span data-ttu-id="03824-103">Pour obtenir un <xref:System.Reflection.Emit.ILGenerator>, utilisez le <xref:System.Reflection.Emit.ConstructorBuilder.GetILGenerator%2A?displayProperty=nameWithType>, <xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A?displayProperty=nameWithType>, et <xref:System.Reflection.Emit.MethodBuilder.GetILGenerator%2A?displayProperty=nameWithType> méthodes.</span><span class="sxs-lookup"><span data-stu-id="03824-103">To obtain an <xref:System.Reflection.Emit.ILGenerator>, use the <xref:System.Reflection.Emit.ConstructorBuilder.GetILGenerator%2A?displayProperty=nameWithType>, <xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A?displayProperty=nameWithType>, and <xref:System.Reflection.Emit.MethodBuilder.GetILGenerator%2A?displayProperty=nameWithType> methods.</span></span>  
  
 <span data-ttu-id="03824-104">MSIL est utilisé comme entrée d’un compilateur juste-à-temps (JIT).</span><span class="sxs-lookup"><span data-stu-id="03824-104">MSIL is used as input to a just-in-time (JIT) compiler.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="BeginCatchBlock">
      <MemberSignature Language="C#" Value="public virtual void BeginCatchBlock (Type exceptionType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginCatchBlock(class System.Type exceptionType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.ILGenerator.BeginCatchBlock(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub BeginCatchBlock (exceptionType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginCatchBlock(Type ^ exceptionType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.ILGeneration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exceptionType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="exceptionType">
          <span data-ttu-id="03824-105">Objet <see cref="T:System.Type" /> représentant l'exception.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-105">The <see cref="T:System.Type" /> object that represents the exception.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="03824-106">Commence un bloc catch.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-106">Begins a catch block.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03824-107">Émet une instruction de branche à la fin du bloc d’exception en cours.</span><span class="sxs-lookup"><span data-stu-id="03824-107">Emits a branch instruction to the end of the current exception block.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="03824-108">Si le bloc de filtre d’exception retourne le `constant exception_execute_handler` (voir la documentation pour le Common Language Infrastructure Instruction Set), l’argument de la `BeginCatchBlock` n’est pas vérifiée.</span><span class="sxs-lookup"><span data-stu-id="03824-108">If the filter exception block returns the `constant exception_execute_handler` (see the documentation for the Common Language Infrastructure Instruction Set), the argument to the `BeginCatchBlock` is not checked.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="03824-109">L’exemple de code ci-dessous illustre l’utilisation contextuelle de la `BeginCatchBlock` (méthode).</span><span class="sxs-lookup"><span data-stu-id="03824-109">The code sample below demonstrates the contextual usage of the `BeginCatchBlock` method.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.ILGenerator.ThrowException Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.ThrowException Example/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit.ILGenerator.ThrowException Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.ThrowException Example/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit.ILGenerator.ThrowException Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.ThrowException Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="03824-110">Le bloc catch se trouve dans une exception filtrée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-110">The catch block is within a filtered exception.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="03824-111">
            <paramref name="exceptionType" /> est <see langword="null" /> et le bloc de filtre d'exceptions n'a pas retourné de valeur indiquant que l'exécution des blocs finally est requise jusqu'à ce que ce bloc catch soit trouvé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-111">
              <paramref name="exceptionType" /> is <see langword="null" />, and the exception filter block has not returned a value that indicates that finally blocks should be run until this catch block is located.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="03824-112">Le code MSIL (Microsoft Intermediate Language) en cours de génération ne se trouve pas dans un bloc d'exception actuellement.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-112">The Microsoft intermediate language (MSIL) being generated is not currently in an exception block.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="BeginExceptFilterBlock">
      <MemberSignature Language="C#" Value="public virtual void BeginExceptFilterBlock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginExceptFilterBlock() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.ILGenerator.BeginExceptFilterBlock" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub BeginExceptFilterBlock ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginExceptFilterBlock();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.ILGeneration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="03824-113">Commence un bloc d'exception pour une exception filtrée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-113">Begins an exception block for a filtered exception.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03824-114">Émet une instruction de branche à la fin du bloc d’exception en cours.</span><span class="sxs-lookup"><span data-stu-id="03824-114">Emits a branch instruction to the end of the current exception block.</span></span>  
  
 <span data-ttu-id="03824-115">Si actuel <xref:System.Reflection.Emit.ILGenerator> est associé un <xref:System.Reflection.Emit.DynamicMethod> objet, l’émission de blocs d’exception filtrée n’est pas pris en charge.</span><span class="sxs-lookup"><span data-stu-id="03824-115">If the current <xref:System.Reflection.Emit.ILGenerator> is associated with a <xref:System.Reflection.Emit.DynamicMethod> object, emitting filtered exception blocks is not supported.</span></span> <span data-ttu-id="03824-116"><xref:System.Reflection.Emit.DynamicILInfo> peut être utilisé pour construire une méthode dynamique qui utilise des blocs d’exception filtrés.</span><span class="sxs-lookup"><span data-stu-id="03824-116"><xref:System.Reflection.Emit.DynamicILInfo> can be used to construct a dynamic method that uses filtered exception blocks.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="03824-117">Le code MSIL (Microsoft Intermediate Language) en cours de génération ne se trouve pas dans un bloc d'exception actuellement.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-117">The Microsoft intermediate language (MSIL) being generated is not currently in an exception block.</span>
          </span>
          <span data-ttu-id="03824-118">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-118">-or-</span>
          </span>
          <span data-ttu-id="03824-119">Ce <see cref="T:System.Reflection.Emit.ILGenerator" /> appartient à un <see cref="T:System.Reflection.Emit.DynamicMethod" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-119">This <see cref="T:System.Reflection.Emit.ILGenerator" /> belongs to a <see cref="T:System.Reflection.Emit.DynamicMethod" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="BeginExceptionBlock">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.Emit.Label BeginExceptionBlock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Reflection.Emit.Label BeginExceptionBlock() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.ILGenerator.BeginExceptionBlock" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BeginExceptionBlock () As Label" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::Emit::Label BeginExceptionBlock();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.ILGeneration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.Label</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="03824-120">Commence un bloc d'exception pour une exception non filtrée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-120">Begins an exception block for a non-filtered exception.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="03824-121">Étiquette pour la fin du bloc.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-121">The label for the end of the block.</span>
          </span>
          <span data-ttu-id="03824-122">Cela vous positionnera correctement pour exécuter les blocs finally ou pour terminer le bloc try.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-122">This will leave you in the correct place to execute finally blocks or to finish the try.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03824-123">Création d’un bloc exception enregistre des informations, mais n’émet pas réellement de n’importe quel langage intermédiaire Microsoft (MSIL) dans le flux.</span><span class="sxs-lookup"><span data-stu-id="03824-123">Creating an exception block records some information, but does not actually emit any Microsoft intermediate language (MSIL) onto the stream.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="03824-124">L’exemple de code ci-dessous illustre l’utilisation contextuelle de la `BeginExceptionBlock` (méthode).</span><span class="sxs-lookup"><span data-stu-id="03824-124">The code sample below demonstrates the contextual usage of the `BeginExceptionBlock` method.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.ILGenerator.ThrowException Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.ThrowException Example/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit.ILGenerator.ThrowException Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.ThrowException Example/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit.ILGenerator.ThrowException Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.ThrowException Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginFaultBlock">
      <MemberSignature Language="C#" Value="public virtual void BeginFaultBlock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginFaultBlock() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.ILGenerator.BeginFaultBlock" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub BeginFaultBlock ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginFaultBlock();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.ILGeneration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="03824-125">Commence un bloc d'erreur d'exception dans le flux MSIL.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-125">Begins an exception fault block in the Microsoft intermediate language (MSIL) stream.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03824-126">Si actuel <xref:System.Reflection.Emit.ILGenerator> est associé un <xref:System.Reflection.Emit.DynamicMethod> objet, l’émission de blocs d’erreur d’exception n’est pas pris en charge.</span><span class="sxs-lookup"><span data-stu-id="03824-126">If the current <xref:System.Reflection.Emit.ILGenerator> is associated with a <xref:System.Reflection.Emit.DynamicMethod> object, emitting exception fault blocks is not supported.</span></span> <span data-ttu-id="03824-127"><xref:System.Reflection.Emit.DynamicILInfo> peut être utilisé pour construire une méthode dynamique qui utilise des blocs d’erreur d’exception.</span><span class="sxs-lookup"><span data-stu-id="03824-127"><xref:System.Reflection.Emit.DynamicILInfo> can be used to construct a dynamic method that uses exception fault blocks.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="03824-128">L’exemple de code suivant illustre l’utilisation de `BeginFaultBlock`.</span><span class="sxs-lookup"><span data-stu-id="03824-128">The following code sample illustrates the use of `BeginFaultBlock`.</span></span>  
  
 [!code-cpp[ILGenerator_BeginFaultBlock#1](~/samples/snippets/cpp/VS_Snippets_CLR/ILGenerator_BeginFaultBlock/CPP/ilgenerator_beginfaultblock.cpp#1)]
 [!code-csharp[ILGenerator_BeginFaultBlock#1](~/samples/snippets/csharp/VS_Snippets_CLR/ILGenerator_BeginFaultBlock/CS/ilgenerator_beginfaultblock.cs#1)]
 [!code-vb[ILGenerator_BeginFaultBlock#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ILGenerator_BeginFaultBlock/VB/ilgenerator_beginfaultblock.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="03824-129">Le MSIL qui est généré n'est pas actuellement dans un bloc d'exception.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-129">The MSIL being generated is not currently in an exception block.</span>
          </span>
          <span data-ttu-id="03824-130">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-130">-or-</span>
          </span>
          <span data-ttu-id="03824-131">Ce <see cref="T:System.Reflection.Emit.ILGenerator" /> appartient à un <see cref="T:System.Reflection.Emit.DynamicMethod" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-131">This <see cref="T:System.Reflection.Emit.ILGenerator" /> belongs to a <see cref="T:System.Reflection.Emit.DynamicMethod" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="BeginFinallyBlock">
      <MemberSignature Language="C#" Value="public virtual void BeginFinallyBlock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginFinallyBlock() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.ILGenerator.BeginFinallyBlock" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub BeginFinallyBlock ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginFinallyBlock();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.ILGeneration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="03824-132">Commence un bloc finally dans le flux d'instructions MSIL.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-132">Begins a finally block in the Microsoft intermediate language (MSIL) instruction stream.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="03824-133">L’exemple de code suivant illustre l’utilisation de `BeginFinallyBlock`.</span><span class="sxs-lookup"><span data-stu-id="03824-133">The following code sample illustrates the use of `BeginFinallyBlock`.</span></span>  
  
 [!code-cpp[ILGenerator_BeginFinallyBlock_2#2](~/samples/snippets/cpp/VS_Snippets_CLR/ILGenerator_BeginFinallyBlock_2/CPP/ILGenerator_BeginFinallyBlock_2.cpp#2)]
 [!code-csharp[ILGenerator_BeginFinallyBlock_2#2](~/samples/snippets/csharp/VS_Snippets_CLR/ILGenerator_BeginFinallyBlock_2/CS/ilgenerator_beginfinallyblock_2.cs#2)]
 [!code-vb[ILGenerator_BeginFinallyBlock_2#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/ILGenerator_BeginFinallyBlock_2/VB/ilgenerator_beginfinallyblock_2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="03824-134">Le MSIL qui est généré n'est pas actuellement dans un bloc d'exception.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-134">The MSIL being generated is not currently in an exception block.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="BeginScope">
      <MemberSignature Language="C#" Value="public virtual void BeginScope ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginScope() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.ILGenerator.BeginScope" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub BeginScope ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginScope();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.ILGeneration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="03824-135">Commence une portée lexicale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-135">Begins a lexical scope.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03824-136">Cette méthode est utilisée pour émettre des informations symboliques.</span><span class="sxs-lookup"><span data-stu-id="03824-136">This method is used to emit symbolic information.</span></span> <span data-ttu-id="03824-137">Variables locales déclarées après <xref:System.Reflection.Emit.ILGenerator.BeginScope%2A> sont limitées jusqu'à correspondant <xref:System.Reflection.Emit.ILGenerator.EndScope%2A> est appelée.</span><span class="sxs-lookup"><span data-stu-id="03824-137">Local variables declared after <xref:System.Reflection.Emit.ILGenerator.BeginScope%2A> are scoped until the corresponding <xref:System.Reflection.Emit.ILGenerator.EndScope%2A> is called.</span></span>  
  
 <span data-ttu-id="03824-138">Si actuel <xref:System.Reflection.Emit.ILGenerator> est associé un <xref:System.Reflection.Emit.DynamicMethod> de l’objet, il ne prend pas en charge les informations symboliques.</span><span class="sxs-lookup"><span data-stu-id="03824-138">If the current <xref:System.Reflection.Emit.ILGenerator> is associated with a <xref:System.Reflection.Emit.DynamicMethod> object, it does not support symbolic information.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="03824-139">L’exemple de code suivant illustre l’utilisation de `BeginScope` et `EndScope`.</span><span class="sxs-lookup"><span data-stu-id="03824-139">The following code sample illustrates the use of `BeginScope` and `EndScope`.</span></span>  
  
 [!code-cpp[ILGenerator_Begin_EndScope#2](~/samples/snippets/cpp/VS_Snippets_CLR/ILGenerator_Begin_EndScope/CPP/ilgenerator_begin_endscope.cpp#2)]
 [!code-csharp[ILGenerator_Begin_EndScope#2](~/samples/snippets/csharp/VS_Snippets_CLR/ILGenerator_Begin_EndScope/CS/ilgenerator_begin_endscope.cs#2)]
 [!code-vb[ILGenerator_Begin_EndScope#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/ILGenerator_Begin_EndScope/VB/ilgenerator_begin_endscope.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="03824-140">Ce <see cref="T:System.Reflection.Emit.ILGenerator" /> appartient à un <see cref="T:System.Reflection.Emit.DynamicMethod" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-140">This <see cref="T:System.Reflection.Emit.ILGenerator" /> belongs to a <see cref="T:System.Reflection.Emit.DynamicMethod" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DeclareLocal">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.ILGeneration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="03824-141">Déclare une variable locale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-141">Declares a local variable.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DeclareLocal">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.Emit.LocalBuilder DeclareLocal (Type localType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.Emit.LocalBuilder DeclareLocal(class System.Type localType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeclareLocal (localType As Type) As LocalBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::Emit::LocalBuilder ^ DeclareLocal(Type ^ localType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.ILGeneration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.LocalBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="localType">
          <span data-ttu-id="03824-142">Objet <see cref="T:System.Type" /> représentant le type de variable locale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-142">A <see cref="T:System.Type" /> object that represents the type of the local variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="03824-143">Déclare une variable locale du type spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-143">Declares a local variable of the specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="03824-144">Variable locale déclarée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-144">The declared local variable.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03824-145">La variable locale est créée dans la portée lexicale actuelle ; par exemple, si le code est émis dans un `for` boucle (`For` en Visual Basic), la portée de la variable est la boucle.</span><span class="sxs-lookup"><span data-stu-id="03824-145">The local variable is created in the current lexical scope; for example, if code is being emitted in a `for` loop (`For` loop in Visual Basic), the scope of the variable is the loop.</span></span>  
  
 <span data-ttu-id="03824-146">Une variable locale créée avec cette surcharge n’est pas épinglée.</span><span class="sxs-lookup"><span data-stu-id="03824-146">A local variable created with this overload is not pinned.</span></span> <span data-ttu-id="03824-147">Pour créer une variable épinglée à utiliser avec des pointeurs non managés, utilisez la <xref:System.Reflection.Emit.ILGenerator.DeclareLocal%28System.Type%2CSystem.Boolean%29> surcharge de méthode.</span><span class="sxs-lookup"><span data-stu-id="03824-147">To create a pinned variable for use with unmanaged pointers, use the <xref:System.Reflection.Emit.ILGenerator.DeclareLocal%28System.Type%2CSystem.Boolean%29> method overload.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="03824-148">L’exemple de code suivant illustre l’utilisation de la `DeclareLocal` (méthode).</span><span class="sxs-lookup"><span data-stu-id="03824-148">The following code example demonstrates the use of the `DeclareLocal` method.</span></span> <span data-ttu-id="03824-149">Ce code fait partie d’un exemple de code plus complet pour la <xref:System.Reflection.Emit.LocalBuilder> classe.</span><span class="sxs-lookup"><span data-stu-id="03824-149">This code is part of a larger code example for the <xref:System.Reflection.Emit.LocalBuilder> class.</span></span>  
  
 [!code-cpp[LocalBuilder_Sample_SetLocalSymInfo#2](~/samples/snippets/cpp/VS_Snippets_CLR/LocalBuilder_Sample_SetLocalSymInfo/CPP/localbuilder_sample_4.cpp#2)]
 [!code-csharp[LocalBuilder_Sample_SetLocalSymInfo#2](~/samples/snippets/csharp/VS_Snippets_CLR/LocalBuilder_Sample_SetLocalSymInfo/CS/localbuilder_sample_4.cs#2)]
 [!code-vb[LocalBuilder_Sample_SetLocalSymInfo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/LocalBuilder_Sample_SetLocalSymInfo/VB/localbuilder_sample_4.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="03824-150">
            <paramref name="localType" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-150">
              <paramref name="localType" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="03824-151">Le type conteneur a été créé à l'aide de la méthode <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-151">The containing type has been created by the <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> method.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DeclareLocal">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.Emit.LocalBuilder DeclareLocal (Type localType, bool pinned);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.Emit.LocalBuilder DeclareLocal(class System.Type localType, bool pinned) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeclareLocal (localType As Type, pinned As Boolean) As LocalBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::Emit::LocalBuilder ^ DeclareLocal(Type ^ localType, bool pinned);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.ILGeneration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.LocalBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localType" Type="System.Type" />
        <Parameter Name="pinned" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="localType">
          <span data-ttu-id="03824-152">Objet <see cref="T:System.Type" /> représentant le type de variable locale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-152">A <see cref="T:System.Type" /> object that represents the type of the local variable.</span>
          </span>
        </param>
        <param name="pinned">
          <span data-ttu-id="03824-153">
            <see langword="true" /> pour épingler l'objet en mémoire ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-153">
              <see langword="true" /> to pin the object in memory; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="03824-154">Déclare une variable locale du type spécifié, en épinglant éventuellement l'objet auquel la variable fait référence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-154">Declares a local variable of the specified type, optionally pinning the object referred to by the variable.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="03824-155">Objet <see cref="T:System.Reflection.Emit.LocalBuilder" /> qui représente la variable locale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-155">A <see cref="T:System.Reflection.Emit.LocalBuilder" /> object that represents the local variable.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03824-156">La variable locale est créée dans la portée lexicale actuelle ; par exemple, si le code est émis dans un `for` boucle (`For` en Visual Basic), la portée de la variable est la boucle.</span><span class="sxs-lookup"><span data-stu-id="03824-156">The local variable is created in the current lexical scope; for example, if code is being emitted in a `for` loop (`For` loop in Visual Basic), the scope of the variable is the loop.</span></span>  
  
 <span data-ttu-id="03824-157">Un objet doit être épinglé dans du code unsafe, il peut être référencé par un pointeur non managé.</span><span class="sxs-lookup"><span data-stu-id="03824-157">In unsafe code, an object must be pinned before it can be referred to by an unmanaged pointer.</span></span> <span data-ttu-id="03824-158">Alors que l’objet référencé est épinglé, il ne peut pas être déplacé par le garbage collection.</span><span class="sxs-lookup"><span data-stu-id="03824-158">While the referenced object is pinned, it cannot be moved by garbage collection.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="03824-159">
            <paramref name="localType" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-159">
              <paramref name="localType" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="03824-160">Le type conteneur a été créé à l'aide de la méthode <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-160">The containing type has been created by the <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> method.</span>
          </span>
          <span data-ttu-id="03824-161">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-161">-or-</span>
          </span>
          <span data-ttu-id="03824-162">Le corps de la méthode englobante a été créé par la méthode <see cref="M:System.Reflection.Emit.MethodBuilder.CreateMethodBody(System.Byte[],System.Int32)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-162">The method body of the enclosing method has been created by the <see cref="M:System.Reflection.Emit.MethodBuilder.CreateMethodBody(System.Byte[],System.Int32)" /> method.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="03824-163">La méthode à laquelle ce <see cref="T:System.Reflection.Emit.ILGenerator" /> est associé n'est pas représentée par <see cref="T:System.Reflection.Emit.MethodBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-163">The method with which this <see cref="T:System.Reflection.Emit.ILGenerator" /> is associated is not represented by a <see cref="T:System.Reflection.Emit.MethodBuilder" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DefineLabel">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.Emit.Label DefineLabel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Reflection.Emit.Label DefineLabel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.ILGenerator.DefineLabel" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DefineLabel () As Label" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::Emit::Label DefineLabel();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.ILGeneration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.Label</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="03824-164">Déclare une nouvelle étiquette.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-164">Declares a new label.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="03824-165">Retourne une nouvelle étiquette qui peut être utilisée en tant que jeton pour la création de branche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-165">Returns a new label that can be used as a token for branching.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03824-166">Pour définir la position de l’étiquette dans le flux de données, vous devez appeler <xref:System.Reflection.Emit.ILGenerator.MarkLabel%2A>.</span><span class="sxs-lookup"><span data-stu-id="03824-166">To set the position of the label within the stream, you must call <xref:System.Reflection.Emit.ILGenerator.MarkLabel%2A>.</span></span>  
  
 <span data-ttu-id="03824-167">Ceci est un simple jeton et ne représente pas encore de n’importe quel emplacement particulier dans le flux.</span><span class="sxs-lookup"><span data-stu-id="03824-167">This is just a token and does not yet represent any particular location within the stream.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="03824-168">L’exemple de code ci-dessous illustre l’utilisation contextuelle de la `DefineLabel` (méthode).</span><span class="sxs-lookup"><span data-stu-id="03824-168">The code sample below demonstrates the contextual usage of the `DefineLabel` method.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.Label Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.Label Example/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit.Label Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.Label Example/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit.Label Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.Label Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Emit">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.ILGeneration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="03824-169">Place une instruction dans le flux MSIL pour le compilateur juste-à-temps (JIT).</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-169">Puts an instruction onto the Microsoft Intermediate Language (MSIL) stream for the just-in-time (JIT) compiler.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Emit">
      <MemberSignature Language="C#" Value="public virtual void Emit (System.Reflection.Emit.OpCode opcode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Emit(valuetype System.Reflection.Emit.OpCode opcode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Emit(System::Reflection::Emit::OpCode opcode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.ILGeneration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="opcode" Type="System.Reflection.Emit.OpCode" />
      </Parameters>
      <Docs>
        <param name="opcode">
          <span data-ttu-id="03824-170">Instruction MSIL à placer dans le flux.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-170">The Microsoft Intermediate Language (MSIL) instruction to be put onto the stream.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="03824-171">Place l'instruction spécifiée dans le flux d'instructions.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-171">Puts the specified instruction onto the stream of instructions.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03824-172">Si le `opcode` paramètre requiert un argument, l’appelant doit s’assurer que la longueur de l’argument correspond à la longueur du paramètre déclaré.</span><span class="sxs-lookup"><span data-stu-id="03824-172">If the `opcode` parameter requires an argument, the caller must ensure that the argument length matches the length of the declared parameter.</span></span> <span data-ttu-id="03824-173">Dans le cas contraire, les résultats seront imprévisibles.</span><span class="sxs-lookup"><span data-stu-id="03824-173">Otherwise, results will be unpredictable.</span></span> <span data-ttu-id="03824-174">Par exemple, si l’instruction Emit requiert un opérande de 2 octets et que l’appelant fournit un opérande à 4 octets, le runtime enverra deux octets supplémentaires au flux d’instructions.</span><span class="sxs-lookup"><span data-stu-id="03824-174">For example, if the Emit instruction requires a 2-byte operand and the caller supplies a 4-byte operand, the runtime will emit two additional bytes to the instruction stream.</span></span> <span data-ttu-id="03824-175">Ces octets supplémentaires seront <xref:System.Reflection.Emit.OpCodes.Nop> obtenir des instructions.</span><span class="sxs-lookup"><span data-stu-id="03824-175">These extra bytes will be <xref:System.Reflection.Emit.OpCodes.Nop> instructions.</span></span>  
  
 <span data-ttu-id="03824-176">Les valeurs de l’instruction sont définis dans <xref:System.Reflection.Emit.OpCodes>.</span><span class="sxs-lookup"><span data-stu-id="03824-176">The instruction values are defined in <xref:System.Reflection.Emit.OpCodes>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="03824-177">L’exemple de code ci-dessous illustre l’utilisation de `Emit` pour générer une sortie MSIL via une instance de <xref:System.Reflection.Emit.ILGenerator>.</span><span class="sxs-lookup"><span data-stu-id="03824-177">The code sample below demonstrates the use of `Emit` to generate MSIL output via an instance of <xref:System.Reflection.Emit.ILGenerator>.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.ILGenerator.Emit Example 2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.Emit Example 2/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit.ILGenerator.Emit Example 2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.Emit Example 2/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit.ILGenerator.Emit Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.Emit Example 2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Emit">
      <MemberSignature Language="C#" Value="public virtual void Emit (System.Reflection.Emit.OpCode opcode, byte arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Emit(valuetype System.Reflection.Emit.OpCode opcode, unsigned int8 arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Emit(System::Reflection::Emit::OpCode opcode, System::Byte arg);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.ILGeneration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="opcode" Type="System.Reflection.Emit.OpCode" />
        <Parameter Name="arg" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="opcode">
          <span data-ttu-id="03824-178">Instruction MSIL à placer dans le flux.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-178">The MSIL instruction to be put onto the stream.</span>
          </span>
        </param>
        <param name="arg">
          <span data-ttu-id="03824-179">Argument en caractères faisant l'objet d'un push dans le flux immédiatement après l'instruction.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-179">The character argument pushed onto the stream immediately after the instruction.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="03824-180">Place l'instruction et l'argument en caractères spécifiés dans le flux d'instructions MSIL.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-180">Puts the specified instruction and character argument onto the Microsoft intermediate language (MSIL) stream of instructions.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03824-181">Les valeurs de l’instruction sont définis dans le `OpCodes` énumération.</span><span class="sxs-lookup"><span data-stu-id="03824-181">The instruction values are defined in the `OpCodes` enumeration.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Emit">
      <MemberSignature Language="C#" Value="public virtual void Emit (System.Reflection.Emit.OpCode opcode, double arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Emit(valuetype System.Reflection.Emit.OpCode opcode, float64 arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Emit(System::Reflection::Emit::OpCode opcode, double arg);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.ILGeneration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="opcode" Type="System.Reflection.Emit.OpCode" />
        <Parameter Name="arg" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="opcode">
          <span data-ttu-id="03824-182">Instruction MSIL à placer dans le flux.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-182">The MSIL instruction to be put onto the stream.</span>
          </span>
          <span data-ttu-id="03824-183">Définie dans l'énumération <see langword="OpCodes" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-183">Defined in the <see langword="OpCodes" /> enumeration.</span>
          </span>
        </param>
        <param name="arg">
          <span data-ttu-id="03824-184">Argument numérique faisant l'objet d'un push dans le flux immédiatement après l'instruction.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-184">The numerical argument pushed onto the stream immediately after the instruction.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="03824-185">Place l'instruction et l'argument numérique spécifiés dans le flux d'instructions MSIL.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-185">Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03824-186">Les valeurs de l’instruction sont définis dans le `OpCodes` énumération.</span><span class="sxs-lookup"><span data-stu-id="03824-186">The instruction values are defined in the `OpCodes` enumeration.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Emit">
      <MemberSignature Language="C#" Value="public virtual void Emit (System.Reflection.Emit.OpCode opcode, short arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Emit(valuetype System.Reflection.Emit.OpCode opcode, int16 arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Emit(System::Reflection::Emit::OpCode opcode, short arg);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.ILGeneration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="opcode" Type="System.Reflection.Emit.OpCode" />
        <Parameter Name="arg" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="opcode">
          <span data-ttu-id="03824-187">Instruction MSIL à émettre dans le flux.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-187">The MSIL instruction to be emitted onto the stream.</span>
          </span>
        </param>
        <param name="arg">
          <span data-ttu-id="03824-188">Argument <see langword="Int" /> faisant l'objet d'un push dans le flux immédiatement après l'instruction.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-188">The <see langword="Int" /> argument pushed onto the stream immediately after the instruction.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="03824-189">Place l'instruction et l'argument numérique spécifiés dans le flux d'instructions MSIL.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-189">Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03824-190">Les valeurs de l’instruction sont définis dans le `OpCodes` énumération.</span><span class="sxs-lookup"><span data-stu-id="03824-190">The instruction values are defined in the `OpCodes` enumeration.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Emit">
      <MemberSignature Language="C#" Value="public virtual void Emit (System.Reflection.Emit.OpCode opcode, int arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Emit(valuetype System.Reflection.Emit.OpCode opcode, int32 arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Emit(System::Reflection::Emit::OpCode opcode, int arg);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.ILGeneration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="opcode" Type="System.Reflection.Emit.OpCode" />
        <Parameter Name="arg" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="opcode">
          <span data-ttu-id="03824-191">Instruction MSIL à placer dans le flux.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-191">The MSIL instruction to be put onto the stream.</span>
          </span>
        </param>
        <param name="arg">
          <span data-ttu-id="03824-192">Argument numérique faisant l'objet d'un push dans le flux immédiatement après l'instruction.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-192">The numerical argument pushed onto the stream immediately after the instruction.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="03824-193">Place l'instruction et l'argument numérique spécifiés dans le flux d'instructions MSIL.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-193">Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03824-194">Les valeurs de l’instruction sont définis dans le `OpCodes` énumération.</span><span class="sxs-lookup"><span data-stu-id="03824-194">The instruction values are defined in the `OpCodes` enumeration.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Emit">
      <MemberSignature Language="C#" Value="public virtual void Emit (System.Reflection.Emit.OpCode opcode, long arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Emit(valuetype System.Reflection.Emit.OpCode opcode, int64 arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int64)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Emit(System::Reflection::Emit::OpCode opcode, long arg);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.ILGeneration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="opcode" Type="System.Reflection.Emit.OpCode" />
        <Parameter Name="arg" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="opcode">
          <span data-ttu-id="03824-195">Instruction MSIL à placer dans le flux.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-195">The MSIL instruction to be put onto the stream.</span>
          </span>
        </param>
        <param name="arg">
          <span data-ttu-id="03824-196">Argument numérique faisant l'objet d'un push dans le flux immédiatement après l'instruction.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-196">The numerical argument pushed onto the stream immediately after the instruction.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="03824-197">Place l'instruction et l'argument numérique spécifiés dans le flux d'instructions MSIL.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-197">Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03824-198">Les valeurs de l’instruction sont définis dans le `OpCodes` énumération.</span><span class="sxs-lookup"><span data-stu-id="03824-198">The instruction values are defined in the `OpCodes` enumeration.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Emit">
      <MemberSignature Language="C#" Value="public virtual void Emit (System.Reflection.Emit.OpCode opcode, System.Reflection.ConstructorInfo con);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Emit(valuetype System.Reflection.Emit.OpCode opcode, class System.Reflection.ConstructorInfo con) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.ConstructorInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Emit(System::Reflection::Emit::OpCode opcode, System::Reflection::ConstructorInfo ^ con);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.ILGeneration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="opcode" Type="System.Reflection.Emit.OpCode" />
        <Parameter Name="con" Type="System.Reflection.ConstructorInfo" />
      </Parameters>
      <Docs>
        <param name="opcode">
          <span data-ttu-id="03824-199">Instruction MSIL à émettre dans le flux.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-199">The MSIL instruction to be emitted onto the stream.</span>
          </span>
        </param>
        <param name="con">
          <span data-ttu-id="03824-200">
            <see langword="ConstructorInfo" /> qui représente un constructeur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-200">A <see langword="ConstructorInfo" /> representing a constructor.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="03824-201">Place l'instruction et le jeton de métadonnées spécifiés pour le constructeur donné dans le flux d'instructions MSIL.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-201">Puts the specified instruction and metadata token for the specified constructor onto the Microsoft intermediate language (MSIL) stream of instructions.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03824-202">Les valeurs de l’instruction sont définis dans le `OpCodes` énumération.</span><span class="sxs-lookup"><span data-stu-id="03824-202">The instruction values are defined in the `OpCodes` enumeration.</span></span>  
  
 <span data-ttu-id="03824-203">L’emplacement de `con` est enregistré pour le flux d’instructions puisse être corrigé, si nécessaire, lors de la persistance du module dans un fichier exécutable portable (PE).</span><span class="sxs-lookup"><span data-stu-id="03824-203">The location of `con` is recorded so that the instruction stream can be patched if necessary when persisting the module to a portable executable (PE) file.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="03824-204">
            <paramref name="con" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-204">
              <paramref name="con" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="03824-205">Cette exception est nouvelle dans le [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)].</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-205">This exception is new in the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)].</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Emit">
      <MemberSignature Language="C#" Value="public virtual void Emit (System.Reflection.Emit.OpCode opcode, System.Reflection.Emit.Label label);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Emit(valuetype System.Reflection.Emit.OpCode opcode, valuetype System.Reflection.Emit.Label label) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Emit(System::Reflection::Emit::OpCode opcode, System::Reflection::Emit::Label label);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.ILGeneration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="opcode" Type="System.Reflection.Emit.OpCode" />
        <Parameter Name="label" Type="System.Reflection.Emit.Label" />
      </Parameters>
      <Docs>
        <param name="opcode">
          <span data-ttu-id="03824-206">Instruction MSIL à émettre dans le flux.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-206">The MSIL instruction to be emitted onto the stream.</span>
          </span>
        </param>
        <param name="label">
          <span data-ttu-id="03824-207">Étiquette vers laquelle créer une branche à partir de cet emplacement.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-207">The label to which to branch from this location.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="03824-208">Place l'instruction spécifiée dans le flux MSIL et laisse suffisamment d'espace pour inclure une étiquette lorsque les corrections sont faites.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-208">Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream and leaves space to include a label when fixes are done.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03824-209">Les valeurs de l’instruction sont définis dans le `OpCodes` énumération.</span><span class="sxs-lookup"><span data-stu-id="03824-209">The instruction values are defined in the `OpCodes` enumeration.</span></span>  
  
 <span data-ttu-id="03824-210">Les étiquettes sont créées à l’aide de <xref:System.Reflection.Emit.ILGenerator.DefineLabel%2A>, et leur position dans le flux est définie à l’aide de <xref:System.Reflection.Emit.ILGenerator.MarkLabel%2A>.</span><span class="sxs-lookup"><span data-stu-id="03824-210">Labels are created using <xref:System.Reflection.Emit.ILGenerator.DefineLabel%2A>, and their location within the stream is fixed by using <xref:System.Reflection.Emit.ILGenerator.MarkLabel%2A>.</span></span> <span data-ttu-id="03824-211">Si une instruction à octet unique est utilisée, l’étiquette peut représenter un saut d’au maximum 127 octets dans le flux de données.</span><span class="sxs-lookup"><span data-stu-id="03824-211">If a single-byte instruction is used, the label can represent a jump of at most 127 bytes along the stream.</span></span> <span data-ttu-id="03824-212">`opcode` doit représenter une instruction de branche.</span><span class="sxs-lookup"><span data-stu-id="03824-212">`opcode` must represent a branch instruction.</span></span> <span data-ttu-id="03824-213">Les branches étant des instructions relatives, `label` est remplacé par l’offset de branche approprié au cours du processus de correction.</span><span class="sxs-lookup"><span data-stu-id="03824-213">Because branches are relative instructions, `label` will be replaced with the correct offset to branch during the fixup process.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="03824-214">L’exemple de code ci-dessous illustre la création d’une méthode dynamique avec un tableau de saut.</span><span class="sxs-lookup"><span data-stu-id="03824-214">The code sample below illustrates the creation of a dynamic method with a jump table.</span></span> <span data-ttu-id="03824-215">Le tableau de saut est créé à l’aide d’un tableau de <xref:System.Reflection.Emit.Label>.</span><span class="sxs-lookup"><span data-stu-id="03824-215">The jump table is built using an array of <xref:System.Reflection.Emit.Label>.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.ILGenerator.Emit Example 2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.Emit Example 2/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit.ILGenerator.Emit Example 2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.Emit Example 2/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit.ILGenerator.Emit Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.Emit Example 2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Emit">
      <MemberSignature Language="C#" Value="public virtual void Emit (System.Reflection.Emit.OpCode opcode, System.Reflection.Emit.Label[] labels);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Emit(valuetype System.Reflection.Emit.OpCode opcode, valuetype System.Reflection.Emit.Label[] labels) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Emit(System::Reflection::Emit::OpCode opcode, cli::array &lt;System::Reflection::Emit::Label&gt; ^ labels);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.ILGeneration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="opcode" Type="System.Reflection.Emit.OpCode" />
        <Parameter Name="labels" Type="System.Reflection.Emit.Label[]" />
      </Parameters>
      <Docs>
        <param name="opcode">
          <span data-ttu-id="03824-216">Instruction MSIL à émettre dans le flux.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-216">The MSIL instruction to be emitted onto the stream.</span>
          </span>
        </param>
        <param name="labels">
          <span data-ttu-id="03824-217">Tableau d'objets étiquette vers lesquels créer une branche à partir de cet emplacement.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-217">The array of label objects to which to branch from this location.</span>
          </span>
          <span data-ttu-id="03824-218">Toutes les étiquettes seront utilisées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-218">All of the labels will be used.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="03824-219">Place l'instruction spécifiée dans le flux MSIL et laisse suffisamment d'espace pour inclure une étiquette lorsque les corrections sont faites.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-219">Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream and leaves space to include a label when fixes are done.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03824-220">Émet une table de commutateur.</span><span class="sxs-lookup"><span data-stu-id="03824-220">Emits a switch table.</span></span>  
  
 <span data-ttu-id="03824-221">Les valeurs de l’instruction sont définis dans le `OpCodes` énumération.</span><span class="sxs-lookup"><span data-stu-id="03824-221">The instruction values are defined in the `OpCodes` enumeration.</span></span>  
  
 <span data-ttu-id="03824-222">Les étiquettes sont créées à l’aide de <xref:System.Reflection.Emit.ILGenerator.DefineLabel%2A> et leur position dans le flux est définie à l’aide de <xref:System.Reflection.Emit.ILGenerator.MarkLabel%2A>.</span><span class="sxs-lookup"><span data-stu-id="03824-222">Labels are created using <xref:System.Reflection.Emit.ILGenerator.DefineLabel%2A> and their location within the stream is fixed by using <xref:System.Reflection.Emit.ILGenerator.MarkLabel%2A>.</span></span> <span data-ttu-id="03824-223">Si une instruction à octet unique est utilisée, l’étiquette peut représenter un saut d’au maximum 127 octets dans le flux de données.</span><span class="sxs-lookup"><span data-stu-id="03824-223">If a single-byte instruction is used, the label can represent a jump of at most 127 bytes along the stream.</span></span> <span data-ttu-id="03824-224">`opcode` doit représenter une instruction de branche.</span><span class="sxs-lookup"><span data-stu-id="03824-224">`opcode` must represent a branch instruction.</span></span> <span data-ttu-id="03824-225">Les branches étant des instructions relatives, `label` est remplacé par l’offset de branche approprié au cours du processus de correction.</span><span class="sxs-lookup"><span data-stu-id="03824-225">Because branches are relative instructions, `label` will be replaced with the correct offset to branch during the fixup process.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="03824-226">L’exemple de code ci-dessous illustre la création d’une méthode dynamique avec un tableau de saut.</span><span class="sxs-lookup"><span data-stu-id="03824-226">The code sample below illustrates the creation of a dynamic method with a jump table.</span></span> <span data-ttu-id="03824-227">Le tableau de saut est créé à l’aide d’un tableau de <xref:System.Reflection.Emit.Label>.</span><span class="sxs-lookup"><span data-stu-id="03824-227">The jump table is built using an array of <xref:System.Reflection.Emit.Label>.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.ILGenerator.Emit Example 2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.Emit Example 2/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit.ILGenerator.Emit Example 2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.Emit Example 2/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit.ILGenerator.Emit Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.Emit Example 2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="03824-228">
            <paramref name="con" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-228">
              <paramref name="con" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="03824-229">Cette exception est nouvelle dans le [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)].</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-229">This exception is new in the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)].</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Emit">
      <MemberSignature Language="C#" Value="public virtual void Emit (System.Reflection.Emit.OpCode opcode, System.Reflection.Emit.LocalBuilder local);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Emit(valuetype System.Reflection.Emit.OpCode opcode, class System.Reflection.Emit.LocalBuilder local) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.LocalBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Emit(System::Reflection::Emit::OpCode opcode, System::Reflection::Emit::LocalBuilder ^ local);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.ILGeneration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="opcode" Type="System.Reflection.Emit.OpCode" />
        <Parameter Name="local" Type="System.Reflection.Emit.LocalBuilder" />
      </Parameters>
      <Docs>
        <param name="opcode">
          <span data-ttu-id="03824-230">Instruction MSIL à émettre dans le flux.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-230">The MSIL instruction to be emitted onto the stream.</span>
          </span>
        </param>
        <param name="local">
          <span data-ttu-id="03824-231">Variable locale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-231">A local variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="03824-232">Place l'instruction spécifiée dans le flux MSIL, en la faisant suivre de l'index de la variable locale donnée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-232">Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the index of the given local variable.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03824-233">Les valeurs de l’instruction sont définis dans le `OpCodes` énumération.</span><span class="sxs-lookup"><span data-stu-id="03824-233">The instruction values are defined in the `OpCodes` enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="03824-234">La méthode parente du paramètre <paramref name="local" /> ne correspond pas à la méthode associée à ce <see cref="T:System.Reflection.Emit.ILGenerator" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-234">The parent method of the <paramref name="local" /> parameter does not match the method associated with this <see cref="T:System.Reflection.Emit.ILGenerator" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="03824-235">
            <paramref name="local" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-235">
              <paramref name="local" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="03824-236">
            <paramref name="opcode" /> est une instruction à octet unique et <paramref name="local" /> représente une variable locale avec un index supérieur à <see langword="Byte.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-236">
              <paramref name="opcode" /> is a single-byte instruction, and <paramref name="local" /> represents a local variable with an index greater than <see langword="Byte.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Emit">
      <MemberSignature Language="C#" Value="public virtual void Emit (System.Reflection.Emit.OpCode opcode, System.Reflection.Emit.SignatureHelper signature);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Emit(valuetype System.Reflection.Emit.OpCode opcode, class System.Reflection.Emit.SignatureHelper signature) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.SignatureHelper)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Emit(System::Reflection::Emit::OpCode opcode, System::Reflection::Emit::SignatureHelper ^ signature);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.ILGeneration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="opcode" Type="System.Reflection.Emit.OpCode" />
        <Parameter Name="signature" Type="System.Reflection.Emit.SignatureHelper" />
      </Parameters>
      <Docs>
        <param name="opcode">
          <span data-ttu-id="03824-237">Instruction MSIL à émettre dans le flux.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-237">The MSIL instruction to be emitted onto the stream.</span>
          </span>
        </param>
        <param name="signature">
          <span data-ttu-id="03824-238">Assistance pour la construction d'un jeton de signature.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-238">A helper for constructing a signature token.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="03824-239">Place l'instruction et un jeton de signature spécifiés dans le flux d'instructions MSIL.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-239">Puts the specified instruction and a signature token onto the Microsoft intermediate language (MSIL) stream of instructions.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03824-240">Les valeurs de l’instruction sont définis dans le `OpCodes` énumération.</span><span class="sxs-lookup"><span data-stu-id="03824-240">The instruction values are defined in the `OpCodes` enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="03824-241">
            <paramref name="signature" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-241">
              <paramref name="signature" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Emit">
      <MemberSignature Language="C#" Value="public virtual void Emit (System.Reflection.Emit.OpCode opcode, System.Reflection.FieldInfo field);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Emit(valuetype System.Reflection.Emit.OpCode opcode, class System.Reflection.FieldInfo field) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Emit(System::Reflection::Emit::OpCode opcode, System::Reflection::FieldInfo ^ field);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.ILGeneration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="opcode" Type="System.Reflection.Emit.OpCode" />
        <Parameter Name="field" Type="System.Reflection.FieldInfo" />
      </Parameters>
      <Docs>
        <param name="opcode">
          <span data-ttu-id="03824-242">Instruction MSIL à émettre dans le flux.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-242">The MSIL instruction to be emitted onto the stream.</span>
          </span>
        </param>
        <param name="field">
          <span data-ttu-id="03824-243">
            <see langword="FieldInfo" /> qui représente un champ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-243">A <see langword="FieldInfo" /> representing a field.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="03824-244">Place l'instruction et le jeton de métadonnées spécifiés pour le champ donné dans le flux d'instructions MSIL.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-244">Puts the specified instruction and metadata token for the specified field onto the Microsoft intermediate language (MSIL) stream of instructions.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03824-245">Les valeurs de l’instruction sont définis dans le `OpCodes` énumération.</span><span class="sxs-lookup"><span data-stu-id="03824-245">The instruction values are defined in the `OpCodes` enumeration.</span></span> <span data-ttu-id="03824-246">L’emplacement de `field` est enregistré pour le flux d’instructions puisse être corrigé, si nécessaire, lors de la persistance du module dans un fichier exécutable portable (PE).</span><span class="sxs-lookup"><span data-stu-id="03824-246">The location of `field` is recorded so that the instruction stream can be patched if necessary when persisting the module to a portable executable (PE) file.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Emit">
      <MemberSignature Language="C#" Value="public virtual void Emit (System.Reflection.Emit.OpCode opcode, System.Reflection.MethodInfo meth);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Emit(valuetype System.Reflection.Emit.OpCode opcode, class System.Reflection.MethodInfo meth) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Emit(System::Reflection::Emit::OpCode opcode, System::Reflection::MethodInfo ^ meth);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.ILGeneration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="opcode" Type="System.Reflection.Emit.OpCode" />
        <Parameter Name="meth" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="opcode">
          <span data-ttu-id="03824-247">Instruction MSIL à émettre dans le flux.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-247">The MSIL instruction to be emitted onto the stream.</span>
          </span>
        </param>
        <param name="meth">
          <span data-ttu-id="03824-248">
            <see langword="MethodInfo" /> qui représente une méthode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-248">A <see langword="MethodInfo" /> representing a method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="03824-249">Place l'instruction spécifiée dans le flux MSIL, en la faisant suivre du jeton de métadonnées de la méthode donnée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-249">Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03824-250">Les valeurs de l’instruction sont définis dans le `OpCodes` énumération.</span><span class="sxs-lookup"><span data-stu-id="03824-250">The instruction values are defined in the `OpCodes` enumeration.</span></span>  
  
 <span data-ttu-id="03824-251">L’emplacement de `meth` est enregistré pour le flux d’instructions puisse être corrigé, si nécessaire, lors de la persistance du module dans un fichier exécutable portable (PE).</span><span class="sxs-lookup"><span data-stu-id="03824-251">The location of `meth` is recorded so that the instruction stream can be patched if necessary when persisting the module to a portable executable (PE) file.</span></span>  
  
 <span data-ttu-id="03824-252">Si `meth` représente une méthode générique, il doit être une définition de méthode générique.</span><span class="sxs-lookup"><span data-stu-id="03824-252">If `meth` represents a generic method, it must be a generic method definition.</span></span> <span data-ttu-id="03824-253">Autrement dit, son [MethodInfo.IsGenericMethodDefinition](xref:System.Reflection.MethodBase.IsGenericMethodDefinition) propriété doit être `true`.</span><span class="sxs-lookup"><span data-stu-id="03824-253">That is, its [MethodInfo.IsGenericMethodDefinition](xref:System.Reflection.MethodBase.IsGenericMethodDefinition) property must be `true`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="03824-254">
            <paramref name="meth" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-254">
              <paramref name="meth" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="03824-255">
            <paramref name="meth" /> est une méthode générique pour laquelle la propriété <see cref="P:System.Reflection.MethodBase.IsGenericMethodDefinition" /> est <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-255">
              <paramref name="meth" /> is a generic method for which the <see cref="P:System.Reflection.MethodBase.IsGenericMethodDefinition" /> property is <see langword="false" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Emit">
      <MemberSignature Language="C#" Value="public void Emit (System.Reflection.Emit.OpCode opcode, sbyte arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Emit(valuetype System.Reflection.Emit.OpCode opcode, int8 arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.SByte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Emit(System::Reflection::Emit::OpCode opcode, System::SByte arg);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.ILGeneration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="opcode" Type="System.Reflection.Emit.OpCode" />
        <Parameter Name="arg" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="opcode">
          <span data-ttu-id="03824-256">Instruction MSIL à placer dans le flux.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-256">The MSIL instruction to be put onto the stream.</span>
          </span>
        </param>
        <param name="arg">
          <span data-ttu-id="03824-257">Argument en caractères faisant l'objet d'un push dans le flux immédiatement après l'instruction.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-257">The character argument pushed onto the stream immediately after the instruction.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="03824-258">Place l'instruction et l'argument en caractères spécifiés dans le flux d'instructions MSIL.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-258">Puts the specified instruction and character argument onto the Microsoft intermediate language (MSIL) stream of instructions.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03824-259">Les valeurs de l’instruction sont définis dans le `OpCodes` énumération.</span><span class="sxs-lookup"><span data-stu-id="03824-259">The instruction values are defined in the `OpCodes` enumeration.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Emit">
      <MemberSignature Language="C#" Value="public virtual void Emit (System.Reflection.Emit.OpCode opcode, float arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Emit(valuetype System.Reflection.Emit.OpCode opcode, float32 arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Emit(System::Reflection::Emit::OpCode opcode, float arg);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.ILGeneration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="opcode" Type="System.Reflection.Emit.OpCode" />
        <Parameter Name="arg" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="opcode">
          <span data-ttu-id="03824-260">Instruction MSIL à placer dans le flux.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-260">The MSIL instruction to be put onto the stream.</span>
          </span>
        </param>
        <param name="arg">
          <span data-ttu-id="03824-261">Argument <see langword="Single" /> faisant l'objet d'un push dans le flux immédiatement après l'instruction.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-261">The <see langword="Single" /> argument pushed onto the stream immediately after the instruction.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="03824-262">Place l'instruction et l'argument numérique spécifiés dans le flux d'instructions MSIL.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-262">Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03824-263">Les valeurs de l’instruction sont définis dans le `OpCodes` énumération.</span><span class="sxs-lookup"><span data-stu-id="03824-263">The instruction values are defined in the `OpCodes` enumeration.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Emit">
      <MemberSignature Language="C#" Value="public virtual void Emit (System.Reflection.Emit.OpCode opcode, string str);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Emit(valuetype System.Reflection.Emit.OpCode opcode, string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Emit(System::Reflection::Emit::OpCode opcode, System::String ^ str);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.ILGeneration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="opcode" Type="System.Reflection.Emit.OpCode" />
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="opcode">
          <span data-ttu-id="03824-264">Instruction MSIL à émettre dans le flux.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-264">The MSIL instruction to be emitted onto the stream.</span>
          </span>
        </param>
        <param name="str">
          <span data-ttu-id="03824-265">
            <see langword="String" /> à émettre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-265">The <see langword="String" /> to be emitted.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="03824-266">Place l'instruction spécifiée dans le flux MSIL, en la faisant suivre du jeton de métadonnées de la chaîne donnée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-266">Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given string.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03824-267">Les valeurs de l’instruction sont définis dans le `OpCodes` énumération.</span><span class="sxs-lookup"><span data-stu-id="03824-267">The instruction values are defined in the `OpCodes` enumeration.</span></span> <span data-ttu-id="03824-268">L’emplacement de `str` est enregistré pour la correction ultérieure si le module est persistant dans un fichier exécutable portable (PE).</span><span class="sxs-lookup"><span data-stu-id="03824-268">The location of `str` is recorded for future fixups if the module is persisted to a portable executable (PE) file.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Emit">
      <MemberSignature Language="C#" Value="public virtual void Emit (System.Reflection.Emit.OpCode opcode, Type cls);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Emit(valuetype System.Reflection.Emit.OpCode opcode, class System.Type cls) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Emit(System::Reflection::Emit::OpCode opcode, Type ^ cls);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.ILGeneration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="opcode" Type="System.Reflection.Emit.OpCode" />
        <Parameter Name="cls" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="opcode">
          <span data-ttu-id="03824-269">Instruction MSIL à placer dans le flux.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-269">The MSIL instruction to be put onto the stream.</span>
          </span>
        </param>
        <param name="cls">
          <span data-ttu-id="03824-270">
            <see langword="Type" />
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-270">A <see langword="Type" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="03824-271">Place l'instruction spécifiée dans le flux MSIL, en la faisant suivre du jeton de métadonnées pour le type donné.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-271">Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given type.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03824-272">Les valeurs de l’instruction sont définis dans le `OpCodes` énumération.</span><span class="sxs-lookup"><span data-stu-id="03824-272">The instruction values are defined in the `OpCodes` enumeration.</span></span> <span data-ttu-id="03824-273">L’emplacement de `cls` est enregistré pour que le jeton puisse être corrigé, si nécessaire, lors de la persistance du module dans un fichier exécutable portable (PE).</span><span class="sxs-lookup"><span data-stu-id="03824-273">The location of `cls` is recorded so that the token can be patched if necessary when persisting the module to a portable executable (PE) file.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="03824-274">
            <paramref name="cls" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-274">
              <paramref name="cls" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="EmitCall">
      <MemberSignature Language="C#" Value="public virtual void EmitCall (System.Reflection.Emit.OpCode opcode, System.Reflection.MethodInfo methodInfo, Type[] optionalParameterTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EmitCall(valuetype System.Reflection.Emit.OpCode opcode, class System.Reflection.MethodInfo methodInfo, class System.Type[] optionalParameterTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EmitCall(System::Reflection::Emit::OpCode opcode, System::Reflection::MethodInfo ^ methodInfo, cli::array &lt;Type ^&gt; ^ optionalParameterTypes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.ILGeneration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="opcode" Type="System.Reflection.Emit.OpCode" />
        <Parameter Name="methodInfo" Type="System.Reflection.MethodInfo" />
        <Parameter Name="optionalParameterTypes" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="opcode">
          <span data-ttu-id="03824-275">Instruction MSIL à émettre dans le flux.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-275">The MSIL instruction to be emitted onto the stream.</span>
          </span>
          <span data-ttu-id="03824-276">Doit être <see cref="F:System.Reflection.Emit.OpCodes.Call" />, <see cref="F:System.Reflection.Emit.OpCodes.Callvirt" /> ou <see cref="F:System.Reflection.Emit.OpCodes.Newobj" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-276">Must be <see cref="F:System.Reflection.Emit.OpCodes.Call" />, <see cref="F:System.Reflection.Emit.OpCodes.Callvirt" />, or <see cref="F:System.Reflection.Emit.OpCodes.Newobj" />.</span>
          </span>
        </param>
        <param name="methodInfo">
          <span data-ttu-id="03824-277">Méthode <see langword="varargs" /> à appeler.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-277">The <see langword="varargs" /> method to be called.</span>
          </span>
        </param>
        <param name="optionalParameterTypes">
          <span data-ttu-id="03824-278">Types des arguments facultatifs si la méthode est <see langword="varargs" /> ; sinon, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-278">The types of the optional arguments if the method is a <see langword="varargs" /> method; otherwise, <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="03824-279">Place une instruction <see langword="call" /> ou <see langword="callvirt" /> dans le flux MSIL (Microsoft intermediate language) pour appeler une méthode <see langword="varargs" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-279">Puts a <see langword="call" /> or <see langword="callvirt" /> instruction onto the Microsoft intermediate language (MSIL) stream to call a <see langword="varargs" /> method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03824-280">Le <xref:System.Reflection.Emit.ILGenerator.EmitCall%2A> méthode est utilisée pour émettre des appels aux `varargs` méthodes, car aucune surcharge de la <xref:System.Reflection.Emit.ILGenerator.Emit%2A> méthode qui spécifie les types de paramètres des arguments variables.</span><span class="sxs-lookup"><span data-stu-id="03824-280">The <xref:System.Reflection.Emit.ILGenerator.EmitCall%2A> method is used to emit calls to `varargs` methods because there is no overload of the <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method that specifies the parameter types of the variable arguments.</span></span>  
  
 <span data-ttu-id="03824-281">Pour émettre des appels aux méthodes qui n’utilisent pas le <xref:System.Reflection.CallingConventions.VarArgs> convention d’appel, utiliser le <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Reflection.MethodInfo%29> surcharge de méthode.</span><span class="sxs-lookup"><span data-stu-id="03824-281">To emit calls to methods that do not use the <xref:System.Reflection.CallingConventions.VarArgs> calling convention, use the <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Reflection.MethodInfo%29> method overload.</span></span>  
  
## <a name="version-information"></a><span data-ttu-id="03824-282">Informations sur la version</span><span class="sxs-lookup"><span data-stu-id="03824-282">Version Information</span></span>  
 <span data-ttu-id="03824-283">À partir de .NET Framework version 2.0, le <xref:System.Reflection.Emit.ILGenerator.EmitCall%2A> méthode ne lève pas d’exception lorsque les types de paramètres facultatifs sont spécifiés pour une méthode qui n’est pas `varargs`.</span><span class="sxs-lookup"><span data-stu-id="03824-283">Beginning with the .NET Framework version 2.0, the <xref:System.Reflection.Emit.ILGenerator.EmitCall%2A> method does not throw an exception when optional parameter types are specified for a method that is not `varargs`.</span></span> <span data-ttu-id="03824-284"><xref:System.InvalidProgramException> est levée lorsque l’appel est exécuté.</span><span class="sxs-lookup"><span data-stu-id="03824-284"><xref:System.InvalidProgramException> is thrown when the call is executed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="03824-285">L’exemple de code suivant émet deux méthodes, une `varargs` méthode et une méthode qui appelle le `varargs` (méthode).</span><span class="sxs-lookup"><span data-stu-id="03824-285">The following code example emits two methods, a `varargs` method and a method that calls the `varargs` method.</span></span> <span data-ttu-id="03824-286">Le `EmitCall` méthode est utilisée pour émettre l’appel à la `varargs` (méthode).</span><span class="sxs-lookup"><span data-stu-id="03824-286">The `EmitCall` method is used to emit the call to the `varargs` method.</span></span>  
  
 [!code-cpp[Emit.ArgIterator#1](~/samples/snippets/cpp/VS_Snippets_CLR/Emit.ArgIterator/cpp/source.cpp#1)]
 [!code-csharp[Emit.ArgIterator#1](~/samples/snippets/csharp/VS_Snippets_CLR/Emit.ArgIterator/cs/source.cs#1)]
 [!code-vb[Emit.ArgIterator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Emit.ArgIterator/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="03824-287">
            <paramref name="opcode" /> ne spécifie pas un appel de méthode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-287">
              <paramref name="opcode" /> does not specify a method call.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="03824-288">
            <paramref name="methodInfo" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-288">
              <paramref name="methodInfo" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="03824-289">La convention d’appel de la méthode n’est pas <see langword="varargs" />, mais des types de paramètres facultatifs sont fournis.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-289">The calling convention for the method is not <see langword="varargs" />, but optional parameter types are supplied.</span>
          </span>
          <span data-ttu-id="03824-290">Cette exception est levée dans les versions .NET Framework 1.0 et 1.1 ; dans les versions ultérieures, aucune exception n’est levée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-290">This exception is thrown in the .NET Framework versions 1.0 and 1.1, In subsequent versions, no exception is thrown.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="EmitCalli">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="03824-291">Place une instruction <see cref="F:System.Reflection.Emit.OpCodes.Calli" /> dans le flux MSIL (Microsoft Intermediate Language).</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-291">Puts a <see cref="F:System.Reflection.Emit.OpCodes.Calli" /> instruction onto the Microsoft intermediate language (MSIL) stream.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="EmitCalli">
      <MemberSignature Language="C#" Value="public virtual void EmitCalli (System.Reflection.Emit.OpCode opcode, System.Runtime.InteropServices.CallingConvention unmanagedCallConv, Type returnType, Type[] parameterTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EmitCalli(valuetype System.Reflection.Emit.OpCode opcode, valuetype System.Runtime.InteropServices.CallingConvention unmanagedCallConv, class System.Type returnType, class System.Type[] parameterTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Runtime.InteropServices.CallingConvention,System.Type,System.Type[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EmitCalli(System::Reflection::Emit::OpCode opcode, System::Runtime::InteropServices::CallingConvention unmanagedCallConv, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.ILGeneration</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="opcode" Type="System.Reflection.Emit.OpCode" />
        <Parameter Name="unmanagedCallConv" Type="System.Runtime.InteropServices.CallingConvention" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="opcode">
          <span data-ttu-id="03824-292">Instruction MSIL à émettre dans le flux.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-292">The MSIL instruction to be emitted onto the stream.</span>
          </span>
          <span data-ttu-id="03824-293">Doit être <see cref="F:System.Reflection.Emit.OpCodes.Calli" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-293">Must be <see cref="F:System.Reflection.Emit.OpCodes.Calli" />.</span>
          </span>
        </param>
        <param name="unmanagedCallConv">
          <span data-ttu-id="03824-294">Convention d'appel non managée à utiliser.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-294">The unmanaged calling convention to be used.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="03824-295">
            <see cref="T:System.Type" /> du résultat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-295">The <see cref="T:System.Type" /> of the result.</span>
          </span>
        </param>
        <param name="parameterTypes">
          <span data-ttu-id="03824-296">Types des arguments requis pour l'instruction.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-296">The types of the required arguments to the instruction.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="03824-297">Place une instruction <see cref="F:System.Reflection.Emit.OpCodes.Calli" /> dans le flux MSIL en spécifiant une convention d'appel non managée pour l'appel indirect.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-297">Puts a <see cref="F:System.Reflection.Emit.OpCodes.Calli" /> instruction onto the Microsoft intermediate language (MSIL) stream, specifying an unmanaged calling convention for the indirect call.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03824-298">Utilisez <xref:System.Reflection.Emit.ILGenerator.EmitCalli%2A> pour placer un <xref:System.Reflection.Emit.OpCodes.Calli> instruction dans le flux de données.</span><span class="sxs-lookup"><span data-stu-id="03824-298">Use <xref:System.Reflection.Emit.ILGenerator.EmitCalli%2A> to put a <xref:System.Reflection.Emit.OpCodes.Calli> instruction onto the stream.</span></span> <span data-ttu-id="03824-299">N'utilisez pas <xref:System.Reflection.Emit.ILGenerator.Emit%2A>.</span><span class="sxs-lookup"><span data-stu-id="03824-299">Do not use <xref:System.Reflection.Emit.ILGenerator.Emit%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="03824-300">L’exemple de code suivant illustre l’utilisation contextuelle de la <xref:System.Reflection.Emit.ILGenerator.EmitCalli%2A> méthode à appeler une méthode de type non managé externe à la classe dynamique.</span><span class="sxs-lookup"><span data-stu-id="03824-300">The following code sample demonstrates the contextual usage of the <xref:System.Reflection.Emit.ILGenerator.EmitCalli%2A> method to call an unmanaged type method external to the dynamic class.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.ILGenerator.EmitCalli Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.EmitCalli Example/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit.ILGenerator.EmitCalli Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.EmitCalli Example/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit.ILGenerator.EmitCalli Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.EmitCalli Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EmitCalli">
      <MemberSignature Language="C#" Value="public virtual void EmitCalli (System.Reflection.Emit.OpCode opcode, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes, Type[] optionalParameterTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EmitCalli(valuetype System.Reflection.Emit.OpCode opcode, valuetype System.Reflection.CallingConventions callingConvention, class System.Type returnType, class System.Type[] parameterTypes, class System.Type[] optionalParameterTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EmitCalli(System::Reflection::Emit::OpCode opcode, System::Reflection::CallingConventions callingConvention, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, cli::array &lt;Type ^&gt; ^ optionalParameterTypes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.ILGeneration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="opcode" Type="System.Reflection.Emit.OpCode" />
        <Parameter Name="callingConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="optionalParameterTypes" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="opcode">
          <span data-ttu-id="03824-301">Instruction MSIL à émettre dans le flux.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-301">The MSIL instruction to be emitted onto the stream.</span>
          </span>
          <span data-ttu-id="03824-302">Doit être <see cref="F:System.Reflection.Emit.OpCodes.Calli" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-302">Must be <see cref="F:System.Reflection.Emit.OpCodes.Calli" />.</span>
          </span>
        </param>
        <param name="callingConvention">
          <span data-ttu-id="03824-303">Convention d'appel managée à utiliser.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-303">The managed calling convention to be used.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="03824-304">
            <see cref="T:System.Type" /> du résultat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-304">The <see cref="T:System.Type" /> of the result.</span>
          </span>
        </param>
        <param name="parameterTypes">
          <span data-ttu-id="03824-305">Types des arguments requis pour l'instruction.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-305">The types of the required arguments to the instruction.</span>
          </span>
        </param>
        <param name="optionalParameterTypes">
          <span data-ttu-id="03824-306">Types des arguments facultatifs pour les appels <see langword="varargs" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-306">The types of the optional arguments for <see langword="varargs" /> calls.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="03824-307">Place une instruction <see cref="F:System.Reflection.Emit.OpCodes.Calli" /> dans le flux MSIL en spécifiant une convention d'appel managée pour l'appel indirect.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-307">Puts a <see cref="F:System.Reflection.Emit.OpCodes.Calli" /> instruction onto the Microsoft intermediate language (MSIL) stream, specifying a managed calling convention for the indirect call.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03824-308">Utilisez <xref:System.Reflection.Emit.ILGenerator.EmitCalli%2A> pour placer un <xref:System.Reflection.Emit.OpCodes.Calli> instruction dans le flux de données.</span><span class="sxs-lookup"><span data-stu-id="03824-308">Use <xref:System.Reflection.Emit.ILGenerator.EmitCalli%2A> to put a <xref:System.Reflection.Emit.OpCodes.Calli> instruction onto the stream.</span></span> <span data-ttu-id="03824-309">N'utilisez pas <xref:System.Reflection.Emit.ILGenerator.Emit%2A>.</span><span class="sxs-lookup"><span data-stu-id="03824-309">Do not use <xref:System.Reflection.Emit.ILGenerator.Emit%2A>.</span></span>  
  
 <span data-ttu-id="03824-310">Si `optionalParameterTypes` spécifie des arguments facultatifs, `callingConvention` doit inclure le <xref:System.Reflection.CallingConventions.VarArgs?displayProperty=nameWithType> indicateur.</span><span class="sxs-lookup"><span data-stu-id="03824-310">If `optionalParameterTypes` specifies optional arguments, `callingConvention` must include the <xref:System.Reflection.CallingConventions.VarArgs?displayProperty=nameWithType> flag.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="03824-311">
            <paramref name="optionalParameterTypes" /> n'est pas <see langword="null" />, mais <paramref name="callingConvention" /> ne comprend pas l'indicateur <see cref="F:System.Reflection.CallingConventions.VarArgs" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-311">
              <paramref name="optionalParameterTypes" /> is not <see langword="null" />, but <paramref name="callingConvention" /> does not include the <see cref="F:System.Reflection.CallingConventions.VarArgs" /> flag.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="EmitWriteLine">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.ILGeneration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="03824-312">Fonctions d'assistance pour émettre un appel à <see cref="M:System.Console.WriteLine" /> avec différents types de valeurs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-312">Helper functions to emit a call to <see cref="M:System.Console.WriteLine" /> with different types of values.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="EmitWriteLine">
      <MemberSignature Language="C#" Value="public virtual void EmitWriteLine (System.Reflection.Emit.LocalBuilder localBuilder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EmitWriteLine(class System.Reflection.Emit.LocalBuilder localBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.Emit.LocalBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EmitWriteLine(System::Reflection::Emit::LocalBuilder ^ localBuilder);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.ILGeneration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localBuilder" Type="System.Reflection.Emit.LocalBuilder" />
      </Parameters>
      <Docs>
        <param name="localBuilder">
          <span data-ttu-id="03824-313">La variable locale dont la valeur doit être écrite dans la console.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-313">The local variable whose value is to be written to the console.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="03824-314">Émet le langage MSIL nécessaire pour appeler <see cref="Overload:System.Console.WriteLine" /> avec la variable locale donnée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-314">Emits the Microsoft intermediate language (MSIL) necessary to call <see cref="Overload:System.Console.WriteLine" /> with the given local variable.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03824-315">Le type de `localBuilder` doit correspondre au type de paramètre d’une surcharge de la <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="03824-315">The type of `localBuilder` must match the parameter type of an overload of the <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="03824-316">L’exemple de code ci-dessous illustre l’utilisation contextuelle de la <xref:System.Reflection.Emit.ILGenerator.EmitWriteLine%2A> méthode pour écrire une chaîne dans la console dans une méthode dynamique.</span><span class="sxs-lookup"><span data-stu-id="03824-316">The code sample below demonstrates the contextual usage of the <xref:System.Reflection.Emit.ILGenerator.EmitWriteLine%2A> method to write a string to the console in a dynamic method.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.ILGenerator.OpCodes Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.OpCodes Example/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit.ILGenerator.OpCodes Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.OpCodes Example/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit.ILGenerator.OpCodes Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.OpCodes Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="03824-317">Le type de <paramref name="localBuilder" /> est <see cref="T:System.Reflection.Emit.TypeBuilder" /> ou <see cref="T:System.Reflection.Emit.EnumBuilder" />, qui ne sont pas pris en charge.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-317">The type of <paramref name="localBuilder" /> is <see cref="T:System.Reflection.Emit.TypeBuilder" /> or <see cref="T:System.Reflection.Emit.EnumBuilder" />, which are not supported.</span>
          </span>
          <span data-ttu-id="03824-318">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-318">-or-</span>
          </span>
          <span data-ttu-id="03824-319">Aucune surcharge de <see cref="Overload:System.Console.WriteLine" /> n’accepte le type de <paramref name="localBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-319">There is no overload of <see cref="Overload:System.Console.WriteLine" /> that accepts the type of <paramref name="localBuilder" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="03824-320">
            <paramref name="localBuilder" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-320">
              <paramref name="localBuilder" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="EmitWriteLine">
      <MemberSignature Language="C#" Value="public virtual void EmitWriteLine (System.Reflection.FieldInfo fld);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EmitWriteLine(class System.Reflection.FieldInfo fld) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.FieldInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EmitWriteLine (fld As FieldInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EmitWriteLine(System::Reflection::FieldInfo ^ fld);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.ILGeneration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fld" Type="System.Reflection.FieldInfo" />
      </Parameters>
      <Docs>
        <param name="fld">
          <span data-ttu-id="03824-321">Champ dont la valeur est à écrire dans la console.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-321">The field whose value is to be written to the console.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="03824-322">Émet le code MSIL (Microsoft Intermediate Language) nécessaire pour appeler <see cref="Overload:System.Console.WriteLine" /> avec le champ donné.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-322">Emits the Microsoft intermediate language (MSIL) necessary to call <see cref="Overload:System.Console.WriteLine" /> with the given field.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03824-323">Le type de `fld` doit correspondre au type de paramètre d’une surcharge de la <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="03824-323">The type of `fld` must match the parameter type of an overload of the <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="03824-324">L’exemple de code suivant illustre l’utilisation de la <xref:System.Reflection.Emit.ILGenerator.EmitWriteLine%2A> méthode pour écrire une chaîne dans la console dans une méthode dynamique.</span><span class="sxs-lookup"><span data-stu-id="03824-324">The following code sample demonstrates the use of the <xref:System.Reflection.Emit.ILGenerator.EmitWriteLine%2A> method to write a string to the console in a dynamic method.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.ILGenerator.OpCodes Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.OpCodes Example/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit.ILGenerator.OpCodes Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.OpCodes Example/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit.ILGenerator.OpCodes Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.OpCodes Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="03824-325">Aucune surcharge de la méthode <see cref="Overload:System.Console.WriteLine" /> n'accepte le type du champ spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-325">There is no overload of the <see cref="Overload:System.Console.WriteLine" /> method that accepts the type of the specified field.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="03824-326">
            <paramref name="fld" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-326">
              <paramref name="fld" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="03824-327">Le champ est de type <see cref="T:System.Reflection.Emit.TypeBuilder" /> ou <see cref="T:System.Reflection.Emit.EnumBuilder" />, qui ne sont pas pris en charge.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-327">The type of the field is <see cref="T:System.Reflection.Emit.TypeBuilder" /> or <see cref="T:System.Reflection.Emit.EnumBuilder" />, which are not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="EmitWriteLine">
      <MemberSignature Language="C#" Value="public virtual void EmitWriteLine (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EmitWriteLine(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EmitWriteLine (value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EmitWriteLine(System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.ILGeneration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="03824-328">Chaîne à imprimer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-328">The string to be printed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="03824-329">Émet le code MSIL (Microsoft Intermediate Language) pour appeler <see cref="Overload:System.Console.WriteLine" /> avec une chaîne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-329">Emits the Microsoft intermediate language (MSIL) to call <see cref="Overload:System.Console.WriteLine" /> with a string.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03824-330">La chaîne doit déjà avoir été définie.</span><span class="sxs-lookup"><span data-stu-id="03824-330">The string must have already been defined.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="03824-331">L’exemple de code ci-dessous illustre l’utilisation contextuelle de la `EmitWriteLine` méthode pour écrire une chaîne dans la console dans une méthode dynamique.</span><span class="sxs-lookup"><span data-stu-id="03824-331">The code sample below demonstrates the contextual usage of the `EmitWriteLine` method to write a string to the console in a dynamic method.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.ILGenerator.OpCodes Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.OpCodes Example/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit.ILGenerator.OpCodes Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.OpCodes Example/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit.ILGenerator.OpCodes Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.OpCodes Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndExceptionBlock">
      <MemberSignature Language="C#" Value="public virtual void EndExceptionBlock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndExceptionBlock() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.ILGenerator.EndExceptionBlock" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndExceptionBlock ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndExceptionBlock();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.ILGeneration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="03824-332">Met fin à un bloc d'exception.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-332">Ends an exception block.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="03824-333">L’exemple de code ci-dessous illustre l’utilisation contextuelle de la `EndExceptionBlock` (méthode).</span><span class="sxs-lookup"><span data-stu-id="03824-333">The code sample below demonstrates the contextual usage of the `EndExceptionBlock` method.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.ILGenerator.ThrowException Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.ThrowException Example/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit.ILGenerator.ThrowException Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.ThrowException Example/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit.ILGenerator.ThrowException Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.ThrowException Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="03824-334">Le bloc d'exception final se produit à un emplacement inattendu dans le flux de code.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-334">The end exception block occurs in an unexpected place in the code stream.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="03824-335">Le code MSIL (Microsoft Intermediate Language) en cours de génération ne se trouve pas dans un bloc d'exception actuellement.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-335">The Microsoft intermediate language (MSIL) being generated is not currently in an exception block.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="EndScope">
      <MemberSignature Language="C#" Value="public virtual void EndScope ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndScope() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.ILGenerator.EndScope" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndScope ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndScope();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.ILGeneration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="03824-336">Met fin à une portée lexicale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-336">Ends a lexical scope.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03824-337">Cette méthode est utilisée pour émettre des informations symboliques.</span><span class="sxs-lookup"><span data-stu-id="03824-337">This method is used to emit symbolic information.</span></span> <span data-ttu-id="03824-338">Il est utilisé avec <xref:System.Reflection.Emit.ILGenerator.BeginScope%2A>.</span><span class="sxs-lookup"><span data-stu-id="03824-338">It is used with <xref:System.Reflection.Emit.ILGenerator.BeginScope%2A>.</span></span>  
  
 <span data-ttu-id="03824-339">Si actuel <xref:System.Reflection.Emit.ILGenerator> est associé un <xref:System.Reflection.Emit.DynamicMethod> de l’objet, il ne prend pas en charge les informations symboliques.</span><span class="sxs-lookup"><span data-stu-id="03824-339">If the current <xref:System.Reflection.Emit.ILGenerator> is associated with a <xref:System.Reflection.Emit.DynamicMethod> object, it does not support symbolic information.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="03824-340">L’exemple de code suivant illustre l’utilisation de `BeginScope` et `EndScope`.</span><span class="sxs-lookup"><span data-stu-id="03824-340">The following code sample illustrates the use of `BeginScope` and `EndScope`.</span></span>  
  
 [!code-cpp[ILGenerator_Begin_EndScope#2](~/samples/snippets/cpp/VS_Snippets_CLR/ILGenerator_Begin_EndScope/CPP/ilgenerator_begin_endscope.cpp#2)]
 [!code-csharp[ILGenerator_Begin_EndScope#2](~/samples/snippets/csharp/VS_Snippets_CLR/ILGenerator_Begin_EndScope/CS/ilgenerator_begin_endscope.cs#2)]
 [!code-vb[ILGenerator_Begin_EndScope#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/ILGenerator_Begin_EndScope/VB/ilgenerator_begin_endscope.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="03824-341">Ce <see cref="T:System.Reflection.Emit.ILGenerator" /> appartient à un <see cref="T:System.Reflection.Emit.DynamicMethod" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-341">This <see cref="T:System.Reflection.Emit.ILGenerator" /> belongs to a <see cref="T:System.Reflection.Emit.DynamicMethod" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ILOffset">
      <MemberSignature Language="C#" Value="public virtual int ILOffset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ILOffset" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.ILGenerator.ILOffset" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ILOffset As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int ILOffset { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.ILGeneration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="03824-342">Obtient l'offset actuel, en octets, dans le flux de Microsoft Intermediate Language (MSIL) émis par le <see cref="T:System.Reflection.Emit.ILGenerator" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-342">Gets the current offset, in bytes, in the Microsoft intermediate language (MSIL) stream that is being emitted by the <see cref="T:System.Reflection.Emit.ILGenerator" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="03824-343">Offset dans le flux MSIL vers lequel l'instruction suivante sera émise.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-343">The offset in the MSIL stream at which the next instruction will be emitted.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03824-344">Cette méthode est transparente et peut être appelée à partir du code partiellement fiable.</span><span class="sxs-lookup"><span data-stu-id="03824-344">This method is transparent, and can be called from partially trusted code.</span></span>  
  
 <span data-ttu-id="03824-345">Si le <xref:System.Reflection.Emit.ILGenerator.ILOffset%2A> propriété est accessible avant que toutes les instructions MSIL ont été émises, il retourne 0 (zéro).</span><span class="sxs-lookup"><span data-stu-id="03824-345">If the <xref:System.Reflection.Emit.ILGenerator.ILOffset%2A> property is accessed before any MSIL instructions have been emitted, it returns 0 (zero).</span></span>  
  
 <span data-ttu-id="03824-346">Lorsque MSIL est généré pour les langages dynamiques, cette propriété peut être utilisée pour mapper des offsets dans le flux MSIL aux numéros de ligne de code source.</span><span class="sxs-lookup"><span data-stu-id="03824-346">When MSIL is generated for dynamic languages, this property can be used to map offsets in the MSIL stream to source code line numbers.</span></span> <span data-ttu-id="03824-347">Les informations résultantes peuvent être utilisées pour fournir des traces de pile lorsque des exceptions sont levées.</span><span class="sxs-lookup"><span data-stu-id="03824-347">The resulting information can be used to provide stack traces when exceptions are thrown.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MarkLabel">
      <MemberSignature Language="C#" Value="public virtual void MarkLabel (System.Reflection.Emit.Label loc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void MarkLabel(valuetype System.Reflection.Emit.Label loc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.ILGenerator.MarkLabel(System.Reflection.Emit.Label)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub MarkLabel (loc As Label)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void MarkLabel(System::Reflection::Emit::Label loc);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.ILGeneration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="loc" Type="System.Reflection.Emit.Label" />
      </Parameters>
      <Docs>
        <param name="loc">
          <span data-ttu-id="03824-348">Étiquette pour laquelle définir un index.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-348">The label for which to set an index.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="03824-349">Marque la position actuelle du flux MSIL avec l'étiquette donnée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-349">Marks the Microsoft intermediate language (MSIL) stream's current position with the given label.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03824-350">Une étiquette ne peut pas être définie plusieurs fois.</span><span class="sxs-lookup"><span data-stu-id="03824-350">A label cannot be defined more than once.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="03824-351">L’exemple de code ci-dessous illustre l’utilisation contextuelle de `MarkLabel` pour la branche MSIL dans une méthode dynamique.</span><span class="sxs-lookup"><span data-stu-id="03824-351">The code sample below demonstrates the contextual usage of `MarkLabel` to implement MSIL branching in a dynamic method.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.ILGenerator.Emit Example 2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.Emit Example 2/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit.ILGenerator.Emit Example 2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.Emit Example 2/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit.ILGenerator.Emit Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.Emit Example 2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="03824-352">
            <paramref name="loc" /> représente un index non valide dans le tableau d'étiquettes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-352">
              <paramref name="loc" /> represents an invalid index into the label array.</span>
          </span>
          <span data-ttu-id="03824-353">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-353">-or-</span>
          </span>
          <span data-ttu-id="03824-354">Un index a déjà été défini pour <paramref name="loc" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-354">An index for <paramref name="loc" /> has already been defined.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="MarkSequencePoint">
      <MemberSignature Language="C#" Value="public virtual void MarkSequencePoint (System.Diagnostics.SymbolStore.ISymbolDocumentWriter document, int startLine, int startColumn, int endLine, int endColumn);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void MarkSequencePoint(class System.Diagnostics.SymbolStore.ISymbolDocumentWriter document, int32 startLine, int32 startColumn, int32 endLine, int32 endColumn) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.ILGenerator.MarkSequencePoint(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub MarkSequencePoint (document As ISymbolDocumentWriter, startLine As Integer, startColumn As Integer, endLine As Integer, endColumn As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void MarkSequencePoint(System::Diagnostics::SymbolStore::ISymbolDocumentWriter ^ document, int startLine, int startColumn, int endLine, int endColumn);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="document" Type="System.Diagnostics.SymbolStore.ISymbolDocumentWriter" />
        <Parameter Name="startLine" Type="System.Int32" />
        <Parameter Name="startColumn" Type="System.Int32" />
        <Parameter Name="endLine" Type="System.Int32" />
        <Parameter Name="endColumn" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="document">
          <span data-ttu-id="03824-355">Document pour lequel le point de séquence est défini.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-355">The document for which the sequence point is being defined.</span>
          </span>
        </param>
        <param name="startLine">
          <span data-ttu-id="03824-356">Ligne sur laquelle le point de séquence débute.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-356">The line where the sequence point begins.</span>
          </span>
        </param>
        <param name="startColumn">
          <span data-ttu-id="03824-357">Colonne de la ligne sur laquelle le point de séquence débute.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-357">The column in the line where the sequence point begins.</span>
          </span>
        </param>
        <param name="endLine">
          <span data-ttu-id="03824-358">Ligne sur laquelle le point de séquence se termine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-358">The line where the sequence point ends.</span>
          </span>
        </param>
        <param name="endColumn">
          <span data-ttu-id="03824-359">Colonne de la ligne sur laquelle le point de séquence se termine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-359">The column in the line where the sequence point ends.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="03824-360">Marque un point de séquence dans le flux MSIL.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-360">Marks a sequence point in the Microsoft intermediate language (MSIL) stream.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03824-361">Les numéros de ligne sont indexés à partir de 1.</span><span class="sxs-lookup"><span data-stu-id="03824-361">Line numbers are indexed from 1.</span></span> <span data-ttu-id="03824-362">Les colonnes sont indexées à partir de 0.</span><span class="sxs-lookup"><span data-stu-id="03824-362">Columns are indexed from 0.</span></span>  
  
 <span data-ttu-id="03824-363">Normalement, les informations symboliques comprennent au moins un offset MSIL pour chaque ligne source.</span><span class="sxs-lookup"><span data-stu-id="03824-363">The symbolic information normally includes at least one MSIL offset for each source line.</span></span> <span data-ttu-id="03824-364">Lorsque le compilateur juste-à-temps (JIT) est sur le point de compiler une méthode, il sollicite la liste des offsets MSIL à conserver auprès des services de profil.</span><span class="sxs-lookup"><span data-stu-id="03824-364">When the just-in-time (JIT) compiler is about to compile a method, it asks the profiling services for a list of MSIL offsets that should be preserved.</span></span> <span data-ttu-id="03824-365">Ces offsets MSIL sont appelés *points de séquence*.</span><span class="sxs-lookup"><span data-stu-id="03824-365">These MSIL offsets are called *sequence points*.</span></span>  
  
 <span data-ttu-id="03824-366">Si actuel <xref:System.Reflection.Emit.ILGenerator> est associé un <xref:System.Reflection.Emit.DynamicMethod> de l’objet, il ne prend pas en charge les informations symboliques.</span><span class="sxs-lookup"><span data-stu-id="03824-366">If the current <xref:System.Reflection.Emit.ILGenerator> is associated with a <xref:System.Reflection.Emit.DynamicMethod> object, it does not support symbolic information.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="03824-367">
            <paramref name="startLine" /> ou <paramref name="endLine" /> a la valeur &lt; = 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-367">
              <paramref name="startLine" /> or <paramref name="endLine" /> is &lt;= 0.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="03824-368">Ce <see cref="T:System.Reflection.Emit.ILGenerator" /> appartient à un <see cref="T:System.Reflection.Emit.DynamicMethod" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-368">This <see cref="T:System.Reflection.Emit.ILGenerator" /> belongs to a <see cref="T:System.Reflection.Emit.DynamicMethod" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._ILGenerator.GetIDsOfNames">
      <MemberSignature Language="C#" Value="void _ILGenerator.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._ILGenerator.GetIDsOfNames([in]valuetype System.Guid&amp; riid, native int rgszNames, unsigned int32 cNames, unsigned int32 lcid, native int rgDispId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetIDsOfNames (ByRef riid As Guid, rgszNames As IntPtr, cNames As UInteger, lcid As UInteger, rgDispId As IntPtr) Implements _ILGenerator.GetIDsOfNames" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._ILGenerator.GetIDsOfNames(Guid % riid, IntPtr rgszNames, System::UInt32 cNames, System::UInt32 lcid, IntPtr rgDispId) = System::Runtime::InteropServices::_ILGenerator::GetIDsOfNames;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._ILGenerator.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="riid" Type="System.Guid&amp;" RefType="ref" />
        <Parameter Name="rgszNames" Type="System.IntPtr" />
        <Parameter Name="cNames" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="rgDispId" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="riid">
          <span data-ttu-id="03824-369">Réservé à un usage ultérieur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-369">Reserved for future use.</span>
          </span>
          <span data-ttu-id="03824-370">Doit être IID_NULL.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-370">Must be IID_NULL.</span>
          </span>
        </param>
        <param name="rgszNames">
          <span data-ttu-id="03824-371">Tableau passé des noms à mapper.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-371">Passed-in array of names to be mapped.</span>
          </span>
        </param>
        <param name="cNames">
          <span data-ttu-id="03824-372">Compte des noms à mapper.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-372">Count of the names to be mapped.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="03824-373">Contexte des paramètres régionaux dans lequel interpréter les noms.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-373">The locale context in which to interpret the names.</span>
          </span>
        </param>
        <param name="rgDispId">
          <span data-ttu-id="03824-374">Tableau, alloué par l'appelant, qui reçoit les ID correspondant aux noms.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-374">Caller-allocated array that receives the IDs corresponding to the names.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="03824-375">Mappe un jeu de noms avec un jeu correspondant d'identificateurs de dispatch.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-375">Maps a set of names to a corresponding set of dispatch identifiers.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03824-376">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="03824-376">This method is for accessing managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="03824-377">Pour plus d’informations sur `IDispatch::GetIDsOfNames`, consultez MSDN Library.</span><span class="sxs-lookup"><span data-stu-id="03824-377">For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="03824-378">La méthode est appelée à liaison tardive à l’aide de l’interface <c>IDispatch</c> COM.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-378">The method is called late-bound using the COM <c>IDispatch</c> interface.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._ILGenerator.GetTypeInfo">
      <MemberSignature Language="C#" Value="void _ILGenerator.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._ILGenerator.GetTypeInfo(unsigned int32 iTInfo, unsigned int32 lcid, native int ppTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfo (iTInfo As UInteger, lcid As UInteger, ppTInfo As IntPtr) Implements _ILGenerator.GetTypeInfo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._ILGenerator.GetTypeInfo(System::UInt32 iTInfo, System::UInt32 lcid, IntPtr ppTInfo) = System::Runtime::InteropServices::_ILGenerator::GetTypeInfo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._ILGenerator.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iTInfo" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="ppTInfo" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="iTInfo">
          <span data-ttu-id="03824-379">Informations de type à retourner.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-379">The type information to return.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="03824-380">Identificateur des paramètres régionaux pour les informations de type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-380">The locale identifier for the type information.</span>
          </span>
        </param>
        <param name="ppTInfo">
          <span data-ttu-id="03824-381">Reçoit un pointeur vers l'objet d'informations de type demandé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-381">Receives a pointer to the requested type information object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="03824-382">Récupère les informations de type pour un objet, qui peuvent être utilisées ensuite pour obtenir les informations de type d'une interface.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-382">Retrieves the type information for an object, which can then be used to get the type information for an interface.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03824-383">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="03824-383">This method is for accessing managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="03824-384">Pour plus d’informations sur `IDispatch::GetTypeInfo`, consultez MSDN Library.</span><span class="sxs-lookup"><span data-stu-id="03824-384">For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="03824-385">La méthode est appelée à liaison tardive à l’aide de l’interface <c>IDispatch</c> COM.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-385">The method is called late-bound using the COM <c>IDispatch</c> interface.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._ILGenerator.GetTypeInfoCount">
      <MemberSignature Language="C#" Value="void _ILGenerator.GetTypeInfoCount (out uint pcTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._ILGenerator.GetTypeInfoCount([out] unsigned int32&amp; pcTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetTypeInfoCount(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfoCount (ByRef pcTInfo As UInteger) Implements _ILGenerator.GetTypeInfoCount" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._ILGenerator.GetTypeInfoCount([Runtime::InteropServices::Out] System::UInt32 % pcTInfo) = System::Runtime::InteropServices::_ILGenerator::GetTypeInfoCount;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._ILGenerator.GetTypeInfoCount(System.UInt32@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcTInfo" Type="System.UInt32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pcTInfo">
          <span data-ttu-id="03824-386">Pointe vers un emplacement qui reçoit le nombre d'interfaces d'informations de type fourni par l'objet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-386">Points to a location that receives the number of type information interfaces provided by the object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="03824-387">Récupère le nombre d'interfaces d'informations de type fourni par un objet (0 ou 1).</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-387">Retrieves the number of type information interfaces that an object provides (either 0 or 1).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03824-388">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="03824-388">This method is for accessing managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="03824-389">Pour plus d’informations sur `IDispatch::GetTypeInfoCount`, consultez MSDN Library.</span><span class="sxs-lookup"><span data-stu-id="03824-389">For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="03824-390">La méthode est appelée à liaison tardive à l’aide de l’interface <c>IDispatch</c> COM.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-390">The method is called late-bound using the COM <c>IDispatch</c> interface.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._ILGenerator.Invoke">
      <MemberSignature Language="C#" Value="void _ILGenerator.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._ILGenerator.Invoke(unsigned int32 dispIdMember, [in]valuetype System.Guid&amp; riid, unsigned int32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub Invoke (dispIdMember As UInteger, ByRef riid As Guid, lcid As UInteger, wFlags As Short, pDispParams As IntPtr, pVarResult As IntPtr, pExcepInfo As IntPtr, puArgErr As IntPtr) Implements _ILGenerator.Invoke" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._ILGenerator.Invoke(System::UInt32 dispIdMember, Guid % riid, System::UInt32 lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr) = System::Runtime::InteropServices::_ILGenerator::Invoke;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._ILGenerator.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dispIdMember" Type="System.UInt32" />
        <Parameter Name="riid" Type="System.Guid&amp;" RefType="ref" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="wFlags" Type="System.Int16" />
        <Parameter Name="pDispParams" Type="System.IntPtr" />
        <Parameter Name="pVarResult" Type="System.IntPtr" />
        <Parameter Name="pExcepInfo" Type="System.IntPtr" />
        <Parameter Name="puArgErr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="dispIdMember">
          <span data-ttu-id="03824-391">Identifie le membre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-391">Identifies the member.</span>
          </span>
        </param>
        <param name="riid">
          <span data-ttu-id="03824-392">Réservé à un usage ultérieur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-392">Reserved for future use.</span>
          </span>
          <span data-ttu-id="03824-393">Doit être IID_NULL.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-393">Must be IID_NULL.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="03824-394">Contexte des paramètres régionaux dans lequel interpréter les arguments.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-394">The locale context in which to interpret arguments.</span>
          </span>
        </param>
        <param name="wFlags">
          <span data-ttu-id="03824-395">Indicateurs décrivant le contexte de l'appel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-395">Flags describing the context of the call.</span>
          </span>
        </param>
        <param name="pDispParams">
          <span data-ttu-id="03824-396">Pointeur vers une structure qui contient un tableau d’arguments, un tableau d’arguments DISPID pour les arguments nommés et le nombre d’éléments de chaque tableau.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-396">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</span>
          </span>
        </param>
        <param name="pVarResult">
          <span data-ttu-id="03824-397">Pointeur vers l'emplacement où le résultat doit être stocké.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-397">Pointer to the location where the result is to be stored.</span>
          </span>
        </param>
        <param name="pExcepInfo">
          <span data-ttu-id="03824-398">Pointeur vers une structure qui contient les informations sur les exceptions.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-398">Pointer to a structure that contains exception information.</span>
          </span>
        </param>
        <param name="puArgErr">
          <span data-ttu-id="03824-399">Index du premier argument comportant une erreur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-399">The index of the first argument that has an error.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="03824-400">Fournit l'accès aux propriétés et aux méthodes exposées par un objet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-400">Provides access to properties and methods exposed by an object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03824-401">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="03824-401">This method is for accessing managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="03824-402">Pour plus d’informations sur `IDispatch::Invoke`, consultez MSDN Library.</span><span class="sxs-lookup"><span data-stu-id="03824-402">For more information about `IDispatch::Invoke`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="03824-403">La méthode est appelée à liaison tardive à l’aide de l’interface <c>IDispatch</c> COM.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-403">The method is called late-bound using the COM <c>IDispatch</c> interface.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ThrowException">
      <MemberSignature Language="C#" Value="public virtual void ThrowException (Type excType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ThrowException(class System.Type excType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.ILGenerator.ThrowException(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ThrowException (excType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ThrowException(Type ^ excType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.ILGeneration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="excType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="excType">
          <span data-ttu-id="03824-404">Classe du type d'exception à lever.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-404">The class of the type of exception to throw.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="03824-405">Émet une instruction pour la levée d'une exception.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-405">Emits an instruction to throw an exception.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="03824-406">L’exemple de code suivant illustre l’utilisation contextuelle de `ThrowException` pour lever une exception à l’intérieur du MSIL d’une méthode dynamique.</span><span class="sxs-lookup"><span data-stu-id="03824-406">The following code sample demonstrates the contextual usage of `ThrowException` to throw an exception inside the MSIL of a dynamic method.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.ILGenerator.ThrowException Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.ThrowException Example/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit.ILGenerator.ThrowException Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.ThrowException Example/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit.ILGenerator.ThrowException Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.ThrowException Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="03824-407">
            <paramref name="excType" /> n'est ni la classe <see cref="T:System.Exception" /> ni une classe dérivée de <see cref="T:System.Exception" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-407">
              <paramref name="excType" /> is not the <see cref="T:System.Exception" /> class or a derived class of <see cref="T:System.Exception" />.</span>
          </span>
          <span data-ttu-id="03824-408">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-408">-or-</span>
          </span>
          <span data-ttu-id="03824-409">Le type n'a pas de constructeur par défaut.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-409">The type does not have a default constructor.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="03824-410">
            <paramref name="excType" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-410">
              <paramref name="excType" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="UsingNamespace">
      <MemberSignature Language="C#" Value="public virtual void UsingNamespace (string usingNamespace);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UsingNamespace(string usingNamespace) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.ILGenerator.UsingNamespace(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub UsingNamespace (usingNamespace As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void UsingNamespace(System::String ^ usingNamespace);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.ILGeneration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usingNamespace" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="usingNamespace">
          <span data-ttu-id="03824-411">Espace de noms à utiliser pour évaluer les variables locales et observer la portée lexicale active en cours.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-411">The namespace to be used in evaluating locals and watches for the current active lexical scope</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="03824-412">Spécifie un espace de noms à utiliser pour évaluer les variables locales et observe la portée lexicale active en cours.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-412">Specifies the namespace to be used in evaluating locals and watches for the current active lexical scope.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03824-413">Si actuel <xref:System.Reflection.Emit.ILGenerator> est associé un <xref:System.Reflection.Emit.DynamicMethod> de l’objet, cette méthode n’est pas pris en charge.</span><span class="sxs-lookup"><span data-stu-id="03824-413">If the current <xref:System.Reflection.Emit.ILGenerator> is associated with a <xref:System.Reflection.Emit.DynamicMethod> object, this method is not supported.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="03824-414">La longueur de <paramref name="usingNamespace" /> est égale à zéro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-414">Length of <paramref name="usingNamespace" /> is zero.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="03824-415">
            <paramref name="usingNamespace" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-415">
              <paramref name="usingNamespace" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="03824-416">Ce <see cref="T:System.Reflection.Emit.ILGenerator" /> appartient à un <see cref="T:System.Reflection.Emit.DynamicMethod" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="03824-416">This <see cref="T:System.Reflection.Emit.ILGenerator" /> belongs to a <see cref="T:System.Reflection.Emit.DynamicMethod" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>