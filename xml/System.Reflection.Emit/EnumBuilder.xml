<Type Name="EnumBuilder" FullName="System.Reflection.Emit.EnumBuilder">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="26937c284a17b2cf04e4df8c5f7d41e5f2f65d5b" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class EnumBuilder : System.Reflection.TypeInfo, System.Runtime.InteropServices._EnumBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit EnumBuilder extends System.Reflection.TypeInfo implements class System.Runtime.InteropServices._EnumBuilder" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.Emit.EnumBuilder" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class EnumBuilder&#xA;Inherits TypeInfo&#xA;Implements _EnumBuilder" />
  <TypeSignature Language="C++ CLI" Value="public ref class EnumBuilder sealed : System::Reflection::TypeInfo, System::Runtime::InteropServices::_EnumBuilder" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.Emit</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Reflection.TypeInfo</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netcore-2.0">System.Type</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.InteropServices._EnumBuilder</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._EnumBuilder))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="116a9-101">Décrit et représente un type d’énumération.</span>
      <span class="sxs-lookup">
        <span data-stu-id="116a9-101">Describes and represents an enumeration type.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="116a9-102">Dans les versions 1.0 et 1.1 du .NET Framework, il est nécessaire de définir des énumérations à l’aide de <xref:System.Reflection.Emit.TypeBuilder> car <xref:System.Reflection.Emit.EnumBuilder> émet des énumérations dont les éléments sont de type <xref:System.Int32> au lieu du type énumération.</span><span class="sxs-lookup"><span data-stu-id="116a9-102">In the .NET Framework versions 1.0 and 1.1, it is necessary to define enumerations using <xref:System.Reflection.Emit.TypeBuilder> because <xref:System.Reflection.Emit.EnumBuilder> emits enumerations whose elements are of type <xref:System.Int32> instead of the enumeration type.</span></span> <span data-ttu-id="116a9-103">Dans le .NET Framework version 2.0, <xref:System.Reflection.Emit.EnumBuilder> émet des énumérations dont les éléments ont le type approprié.</span><span class="sxs-lookup"><span data-stu-id="116a9-103">In the .NET Framework version 2.0, <xref:System.Reflection.Emit.EnumBuilder> emits enumerations whose elements have the correct type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="116a9-104">L’exemple de code suivant illustre la construction d’une énumération dans un assembly dynamique, à l’aide de `EnumBuilder`.</span><span class="sxs-lookup"><span data-stu-id="116a9-104">The following code example demonstrates the construction of an enumeration within a dynamic assembly, using `EnumBuilder`.</span></span> <span data-ttu-id="116a9-105">L’exemple définit une énumération nommée `Elevation`, avec un type sous-jacent de <xref:System.Int32>et crée deux éléments : `Low`, avec la valeur 0, et `High`, avec la valeur 1.</span><span class="sxs-lookup"><span data-stu-id="116a9-105">The example defines an enumeration named `Elevation`, with an underlying type of <xref:System.Int32>, and creates two elements: `Low`, with a value of 0, and `High`, with a value of 1.</span></span> <span data-ttu-id="116a9-106">Une fois que le type a été créé, l’assembly est enregistré avec le nom `TempAssembly.dll`.</span><span class="sxs-lookup"><span data-stu-id="116a9-106">After the type has been created, the assembly is saved with the name `TempAssembly.dll`.</span></span> <span data-ttu-id="116a9-107">Vous pouvez utiliser la [Ildasm.exe (désassembleur IL)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) pour examiner le contenu de cet assembly.</span><span class="sxs-lookup"><span data-stu-id="116a9-107">You can use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to examine the contents of this assembly.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="116a9-108">Avant la version 2.0 du .NET Framework, cet exemple de code ne produit pas une énumération correcte.</span><span class="sxs-lookup"><span data-stu-id="116a9-108">Prior to the .NET Framework version 2.0, this code example does not produce a correct enumeration.</span></span>  
  
 [!code-cpp[ModuleBuilder_DefineEnum#1](~/samples/snippets/cpp/VS_Snippets_CLR/ModuleBuilder_DefineEnum/CPP/modulebuilder_defineenum.cpp#1)]
 [!code-csharp[ModuleBuilder_DefineEnum#1](~/samples/snippets/csharp/VS_Snippets_CLR/ModuleBuilder_DefineEnum/CS/modulebuilder_defineenum.cs#1)]
 [!code-vb[ModuleBuilder_DefineEnum#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ModuleBuilder_DefineEnum/VB/modulebuilder_defineenum.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected EnumBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.EnumBuilder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; EnumBuilder();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Assembly">
      <MemberSignature Language="C#" Value="public override System.Reflection.Assembly Assembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Assembly Assembly" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.EnumBuilder.Assembly" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Assembly As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::Assembly ^ Assembly { System::Reflection::Assembly ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="116a9-109">Récupère l’assembly dynamique qui contient la définition de cet enum.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-109">Retrieves the dynamic assembly that contains this enum definition.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="116a9-110">Lecture seule.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-110">Read-only.</span>
          </span>
          <span data-ttu-id="116a9-111">Assembly dynamique qui contient la définition de cet enum.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-111">The dynamic assembly that contains this enum definition.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="116a9-112">L’exemple de code suivant illustre l’utilisation de la `Assembly` propriété à référencer l’assembly parent d’actuel `EnumBuilder`.</span><span class="sxs-lookup"><span data-stu-id="116a9-112">The following code sample demonstrates the use of the `Assembly` property to reference the parent assembly of the current `EnumBuilder`.</span></span>  
  
 [!code-cpp[EnumBuilder_Properties_5#1](~/samples/snippets/cpp/VS_Snippets_CLR/EnumBuilder_Properties_5/CPP/enumbuilder_properties_5.cpp#1)]
 [!code-csharp[EnumBuilder_Properties_5#1](~/samples/snippets/csharp/VS_Snippets_CLR/EnumBuilder_Properties_5/CS/enumbuilder_properties_5.cs#1)]
 [!code-vb[EnumBuilder_Properties_5#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/EnumBuilder_Properties_5/VB/enumbuilder_properties_5.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AssemblyQualifiedName">
      <MemberSignature Language="C#" Value="public override string AssemblyQualifiedName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AssemblyQualifiedName" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.EnumBuilder.AssemblyQualifiedName" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property AssemblyQualifiedName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ AssemblyQualifiedName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="116a9-113">Retourne le chemin d’accès complet de cet enum, qualifié par le nom complet de l’assembly parent.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-113">Returns the full path of this enum qualified by the display name of the parent assembly.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="116a9-114">Lecture seule.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-114">Read-only.</span>
          </span>
          <span data-ttu-id="116a9-115">Chemin d’accès complet de cet enum, qualifié par le nom complet de l’assembly parent.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-115">The full path of this enum qualified by the display name of the parent assembly.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="116a9-116">Le format de la chaîne retournée est :</span><span class="sxs-lookup"><span data-stu-id="116a9-116">The format of the returned string is:</span></span>  
  
 <span data-ttu-id="116a9-117">\<FullTypeName>, \<AssemblyDisplayName></span><span class="sxs-lookup"><span data-stu-id="116a9-117">\<FullTypeName>, \<AssemblyDisplayName></span></span>  
  
 <span data-ttu-id="116a9-118">Consultez <xref:System.Reflection.AssemblyName> pour obtenir une description du format du nom d’affichage d’un assembly.</span><span class="sxs-lookup"><span data-stu-id="116a9-118">See <xref:System.Reflection.AssemblyName> for a description of the format of the display name of an assembly.</span></span>  
  
## <a name="version-information"></a><span data-ttu-id="116a9-119">Informations sur la version</span><span class="sxs-lookup"><span data-stu-id="116a9-119">Version Information</span></span>  
 <span data-ttu-id="116a9-120">Dans le .NET Framework version 1.1 et les versions antérieure, la valeur de retour de cette propriété ne comprenait pas la culture ou la clé publique.</span><span class="sxs-lookup"><span data-stu-id="116a9-120">In the .NET Framework version 1.1 and earlier, the return value of this property did not include the culture or public key.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="116a9-121">L’exemple de code suivant illustre l’utilisation de la `AssemblyQualifiedName` propriété pour référencer le nom de l’assembly parent qualifié d’actuel `EnumBuilder`.</span><span class="sxs-lookup"><span data-stu-id="116a9-121">The following code sample demonstrates the use of the `AssemblyQualifiedName` property to reference the qualified parent assembly name of the current `EnumBuilder`.</span></span>  
  
 [!code-cpp[EnumBuilder_Properties_5#2](~/samples/snippets/cpp/VS_Snippets_CLR/EnumBuilder_Properties_5/CPP/enumbuilder_properties_5.cpp#2)]
 [!code-csharp[EnumBuilder_Properties_5#2](~/samples/snippets/csharp/VS_Snippets_CLR/EnumBuilder_Properties_5/CS/enumbuilder_properties_5.cs#2)]
 [!code-vb[EnumBuilder_Properties_5#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/EnumBuilder_Properties_5/VB/enumbuilder_properties_5.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public override System.Reflection.TypeAttributes Attributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.TypeAttributes Attributes" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.EnumBuilder.Attributes" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Attributes As TypeAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::TypeAttributes Attributes { System::Reflection::TypeAttributes get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.TypeAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BaseType">
      <MemberSignature Language="C#" Value="public override Type BaseType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type BaseType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.EnumBuilder.BaseType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property BaseType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ BaseType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="116a9-122">Retourne le <see cref="T:System.Type" /> parent de ce type qui est toujours <see cref="T:System.Enum" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-122">Returns the parent <see cref="T:System.Type" /> of this type which is always <see cref="T:System.Enum" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="116a9-123">Lecture seule.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-123">Read-only.</span>
          </span>
          <span data-ttu-id="116a9-124">Parent <see cref="T:System.Type" /> de ce type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-124">The parent <see cref="T:System.Type" /> of this type.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContainsGenericParameters">
      <MemberSignature Language="C#" Value="public override bool ContainsGenericParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ContainsGenericParameters" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.EnumBuilder.ContainsGenericParameters" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ContainsGenericParameters As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool ContainsGenericParameters { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateType">
      <MemberSignature Language="C#" Value="public Type CreateType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Type CreateType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.EnumBuilder.CreateType" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Type ^ CreateType();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="116a9-125">Crée un objet <see cref="T:System.Type" /> pour cet enum.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-125">Creates a <see cref="T:System.Type" /> object for this enum.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="116a9-126">Objet <see cref="T:System.Type" /> pour cet enum.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-126">A <see cref="T:System.Type" /> object for this enum.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="116a9-127">Ce type a été créé précédemment.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-127">This type has been previously created.</span>
          </span>
          <span data-ttu-id="116a9-128">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-128">-or-</span>
          </span>
          <span data-ttu-id="116a9-129">Le type englobant n’a pas été créé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-129">The enclosing type has not been created.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateTypeInfo">
      <MemberSignature Language="C#" Value="public System.Reflection.TypeInfo CreateTypeInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.TypeInfo CreateTypeInfo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.EnumBuilder.CreateTypeInfo" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateTypeInfo () As TypeInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::TypeInfo ^ CreateTypeInfo();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.TypeInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="116a9-130">Obtient un objet <see cref="T:System.Reflection.TypeInfo" /> qui représente cette énumération.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-130">Gets a <see cref="T:System.Reflection.TypeInfo" /> object that represents this enumeration.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="116a9-131">Objet qui représente cette énumération.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-131">An object that represents this enumeration.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeclaringMethod">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodBase DeclaringMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodBase DeclaringMethod" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.EnumBuilder.DeclaringMethod" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property DeclaringMethod As MethodBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MethodBase ^ DeclaringMethod { System::Reflection::MethodBase ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodBase</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeclaringType">
      <MemberSignature Language="C#" Value="public override Type DeclaringType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type DeclaringType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.EnumBuilder.DeclaringType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property DeclaringType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ DeclaringType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="116a9-132">Retourne le type qui a déclaré cet <see cref="T:System.Reflection.Emit.EnumBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-132">Returns the type that declared this <see cref="T:System.Reflection.Emit.EnumBuilder" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="116a9-133">Lecture seule.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-133">Read-only.</span>
          </span>
          <span data-ttu-id="116a9-134">Type qui a déclaré cet <see cref="T:System.Reflection.Emit.EnumBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-134">The type that declared this <see cref="T:System.Reflection.Emit.EnumBuilder" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefineLiteral">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.FieldBuilder DefineLiteral (string literalName, object literalValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.FieldBuilder DefineLiteral(string literalName, object literalValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.EnumBuilder.DefineLiteral(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineLiteral (literalName As String, literalValue As Object) As FieldBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::FieldBuilder ^ DefineLiteral(System::String ^ literalName, System::Object ^ literalValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.FieldBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="literalName" Type="System.String" />
        <Parameter Name="literalValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="literalName">
          <span data-ttu-id="116a9-135">Nom du champ statique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-135">The name of the static field.</span>
          </span>
        </param>
        <param name="literalValue">
          <span data-ttu-id="116a9-136">Valeur de constante du littéral.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-136">The constant value of the literal.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="116a9-137">Définit le champ statique nommé dans un type d’énumération avec la valeur de constante spécifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-137">Defines the named static field in an enumeration type with the specified constant value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="116a9-138">Champ défini.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-138">The defined field.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="116a9-139">Champ défini a les attributs de champ <xref:System.Reflection.FieldAttributes.Public>, <xref:System.Reflection.FieldAttributes.Static>, et <xref:System.Reflection.FieldAttributes.Literal> définie.</span><span class="sxs-lookup"><span data-stu-id="116a9-139">The defined field will have the field attributes <xref:System.Reflection.FieldAttributes.Public>, <xref:System.Reflection.FieldAttributes.Static>, and <xref:System.Reflection.FieldAttributes.Literal> set.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="116a9-140">Dans les versions 1.0 et 1.1 du .NET Framework, il est nécessaire de définir des énumérations à l’aide de <xref:System.Reflection.Emit.TypeBuilder> car <xref:System.Reflection.Emit.EnumBuilder> émet des énumérations dont les éléments sont de type <xref:System.Int32> au lieu du type énumération.</span><span class="sxs-lookup"><span data-stu-id="116a9-140">In the .NET Framework versions 1.0 and 1.1, it is necessary to define enumerations using <xref:System.Reflection.Emit.TypeBuilder> because <xref:System.Reflection.Emit.EnumBuilder> emits enumerations whose elements are of type <xref:System.Int32> instead of the enumeration type.</span></span> <span data-ttu-id="116a9-141">Dans le .NET Framework version 2.0, <xref:System.Reflection.Emit.EnumBuilder> émet des énumérations dont les éléments ont le type approprié.</span><span class="sxs-lookup"><span data-stu-id="116a9-141">In the .NET Framework version 2.0, <xref:System.Reflection.Emit.EnumBuilder> emits enumerations whose elements have the correct type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="116a9-142">L’exemple de code suivant illustre la construction d’une énumération dans un assembly dynamique, à l’aide de `EnumBuilder`.</span><span class="sxs-lookup"><span data-stu-id="116a9-142">The following code example demonstrates the construction of an enumeration within a dynamic assembly, using `EnumBuilder`.</span></span> <span data-ttu-id="116a9-143">L’exemple définit une énumération nommée `Elevation`, avec un type sous-jacent de <xref:System.Int32>et crée deux éléments : `Low`, avec la valeur 0, et `High`, avec la valeur 1.</span><span class="sxs-lookup"><span data-stu-id="116a9-143">The example defines an enumeration named `Elevation`, with an underlying type of <xref:System.Int32>, and creates two elements: `Low`, with a value of 0, and `High`, with a value of 1.</span></span> <span data-ttu-id="116a9-144">Une fois que le type a été créé, l’assembly est enregistré avec le nom `TempAssembly.dll`.</span><span class="sxs-lookup"><span data-stu-id="116a9-144">After the type has been created, the assembly is saved with the name `TempAssembly.dll`.</span></span> <span data-ttu-id="116a9-145">Vous pouvez utiliser la [Ildasm.exe (désassembleur IL)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) pour examiner le contenu de cet assembly.</span><span class="sxs-lookup"><span data-stu-id="116a9-145">You can use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to examine the contents of this assembly.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="116a9-146">Avant la version 2.0 du .NET Framework, cet exemple de code ne produit pas une énumération correcte.</span><span class="sxs-lookup"><span data-stu-id="116a9-146">Prior to the .NET Framework version 2.0, this code example does not produce a correct enumeration.</span></span>  
  
 [!code-cpp[ModuleBuilder_DefineEnum#1](~/samples/snippets/cpp/VS_Snippets_CLR/ModuleBuilder_DefineEnum/CPP/modulebuilder_defineenum.cpp#1)]
 [!code-csharp[ModuleBuilder_DefineEnum#1](~/samples/snippets/csharp/VS_Snippets_CLR/ModuleBuilder_DefineEnum/CS/modulebuilder_defineenum.cs#1)]
 [!code-vb[ModuleBuilder_DefineEnum#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ModuleBuilder_DefineEnum/VB/modulebuilder_defineenum.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FullName">
      <MemberSignature Language="C#" Value="public override string FullName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FullName" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.EnumBuilder.FullName" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property FullName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ FullName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="116a9-147">Retourne le chemin complet de cet enum.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-147">Returns the full path of this enum.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="116a9-148">Lecture seule.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-148">Read-only.</span>
          </span>
          <span data-ttu-id="116a9-149">Chemin complet de cet enum.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-149">The full path of this enum.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="116a9-150">Le format retourné est « NomCompletTypeEnglobant + NomTypeImbriqué » pour les types imbriqués et « NomType » pour les types non imbriqués.</span><span class="sxs-lookup"><span data-stu-id="116a9-150">The returned format is "enclosingTypeFullName+nestedTypeName" for nested types and "typeName" for non-nested types.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GenericParameterAttributes">
      <MemberSignature Language="C#" Value="public override System.Reflection.GenericParameterAttributes GenericParameterAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.GenericParameterAttributes GenericParameterAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.EnumBuilder.GenericParameterAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property GenericParameterAttributes As GenericParameterAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::GenericParameterAttributes GenericParameterAttributes { System::Reflection::GenericParameterAttributes get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.GenericParameterAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenericParameterPosition">
      <MemberSignature Language="C#" Value="public override int GenericParameterPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 GenericParameterPosition" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.EnumBuilder.GenericParameterPosition" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property GenericParameterPosition As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int GenericParameterPosition { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenericTypeArguments">
      <MemberSignature Language="C#" Value="public override Type[] GenericTypeArguments { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type[] GenericTypeArguments" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.EnumBuilder.GenericTypeArguments" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property GenericTypeArguments As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property cli::array &lt;Type ^&gt; ^ GenericTypeArguments { cli::array &lt;Type ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetArrayRank">
      <MemberSignature Language="C#" Value="public override int GetArrayRank ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetArrayRank() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.EnumBuilder.GetArrayRank" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetArrayRank () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetArrayRank();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAttributeFlagsImpl">
      <MemberSignature Language="C#" Value="protected override System.Reflection.TypeAttributes GetAttributeFlagsImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance valuetype System.Reflection.TypeAttributes GetAttributeFlagsImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.EnumBuilder.GetAttributeFlagsImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetAttributeFlagsImpl () As TypeAttributes" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Reflection::TypeAttributes GetAttributeFlagsImpl();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.TypeAttributes</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetConstructorImpl">
      <MemberSignature Language="C#" Value="protected override System.Reflection.ConstructorInfo GetConstructorImpl (System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Reflection.ConstructorInfo GetConstructorImpl(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.EnumBuilder.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Reflection::ConstructorInfo ^ GetConstructorImpl(System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, System::Reflection::CallingConventions callConvention, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">To be added.</param>
        <param name="binder">To be added.</param>
        <param name="callConvention">To be added.</param>
        <param name="types">To be added.</param>
        <param name="modifiers">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetConstructors">
      <MemberSignature Language="C#" Value="public override System.Reflection.ConstructorInfo[] GetConstructors (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.ConstructorInfo[] GetConstructors(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.EnumBuilder.GetConstructors(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetConstructors (bindingAttr As BindingFlags) As ConstructorInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::ConstructorInfo ^&gt; ^ GetConstructors(System::Reflection::BindingFlags bindingAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="116a9-151">Il doit s'agir d'un bit indicateur de <see cref="T:System.Reflection.BindingFlags" /> : <see langword="InvokeMethod" />, <see langword="NonPublic" />, etc.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-151">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" /> : <see langword="InvokeMethod" />, <see langword="NonPublic" />, and so on.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="116a9-152">Retourne un tableau d'objets <see cref="T:System.Reflection.ConstructorInfo" /> représentant les constructeurs publics et non publics définis pour cette classe, comme spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-152">Returns an array of <see cref="T:System.Reflection.ConstructorInfo" /> objects representing the public and non-public constructors defined for this class, as specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="116a9-153">Retourne un tableau d'objets <see cref="T:System.Reflection.ConstructorInfo" /> représentant les constructeurs spécifiés définis pour cette classe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-153">Returns an array of <see cref="T:System.Reflection.ConstructorInfo" /> objects representing the specified constructors defined for this class.</span>
          </span>
          <span data-ttu-id="116a9-154">Si aucun constructeur n’est défini, un tableau vide est retourné.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-154">If no constructors are defined, an empty array is returned.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="116a9-155">Pour résoudre ce problème, pour récupérer le constructeur d’un type fini, vous pouvez récupérer le type à l’aide de <xref:System.Type.GetType%2A?displayProperty=nameWithType> ou <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> et utiliser la réflexion sur le type récupéré.</span><span class="sxs-lookup"><span data-stu-id="116a9-155">As a workaround, to retrieve the constructor of a finished type, you can retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="116a9-156">Cette méthode n’est actuellement pas prise en charge pour les types incomplets.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-156">This method is not currently supported in types that are not complete.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCustomAttributes">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="116a9-157">Retourne les attributs personnalisés définis pour ce constructeur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-157">Returns the custom attributes defined for this constructor.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public override object[] GetCustomAttributes (bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object[] GetCustomAttributes(bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.EnumBuilder.GetCustomAttributes(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCustomAttributes (inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(bool inherit);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="inherit">
          <span data-ttu-id="116a9-158">Spécifie s’il faut rechercher les attributs dans la chaîne d’héritage de ce membre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-158">Specifies whether to search this member's inheritance chain to find the attributes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="116a9-159">Retourne tous les attributs personnalisés définis pour ce constructeur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-159">Returns all the custom attributes defined for this constructor.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="116a9-160">Retourne un tableau d'objets représentant tous les attributs personnalisés du constructeur représenté par cette instance de <see cref="T:System.Reflection.Emit.ConstructorBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-160">Returns an array of objects representing all the custom attributes of the constructor represented by this <see cref="T:System.Reflection.Emit.ConstructorBuilder" /> instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="116a9-161">Pour récupérer les attributs personnalisés d’un type fini, vous devez récupérer le type à l’aide <xref:System.Type.GetType%2A?displayProperty=nameWithType> et appelez <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> sur retourné <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="116a9-161">As a workaround, to retrieve the custom attributes of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> and call <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> on the returned <xref:System.Type>.</span></span>  
  
 <span data-ttu-id="116a9-162">L’exemple de code suivant illustre l’utilisation de `GetCustomAttribute` dans le contexte de <xref:System.Reflection.Emit.EnumBuilder>.</span><span class="sxs-lookup"><span data-stu-id="116a9-162">The following code sample illustrates the use of `GetCustomAttribute` in the context of <xref:System.Reflection.Emit.EnumBuilder>.</span></span>  
  
 [!code-cpp[EnumBuilder_SetCustomAttribute2#1](~/samples/snippets/cpp/VS_Snippets_CLR/EnumBuilder_SetCustomAttribute2/CPP/enumbuilder_setcustomattribute2.cpp#1)]
 [!code-csharp[EnumBuilder_SetCustomAttribute2#1](~/samples/snippets/csharp/VS_Snippets_CLR/EnumBuilder_SetCustomAttribute2/CS/enumbuilder_setcustomattribute2.cs#1)]
 [!code-vb[EnumBuilder_SetCustomAttribute2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/EnumBuilder_SetCustomAttribute2/VB/enumbuilder_setcustomattribute2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="116a9-163">Cette méthode n’est actuellement pas prise en charge pour les types incomplets.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-163">This method is not currently supported in types that are not complete.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public override object[] GetCustomAttributes (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object[] GetCustomAttributes(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.EnumBuilder.GetCustomAttributes(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCustomAttributes (attributeType As Type, inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(Type ^ attributeType, bool inherit);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType">
          <span data-ttu-id="116a9-164">Objet <see langword="Type" /> auquel les attributs personnalisés sont appliqués.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-164">The <see langword="Type" /> object to which the custom attributes are applied.</span>
          </span>
        </param>
        <param name="inherit">
          <span data-ttu-id="116a9-165">Spécifie s’il faut rechercher les attributs dans la chaîne d’héritage de ce membre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-165">Specifies whether to search this member's inheritance chain to find the attributes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="116a9-166">Retourne les attributs personnalisés identifiés par le type donné.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-166">Returns the custom attributes identified by the given type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="116a9-167">Retourne un tableau d’objets représentant les attributs de ce constructeur qui sont de <see cref="T:System.Type" /><paramref name="attributeType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-167">Returns an array of objects representing the attributes of this constructor that are of <see cref="T:System.Type" /><paramref name="attributeType" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="116a9-168">Pour récupérer les attributs personnalisés d’un type fini, vous devez récupérer le type à l’aide <xref:System.Type.GetType%2A?displayProperty=nameWithType> et appelez <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A?displayProperty=nameWithType> sur retourné <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="116a9-168">As a workaround, to retrieve the custom attributes of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> and call <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A?displayProperty=nameWithType> on the returned <xref:System.Type>.</span></span>  
  
 <span data-ttu-id="116a9-169">L’exemple de code suivant illustre l’utilisation de `GetCustomAttribute` dans le contexte de <xref:System.Reflection.Emit.EnumBuilder>.</span><span class="sxs-lookup"><span data-stu-id="116a9-169">The following code sample illustrates the use of `GetCustomAttribute` in the context of <xref:System.Reflection.Emit.EnumBuilder>.</span></span>  
  
 [!code-cpp[EnumBuilder_SetCustomAttribute1#2](~/samples/snippets/cpp/VS_Snippets_CLR/EnumBuilder_SetCustomAttribute1/CPP/enumbuilder_setcustomattribute1.cpp#2)]
 [!code-csharp[EnumBuilder_SetCustomAttribute1#2](~/samples/snippets/csharp/VS_Snippets_CLR/EnumBuilder_SetCustomAttribute1/CS/enumbuilder_setcustomattribute1.cs#2)]
 [!code-vb[EnumBuilder_SetCustomAttribute1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/EnumBuilder_SetCustomAttribute1/VB/enumbuilder_setcustomattribute1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="116a9-170">Cette méthode n’est actuellement pas prise en charge pour les types incomplets.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-170">This method is not currently supported in types that are not complete.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetElementType">
      <MemberSignature Language="C#" Value="public override Type GetElementType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type GetElementType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.EnumBuilder.GetElementType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetElementType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Type ^ GetElementType();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="116a9-171">L'appel de cette méthode lève toujours <see cref="T:System.NotSupportedException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-171">Calling this method always throws <see cref="T:System.NotSupportedException" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="116a9-172">Cette méthode n'est pas prise en charge.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-172">This method is not supported.</span>
          </span>
          <span data-ttu-id="116a9-173">Aucune valeur n'est retournée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-173">No value is returned.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="116a9-174">Cette méthode n’est pas prise en charge pour l’instant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-174">This method is not currently supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumUnderlyingType">
      <MemberSignature Language="C#" Value="public override Type GetEnumUnderlyingType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type GetEnumUnderlyingType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.EnumBuilder.GetEnumUnderlyingType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetEnumUnderlyingType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Type ^ GetEnumUnderlyingType();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="116a9-175">Retourne le type d’entier sous-jacent de l’énumération actuelle, qui est défini quand le générateur de l’énumération est défini.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-175">Returns the underlying integer type of the current enumeration, which is set when the enumeration builder is defined.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="116a9-176">Type sous-jacent.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-176">The underlying type.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEvent">
      <MemberSignature Language="C#" Value="public override System.Reflection.EventInfo GetEvent (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.EventInfo GetEvent(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.EnumBuilder.GetEvent(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetEvent (name As String, bindingAttr As BindingFlags) As EventInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Reflection::EventInfo ^ GetEvent(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="116a9-177">Nom de l’événement à obtenir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-177">The name of the event to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="116a9-178">Attribut de cet appel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-178">This invocation attribute.</span>
          </span>
          <span data-ttu-id="116a9-179">Il doit s'agir d'un bit indicateur de <see cref="T:System.Reflection.BindingFlags" /> : <see langword="InvokeMethod" />, <see langword="NonPublic" />, etc.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-179">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" /> : <see langword="InvokeMethod" />, <see langword="NonPublic" />, and so on.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="116a9-180">Retourne l’événement avec le nom spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-180">Returns the event with the specified name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="116a9-181">Retourne un objet <see cref="T:System.Reflection.EventInfo" /> représentant l'événement déclaré ou hérité par ce type avec le nom spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-181">Returns an <see cref="T:System.Reflection.EventInfo" /> object representing the event declared or inherited by this type with the specified name.</span>
          </span>
          <span data-ttu-id="116a9-182">En l'absence de correspondances, <see langword="null" /> est retourné.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-182">If there are no matches, <see langword="null" /> is returned.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="116a9-183">Pour récupérer l’événement d’un type fini, vous devez récupérer le type à l’aide de <xref:System.Type.GetType%2A?displayProperty=nameWithType> ou <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> et utiliser la réflexion sur le type récupéré.</span><span class="sxs-lookup"><span data-stu-id="116a9-183">As a workaround, to retrieve the event of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="116a9-184">Cette méthode n’est actuellement pas prise en charge pour les types incomplets.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-184">This method is not currently supported in types that are not complete.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetEvents">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="116a9-185">Cette méthode n’est pas prise en charge pour les types incomplets.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-185">This method is not supported on types that have not been completed.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetEvents">
      <MemberSignature Language="C#" Value="public override System.Reflection.EventInfo[] GetEvents ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.EventInfo[] GetEvents() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.EnumBuilder.GetEvents" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetEvents () As EventInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::EventInfo ^&gt; ^ GetEvents();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="116a9-186">Retourne les événements publics déclarés ou hérités par ce type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-186">Returns the events for the public events declared or inherited by this type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="116a9-187">Retourne un tableau d'objets <see cref="T:System.Reflection.EventInfo" /> représentant les événements publics déclarés ou hérités par ce type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-187">Returns an array of <see cref="T:System.Reflection.EventInfo" /> objects representing the public events declared or inherited by this type.</span>
          </span>
          <span data-ttu-id="116a9-188">Un tableau vide est retourné s’il n’existe aucun événement public.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-188">An empty array is returned if there are no public events.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="116a9-189">Pour récupérer les événements d’un type fini, vous devez récupérer le type à l’aide <xref:System.Type.GetType%2A?displayProperty=nameWithType> ou <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> et utiliser la réflexion sur le type récupéré.</span><span class="sxs-lookup"><span data-stu-id="116a9-189">As a workaround, to retrieve the events of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="116a9-190">Cette méthode n’est actuellement pas prise en charge pour les types incomplets.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-190">This method is not currently supported in types that are not complete.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetEvents">
      <MemberSignature Language="C#" Value="public override System.Reflection.EventInfo[] GetEvents (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.EventInfo[] GetEvents(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.EnumBuilder.GetEvents(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetEvents (bindingAttr As BindingFlags) As EventInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::EventInfo ^&gt; ^ GetEvents(System::Reflection::BindingFlags bindingAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="116a9-191">Il doit s'agir d'un indicateur binaire de <see cref="T:System.Reflection.BindingFlags" />, tel que <see langword="InvokeMethod" />, <see langword="NonPublic" />, etc.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-191">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" />, such as <see langword="InvokeMethod" />, <see langword="NonPublic" />, and so on.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="116a9-192">Retourne les événements publics et non publics déclarés par ce type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-192">Returns the public and non-public events that are declared by this type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="116a9-193">Retourne un tableau d'objets <see cref="T:System.Reflection.EventInfo" /> représentant les événements publics et non publics déclarés ou hérités par ce type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-193">Returns an array of <see cref="T:System.Reflection.EventInfo" /> objects representing the public and non-public events declared or inherited by this type.</span>
          </span>
          <span data-ttu-id="116a9-194">Un tableau vide est retourné s’il n’existe aucun événement, comme il est spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-194">An empty array is returned if there are no events, as specified.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="116a9-195">Pour récupérer les événements d’un type fini, vous devez récupérer le type à l’aide <xref:System.Type.GetType%2A?displayProperty=nameWithType> ou <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> et utiliser la réflexion sur le type récupéré afin de récupérer les événements.</span><span class="sxs-lookup"><span data-stu-id="116a9-195">As a workaround, to retrieve the events of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type to retrieve the events.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="116a9-196">Cette méthode n’est actuellement pas prise en charge pour les types incomplets.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-196">This method is not currently supported in types that are not complete.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetField">
      <MemberSignature Language="C#" Value="public override System.Reflection.FieldInfo GetField (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.FieldInfo GetField(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.EnumBuilder.GetField(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetField (name As String, bindingAttr As BindingFlags) As FieldInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Reflection::FieldInfo ^ GetField(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="116a9-197">Nom du champ à obtenir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-197">The name of the field to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="116a9-198">Il doit s'agir d'un bit indicateur de <see cref="T:System.Reflection.BindingFlags" /> : <see langword="InvokeMethod" />, <see langword="NonPublic" />, etc.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-198">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" /> : <see langword="InvokeMethod" />, <see langword="NonPublic" />, and so on.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="116a9-199">Retourne le champ spécifié par le nom donné.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-199">Returns the field specified by the given name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="116a9-200">Retourne l'objet <see cref="T:System.Reflection.FieldInfo" /> représentant le champ déclaré ou hérité par ce type, avec le nom et le modificateur public ou non public spécifiés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-200">Returns the <see cref="T:System.Reflection.FieldInfo" /> object representing the field declared or inherited by this type with the specified name and public or non-public modifier.</span>
          </span>
          <span data-ttu-id="116a9-201">En l’absence de correspondances, la valeur « null » est retournée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-201">If there are no matches, then null is returned.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="116a9-202">Pour récupérer le champ d’un type fini, vous devez récupérer le type à l’aide de <xref:System.Type.GetType%2A?displayProperty=nameWithType> ou <xref:System.Reflection.Assembly.GetType%2A> et utiliser la réflexion sur le type récupéré.</span><span class="sxs-lookup"><span data-stu-id="116a9-202">As a workaround, to retrieve the field of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A> and use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="116a9-203">Cette méthode n’est actuellement pas prise en charge pour les types incomplets.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-203">This method is not currently supported in types that are not complete.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetFields">
      <MemberSignature Language="C#" Value="public override System.Reflection.FieldInfo[] GetFields (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.FieldInfo[] GetFields(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.EnumBuilder.GetFields(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetFields (bindingAttr As BindingFlags) As FieldInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::FieldInfo ^&gt; ^ GetFields(System::Reflection::BindingFlags bindingAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="116a9-204">Il doit s'agir d'un bit indicateur de <see cref="T:System.Reflection.BindingFlags" />, tel qu'InvokeMethod, NonPublic, etc.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-204">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" />, such as InvokeMethod, NonPublic, and so on.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="116a9-205">Retourne les champs publics et non publics déclarés par ce type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-205">Returns the public and non-public fields that are declared by this type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="116a9-206">Retourne un tableau d'objets <see cref="T:System.Reflection.FieldInfo" /> représentant les champs publics et non publics déclarés ou hérités par ce type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-206">Returns an array of <see cref="T:System.Reflection.FieldInfo" /> objects representing the public and non-public fields declared or inherited by this type.</span>
          </span>
          <span data-ttu-id="116a9-207">Un tableau vide est retourné s’il n’existe aucun champ, comme indiqué.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-207">An empty array is returned if there are no fields, as specified.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="116a9-208">Pour récupérer le champ d’un type fini, vous devez récupérer le type à l’aide de <xref:System.Type.GetType%2A?displayProperty=nameWithType> ou <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> et utiliser la réflexion sur le type récupéré.</span><span class="sxs-lookup"><span data-stu-id="116a9-208">As a workaround, to retrieve the field of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 <span data-ttu-id="116a9-209">Le <xref:System.Reflection.Emit.EnumBuilder.GetFields%2A> méthode ne retourne pas les champs dans un ordre particulier, tel qu’alphabétique ou l’ordre de déclaration.</span><span class="sxs-lookup"><span data-stu-id="116a9-209">The <xref:System.Reflection.Emit.EnumBuilder.GetFields%2A> method does not return fields in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="116a9-210">Votre code ne doit pas dépendent de l’ordre dans lequel les champs sont retournés, car cet ordre peut varier.</span><span class="sxs-lookup"><span data-stu-id="116a9-210">Your code must not depend on the order in which fields are returned, because that order can vary.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="116a9-211">Cette méthode n’est actuellement pas prise en charge pour les types incomplets.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-211">This method is not currently supported in types that are not complete.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetGenericParameterConstraints">
      <MemberSignature Language="C#" Value="public override Type[] GetGenericParameterConstraints ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type[] GetGenericParameterConstraints() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.EnumBuilder.GetGenericParameterConstraints" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetGenericParameterConstraints () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;Type ^&gt; ^ GetGenericParameterConstraints();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetGenericTypeDefinition">
      <MemberSignature Language="C#" Value="public override Type GetGenericTypeDefinition ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type GetGenericTypeDefinition() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.EnumBuilder.GetGenericTypeDefinition" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetGenericTypeDefinition () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Type ^ GetGenericTypeDefinition();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInterface">
      <MemberSignature Language="C#" Value="public override Type GetInterface (string name, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type GetInterface(string name, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.EnumBuilder.GetInterface(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetInterface (name As String, ignoreCase As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Type ^ GetInterface(System::String ^ name, bool ignoreCase);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="116a9-212">Nom de l’interface.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-212">The name of the interface.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="116a9-213">Si <see langword="true" />, la recherche ne respecte pas la casse.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-213">If <see langword="true" />, the search is case-insensitive.</span>
          </span>
          <span data-ttu-id="116a9-214">Si <see langword="false" />, la recherche respecte la casse.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-214">If <see langword="false" />, the search is case-sensitive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="116a9-215">Retourne l’interface implémentée (directement ou indirectement) par ce type, avec le nom qualifié complet spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-215">Returns the interface implemented (directly or indirectly) by this type, with the specified fully-qualified name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="116a9-216">Retourne un objet <see cref="T:System.Type" /> représentant l'interface implémentée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-216">Returns a <see cref="T:System.Type" /> object representing the implemented interface.</span>
          </span>
          <span data-ttu-id="116a9-217">Retourne null si aucun nom d’interface correspondant n’est trouvé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-217">Returns null if no interface matching name is found.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="116a9-218">Pour récupérer l’interface d’un type fini, vous devez récupérer le type à l’aide de <xref:System.Type.GetType%2A?displayProperty=nameWithType> ou <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> et utiliser la réflexion sur le type récupéré.</span><span class="sxs-lookup"><span data-stu-id="116a9-218">As a workaround, to retrieve the interface of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="116a9-219">Cette méthode n’est actuellement pas prise en charge pour les types incomplets.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-219">This method is not currently supported in types that are not complete.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetInterfaceMap">
      <MemberSignature Language="C#" Value="public override System.Reflection.InterfaceMapping GetInterfaceMap (Type interfaceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Reflection.InterfaceMapping GetInterfaceMap(class System.Type interfaceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.EnumBuilder.GetInterfaceMap(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetInterfaceMap (interfaceType As Type) As InterfaceMapping" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Reflection::InterfaceMapping GetInterfaceMap(Type ^ interfaceType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.InterfaceMapping</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interfaceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="interfaceType">
          <span data-ttu-id="116a9-220">Type de l’interface pour laquelle le mappage d’interface doit être récupéré.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-220">The type of the interface for which the interface mapping is to be retrieved.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="116a9-221">Retourne un mappage d’interface pour l’interface demandée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-221">Returns an interface mapping for the interface requested.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="116a9-222">Mappage d’interface demandé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-222">The requested interface mapping.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="116a9-223">Pour récupérer les types de mappage d’interface d’un type fini, vous devez récupérer le type à l’aide de <xref:System.Type.GetType%2A?displayProperty=nameWithType> ou <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> et utiliser la réflexion sur le type récupéré.</span><span class="sxs-lookup"><span data-stu-id="116a9-223">As a workaround, to retrieve the interface mapping types of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="116a9-224">Le type n’implémente pas l’interface.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-224">The type does not implement the interface.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetInterfaces">
      <MemberSignature Language="C#" Value="public override Type[] GetInterfaces ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type[] GetInterfaces() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.EnumBuilder.GetInterfaces" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetInterfaces () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;Type ^&gt; ^ GetInterfaces();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="116a9-225">Retourne un tableau de toutes les interfaces implémentées sur cette une classe et ses classes de base.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-225">Returns an array of all the interfaces implemented on this a class and its base classes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="116a9-226">Retourne un tableau d'objets <see cref="T:System.Type" /> représentant les interfaces implémentées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-226">Returns an array of <see cref="T:System.Type" /> objects representing the implemented interfaces.</span>
          </span>
          <span data-ttu-id="116a9-227">Si aucune interface n’est définie, un tableau vide est retourné.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-227">If none are defined, an empty array is returned.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="116a9-228">Pour récupérer l’interface d’un type fini, vous devez récupérer le type à l’aide de <xref:System.Type.GetType%2A?displayProperty=nameWithType> ou <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> et utiliser la réflexion sur le type récupéré.</span><span class="sxs-lookup"><span data-stu-id="116a9-228">As a workaround, to retrieve the interface of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMember">
      <MemberSignature Language="C#" Value="public override System.Reflection.MemberInfo[] GetMember (string name, System.Reflection.MemberTypes type, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.MemberInfo[] GetMember(string name, valuetype System.Reflection.MemberTypes type, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.EnumBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMember (name As String, type As MemberTypes, bindingAttr As BindingFlags) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMember(System::String ^ name, System::Reflection::MemberTypes type, System::Reflection::BindingFlags bindingAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="type" Type="System.Reflection.MemberTypes" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="116a9-229">Nom du membre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-229">The name of the member.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="116a9-230">Type du membre qui doit être retourné.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-230">The type of member that is to be returned.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="116a9-231">Il doit s'agir d'un bit indicateur de <see cref="T:System.Reflection.BindingFlags" /> : <see langword="InvokeMethod" />, <see langword="NonPublic" />, etc.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-231">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" /> : <see langword="InvokeMethod" />, <see langword="NonPublic" />, and so on.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="116a9-232">Retourne tous les membres avec le nom spécifié, le type et la liaison qui sont déclarés ou hérités par ce type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-232">Returns all members with the specified name, type, and binding that are declared or inherited by this type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="116a9-233">Retourne un tableau d'objets <see cref="T:System.Reflection.MemberInfo" /> représentant les membres publics et non publics définis sur ce type si <paramref name="nonPublic" /> est utilisé ; sinon, seuls les membres publics sont retournés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-233">Returns an array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public and non-public members defined on this type if <paramref name="nonPublic" /> is used; otherwise, only the public members are returned.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="116a9-234">Pour récupérer le membre d’un type fini, vous devez récupérer le type à l’aide de <xref:System.Type.GetType%2A?displayProperty=nameWithType> ou <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> et utiliser la réflexion sur le type récupéré.</span><span class="sxs-lookup"><span data-stu-id="116a9-234">As a workaround, to retrieve the member of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="116a9-235">Cette méthode n’est actuellement pas prise en charge pour les types incomplets.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-235">This method is not currently supported in types that are not complete.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetMembers">
      <MemberSignature Language="C#" Value="public override System.Reflection.MemberInfo[] GetMembers (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.MemberInfo[] GetMembers(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.EnumBuilder.GetMembers(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMembers (bindingAttr As BindingFlags) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMembers(System::Reflection::BindingFlags bindingAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="116a9-236">Il doit s'agir d'un bit indicateur de <see cref="T:System.Reflection.BindingFlags" /> : <see langword="InvokeMethod" />, <see langword="NonPublic" />, etc.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-236">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" /> : <see langword="InvokeMethod" />, <see langword="NonPublic" />, and so on.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="116a9-237">Retourne les membres spécifiés déclarés ou hérités par ce type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-237">Returns the specified members declared or inherited by this type,.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="116a9-238">Retourne un tableau d'objets <see cref="T:System.Reflection.MemberInfo" /> représentant les membres publics et non publics déclarés ou hérités par ce type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-238">Returns an array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public and non-public members declared or inherited by this type.</span>
          </span>
          <span data-ttu-id="116a9-239">Un tableau vide est retourné s’il n’existe aucun membre correspondant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-239">An empty array is returned if there are no matching members.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="116a9-240">Pour récupérer les membres d’un type fini, vous devez récupérer le type à l’aide <xref:System.Type.GetType%2A?displayProperty=nameWithType> ou <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> et utiliser la réflexion sur le type récupéré.</span><span class="sxs-lookup"><span data-stu-id="116a9-240">As a workaround, to retrieve the members of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="116a9-241">Cette méthode n’est actuellement pas prise en charge pour les types incomplets.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-241">This method is not currently supported in types that are not complete.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetMethodImpl">
      <MemberSignature Language="C#" Value="protected override System.Reflection.MethodInfo GetMethodImpl (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Reflection.MethodInfo GetMethodImpl(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.EnumBuilder.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Reflection::MethodInfo ^ GetMethodImpl(System::String ^ name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, System::Reflection::CallingConventions callConvention, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="bindingAttr">To be added.</param>
        <param name="binder">To be added.</param>
        <param name="callConvention">To be added.</param>
        <param name="types">To be added.</param>
        <param name="modifiers">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethods">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodInfo[] GetMethods (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.MethodInfo[] GetMethods(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.EnumBuilder.GetMethods(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMethods (bindingAttr As BindingFlags) As MethodInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::MethodInfo ^&gt; ^ GetMethods(System::Reflection::BindingFlags bindingAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="116a9-242">Il doit s'agir d'un indicateur binaire de <see cref="T:System.Reflection.BindingFlags" />, tel que <see langword="InvokeMethod" />, <see langword="NonPublic" />, etc.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-242">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" />, such as <see langword="InvokeMethod" />, <see langword="NonPublic" />, and so on.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="116a9-243">Retourne toutes les méthodes publiques et non publiques déclarées ou héritées par ce type, comme spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-243">Returns all the public and non-public methods declared or inherited by this type, as specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="116a9-244">Retourne un tableau d'objets <see cref="T:System.Reflection.MethodInfo" /> représentant les méthodes publiques et non publiques définies sur ce type si <paramref name="nonPublic" /> est utilisé ; sinon, seules les méthodes publiques sont retournées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-244">Returns an array of <see cref="T:System.Reflection.MethodInfo" /> objects representing the public and non-public methods defined on this type if <paramref name="nonPublic" /> is used; otherwise, only the public methods are returned.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="116a9-245">Pour récupérer les méthodes d’un type fini, vous devez récupérer le type à l’aide de <xref:System.Type.GetType%2A?displayProperty=nameWithType> ou <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> et utiliser la réflexion sur le type récupéré.</span><span class="sxs-lookup"><span data-stu-id="116a9-245">As a workaround, to retrieve the methods of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="116a9-246">Cette méthode n’est actuellement pas prise en charge pour les types incomplets.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-246">This method is not currently supported in types that are not complete.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetNestedType">
      <MemberSignature Language="C#" Value="public override Type GetNestedType (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type GetNestedType(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.EnumBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetNestedType (name As String, bindingAttr As BindingFlags) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Type ^ GetNestedType(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="116a9-247">
            <see cref="T:System.String" /> contenant le nom du type imbriqué à obtenir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-247">The <see cref="T:System.String" /> containing the name of the nested type to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="116a9-248">Masque de bits constitué d'un ou de plusieurs <see cref="T:System.Reflection.BindingFlags" /> spécifiant le mode d'exécution de la recherche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-248">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="116a9-249">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-249">-or-</span>
          </span>
          <span data-ttu-id="116a9-250">Zéro, pour rechercher les méthodes publiques en respectant la casse.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-250">Zero, to conduct a case-sensitive search for public methods.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="116a9-251">Retourne le type imbriqué spécifié qui est déclaré par ce type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-251">Returns the specified nested type that is declared by this type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="116a9-252">Objet <see cref="T:System.Type" /> qui représente le type imbriqué correspondant aux critères spécifiés, s'il existe ; sinon, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-252">A <see cref="T:System.Type" /> object representing the nested type that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="116a9-253">Pour récupérer le type imbriqué d’un type fini, vous devez récupérer le type à l’aide de <xref:System.Type.GetType%2A?displayProperty=nameWithType> ou <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> et utiliser la réflexion sur le type récupéré.</span><span class="sxs-lookup"><span data-stu-id="116a9-253">As a workaround, to retrieve the nested type of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="116a9-254">Cette méthode n’est actuellement pas prise en charge pour les types incomplets.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-254">This method is not currently supported in types that are not complete.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetNestedTypes">
      <MemberSignature Language="C#" Value="public override Type[] GetNestedTypes (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type[] GetNestedTypes(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.EnumBuilder.GetNestedTypes(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetNestedTypes (bindingAttr As BindingFlags) As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;Type ^&gt; ^ GetNestedTypes(System::Reflection::BindingFlags bindingAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="116a9-255">Il doit s'agir d'un indicateur binaire de <see cref="T:System.Reflection.BindingFlags" />, tel que <see langword="InvokeMethod" />, <see langword="NonPublic" />, etc.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-255">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" />, such as <see langword="InvokeMethod" />, <see langword="NonPublic" />, and so on.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="116a9-256">Retourne les types imbriqués publics et non publics déclarés ou hérités par ce type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-256">Returns the public and non-public nested types that are declared or inherited by this type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="116a9-257">Tableau d'objets <see cref="T:System.Type" /> représentant tous les types imbriqués du <see cref="T:System.Type" /> en cours qui correspondent aux contraintes de liaison spécifiées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-257">An array of <see cref="T:System.Type" /> objects representing all the types nested within the current <see cref="T:System.Type" /> that match the specified binding constraints.</span>
          </span>
          <span data-ttu-id="116a9-258">Tableau vide de type <see cref="T:System.Type" /> s'il n'existe aucun type imbriqué dans <see cref="T:System.Type" /> en cours ou si aucun des types imbriqués ne correspond aux contraintes de liaison.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-258">An empty array of type <see cref="T:System.Type" />, if no types are nested within the current <see cref="T:System.Type" />, or if none of the nested types match the binding constraints.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="116a9-259">Pour récupérer les types imbriqués d’un type fini, vous devez récupérer le type à l’aide de <xref:System.Type.GetType%2A?displayProperty=nameWithType> ou <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> et utiliser la réflexion sur le type récupéré.</span><span class="sxs-lookup"><span data-stu-id="116a9-259">As a workaround, to retrieve the nested types of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="116a9-260">Cette méthode n’est actuellement pas prise en charge pour les types incomplets.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-260">This method is not currently supported in types that are not complete.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetProperties">
      <MemberSignature Language="C#" Value="public override System.Reflection.PropertyInfo[] GetProperties (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.PropertyInfo[] GetProperties(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.EnumBuilder.GetProperties(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetProperties (bindingAttr As BindingFlags) As PropertyInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::PropertyInfo ^&gt; ^ GetProperties(System::Reflection::BindingFlags bindingAttr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="116a9-261">Attribut de cet appel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-261">This invocation attribute.</span>
          </span>
          <span data-ttu-id="116a9-262">Il doit s'agir d'un bit indicateur de <see cref="T:System.Reflection.BindingFlags" /> : <see langword="InvokeMethod" />, <see langword="NonPublic" />, etc.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-262">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" /> : <see langword="InvokeMethod" />, <see langword="NonPublic" />, and so on.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="116a9-263">Retourne toutes les propriétés publiques et non publiques déclarées ou héritées par ce type, comme spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-263">Returns all the public and non-public properties declared or inherited by this type, as specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="116a9-264">Retourne un tableau d'objets <see cref="T:System.Reflection.PropertyInfo" /> représentant les propriétés publiques et non publiques définies sur ce type si <paramref name="nonPublic" /> est utilisé ; sinon, seules les propriétés publiques sont retournées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-264">Returns an array of <see cref="T:System.Reflection.PropertyInfo" /> objects representing the public and non-public properties defined on this type if <paramref name="nonPublic" /> is used; otherwise, only the public properties are returned.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="116a9-265">Pour récupérer les propriétés d’un type fini, vous devez récupérer le type à l’aide <xref:System.Type.GetType%2A?displayProperty=nameWithType> ou <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> et utiliser la réflexion sur le type récupéré.</span><span class="sxs-lookup"><span data-stu-id="116a9-265">As a workaround, to retrieve the properties of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="116a9-266">Cette méthode n’est actuellement pas prise en charge pour les types incomplets.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-266">This method is not currently supported in types that are not complete.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetPropertyImpl">
      <MemberSignature Language="C#" Value="protected override System.Reflection.PropertyInfo GetPropertyImpl (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Reflection.PropertyInfo GetPropertyImpl(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type returnType, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.EnumBuilder.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Reflection::PropertyInfo ^ GetPropertyImpl(System::String ^ name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, Type ^ returnType, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="bindingAttr">To be added.</param>
        <param name="binder">To be added.</param>
        <param name="returnType">To be added.</param>
        <param name="types">To be added.</param>
        <param name="modifiers">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GUID">
      <MemberSignature Language="C#" Value="public override Guid GUID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Guid GUID" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.EnumBuilder.GUID" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property GUID As Guid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Guid GUID { Guid get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="116a9-267">Retourne le GUID de cette énumération.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-267">Returns the GUID of this enum.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="116a9-268">Lecture seule.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-268">Read-only.</span>
          </span>
          <span data-ttu-id="116a9-269">GUID de cette énumération.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-269">The GUID of this enum.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="116a9-270">L’exemple de code suivant illustre l’utilisation de la `GUID` propriété à référencer associé <xref:System.Guid> actuelles `EnumBuilder`.</span><span class="sxs-lookup"><span data-stu-id="116a9-270">The following code sample demonstrates the use of the `GUID` property to reference the associated <xref:System.Guid> of the current `EnumBuilder`.</span></span>  
  
 [!code-cpp[EnumBuilder_Properties_4.cs#4](~/samples/snippets/cpp/VS_Snippets_CLR/EnumBuilder_Properties_4.cs/CPP/enumbuilder_properties_4.cpp#4)]
 [!code-csharp[EnumBuilder_Properties_4.cs#4](~/samples/snippets/csharp/VS_Snippets_CLR/EnumBuilder_Properties_4.cs/CS/enumbuilder_properties_4.cs#4)]
 [!code-vb[EnumBuilder_Properties_4.cs#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/EnumBuilder_Properties_4.cs/VB/enumbuilder_properties_4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="116a9-271">Cette méthode n’est actuellement pas prise en charge pour les types incomplets.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-271">This method is not currently supported in types that are not complete.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="HasElementTypeImpl">
      <MemberSignature Language="C#" Value="protected override bool HasElementTypeImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool HasElementTypeImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.EnumBuilder.HasElementTypeImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function HasElementTypeImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool HasElementTypeImpl();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeMember">
      <MemberSignature Language="C#" Value="public override object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object InvokeMember(string name, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object target, object[] args, valuetype System.Reflection.ParameterModifier[] modifiers, class System.Globalization.CultureInfo culture, string[] namedParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.EnumBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ InvokeMember(System::String ^ name, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, System::Object ^ target, cli::array &lt;System::Object ^&gt; ^ args, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers, System::Globalization::CultureInfo ^ culture, cli::array &lt;System::String ^&gt; ^ namedParameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="namedParameters" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="116a9-272">Nom du membre à appeler.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-272">The name of the member to invoke.</span>
          </span>
          <span data-ttu-id="116a9-273">Il peut s’agir d’un constructeur, d’une méthode, d’une propriété ou d’un champ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-273">This can be a constructor, method, property, or field.</span>
          </span>
          <span data-ttu-id="116a9-274">Un attribut d’appel approprié doit être spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-274">A suitable invocation attribute must be specified.</span>
          </span>
          <span data-ttu-id="116a9-275">Notez qu’il est possible d’appeler le membre par défaut d’une classe en passant une chaîne vide comme nom du membre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-275">Note that it is possible to invoke the default member of a class by passing an empty string as the name of the member.</span>
          </span>
        </param>
        <param name="invokeAttr">
          <span data-ttu-id="116a9-276">Attribut d’appel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-276">The invocation attribute.</span>
          </span>
          <span data-ttu-id="116a9-277">Il doit s'agir d'un bit indicateur de <see langword="BindingFlags" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-277">This must be a bit flag from <see langword="BindingFlags" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="116a9-278">Objet qui active la liaison, la contrainte de types d'arguments, l'appel des membres et la récupération d'objets <see langword="MemberInfo" /> par le biais de la réflexion.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-278">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see langword="MemberInfo" /> objects using reflection.</span>
          </span>
          <span data-ttu-id="116a9-279">Si le binder est <see langword="null" />, le binder par défaut est utilisé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-279">If binder is <see langword="null" />, the default binder is used.</span>
          </span>
          <span data-ttu-id="116a9-280">Consultez <see cref="T:System.Reflection.Binder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-280">See <see cref="T:System.Reflection.Binder" />.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="116a9-281">Objet sur lequel appeler le membre spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-281">The object on which to invoke the specified member.</span>
          </span>
          <span data-ttu-id="116a9-282">Si le membre est statique, ce paramètre est ignoré.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-282">If the member is static, this parameter is ignored.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="116a9-283">Liste d’arguments.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-283">An argument list.</span>
          </span>
          <span data-ttu-id="116a9-284">Il s’agit d’un tableau d’objets contenant le nombre, l’ordre et le type des paramètres du membre à appeler.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-284">This is an array of objects that contains the number, order, and type of the parameters of the member to be invoked.</span>
          </span>
          <span data-ttu-id="116a9-285">En l’absence de paramètres, il doit avoir la valeur null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-285">If there are no parameters this should be null.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="116a9-286">Tableau de même longueur que <c>args</c> avec des éléments qui représentent les attributs associés aux arguments du membre à appeler.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-286">An array of the same length as <c>args</c> with elements that represent the attributes associated with the arguments of the member to be invoked.</span>
          </span>
          <span data-ttu-id="116a9-287">Un paramètre est associé à des attributs dans les métadonnées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-287">A parameter has attributes associated with it in the metadata.</span>
          </span>
          <span data-ttu-id="116a9-288">Elles sont utilisées par divers services d’interopérabilité.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-288">They are used by various interoperability services.</span>
          </span>
          <span data-ttu-id="116a9-289">Pour plus d’informations de ce type, consultez les spécifications des métadonnées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-289">See the metadata specs for details such as this.</span>
          </span>
        </param>
        <param name="culture">
          <span data-ttu-id="116a9-290">Instance de <see langword="CultureInfo" /> utilisée pour régir la contrainte des types.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-290">An instance of <see langword="CultureInfo" /> used to govern the coercion of types.</span>
          </span>
          <span data-ttu-id="116a9-291">Si la valeur est null, <see langword="CultureInfo" /> du thread en cours est utilisé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-291">If this is null, the <see langword="CultureInfo" /> for the current thread is used.</span>
          </span>
          <span data-ttu-id="116a9-292">(Notez que cela est nécessaire pour, par exemple, convertir une chaîne représentant 1000 en valeur double, car 1000 est représenté de différentes manières selon la culture.)</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-292">(Note that this is necessary to, for example, convert a string that represents 1000 to a double value, since 1000 is represented differently by different cultures.)</span>
          </span>
        </param>
        <param name="namedParameters">
          <span data-ttu-id="116a9-293">Chaque paramètre dans le tableau <c>namedParameters</c> obtient la valeur de l’élément correspondant dans le tableau <c>args</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-293">Each parameter in the <c>namedParameters</c> array gets the value in the corresponding element in the <c>args</c> array.</span>
          </span>
          <span data-ttu-id="116a9-294">Si la longueur de <c>args</c> est supérieure à la longueur de <c>namedParameters</c>, les valeurs d’argument restantes sont passées dans l’ordre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-294">If the length of <c>args</c> is greater than the length of <c>namedParameters</c>, the remaining argument values are passed in order.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="116a9-295">Appelle le membre spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-295">Invokes the specified member.</span>
          </span>
          <span data-ttu-id="116a9-296">La méthode à appeler doit être accessible et fournir la correspondance la plus spécifique avec la liste d’arguments spécifiée, sous les contraintes des attributs de binder et d’appel spécifiés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-296">The method that is to be invoked must be accessible and provide the most specific match with the specified argument list, under the contraints of the specified binder and invocation attributes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="116a9-297">Retourne la valeur de retour du membre appelé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-297">Returns the return value of the invoked member.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="116a9-298">Vous pouvez récupérer le type à l’aide de <xref:System.Type.GetType%2A?displayProperty=nameWithType> ou <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> et utiliser la réflexion sur le type récupéré.</span><span class="sxs-lookup"><span data-stu-id="116a9-298">You can retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="116a9-299">Cette méthode n’est actuellement pas prise en charge pour les types incomplets.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-299">This method is not currently supported in types that are not complete.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="IsArrayImpl">
      <MemberSignature Language="C#" Value="protected override bool IsArrayImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsArrayImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.EnumBuilder.IsArrayImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsArrayImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool IsArrayImpl();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAssignableFrom">
      <MemberSignature Language="C#" Value="public override bool IsAssignableFrom (System.Reflection.TypeInfo typeInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsAssignableFrom(class System.Reflection.TypeInfo typeInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.EnumBuilder.IsAssignableFrom(System.Reflection.TypeInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsAssignableFrom(System::Reflection::TypeInfo ^ typeInfo);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeInfo" Type="System.Reflection.TypeInfo" />
      </Parameters>
      <Docs>
        <param name="typeInfo">
          <span data-ttu-id="116a9-300">Objet à tester.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-300">The object to test.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="116a9-301">Obtient une valeur qui indique si un objet <see cref="T:System.Reflection.TypeInfo" /> spécifié peut être affecté à cet objet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-301">Gets a value that indicates whether a specified <see cref="T:System.Reflection.TypeInfo" /> object can be assigned to this object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="116a9-302">
            <see langword="true" /> si <paramref name="typeInfo" /> peut être affecté à cet objet ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-302">
              <see langword="true" /> if <paramref name="typeInfo" /> can be assigned to this object; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsByRefImpl">
      <MemberSignature Language="C#" Value="protected override bool IsByRefImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsByRefImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.EnumBuilder.IsByRefImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsByRefImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool IsByRefImpl();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsByRefLike">
      <MemberSignature Language="C#" Value="public override bool IsByRefLike { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsByRefLike" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.EnumBuilder.IsByRefLike" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsByRefLike As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsByRefLike { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCOMObjectImpl">
      <MemberSignature Language="C#" Value="protected override bool IsCOMObjectImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsCOMObjectImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.EnumBuilder.IsCOMObjectImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsCOMObjectImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool IsCOMObjectImpl();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsConstructedGenericType">
      <MemberSignature Language="C#" Value="public override bool IsConstructedGenericType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsConstructedGenericType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.EnumBuilder.IsConstructedGenericType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsConstructedGenericType As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsConstructedGenericType { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="116a9-303">Obtient une valeur qui indique si cet objet représente un type générique construit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-303">Gets a value that indicates whether this object represents a constructed generic type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="116a9-304">
            <see langword="true" /> si cet objet représente un type générique construit ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-304">
              <see langword="true" /> if this object represents a constructed generic type; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDefined">
      <MemberSignature Language="C#" Value="public override bool IsDefined (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsDefined(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.EnumBuilder.IsDefined(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsDefined (attributeType As Type, inherit As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsDefined(Type ^ attributeType, bool inherit);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType">
          <span data-ttu-id="116a9-305">Objet <see langword="Type" /> auquel les attributs personnalisés sont appliqués.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-305">The <see langword="Type" /> object to which the custom attributes are applied.</span>
          </span>
        </param>
        <param name="inherit">
          <span data-ttu-id="116a9-306">Spécifie s’il faut rechercher les attributs dans la chaîne d’héritage de ce membre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-306">Specifies whether to search this member's inheritance chain to find the attributes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="116a9-307">Vérifie si le type d’attribut personnalisé spécifié est défini.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-307">Checks if the specified custom attribute type is defined.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="116a9-308">
            <see langword="true" /> si une ou plusieurs instances de <paramref name="attributeType" /> sont définies sur ce membre ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-308">
              <see langword="true" /> if one or more instance of <paramref name="attributeType" /> is defined on this member; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="116a9-309">Pour vérifier si un attribut personnalisé est défini pour un type fini, vous devez récupérer le type à l’aide de <xref:System.Type.GetType%2A> et appelez <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> sur retourné <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="116a9-309">As a workaround, to check if a custom attribute is defined for a finished type, retrieve the type using <xref:System.Type.GetType%2A> and call <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> on the returned <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="116a9-310">Cette méthode n’est actuellement pas prise en charge pour les types incomplets.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-310">This method is not currently supported in types that are not complete.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="IsEnum">
      <MemberSignature Language="C#" Value="public override bool IsEnum { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnum" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.EnumBuilder.IsEnum" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsEnum As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsEnum { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsGenericParameter">
      <MemberSignature Language="C#" Value="public override bool IsGenericParameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGenericParameter" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.EnumBuilder.IsGenericParameter" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsGenericParameter As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsGenericParameter { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsGenericType">
      <MemberSignature Language="C#" Value="public override bool IsGenericType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGenericType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.EnumBuilder.IsGenericType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsGenericType As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsGenericType { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsGenericTypeDefinition">
      <MemberSignature Language="C#" Value="public override bool IsGenericTypeDefinition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGenericTypeDefinition" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.EnumBuilder.IsGenericTypeDefinition" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsGenericTypeDefinition As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsGenericTypeDefinition { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPointerImpl">
      <MemberSignature Language="C#" Value="protected override bool IsPointerImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsPointerImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.EnumBuilder.IsPointerImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsPointerImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool IsPointerImpl();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPrimitiveImpl">
      <MemberSignature Language="C#" Value="protected override bool IsPrimitiveImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsPrimitiveImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.EnumBuilder.IsPrimitiveImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsPrimitiveImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool IsPrimitiveImpl();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSerializable">
      <MemberSignature Language="C#" Value="public override bool IsSerializable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSerializable" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.EnumBuilder.IsSerializable" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSerializable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSerializable { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSZArray">
      <MemberSignature Language="C#" Value="public override bool IsSZArray { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSZArray" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.EnumBuilder.IsSZArray" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSZArray As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSZArray { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTypeDefinition">
      <MemberSignature Language="C#" Value="public override bool IsTypeDefinition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTypeDefinition" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.EnumBuilder.IsTypeDefinition" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsTypeDefinition As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsTypeDefinition { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValueTypeImpl">
      <MemberSignature Language="C#" Value="protected override bool IsValueTypeImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsValueTypeImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.EnumBuilder.IsValueTypeImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsValueTypeImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool IsValueTypeImpl();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVariableBoundArray">
      <MemberSignature Language="C#" Value="public override bool IsVariableBoundArray { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsVariableBoundArray" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.EnumBuilder.IsVariableBoundArray" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsVariableBoundArray As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsVariableBoundArray { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MakeArrayType">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="116a9-311">Retourne un objet <see cref="T:System.Type" /> représentant un tableau du type actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-311">Returns a <see cref="T:System.Type" /> object representing an array of the current type.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MakeArrayType">
      <MemberSignature Language="C#" Value="public override Type MakeArrayType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type MakeArrayType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.EnumBuilder.MakeArrayType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MakeArrayType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Type ^ MakeArrayType();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="116a9-312">Retourne un objet <see cref="T:System.Type" /> qui représente un tableau unidimensionnel du type actuel, avec une limite inférieure de zéro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-312">Returns a <see cref="T:System.Type" /> object representing a one-dimensional array of the current type, with a lower bound of zero.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="116a9-313">Objet <see cref="T:System.Type" /> qui représente un tableau unidimensionnel du type actuel, avec une limite inférieure de zéro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-313">A <see cref="T:System.Type" /> object representing a one-dimensional array of the current type, with a lower bound of zero.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Type.MakeArrayType" />
      </Docs>
    </Member>
    <Member MemberName="MakeArrayType">
      <MemberSignature Language="C#" Value="public override Type MakeArrayType (int rank);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type MakeArrayType(int32 rank) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.EnumBuilder.MakeArrayType(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MakeArrayType (rank As Integer) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Type ^ MakeArrayType(int rank);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rank" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="rank">
          <span data-ttu-id="116a9-314">Nombre de dimensions pour le tableau.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-314">The number of dimensions for the array.</span>
          </span>
          <span data-ttu-id="116a9-315">Ce nombre doit être inférieur ou égal à 32.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-315">This number must be less than or equal to 32.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="116a9-316">Retourne un objet <see cref="T:System.Type" /> qui représente un tableau du type actuel, avec le nombre spécifié de dimensions.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-316">Returns a <see cref="T:System.Type" /> object representing an array of the current type, with the specified number of dimensions.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="116a9-317">Objet qui représente un tableau du type actuel, avec le nombre spécifié de dimensions.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-317">An object representing an array of the current type, with the specified number of dimensions.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IndexOutOfRangeException">
          <span data-ttu-id="116a9-318">
            <paramref name="rank" /> est inférieur à 1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-318">
              <paramref name="rank" /> is less than 1.</span>
          </span>
        </exception>
        <altmember cref="M:System.Type.MakeArrayType" />
      </Docs>
    </Member>
    <Member MemberName="MakeByRefType">
      <MemberSignature Language="C#" Value="public override Type MakeByRefType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type MakeByRefType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.EnumBuilder.MakeByRefType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MakeByRefType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Type ^ MakeByRefType();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="116a9-319">Retourne un objet <see cref="T:System.Type" /> qui représente le type actif quand il est passé en tant que paramètre **ref** (paramètre **ByRef** en Visual Basic).</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-319">Returns a <see cref="T:System.Type" /> object that represents the current type when passed as a **ref** parameter (**ByRef** parameter in Visual Basic).</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="116a9-320">Objet <see cref="T:System.Type" /> qui représente le type actif quand il est passé en tant que paramètre **ref** (paramètre **ByRef** en Visual Basic).</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-320">A <see cref="T:System.Type" /> object that represents the current type when passed as a **ref** parameter (**ByRef** parameter in Visual Basic).</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Type.MakeByRefType" />
      </Docs>
    </Member>
    <Member MemberName="MakeGenericType">
      <MemberSignature Language="C#" Value="public override Type MakeGenericType (params Type[] typeArguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type MakeGenericType(class System.Type[] typeArguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.EnumBuilder.MakeGenericType(System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MakeGenericType (ParamArray typeArguments As Type()) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Type ^ MakeGenericType(... cli::array &lt;Type ^&gt; ^ typeArguments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeArguments" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="typeArguments">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakePointerType">
      <MemberSignature Language="C#" Value="public override Type MakePointerType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Type MakePointerType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.EnumBuilder.MakePointerType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MakePointerType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Type ^ MakePointerType();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="116a9-321">Retourne un objet <see cref="T:System.Type" /> qui représente un pointeur vers le type actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-321">Returns a <see cref="T:System.Type" /> object that represents a pointer to the current type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="116a9-322">Objet <see cref="T:System.Type" /> qui représente un pointeur vers le type actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-322">A <see cref="T:System.Type" /> object that represents a pointer to the current type.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Type.MakePointerType" />
      </Docs>
    </Member>
    <Member MemberName="Module">
      <MemberSignature Language="C#" Value="public override System.Reflection.Module Module { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Module Module" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.EnumBuilder.Module" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Module As Module" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::Module ^ Module { System::Reflection::Module ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Module</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="116a9-323">Récupère le module dynamique qui contient la définition de cet <see cref="T:System.Reflection.Emit.EnumBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-323">Retrieves the dynamic module that contains this <see cref="T:System.Reflection.Emit.EnumBuilder" /> definition.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="116a9-324">Lecture seule.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-324">Read-only.</span>
          </span>
          <span data-ttu-id="116a9-325">Module dynamique qui contient la définition de cet <see cref="T:System.Reflection.Emit.EnumBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-325">The dynamic module that contains this <see cref="T:System.Reflection.Emit.EnumBuilder" /> definition.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="116a9-326">L’exemple de code suivant illustre l’utilisation de la `Module` propriété pour référencer le module parent d’actuel `EnumBuilder`.</span><span class="sxs-lookup"><span data-stu-id="116a9-326">The following code sample demonstrates the use of the `Module` property to reference the parent module of the current `EnumBuilder`.</span></span>  
  
 [!code-cpp[EnumBuilder_Properties_5#3](~/samples/snippets/cpp/VS_Snippets_CLR/EnumBuilder_Properties_5/CPP/enumbuilder_properties_5.cpp#3)]
 [!code-csharp[EnumBuilder_Properties_5#3](~/samples/snippets/csharp/VS_Snippets_CLR/EnumBuilder_Properties_5/CS/enumbuilder_properties_5.cs#3)]
 [!code-vb[EnumBuilder_Properties_5#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/EnumBuilder_Properties_5/VB/enumbuilder_properties_5.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public override string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.EnumBuilder.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Name { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="116a9-327">Retourne le nom de cette énumération.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-327">Returns the name of this enum.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="116a9-328">Lecture seule.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-328">Read-only.</span>
          </span>
          <span data-ttu-id="116a9-329">Nom de cette énumération.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-329">The name of this enum.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="116a9-330">L’exemple de code suivant illustre l’utilisation de la `Name` propriété pour référencer le nom de l’actuel `EnumBuilder`.</span><span class="sxs-lookup"><span data-stu-id="116a9-330">The following code sample demonstrates the use of the `Name` property to reference the name of the current `EnumBuilder`.</span></span>  
  
 [!code-cpp[EnumBuilder_Properties_5#4](~/samples/snippets/cpp/VS_Snippets_CLR/EnumBuilder_Properties_5/CPP/enumbuilder_properties_5.cpp#4)]
 [!code-csharp[EnumBuilder_Properties_5#4](~/samples/snippets/csharp/VS_Snippets_CLR/EnumBuilder_Properties_5/CS/enumbuilder_properties_5.cs#4)]
 [!code-vb[EnumBuilder_Properties_5#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/EnumBuilder_Properties_5/VB/enumbuilder_properties_5.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public override string Namespace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.EnumBuilder.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Namespace { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="116a9-331">Retourne l’espace de noms de cet enum.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-331">Returns the namespace of this enum.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="116a9-332">Lecture seule.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-332">Read-only.</span>
          </span>
          <span data-ttu-id="116a9-333">Espace de noms de cet enum.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-333">The namespace of this enum.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="116a9-334">L’exemple de code suivant illustre l’utilisation de la `Namespace` propriété à référencer l’espace de noms associé du courant `EnumBuilder`.</span><span class="sxs-lookup"><span data-stu-id="116a9-334">The following code sample demonstrates the use of the `Namespace` property to reference the associated namespace of the current `EnumBuilder`.</span></span>  
  
 [!code-cpp[EnumBuilder_Properties_5#5](~/samples/snippets/cpp/VS_Snippets_CLR/EnumBuilder_Properties_5/CPP/enumbuilder_properties_5.cpp#5)]
 [!code-csharp[EnumBuilder_Properties_5#5](~/samples/snippets/csharp/VS_Snippets_CLR/EnumBuilder_Properties_5/CS/enumbuilder_properties_5.cs#5)]
 [!code-vb[EnumBuilder_Properties_5#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/EnumBuilder_Properties_5/VB/enumbuilder_properties_5.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReflectedType">
      <MemberSignature Language="C#" Value="public override Type ReflectedType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ReflectedType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.EnumBuilder.ReflectedType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReflectedType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ ReflectedType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="116a9-335">Retourne le type utilisé pour obtenir <see cref="T:System.Reflection.Emit.EnumBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-335">Returns the type that was used to obtain this <see cref="T:System.Reflection.Emit.EnumBuilder" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="116a9-336">Lecture seule.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-336">Read-only.</span>
          </span>
          <span data-ttu-id="116a9-337">Type utilisé pour obtenir <see cref="T:System.Reflection.Emit.EnumBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-337">The type that was used to obtain this <see cref="T:System.Reflection.Emit.EnumBuilder" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetCustomAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="116a9-338">Retourne les attributs de ce constructeur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-338">Sets custom attributes for this constructor.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetCustomAttribute">
      <MemberSignature Language="C#" Value="public void SetCustomAttribute (System.Reflection.Emit.CustomAttributeBuilder customBuilder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCustomAttribute(class System.Reflection.Emit.CustomAttributeBuilder customBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.EnumBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetCustomAttribute (customBuilder As CustomAttributeBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetCustomAttribute(System::Reflection::Emit::CustomAttributeBuilder ^ customBuilder);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="customBuilder" Type="System.Reflection.Emit.CustomAttributeBuilder" />
      </Parameters>
      <Docs>
        <param name="customBuilder">
          <span data-ttu-id="116a9-339">Instance d’une classe d’assistance pour définir l’attribut personnalisé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-339">An instance of a helper class to define the custom attribute.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="116a9-340">Définit un attribut personnalisé à l’aide d’un générateur d’attributs personnalisés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-340">Sets a custom attribute using a custom attribute builder.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="116a9-341">L’exemple de code suivant illustre l’utilisation de `SetCustomAttribute` dans le contexte de <xref:System.Reflection.Emit.EnumBuilder>, en passant un <xref:System.Reflection.Emit.CustomAttributeBuilder>.</span><span class="sxs-lookup"><span data-stu-id="116a9-341">The following code sample illustrates the use of `SetCustomAttribute` in the context of <xref:System.Reflection.Emit.EnumBuilder>, passing a <xref:System.Reflection.Emit.CustomAttributeBuilder>.</span></span>  
  
 [!code-cpp[EnumBuilder_SetCustomAttribute2#2](~/samples/snippets/cpp/VS_Snippets_CLR/EnumBuilder_SetCustomAttribute2/CPP/enumbuilder_setcustomattribute2.cpp#2)]
 [!code-csharp[EnumBuilder_SetCustomAttribute2#2](~/samples/snippets/csharp/VS_Snippets_CLR/EnumBuilder_SetCustomAttribute2/CS/enumbuilder_setcustomattribute2.cs#2)]
 [!code-vb[EnumBuilder_SetCustomAttribute2#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/EnumBuilder_SetCustomAttribute2/VB/enumbuilder_setcustomattribute2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="116a9-342">
            <paramref name="con" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-342">
              <paramref name="con" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SetCustomAttribute">
      <MemberSignature Language="C#" Value="public void SetCustomAttribute (System.Reflection.ConstructorInfo con, byte[] binaryAttribute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCustomAttribute(class System.Reflection.ConstructorInfo con, unsigned int8[] binaryAttribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.EnumBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetCustomAttribute (con As ConstructorInfo, binaryAttribute As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetCustomAttribute(System::Reflection::ConstructorInfo ^ con, cli::array &lt;System::Byte&gt; ^ binaryAttribute);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="con" Type="System.Reflection.ConstructorInfo" />
        <Parameter Name="binaryAttribute" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="con">
          <span data-ttu-id="116a9-343">Le constructeur de l’attribut personnalisé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-343">The constructor for the custom attribute.</span>
          </span>
        </param>
        <param name="binaryAttribute">
          <span data-ttu-id="116a9-344">Objet blob d’octets représentant les attributs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-344">A byte blob representing the attributes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="116a9-345">Définit un attribut personnalisé à l’aide d’un objet blob d’attribut personnalisé spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-345">Sets a custom attribute using a specified custom attribute blob.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="116a9-346">Consultez la spécification de métadonnées dans la documentation ECMA Partition II pour plus d’informations sur la mise en forme `binaryAttribute`.</span><span class="sxs-lookup"><span data-stu-id="116a9-346">See the metadata specification in the ECMA Partition II documentation for details on how to format `binaryAttribute`.</span></span> <span data-ttu-id="116a9-347">La documentation est disponible en ligne. Consultez [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) sur MSDN et [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) sur le site web d’Ecma International.</span><span class="sxs-lookup"><span data-stu-id="116a9-347">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="116a9-348">L’exemple de code suivant illustre l’utilisation de `SetCustomAttribute` dans le contexte de <xref:System.Reflection.Emit.EnumBuilder>, en passant un objet blob d’octets.</span><span class="sxs-lookup"><span data-stu-id="116a9-348">The following code sample illustrates the use of `SetCustomAttribute` in the context of <xref:System.Reflection.Emit.EnumBuilder>, passing a byte blob.</span></span>  
  
 [!code-cpp[EnumBuilder_SetCustomAttribute2#2](~/samples/snippets/cpp/VS_Snippets_CLR/EnumBuilder_SetCustomAttribute2/CPP/enumbuilder_setcustomattribute2.cpp#2)]
 [!code-csharp[EnumBuilder_SetCustomAttribute2#2](~/samples/snippets/csharp/VS_Snippets_CLR/EnumBuilder_SetCustomAttribute2/CS/enumbuilder_setcustomattribute2.cs#2)]
 [!code-vb[EnumBuilder_SetCustomAttribute2#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/EnumBuilder_SetCustomAttribute2/VB/enumbuilder_setcustomattribute2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="116a9-349">
            <paramref name="con" /> ou <paramref name="binaryAttribute" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-349">
              <paramref name="con" /> or <paramref name="binaryAttribute" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._EnumBuilder.GetIDsOfNames">
      <MemberSignature Language="C#" Value="void _EnumBuilder.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._EnumBuilder.GetIDsOfNames([in]valuetype System.Guid&amp; riid, native int rgszNames, unsigned int32 cNames, unsigned int32 lcid, native int rgDispId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetIDsOfNames (ByRef riid As Guid, rgszNames As IntPtr, cNames As UInteger, lcid As UInteger, rgDispId As IntPtr) Implements _EnumBuilder.GetIDsOfNames" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._EnumBuilder.GetIDsOfNames(Guid % riid, IntPtr rgszNames, System::UInt32 cNames, System::UInt32 lcid, IntPtr rgDispId) = System::Runtime::InteropServices::_EnumBuilder::GetIDsOfNames;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EnumBuilder.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="riid" Type="System.Guid&amp;" RefType="ref" />
        <Parameter Name="rgszNames" Type="System.IntPtr" />
        <Parameter Name="cNames" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="rgDispId" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="riid">
          <span data-ttu-id="116a9-350">Réservé à un usage ultérieur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-350">Reserved for future use.</span>
          </span>
          <span data-ttu-id="116a9-351">Doit être IID_NULL.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-351">Must be IID_NULL.</span>
          </span>
        </param>
        <param name="rgszNames">
          <span data-ttu-id="116a9-352">Tableau passé des noms à mapper.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-352">Passed-in array of names to be mapped.</span>
          </span>
        </param>
        <param name="cNames">
          <span data-ttu-id="116a9-353">Compte des noms à mapper.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-353">Count of the names to be mapped.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="116a9-354">Contexte des paramètres régionaux dans lequel interpréter les noms.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-354">The locale context in which to interpret the names.</span>
          </span>
        </param>
        <param name="rgDispId">
          <span data-ttu-id="116a9-355">Tableau alloué par l'appelant et recevant les ID qui correspondent aux noms.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-355">Caller-allocated array which receives the IDs corresponding to the names.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="116a9-356">Mappe un jeu de noms avec un jeu correspondant d'identificateurs de dispatch.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-356">Maps a set of names to a corresponding set of dispatch identifiers.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="116a9-357">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="116a9-357">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="116a9-358">Pour plus d’informations sur `IDispatch::GetIDsOfNames`, consultez MSDN Library.</span><span class="sxs-lookup"><span data-stu-id="116a9-358">For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="116a9-359">La méthode est appelée à liaison tardive à l’aide de l’interface <c>IDispatch</c> COM.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-359">The method is called late-bound using the COM <c>IDispatch</c> interface.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._EnumBuilder.GetTypeInfo">
      <MemberSignature Language="C#" Value="void _EnumBuilder.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._EnumBuilder.GetTypeInfo(unsigned int32 iTInfo, unsigned int32 lcid, native int ppTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfo (iTInfo As UInteger, lcid As UInteger, ppTInfo As IntPtr) Implements _EnumBuilder.GetTypeInfo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._EnumBuilder.GetTypeInfo(System::UInt32 iTInfo, System::UInt32 lcid, IntPtr ppTInfo) = System::Runtime::InteropServices::_EnumBuilder::GetTypeInfo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EnumBuilder.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iTInfo" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="ppTInfo" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="iTInfo">
          <span data-ttu-id="116a9-360">Informations de type à retourner.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-360">The type information to return.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="116a9-361">Identificateur des paramètres régionaux pour les informations de type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-361">The locale identifier for the type information.</span>
          </span>
        </param>
        <param name="ppTInfo">
          <span data-ttu-id="116a9-362">Reçoit un pointeur vers l'objet d'informations de type demandé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-362">Receives a pointer to the requested type information object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="116a9-363">Récupère les informations de type pour un objet, qui peuvent être utilisées ensuite pour obtenir les informations de type d'une interface.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-363">Retrieves the type information for an object, which can then be used to get the type information for an interface.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="116a9-364">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="116a9-364">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="116a9-365">Pour plus d’informations sur `IDispatch::GetTypeInfo`, consultez MSDN Library.</span><span class="sxs-lookup"><span data-stu-id="116a9-365">For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="116a9-366">La méthode est appelée à liaison tardive à l’aide de l’interface <c>IDispatch</c> COM.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-366">The method is called late-bound using the COM <c>IDispatch</c> interface.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._EnumBuilder.GetTypeInfoCount">
      <MemberSignature Language="C#" Value="void _EnumBuilder.GetTypeInfoCount (out uint pcTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._EnumBuilder.GetTypeInfoCount([out] unsigned int32&amp; pcTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#GetTypeInfoCount(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfoCount (ByRef pcTInfo As UInteger) Implements _EnumBuilder.GetTypeInfoCount" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._EnumBuilder.GetTypeInfoCount([Runtime::InteropServices::Out] System::UInt32 % pcTInfo) = System::Runtime::InteropServices::_EnumBuilder::GetTypeInfoCount;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EnumBuilder.GetTypeInfoCount(System.UInt32@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcTInfo" Type="System.UInt32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pcTInfo">
          <span data-ttu-id="116a9-367">Pointe vers un emplacement qui reçoit le nombre d'interfaces d'informations de type fourni par l'objet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-367">Points to a location that receives the number of type information interfaces provided by the object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="116a9-368">Récupère le nombre d'interfaces d'informations de type fourni par un objet (0 ou 1).</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-368">Retrieves the number of type information interfaces that an object provides (either 0 or 1).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="116a9-369">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="116a9-369">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="116a9-370">Pour plus d’informations sur `IDispatch::GetTypeInfoCount`, consultez MSDN Library.</span><span class="sxs-lookup"><span data-stu-id="116a9-370">For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="116a9-371">La méthode est appelée à liaison tardive à l’aide de l’interface <c>IDispatch</c> COM.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-371">The method is called late-bound using the COM <c>IDispatch</c> interface.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._EnumBuilder.Invoke">
      <MemberSignature Language="C#" Value="void _EnumBuilder.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._EnumBuilder.Invoke(unsigned int32 dispIdMember, [in]valuetype System.Guid&amp; riid, unsigned int32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub Invoke (dispIdMember As UInteger, ByRef riid As Guid, lcid As UInteger, wFlags As Short, pDispParams As IntPtr, pVarResult As IntPtr, pExcepInfo As IntPtr, puArgErr As IntPtr) Implements _EnumBuilder.Invoke" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._EnumBuilder.Invoke(System::UInt32 dispIdMember, Guid % riid, System::UInt32 lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr) = System::Runtime::InteropServices::_EnumBuilder::Invoke;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EnumBuilder.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dispIdMember" Type="System.UInt32" />
        <Parameter Name="riid" Type="System.Guid&amp;" RefType="ref" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="wFlags" Type="System.Int16" />
        <Parameter Name="pDispParams" Type="System.IntPtr" />
        <Parameter Name="pVarResult" Type="System.IntPtr" />
        <Parameter Name="pExcepInfo" Type="System.IntPtr" />
        <Parameter Name="puArgErr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="dispIdMember">
          <span data-ttu-id="116a9-372">Identifie le membre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-372">Identifies the member.</span>
          </span>
        </param>
        <param name="riid">
          <span data-ttu-id="116a9-373">Réservé à un usage ultérieur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-373">Reserved for future use.</span>
          </span>
          <span data-ttu-id="116a9-374">Doit être IID_NULL.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-374">Must be IID_NULL.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="116a9-375">Contexte des paramètres régionaux dans lequel interpréter les arguments.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-375">The locale context in which to interpret arguments.</span>
          </span>
        </param>
        <param name="wFlags">
          <span data-ttu-id="116a9-376">Indicateurs décrivant le contexte de l'appel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-376">Flags describing the context of the call.</span>
          </span>
        </param>
        <param name="pDispParams">
          <span data-ttu-id="116a9-377">Pointeur vers une structure qui contient un tableau d’arguments, un tableau d’arguments DISPID pour les arguments nommés et le nombre d’éléments de chaque tableau.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-377">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</span>
          </span>
        </param>
        <param name="pVarResult">
          <span data-ttu-id="116a9-378">Pointeur vers l'emplacement où le résultat doit être stocké.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-378">Pointer to the location where the result is to be stored.</span>
          </span>
        </param>
        <param name="pExcepInfo">
          <span data-ttu-id="116a9-379">Pointeur vers une structure qui contient les informations sur les exceptions.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-379">Pointer to a structure that contains exception information.</span>
          </span>
        </param>
        <param name="puArgErr">
          <span data-ttu-id="116a9-380">Index du premier argument comportant une erreur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-380">The index of the first argument that has an error.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="116a9-381">Fournit l'accès aux propriétés et aux méthodes exposées par un objet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-381">Provides access to properties and methods exposed by an object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="116a9-382">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</span><span class="sxs-lookup"><span data-stu-id="116a9-382">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="116a9-383">Pour plus d’informations sur `IDispatch::Invoke`, consultez MSDN Library.</span><span class="sxs-lookup"><span data-stu-id="116a9-383">For more information about `IDispatch::Invoke`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="116a9-384">La méthode est appelée à liaison tardive à l’aide de l’interface <c>IDispatch</c> COM.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-384">The method is called late-bound using the COM <c>IDispatch</c> interface.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="TypeHandle">
      <MemberSignature Language="C#" Value="public override RuntimeTypeHandle TypeHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.RuntimeTypeHandle TypeHandle" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.EnumBuilder.TypeHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property TypeHandle As RuntimeTypeHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property RuntimeTypeHandle TypeHandle { RuntimeTypeHandle get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.RuntimeTypeHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="116a9-385">Récupère le handle interne de cette énumération.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-385">Retrieves the internal handle for this enum.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="116a9-386">Lecture seule.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-386">Read-only.</span>
          </span>
          <span data-ttu-id="116a9-387">Handle interne de cette énumération.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-387">The internal handle for this enum.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="116a9-388">Vous pouvez récupérer le type à l’aide de <xref:System.Type.GetType%2A?displayProperty=nameWithType> ou <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> et utiliser la réflexion sur le type récupéré.</span><span class="sxs-lookup"><span data-stu-id="116a9-388">You can retrieve the type using <xref:System.Type.GetType%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> and use reflection on the retrieved type.</span></span>  
  
 <span data-ttu-id="116a9-389">Utilisez ce handle pour accéder au handle des métadonnées sous-jacentes.</span><span class="sxs-lookup"><span data-stu-id="116a9-389">Use this handle to access the underlying metadata handle.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="116a9-390">Cette propriété n'est pas prise en charge actuellement.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-390">This property is not currently supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="TypeToken">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.TypeToken TypeToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.Emit.TypeToken TypeToken" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.EnumBuilder.TypeToken" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TypeToken As TypeToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::Emit::TypeToken TypeToken { System::Reflection::Emit::TypeToken get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.TypeToken</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="116a9-391">Retourne le jeton du type de métadonnées internes de cet enum.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-391">Returns the internal metadata type token of this enum.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="116a9-392">Lecture seule.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-392">Read-only.</span>
          </span>
          <span data-ttu-id="116a9-393">Jeton du type de cet enum.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-393">The type token of this enum.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnderlyingField">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.FieldBuilder UnderlyingField { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Emit.FieldBuilder UnderlyingField" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.EnumBuilder.UnderlyingField" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UnderlyingField As FieldBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::Emit::FieldBuilder ^ UnderlyingField { System::Reflection::Emit::FieldBuilder ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.FieldBuilder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="116a9-394">Retourne le champ sous-jacent de cet enum.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-394">Returns the underlying field for this enum.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="116a9-395">Lecture seule.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-395">Read-only.</span>
          </span>
          <span data-ttu-id="116a9-396">Champ sous-jacent de cet enum.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-396">The underlying field for this enum.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnderlyingSystemType">
      <MemberSignature Language="C#" Value="public override Type UnderlyingSystemType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type UnderlyingSystemType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.EnumBuilder.UnderlyingSystemType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property UnderlyingSystemType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ UnderlyingSystemType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="116a9-397">Retourne le type de système sous-jacent pour cette enum.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-397">Returns the underlying system type for this enum.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="116a9-398">Lecture seule.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-398">Read-only.</span>
          </span>
          <span data-ttu-id="116a9-399">Retourne le type de système sous-jacent.</span>
          <span class="sxs-lookup">
            <span data-stu-id="116a9-399">Returns the underlying system type.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>