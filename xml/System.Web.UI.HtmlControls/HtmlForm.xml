<Type Name="HtmlForm" FullName="System.Web.UI.HtmlControls.HtmlForm">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="658c5386467d15a5ff84ded2d494eba1a3dbea52" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48588345" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class HtmlForm : System.Web.UI.HtmlControls.HtmlContainerControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit HtmlForm extends System.Web.UI.HtmlControls.HtmlContainerControl" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.HtmlControls.HtmlForm" />
  <TypeSignature Language="VB.NET" Value="Public Class HtmlForm&#xA;Inherits HtmlContainerControl" />
  <TypeSignature Language="C++ CLI" Value="public ref class HtmlForm : System::Web::UI::HtmlControls::HtmlContainerControl" />
  <TypeSignature Language="F#" Value="type HtmlForm = class&#xA;    inherit HtmlContainerControl" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.HtmlControls.HtmlContainerControl</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fournit un accès programmatique à l’élément <see langword="&lt;form&gt;" /> HTML sur le serveur.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.HtmlControls.HtmlForm> contrôle est un conteneur pour les contrôles serveur sur une page Web Forms. Tous les contrôles serveur qui publient sur le serveur doivent être placés entre balises d’ouverture et fermeture d’un <xref:System.Web.UI.HtmlControls.HtmlForm> contrôle.  
  
> [!NOTE]
>  ASP.NET permet à un seul <xref:System.Web.UI.HtmlControls.HtmlForm> contrôle d’être actifs sur une page Web Forms. S’il existe plusieurs active <xref:System.Web.UI.HtmlControls.HtmlForm> contrôle sur une page Web Forms, le common language runtime lève un <xref:System.Web.HttpException?displayProperty=nameWithType> exception lorsque vous demandez la page. Vous pouvez, toutefois, utiliser un <xref:System.Web.UI.WebControls.MultiView> contrôler l’utilisation chaque <xref:System.Web.UI.WebControls.View> objet contient un <xref:System.Web.UI.HtmlControls.HtmlForm> contrôler, car seul <xref:System.Web.UI.WebControls.View> est actif à un moment donné.  
  
 Vous pouvez contrôler le comportement de la <xref:System.Web.UI.HtmlControls.HtmlForm> contrôle en définissant ses propriétés. Pour spécifier le type de codage pour les données du formulaire, définissez la <xref:System.Web.UI.HtmlControls.HtmlForm.Enctype%2A> propriété. La méthode (`GET` ou `POST`) qu’un navigateur utilise pour valider les données du formulaire sur le serveur de traitement est spécifié en définissant le <xref:System.Web.UI.HtmlControls.HtmlForm.Method%2A> propriété.  
  
> [!CAUTION]
>  Par défaut, la propriété <xref:System.Web.UI.HtmlControls.HtmlForm.Method%2A> a la valeur `POST`. Vous pouvez modifier la valeur de cette propriété à `GET`, mais cela peut rompre l’état intégré et publier les services fournis par l’infrastructure de page ASP.NET.  
  
 Vous pouvez configurer les contrôles qui implémentent le <xref:System.Web.UI.WebControls.IButtonControl> interface pour publier sur une page cible différent. Cette opération est dénommée inter-pages. Pour plus d’informations, consultez [plusieurs pages de validation dans ASP.NET Web Forms](http://msdn.microsoft.com/library/fedf234e-b7c4-4644-a9e8-c1c0870b043b).  
  
 Pour obtenir la liste des valeurs initiales des propriétés d’une instance de <xref:System.Web.UI.HtmlControls.HtmlForm>, consultez le <xref:System.Web.UI.HtmlControls.HtmlForm.%23ctor%2A> constructeur.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Web.UI.HtmlControls.HtmlForm> classe pour créer un formulaire simple.  
  
 [!code-aspx-csharp[HtmlForm#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlForm/CS/htmlformcs.aspx#1)]
 [!code-aspx-vb[HtmlForm#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlForm/VB/htmlformvb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.HtmlControls.HtmlContainerControl" />
    <altmember cref="P:System.Web.UI.HtmlControls.HtmlForm.Enctype" />
    <altmember cref="P:System.Web.UI.HtmlControls.HtmlForm.Method" />
    <related type="Article" href="http://msdn.microsoft.com/library/fedf234e-b7c4-4644-a9e8-c1c0870b043b">Publication sur plusieurs pages dans une Page Web ASP.NET</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HtmlForm ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlControls.HtmlForm.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HtmlForm();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.UI.HtmlControls.HtmlForm" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez ce constructeur pour créer et initialiser une nouvelle instance de la <xref:System.Web.UI.HtmlControls.HtmlForm> classe.  
  
 Le tableau suivant affiche la valeur de propriété initiales d’une instance de <xref:System.Web.UI.HtmlControls.HtmlForm>.  
  
|Property|Valeur initiale|  
|--------------|-------------------|  
|<xref:System.Web.UI.HtmlControls.HtmlControl.TagName%2A>|La chaîne littérale « formulaire ».|  
  
   
  
## Examples  
 L’exemple de code suivant montre comment créer une nouvelle instance de la <xref:System.Web.UI.HtmlControls.HtmlForm> contrôler et placez-la sur la page Web.  
  
 [!code-aspx-csharp[HtmlFormCtor#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlFormCtor/CS/htmlformctorcs.aspx#1)]
 [!code-aspx-vb[HtmlFormCtor#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlFormCtor/VB/htmlformctorvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlControls.HtmlControl.TagName" />
      </Docs>
    </Member>
    <Member MemberName="Action">
      <MemberSignature Language="C#" Value="public string Action { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Action" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlControls.HtmlForm.Action" />
      <MemberSignature Language="VB.NET" Value="Public Property Action As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Action { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Action : string with get, set" Usage="System.Web.UI.HtmlControls.HtmlForm.Action" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit l’attribut d’action du formulaire HTML.</summary>
        <value>Attribut d’action du formulaire HTML. La valeur par défaut est <see cref="F:System.String.Empty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous utilisez le <xref:System.Web.UI.HtmlControls.HtmlForm.Action%2A> propriété lorsque vous réécrivez l’URL de la demande d’origine mais que vous souhaitez conserver l’URL d’origine pour l’attribut action du formulaire HTML. Définir le <xref:System.Web.UI.HtmlControls.HtmlForm.Action%2A> propriété à la valeur de l’URL que vous souhaitez conserver.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.HttpContext.RewritePath(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ClientID">
      <MemberSignature Language="C#" Value="public override string ClientID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ClientID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlControls.HtmlForm.ClientID" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ClientID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ClientID { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ClientID : string" Usage="System.Web.UI.HtmlControls.HtmlForm.ClientID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient l’identificateur de contrôle généré par [!INCLUDE[vstecasp](~/includes/vstecasp-md.md)] pour le contrôle <see cref="T:System.Web.UI.HtmlControls.HtmlForm" /></summary>
        <value>L’identificateur de contrôle généré par [!INCLUDE[vstecasp](~/includes/vstecasp-md.md)] pour la <see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> contrôle.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour empêcher les conflits lorsque plusieurs instances d’un contrôle sont restituées, [!INCLUDE[vstecasp](~/includes/vstecasp-md.md)] génère automatiquement une valeur unique <xref:System.Web.UI.HtmlControls.HtmlForm.ClientID%2A> valeur pour chaque contrôle sur une page. Pour plus d'informations, consultez la propriété <xref:System.Web.UI.Control.ClientID%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/45a8c3ef-5ac7-48f1-862a-0cd5073742e7">Identification du contrôle d’ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="CreateControlCollection">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.ControlCollection CreateControlCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.ControlCollection CreateControlCollection() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlControls.HtmlForm.CreateControlCollection" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateControlCollection () As ControlCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Web::UI::ControlCollection ^ CreateControlCollection();" />
      <MemberSignature Language="F#" Value="override this.CreateControlCollection : unit -&gt; System.Web.UI.ControlCollection" Usage="htmlForm.CreateControlCollection " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.ControlCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crée une nouvelle collection <see cref="T:System.Web.UI.ControlCollection" /> pour le contrôle <see cref="T:System.Web.UI.HtmlControls.HtmlForm" />.</summary>
        <returns>
          <see cref="T:System.Web.UI.ControlCollection" /> qui contient les contrôles serveur enfants du contrôle <see cref="T:System.Web.UI.HtmlControls.HtmlForm" />.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Web.UI.ControlCollection" />
      </Docs>
    </Member>
    <Member MemberName="DefaultButton">
      <MemberSignature Language="C#" Value="public string DefaultButton { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DefaultButton" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlControls.HtmlForm.DefaultButton" />
      <MemberSignature Language="VB.NET" Value="Public Property DefaultButton As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DefaultButton { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultButton : string with get, set" Usage="System.Web.UI.HtmlControls.HtmlForm.DefaultButton" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le contrôle enfant du contrôle <see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> qui provoque la publication lorsque la touche ENTRÉE est enfoncée.</summary>
        <value>
          <see cref="P:System.Web.UI.Control.ID" /> du contrôle bouton à afficher comme bouton par défaut lorsque <see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> est chargé. La valeur par défaut est une chaîne vide ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.HtmlControls.HtmlForm.DefaultButton%2A> propriété vous permet de spécifier que les utilisateurs peuvent provoquer une publication en appuyant sur entrée dans un contrôle d’entrée sous la forme (par exemple, une zone de texte). Vous pouvez spécifier comme un bouton par défaut de n’importe quel contrôle qui dérive de la <xref:System.Web.UI.WebControls.IButtonControl> interface sauf le <xref:System.Web.UI.WebControls.LinkButton> contrôle. Si le contrôle qui est référencé par le <xref:System.Web.UI.HtmlControls.HtmlForm.DefaultButton%2A> propriété ne dérive pas de <xref:System.Web.UI.WebControls.IButtonControl>, un <xref:System.InvalidOperationException> exception est levée.  
  
 Si vous utilisez des pages maîtres et que vous définissez le <xref:System.Web.UI.HtmlControls.HtmlForm.DefaultButton%2A> propriété à partir d’une page de contenu, utilisez le <xref:System.Web.UI.Control.UniqueID%2A> propriété de la <xref:System.Web.UI.WebControls.IButtonControl> bouton. Pour plus d’informations sur les pages maîtres, consultez [Pages maître ASP.NET](http://msdn.microsoft.com/library/4e53eedf-8304-4e7a-aed1-691a2623b28b).  
  
 Le <xref:System.Web.UI.HtmlControls.HtmlForm.DefaultButton%2A> propriété ne peut pas provoquer de publication dans les scénarios suivants :  
  
-   En appuyant sur ENTRÉE lorsque le focus est en dehors des contrôles d’entrée dans le formulaire. L’action de publication (postback) par défaut n’est pas garantie pour être déclenché.  
  
-   En appuyant sur ENTRÉE lorsque le focus est dans une zone de texte multiligne. Dans une zone de texte multiligne, le comportement attendu est qu’en appuyant sur ENTRÉE crée une nouvelle ligne dans la zone de texte. Dans certains navigateurs, en appuyant sur entrée à l’intérieur d’un déclencheurs de zone de texte multiligne une publication (postback). Dans ce cas, si vous souhaitez entrée pour créer une nouvelle ligne au lieu de cela, vous pouvez attacher une fonction JavaScript au contrôle d’entrée. Le script doit capturer la touche entrée et arrêter la publication (postback). Par exemple, vous pouvez utiliser la <xref:System.Web.UI.WebControls.WebControl.Attributes%2A> collection de propriétés pour ajouter le script client pour le `onKeyPress` événement.  
  
-   En spécifiant un <xref:System.Web.UI.WebControls.LinkButton> contrôle comme un bouton par défaut. Uniquement <xref:System.Web.UI.WebControls.Button> et <xref:System.Web.UI.WebControls.ImageButton> contrôles sont pris en charge.  
  
-   Modification de la <xref:System.Web.UI.HtmlControls.HtmlForm.DefaultButton%2A> propriété par programmation pendant une publication (postback) asynchrone. Publications asynchrones peuvent être activées sur une page en ajoutant un ou plusieurs <xref:System.Web.UI.UpdatePanel> contrôles à la page. Pour plus d’informations, consultez [vue d’ensemble du contrôle UpdatePanel](http://msdn.microsoft.com/library/29a2265d-9674-4c19-b70e-e5560ee9689a) et [vue d’ensemble du rendu de Page partielle](http://msdn.microsoft.com/library/5c12736d-d9e9-464a-9388-3fe0f9f49e49).  
  
   
  
## Examples  
 L’exemple suivant montre comment définir le <xref:System.Web.UI.HtmlControls.HtmlForm.DefaultButton%2A> propriété pour définir le contrôle par défaut qui provoque une publication (postback).  
  
 [!code-aspx-csharp[HtmlForm.DefaultButton#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlForm.DefaultButton/CS/htmlform.defaultbuttoncs.aspx#1)]
 [!code-aspx-vb[HtmlForm.DefaultButton#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlForm.DefaultButton/VB/htmlform.defaultbuttonvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Le contrôle référencé comme bouton par défaut n'est pas du type <see cref="T:System.Web.UI.WebControls.IButtonControl" />.</exception>
        <altmember cref="P:System.Web.UI.HtmlControls.HtmlForm.DefaultFocus" />
        <altmember cref="P:System.Web.UI.Control.ID" />
        <altmember cref="M:System.Web.UI.HtmlControls.HtmlForm.RenderAttributes(System.Web.UI.HtmlTextWriter)" />
        <altmember cref="T:System.Web.UI.WebControls.IButtonControl" />
        <related type="Article" href="http://msdn.microsoft.com/library/4e53eedf-8304-4e7a-aed1-691a2623b28b">Vue d’ensemble des Pages maître ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="DefaultFocus">
      <MemberSignature Language="C#" Value="public string DefaultFocus { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DefaultFocus" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlControls.HtmlForm.DefaultFocus" />
      <MemberSignature Language="VB.NET" Value="Public Property DefaultFocus As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DefaultFocus { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultFocus : string with get, set" Usage="System.Web.UI.HtmlControls.HtmlForm.DefaultFocus" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le contrôle sur le formulaire à afficher comme contrôle avec focus d'entrée lorsque le contrôle <see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> est chargé.</summary>
        <value>
          <see cref="P:System.Web.UI.Control.ClientID" /> du contrôle sur le formulaire à afficher comme contrôle avec focus d'entrée lorsque <see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> est chargé. La valeur par défaut est une chaîne vide ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Web.UI.HtmlControls.HtmlForm.DefaultFocus%2A> propriété pour accéder au contrôle sur le formulaire à afficher comme contrôle avec entrée focus lorsque la <xref:System.Web.UI.HtmlControls.HtmlForm> contrôle est chargé. Les contrôles qui peuvent être sélectionnés sont affichés avec une indication visuelle indiquant qu’ils ont le focus. Par exemple, un <xref:System.Web.UI.WebControls.TextBox> contrôle ayant le focus est affiché avec le point d’insertion positionné à l’intérieur.  
  
 Le contrôle avec focus peut également être défini à l’aide de la <xref:System.Web.UI.Control.Focus%2A> ou <xref:System.Web.UI.Page.SetFocus%2A> méthodes. Ces méthodes ont priorité sur les <xref:System.Web.UI.HtmlControls.HtmlForm.DefaultFocus%2A> propriété. Si une de ces méthodes sont appelée pour définir le contrôle avec focus, la valeur de la <xref:System.Web.UI.HtmlControls.HtmlForm.DefaultFocus%2A> propriété est ignorée.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment définir le <xref:System.Web.UI.HtmlControls.HtmlForm.DefaultFocus%2A> propriété à afficher un contrôle spécifié sur un formulaire comme contrôle avec focus d’entrée lorsque le formulaire est chargé. Lorsque `Form1` affiche, remarquez que le point d’insertion est positionné dans `TextBox1`, qui indique que `TextBox1` est le contrôle avec focus.  
  
 [!code-aspx-csharp[HtmlForm.DefaultButton#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlForm.DefaultButton/CS/htmlform.defaultbuttoncs.aspx#1)]
 [!code-aspx-vb[HtmlForm.DefaultButton#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlForm.DefaultButton/VB/htmlform.defaultbuttonvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlControls.HtmlForm.DefaultButton" />
        <altmember cref="P:System.Web.UI.Control.ID" />
        <altmember cref="M:System.Web.UI.Control.Focus" />
        <altmember cref="M:System.Web.UI.Page.SetFocus(System.Web.UI.Control)" />
      </Docs>
    </Member>
    <Member MemberName="Enctype">
      <MemberSignature Language="C#" Value="public string Enctype { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Enctype" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlControls.HtmlForm.Enctype" />
      <MemberSignature Language="VB.NET" Value="Public Property Enctype As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Enctype { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Enctype : string with get, set" Usage="System.Web.UI.HtmlControls.HtmlForm.Enctype" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le type d'encodage utilisé par un navigateur lors de la publication des données du formulaire sur le serveur.</summary>
        <value>Chaîne qui contient le type d'encodage. La valeur par défaut est une chaîne vide (""), ce qui indique que le type de contenu par défaut du navigateur est utilisé.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Web.UI.HtmlControls.HtmlForm.Enctype%2A> propriété pour spécifier le type d’encodage un navigateur utilise pour publier des données sur le serveur.  
  
 Le tableau suivant indique les types de codage courants.  
  
|Type d’encodage|Description |  
|-------------------|-----------------|  
|application/x-www-form-urlencoded|Données de formulaire sont encodées en tant que paires nom/valeur. Il s’agit du format d’encodage standard.|  
|multipart/form-data|Données de formulaire sont encodées comme un message avec une partie distincte pour chaque contrôle sur la page.|  
|texte/brut|Données de formulaire sont encodées au format texte brut, sans aucun contrôle ni les caractères de formatage.|  
  
 Pour plus d’informations sur les types d’encodage, consultez le [World Wide Web Consortium (site Web de W3C](http://go.microsoft.com/fwlink/?linkid=37125).  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Web.UI.HtmlControls.HtmlForm.Enctype%2A> propriété pour spécifier le type d’encodage le navigateur utilise pour envoyer des données sur le serveur.  
  
 [!code-aspx-csharp[HtmlForm#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlForm/CS/htmlformcs.aspx#1)]
 [!code-aspx-vb[HtmlForm#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlForm/VB/htmlformvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlControls.HtmlForm.Method" />
      </Docs>
    </Member>
    <Member MemberName="Method">
      <MemberSignature Language="C#" Value="public string Method { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Method" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlControls.HtmlForm.Method" />
      <MemberSignature Language="VB.NET" Value="Public Property Method As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Method { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Method : string with get, set" Usage="System.Web.UI.HtmlControls.HtmlForm.Method" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui indique la façon dont un navigateur publie les données du formulaire sur le serveur pour traitement.</summary>
        <value>Chaîne qui indique la façon dont le navigateur publie les données du formulaire sur le serveur. La valeur par défaut est <see langword="POST" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez cette propriété pour spécifier comment le navigateur envoie les données de formulaire au serveur pour traitement. Les deux méthodes courantes prises en charge par tous les navigateurs sont `GET` et `POST`.  
  
> [!CAUTION]
>  Vous pouvez remplacer la valeur par défaut de cette propriété et utiliser le `GET` méthode au lieu de `POST`. Toutefois, étant donné que `GET` demandes sont limitées dans la quantité de données qu’ils peuvent inclure, à l’aide de la `GET` méthode peut, dans certains cas, entraîner les fonctionnalités de gestion de publication (postback) et l’état d’échec est fournies par l’infrastructure de page ASP.NET.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Web.UI.HtmlControls.HtmlForm.Method%2A> propriété pour spécifier que les données de formulaire sont publiées sur le serveur.  
  
 [!code-aspx-csharp[HtmlForm#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlForm/CS/htmlformcs.aspx#1)]
 [!code-aspx-vb[HtmlForm#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlForm/VB/htmlformvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlControls.HtmlForm.Enctype" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public virtual string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlControls.HtmlForm.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Web.UI.HtmlControls.HtmlForm.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le nom d'identificateur pour le contrôle <see cref="T:System.Web.UI.HtmlControls.HtmlForm" />.</summary>
        <value>Chaîne qui contient le nom d'identificateur pour <see cref="T:System.Web.UI.HtmlControls.HtmlForm" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Web.UI.HtmlControls.HtmlForm.Name%2A> propriété afin de déterminer le nom d’identificateur unique pour un <xref:System.Web.UI.HtmlControls.HtmlForm> contrôle. Dans cette implémentation, l’obtention de cette propriété retourne la valeur de la <xref:System.Web.UI.HtmlControls.HtmlForm.UniqueID%2A> propriété. Toutefois, la propriété n’affecte pas d’une valeur à la propriété. Définition de la propriété n’affecte pas une valeur à cette propriété, car le <xref:System.Web.UI.HtmlControls.HtmlForm.Name%2A> propriété doit avoir la même valeur que le <xref:System.Web.UI.HtmlControls.HtmlForm.UniqueID%2A> propriété.  
  
> [!NOTE]
>  Le `name` attribut n’est pas un attribut conforme à XHTML et n’est pas restitué par ASP.NET, quel que soit le `xhtmlConformance` paramètre.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlControls.HtmlForm.UniqueID" />
        <related type="Article" href="http://msdn.microsoft.com/library/1b78d416-66bb-43a5-ac77-c703aab55b97">Conformité XHTML et ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected internal override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlControls.HtmlForm.OnInit(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnInit (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnInit(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnInit : EventArgs -&gt; unit" Usage="htmlForm.OnInit e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.EventArgs" /> qui contient les données de l'événement.</param>
        <summary>Déclenche l'événement <see cref="E:System.Web.UI.Control.Init" /> pour le contrôle <see cref="T:System.Web.UI.HtmlControls.HtmlForm" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lors de la notification par le <xref:System.Web.UI.HtmlControls.HtmlForm.OnInit%2A> (méthode), contrôles serveur Web doivent effectuer les étapes d’initialisation qui sont nécessaires pour créer et configurer une instance. Dans cette étape du cycle de vie du contrôle serveur, l’état d’affichage doit encore être rempli. En outre, vous ne peut pas accéder aux autres contrôles serveur lorsque cette méthode est appelée, qu’il s’agisse d’un enfant ou le parent de ce contrôle. Autres contrôles serveur ne sont pas garantis pour être créé et prêt pour l’accès.  
  
 Le déclenchement d'un événement appelle le gestionnaire des événements par l'intermédiaire d'un délégué. Pour plus d’informations, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
 La méthode <xref:System.Web.UI.WebControls.GridView.OnInit%2A> permet également aux classes dérivées de gérer l'événement sans y attacher de délégué. Il s'agit de la méthode recommandée pour gérer l'événement dans une classe dérivée.  
  
 Le <xref:System.Web.UI.HtmlControls.HtmlForm.OnInit%2A> méthode est principalement utilisée par les développeurs qui étendent les fonctionnalités de la <xref:System.Web.UI.HtmlControls.HtmlForm> contrôle.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Lors du remplacement de la <see cref="M:System.Web.UI.HtmlControls.HtmlForm.OnInit(System.EventArgs)" /> méthode dans une classe dérivée, veillez à appeler la classe de base <see cref="M:System.Web.UI.HtmlControls.HtmlForm.OnInit(System.EventArgs)" /> méthode afin que les délégués inscrits reçoivent l’événement. En outre, l’appel de la classe de base <see cref="M:System.Web.UI.HtmlControls.HtmlForm.OnInit(System.EventArgs)" /> méthode garantit que le <see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> contrôle est correctement défini comme le formulaire de page Web et l’état d’affichage de la page est rendue persistante.</para>
        </block>
        <altmember cref="M:System.Web.UI.Page.RegisterViewStateHandler" />
      </Docs>
    </Member>
    <Member MemberName="OnPreRender">
      <MemberSignature Language="C#" Value="protected internal override void OnPreRender (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnPreRender(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlControls.HtmlForm.OnPreRender(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnPreRender (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnPreRender(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnPreRender : EventArgs -&gt; unit" Usage="htmlForm.OnPreRender e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.EventArgs" /> qui contient les données d'événement.</param>
        <summary>Déclenche l'événement <see cref="E:System.Web.UI.Control.PreRender" /> pour le contrôle <see cref="T:System.Web.UI.HtmlControls.HtmlForm" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.HtmlControls.HtmlForm.OnPreRender%2A> méthode est appelée juste avant le rendu du <xref:System.Web.UI.HtmlControls.HtmlForm> contrôle. Si le <xref:System.Web.UI.Page.SmartNavigation%2A?displayProperty=nameWithType> propriété est définie sur `true`, le <xref:System.Web.UI.HtmlControls.HtmlForm.OnPreRender%2A> méthode enregistre la référence de fichier de script de navigation intelligente pour qu’il soit rendu.  
  
> [!NOTE]
>  Le <xref:System.Web.UI.Page.SmartNavigation%2A?displayProperty=nameWithType> propriété a été déconseillée dans ASP.NET version 2.0.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Page.SmartNavigation" />
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="protected internal override void Render (System.Web.UI.HtmlTextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void Render(class System.Web.UI.HtmlTextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlControls.HtmlForm.Render(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub Render (output As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void Render(System::Web::UI::HtmlTextWriter ^ output);" />
      <MemberSignature Language="F#" Value="override this.Render : System.Web.UI.HtmlTextWriter -&gt; unit" Usage="htmlForm.Render output" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="output">
          <see cref="T:System.Web.UI.HtmlTextWriter" /> qui reçoit le contenu affiché.</param>
        <summary>Génère le rendu du contrôle <see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> via l'objet <see cref="T:System.Web.UI.HtmlTextWriter" /> spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.HtmlControls.HtmlForm.Render%2A> méthode restitue un élément HTML `<iframe>` élément si le <xref:System.Web.UI.Page.SmartNavigation%2A> propriété est définie sur `true`. Le <xref:System.Web.UI.HtmlControls.HtmlForm.Render%2A> méthode appelle la base de <xref:System.Web.UI.Control.Render%2A> (méthode).  
  
 Le <xref:System.Web.UI.HtmlControls.HtmlForm.Render%2A> méthode est principalement utilisée par les développeurs qui étendent les fonctionnalités de la <xref:System.Web.UI.HtmlControls.HtmlForm> contrôle.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">Le contrôle <see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> n'est pas restitué sans une référence à l'instance de <see cref="T:System.Web.UI.Page" />.</exception>
        <block subset="none" type="overrides">
          <para>Lors du remplacement de la <see cref="M:System.Web.UI.HtmlControls.HtmlForm.Render(System.Web.UI.HtmlTextWriter)" /> méthode dans une classe dérivée, veillez à appeler la classe de base <see cref="M:System.Web.UI.HtmlControls.HtmlForm.Render(System.Web.UI.HtmlTextWriter)" /> méthode afin que le <see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> contrôles enfants du contrôle sont rendus correctement.</para>
        </block>
        <altmember cref="T:System.Web.HttpException" />
        <altmember cref="P:System.Web.UI.Page.SmartNavigation" />
        <altmember cref="M:System.Web.UI.Control.Render(System.Web.UI.HtmlTextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="RenderAttributes">
      <MemberSignature Language="C#" Value="protected override void RenderAttributes (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void RenderAttributes(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlControls.HtmlForm.RenderAttributes(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub RenderAttributes (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void RenderAttributes(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="override this.RenderAttributes : System.Web.UI.HtmlTextWriter -&gt; unit" Usage="htmlForm.RenderAttributes writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">
          <see cref="T:System.Web.UI.HtmlTextWriter" /> qui reçoit le contenu affiché.</param>
        <summary>Affiche les attributs du contrôle <see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> sur l’objet <see cref="T:System.Web.UI.HtmlTextWriter" /> spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.HtmlControls.HtmlForm.RenderAttributes%2A> méthode utilise le <xref:System.Web.UI.HtmlTextWriter.IsValidFormAttribute%2A> méthode permettant de vérifier le <xref:System.Web.UI.HtmlControls.HtmlForm> les attributs du contrôle pour vous assurer qu’elles puissent être rendues dans la balise d’ouverture d’un `<form>` élément HTML.  
  
 En outre, le <xref:System.Web.UI.HtmlControls.HtmlForm.RenderAttributes%2A> méthode restitue la `method`, `action`, et `onsubmit` les attributs de la <xref:System.Web.UI.HtmlControls.HtmlForm> contrôle. Si l’ID de contrôle défini dans le <xref:System.Web.UI.HtmlControls.HtmlForm.DefaultButton%2A> n’implémente pas le <xref:System.Web.UI.WebControls.IButtonControl> interface, un <xref:System.InvalidOperationException> exception est levée.  
  
 Le <xref:System.Web.UI.HtmlControls.HtmlForm.RenderAttributes%2A> méthode est principalement utilisée par les développeurs qui étendent les fonctionnalités de la <xref:System.Web.UI.HtmlControls.HtmlForm> contrôle.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Le contrôle dont l'ID est défini dans la propriété <see cref="P:System.Web.UI.HtmlControls.HtmlForm.DefaultButton" /> n'est pas du type <see cref="T:System.Web.UI.WebControls.IButtonControl" />.</exception>
        <block subset="none" type="overrides">
          <para>Lors du remplacement de la <see cref="M:System.Web.UI.HtmlControls.HtmlForm.RenderAttributes(System.Web.UI.HtmlTextWriter)" /> méthode dans une classe dérivée, veillez à appeler la classe de base <see cref="M:System.Web.UI.HtmlControls.HtmlForm.RenderAttributes(System.Web.UI.HtmlTextWriter)" /> méthode afin que le <see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> attributs du contrôle sont rendus correctement.</para>
        </block>
        <altmember cref="M:System.Web.UI.HtmlControls.HtmlControl.RenderAttributes(System.Web.UI.HtmlTextWriter)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.IsValidFormAttribute(System.String)" />
        <altmember cref="P:System.Web.UI.HtmlControls.HtmlForm.DefaultButton" />
        <altmember cref="T:System.Web.UI.WebControls.IButtonControl" />
        <altmember cref="T:System.InvalidOperationException" />
      </Docs>
    </Member>
    <Member MemberName="RenderChildren">
      <MemberSignature Language="C#" Value="protected internal override void RenderChildren (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void RenderChildren(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlControls.HtmlForm.RenderChildren(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub RenderChildren (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void RenderChildren(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="override this.RenderChildren : System.Web.UI.HtmlTextWriter -&gt; unit" Usage="htmlForm.RenderChildren writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">
          <see cref="T:System.Web.UI.HtmlTextWriter" /> qui reçoit le contenu affiché.</param>
        <summary>Génère le rendu des contrôles enfants du contrôle <see cref="T:System.Web.UI.HtmlControls.HtmlForm" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.HtmlControls.HtmlForm.RenderChildren%2A> méthode restitue le script client pour vous assurer que le navigateur est activé pour le contrôle spécifié dans le <xref:System.Web.UI.HtmlControls.HtmlForm.DefaultFocus%2A> propriété.  
  
> [!NOTE]
>  Un contrôle spécifié par le <xref:System.Web.UI.Page.SetFocus%2A?displayProperty=nameWithType> propriété est prioritaire sur un contrôle spécifié par le <xref:System.Web.UI.HtmlControls.HtmlForm.DefaultFocus%2A> propriété.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">La page Web a plus d'une balise <see langword="&lt;form&gt;" /> côté serveur.</exception>
        <block subset="none" type="overrides">
          <para>Lors du remplacement de la <see cref="M:System.Web.UI.HtmlControls.HtmlForm.RenderChildren(System.Web.UI.HtmlTextWriter)" /> méthode dans une classe dérivée, veillez à appeler la classe de base <see cref="M:System.Web.UI.HtmlControls.HtmlForm.RenderChildren(System.Web.UI.HtmlTextWriter)" /> méthode afin que le <see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> contrôles enfants du contrôle sont rendus correctement.</para>
        </block>
        <altmember cref="P:System.Web.UI.HtmlControls.HtmlForm.DefaultFocus" />
        <altmember cref="M:System.Web.UI.Page.SetFocus(System.Web.UI.Control)" />
        <altmember cref="M:System.Web.UI.Control.Focus" />
      </Docs>
    </Member>
    <Member MemberName="RenderControl">
      <MemberSignature Language="C#" Value="public override void RenderControl (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void RenderControl(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlControls.HtmlForm.RenderControl(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub RenderControl (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void RenderControl(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="override this.RenderControl : System.Web.UI.HtmlTextWriter -&gt; unit" Usage="htmlForm.RenderControl writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">
          <see cref="T:System.Web.UI.HtmlTextWriter" /> qui reçoit le contenu du contrôle de formulaire.</param>
        <summary>Génère le rendu du contrôle <see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> via l'objet <see cref="T:System.Web.UI.HtmlTextWriter" /> spécifié.</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>Lors du remplacement de la <see cref="M:System.Web.UI.HtmlControls.HtmlForm.RenderControl(System.Web.UI.HtmlTextWriter)" /> méthode dans une classe dérivée, veillez à appeler la classe de base <see cref="M:System.Web.UI.Control.RenderControl(System.Web.UI.HtmlTextWriter)" /> méthode afin que le <see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> contrôle est affiché correctement.</para>
        </block>
        <altmember cref="P:System.Web.UI.Control.DesignMode" />
        <altmember cref="T:System.Web.UI.HtmlTextWriter" />
      </Docs>
    </Member>
    <Member MemberName="SubmitDisabledControls">
      <MemberSignature Language="C#" Value="public virtual bool SubmitDisabledControls { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SubmitDisabledControls" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlControls.HtmlForm.SubmitDisabledControls" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property SubmitDisabledControls As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool SubmitDisabledControls { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SubmitDisabledControls : bool with get, set" Usage="System.Web.UI.HtmlControls.HtmlForm.SubmitDisabledControls" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur Boolean qui indique s'il faut forcer les contrôles désactivés côté client à envoyer leurs valeurs, permettant ainsi de conserver leurs valeurs après la publication de la page sur le serveur.</summary>
        <value>
          <see langword="true" /> si les contrôles désactivés sur le client sont forcés à envoyer leurs valeurs ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Web.UI.HtmlControls.HtmlForm.SubmitDisabledControls%2A> propriété pour spécifier s’il faut forcer les contrôles désactivés sur le client à envoyer leurs valeurs lors de la publication de la page. Cela permet aux contrôles désactivés de conserver leurs valeurs après la publication de la page sur le serveur. Lorsque le <xref:System.Web.UI.HtmlControls.HtmlForm.SubmitDisabledControls%2A> propriété est définie sur `false`, contrôles sur le formulaire qui ont été désactivés à l’aide du script client ne seront pas être envoyés au serveur la prochaine publication de la page. Par conséquent, toutes les valeurs stockées par les contrôles désactivés sont perdues. Pour autoriser les contrôles désactivés de conserver leurs valeurs après la publication de la page sur le serveur, définissez la <xref:System.Web.UI.HtmlControls.HtmlForm.SubmitDisabledControls%2A> propriété `true`.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment définir le <xref:System.Web.UI.HtmlControls.HtmlForm.SubmitDisabledControls%2A> propriété sur un formulaire à `true` pour que les contrôles désactivés par le script client conservent leurs valeurs après la publication de la page sur le serveur. Dans cet exemple, si vous définissez la <xref:System.Web.UI.HtmlControls.HtmlForm.SubmitDisabledControls%2A> propriété `false` puis cliquez sur le **publient** bouton, le texte dans la zone de texte HTML est perdu et la case à cocher HTML n’est plus sélectionné.  
  
 [!code-aspx-csharp[HtmlForm.SubmitDisabledControls#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlForm.SubmitDisabledControls/CS/htmlform.submitdisabledcontrolscs.aspx#1)]
 [!code-aspx-vb[HtmlForm.SubmitDisabledControls#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlForm.SubmitDisabledControls/VB/htmlform.submitdisabledcontrolsvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Target">
      <MemberSignature Language="C#" Value="public string Target { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Target" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlControls.HtmlForm.Target" />
      <MemberSignature Language="VB.NET" Value="Public Property Target As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Target { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Target : string with get, set" Usage="System.Web.UI.HtmlControls.HtmlForm.Target" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le frame ou la fenêtre dans lequel restituer les résultats des informations publiées sur le serveur.</summary>
        <value>Fenêtre du navigateur ou frame qui affiche les résultats des informations publiées sur le serveur. La valeur par défaut est une chaîne vide (""), ce qui signifie que la fenêtre ou le frame ayant le focus sont actualisés.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Web.UI.HtmlControls.HtmlForm.Target%2A> propriété pour spécifier la fenêtre cible ou le frame qui affiche les résultats des informations qui est publié sur le serveur. La redirection des résultats des informations publiées sur le serveur est une tâche avancée. L’utilisation de cette propriété pour une publication n’est pas recommandée.  
  
> [!NOTE]
>  Le <xref:System.Web.UI.HtmlControls.HtmlForm.Target%2A> effectue le rendu en tant que propriété un `target` attribut. Le `target` attribut `form` éléments n’est pas autorisé dans XHTML 1.1. Par conséquent, si le balisage rendu doit être conforme aux normes XHTML ou doit être conforme aux normes d’accessibilité, ne définissez pas le <xref:System.Web.UI.HtmlControls.HtmlForm.Target%2A> propriété. Pour plus d’informations, consultez [normes XHTML dans Visual Studio et ASP.NET](http://msdn.microsoft.com/library/1b78d416-66bb-43a5-ac77-c703aab55b97) et [accessibilité dans Visual Studio et ASP.NET](http://msdn.microsoft.com/library/7e3ce9c4-6b7d-4fb1-94b5-72cf2a44fe13).  
  
 Le <xref:System.Web.UI.HtmlControls.HtmlForm.Target%2A> valeur doit commencer par une lettre comprise entre A et Z (non-respect de la casse), à l’exception des valeurs spéciales suivantes, qui commencent par un trait de soulignement.  
  
|Valeur cible|Description |  
|------------------|-----------------|  
|`_blank`|Génère le rendu du contenu dans une nouvelle fenêtre sans frame.|  
|`_parent`|Génère le rendu du contenu dans le parent du jeu de frames immédiat.|  
|`_search`|Génère le rendu du contenu dans le volet de recherche.|  
|`_self`|Génère le rendu du contenu dans le frame qui a le focus.|  
|`_top`|Génère le rendu du contenu dans la fenêtre entière sans frame.|  
  
> [!NOTE]
>  Vérifiez la documentation de votre navigateur pour déterminer si la valeur `_search` est prise en charge.  Par exemple, Microsoft Internet Explorer 5.0 et les versions ultérieures prennent en charge la valeur cible `_search`.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Web.UI.HtmlControls.HtmlForm.Target%2A> propriété pour spécifier une nouvelle fenêtre sans frame pour afficher les résultats des informations publiées sur le serveur.  
  
 [!code-aspx-csharp[HtmlFormTarget#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlFormTarget/CS/htmlformtargetcs.aspx#1)]
 [!code-aspx-vb[HtmlFormTarget#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlFormTarget/VB/htmlformtargetvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/1b78d416-66bb-43a5-ac77-c703aab55b97">Conformité XHTML et ASP.NET</related>
        <related type="Article" href="http://msdn.microsoft.com/library/7e3ce9c4-6b7d-4fb1-94b5-72cf2a44fe13">Accessibilité dans Visual Studio 2010 et ASP.NET 4</related>
      </Docs>
    </Member>
    <Member MemberName="UniqueID">
      <MemberSignature Language="C#" Value="public override string UniqueID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UniqueID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlControls.HtmlForm.UniqueID" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property UniqueID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ UniqueID { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UniqueID : string" Usage="System.Web.UI.HtmlControls.HtmlForm.UniqueID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient l'ID programmatique unique assigné au contrôle <see cref="T:System.Web.UI.HtmlControls.HtmlForm" />.</summary>
        <value>ID programmatique unique assigné au contrôle <see cref="T:System.Web.UI.HtmlControls.HtmlForm" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Web.UI.HtmlControls.HtmlForm.UniqueID%2A> propriété à obtenir l’ID programmatique unique assigné à la <xref:System.Web.UI.HtmlControls.HtmlForm> contrôle. Cette propriété remplace l’implémentation de base pour retourner une valeur de constante lorsque le contrôle est contenu dans un <xref:System.Web.UI.INamingContainer>-implémenté objet autre qu’une page, tel qu’un contrôle serveur personnalisé. Si le conteneur d’attribution de noms est une page, la valeur de la <xref:System.Web.UI.HtmlControls.HtmlForm> du contrôle <xref:System.Web.UI.Control.ID%2A> propriété est renvoyée.  
  
 Le <xref:System.Web.UI.HtmlControls.HtmlForm.UniqueID%2A> propriété et le <xref:System.Web.UI.HtmlControls.HtmlForm.Name%2A> propriété retourne toujours la même valeur. Cela est utile quand le <xref:System.Web.UI.HtmlControls.HtmlForm> contrôle est restitué sur un navigateur qui nécessite le <xref:System.Web.UI.HtmlControls.HtmlForm> du contrôle <xref:System.Web.UI.HtmlControls.HtmlForm.UniqueID%2A> et <xref:System.Web.UI.HtmlControls.HtmlForm.Name%2A> propriétés identiques. Pour garder ces propriétés synchronisées, la <xref:System.Web.UI.HtmlControls.HtmlForm.Name%2A> propriété retourne toujours la valeur de la <xref:System.Web.UI.HtmlControls.HtmlForm.UniqueID%2A> propriété.  
  
> [!NOTE]
>  Le `name` attribut n’est pas un attribut conforme à XHTML et n’est pas restitué par ASP.NET par défaut.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Web.UI.HtmlControls.HtmlForm.UniqueID%2A> propriété pour récupérer l’identificateur unique pour un <xref:System.Web.UI.HtmlControls.HtmlForm> contrôle.  
  
 [!code-aspx-csharp[HtmlForm.UniqueID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlForm.UniqueID/CS/htmlform.uniqueidcs.aspx#1)]
 [!code-aspx-vb[HtmlForm.UniqueID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlForm.UniqueID/VB/htmlform.uniqueidvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlControls.HtmlForm.Name" />
        <related type="Article" href="http://msdn.microsoft.com/library/1b78d416-66bb-43a5-ac77-c703aab55b97">Conformité XHTML et ASP.NET</related>
      </Docs>
    </Member>
  </Members>
</Type>