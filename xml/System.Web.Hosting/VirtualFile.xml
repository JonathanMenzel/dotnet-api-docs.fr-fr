<Type Name="VirtualFile" FullName="System.Web.Hosting.VirtualFile">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="33f9791a60e614665696afca84d9f5d1942faacc" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30540053" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class VirtualFile : System.Web.Hosting.VirtualFileBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit VirtualFile extends System.Web.Hosting.VirtualFileBase" />
  <TypeSignature Language="DocId" Value="T:System.Web.Hosting.VirtualFile" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class VirtualFile&#xA;Inherits VirtualFileBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class VirtualFile abstract : System::Web::Hosting::VirtualFileBase" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.Hosting.VirtualFileBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Représente un fichier objet dans un fichier virtuel ou un espace de ressources.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.Hosting.VirtualFile> est la classe de base pour les objets qui représentent des fichiers dans un système de fichiers virtuel. En général, vous implémentez un descendant de la <xref:System.Web.Hosting.VirtualFile> classe pour chaque <xref:System.Web.Hosting.VirtualPathProvider> objet descendant dans votre application Web.  
  
   
  
## Examples  
 L’exemple de code suivant est un <xref:System.Web.Hosting.VirtualFile> implémentation de la classe qui combine des informations stockées dans un <xref:System.Data.DataSet> objet avec un fichier de modèle pour retourner les données HTML. Cet exemple de code fonctionne avec les exemples de code pour le <xref:System.Web.Hosting.VirtualPathProvider> et <xref:System.Web.Hosting.VirtualDirectory> classes pour fournir des ressources virtuelles d’une données magasin qui est chargée dans un <xref:System.Data.DataSet> objet. Pour les instructions complètes de compilation et l’exécution de l’exemple, consultez la section exemple de la <xref:System.Web.Hosting.VirtualPathProvider> vue d’ensemble de la classe.  
  
 Cet exemple comprend trois parties : le <xref:System.Web.Hosting.VirtualFile> implémentation de la classe, un fichier de données XML utilisé pour remplir le <xref:System.Data.DataSet> objet et le fichier de modèle de page.  
  
 Le premier exemple de code est une implémentation de la <xref:System.Web.Hosting.VirtualFile> classe. Son constructeur utilise une méthode sur une personnalisée <xref:System.Web.Hosting.VirtualPathProvider> objet à retourner un <xref:System.Data.DataSet> objet. Il recherche ensuite le <xref:System.Data.DataSet> objet à récupérer les informations dans le chemin d’accès virtuel fourni. Dans le <xref:System.Web.Hosting.VirtualFile.Open%2A> (méthode), elle combine les informations de la <xref:System.Data.DataSet> objet avec un fichier de modèle et retourne la combinaison en tant qu’un <xref:System.IO.Stream> objet.  
  
 [!code-csharp[System.Web.Hosting.VirtualPathProvider#40](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/SampleVirtualFile.cs#40)]
 [!code-vb[System.Web.Hosting.VirtualPathProvider#40](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/SampleVirtualFile.vb#40)]  
  
 Le deuxième exemple est le fichier de données XML utilisé pour remplir le <xref:System.Data.DataSet> objet retourné par la version personnalisée <xref:System.Web.Hosting.VirtualPathProvider> objet. Ces données XML sont utilisées pour présenter à l’aide de la <xref:System.Web.Hosting.VirtualPathProvider>, <xref:System.Web.Hosting.VirtualFile>, et <xref:System.Web.Hosting.VirtualDirectory> des classes pour récupérer des données à partir des données externes et n’est pas censé représenter un magasin de données de qualité production.  
  
```  
<?xml version="1.0" encoding="utf-8" ?>  
<resource type="dir"   
          path="/vrDir"   
          parentPath=""   
          content="">  
  <resource type="file"   
            path="/vrDir/Level1FileA.vrf"  
            parentPath="/vrDir"   
            content="This is the content of file Level1FileA.">  
  </resource>  
  <resource type="file"   
            path="/vrDir/Level1FileB.vrf"  
            parentPath="/vrDir"   
            content="This is the content of file Level1FileB.">  
  </resource>  
  <resource type="dir"   
            path="/vrDir/Level2DirA"   
            parentPath="/vrDir"   
            content="">  
    <resource type="file"   
              path="/vrDir/Level2DirA/Level2FileA.vrf"   
              parentPath="/vrDir/Level2DirA"   
              content="This is the content of file Level2FileA.">  
    </resource>  
    <resource type="file"   
              path="/vrDir/Level2DirA/Level2FileB.vrf"  
              parentPath="/vrDir/Level2DirA"   
              content="This is the content of file Level2FileB.">  
    </resource>  
  </resource>  
  <resource type="dir"   
            path="/vrDir/Level2DirB"   
            parentPath="/vrDir"   
            content="">  
    <resource type="file"   
              path="/vrDir/Level2DirB/Level2FileA.vrf"   
              parentPath="/vrDir/Level2DirB"   
              content="This is the content of file Level2FileA.">  
    </resource>  
    <resource type="file"   
              path="/vrDir/Level2DirB/Level2FileB.vrf"  
              parentPath="/vrDir/Level2DirB"   
              content="This is the content of file Level2FileB.">  
    </resource>  
  </resource>  
</resource>  
```  
  
 Le troisième exemple est le fichier texte utilisé comme modèle pour le fichier virtuel. Espaces réservés dans le fichier sont représentés par du texte entre des signes de pourcentage (%), tels que `%file%` et `%content%`. Les horodatages sont utilisés pour analyser les modifications apportées aux données du fichier virtuel mis en cache.  
  
```  
<html>  
  <head>  
    <title>File name: %file%</title>  
  </head>  
  
  <body>  
    <h1>%file%</h1>  
    <p>%content%</p>  
    <p>Page timestamp: %pageTimestamp%<br>  
       Data timestamp: %dataTimestamp%<br>  
       Template timestamp: %templateTimestamp%</p>  
  </body>  
</html>  
```  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Lorsque vous héritez de la <see cref="T:System.Web.Hosting.VirtualFile" /> (classe), vous devez substituer la <see cref="M:System.Web.Hosting.VirtualFile.Open" /> méthode pour retourner un flux de données en lecture seule pour le contenu de la ressource virtuelle.</para>
    </block>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected VirtualFile (string virtualPath);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(string virtualPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.VirtualFile.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (virtualPath As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; VirtualFile(System::String ^ virtualPath);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="virtualPath">Chemin d'accès virtuel à la ressource représentée par cette instance.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Hosting.VirtualFile" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant est une implémentation de la <xref:System.Web.Hosting.VirtualFile.%23ctor%2A> constructeur qui Récupère les informations de fichier virtuel à partir d’un <xref:System.Data.DataSet> objet fourni par un personnalisé <xref:System.Web.Hosting.VirtualPathProvider> objet. Pour obtenir le code complet requis pour exécuter l’exemple, consultez la section exemple de la <xref:System.Web.Hosting.VirtualFile> vue d’ensemble de la classe.  
  
 [!code-csharp[System.Web.Hosting.VirtualPathProvider#41](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/SampleVirtualFile.cs#41)]
 [!code-vb[System.Web.Hosting.VirtualPathProvider#41](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/SampleVirtualFile.vb#41)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDirectory">
      <MemberSignature Language="C#" Value="public override bool IsDirectory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDirectory" />
      <MemberSignature Language="DocId" Value="P:System.Web.Hosting.VirtualFile.IsDirectory" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsDirectory As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsDirectory { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui indique qu'il s'agit d'une ressource virtuelle qui doit être traitée comme un fichier.</summary>
        <value>Toujours <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public abstract System.IO.Stream Open ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IO.Stream Open() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.VirtualFile.Open" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Open () As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::IO::Stream ^ Open();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>En cas de substitution dans une classe dérivée, retourne un flux de données en lecture seule à la ressource virtuelle.</summary>
        <returns>Flux de données en lecture seule au fichier virtuel.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.Hosting.VirtualFile.Open%2A> méthode retourne un flux contenant les données traitées en tant que fichier par le <xref:System.Web.Hosting.VirtualPathProvider> classe. Le flux de données est en lecture seule et est accessible en recherche (le <xref:System.IO.Stream.CanSeek%2A> propriété a la valeur true).  
  
   
  
## Examples  
 L’exemple de code suivant est une implémentation de la <xref:System.Web.Hosting.VirtualFile.Open%2A> méthode qui combine des informations spécifiques au fichier virtuel avec un fichier de modèle, puis retourne la combinaison. Le fichier de modèle est mis en cache pour réduire l’utilisation de la lecture de plusieurs fois le système de fichiers pour récupérer le fichier de modèle. Pour obtenir le code complet requis pour exécuter l’exemple, consultez la section exemple de la <xref:System.Web.Hosting.VirtualFile> vue d’ensemble de la classe.  
  
 [!code-csharp[System.Web.Hosting.VirtualPathProvider#42](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/SampleVirtualFile.cs#42)]
 [!code-vb[System.Web.Hosting.VirtualPathProvider#42](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/SampleVirtualFile.vb#42)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Dans les classes dérivées la <see cref="M:System.Web.Hosting.VirtualFile.Open" /> méthode doit retourner un flux identifiable. Si la méthode retourne un flux qui ne prend pas en charge la recherche, un <see cref="T:System.NotSupportedException" /> est levée lorsque le flux est transmis à la <see cref="T:System.Web.HttpResponse" /> objet à écrire les données. L’exception se produit, car la réponse tente de lire le <see cref="P:System.IO.Stream.Length" /> propriété, et sur un flux qui n’est pas identifiable, essayez d’accéder à la propriété provoque une exception. Pour plus d'informations, consultez la propriété <see cref="P:System.IO.Stream.CanSeek" />.</para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>