<Type Name="IPropertyFilterTarget" FullName="System.Activities.Presentation.PropertyEditing.IPropertyFilterTarget">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e2a681d953b16be67fa3e00c725333e78e6b9987" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="36720941" /></Metadata><TypeSignature Language="C#" Value="public interface IPropertyFilterTarget" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IPropertyFilterTarget" />
  <TypeSignature Language="DocId" Value="T:System.Activities.Presentation.PropertyEditing.IPropertyFilterTarget" />
  <TypeSignature Language="VB.NET" Value="Public Interface IPropertyFilterTarget" />
  <TypeSignature Language="C++ CLI" Value="public interface class IPropertyFilterTarget" />
  <TypeSignature Language="F#" Value="type IPropertyFilterTarget = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Activities.Presentation</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Interface utilisée par l'infrastructure hôte pour l'édition de propriétés afin de gérer les fonctionnalités de tri et de filtrage.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Elle permet de déterminer si un objet particulier doit être filtré.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ApplyFilter">
      <MemberSignature Language="C#" Value="public void ApplyFilter (System.Activities.Presentation.PropertyEditing.PropertyFilter filter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyFilter(class System.Activities.Presentation.PropertyEditing.PropertyFilter filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.PropertyEditing.IPropertyFilterTarget.ApplyFilter(System.Activities.Presentation.PropertyEditing.PropertyFilter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ApplyFilter (filter As PropertyFilter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyFilter(System::Activities::Presentation::PropertyEditing::PropertyFilter ^ filter);" />
      <MemberSignature Language="F#" Value="abstract member ApplyFilter : System.Activities.Presentation.PropertyEditing.PropertyFilter -&gt; unit" Usage="iPropertyFilterTarget.ApplyFilter filter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="System.Activities.Presentation.PropertyEditing.PropertyFilter" />
      </Parameters>
      <Docs>
        <param name="filter">Nouvelle instance <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyFilter" />.</param>
        <summary>Permet de définir un nouveau <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyFilter" /> sur <see cref="T:System.Activities.Presentation.PropertyEditing.IPropertyFilterTarget" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterApplied">
      <MemberSignature Language="C#" Value="event EventHandler&lt;System.Activities.Presentation.PropertyEditing.PropertyFilterAppliedEventArgs&gt; FilterApplied;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Activities.Presentation.PropertyEditing.PropertyFilterAppliedEventArgs&gt; FilterApplied" />
      <MemberSignature Language="DocId" Value="E:System.Activities.Presentation.PropertyEditing.IPropertyFilterTarget.FilterApplied" />
      <MemberSignature Language="VB.NET" Value="Event FilterApplied As EventHandler(Of PropertyFilterAppliedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Activities::Presentation::PropertyEditing::PropertyFilterAppliedEventArgs ^&gt; ^ FilterApplied;" />
      <MemberSignature Language="F#" Value="member this.FilterApplied : EventHandler&lt;System.Activities.Presentation.PropertyEditing.PropertyFilterAppliedEventArgs&gt; " Usage="member this.FilterApplied : System.EventHandler&lt;System.Activities.Presentation.PropertyEditing.PropertyFilterAppliedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Activities.Presentation.PropertyEditing.PropertyFilterAppliedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Déclaration de l'événement déclenché lorsqu'un <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyFilter" /> est modifié par le biais d'un appel vers <see cref="M:System.Activities.Presentation.PropertyEditing.IPropertyFilterTarget.ApplyFilter(System.Activities.Presentation.PropertyEditing.PropertyFilter)" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MatchesFilter">
      <MemberSignature Language="C#" Value="public bool MatchesFilter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool MatchesFilter" />
      <MemberSignature Language="DocId" Value="P:System.Activities.Presentation.PropertyEditing.IPropertyFilterTarget.MatchesFilter" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MatchesFilter As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool MatchesFilter { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.MatchesFilter : bool" Usage="System.Activities.Presentation.PropertyEditing.IPropertyFilterTarget.MatchesFilter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Propriété en lecture seule qui retourne <see langword="true" /> si le <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyFilter" /> est une correspondance pour l'objet.</summary>
        <value><see langword="true" /> si le filtre de propriété correspond à la cible de filtre de propriété ; sinon <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MatchesPredicate">
      <MemberSignature Language="C#" Value="public bool MatchesPredicate (System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MatchesPredicate(class System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.PropertyEditing.IPropertyFilterTarget.MatchesPredicate(System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate)" />
      <MemberSignature Language="VB.NET" Value="Public Function MatchesPredicate (predicate As PropertyFilterPredicate) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool MatchesPredicate(System::Activities::Presentation::PropertyEditing::PropertyFilterPredicate ^ predicate);" />
      <MemberSignature Language="F#" Value="abstract member MatchesPredicate : System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate -&gt; bool" Usage="iPropertyFilterTarget.MatchesPredicate predicate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="predicate" Type="System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate" />
      </Parameters>
      <Docs>
        <param name="predicate"><see cref="T:System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate" /> par rapport auquel une correspondance doit être établie.</param>
        <summary>Permet de déterminer si ce <see cref="T:System.Activities.Presentation.PropertyEditing.IPropertyFilterTarget" /> est une correspondance pour un <see cref="T:System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate" /> particulier.</summary>
        <returns><see langword="true" /> s'il existe une correspondance entre une cible de filtre de propriété et un prédicat de filtre de propriété ; sinon <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>