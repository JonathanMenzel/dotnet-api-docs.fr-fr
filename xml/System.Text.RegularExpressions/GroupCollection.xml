<Type Name="GroupCollection" FullName="System.Text.RegularExpressions.GroupCollection">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9ab78f694c8e5692458dba505bfbd9b7e66ec35d" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58701267" /></Metadata><TypeSignature Language="C#" Value="public class GroupCollection : System.Collections.ICollection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit GroupCollection extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Text.RegularExpressions.GroupCollection" />
  <TypeSignature Language="VB.NET" Value="Public Class GroupCollection&#xA;Implements ICollection" />
  <TypeSignature Language="C++ CLI" Value="public ref class GroupCollection : System::Collections::ICollection" />
  <TypeSignature Language="F#" Value="type GroupCollection = class&#xA;    interface ICollection&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Text.RegularExpressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="e3879-101">Retourne l'ensemble des groupes capturés dans une correspondance unique.</span><span class="sxs-lookup"><span data-stu-id="e3879-101">Returns the set of captured groups in a single match.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3879-102">Le <xref:System.Text.RegularExpressions.GroupCollection> classe est une classe de collection de base zéro qui se compose d’une ou plusieurs <xref:System.Text.RegularExpressions.Group> objets qui fournissent des informations sur les groupes capturés dans une correspondance d’expression régulière.</span><span class="sxs-lookup"><span data-stu-id="e3879-102">The <xref:System.Text.RegularExpressions.GroupCollection> class is a zero-based collection class that consists of one or more <xref:System.Text.RegularExpressions.Group> objects that provide information about captured groups in a regular expression match.</span></span> <span data-ttu-id="e3879-103">La collection est immuable (en lecture seule) et n’a aucun constructeur public.</span><span class="sxs-lookup"><span data-stu-id="e3879-103">The collection is immutable (read-only) and has no public constructor.</span></span> <span data-ttu-id="e3879-104">Un <xref:System.Text.RegularExpressions.GroupCollection> est retourné par la <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType> propriété.</span><span class="sxs-lookup"><span data-stu-id="e3879-104">A <xref:System.Text.RegularExpressions.GroupCollection> object is returned by the <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="e3879-105">La collection contient un ou plusieurs <xref:System.Text.RegularExpressions.Group?displayProperty=nameWithType> objets.</span><span class="sxs-lookup"><span data-stu-id="e3879-105">The collection contains one or more <xref:System.Text.RegularExpressions.Group?displayProperty=nameWithType> objects.</span></span> <span data-ttu-id="e3879-106">Si la correspondance est réussie, le premier élément dans la collection contient le <xref:System.Text.RegularExpressions.Group> objet qui correspond à la correspondance entière.</span><span class="sxs-lookup"><span data-stu-id="e3879-106">If the match is successful, the first element in the collection contains the <xref:System.Text.RegularExpressions.Group> object that corresponds to the entire match.</span></span> <span data-ttu-id="e3879-107">Chaque élément suivant représente un groupe capturé, si l’expression régulière comprend des groupes de capture.</span><span class="sxs-lookup"><span data-stu-id="e3879-107">Each subsequent element represents a captured group, if the regular expression includes capturing groups.</span></span> <span data-ttu-id="e3879-108">Correspondances de groupes de capture numérotés (sans nom) apparaissent dans un ordre numérique avant de correspondances de groupes de capture nommés.</span><span class="sxs-lookup"><span data-stu-id="e3879-108">Matches from numbered (unnamed) capturing groups appear in numeric order before matches from named capturing groups.</span></span> <span data-ttu-id="e3879-109">Si la correspondance est infructueuse, la collection contienne un seul <xref:System.Text.RegularExpressions.Group?displayProperty=nameWithType> de l’objet dont la propriété <xref:System.Text.RegularExpressions.Group.Success%2A> propriété est `false` et dont <xref:System.Text.RegularExpressions.Capture.Value%2A> propriété equals <xref:System.String.Empty?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="e3879-109">If the match is unsuccessful, the collection contains a single <xref:System.Text.RegularExpressions.Group?displayProperty=nameWithType> object whose <xref:System.Text.RegularExpressions.Group.Success%2A> property is `false` and whose <xref:System.Text.RegularExpressions.Capture.Value%2A> property equals <xref:System.String.Empty?displayProperty=nameWithType>.</span></span> <span data-ttu-id="e3879-110">Pour plus d’informations, consultez la section « Regroupement construit et objets d’Expression régulière » dans le [constructions de regroupement](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md) article.</span><span class="sxs-lookup"><span data-stu-id="e3879-110">For more information, see the "Grouping Constructs and Regular Expression Objects" section in the [Grouping Constructs](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md) article.</span></span>  
  
 <span data-ttu-id="e3879-111">Pour parcourir les membres de la collection, vous devez utiliser la construction d’itération de collection fournie par votre langage (tels que `foreach` en c# et `For Each`...`Next`</span><span class="sxs-lookup"><span data-stu-id="e3879-111">To iterate through the members of the collection, you should use the collection iteration construct provided by your language (such as `foreach` in C# and `For Each`…`Next`</span></span> <span data-ttu-id="e3879-112">en Visual Basic) au lieu de récupérer l’énumérateur retourné par la <xref:System.Text.RegularExpressions.GroupCollection.GetEnumerator%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="e3879-112">in Visual Basic) instead of retrieving the enumerator that is returned by the <xref:System.Text.RegularExpressions.GroupCollection.GetEnumerator%2A> method.</span></span> <span data-ttu-id="e3879-113">En outre, vous pouvez accéder les groupes capturés numérotés individuels à partir de la <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29> propriété (l’indexeur en c#) et vous pouvez accéder à des groupes capturés nommés individuels à partir de la <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29> propriété.</span><span class="sxs-lookup"><span data-stu-id="e3879-113">In addition, you can access individual numbered captured groups from the <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29> property (the indexer in C#), and you can access individual named captured groups from the <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29> property.</span></span> <span data-ttu-id="e3879-114">Notez que vous pouvez récupérer un tableau qui contient les numéros et les noms des groupes de capture tout en appelant le <xref:System.Text.RegularExpressions.Regex.GetGroupNumbers%2A?displayProperty=nameWithType> et <xref:System.Text.RegularExpressions.Regex.GetGroupNames%2A?displayProperty=nameWithType> méthodes, respectivement.</span><span class="sxs-lookup"><span data-stu-id="e3879-114">Note that you can retrieve an array that contains the numbers and names of all capturing groups by calling the <xref:System.Text.RegularExpressions.Regex.GetGroupNumbers%2A?displayProperty=nameWithType> and <xref:System.Text.RegularExpressions.Regex.GetGroupNames%2A?displayProperty=nameWithType> methods, respectively.</span></span> <span data-ttu-id="e3879-115">Les deux sont des méthodes d’instance et nécessitent que vous instanciez un <xref:System.Text.RegularExpressions.Regex> objet qui représente l’expression régulière à mettre en correspondance.</span><span class="sxs-lookup"><span data-stu-id="e3879-115">Both are instance methods and require that you instantiate a <xref:System.Text.RegularExpressions.Regex> object that represents the regular expression to be matched.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3879-116">L’exemple suivant utilise une expression régulière avec des groupes de capture à extraire des informations sur les marques et marques déposées utilisées dans le texte.</span><span class="sxs-lookup"><span data-stu-id="e3879-116">The following example uses a regular expression with capturing groups to extract information about trademarks and registered trademarks used in text.</span></span> <span data-ttu-id="e3879-117">Le modèle d’expression régulière est `\b(\w+?)([\u00AE\u2122])`, qui est interprété comme indiqué dans le tableau suivant.</span><span class="sxs-lookup"><span data-stu-id="e3879-117">The regular expression pattern is `\b(\w+?)([\u00AE\u2122])`, which is interpreted as shown in the following table.</span></span>  
  
|<span data-ttu-id="e3879-118">Motif</span><span class="sxs-lookup"><span data-stu-id="e3879-118">Pattern</span></span>|<span data-ttu-id="e3879-119">Description </span><span class="sxs-lookup"><span data-stu-id="e3879-119">Description</span></span>|  
|-------------|-----------------|  
|`\b`|<span data-ttu-id="e3879-120">Recherchez une limite de mot.</span><span class="sxs-lookup"><span data-stu-id="e3879-120">Look for a word boundary.</span></span>|  
|`(\w+?)`|<span data-ttu-id="e3879-121">Recherchez un ou plusieurs caractères alphabétiques.</span><span class="sxs-lookup"><span data-stu-id="e3879-121">Look for one or more word characters.</span></span> <span data-ttu-id="e3879-122">Ensemble, elles forment le nom de marque.</span><span class="sxs-lookup"><span data-stu-id="e3879-122">Together, these form the trademarked name.</span></span> <span data-ttu-id="e3879-123">(Notez que cette expression régulière suppose qu’une marque se compose d’un mot unique.) Il s'agit du premier groupe de capture.</span><span class="sxs-lookup"><span data-stu-id="e3879-123">(Note that this regular expression assumes that a trademark consists of a single word.) This is the first capturing group.</span></span>|  
|`([\u00AE\u2122])`|<span data-ttu-id="e3879-124">Recherchez le® ou™ caractère.</span><span class="sxs-lookup"><span data-stu-id="e3879-124">Look for either the ® or the ™ character.</span></span> <span data-ttu-id="e3879-125">Il s'agit du deuxième groupe de capture.</span><span class="sxs-lookup"><span data-stu-id="e3879-125">This is the second capturing group.</span></span>|  
  
 <span data-ttu-id="e3879-126">Pour chaque correspondance, le <xref:System.Text.RegularExpressions.GroupCollection> contient trois <xref:System.Text.RegularExpressions.Group> objets.</span><span class="sxs-lookup"><span data-stu-id="e3879-126">For each match, the <xref:System.Text.RegularExpressions.GroupCollection> contains three <xref:System.Text.RegularExpressions.Group> objects.</span></span> <span data-ttu-id="e3879-127">Le premier objet contient la chaîne qui correspond à l’expression régulière entière.</span><span class="sxs-lookup"><span data-stu-id="e3879-127">The first object contains the string that matches the entire regular expression.</span></span> <span data-ttu-id="e3879-128">Le deuxième objet, qui représente le premier groupe capturé, contient le nom du produit.</span><span class="sxs-lookup"><span data-stu-id="e3879-128">The second object, which represents the first captured group, contains the product name.</span></span> <span data-ttu-id="e3879-129">Troisième objet, qui représente le deuxième groupe capturé, contient la marque ou inscrit le symbole de marque.</span><span class="sxs-lookup"><span data-stu-id="e3879-129">The third object, which represents the second captured group, contains the trademark or registered trademark symbol.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.GroupCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.GroupCollection/cs/Example1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.GroupCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.GroupCollection/vb/Example1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Text.RegularExpressions.Group" />
  </Docs>
  <Members>
    <Member MemberName="ContainsKey">
      <MemberSignature Language="C#" Value="public bool ContainsKey (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ContainsKey(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.ContainsKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContainsKey (key As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool ContainsKey(System::String ^ key);" />
      <MemberSignature Language="F#" Value="abstract member ContainsKey : string -&gt; bool&#xA;override this.ContainsKey : string -&gt; bool" Usage="groupCollection.ContainsKey key" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IReadOnlyDictionary`2.ContainsKey(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (Array array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Array array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(Array ^ array, int arrayIndex);" />
      <MemberSignature Language="F#" Value="abstract member CopyTo : Array * int -&gt; unit&#xA;override this.CopyTo : Array * int -&gt; unit" Usage="groupCollection.CopyTo (array, arrayIndex)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="arrayIndex" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="e3879-130">Tableau dans lequel la collection doit être copiée.</span><span class="sxs-lookup"><span data-stu-id="e3879-130">The array the collection is to be copied into.</span></span></param>
        <param name="arrayIndex"><span data-ttu-id="e3879-131">Position à laquelle la copie doit commencer dans le tableau de destination.</span><span class="sxs-lookup"><span data-stu-id="e3879-131">The position in the destination array where the copying is to begin.</span></span></param>
        <summary><span data-ttu-id="e3879-132">Copie tous les éléments de la collection dans le tableau donné en commençant à l'index spécifié.</span><span class="sxs-lookup"><span data-stu-id="e3879-132">Copies all the elements of the collection to the given array beginning at the given index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3879-133">Étant donné que la collection entière est copiée dans le tableau en commençant à l’index donné, le tableau de destination doit être au moins aussi grand que la collection.</span><span class="sxs-lookup"><span data-stu-id="e3879-133">Because the entire collection is copied into the array starting at the given index, the destination array must be at least as large as the collection.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="e3879-134">Ce membre n’est pas présent dans le [!INCLUDE[net_portable](~/includes/net-portable-md.md)].</span><span class="sxs-lookup"><span data-stu-id="e3879-134">This member is not present in the [!INCLUDE[net_portable](~/includes/net-portable-md.md)].</span></span> <span data-ttu-id="e3879-135">Si vous développez des applications qui ciblent le [!INCLUDE[net_portable](~/includes/net-portable-md.md)], utilisez le <xref:System.Text.RegularExpressions.GroupCollection.System%23Collections%23ICollection%23CopyTo%2A?displayProperty=nameWithType> méthode à la place.</span><span class="sxs-lookup"><span data-stu-id="e3879-135">If you are developing applications that target the [!INCLUDE[net_portable](~/includes/net-portable-md.md)], use the <xref:System.Text.RegularExpressions.GroupCollection.System%23Collections%23ICollection%23CopyTo%2A?displayProperty=nameWithType> method instead.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3879-136">L’exemple suivant extrait chaque mot d’une phrase et capture dans un groupe de capture, la <xref:System.Text.RegularExpressions.GroupCollection.CopyTo%2A> méthode est ensuite utilisée pour copier les éléments dans chaque mise en correspondance <xref:System.Text.RegularExpressions.GroupCollection> objet à un tableau qui contient la capture de groupes à partir de toutes les correspondances.</span><span class="sxs-lookup"><span data-stu-id="e3879-136">The following example extracts each word from a sentence and captures it in a capturing group, The <xref:System.Text.RegularExpressions.GroupCollection.CopyTo%2A> method is then used to copy the elements in each match's <xref:System.Text.RegularExpressions.GroupCollection> object to an array that contains the capturing groups from all matches.</span></span> <span data-ttu-id="e3879-137">Les différents mots capturés sont ensuite affichés sur la console.</span><span class="sxs-lookup"><span data-stu-id="e3879-137">The individual captured words are then displayed to the console.</span></span>  
  
 [!code-csharp[System.Text.RegularExpressions.GroupCollection.CopyTo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.groupcollection.copyto/cs/copyto1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.GroupCollection.CopyTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.groupcollection.copyto/vb/copyto1.vb#1)]  
  
 <span data-ttu-id="e3879-138">L’expression régulière est définie comme suit :</span><span class="sxs-lookup"><span data-stu-id="e3879-138">The regular expression is defined as follows:</span></span>  
  
|<span data-ttu-id="e3879-139">Motif</span><span class="sxs-lookup"><span data-stu-id="e3879-139">Pattern</span></span>|<span data-ttu-id="e3879-140">Description </span><span class="sxs-lookup"><span data-stu-id="e3879-140">Description</span></span>|  
|-------------|-----------------|  
|`\b`|<span data-ttu-id="e3879-141">Mettre en correspondance la limite d'un mot.</span><span class="sxs-lookup"><span data-stu-id="e3879-141">Match a word boundary.</span></span>|  
|`(\S+?)`|<span data-ttu-id="e3879-142">Correspond à un ou plusieurs caractères non espace blanc.</span><span class="sxs-lookup"><span data-stu-id="e3879-142">Match one or more non-white space characters.</span></span> <span data-ttu-id="e3879-143">Affectez-les au premier groupe de capture.</span><span class="sxs-lookup"><span data-stu-id="e3879-143">Assign them to the first capturing group.</span></span>|  
|`\b`|<span data-ttu-id="e3879-144">Mettre en correspondance la limite d'un mot.</span><span class="sxs-lookup"><span data-stu-id="e3879-144">Match a word boundary.</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e3879-145"><paramref name="array" /> est <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e3879-145"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IndexOutOfRangeException"><span data-ttu-id="e3879-146"><paramref name="arrayIndex" /> est en dehors des limites de <paramref name="array" />.</span><span class="sxs-lookup"><span data-stu-id="e3879-146"><paramref name="arrayIndex" /> is outside the bounds of <paramref name="array" />.</span></span>  
  
<span data-ttu-id="e3879-147">ou</span><span class="sxs-lookup"><span data-stu-id="e3879-147">-or-</span></span> 
 <span data-ttu-id="e3879-148"><paramref name="arrayIndex" /> plus <see cref="P:System.Text.RegularExpressions.GroupCollection.Count" /> sont en dehors des limites de <paramref name="array" />.</span><span class="sxs-lookup"><span data-stu-id="e3879-148"><paramref name="arrayIndex" /> plus <see cref="P:System.Text.RegularExpressions.GroupCollection.Count" /> is outside the bounds of <paramref name="array" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (System.Text.RegularExpressions.Group[] array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Text.RegularExpressions.Group[] array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.CopyTo(System.Text.RegularExpressions.Group[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (array As Group(), arrayIndex As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(cli::array &lt;System::Text::RegularExpressions::Group ^&gt; ^ array, int arrayIndex);" />
      <MemberSignature Language="F#" Value="abstract member CopyTo : System.Text.RegularExpressions.Group[] * int -&gt; unit&#xA;override this.CopyTo : System.Text.RegularExpressions.Group[] * int -&gt; unit" Usage="groupCollection.CopyTo (array, arrayIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Text.RegularExpressions.Group[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="arrayIndex" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="array">To be added.</param>
        <param name="arrayIndex">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Text.RegularExpressions.GroupCollection.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e3879-149">Retourne le nombre de groupes présents dans la collection.</span><span class="sxs-lookup"><span data-stu-id="e3879-149">Returns the number of groups in the collection.</span></span></summary>
        <value><span data-ttu-id="e3879-150">Nombre de groupes présents dans la collection.</span><span class="sxs-lookup"><span data-stu-id="e3879-150">The number of groups in the collection.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3879-151">Le <xref:System.Text.RegularExpressions.GroupCollection> objet a toujours au moins un membre.</span><span class="sxs-lookup"><span data-stu-id="e3879-151">The <xref:System.Text.RegularExpressions.GroupCollection> object always has at least one member.</span></span> <span data-ttu-id="e3879-152">Si une correspondance est infructueuse, la <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType> propriété retourne un <xref:System.Text.RegularExpressions.GroupCollection> objet qui contient un seul membre.</span><span class="sxs-lookup"><span data-stu-id="e3879-152">If a match is unsuccessful, the <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType> property returns a <xref:System.Text.RegularExpressions.GroupCollection> object that contains a single member.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="groupCollection.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e3879-153">Fournit un énumérateur qui itère au sein de la collection.</span><span class="sxs-lookup"><span data-stu-id="e3879-153">Provides an enumerator that iterates through the collection.</span></span></summary>
        <returns><span data-ttu-id="e3879-154">Énumérateur qui contient tous les objets <see cref="T:System.Text.RegularExpressions.Group" /> de <see cref="T:System.Text.RegularExpressions.GroupCollection" />.</span><span class="sxs-lookup"><span data-stu-id="e3879-154">An enumerator that contains all <see cref="T:System.Text.RegularExpressions.Group" /> objects in the <see cref="T:System.Text.RegularExpressions.GroupCollection" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3879-155">Au lieu d’appeler le <xref:System.Text.RegularExpressions.GroupCollection.GetEnumerator%2A> méthode pour récupérer un énumérateur qui vous permet d’effectuer une itération dans le <xref:System.Text.RegularExpressions.Group> objets dans la collection, vous devez utiliser la construction d’itération de groupe (tel que `foreach` en c# et `For Each`...`Next`</span><span class="sxs-lookup"><span data-stu-id="e3879-155">Instead of calling the <xref:System.Text.RegularExpressions.GroupCollection.GetEnumerator%2A> method to retrieve an enumerator that lets you iterate through the <xref:System.Text.RegularExpressions.Group> objects in the collection, you should use the group iteration construct (such as `foreach` in C# and `For Each`…`Next`</span></span> <span data-ttu-id="e3879-156">en Visual Basic), qui est fournie par votre langage de programmation.</span><span class="sxs-lookup"><span data-stu-id="e3879-156">in Visual Basic) that is provided by your programming language.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Text.RegularExpressions.GroupCollection.IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e3879-157">Obtient une valeur qui indique si la collection est en lecture seule.</span><span class="sxs-lookup"><span data-stu-id="e3879-157">Gets a value that indicates whether the collection is read-only.</span></span></summary>
        <value><span data-ttu-id="e3879-158"><see langword="true" /> dans tous les cas.</span><span class="sxs-lookup"><span data-stu-id="e3879-158"><see langword="true" /> in all cases.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSynchronized">
      <MemberSignature Language="C#" Value="public bool IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.IsSynchronized" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSynchronized As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSynchronized : bool" Usage="System.Text.RegularExpressions.GroupCollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e3879-159">Obtient une valeur qui indique si l’accès à <see cref="T:System.Text.RegularExpressions.GroupCollection" /> est synchronisé (thread-safe).</span><span class="sxs-lookup"><span data-stu-id="e3879-159">Gets a value that indicates whether access to the <see cref="T:System.Text.RegularExpressions.GroupCollection" /> is synchronized (thread-safe).</span></span></summary>
        <value><span data-ttu-id="e3879-160"><see langword="false" /> dans tous les cas.</span><span class="sxs-lookup"><span data-stu-id="e3879-160"><see langword="false" /> in all cases.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!WARNING]
>  <span data-ttu-id="e3879-161">Ce membre n’est pas présent dans le [!INCLUDE[net_portable](~/includes/net-portable-md.md)].</span><span class="sxs-lookup"><span data-stu-id="e3879-161">This member is not present in the [!INCLUDE[net_portable](~/includes/net-portable-md.md)].</span></span> <span data-ttu-id="e3879-162">Si vous développez des applications qui ciblent le [!INCLUDE[net_portable](~/includes/net-portable-md.md)], utilisez le <xref:System.Text.RegularExpressions.CaptureCollection.System%23Collections%23ICollection%23IsSynchronized%2A?displayProperty=nameWithType> propriété à la place.</span><span class="sxs-lookup"><span data-stu-id="e3879-162">If you are developing applications that target the [!INCLUDE[net_portable](~/includes/net-portable-md.md)], use the <xref:System.Text.RegularExpressions.CaptureCollection.System%23Collections%23ICollection%23IsSynchronized%2A?displayProperty=nameWithType> property instead.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Text.RegularExpressions.GroupCollection.SyncRoot" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Item">
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e3879-163">Permet l’accès à un membre unique de la collection via un index d’entiers ou un index de chaînes.</span><span class="sxs-lookup"><span data-stu-id="e3879-163">Enables access to a single member of the collection by integer or string index.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.Group this[int groupnum] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.RegularExpressions.Group Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(groupnum As Integer) As Group" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::RegularExpressions::Group ^ default[int] { System::Text::RegularExpressions::Group ^ get(int groupnum); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : System.Text.RegularExpressions.Group" Usage="System.Text.RegularExpressions.GroupCollection.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Group</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="groupnum" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="groupnum"><span data-ttu-id="e3879-164">Index de base zéro du membre de la collection à récupérer.</span><span class="sxs-lookup"><span data-stu-id="e3879-164">The zero-based index of the collection member to be retrieved.</span></span></param>
        <summary><span data-ttu-id="e3879-165">Permet l'accès à un membre de la collection via un index d'entiers.</span><span class="sxs-lookup"><span data-stu-id="e3879-165">Enables access to a member of the collection by integer index.</span></span></summary>
        <value><span data-ttu-id="e3879-166">Membre de la collection spécifiée par <paramref name="groupnum" />.</span><span class="sxs-lookup"><span data-stu-id="e3879-166">The member of the collection specified by <paramref name="groupnum" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3879-167">Le <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29> propriété est l’index (en c#) ou la propriété par défaut (en Visual Basic) de la <xref:System.Text.RegularExpressions.GroupCollection> classe.</span><span class="sxs-lookup"><span data-stu-id="e3879-167">The <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29> property is the index (in C#) or the default property (in Visual Basic) of the <xref:System.Text.RegularExpressions.GroupCollection> class.</span></span> <span data-ttu-id="e3879-168">Il vous permet d’énumérer les membres de la collection à l’aide un `foreach` instruction en c# ou un `For Each` instruction en Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="e3879-168">It allows you to enumerate the members of the collection by using a `foreach` statement in C# or a `For Each` statement in Visual Basic.</span></span>  
  
 <span data-ttu-id="e3879-169">Vous pouvez également utiliser cette propriété pour récupérer des groupes capturés par leur numéro d’index.</span><span class="sxs-lookup"><span data-stu-id="e3879-169">You can also use this property to retrieve individual captured groups by their index number.</span></span> <span data-ttu-id="e3879-170">Vous pouvez récupérer un tableau qui contient les numéros de tous les groupes de capture dans une expression régulière en appelant l’instance <xref:System.Text.RegularExpressions.Regex.GetGroupNumbers%2A?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="e3879-170">You can retrieve an array that contains the numbers of all capturing groups in a regular expression by calling the instance <xref:System.Text.RegularExpressions.Regex.GetGroupNumbers%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="e3879-171">Vous pouvez également mapper des groupes de capture nommés à leurs numéros en appelant l’instance <xref:System.Text.RegularExpressions.Regex.GroupNumberFromName%2A?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="e3879-171">You can also map named capturing groups to their numbers by calling the instance <xref:System.Text.RegularExpressions.Regex.GroupNumberFromName%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="e3879-172">Vous pouvez déterminer le nombre d’éléments dans la collection en récupérant la valeur de la <xref:System.Text.RegularExpressions.GroupCollection.Count%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="e3879-172">You can determine the number of items in the collection by retrieving the value of the <xref:System.Text.RegularExpressions.GroupCollection.Count%2A> property.</span></span> <span data-ttu-id="e3879-173">Les valeurs valides pour le `groupnum` plage de paramètres à partir de 0 à un de moins que le nombre d’éléments dans la collection.</span><span class="sxs-lookup"><span data-stu-id="e3879-173">Valid values for the `groupnum` parameter range from 0 to one less than the number of items in the collection.</span></span>  
  
 <span data-ttu-id="e3879-174">Le <xref:System.Text.RegularExpressions.GroupCollection> objet retourné par la <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType> propriété a toujours au moins un membre.</span><span class="sxs-lookup"><span data-stu-id="e3879-174">The <xref:System.Text.RegularExpressions.GroupCollection> object returned by the <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType> property always has at least one member.</span></span> <span data-ttu-id="e3879-175">Si le moteur d’expression régulière ne peut pas trouver de correspondances dans une chaîne d’entrée particulière, le seul <xref:System.Text.RegularExpressions.Group> objet dans la collection a son <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType> propriété définie sur `false` et son `Group.Value` propriété définie sur <xref:System.String.Empty?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="e3879-175">If the regular expression engine cannot find any matches in a particular input string, the single <xref:System.Text.RegularExpressions.Group> object in the collection has its <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType> property set to `false` and its `Group.Value` property set to <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="e3879-176">Si `groupnum` n’est pas l’index d’un membre de la collection, ou si `groupnum` est l’index d’un groupe de capture n’a pas été de correspondance dans la chaîne d’entrée, la méthode retourne un <xref:System.Text.RegularExpressions.Group> de l’objet dont la propriété <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType> propriété est `false` et dont `Group.Value` propriété est <xref:System.String.Empty?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="e3879-176">If `groupnum` is not the index of a member of the collection, or if `groupnum` is the index of a capturing group that has not been matched in the input string, the method returns a <xref:System.Text.RegularExpressions.Group> object whose <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType> property is `false` and whose `Group.Value` property is <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3879-177">L’exemple suivant définit une expression régulière qui se compose de deux groupes numérotés.</span><span class="sxs-lookup"><span data-stu-id="e3879-177">The following example defines a regular expression that consists of two numbered groups.</span></span> <span data-ttu-id="e3879-178">Le premier groupe de capture un ou plusieurs chiffres consécutifs.</span><span class="sxs-lookup"><span data-stu-id="e3879-178">The first group captures one or more consecutive digits.</span></span> <span data-ttu-id="e3879-179">Le deuxième groupe correspond à un caractère unique.</span><span class="sxs-lookup"><span data-stu-id="e3879-179">The second group matches a single character.</span></span> <span data-ttu-id="e3879-180">Étant donné que le moteur d’expression régulière recherche zéro ou une occurrence du premier groupe, il ne trouve pas toujours de correspondance même si la correspondance d’expression régulière est réussie.</span><span class="sxs-lookup"><span data-stu-id="e3879-180">Because the regular expression engine looks for zero or one occurrence of the first group, it does not always find a match even if the regular expression match is successful.</span></span> <span data-ttu-id="e3879-181">L’exemple illustre ensuite le résultat lorsque la <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29> propriété est utilisée pour récupérer un groupe non apparié, un groupe de mise en correspondance et un groupe qui n’est pas défini dans l’expression régulière.</span><span class="sxs-lookup"><span data-stu-id="e3879-181">The example then illustrates the result when the <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29> property is used to retrieve an unmatched group, a matched group, and a group that is not defined in the regular expression.</span></span> <span data-ttu-id="e3879-182">L’exemple définit un modèle d’expression régulière `(\d+)*(\w)\2`, qui est interprété comme indiqué dans le tableau suivant.</span><span class="sxs-lookup"><span data-stu-id="e3879-182">The example defines a regular expression pattern `(\d+)*(\w)\2`, which is interpreted as shown in the following table.</span></span>  
  
|<span data-ttu-id="e3879-183">Motif</span><span class="sxs-lookup"><span data-stu-id="e3879-183">Pattern</span></span>|<span data-ttu-id="e3879-184">Description </span><span class="sxs-lookup"><span data-stu-id="e3879-184">Description</span></span>|  
|-------------|-----------------|  
|`(\d+)*`|<span data-ttu-id="e3879-185">Correspond à une ou plusieurs occurrences d’un chiffre décimal.</span><span class="sxs-lookup"><span data-stu-id="e3879-185">Match one or more occurrence of a decimal digit.</span></span> <span data-ttu-id="e3879-186">Il s'agit du premier groupe de capture.</span><span class="sxs-lookup"><span data-stu-id="e3879-186">This is the first capturing group.</span></span> <span data-ttu-id="e3879-187">Correspond zéro ou une fois à ce modèle.</span><span class="sxs-lookup"><span data-stu-id="e3879-187">Match this pattern either zero or one time.</span></span>|  
|`(\w)`|<span data-ttu-id="e3879-188">Il s'agit du deuxième groupe de capture.</span><span class="sxs-lookup"><span data-stu-id="e3879-188">This is the second capturing group.</span></span>|  
|`\k`|<span data-ttu-id="e3879-189">Correspond à la chaîne capturée par le deuxième groupe de capture.</span><span class="sxs-lookup"><span data-stu-id="e3879-189">Match the string captured by the second capturing group.</span></span>|  
  
 [!code-csharp[System.Text.RegularExpressions.GroupCollection.Item#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.groupcollection.item/cs/item3.cs#2)]
 [!code-vb[System.Text.RegularExpressions.GroupCollection.Item#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.groupcollection.item/vb/item3.vb#2)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/0fc18634-f590-4062-8d5c-f0b71abe405b"><span data-ttu-id="e3879-190">Constructions de regroupement</span><span class="sxs-lookup"><span data-stu-id="e3879-190">Grouping Constructs</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.Group this[string groupname] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.RegularExpressions.Group Item(string)" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.Item(System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(groupname As String) As Group" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::RegularExpressions::Group ^ default[System::String ^] { System::Text::RegularExpressions::Group ^ get(System::String ^ groupname); };" />
      <MemberSignature Language="F#" Value="member this.Item(string) : System.Text.RegularExpressions.Group" Usage="System.Text.RegularExpressions.GroupCollection.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Group</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="groupname" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="groupname"><span data-ttu-id="e3879-191">Nom d'un groupe de capture.</span><span class="sxs-lookup"><span data-stu-id="e3879-191">The name of a capturing group.</span></span></param>
        <summary><span data-ttu-id="e3879-192">Permet l'accès à un membre de la collection via un index de chaînes.</span><span class="sxs-lookup"><span data-stu-id="e3879-192">Enables access to a member of the collection by string index.</span></span></summary>
        <value><span data-ttu-id="e3879-193">Membre de la collection spécifiée par <paramref name="groupname" />.</span><span class="sxs-lookup"><span data-stu-id="e3879-193">The member of the collection specified by <paramref name="groupname" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3879-194">`groupName` peut être le nom d’un groupe de capture défini par le `(?<` *nom* `>)` élément dans une expression régulière, ou la représentation sous forme de chaîne du nombre d’un groupe de capture défini par un regroupement construction.</span><span class="sxs-lookup"><span data-stu-id="e3879-194">`groupName` can be either the name of a capturing group that is defined by the `(?<`*name*`>)` element in a regular expression, or the string representation of the number of a capturing group that is defined by a grouping construct.</span></span> <span data-ttu-id="e3879-195">Pour plus d’informations sur les groupes dans les expressions régulières, consultez [constructions de regroupement](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md).</span><span class="sxs-lookup"><span data-stu-id="e3879-195">For more information about groups in regular expressions, see [Grouping Constructs](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md).</span></span>  
  
 <span data-ttu-id="e3879-196">Vous pouvez récupérer les noms de tous les groupes capturés dans une <xref:System.Text.RegularExpressions.Regex> objet en appelant le <xref:System.Text.RegularExpressions.Regex.GetGroupNames%2A?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="e3879-196">You can retrieve the names of all the captured groups in a <xref:System.Text.RegularExpressions.Regex> object by calling the <xref:System.Text.RegularExpressions.Regex.GetGroupNames%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="e3879-197">Vous pouvez également mapper les numéros des groupes de captures dans une expression régulière à leurs noms en appelant le <xref:System.Text.RegularExpressions.Regex.GroupNameFromNumber%2A?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="e3879-197">You can also map the numbers of capturing groups in a regular expression to their names by calling the <xref:System.Text.RegularExpressions.Regex.GroupNameFromNumber%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="e3879-198">Les noms individuels à partir du tableau peuvent ensuite être transmis à la <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29> propriété afin de récupérer la chaîne capturée.</span><span class="sxs-lookup"><span data-stu-id="e3879-198">Individual names from the array can then be passed to the <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29> property to retrieve the captured string.</span></span>  
  
 <span data-ttu-id="e3879-199">Si `groupname` n’est pas le nom d’un groupe de capture dans la collection, ou si `groupname` est le nom d’un groupe de capture n’a pas été de correspondance dans la chaîne d’entrée, la méthode retourne un <xref:System.Text.RegularExpressions.Group> de l’objet dont la propriété <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType> propriété est `false` et dont `Group.Value` propriété est <xref:System.String.Empty?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="e3879-199">If `groupname` is not the name of a capturing group in the collection, or if `groupname` is the name of a capturing group that has not been matched in the input string, the method returns a <xref:System.Text.RegularExpressions.Group> object whose <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType> property is `false` and whose `Group.Value` property is <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3879-200">L’exemple suivant définit une expression régulière qui se compose de deux groupes nommés.</span><span class="sxs-lookup"><span data-stu-id="e3879-200">The following example defines a regular expression that consists of two named groups.</span></span> <span data-ttu-id="e3879-201">Le premier groupe, `numbers`, capture un ou plusieurs chiffres consécutifs.</span><span class="sxs-lookup"><span data-stu-id="e3879-201">The first group, `numbers`, captures one or more consecutive digits.</span></span> <span data-ttu-id="e3879-202">Le deuxième groupe, `letter`, correspond à un caractère unique.</span><span class="sxs-lookup"><span data-stu-id="e3879-202">The second group, `letter`, matches a single character.</span></span> <span data-ttu-id="e3879-203">Étant donné que le moteur d’expression régulière recherche zéro ou une occurrence du modèle défini par le `numbers` groupe, le `numbers` groupe n’est pas toujours présent même si une correspondance est réussie.</span><span class="sxs-lookup"><span data-stu-id="e3879-203">Because the regular expression engine looks for zero or one occurrence of the pattern defined by the `numbers` group, the `numbers` group is not always present even if a match is successful.</span></span> <span data-ttu-id="e3879-204">L’exemple illustre ensuite le résultat lorsque la <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29> propriété est utilisée pour récupérer un groupe non apparié, un groupe de mise en correspondance et un groupe qui n’est pas défini dans l’expression régulière.</span><span class="sxs-lookup"><span data-stu-id="e3879-204">The example then illustrates the result when the <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29> property is used to retrieve an unmatched group, a matched group, and a group that is not defined in the regular expression.</span></span> <span data-ttu-id="e3879-205">L’exemple définit un modèle d’expression régulière `(?<numbers>\d+)*(?<letter>\w)\k<letter>`, qui est interprété comme indiqué dans le tableau suivant.</span><span class="sxs-lookup"><span data-stu-id="e3879-205">The example defines a regular expression pattern `(?<numbers>\d+)*(?<letter>\w)\k<letter>`, which is interpreted as shown in the following table.</span></span>  
  
|<span data-ttu-id="e3879-206">Motif</span><span class="sxs-lookup"><span data-stu-id="e3879-206">Pattern</span></span>|<span data-ttu-id="e3879-207">Description </span><span class="sxs-lookup"><span data-stu-id="e3879-207">Description</span></span>|  
|-------------|-----------------|  
|`(?<numbers>\d+)*`|<span data-ttu-id="e3879-208">Correspond à une ou plusieurs occurrences d’un chiffre décimal.</span><span class="sxs-lookup"><span data-stu-id="e3879-208">Match one or more occurrence of a decimal digit.</span></span> <span data-ttu-id="e3879-209">Nommez ce le `numbers` groupe de capture.</span><span class="sxs-lookup"><span data-stu-id="e3879-209">Name this the `numbers` capturing group.</span></span> <span data-ttu-id="e3879-210">Correspond zéro ou une fois à ce modèle.</span><span class="sxs-lookup"><span data-stu-id="e3879-210">Match this pattern either zero or one time.</span></span>|  
|`(?<letter>\w)`|<span data-ttu-id="e3879-211">Mettre en correspondance un caractère de mot unique.</span><span class="sxs-lookup"><span data-stu-id="e3879-211">Match a single word character.</span></span> <span data-ttu-id="e3879-212">Nommez ce le `letter` groupe de capture.</span><span class="sxs-lookup"><span data-stu-id="e3879-212">Name this the `letter` capturing group.</span></span>|  
|`\k<letter>`|<span data-ttu-id="e3879-213">Correspond à la chaîne capturée par le `letter` groupe de capture.</span><span class="sxs-lookup"><span data-stu-id="e3879-213">Match the string captured by the `letter` capturing group.</span></span>|  
  
 [!code-csharp[System.Text.RegularExpressions.GroupCollection.Item#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.groupcollection.item/cs/item2.cs#1)]
 [!code-vb[System.Text.RegularExpressions.GroupCollection.Item#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.groupcollection.item/vb/item2.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/0fc18634-f590-4062-8d5c-f0b71abe405b"><span data-ttu-id="e3879-214">Constructions de regroupement</span><span class="sxs-lookup"><span data-stu-id="e3879-214">Grouping Constructs</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Keys">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;string&gt; Keys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;string&gt; Keys" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.Keys" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Keys As IEnumerable(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ Keys { System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Keys : seq&lt;string&gt;" Usage="System.Text.RegularExpressions.GroupCollection.Keys" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IReadOnlyDictionary`2.Keys</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SyncRoot">
      <MemberSignature Language="C#" Value="public object SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.SyncRoot" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SyncRoot As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SyncRoot : obj" Usage="System.Text.RegularExpressions.GroupCollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e3879-215">Obtient un objet qui peut être utilisé pour synchroniser l'accès à <see cref="T:System.Text.RegularExpressions.GroupCollection" />.</span><span class="sxs-lookup"><span data-stu-id="e3879-215">Gets an object that can be used to synchronize access to the <see cref="T:System.Text.RegularExpressions.GroupCollection" />.</span></span></summary>
        <value><span data-ttu-id="e3879-216">Copie de l'objet <see cref="T:System.Text.RegularExpressions.Match" /> à synchroniser.</span><span class="sxs-lookup"><span data-stu-id="e3879-216">A copy of the <see cref="T:System.Text.RegularExpressions.Match" /> object to synchronize.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!WARNING]
>  <span data-ttu-id="e3879-217">Ce membre n’est pas présent dans le [!INCLUDE[net_portable](~/includes/net-portable-md.md)].</span><span class="sxs-lookup"><span data-stu-id="e3879-217">This member is not present in the [!INCLUDE[net_portable](~/includes/net-portable-md.md)].</span></span> <span data-ttu-id="e3879-218">Si vous développez des applications qui ciblent le [!INCLUDE[net_portable](~/includes/net-portable-md.md)], utilisez le <xref:System.Text.RegularExpressions.GroupCollection.System%23Collections%23ICollection%23SyncRoot%2A?displayProperty=nameWithType> propriété à la place.</span><span class="sxs-lookup"><span data-stu-id="e3879-218">If you are developing applications that target the [!INCLUDE[net_portable](~/includes/net-portable-md.md)], use the <xref:System.Text.RegularExpressions.GroupCollection.System%23Collections%23ICollection%23SyncRoot%2A?displayProperty=nameWithType> property instead.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Text.RegularExpressions.GroupCollection.IsSynchronized" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Add">
      <MemberSignature Language="C#" Value="void ICollection&lt;Group&gt;.Add (System.Text.RegularExpressions.Group item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Add(class System.Text.RegularExpressions.Group item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection&lt;System#Text#RegularExpressions#Group&gt;#Add(System.Text.RegularExpressions.Group)" />
      <MemberSignature Language="VB.NET" Value="Sub Add (item As Group) Implements ICollection(Of Group).Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Add(System::Text::RegularExpressions::Group ^ item) = System::Collections::Generic::ICollection&lt;System::Text::RegularExpressions::Group ^&gt;::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Add(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Text.RegularExpressions.Group" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="item">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Clear">
      <MemberSignature Language="C#" Value="void ICollection&lt;Group&gt;.Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection&lt;System#Text#RegularExpressions#Group&gt;#Clear" />
      <MemberSignature Language="VB.NET" Value="Sub Clear () Implements ICollection(Of Group).Clear" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Clear() = System::Collections::Generic::ICollection&lt;System::Text::RegularExpressions::Group ^&gt;::Clear;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Contains">
      <MemberSignature Language="C#" Value="bool ICollection&lt;Group&gt;.Contains (System.Text.RegularExpressions.Group item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Contains(class System.Text.RegularExpressions.Group item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection&lt;System#Text#RegularExpressions#Group&gt;#Contains(System.Text.RegularExpressions.Group)" />
      <MemberSignature Language="VB.NET" Value="Function Contains (item As Group) As Boolean Implements ICollection(Of Group).Contains" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Contains(System::Text::RegularExpressions::Group ^ item) = System::Collections::Generic::ICollection&lt;System::Text::RegularExpressions::Group ^&gt;::Contains;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Contains(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Text.RegularExpressions.Group" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="item">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Remove">
      <MemberSignature Language="C#" Value="bool ICollection&lt;Group&gt;.Remove (System.Text.RegularExpressions.Group item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Remove(class System.Text.RegularExpressions.Group item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection&lt;System#Text#RegularExpressions#Group&gt;#Remove(System.Text.RegularExpressions.Group)" />
      <MemberSignature Language="VB.NET" Value="Function Remove (item As Group) As Boolean Implements ICollection(Of Group).Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.Generic.ICollection&lt;System.Text.RegularExpressions.Group&gt;.Remove(System::Text::RegularExpressions::Group ^ item) = System::Collections::Generic::ICollection&lt;System::Text::RegularExpressions::Group ^&gt;::Remove;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Remove(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Text.RegularExpressions.Group" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="item">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Text.RegularExpressions.Group&gt;&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;string,System.Text.RegularExpressions.Group&gt;&gt; IEnumerable&lt;KeyValuePair&lt;string,Group&gt;&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, class System.Text.RegularExpressions.Group&gt;&gt; System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Text.RegularExpressions.Group&gt;&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IEnumerable&lt;System#Collections#Generic#KeyValuePair&lt;System#String,System#Text#RegularExpressions#Group&gt;&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of KeyValuePair(Of String, Group)) Implements IEnumerable(Of KeyValuePair(Of String, Group)).GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Text::RegularExpressions::Group ^&gt;&gt; ^ System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Text.RegularExpressions.Group&gt;&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Text::RegularExpressions::Group ^&gt;&gt;::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Text.RegularExpressions.Group&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;System.Text.RegularExpressions.Group&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;System.Text.RegularExpressions.Group&gt; IEnumerable&lt;Group&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;class System.Text.RegularExpressions.Group&gt; System.Collections.Generic.IEnumerable&lt;System.Text.RegularExpressions.Group&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IEnumerable&lt;System#Text#RegularExpressions#Group&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of Group) Implements IEnumerable(Of Group).GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;System::Text::RegularExpressions::Group ^&gt; ^ System.Collections.Generic.IEnumerable&lt;System.Text.RegularExpressions.Group&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;System::Text::RegularExpressions::Group ^&gt;::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.Text.RegularExpressions.Group&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.IndexOf">
      <MemberSignature Language="C#" Value="int IList&lt;Group&gt;.IndexOf (System.Text.RegularExpressions.Group item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.IndexOf(class System.Text.RegularExpressions.Group item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList&lt;System#Text#RegularExpressions#Group&gt;#IndexOf(System.Text.RegularExpressions.Group)" />
      <MemberSignature Language="VB.NET" Value="Function IndexOf (item As Group) As Integer Implements IList(Of Group).IndexOf" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.IndexOf(System::Text::RegularExpressions::Group ^ item) = System::Collections::Generic::IList&lt;System::Text::RegularExpressions::Group ^&gt;::IndexOf;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IList`1.IndexOf(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Text.RegularExpressions.Group" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="item">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.Insert">
      <MemberSignature Language="C#" Value="void IList&lt;Group&gt;.Insert (int index, System.Text.RegularExpressions.Group item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.Insert(int32 index, class System.Text.RegularExpressions.Group item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList&lt;System#Text#RegularExpressions#Group&gt;#Insert(System.Int32,System.Text.RegularExpressions.Group)" />
      <MemberSignature Language="VB.NET" Value="Sub Insert (index As Integer, item As Group) Implements IList(Of Group).Insert" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.Insert(int index, System::Text::RegularExpressions::Group ^ item) = System::Collections::Generic::IList&lt;System::Text::RegularExpressions::Group ^&gt;::Insert;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="item" Type="System.Text.RegularExpressions.Group" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <param name="item">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.Item">
      <MemberSignature Language="C#" Value="System.Text.RegularExpressions.Group System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.Item[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.RegularExpressions.Group System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList&lt;System#Text#RegularExpressions#Group&gt;#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" Property Item(index As Integer) As Group Implements IList(Of Group).Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Text::RegularExpressions::Group ^ System::Collections::Generic::IList&lt;System::Text::RegularExpressions::Group&gt;::Item[int] { System::Text::RegularExpressions::Group ^ get(int index); void set(int index, System::Text::RegularExpressions::Group ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IList`1.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Group</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.RemoveAt">
      <MemberSignature Language="C#" Value="void IList&lt;Group&gt;.RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList&lt;System#Text#RegularExpressions#Group&gt;#RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Sub RemoveAt (index As Integer) Implements IList(Of Group).RemoveAt" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.IList&lt;System.Text.RegularExpressions.Group&gt;.RemoveAt(int index) = System::Collections::Generic::IList&lt;System::Text::RegularExpressions::Group ^&gt;::RemoveAt;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.ICollection.CopyTo(Array ^ array, int arrayIndex) = System::Collections::ICollection::CopyTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
        <Parameter Name="arrayIndex" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="e3879-219">Tableau unidimensionnel dans lequel la collection doit être copiée.</span><span class="sxs-lookup"><span data-stu-id="e3879-219">The one-dimensional array the collection is to be copied into.</span></span></param>
        <param name="arrayIndex"><span data-ttu-id="e3879-220">Index de base zéro dans le tableau de destination dans lequel la copie doit commencer.</span><span class="sxs-lookup"><span data-stu-id="e3879-220">The zero-based index in the destination array where copying is to begin.</span></span></param>
        <summary><span data-ttu-id="e3879-221">Copie tous les éléments de la collection dans le tableau spécifié en commençant à l'index spécifié.</span><span class="sxs-lookup"><span data-stu-id="e3879-221">Copies all the elements of the collection to the specified array beginning at the specified index.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e3879-222"><paramref name="array" /> a la valeur null.</span><span class="sxs-lookup"><span data-stu-id="e3879-222"><paramref name="array" /> is null.</span></span></exception>
        <exception cref="T:System.IndexOutOfRangeException"><span data-ttu-id="e3879-223"><paramref name="arrayIndex" /> est en dehors des limites <paramref name="array" />.-ou-<paramref name="arrayIndex" /> plus <see cref="P:System.Text.RegularExpressions.GroupCollection.Count" /> sont en dehors des limites de <paramref name="array" />.</span><span class="sxs-lookup"><span data-stu-id="e3879-223"><paramref name="arrayIndex" /> is outside the bounds of <paramref name="array" />.-or-<paramref name="arrayIndex" /> plus <see cref="P:System.Text.RegularExpressions.GroupCollection.Count" /> is outside the bounds of <paramref name="array" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.System#Collections#ICollection#IsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::ICollection::IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e3879-224">Obtient une valeur qui indique si l’accès à la collection est synchronisé (thread-safe).</span><span class="sxs-lookup"><span data-stu-id="e3879-224">Gets a value that indicates whether access to the collection is synchronized (thread-safe).</span></span></summary>
        <value><span data-ttu-id="e3879-225">false dans tous les cas.</span><span class="sxs-lookup"><span data-stu-id="e3879-225">false in all cases.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.System#Collections#ICollection#SyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::ICollection::SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e3879-226">Obtient un objet qui peut être utilisé pour synchroniser l’accès à la collection.</span><span class="sxs-lookup"><span data-stu-id="e3879-226">Gets an object that can be used to synchronize access to the collection.</span></span></summary>
        <value><span data-ttu-id="e3879-227">Objet permettant de synchroniser l’accès à la collection.</span><span class="sxs-lookup"><span data-stu-id="e3879-227">An object that can be used to synchronize access to the collection.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Add">
      <MemberSignature Language="C#" Value="int IList.Add (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.Add(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Add(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Add (value As Object) As Integer Implements IList.Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.Add(System::Object ^ value) = System::Collections::IList::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Add(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Clear">
      <MemberSignature Language="C#" Value="void IList.Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Clear" />
      <MemberSignature Language="VB.NET" Value="Sub Clear () Implements IList.Clear" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Clear() = System::Collections::IList::Clear;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Contains">
      <MemberSignature Language="C#" Value="bool IList.Contains (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IList.Contains(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Contains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Contains (value As Object) As Boolean Implements IList.Contains" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IList.Contains(System::Object ^ value) = System::Collections::IList::Contains;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Contains(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IndexOf">
      <MemberSignature Language="C#" Value="int IList.IndexOf (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.IndexOf(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#IndexOf(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IndexOf (value As Object) As Integer Implements IList.IndexOf" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.IndexOf(System::Object ^ value) = System::Collections::IList::IndexOf;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.IndexOf(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Insert">
      <MemberSignature Language="C#" Value="void IList.Insert (int index, object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Insert(int32 index, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Insert(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Insert (index As Integer, value As Object) Implements IList.Insert" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Insert(int index, System::Object ^ value) = System::Collections::IList::Insert;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Insert(System.Int32,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="value" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#IsFixedSize" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsFixedSize As Boolean Implements IList.IsFixedSize" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::IList::IsFixedSize { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IList.IsFixedSize" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsFixedSize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Item">
      <MemberSignature Language="C#" Value="object System.Collections.IList.Item[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IList.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" Property Item(index As Integer) As Object Implements IList.Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::IList::Item[int] { System::Object ^ get(int index); void set(int index, System::Object ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IList.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Remove">
      <MemberSignature Language="C#" Value="void IList.Remove (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Remove(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Remove (value As Object) Implements IList.Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Remove(System::Object ^ value) = System::Collections::IList::Remove;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Remove(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.RemoveAt">
      <MemberSignature Language="C#" Value="void IList.RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Sub RemoveAt (index As Integer) Implements IList.RemoveAt" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.RemoveAt(int index) = System::Collections::IList::RemoveAt;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.RemoveAt(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetValue">
      <MemberSignature Language="C#" Value="public bool TryGetValue (string key, out System.Text.RegularExpressions.Group value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryGetValue(string key, [out] class System.Text.RegularExpressions.Group&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.GroupCollection.TryGetValue(System.String,System.Text.RegularExpressions.Group@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetValue (key As String, ByRef value As Group) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryGetValue(System::String ^ key, [Runtime::InteropServices::Out] System::Text::RegularExpressions::Group ^ % value);" />
      <MemberSignature Language="F#" Value="abstract member TryGetValue : string *  -&gt; bool&#xA;override this.TryGetValue : string *  -&gt; bool" Usage="groupCollection.TryGetValue (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="value" Type="System.Text.RegularExpressions.Group" RefType="out" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Values">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Text.RegularExpressions.Group&gt; Values { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Text.RegularExpressions.Group&gt; Values" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.GroupCollection.Values" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Values As IEnumerable(Of Group)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Text::RegularExpressions::Group ^&gt; ^ Values { System::Collections::Generic::IEnumerable&lt;System::Text::RegularExpressions::Group ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Values : seq&lt;System.Text.RegularExpressions.Group&gt;" Usage="System.Text.RegularExpressions.GroupCollection.Values" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IReadOnlyDictionary`2.Values</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Text.RegularExpressions.Group&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>