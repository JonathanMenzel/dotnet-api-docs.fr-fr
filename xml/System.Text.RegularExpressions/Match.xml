<Type Name="Match" FullName="System.Text.RegularExpressions.Match">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4abc11ca5402ca90244d72d4d3aa11f1c652657d" /><Meta Name="ms.sourcegitcommit" Value="c0c07dbd19cd7017243f9ac36915755f79bc8da6" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="11/27/2018" /><Meta Name="ms.locfileid" Value="52360458" /></Metadata><TypeSignature Language="C#" Value="public class Match : System.Text.RegularExpressions.Group" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Match extends System.Text.RegularExpressions.Group" />
  <TypeSignature Language="DocId" Value="T:System.Text.RegularExpressions.Match" />
  <TypeSignature Language="VB.NET" Value="Public Class Match&#xA;Inherits Group" />
  <TypeSignature Language="C++ CLI" Value="public ref class Match : System::Text::RegularExpressions::Group" />
  <TypeSignature Language="F#" Value="type Match = class&#xA;    inherit Group" />
  <AssemblyInfo>
    <AssemblyName>System.Text.RegularExpressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Text.RegularExpressions.Group</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Représente les résultats d'une correspondance d'expression régulière unique.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Text.RegularExpressions.Match> objet est immuable et n’a aucun constructeur public. Une instance de la <xref:System.Text.RegularExpressions.Match> classe est retournée par la <xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=nameWithType> (méthode) et représente la première correspondance de modèle dans une chaîne. Les correspondances suivantes sont représentées par <xref:System.Text.RegularExpressions.Match> objets retournés par le <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType> (méthode). En outre, un <xref:System.Text.RegularExpressions.MatchCollection> objet se compose de zéro, une ou plusieurs <xref:System.Text.RegularExpressions.Match> objets est retourné par la <xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=nameWithType> (méthode).  
  
 Si le <xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=nameWithType> méthode ne correspond pas à un modèle d’expression régulière dans une chaîne d’entrée, elle retourne un vide <xref:System.Text.RegularExpressions.MatchCollection> objet. Vous pouvez ensuite utiliser un `foreach` construire en c# ou un `For Each` construire en Visual Basic pour itérer au sein de la collection.  
  
 Si le <xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=nameWithType> méthode ne parvient pas à correspondre au modèle d’expression régulière, elle retourne un <xref:System.Text.RegularExpressions.Match> objet est égal à <xref:System.Text.RegularExpressions.Match.Empty%2A?displayProperty=nameWithType>. Vous pouvez utiliser le <xref:System.Text.RegularExpressions.Group.Success%2A> propriété afin de déterminer si la correspondance a réussi. L'exemple suivant illustre cette situation.  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/cs/Match1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Match.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/vb/Match1.vb#1)]  
  
 Si une correspondance de modèle est réussie, le <xref:System.Text.RegularExpressions.Capture.Value%2A> propriété contient la sous-chaîne mise en correspondance, le <xref:System.Text.RegularExpressions.Capture.Index%2A> propriété indique la position de départ de base zéro de la sous-chaîne mise en correspondance dans la chaîne d’entrée et le <xref:System.Text.RegularExpressions.Capture.Length%2A> propriété indique le longueur de la sous-chaîne mise en correspondance dans la chaîne d’entrée.  
  
 Parce qu’une correspondance unique peut impliquer plusieurs groupes de capture, <xref:System.Text.RegularExpressions.Match> a un <xref:System.Text.RegularExpressions.Match.Groups%2A> propriété qui retourne le <xref:System.Text.RegularExpressions.GroupCollection>. Le <xref:System.Text.RegularExpressions.Match> instance elle-même est équivalent au premier objet dans la collection, à `Match.Groups[0]` (`Match.Groups(0)` en Visual Basic), qui représente la correspondance entière. Vous pouvez accéder les groupes capturés dans une correspondance de plusieurs manières :  
  
-   Vous pouvez parcourir les membres de la <xref:System.Text.RegularExpressions.GroupCollection> objet en utilisant un `foreach` (c#) ou `For Each` construction de (Visual Basic).  
  
-   Vous pouvez utiliser le <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29?displayProperty=nameWithType> propriété à récupérer des groupes par le numéro du groupe de capture. Notez que vous pouvez déterminer les groupes numérotés sont présents dans une expression régulière en appelant l’instance <xref:System.Text.RegularExpressions.Regex.GetGroupNumbers%2A?displayProperty=nameWithType> (méthode).  
  
-   Vous pouvez utiliser le <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29?displayProperty=nameWithType> propriété à récupérer des groupes par le nom du groupe de capture. Notez que vous pouvez déterminer les groupes nommés sont présents dans une expression régulière en appelant l’instance <xref:System.Text.RegularExpressions.Regex.GetGroupNames?displayProperty=nameWithType> (méthode).  
  
   
  
## Examples  
 Les exemples suivants utilisent l’expression régulière `Console\.Write(Line)?`. L'expression régulière est interprétée comme suit :  
  
|||  
|-|-|  
|Console\\. Écriture|Mettre en correspondance la chaîne « Console.Write ». Notez que le «. » caractères sont échappés avec afin qu’il est interprété comme un point littéral et non comme un caractère générique qui correspond à n’importe quel caractère.|  
|(Ligne) ?|Mettre en correspondance zéro ou une occurrence de la chaîne « Line ».|  
  
 **Exemple 1**  
  
 L’exemple suivant appelle la <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29?displayProperty=nameWithType> méthode pour récupérer toutes les correspondances de modèle dans une chaîne d’entrée. Il effectue ensuite une itération le <xref:System.Text.RegularExpressions.Match> objets retourné <xref:System.Text.RegularExpressions.MatchCollection> objet pour afficher des informations sur chaque correspondance.  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/cs/Match2.cs#2)]
 [!code-vb[System.Text.RegularExpressions.Match.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/vb/Match2.vb#2)]  
  
 **Exemple 2**  
  
 L’exemple suivant appelle la <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%29> et <xref:System.Text.RegularExpressions.Match.NextMatch%2A> méthodes pour extraire une correspondance à la fois.  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/cs/Match3.cs#3)]
 [!code-vb[System.Text.RegularExpressions.Match.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/vb/Match3.vb#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Text.RegularExpressions.MatchCollection" />
    <altmember cref="T:System.Text.RegularExpressions.Regex" />
  </Docs>
  <Members>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static System.Text.RegularExpressions.Match Empty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Text.RegularExpressions.Match Empty" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Match.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Empty As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Text::RegularExpressions::Match ^ Empty { System::Text::RegularExpressions::Match ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Empty : System.Text.RegularExpressions.Match" Usage="System.Text.RegularExpressions.Match.Empty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le groupe vide. Toutes les correspondances infructueuses retournent cette correspondance vide.</summary>
        <value>Correspondance vide.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété ne doit pas être utilisée pour déterminer si une correspondance est réussie. Au lieu de cela, utilisez le `Match.Success` propriété (héritée de <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType>).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Groups">
      <MemberSignature Language="C#" Value="public virtual System.Text.RegularExpressions.GroupCollection Groups { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.RegularExpressions.GroupCollection Groups" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Match.Groups" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Groups As GroupCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Text::RegularExpressions::GroupCollection ^ Groups { System::Text::RegularExpressions::GroupCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Groups : System.Text.RegularExpressions.GroupCollection" Usage="System.Text.RegularExpressions.Match.Groups" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.GroupCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une collection de groupes correspondant à l’expression régulière.</summary>
        <value>Groupes de caractères correspondant au modèle.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un modèle d’expression régulière peut inclure des sous-expressions, qui sont définies en plaçant une partie du modèle d’expression régulière entre parenthèses. Chaque sous-expression de ce type constitue un groupe. Le <xref:System.Text.RegularExpressions.Match.Groups%2A> propriété fournit l’accès aux informations sur les correspondances de sous-expressions. Par exemple, le modèle d’expression régulière `(\d{3})-(\d{3}-\d{4})`, qui correspond à des numéros de téléphone d’Amérique du Nord, a deux sous-expressions. Le premier se compose du code de zone, qui se compose les trois premiers chiffres du numéro de téléphone. Ce groupe est capturé par la première partie de l’expression régulière, `(\d{3})`. Le deuxième se compose le numéro de téléphone individuel, qui compose les sept derniers chiffres du numéro de téléphone. Ce groupe est capturé par la deuxième partie de l’expression régulière, `(\d{3}-\d{4})`. Ces deux groupes peuvent ensuite être récupérés à partir de la <xref:System.Text.RegularExpressions.GroupCollection> objet qui est retourné par la <xref:System.Text.RegularExpressions.Match.Groups%2A> propriété, comme le montre l’exemple suivant.  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Groups#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.match.groups/cs/groups1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Match.Groups#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.match.groups/vb/groups1.vb#1)]  
  
 Le <xref:System.Text.RegularExpressions.GroupCollection> objet retourné par la <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType> propriété est un objet de collection de base zéro qui a toujours au moins un membre. Si le moteur d’expression régulière ne peut pas trouver de correspondances dans une chaîne d’entrée particulière, le <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType> propriété du seul <xref:System.Text.RegularExpressions.Group> objet dans la collection (l’objet à l’index 0) est définie sur `false` et <xref:System.Text.RegularExpressions.Group> objet <xref:System.Text.RegularExpressions.Capture.Value%2A>propriété est définie sur <xref:System.String.Empty?displayProperty=nameWithType>. Si le moteur d’expression régulière peut trouver une correspondance, le premier élément de la <xref:System.Text.RegularExpressions.GroupCollection> objet (l’élément à l’index 0) retourné par la <xref:System.Text.RegularExpressions.Match.Groups%2A> propriété contient une chaîne qui correspond au modèle d’expression régulière entière. Chaque élément suivant, à partir de l’index un vers le haut, représente un groupe capturé, si l’expression régulière comprend des groupes de capture. Pour plus d’informations, consultez la section « Regroupement construit et objets d’Expression régulière » de la [constructions de regroupement](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md) article.  
  
   
  
## Examples  
 L’exemple suivant tente de correspondre à un modèle d’expression régulière par rapport à un exemple de chaîne. L’exemple utilise le <xref:System.Text.RegularExpressions.Match.Groups%2A> propriété pour stocker les informations récupérées par la correspondance pour l’affichage dans la console.  
  
 [!code-cpp[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/cpp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cpp/snippet8.cpp#8)]
 [!code-csharp[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/csharp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cs/snippet8.cs#8)]
 [!code-vb[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/regex match, nextmatch, groups, captures/vb/snippet8.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NextMatch">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.Match NextMatch ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.RegularExpressions.Match NextMatch() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Match.NextMatch" />
      <MemberSignature Language="VB.NET" Value="Public Function NextMatch () As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::RegularExpressions::Match ^ NextMatch();" />
      <MemberSignature Language="F#" Value="member this.NextMatch : unit -&gt; System.Text.RegularExpressions.Match" Usage="match.NextMatch " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retourne un nouvel objet <see cref="T:System.Text.RegularExpressions.Match" /> avec les résultats de la correspondance suivante, en commençant à la position à laquelle la dernière correspondance s'est terminée (au niveau du caractère qui se trouve après le dernier caractère correspondant).</summary>
        <returns>Correspondance d'expression régulière suivante.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode est similaire à l’appel <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> et au passage (`Index+Length`) en tant que la nouvelle position de départ.  
  
> [!NOTE]
>  Cette méthode ne modifie pas l’instance actuelle. Au lieu de cela, il retourne un nouvel <xref:System.Text.RegularExpressions.Match> objet qui contient des informations sur la correspondance suivante.  
  
 Tentative de récupération de la correspondance suivante peut lever une <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> si une valeur de délai d’attente pour les opérations correspondantes est activée et que la tentative de recherche la correspondance suivante dépasse ce délai d’attente.  
  
   
  
## Examples  
 L’exemple suivant utilise la <xref:System.Text.RegularExpressions.Match.NextMatch%2A> méthode pour capturer l’expression régulière correspond à au-delà de la première correspondance.  
  
 [!code-cpp[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/cpp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cpp/snippet8.cpp#8)]
 [!code-csharp[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/csharp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cs/snippet8.cs#8)]
 [!code-vb[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/regex match, nextmatch, groups, captures/vb/snippet8.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Un délai d’attente a expiré.</exception>
        <block subset="none" type="usage"><para>Lorsqu’une tentative de correspondance est répétée en appelant le <see cref="M:System.Text.RegularExpressions.Match.NextMatch" /> méthode, le moteur d’expression régulière donne les correspondances vides un traitement spécial. En règle générale, <see cref="M:System.Text.RegularExpressions.Match.NextMatch" /> commence la recherche de la correspondance suivante exactement là où la correspondance précédente était arrêtée. Toutefois, après une correspondance vide, le <see cref="M:System.Text.RegularExpressions.Match.NextMatch" /> méthode avance d’un caractère avant d’essayer la correspondance suivante. Ce comportement garantit que le moteur d’expression régulière doit suivre la chaîne. Sinon, car aucun déplacement vers l’avant n’entraîne pas une correspondance vide, la correspondance suivante commencerait exactement au même endroit que la correspondance précédente, et elle doit correspondre à plusieurs reprises à la même chaîne vide.  
  
L'exemple suivant illustre cette situation. Le modèle d’expression régulière <c>un *</c> recherche zéro ou plusieurs occurrences de la lettre « a » dans la chaîne « abaabb ». Comme le montre la sortie de l’exemple, la recherche trouve six correspondances. La première tentative de correspondance recherche le premier « a ». La deuxième correspondance démarre exactement où la première correspondance se termine, avant le premier b ; il trouve aucune occurrence de « a » et retourne une chaîne vide. La troisième correspondance ne commence pas exactement où la deuxième correspondance s’est terminée, car la deuxième correspondance a retourné une chaîne vide. Au lieu de cela, il commence un caractère plus tard, après le premier « b ». La troisième correspondance trouve deux occurrences de « a » et retourne « aa ». La quatrième correspondance commence là où s’est terminée la troisième, avant le deuxième « b » et retourne une chaîne vide. La cinquième tentative de correspondance avance un caractère afin qu’il commence avant le troisième « b » et retourne une chaîne vide. La sixième correspondance commence après le dernier « b » et retourne une chaîne vide à nouveau.  
  
[ ! code-csharp[System.Text.RegularExpressions.Match.NextMatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.match.nextmatch/cs/nextmatch1.cs#1)] [ ! code-vb[System.Text.RegularExpressions.Match.NextMatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.match.nextmatch/vb/nextmatch1.vb#1)]</para></block>
      </Docs>
    </Member>
    <Member MemberName="Result">
      <MemberSignature Language="C#" Value="public virtual string Result (string replacement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Result(string replacement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Match.Result(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Result (replacement As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ Result(System::String ^ replacement);" />
      <MemberSignature Language="F#" Value="abstract member Result : string -&gt; string&#xA;override this.Result : string -&gt; string" Usage="match.Result replacement" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="replacement" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="replacement">Modèle de remplacement à utiliser.</param>
        <summary>Retourne l’extension du modèle de remplacement spécifié.</summary>
        <returns>Version développée du paramètre <paramref name="replacement" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tandis que le <xref:System.Text.RegularExpressions.Regex.Replace%2A?displayProperty=nameWithType> méthode remplace toutes les correspondances dans une chaîne d’entrée avec un modèle de remplacement spécifié, la <xref:System.Text.RegularExpressions.Match.Result%2A> méthode remplace une correspondance unique avec un modèle de remplacement spécifié. Car elle fonctionne sur une correspondance individuelle, il est également possible d’effectuer un traitement sur la chaîne correspondante avant d’appeler le <xref:System.Text.RegularExpressions.Match.Result%2A> (méthode).  
  
 Le `replacement` paramètre est un modèle de remplacement d’expression régulière standard. Il peut être composé de caractères littéraux et les substitutions d’expression régulière. Pour plus d'informations, consultez [Substitutions](~/docs/standard/base-types/substitutions-in-regular-expressions.md).  
  
   
  
## Examples  
 L’exemple suivant remplace les traits d’union qui commencent et terminent une expression entre parenthèses avec des parenthèses.  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Result#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.match.result/cs/result1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Match.Result#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.match.result/vb/result1.vb#1)]  
  
 Le modèle d'expression régulière `--(.+?)--` est interprété comme indiqué dans le tableau suivant.  
  
|Motif|Description |  
|-------------|-----------------|  
|`--`|Mettre en correspondance deux traits d’union.|  
|`(.+?)`|Correspond à n’importe quel caractère une ou plusieurs fois, mais le moins possible. Il s'agit du premier groupe de capture.|  
|`--`|Mettre en correspondance deux traits d’union.|  
  
 Notez que le modèle d’expression régulière `--(.+?)--` utilise le quantificateur paresseux `+?`. Si le quantificateur gourmand `+` ont été utilisés au lieu de cela, le moteur d’expression régulière trouveriez qu’une correspondance unique dans la chaîne d’entrée.  
  
 La chaîne de remplacement `($1)` remplace la correspondance avec le premier groupe capturé est placée entre parenthèses.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="replacement" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.NotSupportedException">Le déploiement n'est pas autorisé pour ce modèle.</exception>
        <altmember cref="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String)" />
        <related type="Article" href="https://msdn.microsoft.com/library/d1f52431-1c7d-4dc6-8792-6b988256892e">Substitutions</related>
      </Docs>
    </Member>
    <Member MemberName="Synchronized">
      <MemberSignature Language="C#" Value="public static System.Text.RegularExpressions.Match Synchronized (System.Text.RegularExpressions.Match inner);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.RegularExpressions.Match Synchronized(class System.Text.RegularExpressions.Match inner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Match.Synchronized(System.Text.RegularExpressions.Match)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Synchronized (inner As Match) As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::RegularExpressions::Match ^ Synchronized(System::Text::RegularExpressions::Match ^ inner);" />
      <MemberSignature Language="F#" Value="static member Synchronized : System.Text.RegularExpressions.Match -&gt; System.Text.RegularExpressions.Match" Usage="System.Text.RegularExpressions.Match.Synchronized inner" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inner" Type="System.Text.RegularExpressions.Match" />
      </Parameters>
      <Docs>
        <param name="inner">Correspondance d'expression régulière équivalente à celle attendue.</param>
        <summary>Retourne une instance de <see cref="T:System.Text.RegularExpressions.Match" /> équivalente à celle qui est fournie, dont le partage entre plusieurs threads est possible.</summary>
        <returns>Correspondance d'expression régulière pouvant être partagée entre plusieurs threads.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="inner" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>