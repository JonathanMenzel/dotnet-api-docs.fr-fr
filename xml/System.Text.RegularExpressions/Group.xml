<Type Name="Group" FullName="System.Text.RegularExpressions.Group">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6d20cf1f95643ad86282bc01bfd718f38a4c187a" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="37754983" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Group : System.Text.RegularExpressions.Capture" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Group extends System.Text.RegularExpressions.Capture" />
  <TypeSignature Language="DocId" Value="T:System.Text.RegularExpressions.Group" />
  <TypeSignature Language="VB.NET" Value="Public Class Group&#xA;Inherits Capture" />
  <TypeSignature Language="C++ CLI" Value="public ref class Group : System::Text::RegularExpressions::Capture" />
  <TypeSignature Language="F#" Value="type Group = class&#xA;    inherit Capture" />
  <AssemblyInfo>
    <AssemblyName>System.Text.RegularExpressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Text.RegularExpressions.Capture</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Représente les résultats d'un groupe de capture spécifique.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un groupe de capture peut capturer zéro, une ou plusieurs chaînes dans une correspondance unique à cause des quantificateurs. (Pour plus d’informations, consultez [quantificateurs](~/docs/standard/base-types/quantifiers-in-regular-expressions.md).) Toutes les sous-chaînes correspondant à un groupe de capture unique sont disponibles à partir de la <xref:System.Text.RegularExpressions.Group.Captures%2A?displayProperty=nameWithType> propriété. Plus d’informations sur la dernière sous-chaîne capturée sont accessibles directement à partir de la `Value` et `Index` propriétés. (Qui est, le <xref:System.Text.RegularExpressions.Group> instance équivaut au dernier élément de la collection retournée par la <xref:System.Text.RegularExpressions.Group.Captures%2A> propriété, qui reflète la dernière capture effectuée par le groupe de capture.)  
  
 Un exemple aide à clarifier cette relation entre un <xref:System.Text.RegularExpressions.Group> objet et le <xref:System.Text.RegularExpressions.CaptureCollection?displayProperty=nameWithType> qui est retourné par la <xref:System.Text.RegularExpressions.Group.Captures%2A> propriété. Le modèle d’expression régulière `(\b(\w+?)[,:;]?\s?)+[?.!]` correspond aux phrases entières. L'expression régulière est définie comme indiqué dans le tableau suivant.  
  
|Motif|Description |  
|-------------|-----------------|  
|`\b`|Commencer la correspondance à la limite d'un mot.|  
|`(\w+?)`|Correspond à un ou plusieurs caractères alphabétiques, mais le moins de caractères possible. Il s’agit du deuxième groupe de capture (interne). (Le premier groupe de capture inclut le `\b` élément de langage.)|  
|`[,:;]?`|Correspond à zéro ou une occurrence d’une virgule, un signe deux-points ou un point-virgule.|  
|`\s?`|Correspond à zéro ou une occurrence d’un caractère d’espace blanc.|  
|`(\b(\w+?)[,:;]?\s?)+`|Mettre en correspondance consistant en un caractère d’espace blanc, un symbole de ponctuation, une limite de mot et un ou plusieurs caractères alphabétiques une ou plusieurs fois. Il s'agit du premier groupe de capture.|  
|`[?.!]`|Correspond à n’importe quelle occurrence d’une période, un point d’interrogation ou un point d’exclamation.|  
  
 Dans ce modèle d’expression régulière, le sous-modèle `(\w+?)` est conçu pour correspondre à plusieurs mots dans une phrase. Toutefois, la valeur de la <xref:System.Text.RegularExpressions.Group> objet représente uniquement la dernière correspondance qui `(\w+?)` capture, alors que le <xref:System.Text.RegularExpressions.Group.Captures%2A> propriété retourne un <xref:System.Text.RegularExpressions.CaptureCollection> qui représente tout le texte capturé. Comme le montre la sortie, le <xref:System.Text.RegularExpressions.CaptureCollection> pour le deuxième groupe de capture contient quatre objets. Le dernier d'entre eux correspond à la <xref:System.Text.RegularExpressions.Group> objet.  
  
 [!code-csharp[System.Text.RegularExpressions.Group.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.group.class/cs/groupandcaptures1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Group.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.group.class/vb/groupandcaptures1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Captures">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.CaptureCollection Captures { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.RegularExpressions.CaptureCollection Captures" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Group.Captures" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Captures As CaptureCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::RegularExpressions::CaptureCollection ^ Captures { System::Text::RegularExpressions::CaptureCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Captures : System.Text.RegularExpressions.CaptureCollection" Usage="System.Text.RegularExpressions.Group.Captures" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.CaptureCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une collection de toutes les captures correspondant au groupe de capture, dans l'ordre du plus profond et du plus à gauche (ou dans l'ordre du plus profond et du plus à droite, si l'expression régulière est modifiée par l'option <see cref="F:System.Text.RegularExpressions.RegexOptions.RightToLeft" />). La collection peut contenir entre zéro et plusieurs éléments.</summary>
        <value>Collection de sous-chaînes correspondant au groupe.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si un quantificateur n’est pas appliqué à une capture de groupe, la collection retournée par la <xref:System.Text.RegularExpressions.Group.Captures%2A> propriété contienne un seul <xref:System.Text.RegularExpressions.Capture> objet qui fournit des informations sur la même sous-chaîne en tant que le <xref:System.Text.RegularExpressions.Group> objet. L'exemple suivant illustre cette opération. Il définit une expression régulière, `\b(\w+)\b`, qui extrait un mot d’une phrase. Le <xref:System.Text.RegularExpressions.Group> objet capture le mot « This » et l’objet unique dans le <xref:System.Text.RegularExpressions.CaptureCollection> contient des informations sur la même capture.  
  
 [!code-csharp[System.Text.RegularExpressions.Group.Captures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.group.captures/cs/captures1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Group.Captures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.group.captures/vb/captures1.vb#1)]  
  
 La véritable utilité de la <xref:System.Text.RegularExpressions.Group.Captures%2A> propriété se produit lorsqu’un quantificateur est appliqué à un groupe de capture afin que le groupe de capture plusieurs sous-chaînes dans une expression régulière unique. Dans ce cas, le <xref:System.Text.RegularExpressions.Group> objet contient des informations sur la dernière sous-chaîne capturée, tandis que le <xref:System.Text.RegularExpressions.Group.Captures%2A> propriété contient des informations sur toutes les sous-chaînes capturées par le groupe. Dans l’exemple suivant, l’expression régulière `\b(\w+\s*)+\.` correspond à une phrase entière qui se termine par un point. Le groupe `(\w+\s*)+` capture les mots individuels dans la collection. Étant donné que le <xref:System.Text.RegularExpressions.Group> collection contient uniquement des informations sur la dernière sous-chaîne capturée, elle capture le dernier mot dans la phrase, « phrase ». Toutefois, chaque mot capturé par le groupe est disponible à partir de la collection retournée par la <xref:System.Text.RegularExpressions.Group.Captures%2A> propriété.  
  
 [!code-csharp[System.Text.RegularExpressions.Group.Captures#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.group.captures/cs/captures2.cs#2)]
 [!code-vb[System.Text.RegularExpressions.Group.Captures#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.group.captures/vb/captures2.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Group.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Text.RegularExpressions.Group.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Retourne le nom du groupe de capture représenté par l’instance actuelle.</summary>
        <value>Le nom du groupe de capture représenté par l’instance actuelle.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Success">
      <MemberSignature Language="C#" Value="public bool Success { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Success" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Group.Success" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Success As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Success { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Success : bool" Usage="System.Text.RegularExpressions.Group.Success" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur indiquant si la correspondance est réussie.</summary>
        <value>
          <see langword="true" /> si la correspondance réussit ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `Success` propriété a la valeur true si au moins une sous-chaîne est capturée par ce groupe. Elle est équivalente à l’expression booléenne (Group.Captures.Count > 0).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Synchronized">
      <MemberSignature Language="C#" Value="public static System.Text.RegularExpressions.Group Synchronized (System.Text.RegularExpressions.Group inner);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.RegularExpressions.Group Synchronized(class System.Text.RegularExpressions.Group inner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Group.Synchronized(System.Text.RegularExpressions.Group)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Synchronized (inner As Group) As Group" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::RegularExpressions::Group ^ Synchronized(System::Text::RegularExpressions::Group ^ inner);" />
      <MemberSignature Language="F#" Value="static member Synchronized : System.Text.RegularExpressions.Group -&gt; System.Text.RegularExpressions.Group" Usage="System.Text.RegularExpressions.Group.Synchronized inner" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Group</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inner" Type="System.Text.RegularExpressions.Group" />
      </Parameters>
      <Docs>
        <param name="inner">Objet <see cref="T:System.Text.RegularExpressions.Group" /> d'entrée.</param>
        <summary>Retourne un objet <see langword="Group" /> équivalant à celui qui est fourni, dont le partage entre plusieurs threads est sécurisé.</summary>
        <returns>Objet <see langword="Group" /> de l'expression régulière.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="inner" /> est <see langword="null" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>