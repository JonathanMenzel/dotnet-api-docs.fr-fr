<Type Name="Capture" FullName="System.Text.RegularExpressions.Capture">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6bd094fcd16b7f605955b6f1e9e71ca2a9b2584a" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36408307" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Capture" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Capture extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Text.RegularExpressions.Capture" />
  <TypeSignature Language="VB.NET" Value="Public Class Capture" />
  <TypeSignature Language="C++ CLI" Value="public ref class Capture" />
  <TypeSignature Language="F#" Value="type Capture = class" />
  <AssemblyInfo>
    <AssemblyName>System.Text.RegularExpressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Représente le résultat d'une capture de sous-expression unique ayant réussi.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Text.RegularExpressions.Capture> objet est immuable et n’a aucun constructeur public. Les instances sont retournées via la <xref:System.Text.RegularExpressions.CaptureCollection> objet, qui est retourné par la `Match.Captures` et <xref:System.Text.RegularExpressions.Group.Captures%2A?displayProperty=nameWithType> propriétés. Toutefois, le `Match.Captures` propriété fournit des informations sur la même correspondance que le <xref:System.Text.RegularExpressions.Match> objet.  
  
 Si vous n’appliquez pas un à un groupe de capture, la <xref:System.Text.RegularExpressions.Group.Captures%2A?displayProperty=nameWithType> propriété retourne un <xref:System.Text.RegularExpressions.CaptureCollection> avec une seule <xref:System.Text.RegularExpressions.Capture> objet qui fournit des informations sur la même capture que le <xref:System.Text.RegularExpressions.Group> objet. Si vous appliquez un quantificateur à un groupe de capture, la `Group.Index`, `Group.Length`, et `Group.Value` propriétés fournissent des informations uniquement sur le dernier groupe capturé, alors que le <xref:System.Text.RegularExpressions.Capture> des objets dans le <xref:System.Text.RegularExpressions.CaptureCollection> fournissent des informations sur toutes les capture de sous-expression. Cet exemple en fournit une illustration.  
  
   
  
## Examples  
 L’exemple suivant définit une expression régulière qui correspond aux phrases qui ne contiennent aucune ponctuation à l’exception d’un point («. »).  
  
 [!code-csharp[System.Text.RegularExpressions.Capture.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.capture.class/cs/example1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Capture.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.capture.class/vb/example1.vb#1)]  
  
 Le modèle d'expression régulière `((\w+)[\s.])+` est défini comme indiqué dans le tableau suivant. Notez que dans cette expression régulière, un quantificateur (+) est appliqué à l’expression régulière entière.  
  
|Motif|Description |  
|-------------|-----------------|  
|`(\w+)`|Mettre en correspondance un ou plusieurs caractères alphabétiques. Il s'agit du deuxième groupe de capture.|  
|`[\s.])`|Correspond à un espace blanc ou un point («. »).|  
|`((\w+)[\s.])`|Correspond à un ou plusieurs caractères alphabétiques suivis par un espace blanc ou un point («. »). Il s'agit du premier groupe de capture.|  
|`((\w+)[\s.])+`|Correspond à une ou plusieurs occurrences d’un caractère alphabétique ou de caractères suivi d’un espace blanc ou un point («. »).|  
  
 Dans cet exemple, la chaîne d’entrée se compose de deux phrases. Comme le montre la sortie, la première phrase se compose d’un mot, donc la <xref:System.Text.RegularExpressions.CaptureCollection> objet comporte un seul <xref:System.Text.RegularExpressions.Capture> objet qui représente la même capture que le <xref:System.Text.RegularExpressions.Group> objet. La deuxième phrase se compose de plusieurs mots, donc la <xref:System.Text.RegularExpressions.Group> objets contiennent uniquement des informations sur la dernière sous-expression mise en correspondance. Groupe 1, qui représente la première capture, contient le dernier mot dans la phrase qui a une période de clôture. Groupe 2, qui représente la deuxième capture, contient le dernier mot dans la phrase. Toutefois, le <xref:System.Text.RegularExpressions.Capture> objets du groupe <xref:System.Text.RegularExpressions.CaptureCollection> objet capture chaque correspondance de sous-expression. Le <xref:System.Text.RegularExpressions.Capture> objets de collection de la capture du premier groupe de capture contiennent des informations sur chaque mot capturé et un caractère d’espace blanc ou un point. Le <xref:System.Text.RegularExpressions.Capture> objets de collection de la capture du second groupe de capture contiennent des informations sur chaque mot capturé.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Text.RegularExpressions.CaptureCollection" />
  </Docs>
  <Members>
    <Member MemberName="Index">
      <MemberSignature Language="C#" Value="public int Index { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Index" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Capture.Index" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Index As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Index { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Index : int" Usage="System.Text.RegularExpressions.Capture.Index" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Position dans la chaîne d'origine où se trouve le premier caractère de la sous-chaîne capturée.</summary>
        <value>Position de départ de base zéro dans la chaîne d'origine où est trouvée la sous-chaîne capturée.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public int Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Length" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Capture.Length" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Length As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Length { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Length : int" Usage="System.Text.RegularExpressions.Capture.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la longueur de la sous-chaîne capturée.</summary>
        <value>Longueur de la sous-chaîne capturée.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Capture.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="capture.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Récupère la sous-chaîne capturée de la chaîne d'entrée en appelant la propriété <see cref="P:System.Text.RegularExpressions.Capture.Value" />.</summary>
        <returns>Sous-chaîne qui a été capturée par la correspondance.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `ToString` est en fait un appel interne à la <xref:System.Text.RegularExpressions.Capture.Value%2A> propriété.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public string Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Value" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Capture.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Value { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : string" Usage="System.Text.RegularExpressions.Capture.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la sous-chaîne capturée à partir de la chaîne d'entrée.</summary>
        <value>Sous-chaîne qui est capturée par la correspondance.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si un appel à la <xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=nameWithType> ou <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType> méthode ne peut pas trouver de correspondance, la valeur de retourné `Match.Value` propriété est <xref:System.String.Empty?displayProperty=nameWithType>. Si le moteur d’expression régulière ne peut pas correspondre à un groupe de capture. la valeur de retourné `Group.Value` propriété est <xref:System.String.Empty?displayProperty=nameWithType>. Consultez le deuxième exemple pour obtenir une illustration.  
  
   
  
## Examples  
 L’exemple suivant définit une expression régulière qui correspond aux phrases qui ne contiennent aucune ponctuation à l’exception d’un point («. »). Le `Match.Value` propriété affiche la chaîne de résultat, qui se compose d’une phrase correspondante, pour chaque correspondance. Le `Group.Value` propriété affiche la chaîne de résultat pour chaque groupe de capture ; il se compose de la dernière chaîne capturée par ce groupe de capture. Le <xref:System.Text.RegularExpressions.Capture.Value%2A?displayProperty=nameWithType> propriété affiche la chaîne de résultat pour chaque capture.  
  
 [!code-csharp[System.Text.RegularExpressions.Capture.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.capture.class/cs/example1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Capture.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.capture.class/vb/example1.vb#1)]  
  
 Le modèle d'expression régulière `((\w+)[\s.])+` est défini comme indiqué dans le tableau suivant. Notez que dans cette expression régulière, un quantificateur (+) est appliqué à l’expression régulière entière.  
  
|Motif|Description |  
|-------------|-----------------|  
|`(\w+)`|Mettre en correspondance un ou plusieurs caractères alphabétiques. Il s'agit du deuxième groupe de capture.|  
|`[\s.])`|Correspond à un espace blanc ou un point («. »).|  
|`((\w+)[\s.])`|Correspond à un ou plusieurs caractères alphabétiques suivis par un espace blanc ou un point («. »). Il s'agit du premier groupe de capture.|  
|`((\w+)[\s.])+`|Correspond à une ou plusieurs occurrences d’un caractère alphabétique ou de caractères suivi d’un espace blanc ou un point («. »).|  
  
 Dans cet exemple, la chaîne d’entrée se compose de deux phrases. Comme le montre la sortie, la première phrase se compose d’un mot, donc la <xref:System.Text.RegularExpressions.CaptureCollection> objet comporte un seul <xref:System.Text.RegularExpressions.Capture> objet qui représente la même capture que le <xref:System.Text.RegularExpressions.Group> objet. La deuxième phrase se compose de plusieurs mots, donc la <xref:System.Text.RegularExpressions.Group> objets contiennent uniquement des informations sur la dernière sous-expression mise en correspondance. Groupe 1, qui représente la première capture, contient le dernier mot dans la phrase qui a une période de clôture. Groupe 2, qui représente la deuxième capture, contient le dernier mot dans la phrase. Toutefois, le <xref:System.Text.RegularExpressions.Capture> objets du groupe <xref:System.Text.RegularExpressions.CaptureCollection> objet capture chaque correspondance de sous-expression. Le <xref:System.Text.RegularExpressions.Capture> objets de collection de la capture du premier groupe de capture contiennent des informations sur chaque mot capturé et un caractère d’espace blanc ou un point. Le <xref:System.Text.RegularExpressions.Capture> objets de collection de la capture du second groupe de capture contiennent des informations sur chaque mot capturé.  
  
 L’exemple suivant utilise un modèle d’expression régulière, `^([a-z]+)(\d+)*\.([a-z]+(\d)*)$`, pour faire correspondre un numéro de produit qui se compose de deux parties séparées par un point. Les deux parties se composent de caractères alphabétiques suivis de numéros facultatifs. Étant donné que la première chaîne d’entrée ne correspond pas au modèle, la valeur de retourné <xref:System.Text.RegularExpressions.Match?displayProperty=nameWithType> l’objet `Value` propriété est <xref:System.String.Empty?displayProperty=nameWithType>. De même, lorsque le modèle d’expression régulière est impossible de faire correspondre un groupe de capture, la valeur correspondantes <xref:System.Text.RegularExpressions.Group> l’objet `Value` propriété est <xref:System.String.Empty?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Text.RegularExpressions.Capture.Value#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.capture.value/cs/value1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Capture.Value#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.capture.value/vb/value1.vb#1)]  
  
 Le modèle d’expression régulière est défini comme indiqué dans le tableau suivant :  
  
|Motif|Description |  
|-------------|-----------------|  
|`^`|Commencer la correspondance au début de la chaîne.|  
|`([a-z]+)`|Correspond à une ou plusieurs occurrences de n’importe quel caractère à partir d’un à z. Étant donné que le moteur d’expression régulière est passé le <xref:System.Text.RegularExpressions.RegexOptions.IgnoreCase?displayProperty=nameWithType> option, cette comparaison ne respecte pas la casse. Il s'agit du premier groupe de capture.|  
|`(\d+)?`|Mettre en correspondance zéro ou une occurrence d’un ou plusieurs chiffres décimaux. Il s'agit du deuxième groupe de capture.|  
|`\.`|Correspond à un caractère littéral de point.|  
|`([a-z]+`|Correspond à une ou plusieurs occurrences de n’importe quel caractère à partir d’un à z. La comparaison ne respecte pas la casse.|  
|`(\d)*`|Met en correspondance zéro ou plusieurs chiffres décimaux. Un seul chiffre de mise en correspondance est le quatrième groupe de capture.|  
|`([a-z]+(\d)*)`|Correspond à un ou plusieurs caractères alphabétiques à partir d’un à z, suivie de zéro, un ou plusieurs chiffres décimaux. Il s'agit du quatrième groupe de capture.|  
|`$`|Terminer la correspondance à la fin de la chaîne.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>