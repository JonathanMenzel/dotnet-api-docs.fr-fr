<Type Name="TextSource" FullName="System.Windows.Media.TextFormatting.TextSource">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="76043eacf7ed8de3f62ff7b1b2d15f20cfec2461" />
    <Meta Name="ms.sourcegitcommit" Value="9dda17222b9f7d3edf130133bfb1370d5b410a4b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="09/22/2018" />
    <Meta Name="ms.locfileid" Value="46652994" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class TextSource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit TextSource extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Media.TextFormatting.TextSource" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class TextSource" />
  <TypeSignature Language="C++ CLI" Value="public ref class TextSource abstract" />
  <TypeSignature Language="F#" Value="type TextSource = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fournit une classe abstraite pour la spécification de données caractères et de propriétés de mise en forme à utiliser par l'objet <see cref="T:System.Windows.Media.TextFormatting.TextFormatter" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tous les accès à du texte dans le <xref:System.Windows.Media.TextFormatting.TextSource> objet consiste à utiliser le <xref:System.Windows.Media.TextFormatting.TextSource.GetTextRun%2A>, qui est conçu pour permettre au client de disposition de texte virtualiser le texte de la manière voulue.  
  
 <xref:System.Windows.Media.TextFormatting.TextFormatter> est le [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] moteur de texte qui fournit des services de mise en forme de texte et de saut de ligne de texte. <xref:System.Windows.Media.TextFormatting.TextFormatter> peut gérer différents formats de caractères et les styles de paragraphe et inclut la prise en charge pour la disposition du texte international. Contrairement à un texte traditionnelle [!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)], le <xref:System.Windows.Media.TextFormatting.TextFormatter> interagit avec un client de disposition de texte via un ensemble de méthodes de rappel. Il nécessite le client fournisse ces méthodes dans une implémentation de la <xref:System.Windows.Media.TextFormatting.TextSource> classe. La liste suivante décrit les trois membres que vous devez substituer :  
  
-   <xref:System.Windows.Media.TextFormatting.TextSource.GetTextRun%2A>: Récupère un <xref:System.Windows.Media.TextFormatting.TextRun> en commençant à une certaine <xref:System.Windows.Media.TextFormatting.TextSource> position.  
  
-   <xref:System.Windows.Media.TextFormatting.TextSource.GetPrecedingText%2A>: Récupère l’étendue de texte immédiatement avant le texte spécifié <xref:System.Windows.Media.TextFormatting.TextSource> position.  
  
-   <xref:System.Windows.Media.TextFormatting.TextSource.GetTextEffectCharacterIndexFromTextSourceCharacterIndex%2A>: Récupère une valeur qui mappe un <xref:System.Windows.Media.TextFormatting.TextSource> index de caractère pour un <xref:System.Windows.Media.TextEffect> index de caractère.  
  
> [!NOTE]
>  Pour obtenir un exemple de code complet qui montre comment implémenter une dérivée <xref:System.Windows.Media.TextFormatting.TextSource> de classe, consultez [mise en forme de texte avancée, exemple](http://go.microsoft.com/fwlink/?LinkID=159965) .  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Media.TextFormatting.TextFormatter" />
    <related type="ExternalDocumentation" href="http://go.microsoft.com/fwlink/?LinkID=159965">Exemple de mise en forme de texte avancée</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected TextSource ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.TextFormatting.TextSource.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; TextSource();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Media.TextFormatting.TextSource" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPrecedingText">
      <MemberSignature Language="C#" Value="public abstract System.Windows.Media.TextFormatting.TextSpan&lt;System.Windows.Media.TextFormatting.CultureSpecificCharacterBufferRange&gt; GetPrecedingText (int textSourceCharacterIndexLimit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Media.TextFormatting.TextSpan`1&lt;class System.Windows.Media.TextFormatting.CultureSpecificCharacterBufferRange&gt; GetPrecedingText(int32 textSourceCharacterIndexLimit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.TextFormatting.TextSource.GetPrecedingText(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetPrecedingText (textSourceCharacterIndexLimit As Integer) As TextSpan(Of CultureSpecificCharacterBufferRange)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Windows::Media::TextFormatting::TextSpan&lt;System::Windows::Media::TextFormatting::CultureSpecificCharacterBufferRange ^&gt; ^ GetPrecedingText(int textSourceCharacterIndexLimit);" />
      <MemberSignature Language="F#" Value="abstract member GetPrecedingText : int -&gt; System.Windows.Media.TextFormatting.TextSpan&lt;System.Windows.Media.TextFormatting.CultureSpecificCharacterBufferRange&gt;" Usage="textSource.GetPrecedingText textSourceCharacterIndexLimit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.TextFormatting.TextSpan&lt;System.Windows.Media.TextFormatting.CultureSpecificCharacterBufferRange&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textSourceCharacterIndexLimit" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="textSourceCharacterIndexLimit">Valeur <see cref="T:System.Int32" /> qui spécifie la position d'index de caractère où s'arrête la recherche de texte.</param>
        <summary>Récupère l'étendue de texte située immédiatement avant la position <see cref="T:System.Windows.Media.TextFormatting.TextSource" /> spécifiée.</summary>
        <returns>Valeur <see cref="T:System.Windows.Media.TextFormatting.CultureSpecificCharacterBufferRange" /> qui représente l'étendue de texte située immédiatement avant <paramref name="textSourceCharacterIndexLimit" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Media.TextFormatting.TextSource.GetPrecedingText%2A> méthode retourne un vide <xref:System.Windows.Media.TextFormatting.CultureSpecificCharacterBufferRange> si le texte s’étendent sur immédiatement avant `textSourceCharacterIndexLimit` ne contient pas de n’importe quel texte, tels que l’objet en ligne ou d’une série masquée.  
  
 Cette méthode retourne une étendue de texte de longueur nulle si aucune valeur précédente `textSourceCharacterIndexLimit`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTextEffectCharacterIndexFromTextSourceCharacterIndex">
      <MemberSignature Language="C#" Value="public abstract int GetTextEffectCharacterIndexFromTextSourceCharacterIndex (int textSourceCharacterIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetTextEffectCharacterIndexFromTextSourceCharacterIndex(int32 textSourceCharacterIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.TextFormatting.TextSource.GetTextEffectCharacterIndexFromTextSourceCharacterIndex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetTextEffectCharacterIndexFromTextSourceCharacterIndex (textSourceCharacterIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract int GetTextEffectCharacterIndexFromTextSourceCharacterIndex(int textSourceCharacterIndex);" />
      <MemberSignature Language="F#" Value="abstract member GetTextEffectCharacterIndexFromTextSourceCharacterIndex : int -&gt; int" Usage="textSource.GetTextEffectCharacterIndexFromTextSourceCharacterIndex textSourceCharacterIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textSourceCharacterIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="textSourceCharacterIndex">Valeur <see cref="T:System.Int32" /> qui spécifie l'index de caractère <see cref="T:System.Windows.Media.TextFormatting.TextSource" /> à mapper.</param>
        <summary>Récupère une valeur qui mappe un index de caractère <see cref="T:System.Windows.Media.TextFormatting.TextSource" /> sur un index de caractère <see cref="T:System.Windows.Media.TextEffect" />.</summary>
        <returns>Valeur <see cref="T:System.Int32" /> qui représente l'index de caractère <see cref="T:System.Windows.Media.TextEffect" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTextRun">
      <MemberSignature Language="C#" Value="public abstract System.Windows.Media.TextFormatting.TextRun GetTextRun (int textSourceCharacterIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Media.TextFormatting.TextRun GetTextRun(int32 textSourceCharacterIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.TextFormatting.TextSource.GetTextRun(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetTextRun (textSourceCharacterIndex As Integer) As TextRun" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Windows::Media::TextFormatting::TextRun ^ GetTextRun(int textSourceCharacterIndex);" />
      <MemberSignature Language="F#" Value="abstract member GetTextRun : int -&gt; System.Windows.Media.TextFormatting.TextRun" Usage="textSource.GetTextRun textSourceCharacterIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.TextFormatting.TextRun</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textSourceCharacterIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="textSourceCharacterIndex">Spécifie la position de l'index de caractère dans le <see cref="T:System.Windows.Media.TextFormatting.TextSource" /> où le <see cref="T:System.Windows.Media.TextFormatting.TextRun" /> est récupéré.</param>
        <summary>Récupère un <see cref="T:System.Windows.Media.TextFormatting.TextRun" /> démarrant à une position <see cref="T:System.Windows.Media.TextFormatting.TextSource" /> spécifiée.</summary>
        <returns>Valeur qui représente un <see cref="T:System.Windows.Media.TextFormatting.TextRun" />, ou un objet dérivé de <see cref="T:System.Windows.Media.TextFormatting.TextRun" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Une séquence de texte est une séquence de caractères qui partage un seul jeu de propriétés. Toute modification au format, telles que la famille de polices, le style de police, couleur de premier plan, décoration de texte ou tout autre effet mise en forme, les sauts de séquence de texte. Le <xref:System.Windows.Media.TextFormatting.TextRun> classe est la racine d’une hiérarchie de type qui représente plusieurs types de contenu de texte traité par <xref:System.Windows.Media.TextFormatting.TextFormatter>. Chaque classe qui est dérivée de <xref:System.Windows.Media.TextFormatting.TextRun> représente un type distinct de contenu de texte.  
  
|Classe|Description |  
|-----------|-----------------|  
|<xref:System.Windows.Media.TextFormatting.TextRun>|Racine de la hiérarchie. Définit un groupe de caractères qui partagent le même jeu de propriétés de caractères.|  
|<xref:System.Windows.Media.TextFormatting.TextCharacters>|Définit une collection de glyphes de caractères à partir d’une police physique distincte.|  
|<xref:System.Windows.Media.TextFormatting.TextEmbeddedObject>|Définit un type de contenu textuel dans quelle mesure d’accès et le test dessin de l’intégralité du contenu est effectuée comme une entité distincte. Un exemple de ce type de contenu est un bouton au milieu de la ligne de texte.|  
|<xref:System.Windows.Media.TextFormatting.TextEndOfLine>|Définit un code de caractère de saut de ligne.|  
|<xref:System.Windows.Media.TextFormatting.TextEndOfParagraph>|Définit un code de caractère de saut de paragraphe. Dérive de <xref:System.Windows.Media.TextFormatting.TextEndOfLine>.|  
|<xref:System.Windows.Media.TextFormatting.TextEndOfSegment>|Définit un marqueur de saut de segment.|  
|<xref:System.Windows.Media.TextFormatting.TextHidden>|Définit une plage de caractères non visibles.|  
|<xref:System.Windows.Media.TextFormatting.TextModifier>|Définit le début d’une étendue de modification.|  
  
   
  
## Examples  
 Dans l’exemple suivant, un remplacement pour le <xref:System.Windows.Media.TextFormatting.TextSource.GetTextRun%2A> méthode est implémentée.  
  
 [!code-csharp[TextFormattingSnippets#TextFormattingSnippet4](~/samples/snippets/csharp/VS_Snippets_Wpf/TextFormattingSnippets/CSharp/CustomTextClasses.cs#textformattingsnippet4)]
 [!code-vb[TextFormattingSnippets#TextFormattingSnippet4](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextFormattingSnippets/visualbasic/customtextclasses.vb#textformattingsnippet4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PixelsPerDip">
      <MemberSignature Language="C#" Value="public double PixelsPerDip { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 PixelsPerDip" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.TextFormatting.TextSource.PixelsPerDip" />
      <MemberSignature Language="VB.NET" Value="Public Property PixelsPerDip As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double PixelsPerDip { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.PixelsPerDip : double with get, set" Usage="System.Windows.Media.TextFormatting.TextSource.PixelsPerDip" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la valeur PixelsPerDip à laquelle le texte doit être affiché.</summary>
        <value>Valeur de <see cref="P:System.Windows.Media.TextFormatting.TextSource.PixelsPerDip" /> en cours.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Toute classe qui étend <xref:System.Windows.Media.TextFormatting.TextSource> doit mettre à jour <xref:System.Windows.Media.TextFormatting.TextSource.PixelsPerDip%2A> chaque fois que la valeur PPP change pour une application par moniteur reconnaissant les résolutions.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>