<Type Name="NegotiateStream" FullName="System.Net.Security.NegotiateStream">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c14dd401696189bb315395ed828de5f1c0c89ba3" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30461133" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class NegotiateStream : System.Net.Security.AuthenticatedStream" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NegotiateStream extends System.Net.Security.AuthenticatedStream" />
  <TypeSignature Language="DocId" Value="T:System.Net.Security.NegotiateStream" />
  <TypeSignature Language="VB.NET" Value="Public Class NegotiateStream&#xA;Inherits AuthenticatedStream" />
  <TypeSignature Language="C++ CLI" Value="public ref class NegotiateStream : System::Net::Security::AuthenticatedStream" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Security</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Net.Security.AuthenticatedStream</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fournit un flux qui utilise le protocole de sécurité Negotiate pour authentifier le client et éventuellement le serveur, dans les communications client-serveur.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez la <xref:System.Net.Security.NegotiateStream> classe pour l’authentification et pour aider à sécuriser les informations transmises entre un client et un serveur. À l’aide de <xref:System.Net.Security.NegotiateStream>, vous pouvez procédez comme suit.  
  
-   Envoyer des informations d’identification du client au serveur pour l’emprunt d’identité ou la délégation.  
  
-   Demander l’authentification du serveur.  
  
-   Chiffrer ou signer les données avant de les transmettre.  
  
 L’authentification doit être effectuée avant de transmettre des informations. Les clients demandent l’authentification à l’aide de la commande synchrone <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> , ces méthodes bloquent jusqu'à la fin de l’authentification, ou asynchrone <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> , ces méthodes ne bloquent pas pendant l’attente de l’authentification. Demandent d’authentification à l’aide de l’une de serveurs <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> ou asynchrone <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> méthodes. Le client et éventuellement le serveur, est authentifié à l’aide du protocole de sécurité Negotiate. Sur les systèmes Windows 95/98, Windows NT LAN Manager (NTLM) est le protocole utilisé pour l’authentification. Sur d’autres plateformes Kerberos protocole est utilisé pour l’authentification du client et le serveur de prise en charge ; Sinon, NTLM est utilisé. Pour obtenir une description détaillée de ces protocoles, consultez la documentation de développement Platform SDK sur MSDN, à msdn.microsoft.com/library/. La <xref:System.Net.Security.NegotiateStream> classe effectue l’authentification à l’aide de l’Interface de fournisseur de prise en charge de sécurité (SSPI).  
  
 Lorsque l’authentification réussit, vous devez vérifier le <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> et <xref:System.Net.Security.NegotiateStream.IsSigned%2A> propriétés afin de déterminer les services de sécurité seront utilisées par le <xref:System.Net.Security.NegotiateStream> pour aider à sécuriser vos données pendant la transmission. Vérifiez le <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> propriété pour déterminer si l’authentification mutuelle s’est produite. Vous pouvez obtenir des informations sur le client distant ou serveur à l’aide du <xref:System.Net.Security.NegotiateStream.RemoteIdentity%2A> propriété.  
  
 Si l’authentification échoue, vous recevez un <xref:System.Security.Authentication.AuthenticationException> ou <xref:System.Security.Authentication.InvalidCredentialException>. Dans ce cas, vous pouvez réessayer l’authentification avec les informations d’identification différentes.  
  
 Envoyer des données à l’aide de la commande synchrone <xref:System.Net.Security.NegotiateStream.Write%2A> ou asynchrone <xref:System.Net.Security.NegotiateStream.BeginWrite%2A> méthodes. Réception de données à l’aide de la commande synchrone <xref:System.Net.Security.NegotiateStream.Read%2A> ou asynchrone <xref:System.Net.Security.NegotiateStream.BeginRead%2A> méthodes. Si les services de sécurité telles que le chiffrement ou la signature sont activés, ils sont automatiquement appliqués à vos données par le <xref:System.Net.Security.NegotiateStream>.  
  
 Le <xref:System.Net.Security.NegotiateStream> transmet des données à l’aide d’un flux de données que vous fournissez lors de la création du <xref:System.Net.Security.NegotiateStream>. Lorsque vous fournissez ce flux sous-jacent, vous pouvez spécifier si la fermeture du <xref:System.Net.Security.NegotiateStream> ferme également le flux sous-jacent.  
  
   
  
## Examples  
 L’exemple de code suivant montre le côté client d’une connexion client-serveur qui utilise le <xref:System.Net.Security.NegotiateStream>. Le client s’authentifie et envoie un message sur le serveur de façon asynchrone.  
  
 [!code-cpp[NclNegoAsyncClient#0](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#0)]
 [!code-csharp[NclNegoAsyncClient#0](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#0)]  
  
 L’exemple de code suivant montre le côté serveur d’une connexion client-serveur qui utilise le <xref:System.Net.Security.NegotiateStream> pour authentifier le client et de lire un message envoyé par le client.  
  
 [!code-cpp[NclNegoAsyncServer#0](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoAsyncServer/CPP/NclNegoAsyncServer.cpp#0)]
 [!code-csharp[NclNegoAsyncServer#0](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoAsyncServer/CS/server.cs#0)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Net.Security.NegotiateStream" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour empêcher le <xref:System.Net.Security.NegotiateStream> de fermer le flux que vous fournissez, utilisez le <xref:System.Net.Security.NegotiateStream.%23ctor%28System.IO.Stream%2CSystem.Boolean%29> constructeur.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NegotiateStream (System.IO.Stream innerStream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream innerStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.#ctor(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (innerStream As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NegotiateStream(System::IO::Stream ^ innerStream);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="innerStream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="innerStream">Objet <see cref="T:System.IO.Stream" /> utilisé par <see cref="T:System.Net.Security.NegotiateStream" /> pour envoyer et recevoir des données.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Net.Security.NegotiateStream" /> à l'aide du <see cref="T:System.IO.Stream" /> spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant illustre l’appel de ce constructeur.  
  
 [!code-cpp[NclNegoSyncClient#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#3)]
 [!code-csharp[NclNegoSyncClient#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NegotiateStream (System.IO.Stream innerStream, bool leaveInnerStreamOpen);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream innerStream, bool leaveInnerStreamOpen) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.#ctor(System.IO.Stream,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (innerStream As Stream, leaveInnerStreamOpen As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NegotiateStream(System::IO::Stream ^ innerStream, bool leaveInnerStreamOpen);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="innerStream" Type="System.IO.Stream" />
        <Parameter Name="leaveInnerStreamOpen" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="innerStream">Objet <see cref="T:System.IO.Stream" /> utilisé par <see cref="T:System.Net.Security.NegotiateStream" /> pour envoyer et recevoir des données.</param>
        <param name="leaveInnerStreamOpen">
          <see langword="true" /> pour indiquer que la fermeture de ce <see cref="T:System.Net.Security.NegotiateStream" /> n’a aucun effet sur <c>innerstream</c> ; <see langword="false" /> pour indiquer que la fermeture de ce <see cref="T:System.Net.Security.NegotiateStream" /> ferme également <c>innerStream</c>.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Net.Security.NegotiateStream" /> en utilisant le <see cref="T:System.IO.Stream" /> et le comportement de clôture de flux spécifiés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsque vous spécifiez `true` pour le `leaveStreamOpen` paramètre, la fermeture de la <xref:System.Net.Security.NegotiateStream> n’a aucun effet le `innerStream` diffuser en continu ; vous devez fermer explicitement `innerStream` lorsque vous n’avez plus besoin.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’appel de ce constructeur. Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.Net.Security.NegotiateStream> classe.  
  
 [!code-cpp[NclNegoAsyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#1)]
 [!code-csharp[NclNegoAsyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="innerStream" /> est <see langword="null" />.  
  
 \- ou -  
  
 <paramref name="innerStream" /> est égal à <see cref="F:System.IO.Stream.Null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="AuthenticateAsClient">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Appelé par les clients pour authentifier le client, et éventuellement le serveur, dans une connexion client-serveur.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsClient ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsClient() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClient" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsClient ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsClient();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Appelé par les clients pour authentifier le client, et éventuellement le serveur, dans une connexion client-serveur.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’authentification du client utilise le <xref:System.Net.CredentialCache.DefaultCredentials%2A>. Aucun nom de Principal du Service (SPN) est spécifié pour le serveur. Le niveau d’emprunt d’identité est <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, le niveau de sécurité est <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, et l’authentification mutuelle est demandée. La <xref:System.Net.Security.NegotiateStream> classe construit le SPN utilisé pour l’authentification mutuelle.  
  
 Lorsque l’authentification réussit, vous devez vérifier le <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> et <xref:System.Net.Security.NegotiateStream.IsSigned%2A> propriétés pour déterminer les services de sécurité sont utilisés par le <xref:System.Net.Security.NegotiateStream>. Vérifiez le <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> propriété pour déterminer si l’authentification mutuelle s’est produite.  
  
 Si l’authentification échoue, vous recevez un <xref:System.Security.Authentication.AuthenticationException> ou <xref:System.Security.Authentication.InvalidCredentialException>. Dans ce cas, vous pouvez réessayer l’authentification avec les informations d’identification différentes.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException">L'authentification a échoué. Vous pouvez utiliser cet objet pour faire une nouvelle tentative d'authentification.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">L'authentification a échoué. Vous pouvez utiliser cet objet pour faire une nouvelle tentative d'authentification.</exception>
        <exception cref="T:System.ObjectDisposedException">L’objet a été fermé.</exception>
        <exception cref="T:System.InvalidOperationException">L’authentification a déjà eu lieu.  
  
 \- ou -  
  
 Ce flux a été utilisé précédemment pour tenter d'effectuer l'authentification en tant que serveur. Vous ne pouvez pas utiliser le flux pour faire une nouvelle tentative d'authentification en tant que client.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Pour utiliser explicites <see cref="T:System.Net.NetworkCredential" />. Énumération associée : <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, string targetName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsClient(class System.Net.NetworkCredential credential, string targetName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsClient (credential As NetworkCredential, targetName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::String ^ targetName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="targetName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="credential">
          <see cref="T:System.Net.NetworkCredential" /> utilisé pour établir l'identité du client.</param>
        <param name="targetName">Nom de principal du service (SPN) qui identifie de manière unique le serveur à authentifier.</param>
        <summary>Appelé par les clients pour authentifier le client, et éventuellement le serveur, dans une connexion client-serveur. Le processus d'authentification utilise les informations d'identification du client spécifiées.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le niveau d’emprunt d’identité est <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, le niveau de sécurité est <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, et l’authentification mutuelle est demandée. La <xref:System.Net.Security.NegotiateStream> classe construit le SPN utilisé pour l’authentification mutuelle.  
  
 Lorsque l’authentification réussit, vous devez vérifier le <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> et <xref:System.Net.Security.NegotiateStream.IsSigned%2A> propriétés pour déterminer les services de sécurité sont utilisés par le <xref:System.Net.Security.NegotiateStream>. Vérifiez le <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> propriété pour déterminer si l’authentification mutuelle s’est produite.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException">L'authentification a échoué. Vous pouvez utiliser cet objet pour faire une nouvelle tentative d'authentification.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">L'authentification a échoué. Vous pouvez utiliser cet objet pour faire une nouvelle tentative d'authentification.</exception>
        <exception cref="T:System.ObjectDisposedException">L’objet a été fermé.</exception>
        <exception cref="T:System.InvalidOperationException">L’authentification a déjà eu lieu.  
  
 \- ou -  
  
 Ce flux a été utilisé précédemment pour tenter d'effectuer l'authentification en tant que serveur. Vous ne pouvez pas utiliser le flux pour faire une nouvelle tentative d'authentification en tant que client.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetName" /> est <see langword="null" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Pour utiliser explicites <see cref="T:System.Net.NetworkCredential" />. Énumération associée : <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsClient(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsClient (credential As NetworkCredential, binding As ChannelBinding, targetName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ChannelBinding ^ binding, System::String ^ targetName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <Parameter Name="targetName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="credential">
          <see cref="T:System.Net.NetworkCredential" /> utilisé pour établir l'identité du client.</param>
        <param name="binding">
          <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> qui est utilisé comme protection étendue.</param>
        <param name="targetName">Nom de principal du service (SPN) qui identifie de manière unique le serveur à authentifier.</param>
        <summary>Appelé par les clients pour authentifier le client, et éventuellement le serveur, dans une connexion client-serveur. Le processus d'authentification utilise les informations d'identification du client et la liaison de canal spécifiées.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le niveau d’emprunt d’identité est <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, le niveau de sécurité est <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, et l’authentification mutuelle est demandée. La <xref:System.Net.Security.NegotiateStream> classe construit le SPN utilisé pour l’authentification mutuelle.  
  
 Le <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> utilisé pour la protection étendue qui est passée à cette méthode dans le `binding` paramètre serait extrait par une application à partir de <xref:System.Net.Security.SslStream.TransportContext%2A> propriété associé <xref:System.Net.Security.SslStream>.  
  
 Lorsque l’authentification réussit, vous devez vérifier le <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> et <xref:System.Net.Security.NegotiateStream.IsSigned%2A> propriétés pour déterminer les services de sécurité sont utilisés par le <xref:System.Net.Security.NegotiateStream>. Vérifiez le <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> propriété pour déterminer si l’authentification mutuelle s’est produite.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetName" /> est <see langword="null" />.  
  
 \- ou -  
  
 <paramref name="credential" /> est <see langword="null" />.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">L'authentification a échoué. Vous pouvez utiliser cet objet pour faire une nouvelle tentative d'authentification.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">L'authentification a échoué. Vous pouvez utiliser cet objet pour faire une nouvelle tentative d'authentification.</exception>
        <exception cref="T:System.InvalidOperationException">L’authentification a déjà eu lieu.  
  
 \- ou -  
  
 Ce flux a été utilisé précédemment pour tenter d'effectuer l'authentification en tant que serveur. Vous ne pouvez pas utiliser le flux pour faire une nouvelle tentative d'authentification en tant que client.</exception>
        <exception cref="T:System.ObjectDisposedException">L’objet a été fermé.</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsClient(class System.Net.NetworkCredential credential, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsClient (credential As NetworkCredential, targetName As String, requiredProtectionLevel As ProtectionLevel, allowedImpersonationLevel As TokenImpersonationLevel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::String ^ targetName, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential">
          <see cref="T:System.Net.NetworkCredential" /> utilisé pour établir l'identité du client.</param>
        <param name="targetName">Nom de principal du service (SPN) qui identifie de manière unique le serveur à authentifier.</param>
        <param name="requiredProtectionLevel">L'une des valeurs <see cref="T:System.Net.Security.ProtectionLevel" />, indiquant les services de sécurité pour le flux.</param>
        <param name="allowedImpersonationLevel">L'une des valeurs <see cref="T:System.Security.Principal.TokenImpersonationLevel" />, indiquant comment le serveur peut utiliser les informations d'identification du client pour accéder aux ressources.</param>
        <summary>Appelé par les clients pour authentifier le client, et éventuellement le serveur, dans une connexion client-serveur. Le processus d'authentification utilise les options d'authentification et les informations d'identification spécifiées.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le `requiredProtectionLevel` paramètre pour demander des services de sécurité pour les données transmises à l’aide du flux authentifié. Par exemple, pour que les données chiffrées et signées, spécifiez la <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> valeur. Authentification réussie ne garantit pas que demandé <xref:System.Net.Security.ProtectionLevel> a été accordé. Vous devez vérifier le <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> et <xref:System.Net.Security.NegotiateStream.IsSigned%2A> propriétés pour déterminer les services de sécurité sont utilisés par le <xref:System.Net.Security.NegotiateStream>.  
  
 Si l’authentification échoue, vous recevez un <xref:System.Security.Authentication.AuthenticationException> ou <xref:System.Security.Authentication.InvalidCredentialException>. Dans ce cas, vous pouvez réessayer l’authentification avec les informations d’identification différentes.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="allowedImpersonationLevel" /> n’est pas une valeur valide.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetName" /> a la valeur null.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">L'authentification a échoué. Vous pouvez utiliser cet objet pour faire une nouvelle tentative d'authentification.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">L'authentification a échoué. Vous pouvez utiliser cet objet pour faire une nouvelle tentative d'authentification.</exception>
        <exception cref="T:System.ObjectDisposedException">L’objet a été fermé.</exception>
        <exception cref="T:System.InvalidOperationException">L’authentification a déjà eu lieu.  
  
 \- ou -  
  
 Ce flux a été utilisé précédemment pour tenter d'effectuer l'authentification en tant que serveur. Vous ne pouvez pas utiliser le flux pour faire une nouvelle tentative d'authentification en tant que client.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Pour utiliser explicites <see cref="T:System.Net.NetworkCredential" />. Énumération associée : <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsClient(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsClient (credential As NetworkCredential, binding As ChannelBinding, targetName As String, requiredProtectionLevel As ProtectionLevel, allowedImpersonationLevel As TokenImpersonationLevel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ChannelBinding ^ binding, System::String ^ targetName, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential">
          <see cref="T:System.Net.NetworkCredential" /> utilisé pour établir l'identité du client.</param>
        <param name="binding">
          <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> qui est utilisé comme protection étendue.</param>
        <param name="targetName">Nom de principal du service (SPN) qui identifie de manière unique le serveur à authentifier.</param>
        <param name="requiredProtectionLevel">L'une des valeurs <see cref="T:System.Net.Security.ProtectionLevel" />, indiquant les services de sécurité pour le flux.</param>
        <param name="allowedImpersonationLevel">L'une des valeurs <see cref="T:System.Security.Principal.TokenImpersonationLevel" />, indiquant comment le serveur peut utiliser les informations d'identification du client pour accéder aux ressources.</param>
        <summary>Appelé par les clients pour authentifier le client, et éventuellement le serveur, dans une connexion client-serveur. Le processus d'authentification utilise les informations d'identification du client, les options d'authentification et la liaison de canal spécifiées.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le `requiredProtectionLevel` paramètre pour demander des services de sécurité pour les données transmises à l’aide du flux authentifié. Par exemple, pour que les données chiffrées et signées, spécifiez la <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> valeur. Authentification réussie ne garantit pas que demandé <xref:System.Net.Security.ProtectionLevel> a été accordé. Vous devez vérifier le <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> et <xref:System.Net.Security.NegotiateStream.IsSigned%2A> propriétés pour déterminer les services de sécurité sont utilisés par le <xref:System.Net.Security.NegotiateStream>.  
  
 Le <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> utilisé pour la protection étendue qui est passée à cette méthode dans le `binding` paramètre serait extrait par une application à partir de <xref:System.Net.Security.SslStream.TransportContext%2A> propriété associé <xref:System.Net.Security.SslStream>.  
  
 Si l’authentification échoue, vous recevez un <xref:System.Security.Authentication.AuthenticationException> ou <xref:System.Security.Authentication.InvalidCredentialException>. Dans ce cas, vous pouvez réessayer l’authentification avec les informations d’identification différentes.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetName" /> est <see langword="null" />.  
  
 \- ou -  
  
 <paramref name="credential" /> est <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="allowedImpersonationLevel" /> n’est pas une valeur valide.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">L'authentification a échoué. Vous pouvez utiliser cet objet pour faire une nouvelle tentative d'authentification.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">L'authentification a échoué. Vous pouvez utiliser cet objet pour faire une nouvelle tentative d'authentification.</exception>
        <exception cref="T:System.InvalidOperationException">L’authentification a déjà eu lieu.  
  
 \- ou -  
  
 Ce flux a été utilisé précédemment pour tenter d'effectuer l'authentification en tant que serveur. Vous ne pouvez pas utiliser le flux pour faire une nouvelle tentative d'authentification en tant que client.</exception>
        <exception cref="T:System.ObjectDisposedException">L’objet a été fermé.</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
      </Docs>
    </Member>
    <MemberGroup MemberName="AuthenticateAsClientAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Appelé par les clients pour authentifier le client, et éventuellement le serveur, dans une connexion client-serveur sous forme d'opération asynchrone.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AuthenticateAsClientAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsClientAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsClientAsync () As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsClientAsync();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Appelé par les clients pour authentifier le client, et éventuellement le serveur, dans une connexion client-serveur sous forme d'opération asynchrone.</summary>
        <returns>Retourne <see cref="T:System.Threading.Tasks.Task" />.  
  
 Objet de tâche représentant l'opération asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’authentification du client utilise le <xref:System.Net.CredentialCache.DefaultCredentials%2A>. Aucun nom de Principal du Service (SPN) est spécifié pour le serveur. Le niveau d’emprunt d’identité est <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, le niveau de sécurité est <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, et l’authentification mutuelle est demandée. La <xref:System.Net.Security.NegotiateStream> classe construit le SPN utilisé pour l’authentification mutuelle.  
  
 Lorsque l’authentification réussit, vous devez vérifier le <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> et <xref:System.Net.Security.NegotiateStream.IsSigned%2A> propriétés pour déterminer les services de sécurité sont utilisés par le <xref:System.Net.Security.NegotiateStream>. Vérifiez le <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> propriété pour déterminer si l’authentification mutuelle s’est produite.  
  
 Si l’authentification échoue, vous recevez un <xref:System.Security.Authentication.AuthenticationException> ou <xref:System.Security.Authentication.InvalidCredentialException>. Dans ce cas, vous pouvez réessayer l’authentification avec les informations d’identification différentes.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException">L'authentification a échoué. Vous pouvez utiliser cet objet pour faire une nouvelle tentative d'authentification.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">L'authentification a échoué. Vous pouvez utiliser cet objet pour faire une nouvelle tentative d'authentification.</exception>
        <exception cref="T:System.ObjectDisposedException">L’objet a été fermé.</exception>
        <exception cref="T:System.InvalidOperationException">L’authentification a déjà eu lieu.  
  
 \- ou -  
  
 Ce flux a été utilisé précédemment pour tenter d'effectuer l'authentification en tant que serveur. Vous ne pouvez pas utiliser le flux pour faire une nouvelle tentative d'authentification en tant que client.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Pour utiliser explicites <see cref="T:System.Net.NetworkCredential" />. Énumération associée : <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClientAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, string targetName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsClientAsync(class System.Net.NetworkCredential credential, string targetName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsClientAsync (credential As NetworkCredential, targetName As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsClientAsync(System::Net::NetworkCredential ^ credential, System::String ^ targetName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="targetName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="credential">
          <see cref="T:System.Net.NetworkCredential" /> utilisé pour établir l'identité du client.</param>
        <param name="targetName">Nom de principal du service (SPN) qui identifie de manière unique le serveur à authentifier.</param>
        <summary>Appelé par les clients pour authentifier le client, et éventuellement le serveur, dans une connexion client-serveur sous forme d'opération asynchrone. Le processus d'authentification utilise les informations d'identification du client spécifiées.</summary>
        <returns>Retourne <see cref="T:System.Threading.Tasks.Task" />.  
  
 Objet de tâche représentant l'opération asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le niveau d’emprunt d’identité est <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, le niveau de sécurité est <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, et l’authentification mutuelle est demandée. La <xref:System.Net.Security.NegotiateStream> classe construit le SPN utilisé pour l’authentification mutuelle.  
  
 Lorsque l’authentification réussit, vous devez vérifier le <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> et <xref:System.Net.Security.NegotiateStream.IsSigned%2A> propriétés pour déterminer les services de sécurité sont utilisés par le <xref:System.Net.Security.NegotiateStream>. Vérifiez le <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> propriété pour déterminer si l’authentification mutuelle s’est produite.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException">L'authentification a échoué. Vous pouvez utiliser cet objet pour faire une nouvelle tentative d'authentification.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">L'authentification a échoué. Vous pouvez utiliser cet objet pour faire une nouvelle tentative d'authentification.</exception>
        <exception cref="T:System.ObjectDisposedException">L’objet a été fermé.</exception>
        <exception cref="T:System.InvalidOperationException">L’authentification a déjà eu lieu.  
  
 \- ou -  
  
 Ce flux a été utilisé précédemment pour tenter d'effectuer l'authentification en tant que serveur. Vous ne pouvez pas utiliser le flux pour faire une nouvelle tentative d'authentification en tant que client.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetName" /> est <see langword="null" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Pour utiliser explicites <see cref="T:System.Net.NetworkCredential" />. Énumération associée : <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClientAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsClientAsync(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsClientAsync (credential As NetworkCredential, binding As ChannelBinding, targetName As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsClientAsync(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ChannelBinding ^ binding, System::String ^ targetName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <Parameter Name="targetName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="credential">
          <see cref="T:System.Net.NetworkCredential" /> utilisé pour établir l'identité du client.</param>
        <param name="binding">
          <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> qui est utilisé comme protection étendue.</param>
        <param name="targetName">Nom de principal du service (SPN) qui identifie de manière unique le serveur à authentifier.</param>
        <summary>Appelé par les clients pour authentifier le client, et éventuellement le serveur, dans une connexion client-serveur sous forme d'opération asynchrone. Le processus d'authentification utilise les informations d'identification du client et la liaison de canal spécifiées.</summary>
        <returns>Retourne <see cref="T:System.Threading.Tasks.Task" />.  
  
 Objet de tâche représentant l'opération asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le niveau d’emprunt d’identité est <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, le niveau de sécurité est <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, et l’authentification mutuelle est demandée. La <xref:System.Net.Security.NegotiateStream> classe construit le SPN utilisé pour l’authentification mutuelle.  
  
 Le <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> utilisé pour la protection étendue qui est passée à cette méthode dans le `binding` paramètre serait extrait par une application à partir de <xref:System.Net.Security.SslStream.TransportContext%2A> propriété associé <xref:System.Net.Security.SslStream>.  
  
 Lorsque l’authentification réussit, vous devez vérifier le <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> et <xref:System.Net.Security.NegotiateStream.IsSigned%2A> propriétés pour déterminer les services de sécurité sont utilisés par le <xref:System.Net.Security.NegotiateStream>. Vérifiez le <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> propriété pour déterminer si l’authentification mutuelle s’est produite.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetName" /> est <see langword="null" />.  
  
 \- ou -  
  
 <paramref name="credential" /> est <see langword="null" />.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">L'authentification a échoué. Vous pouvez utiliser cet objet pour faire une nouvelle tentative d'authentification.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">L'authentification a échoué. Vous pouvez utiliser cet objet pour faire une nouvelle tentative d'authentification.</exception>
        <exception cref="T:System.InvalidOperationException">L’authentification a déjà eu lieu.  
  
 \- ou -  
  
 Ce flux a été utilisé précédemment pour tenter d'effectuer l'authentification en tant que serveur. Vous ne pouvez pas utiliser le flux pour faire une nouvelle tentative d'authentification en tant que client.</exception>
        <exception cref="T:System.ObjectDisposedException">L’objet a été fermé.</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClientAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsClientAsync(class System.Net.NetworkCredential credential, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsClientAsync (credential As NetworkCredential, targetName As String, requiredProtectionLevel As ProtectionLevel, allowedImpersonationLevel As TokenImpersonationLevel) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsClientAsync(System::Net::NetworkCredential ^ credential, System::String ^ targetName, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential">
          <see cref="T:System.Net.NetworkCredential" /> utilisé pour établir l'identité du client.</param>
        <param name="targetName">Nom de principal du service (SPN) qui identifie de manière unique le serveur à authentifier.</param>
        <param name="requiredProtectionLevel">L'une des valeurs <see cref="T:System.Net.Security.ProtectionLevel" />, indiquant les services de sécurité pour le flux.</param>
        <param name="allowedImpersonationLevel">L'une des valeurs <see cref="T:System.Security.Principal.TokenImpersonationLevel" />, indiquant comment le serveur peut utiliser les informations d'identification du client pour accéder aux ressources.</param>
        <summary>Appelé par les clients pour authentifier le client, et éventuellement le serveur, dans une connexion client-serveur sous forme d'opération asynchrone. Le processus d'authentification utilise les options d'authentification et les informations d'identification spécifiées.</summary>
        <returns>Retourne <see cref="T:System.Threading.Tasks.Task" />.  
  
 Objet de tâche représentant l'opération asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le `requiredProtectionLevel` paramètre pour demander des services de sécurité pour les données transmises à l’aide du flux authentifié. Par exemple, pour que les données chiffrées et signées, spécifiez la <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> valeur. Authentification réussie ne garantit pas que demandé <xref:System.Net.Security.ProtectionLevel> a été accordé. Vous devez vérifier le <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> et <xref:System.Net.Security.NegotiateStream.IsSigned%2A> propriétés pour déterminer les services de sécurité sont utilisés par le <xref:System.Net.Security.NegotiateStream>.  
  
 Si l’authentification échoue, vous recevez un <xref:System.Security.Authentication.AuthenticationException> ou <xref:System.Security.Authentication.InvalidCredentialException>. Dans ce cas, vous pouvez réessayer l’authentification avec les informations d’identification différentes.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="allowedImpersonationLevel" /> n’est pas une valeur valide.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetName" /> a la valeur null.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">L'authentification a échoué. Vous pouvez utiliser cet objet pour faire une nouvelle tentative d'authentification.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">L'authentification a échoué. Vous pouvez utiliser cet objet pour faire une nouvelle tentative d'authentification.</exception>
        <exception cref="T:System.ObjectDisposedException">L’objet a été fermé.</exception>
        <exception cref="T:System.InvalidOperationException">L’authentification a déjà eu lieu.  
  
 \- ou -  
  
 Ce flux a été utilisé précédemment pour tenter d'effectuer l'authentification en tant que serveur. Vous ne pouvez pas utiliser le flux pour faire une nouvelle tentative d'authentification en tant que client.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Pour utiliser explicites <see cref="T:System.Net.NetworkCredential" />. Énumération associée : <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClientAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsClientAsync(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsClientAsync (credential As NetworkCredential, binding As ChannelBinding, targetName As String, requiredProtectionLevel As ProtectionLevel, allowedImpersonationLevel As TokenImpersonationLevel) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsClientAsync(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ChannelBinding ^ binding, System::String ^ targetName, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential">
          <see cref="T:System.Net.NetworkCredential" /> utilisé pour établir l'identité du client.</param>
        <param name="binding">
          <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> qui est utilisé comme protection étendue.</param>
        <param name="targetName">Nom de principal du service (SPN) qui identifie de manière unique le serveur à authentifier.</param>
        <param name="requiredProtectionLevel">L'une des valeurs <see cref="T:System.Net.Security.ProtectionLevel" />, indiquant les services de sécurité pour le flux.</param>
        <param name="allowedImpersonationLevel">L'une des valeurs <see cref="T:System.Security.Principal.TokenImpersonationLevel" />, indiquant comment le serveur peut utiliser les informations d'identification du client pour accéder aux ressources.</param>
        <summary>Appelé par les clients pour authentifier le client, et éventuellement le serveur, dans une connexion client-serveur sous forme d'opération asynchrone. Le processus d'authentification utilise les informations d'identification du client, les options d'authentification et la liaison de canal spécifiées.</summary>
        <returns>Retourne <see cref="T:System.Threading.Tasks.Task" />.  
  
 Objet de tâche représentant l'opération asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le `requiredProtectionLevel` paramètre pour demander des services de sécurité pour les données transmises à l’aide du flux authentifié. Par exemple, pour que les données chiffrées et signées, spécifiez la <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> valeur. Authentification réussie ne garantit pas que demandé <xref:System.Net.Security.ProtectionLevel> a été accordé. Vous devez vérifier le <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> et <xref:System.Net.Security.NegotiateStream.IsSigned%2A> propriétés pour déterminer les services de sécurité sont utilisés par le <xref:System.Net.Security.NegotiateStream>.  
  
 Le <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> utilisé pour la protection étendue qui est passée à cette méthode dans le `binding` paramètre serait extrait par une application à partir de <xref:System.Net.Security.SslStream.TransportContext%2A> propriété associé <xref:System.Net.Security.SslStream>.  
  
 Si l’authentification échoue, vous recevez un <xref:System.Security.Authentication.AuthenticationException> ou <xref:System.Security.Authentication.InvalidCredentialException>. Dans ce cas, vous pouvez réessayer l’authentification avec les informations d’identification différentes.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetName" /> est <see langword="null" />.  
  
 \- ou -  
  
 <paramref name="credential" /> est <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="allowedImpersonationLevel" /> n’est pas une valeur valide.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">L'authentification a échoué. Vous pouvez utiliser cet objet pour faire une nouvelle tentative d'authentification.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">L'authentification a échoué. Vous pouvez utiliser cet objet pour faire une nouvelle tentative d'authentification.</exception>
        <exception cref="T:System.InvalidOperationException">L’authentification a déjà eu lieu.  
  
 \- ou -  
  
 Ce flux a été utilisé précédemment pour tenter d'effectuer l'authentification en tant que serveur. Vous ne pouvez pas utiliser le flux pour faire une nouvelle tentative d'authentification en tant que client.</exception>
        <exception cref="T:System.ObjectDisposedException">L’objet a été fermé.</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
      </Docs>
    </Member>
    <MemberGroup MemberName="AuthenticateAsServer">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gère le côté serveur d'une authentification pour une connexion client-serveur.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ces méthodes bloquent pendant que l’authentification est en cours d’exécution. Pour empêcher l’application à partir de blocage en attendant que l’authentification, utilisez le <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> (méthode).  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="AuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsServer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsServer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServer" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsServer ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsServer();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Appelé par les serveurs pour authentifier le client, et éventuellement le serveur, dans une connexion client-serveur.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’authentification utilise le serveur <xref:System.Net.CredentialCache.DefaultCredentials%2A>. Aucun nom de Principal du Service (SPN) est spécifié pour le serveur. Le niveau d’emprunt d’identité est <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, et le niveau de sécurité est <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.  
  
 Lorsque l’authentification réussit, vous devez vérifier le <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> et <xref:System.Net.Security.NegotiateStream.IsSigned%2A> propriétés pour déterminer les services de sécurité sont utilisés par le <xref:System.Net.Security.NegotiateStream>. Vérifiez le <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> propriété pour déterminer si l’authentification mutuelle s’est produite.  
  
 Cette méthode est bloquée jusqu'à ce que l’opération se termine. Pour éviter un blocage jusqu'à ce que l’opération est terminée, utilisez une de la <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> surcharges de méthode.  
  
 Si l’authentification échoue, vous recevez un <xref:System.Security.Authentication.AuthenticationException> ou <xref:System.Security.Authentication.InvalidCredentialException>. Dans ce cas, vous pouvez réessayer l’authentification avec les informations d’identification différentes.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException">L'authentification a échoué. Vous pouvez utiliser cet objet pour faire une nouvelle tentative d'authentification.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">L'authentification a échoué. Vous pouvez utiliser cet objet pour faire une nouvelle tentative d'authentification.</exception>
        <exception cref="T:System.ObjectDisposedException">L’objet a été fermé.</exception>
        <exception cref="T:System.NotSupportedException">Windows 95 et Windows 98 ne sont pas pris en charge.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Pour utiliser explicites <see cref="T:System.Net.NetworkCredential" />. Énumération associée : <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsServer (System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsServer(class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsServer (policy As ExtendedProtectionPolicy)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsServer(System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ policy);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Parameters>
      <Docs>
        <param name="policy">
          <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> qui est utilisé comme protection étendue.</param>
        <summary>Appelé par les serveurs pour authentifier le client, et éventuellement le serveur, dans une connexion client-serveur. Le processus d'authentification utilise la stratégie de protection étendue spécifiée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’authentification utilise le serveur <xref:System.Net.CredentialCache.DefaultCredentials%2A>. Aucun nom de Principal du Service (SPN) est spécifié pour le serveur. Le niveau d’emprunt d’identité est <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, et le niveau de sécurité est <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.  
  
 Si le `policy` paramètre est `null`, puis une stratégie de protection étendue utilisée est <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> la valeur <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>.  
  
 Lorsque l’authentification réussit, vous devez vérifier le <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> et <xref:System.Net.Security.NegotiateStream.IsSigned%2A> propriétés pour déterminer les services de sécurité sont utilisés par le <xref:System.Net.Security.NegotiateStream>. Vérifiez le <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> propriété pour déterminer si l’authentification mutuelle s’est produite.  
  
 Cette méthode est bloquée jusqu'à ce que l’opération se termine. Pour éviter un blocage jusqu'à ce que l’opération est terminée, utilisez une de la <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> surcharges de méthode.  
  
 Si l’authentification échoue, vous recevez un <xref:System.Security.Authentication.AuthenticationException> ou <xref:System.Security.Authentication.InvalidCredentialException>. Dans ce cas, vous pouvez réessayer l’authentification avec les informations d’identification différentes.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Le <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> et le <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> sur la stratégie de protection étendue passée dans le paramètre <paramref name="policy" /> sont tous les deux <see langword="null" />.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">L'authentification a échoué. Vous pouvez utiliser cet objet pour faire une nouvelle tentative d'authentification.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">L'authentification a échoué. Vous pouvez utiliser cet objet pour faire une nouvelle tentative d'authentification.</exception>
        <exception cref="T:System.NotSupportedException">Windows 95 et Windows 98 ne sont pas pris en charge.</exception>
        <exception cref="T:System.ObjectDisposedException">L’objet a été fermé.</exception>
        <exception cref="T:System.PlatformNotSupportedException">Le paramètre <paramref name="policy" /> avait la valeur <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> sur une plateforme qui ne prend pas en charge protection étendue.</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsServer (System.Net.NetworkCredential credential, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsServer(class System.Net.NetworkCredential credential, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsServer (credential As NetworkCredential, requiredProtectionLevel As ProtectionLevel, requiredImpersonationLevel As TokenImpersonationLevel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsServer(System::Net::NetworkCredential ^ credential, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential">
          <see cref="T:System.Net.NetworkCredential" /> utilisé pour établir l'identité du serveur.</param>
        <param name="requiredProtectionLevel">L'une des valeurs <see cref="T:System.Net.Security.ProtectionLevel" />, indiquant les services de sécurité pour le flux.</param>
        <param name="requiredImpersonationLevel">L'une des valeurs <see cref="T:System.Security.Principal.TokenImpersonationLevel" />, indiquant comment le serveur peut utiliser les informations d'identification du client pour accéder aux ressources.</param>
        <summary>Appelé par les serveurs pour authentifier le client, et éventuellement le serveur, dans une connexion client-serveur. Le processus d'authentification utilise les options d'authentification et les informations d'identification du serveur spécifiées.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsque l’authentification réussit, vous devez vérifier le <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> et <xref:System.Net.Security.NegotiateStream.IsSigned%2A> propriétés pour déterminer les services de sécurité sont utilisés par le <xref:System.Net.Security.NegotiateStream>. Vérifiez le <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> propriété pour déterminer si l’authentification mutuelle s’est produite.  
  
 Cette méthode est bloquée jusqu'à ce que l’opération se termine. Pour éviter un blocage jusqu'à ce que l’opération est terminée, utilisez une de la <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> surcharges de méthode.  
  
 Si l’authentification échoue, vous recevez un <xref:System.Security.Authentication.AuthenticationException> ou <xref:System.Security.Authentication.InvalidCredentialException>. Dans ce cas, vous pouvez réessayer l’authentification avec les informations d’identification différentes.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" /> est <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="requiredImpersonationLevel" /> doit être <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" /> ou <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" /></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">L'authentification a échoué. Vous pouvez utiliser cet objet pour faire une nouvelle tentative d'authentification.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">L'authentification a échoué. Vous pouvez utiliser cet objet pour faire une nouvelle tentative d'authentification.</exception>
        <exception cref="T:System.ObjectDisposedException">L’objet a été fermé.</exception>
        <exception cref="T:System.InvalidOperationException">L’authentification a déjà eu lieu.  
  
 \- ou -  
  
 Ce flux a été utilisé précédemment pour tenter d'effectuer l'authentification en tant que client. Vous ne pouvez pas utiliser le flux pour faire une nouvelle tentative d'authentification en tant que serveur.</exception>
        <exception cref="T:System.NotSupportedException">Windows 95 et Windows 98 ne sont pas pris en charge.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Pour utiliser explicites <see cref="T:System.Net.NetworkCredential" />. Énumération associée : <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsServer (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsServer(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsServer (credential As NetworkCredential, policy As ExtendedProtectionPolicy, requiredProtectionLevel As ProtectionLevel, requiredImpersonationLevel As TokenImpersonationLevel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsServer(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ policy, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential">
          <see cref="T:System.Net.NetworkCredential" /> utilisé pour établir l'identité du client.</param>
        <param name="policy">
          <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> qui est utilisé comme protection étendue.</param>
        <param name="requiredProtectionLevel">L'une des valeurs <see cref="T:System.Net.Security.ProtectionLevel" />, indiquant les services de sécurité pour le flux.</param>
        <param name="requiredImpersonationLevel">L'une des valeurs <see cref="T:System.Security.Principal.TokenImpersonationLevel" />, indiquant comment le serveur peut utiliser les informations d'identification du client pour accéder aux ressources.</param>
        <summary>Appelé par les serveurs pour authentifier le client, et éventuellement le serveur, dans une connexion client-serveur. Le processus d'authentification utilise les informations d'identification du serveur, les options d'authentification et la stratégie de protection étendue spécifiées.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si le `policy` paramètre est `null`, puis une stratégie de protection étendue utilisée est <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> la valeur <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>.  
  
 Lorsque l’authentification réussit, vous devez vérifier le <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> et <xref:System.Net.Security.NegotiateStream.IsSigned%2A> propriétés pour déterminer les services de sécurité sont utilisés par le <xref:System.Net.Security.NegotiateStream>. Vérifiez le <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> propriété pour déterminer si l’authentification mutuelle s’est produite.  
  
 Cette méthode est bloquée jusqu'à ce que l’opération se termine. Pour éviter un blocage jusqu'à ce que l’opération est terminée, utilisez une de la <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> surcharges de méthode.  
  
 Si l’authentification échoue, vous recevez un <xref:System.Security.Authentication.AuthenticationException> ou <xref:System.Security.Authentication.InvalidCredentialException>. Dans ce cas, vous pouvez réessayer l’authentification avec les informations d’identification différentes.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Le <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> et le <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> sur la stratégie de protection étendue passée dans le paramètre <paramref name="policy" /> sont tous les deux <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" /> est <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="requiredImpersonationLevel" /> doit être <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" /> ou <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" /></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">L'authentification a échoué. Vous pouvez utiliser cet objet pour faire une nouvelle tentative d'authentification.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">L'authentification a échoué. Vous pouvez utiliser cet objet pour faire une nouvelle tentative d'authentification.</exception>
        <exception cref="T:System.InvalidOperationException">L’authentification a déjà eu lieu.  
  
 \- ou -  
  
 Ce flux a été utilisé précédemment pour tenter d'effectuer l'authentification en tant que client. Vous ne pouvez pas utiliser le flux pour faire une nouvelle tentative d'authentification en tant que serveur.</exception>
        <exception cref="T:System.NotSupportedException">Windows 95 et Windows 98 ne sont pas pris en charge.</exception>
        <exception cref="T:System.ObjectDisposedException">L’objet a été fermé.</exception>
        <exception cref="T:System.PlatformNotSupportedException">Le paramètre <paramref name="policy" /> avait la valeur <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> sur une plateforme qui ne prend pas en charge protection étendue.</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Docs>
    </Member>
    <MemberGroup MemberName="AuthenticateAsServerAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gère le côté serveur d'une authentification d'une connexion client-serveur en tant qu'opération asynchrone.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AuthenticateAsServerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsServerAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServerAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsServerAsync () As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsServerAsync();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Appelé par les serveurs pour authentifier le client, et éventuellement le serveur, dans une connexion client-serveur sous forme d'opération asynchrone.</summary>
        <returns>Retourne <see cref="T:System.Threading.Tasks.Task" />.  
  
 Objet de tâche représentant l'opération asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’authentification utilise le serveur <xref:System.Net.CredentialCache.DefaultCredentials%2A>. Aucun nom de Principal du Service (SPN) est spécifié pour le serveur. Le niveau d’emprunt d’identité est <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, et le niveau de sécurité est <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.  
  
 Lorsque l’authentification réussit, vous devez vérifier le <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> et <xref:System.Net.Security.NegotiateStream.IsSigned%2A> propriétés pour déterminer les services de sécurité sont utilisés par le <xref:System.Net.Security.NegotiateStream>. Vérifiez le <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> propriété pour déterminer si l’authentification mutuelle s’est produite.  
  
 Si l’authentification échoue, vous recevez un <xref:System.Security.Authentication.AuthenticationException> ou <xref:System.Security.Authentication.InvalidCredentialException>. Dans ce cas, vous pouvez réessayer l’authentification avec les informations d’identification différentes.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException">L'authentification a échoué. Vous pouvez utiliser cet objet pour faire une nouvelle tentative d'authentification.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">L'authentification a échoué. Vous pouvez utiliser cet objet pour faire une nouvelle tentative d'authentification.</exception>
        <exception cref="T:System.ObjectDisposedException">L’objet a été fermé.</exception>
        <exception cref="T:System.NotSupportedException">Windows 95 et Windows 98 ne sont pas pris en charge.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Pour utiliser explicites <see cref="T:System.Net.NetworkCredential" />. Énumération associée : <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync (System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsServerAsync(class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsServerAsync (policy As ExtendedProtectionPolicy) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsServerAsync(System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ policy);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Parameters>
      <Docs>
        <param name="policy">
          <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> qui est utilisé comme protection étendue.</param>
        <summary>Appelé par les serveurs pour authentifier le client, et éventuellement le serveur, dans une connexion client-serveur sous forme d'opération asynchrone. Le processus d'authentification utilise la stratégie de protection étendue spécifiée.</summary>
        <returns>Retourne <see cref="T:System.Threading.Tasks.Task" />.  
  
 Objet de tâche représentant l'opération asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’authentification utilise le serveur <xref:System.Net.CredentialCache.DefaultCredentials%2A>. Aucun nom de Principal du Service (SPN) est spécifié pour le serveur. Le niveau d’emprunt d’identité est <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, et le niveau de sécurité est <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.  
  
 Si le `policy` paramètre est `null`, puis une stratégie de protection étendue utilisée est <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> la valeur <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>.  
  
 Lorsque l’authentification réussit, vous devez vérifier le <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> et <xref:System.Net.Security.NegotiateStream.IsSigned%2A> propriétés pour déterminer les services de sécurité sont utilisés par le <xref:System.Net.Security.NegotiateStream>. Vérifiez le <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> propriété pour déterminer si l’authentification mutuelle s’est produite.  
  
 Si l’authentification échoue, vous recevez un <xref:System.Security.Authentication.AuthenticationException> ou <xref:System.Security.Authentication.InvalidCredentialException>. Dans ce cas, vous pouvez réessayer l’authentification avec les informations d’identification différentes.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Le <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> et le <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> sur la stratégie de protection étendue passée dans le paramètre <paramref name="policy" /> sont tous les deux <see langword="null" />.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">L'authentification a échoué. Vous pouvez utiliser cet objet pour faire une nouvelle tentative d'authentification.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">L'authentification a échoué. Vous pouvez utiliser cet objet pour faire une nouvelle tentative d'authentification.</exception>
        <exception cref="T:System.NotSupportedException">Windows 95 et Windows 98 ne sont pas pris en charge.</exception>
        <exception cref="T:System.ObjectDisposedException">L’objet a été fermé.</exception>
        <exception cref="T:System.PlatformNotSupportedException">Le paramètre <paramref name="policy" /> avait la valeur <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> sur une plateforme qui ne prend pas en charge protection étendue.</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync (System.Net.NetworkCredential credential, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsServerAsync(class System.Net.NetworkCredential credential, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsServerAsync (credential As NetworkCredential, requiredProtectionLevel As ProtectionLevel, requiredImpersonationLevel As TokenImpersonationLevel) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsServerAsync(System::Net::NetworkCredential ^ credential, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential">
          <see cref="T:System.Net.NetworkCredential" /> utilisé pour établir l'identité du serveur.</param>
        <param name="requiredProtectionLevel">L'une des valeurs <see cref="T:System.Net.Security.ProtectionLevel" />, indiquant les services de sécurité pour le flux.</param>
        <param name="requiredImpersonationLevel">L'une des valeurs <see cref="T:System.Security.Principal.TokenImpersonationLevel" />, indiquant comment le serveur peut utiliser les informations d'identification du client pour accéder aux ressources.</param>
        <summary>Appelé par les serveurs pour authentifier le client, et éventuellement le serveur, dans une connexion client-serveur sous forme d'opération asynchrone. Le processus d'authentification utilise les options d'authentification et les informations d'identification du serveur spécifiées.</summary>
        <returns>Retourne <see cref="T:System.Threading.Tasks.Task" />.  
  
 Objet de tâche représentant l'opération asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsque l’authentification réussit, vous devez vérifier le <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> et <xref:System.Net.Security.NegotiateStream.IsSigned%2A> propriétés pour déterminer les services de sécurité sont utilisés par le <xref:System.Net.Security.NegotiateStream>. Vérifiez le <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> propriété pour déterminer si l’authentification mutuelle s’est produite.  
  
 Si l’authentification échoue, vous recevez un <xref:System.Security.Authentication.AuthenticationException> ou <xref:System.Security.Authentication.InvalidCredentialException>. Dans ce cas, vous pouvez réessayer l’authentification avec les informations d’identification différentes.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" /> est <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="requiredImpersonationLevel" /> doit être <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" /> ou <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" /></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">L'authentification a échoué. Vous pouvez utiliser cet objet pour faire une nouvelle tentative d'authentification.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">L'authentification a échoué. Vous pouvez utiliser cet objet pour faire une nouvelle tentative d'authentification.</exception>
        <exception cref="T:System.ObjectDisposedException">L’objet a été fermé.</exception>
        <exception cref="T:System.InvalidOperationException">L’authentification a déjà eu lieu.  
  
 \- ou -  
  
 Ce flux a été utilisé précédemment pour tenter d'effectuer l'authentification en tant que client. Vous ne pouvez pas utiliser le flux pour faire une nouvelle tentative d'authentification en tant que serveur.</exception>
        <exception cref="T:System.NotSupportedException">Windows 95 et Windows 98 ne sont pas pris en charge.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Pour utiliser explicites <see cref="T:System.Net.NetworkCredential" />. Énumération associée : <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsServerAsync(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsServerAsync (credential As NetworkCredential, policy As ExtendedProtectionPolicy, requiredProtectionLevel As ProtectionLevel, requiredImpersonationLevel As TokenImpersonationLevel) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsServerAsync(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ policy, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential">
          <see cref="T:System.Net.NetworkCredential" /> utilisé pour établir l'identité du client.</param>
        <param name="policy">
          <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> qui est utilisé comme protection étendue.</param>
        <param name="requiredProtectionLevel">L'une des valeurs <see cref="T:System.Net.Security.ProtectionLevel" />, indiquant les services de sécurité pour le flux.</param>
        <param name="requiredImpersonationLevel">L'une des valeurs <see cref="T:System.Security.Principal.TokenImpersonationLevel" />, indiquant comment le serveur peut utiliser les informations d'identification du client pour accéder aux ressources.</param>
        <summary>Appelé par les serveurs pour authentifier le client, et éventuellement le serveur, dans une connexion client-serveur sous forme d'opération asynchrone. Le processus d'authentification utilise les informations d'identification du serveur, les options d'authentification et la stratégie de protection étendue spécifiées.</summary>
        <returns>Retourne <see cref="T:System.Threading.Tasks.Task" />.  
  
 Objet de tâche représentant l'opération asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si le `policy` paramètre est `null`, puis une stratégie de protection étendue utilisée est <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> la valeur <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>.  
  
 Lorsque l’authentification réussit, vous devez vérifier le <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> et <xref:System.Net.Security.NegotiateStream.IsSigned%2A> propriétés pour déterminer les services de sécurité sont utilisés par le <xref:System.Net.Security.NegotiateStream>. Vérifiez le <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> propriété pour déterminer si l’authentification mutuelle s’est produite.  
  
 Si l’authentification échoue, vous recevez un <xref:System.Security.Authentication.AuthenticationException> ou <xref:System.Security.Authentication.InvalidCredentialException>. Dans ce cas, vous pouvez réessayer l’authentification avec les informations d’identification différentes.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Le <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> et le <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> sur la stratégie de protection étendue passée dans le paramètre <paramref name="policy" /> sont tous les deux <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" /> est <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="requiredImpersonationLevel" /> doit être <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" /> ou <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" /></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">L'authentification a échoué. Vous pouvez utiliser cet objet pour faire une nouvelle tentative d'authentification.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">L'authentification a échoué. Vous pouvez utiliser cet objet pour faire une nouvelle tentative d'authentification.</exception>
        <exception cref="T:System.InvalidOperationException">L’authentification a déjà eu lieu.  
  
 \- ou -  
  
 Ce flux a été utilisé précédemment pour tenter d'effectuer l'authentification en tant que client. Vous ne pouvez pas utiliser le flux pour faire une nouvelle tentative d'authentification en tant que serveur.</exception>
        <exception cref="T:System.NotSupportedException">Windows 95 et Windows 98 ne sont pas pris en charge.</exception>
        <exception cref="T:System.ObjectDisposedException">L’objet a été fermé.</exception>
        <exception cref="T:System.PlatformNotSupportedException">Le paramètre <paramref name="policy" /> avait la valeur <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> sur une plateforme qui ne prend pas en charge protection étendue.</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginAuthenticateAsClient">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Commence une opération asynchrone pour authentifier le côté client d'une connexion client-serveur.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les surcharges de cette méthode ne bloquent pas si l’authentification est en cours d’exécution. Pour bloquer en attendant que l’authentification, utilisez une de la <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> méthodes.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsClient (AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsClient(class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsClient(AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="asyncCallback">Délégué <see cref="T:System.AsyncCallback" /> qui fait référence à la méthode à appeler quand l’authentification est terminée.</param>
        <param name="asyncState">Objet défini par l'utilisateur comportant des informations sur l'opération. Cet objet est passé au délégué <c>asyncCallback</c> quand l’opération se termine.</param>
        <summary>Appelé par les clients pour commencer une opération asynchrone d'authentification du client, et éventuellement du serveur, dans une connexion client-serveur. Cette méthode ne provoque pas de blocage.</summary>
        <returns>Objet <see cref="T:System.IAsyncResult" /> indiquant l'état de l'opération asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’authentification du client utilise le <xref:System.Net.CredentialCache.DefaultCredentials%2A>. Aucun nom de Principal du Service (SPN) est spécifié pour le serveur. Le niveau d’emprunt d’identité est <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, et le niveau de sécurité est <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>. La <xref:System.Net.Security.NegotiateStream> classe construit le SPN utilisé pour l’authentification mutuelle.  
  
 Cette méthode est asynchrone et ne bloque pas pendant l’opération se termine. Pour bloquer jusqu'à ce que l’opération est terminée, utilisez une de la <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> surcharges de méthode.  
  
 L’opération asynchrone d’authentification doit être terminée en appelant le <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> (méthode). En règle générale, la méthode est appelée par le `asyncCallback` déléguer. Pour plus d’informations sur l’utilisation du modèle de programmation asynchrone, consultez [appel asynchrone des méthodes synchrones](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  
  
 Si l’authentification échoue, vous recevez un <xref:System.Security.Authentication.AuthenticationException> ou <xref:System.Security.Authentication.InvalidCredentialException>. Dans ce cas, vous pouvez réessayer l’authentification avec les informations d’identification différentes.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment appeler cette méthode pour commencer une authentification asynchrone pour le client.  
  
 [!code-cpp[NclNegoAsyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#2)]
 [!code-csharp[NclNegoAsyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException">L'authentification a échoué. Vous pouvez utiliser cet objet pour faire une nouvelle tentative d'authentification.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">L'authentification a échoué. Vous pouvez utiliser cet objet pour faire une nouvelle tentative d'authentification.</exception>
        <exception cref="T:System.ObjectDisposedException">L’objet a été fermé.</exception>
        <exception cref="T:System.InvalidOperationException">L’authentification a déjà eu lieu.  
  
 \- ou -  
  
 Ce flux a été utilisé précédemment pour tenter d'effectuer l'authentification en tant que serveur. Vous ne pouvez pas utiliser le flux pour faire une nouvelle tentative d'authentification en tant que client.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Pour utiliser explicites <see cref="T:System.Net.NetworkCredential" />. Énumération associée : <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, string targetName, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsClient(class System.Net.NetworkCredential credential, string targetName, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::String ^ targetName, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="credential">
          <see cref="T:System.Net.NetworkCredential" /> utilisé pour établir l'identité du client.</param>
        <param name="targetName">Nom de principal du service (SPN) qui identifie de manière unique le serveur à authentifier.</param>
        <param name="asyncCallback">Délégué <see cref="T:System.AsyncCallback" /> qui fait référence à la méthode à appeler quand l’authentification est terminée.</param>
        <param name="asyncState">Objet défini par l'utilisateur comportant des informations sur l'opération d'écriture. Cet objet est passé au délégué <c>asyncCallback</c> quand l’opération se termine.</param>
        <summary>Appelé par les clients pour commencer une opération asynchrone d'authentification du client, et éventuellement du serveur, dans une connexion client-serveur. Le processus d'authentification utilise les informations d'identification spécifiées. Cette méthode ne provoque pas de blocage.</summary>
        <returns>Objet <see cref="T:System.IAsyncResult" /> indiquant l'état de l'opération asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode est asynchrone et ne bloque pas pendant l’opération se termine. Pour bloquer jusqu'à ce que l’opération est terminée, utilisez une de la <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> surcharges de méthode.  
  
 L’opération asynchrone d’authentification doit être terminée en appelant le <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> (méthode). En règle générale, la méthode est appelée par le `asyncCallback` déléguer. Pour plus d’informations sur l’utilisation du modèle de programmation asynchrone, consultez [appel asynchrone des méthodes synchrones](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  
  
 Si l’authentification échoue, vous recevez un <xref:System.Security.Authentication.AuthenticationException> ou <xref:System.Security.Authentication.InvalidCredentialException>. Dans ce cas, vous pouvez réessayer l’authentification avec les informations d’identification différentes.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" /> est <see langword="null" />.  
  
 \- ou -  
  
 <paramref name="targetName" /> est <see langword="null" />.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">L'authentification a échoué. Vous pouvez utiliser cet objet pour faire une nouvelle tentative d'authentification.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">L'authentification a échoué. Vous pouvez utiliser cet objet pour faire une nouvelle tentative d'authentification.</exception>
        <exception cref="T:System.ObjectDisposedException">L’objet a été fermé.</exception>
        <exception cref="T:System.InvalidOperationException">L’authentification a déjà eu lieu.  
  
 \- ou -  
  
 Ce flux a été utilisé précédemment pour tenter d'effectuer l'authentification en tant que serveur. Vous ne pouvez pas utiliser le flux pour faire une nouvelle tentative d'authentification en tant que client.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Pour utiliser explicites <see cref="T:System.Net.NetworkCredential" />. Énumération associée : <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsClient(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ChannelBinding ^ binding, System::String ^ targetName, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="credential">
          <see cref="T:System.Net.NetworkCredential" /> utilisé pour établir l'identité du client.</param>
        <param name="binding">
          <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> qui est utilisé comme protection étendue.</param>
        <param name="targetName">Nom de principal du service (SPN) qui identifie de manière unique le serveur à authentifier.</param>
        <param name="asyncCallback">Délégué <see cref="T:System.AsyncCallback" /> qui fait référence à la méthode à appeler quand l’authentification est terminée.</param>
        <param name="asyncState">Objet défini par l'utilisateur comportant des informations sur l'opération d'écriture. Cet objet est passé au délégué <c>asyncCallback</c> quand l’opération se termine.</param>
        <summary>Appelé par les clients pour commencer une opération asynchrone d'authentification du client, et éventuellement du serveur, dans une connexion client-serveur. Le processus d'authentification utilise les informations d'identification et la liaison de canal spécifiées. Cette méthode ne provoque pas de blocage.</summary>
        <returns>Objet <see cref="T:System.IAsyncResult" /> indiquant l'état de l'opération asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode est asynchrone et ne bloque pas pendant l’opération se termine. Pour bloquer jusqu'à ce que l’opération est terminée, utilisez une de la <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> surcharges de méthode.  
  
 L’opération asynchrone d’authentification doit être terminée en appelant le <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> (méthode). En règle générale, la méthode est appelée par le `asyncCallback` déléguer. Pour plus d’informations sur l’utilisation du modèle de programmation asynchrone, consultez [appel asynchrone des méthodes synchrones](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  
  
 Si l’authentification échoue, vous recevez un <xref:System.Security.Authentication.AuthenticationException> ou <xref:System.Security.Authentication.InvalidCredentialException>. Dans ce cas, vous pouvez réessayer l’authentification avec les informations d’identification différentes.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" /> est <see langword="null" />.  
  
 \- ou -  
  
 <paramref name="targetName" /> est <see langword="null" />.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">L'authentification a échoué. Vous pouvez utiliser cet objet pour faire une nouvelle tentative d'authentification.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">L'authentification a échoué. Vous pouvez utiliser cet objet pour faire une nouvelle tentative d'authentification.</exception>
        <exception cref="T:System.InvalidOperationException">L’authentification a déjà eu lieu.  
  
 \- ou -  
  
 Ce flux a été utilisé précédemment pour tenter d'effectuer l'authentification en tant que serveur. Vous ne pouvez pas utiliser le flux pour faire une nouvelle tentative d'authentification en tant que client.</exception>
        <exception cref="T:System.ObjectDisposedException">L’objet a été fermé.</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsClient(class System.Net.NetworkCredential credential, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::String ^ targetName, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel allowedImpersonationLevel, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="credential">
          <see cref="T:System.Net.NetworkCredential" /> utilisé pour établir l'identité du client.</param>
        <param name="targetName">Nom de principal du service (SPN) qui identifie de manière unique le serveur à authentifier.</param>
        <param name="requiredProtectionLevel">L'une des valeurs <see cref="T:System.Net.Security.ProtectionLevel" />, indiquant les services de sécurité pour le flux.</param>
        <param name="allowedImpersonationLevel">L'une des valeurs <see cref="T:System.Security.Principal.TokenImpersonationLevel" />, indiquant comment le serveur peut utiliser les informations d'identification du client pour accéder aux ressources.</param>
        <param name="asyncCallback">Délégué <see cref="T:System.AsyncCallback" /> qui fait référence à la méthode à appeler quand l’authentification est terminée.</param>
        <param name="asyncState">Objet défini par l'utilisateur comportant des informations sur l'opération d'écriture. Cet objet est passé au délégué <c>asyncCallback</c> quand l’opération se termine.</param>
        <summary>Appelé par les clients pour commencer une opération asynchrone d'authentification du client, et éventuellement du serveur, dans une connexion client-serveur. Le processus d'authentification utilise les options d'authentification et les informations d'identification spécifiées. Cette méthode ne provoque pas de blocage.</summary>
        <returns>Objet <see cref="T:System.IAsyncResult" /> indiquant l'état de l'opération asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le `requiredProtectionLevel` paramètre pour demander des services de sécurité pour les données transmises à l’aide du flux authentifié. Par exemple, pour que les données chiffrées et signées, spécifiez la <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> valeur. Authentification réussie ne garantit pas que demandé <xref:System.Net.Security.ProtectionLevel> a été accordé. Vous devez vérifier le <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> et <xref:System.Net.Security.NegotiateStream.IsSigned%2A> propriétés pour déterminer les services de sécurité sont utilisés par le <xref:System.Net.Security.NegotiateStream>.  
  
 Cette méthode est asynchrone et ne bloque pas pendant l’opération se termine. Pour bloquer jusqu'à ce que l’opération est terminée, utilisez une de la <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> surcharges de méthode.  
  
 L’opération asynchrone d’authentification doit être terminée en appelant le <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> (méthode). En règle générale, la méthode est appelée par le `asyncCallback` déléguer. Pour plus d’informations sur l’utilisation du modèle de programmation asynchrone, consultez [appel asynchrone des méthodes synchrones](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  
  
 Si l’authentification échoue, vous recevez un <xref:System.Security.Authentication.AuthenticationException> ou <xref:System.Security.Authentication.InvalidCredentialException>. Dans ce cas, vous pouvez réessayer l’authentification avec les informations d’identification différentes.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" /> est <see langword="null" />.  
  
 \- ou -  
  
 <paramref name="targetName" /> est <see langword="null" />.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">L'authentification a échoué. Vous pouvez utiliser cet objet pour faire une nouvelle tentative d'authentification.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">L'authentification a échoué. Vous pouvez utiliser cet objet pour faire une nouvelle tentative d'authentification.</exception>
        <exception cref="T:System.ObjectDisposedException">L’objet a été fermé.</exception>
        <exception cref="T:System.InvalidOperationException">L’authentification a déjà eu lieu.  
  
 \- ou -  
  
 Ce flux a été utilisé précédemment pour tenter d'effectuer l'authentification en tant que serveur. Vous ne pouvez pas utiliser le flux pour faire une nouvelle tentative d'authentification en tant que client.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Pour utiliser explicites <see cref="T:System.Net.NetworkCredential" />. Énumération associée : <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsClient(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ChannelBinding ^ binding, System::String ^ targetName, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel allowedImpersonationLevel, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="credential">
          <see cref="T:System.Net.NetworkCredential" /> utilisé pour établir l'identité du client.</param>
        <param name="binding">
          <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> qui est utilisé comme protection étendue.</param>
        <param name="targetName">Nom de principal du service (SPN) qui identifie de manière unique le serveur à authentifier.</param>
        <param name="requiredProtectionLevel">L'une des valeurs <see cref="T:System.Net.Security.ProtectionLevel" />, indiquant les services de sécurité pour le flux.</param>
        <param name="allowedImpersonationLevel">L'une des valeurs <see cref="T:System.Security.Principal.TokenImpersonationLevel" />, indiquant comment le serveur peut utiliser les informations d'identification du client pour accéder aux ressources.</param>
        <param name="asyncCallback">Délégué <see cref="T:System.AsyncCallback" /> qui fait référence à la méthode à appeler quand l’authentification est terminée.</param>
        <param name="asyncState">Objet défini par l'utilisateur comportant des informations sur l'opération d'écriture. Cet objet est passé au délégué <c>asyncCallback</c> quand l’opération se termine.</param>
        <summary>Appelé par les clients pour commencer une opération asynchrone d'authentification du client, et éventuellement du serveur, dans une connexion client-serveur. Le processus d'authentification utilise les informations d'identification, les options d'authentification et la liaison de canal spécifiées. Cette méthode ne provoque pas de blocage.</summary>
        <returns>Objet <see cref="T:System.IAsyncResult" /> indiquant l'état de l'opération asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le `requiredProtectionLevel` paramètre pour demander des services de sécurité pour les données transmises à l’aide du flux authentifié. Par exemple, pour que les données chiffrées et signées, spécifiez la <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> valeur. Authentification réussie ne garantit pas que demandé <xref:System.Net.Security.ProtectionLevel> a été accordé. Vous devez vérifier le <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> et <xref:System.Net.Security.NegotiateStream.IsSigned%2A> propriétés pour déterminer les services de sécurité sont utilisés par le <xref:System.Net.Security.NegotiateStream>.  
  
 Cette méthode est asynchrone et ne bloque pas pendant l’opération se termine. Pour bloquer jusqu'à ce que l’opération est terminée, utilisez une de la <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> surcharges de méthode.  
  
 L’opération asynchrone d’authentification doit être terminée en appelant le <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> (méthode). En règle générale, la méthode est appelée par le `asyncCallback` déléguer. Pour plus d’informations sur l’utilisation du modèle de programmation asynchrone, consultez [appel asynchrone des méthodes synchrones](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  
  
 Si l’authentification échoue, vous recevez un <xref:System.Security.Authentication.AuthenticationException> ou <xref:System.Security.Authentication.InvalidCredentialException>. Dans ce cas, vous pouvez réessayer l’authentification avec les informations d’identification différentes.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" /> est <see langword="null" />.  
  
 \- ou -  
  
 <paramref name="targetName" /> est <see langword="null" />.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">L'authentification a échoué. Vous pouvez utiliser cet objet pour faire une nouvelle tentative d'authentification.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">L'authentification a échoué. Vous pouvez utiliser cet objet pour faire une nouvelle tentative d'authentification.</exception>
        <exception cref="T:System.InvalidOperationException">L’authentification a déjà eu lieu.  
  
 \- ou -  
  
 Ce flux a été utilisé précédemment pour tenter d'effectuer l'authentification en tant que serveur. Vous ne pouvez pas utiliser le flux pour faire une nouvelle tentative d'authentification en tant que client.</exception>
        <exception cref="T:System.ObjectDisposedException">L’objet a été fermé.</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginAuthenticateAsServer">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Commence une opération asynchrone pour gérer le côté serveur de l'authentification d'une connexion client-serveur.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les surcharges de cette méthode ne bloquent pas pendant que l’authentification est en cours d’exécution. Pour bloquer en attendant que l’authentification, utilisez le <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> (méthode).  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginAuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsServer (AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsServer(class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsServer(AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="asyncCallback">Délégué <see cref="T:System.AsyncCallback" /> qui fait référence à la méthode à appeler quand l’authentification est terminée.</param>
        <param name="asyncState">Objet défini par l'utilisateur comportant des informations sur l'opération. Cet objet est passé au délégué <c>asyncCallback</c> quand l’opération se termine.</param>
        <summary>Appelé par les serveurs pour commencer une opération asynchrone d'authentification du client, et éventuellement du serveur, dans une connexion client-serveur. Cette méthode ne provoque pas de blocage.</summary>
        <returns>Objet <see cref="T:System.IAsyncResult" /> indiquant l'état de l'opération asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’authentification utilise le serveur <xref:System.Net.CredentialCache.DefaultCredentials%2A>. Aucun nom de Principal du Service (SPN) est spécifié pour le serveur. Le niveau d’emprunt d’identité est <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, le niveau de sécurité est <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.  
  
 Lorsque l’authentification réussit, vous devez vérifier le <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> et <xref:System.Net.Security.NegotiateStream.IsSigned%2A> propriétés pour déterminer les services de sécurité sont utilisés par le <xref:System.Net.Security.NegotiateStream>. Vérifiez le <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> propriété pour déterminer si l’authentification mutuelle s’est produite.  
  
 Pour bloquer jusqu'à ce que l’opération est terminée, utilisez une de la <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> surcharges de méthode.  
  
 Si l’authentification échoue, vous recevez un <xref:System.Security.Authentication.AuthenticationException> ou <xref:System.Security.Authentication.InvalidCredentialException>. Dans ce cas, vous pouvez réessayer l’authentification avec les informations d’identification différentes.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException">L'authentification a échoué. Vous pouvez utiliser cet objet pour faire une nouvelle tentative d'authentification.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">L'authentification a échoué. Vous pouvez utiliser cet objet pour faire une nouvelle tentative d'authentification.</exception>
        <exception cref="T:System.ObjectDisposedException">L’objet a été fermé.</exception>
        <exception cref="T:System.NotSupportedException">Windows 95 et Windows 98 ne sont pas pris en charge.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Pour utiliser explicites <see cref="T:System.Net.NetworkCredential" />. Énumération associée : <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsServer (System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsServer(class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsServer(System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ policy, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="policy">
          <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> qui est utilisé comme protection étendue.</param>
        <param name="asyncCallback">Délégué <see cref="T:System.AsyncCallback" /> qui fait référence à la méthode à appeler quand l’authentification est terminée.</param>
        <param name="asyncState">Objet défini par l'utilisateur comportant des informations sur l'opération d'écriture. Cet objet est passé au délégué <c>asyncCallback</c> quand l’opération se termine.</param>
        <summary>Appelé par les serveurs pour commencer une opération asynchrone d'authentification du client, et éventuellement du serveur, dans une connexion client-serveur. Le processus d'authentification utilise la stratégie de protection étendue spécifiée. Cette méthode ne provoque pas de blocage.</summary>
        <returns>Objet <see cref="T:System.IAsyncResult" /> indiquant l'état de l'opération asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’authentification utilise le serveur <xref:System.Net.CredentialCache.DefaultCredentials%2A>. Aucun nom de Principal du Service (SPN) est spécifié pour le serveur. Le niveau d’emprunt d’identité est <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, le niveau de sécurité est <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.  
  
 Si le `policy` paramètre est `null`, puis une stratégie de protection étendue utilisée est <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> la valeur <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>.  
  
 Lorsque l’authentification réussit, vous devez vérifier le <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> et <xref:System.Net.Security.NegotiateStream.IsSigned%2A> propriétés pour déterminer les services de sécurité sont utilisés par le <xref:System.Net.Security.NegotiateStream>. Vérifiez le <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> propriété pour déterminer si l’authentification mutuelle s’est produite.  
  
 Pour bloquer jusqu'à ce que l’opération est terminée, utilisez une de la <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> surcharges de méthode.  
  
 Si l’authentification échoue, vous recevez un <xref:System.Security.Authentication.AuthenticationException> ou <xref:System.Security.Authentication.InvalidCredentialException>. Dans ce cas, vous pouvez réessayer l’authentification avec les informations d’identification différentes.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Le <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> et le <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> sur la stratégie de protection étendue passée dans le paramètre <paramref name="policy" /> sont tous les deux <see langword="null" />.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">L'authentification a échoué. Vous pouvez utiliser cet objet pour faire une nouvelle tentative d'authentification.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">L'authentification a échoué. Vous pouvez utiliser cet objet pour faire une nouvelle tentative d'authentification.</exception>
        <exception cref="T:System.NotSupportedException">Windows 95 et Windows 98 ne sont pas pris en charge.</exception>
        <exception cref="T:System.ObjectDisposedException">L’objet a été fermé.</exception>
        <exception cref="T:System.PlatformNotSupportedException">Le paramètre <paramref name="policy" /> avait la valeur <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> sur une plateforme qui ne prend pas en charge protection étendue.</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsServer (System.Net.NetworkCredential credential, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsServer(class System.Net.NetworkCredential credential, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsServer(System::Net::NetworkCredential ^ credential, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel requiredImpersonationLevel, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="credential">
          <see cref="T:System.Net.NetworkCredential" /> utilisé pour établir l'identité du client.</param>
        <param name="requiredProtectionLevel">L'une des valeurs <see cref="T:System.Net.Security.ProtectionLevel" />, indiquant les services de sécurité pour le flux.</param>
        <param name="requiredImpersonationLevel">L'une des valeurs <see cref="T:System.Security.Principal.TokenImpersonationLevel" />, indiquant comment le serveur peut utiliser les informations d'identification du client pour accéder aux ressources.</param>
        <param name="asyncCallback">Délégué <see cref="T:System.AsyncCallback" /> qui fait référence à la méthode à appeler quand l’authentification est terminée.</param>
        <param name="asyncState">Objet défini par l'utilisateur comportant des informations sur l'opération. Cet objet est passé au délégué <c>asyncCallback</c> quand l’opération se termine.</param>
        <summary>Appelé par les serveurs pour commencer une opération asynchrone d'authentification du client, et éventuellement du serveur, dans une connexion client-serveur. Le processus d'authentification utilise les options d'authentification et les informations d'identification du serveur spécifiées. Cette méthode ne provoque pas de blocage.</summary>
        <returns>Objet <see cref="T:System.IAsyncResult" /> indiquant l'état de l'opération asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le `requiredProtectionLevel` paramètre pour demander des services de sécurité pour les données transmises à l’aide du flux authentifié. Par exemple, pour que les données chiffrées et signées, spécifiez la <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> valeur. Authentification réussie ne garantit pas que, demandé <xref:System.Net.Security.ProtectionLevel> a été accordé. Vous devez vérifier le <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> et <xref:System.Net.Security.NegotiateStream.IsSigned%2A> propriétés pour déterminer les services de sécurité sont utilisés par le <xref:System.Net.Security.NegotiateStream>.  
  
 Cette méthode est asynchrone et ne bloque pas pendant l’opération se termine. Pour bloquer jusqu'à ce que l’opération est terminée, utilisez une de la <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> surcharges de méthode.  
  
 L’opération asynchrone d’authentification doit être terminée en appelant le <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsServer%2A> (méthode). En règle générale, la méthode est appelée par le `asyncCallback` déléguer. Pour plus d’informations sur l’utilisation du modèle de programmation asynchrone, consultez [appel asynchrone des méthodes synchrones](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  
  
 Si l’authentification échoue, vous recevez un <xref:System.Security.Authentication.AuthenticationException> ou <xref:System.Security.Authentication.InvalidCredentialException>. Dans ce cas, vous pouvez réessayer l’authentification avec les informations d’identification différentes.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" /> est <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="requiredImpersonationLevel" /> doit être <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" /> ou <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" /></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">L'authentification a échoué. Vous pouvez utiliser cet objet pour faire une nouvelle tentative d'authentification.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">L'authentification a échoué. Vous pouvez utiliser cet objet pour faire une nouvelle tentative d'authentification.</exception>
        <exception cref="T:System.ObjectDisposedException">L’objet a été fermé.</exception>
        <exception cref="T:System.InvalidOperationException">L’authentification a déjà eu lieu.  
  
 \- ou -  
  
 Ce flux a été utilisé précédemment pour tenter d'effectuer l'authentification en tant que client. Vous ne pouvez pas utiliser le flux pour faire une nouvelle tentative d'authentification en tant que serveur.</exception>
        <exception cref="T:System.NotSupportedException">Windows 95 et Windows 98 ne sont pas pris en charge.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Pour utiliser explicites <see cref="T:System.Net.NetworkCredential" />. Énumération associée : <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsServer (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsServer(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsServer(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ policy, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel requiredImpersonationLevel, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="credential">
          <see cref="T:System.Net.NetworkCredential" /> utilisé pour établir l'identité du client.</param>
        <param name="policy">
          <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> qui est utilisé comme protection étendue.</param>
        <param name="requiredProtectionLevel">L'une des valeurs <see cref="T:System.Net.Security.ProtectionLevel" />, indiquant les services de sécurité pour le flux.</param>
        <param name="requiredImpersonationLevel">L'une des valeurs <see cref="T:System.Security.Principal.TokenImpersonationLevel" />, indiquant comment le serveur peut utiliser les informations d'identification du client pour accéder aux ressources.</param>
        <param name="asyncCallback">Délégué <see cref="T:System.AsyncCallback" /> qui fait référence à la méthode à appeler quand l’authentification est terminée.</param>
        <param name="asyncState">Objet défini par l'utilisateur comportant des informations sur l'opération d'écriture. Cet objet est passé au délégué <c>asyncCallback</c> quand l’opération se termine.</param>
        <summary>Appelé par les serveurs pour commencer une opération asynchrone d'authentification du client, et éventuellement du serveur, dans une connexion client-serveur. Le processus d'authentification utilise les informations d'identification du serveur, les options d'authentification et la stratégie de protection étendue spécifiées. Cette méthode ne provoque pas de blocage.</summary>
        <returns>Objet <see cref="T:System.IAsyncResult" /> indiquant l'état de l'opération asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le `requiredProtectionLevel` paramètre pour demander des services de sécurité pour les données transmises à l’aide du flux authentifié. Par exemple, pour que les données chiffrées et signées, spécifiez la <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> valeur. Authentification réussie ne garantit pas que, demandé <xref:System.Net.Security.ProtectionLevel> a été accordé. Vous devez vérifier le <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> et <xref:System.Net.Security.NegotiateStream.IsSigned%2A> propriétés pour déterminer les services de sécurité sont utilisés par le <xref:System.Net.Security.NegotiateStream>.  
  
 Si le `policy` paramètre est `null`, puis une stratégie de protection étendue utilisée est <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> la valeur <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>.  
  
 Cette méthode est asynchrone et ne bloque pas pendant l’opération se termine. Pour bloquer jusqu'à ce que l’opération est terminée, utilisez une de la <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> surcharges de méthode.  
  
 L’opération asynchrone d’authentification doit être terminée en appelant le <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsServer%2A> (méthode). En règle générale, la méthode est appelée par le `asyncCallback` déléguer. Pour plus d’informations sur l’utilisation du modèle de programmation asynchrone, consultez [appel asynchrone des méthodes synchrones](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  
  
 Si l’authentification échoue, vous recevez un <xref:System.Security.Authentication.AuthenticationException> ou <xref:System.Security.Authentication.InvalidCredentialException>. Dans ce cas, vous pouvez réessayer l’authentification avec les informations d’identification différentes.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Le <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> et le <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> sur la stratégie de protection étendue passée dans le paramètre <paramref name="policy" /> sont tous les deux <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" /> est <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="requiredImpersonationLevel" /> doit être <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" /> ou <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" /></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">L'authentification a échoué. Vous pouvez utiliser cet objet pour faire une nouvelle tentative d'authentification.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">L'authentification a échoué. Vous pouvez utiliser cet objet pour faire une nouvelle tentative d'authentification.</exception>
        <exception cref="T:System.InvalidOperationException">L’authentification a déjà eu lieu.  
  
 \- ou -  
  
 Ce flux a été utilisé précédemment pour tenter d'effectuer l'authentification en tant que client. Vous ne pouvez pas utiliser le flux pour faire une nouvelle tentative d'authentification en tant que serveur.</exception>
        <exception cref="T:System.NotSupportedException">Windows 95 et Windows 98 ne sont pas pris en charge.</exception>
        <exception cref="T:System.ObjectDisposedException">L’objet a été fermé.</exception>
        <exception cref="T:System.PlatformNotSupportedException">Le paramètre <paramref name="policy" /> avait la valeur <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> sur une plateforme qui ne prend pas en charge protection étendue.</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Docs>
    </Member>
    <Member MemberName="BeginRead">
      <MemberSignature Language="C#" Value="public override IAsyncResult BeginRead (byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IAsyncResult BeginRead(unsigned int8[] buffer, int32 offset, int32 count, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override IAsyncResult ^ BeginRead(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffer">Tableau <see cref="T:System.Byte" /> qui reçoit les octets lus dans le flux de données.</param>
        <param name="offset">Emplacement de base zéro dans <c>buffer</c> à partir duquel commencer le stockage des données lues dans ce flux.</param>
        <param name="count">Nombre maximal d'octets à lire dans le flux.</param>
        <param name="asyncCallback">Délégué <see cref="T:System.AsyncCallback" /> qui fait référence à la méthode à appeler lorsque l'opération de lecture est terminée.</param>
        <param name="asyncState">Objet défini par l'utilisateur comportant des informations sur l'opération de lecture. Cet objet est passé au délégué <c>asyncCallback</c> quand l’opération se termine.</param>
        <summary>Commence une opération de lecture asynchrone qui lit des données du flux et les stocke dans le tableau spécifié.</summary>
        <returns>Objet <see cref="T:System.IAsyncResult" /> indiquant l'état de l'opération asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si le chiffrement, la signature, ou le chiffrement et la signature sont activés, l’opération de lecture lit les données dans le flux sous-jacent, vérifie l’intégrité des données et les déchiffre. Si aucun service de sécurité telles que la signature ou le chiffrement de données sont en cours d’utilisation, cette méthode démarre une opération de lecture asynchrone sur le flux sous-jacent.  
  
 Cette méthode est asynchrone et ne bloque pas pendant l’opération se termine. Pour bloquer jusqu'à ce que l’opération est terminée, utilisez le <xref:System.Net.Security.NegotiateStream.Read%2A> (méthode).  
  
 L’opération de lecture asynchrone doit être terminée en appelant le <xref:System.Net.Security.NegotiateStream.EndRead%2A> (méthode). En règle générale, la méthode est appelée par le `asyncCallback` déléguer. Pour plus d’informations sur l’utilisation du modèle de programmation asynchrone, consultez [appel asynchrone des méthodes synchrones](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  
  
 La <xref:System.Net.Security.NegotiateStream> classe ne prend pas en charge simultanée de plusieurs opérations de lecture. Si vous essayez de démarrer une opération de lecture pendant la lecture des autre opération s’exécute déjà sur le même flux, une <xref:System.NotSupportedException> exception sera levée.  
  
 Vous ne pouvez pas appeler cette méthode jusqu'à ce que vous avez correctement authentifié. Pour l’authentification, appelez l’une de le <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, ou <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> méthodes.  
  
   
  
## Examples  
 L’exemple de code suivant illustre le démarrage d’une opération de lecture asynchrone. Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.Net.Security.NegotiateStream> classe.  
  
 [!code-cpp[NclNegoAsyncServer#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoAsyncServer/CPP/NclNegoAsyncServer.cpp#1)]
 [!code-csharp[NclNegoAsyncServer#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoAsyncServer/CS/server.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> est <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="offset" /> est inférieur à 0.  
  
 \- ou -  
  
 <paramref name="offset" /> est supérieur à la longueur de <paramref name="buffer" />.  
  
 \- ou -  
  
 <paramref name="offset" /> plus <paramref name="count" /> est supérieur à la longueur de <paramref name="buffer" />.</exception>
        <exception cref="T:System.IO.IOException">L'opération de lecture a échoué.  
  
 \- ou -  
  
 Le chiffrement est utilisé, mais les données n'ont pas pu être déchiffrées.</exception>
        <exception cref="T:System.NotSupportedException">Une opération de lecture est déjà en cours.</exception>
        <exception cref="T:System.ObjectDisposedException">L’objet a été fermé.</exception>
        <exception cref="T:System.InvalidOperationException">L'authentification n'a pas été effectuée.</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginWrite">
      <MemberSignature Language="C#" Value="public override IAsyncResult BeginWrite (byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IAsyncResult BeginWrite(unsigned int8[] buffer, int32 offset, int32 count, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override IAsyncResult ^ BeginWrite(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffer">Tableau de <see cref="T:System.Byte" /> qui fournit les octets à écrire dans le flux.</param>
        <param name="offset">Emplacement de base zéro dans <c>buffer</c> à partir duquel commencer la lecture des octets à écrire dans le flux.</param>
        <param name="count">Valeur <see cref="T:System.Int32" /> qui spécifie le nombre d’octets à lire dans <c>buffer</c>.</param>
        <param name="asyncCallback">Délégué <see cref="T:System.AsyncCallback" /> qui fait référence à la méthode à appeler lorsque l'opération d'écriture est terminée.</param>
        <param name="asyncState">Objet défini par l'utilisateur comportant des informations sur l'opération d'écriture. Cet objet est passé au délégué <c>asyncCallback</c> quand l’opération se termine.</param>
        <summary>Commence une opération d'écriture asynchrone qui écrit des <see cref="T:System.Byte" />s de la mémoire tampon spécifiée vers le flux.</summary>
        <returns>Objet <see cref="T:System.IAsyncResult" /> indiquant l'état de l'opération asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si le chiffrement, la signature, ou le chiffrement et la signature sont activés, cette méthode lit les données de la mémoire tampon, chiffre, les signe ou chiffre et signe et transmet à l’aide du flux sous-jacent. Si aucun service de sécurité telles que la signature ou le chiffrement de données sont en cours d’utilisation, cette méthode démarre une opération d’écriture asynchrone sur le flux sous-jacent.  
  
 Cette méthode est asynchrone et ne bloque pas pendant l’opération se termine. Pour bloquer jusqu'à ce que l’opération est terminée, utilisez le <xref:System.Net.Security.NegotiateStream.Read%2A> (méthode).  
  
 L’opération de lecture asynchrone doit être terminée en appelant le <xref:System.Net.Security.NegotiateStream.EndWrite%2A> (méthode). En règle générale, la méthode est appelée par le `asyncCallback` déléguer. Pour plus d’informations sur l’utilisation du modèle de programmation asynchrone, consultez [appel asynchrone des méthodes synchrones](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  
  
 La <xref:System.Net.Security.NegotiateStream> classe ne prend pas en charge plusieurs opérations d’écriture simultanées. Si vous essayez de démarrer une opération d’écriture pendant qu’une autre opération d’écriture s’exécute déjà sur le même flux, une <xref:System.NotSupportedException> exception sera levée.  
  
 Vous ne pouvez pas appeler cette méthode jusqu'à ce que vous avez correctement authentifié. Pour l’authentification, appelez l’une de le <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, ou <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> méthodes.  
  
   
  
## Examples  
 L’exemple de code suivant illustre le début d’une opération d’écriture asynchrone.  
  
 [!code-cpp[NclNegoAsyncClient#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#3)]
 [!code-csharp[NclNegoAsyncClient#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#3)]  
  
 La méthode suivante est appelée lorsque l’opération se termine.  
  
 [!code-cpp[NclNegoAsyncClient#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#4)]
 [!code-csharp[NclNegoAsyncClient#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> est <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="offset is less than 0" />.  
  
 \- ou -  
  
 <paramref name="offset" /> est supérieur à la longueur de <paramref name="buffer" />.  
  
 \- ou -  
  
 <paramref name="offset" /> plus count est supérieur à la longueur de <paramref name="buffer" />.</exception>
        <exception cref="T:System.IO.IOException">L'opération d'écriture a échoué.  
  
 \- ou -  
  
 Le chiffrement est utilisé, mais les données n'ont pas pu être chiffrées.</exception>
        <exception cref="T:System.NotSupportedException">Une opération d'écriture est déjà en cours.</exception>
        <exception cref="T:System.ObjectDisposedException">L’objet a été fermé.</exception>
        <exception cref="T:System.InvalidOperationException">L'authentification n'a pas été effectuée.</exception>
      </Docs>
    </Member>
    <Member MemberName="CanRead">
      <MemberSignature Language="C#" Value="public override bool CanRead { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanRead" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.CanRead" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanRead As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanRead { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur <see cref="T:System.Boolean" /> qui indique si le flux sous-jacent est accessible en lecture.</summary>
        <value>
          <see langword="true" /> si l'authentification s'est produite et que le flux sous-jacent est accessible en lecture ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si l’authentification réussie a eu lieu, cette propriété retourne la valeur retournée en appelant le <xref:System.IO.Stream.CanRead%2A> propriété sur le flux sous-jacent. Le flux sous-jacent est spécifié lorsque vous créez une instance de la <xref:System.Net.Security.NegotiateStream> classe.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’affichage de la valeur de cette propriété.  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSeek">
      <MemberSignature Language="C#" Value="public override bool CanSeek { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanSeek" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.CanSeek" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanSeek As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanSeek { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur <see cref="T:System.Boolean" /> qui indique si le flux sous-jacent peut faire l'objet d'une recherche.</summary>
        <value>Cette propriété retourne toujours <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous ne devez pas essayer de définir la position de la <xref:System.Net.Security.NegotiateStream> objet ou son flux sous-jacent. Le flux sous-jacent est spécifié lorsque vous créez une instance de la <xref:System.Net.Security.NegotiateStream> classe.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’affichage de la valeur de cette propriété.  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.Security.NegotiateStream.Position" />
      </Docs>
    </Member>
    <Member MemberName="CanTimeout">
      <MemberSignature Language="C#" Value="public override bool CanTimeout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.CanTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanTimeout As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanTimeout { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur <see cref="T:System.Boolean" /> qui indique si le flux sous-jacent prend en charge les délais d'attente.</summary>
        <value>
          <see langword="true" /> si le flux de données prend en charge les délais d'attente ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété retourne la valeur retournée en appelant le <xref:System.IO.Stream.CanTimeout%2A> propriété sur le flux sous-jacent. Le flux sous-jacent est spécifié lorsque vous créez une instance de la <xref:System.Net.Security.NegotiateStream> classe.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’affichage de la valeur de cette propriété.  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanWrite">
      <MemberSignature Language="C#" Value="public override bool CanWrite { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanWrite" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.CanWrite" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanWrite As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanWrite { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur <see cref="T:System.Boolean" /> qui indique si le flux sous-jacent est accessible en écriture.</summary>
        <value>
          <see langword="true" /> si l'authentification s'est produite et que le flux sous-jacent est accessible en écriture ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si l’authentification réussie a eu lieu, cette propriété retourne la valeur retournée en appelant le <xref:System.IO.Stream.CanWrite%2A> propriété sur le flux sous-jacent. Le flux sous-jacent est spécifié lorsque vous créez une instance de la <xref:System.Net.Security.NegotiateStream> classe.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’affichage de la valeur de cette propriété.  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> pour libérer les ressources managées et non managées ; <see langword="false" /> pour ne libérer que les ressources non managées.</param>
        <summary>Libère les ressources non managées utilisées par <see cref="T:System.Net.Security.NegotiateStream" /> et libère éventuellement les ressources managées.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode est appelée par le public `Dispose()` (méthode) et le <xref:System.Object.Finalize%2A> (méthode). `Dispose()` appelle la méthode protégée `Dispose(Boolean)` méthode avec la `disposing` paramètre la valeur `true`. <xref:System.Object.Finalize%2A> appelle `Dispose` avec `disposing` la valeur `false`.  
  
 Lorsque le `disposing` paramètre a la valeur true, cette méthode libère toutes les ressources détenues par les objets managés référencés par ce <xref:System.Net.Security.NegotiateStream> références. Cette méthode appelle la méthode `Dispose()` de chaque objet référencé.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see langword="Dispose" /> peut être appelée plusieurs fois par d'autres objets. Lors de la substitution <see langword="Dispose(Boolean)" /> veillez à ne pas référencer des objets qui ont été supprimés lors d’un appel précédent à <see langword="Dispose" />. Pour plus d’informations sur l’implémentation <see langword="Dispose(Boolean)" />, consultez [implémentant une méthode de suppression](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
 Pour plus d’informations sur <see langword="Dispose" /> et <see cref="M:System.Object.Finalize" />, consultez [de nettoyage des ressources non managées](~/docs/standard/garbage-collection/unmanaged.md) et [substitution de la méthode Finalize](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="EndAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void EndAuthenticateAsClient (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndAuthenticateAsClient(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.EndAuthenticateAsClient(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndAuthenticateAsClient (asyncResult As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndAuthenticateAsClient(IAsyncResult ^ asyncResult);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">Instance de <see cref="T:System.IAsyncResult" /> retournée par un appel à <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient" />.</param>
        <summary>Termine une opération d'authentification du client asynchrone en attente qui a été démarrée avec un appel à <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si l’opération n’est pas terminée, cette méthode est bloquée jusqu'à ce qu’il effectue. Lorsque l’authentification réussit, vous devez vérifier le <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> et <xref:System.Net.Security.NegotiateStream.IsSigned%2A> propriétés pour déterminer les services de sécurité sont utilisés par le <xref:System.Net.Security.NegotiateStream>. Vérifiez le <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> propriété pour déterminer si l’authentification mutuelle s’est produite.  
  
 Si l’authentification échoue, vous recevez un <xref:System.Security.Authentication.AuthenticationException> ou <xref:System.Security.Authentication.InvalidCredentialException>. Dans ce cas, vous pouvez réessayer l’authentification avec les informations d’identification différentes.  
  
 Pour effectuer cette opération de manière synchrone, utilisez une de la <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> (méthode).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="asyncResult" /> est <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="asyncResult" /> n'a pas été créé par un appel à la méthode <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient" />.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">L'authentification a échoué. Vous pouvez utiliser cet objet pour faire une nouvelle tentative d'authentification.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">L'authentification a échoué. Vous pouvez utiliser cet objet pour faire une nouvelle tentative d'authentification.</exception>
        <exception cref="T:System.InvalidOperationException">Aucune authentification de client n'est en attente d'achèvement.</exception>
      </Docs>
    </Member>
    <Member MemberName="EndAuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual void EndAuthenticateAsServer (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndAuthenticateAsServer(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.EndAuthenticateAsServer(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndAuthenticateAsServer (asyncResult As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndAuthenticateAsServer(IAsyncResult ^ asyncResult);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">Instance de <see cref="T:System.IAsyncResult" /> retournée par un appel à <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer" />.</param>
        <summary>Termine une opération d'authentification du client asynchrone en attente qui a été démarrée avec un appel à <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si l’opération n’est pas terminée, cette méthode est bloquée jusqu'à ce qu’il effectue.  
  
 Lorsque l’authentification réussit, vous devez vérifier le <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> et <xref:System.Net.Security.NegotiateStream.IsSigned%2A> propriétés pour déterminer les services de sécurité sont utilisés par le <xref:System.Net.Security.NegotiateStream>. Vérifiez le <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> propriété pour déterminer si l’authentification mutuelle s’est produite.  
  
 Si l’authentification échoue, vous recevez un <xref:System.Security.Authentication.AuthenticationException> ou <xref:System.Security.Authentication.InvalidCredentialException>. Dans ce cas, vous pouvez réessayer l’authentification avec les informations d’identification différentes.  
  
 Pour effectuer cette opération de manière synchrone, utilisez la <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> (méthode).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="asyncResult" /> est <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="asyncResult" /> n'a pas été créé par un appel à la méthode <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer" />.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">L'authentification a échoué. Vous pouvez utiliser cet objet pour faire une nouvelle tentative d'authentification.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">L'authentification a échoué. Vous pouvez utiliser cet objet pour faire une nouvelle tentative d'authentification.</exception>
        <exception cref="T:System.InvalidOperationException">Aucune authentification n'est en attente d'achèvement.</exception>
      </Docs>
    </Member>
    <Member MemberName="EndRead">
      <MemberSignature Language="C#" Value="public override int EndRead (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 EndRead(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.EndRead(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function EndRead (asyncResult As IAsyncResult) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int EndRead(IAsyncResult ^ asyncResult);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">Instance de <see cref="T:System.IAsyncResult" /> retournée par un appel à <see cref="M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />.</param>
        <summary>Termine une opération de lecture asynchrone qui a été démarrée avec un appel à <see cref="M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />.</summary>
        <returns>Valeur <see cref="T:System.Int32" /> qui spécifie le nombre d'octets lus dans le flux sous-jacent.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si l’opération n’est pas terminée, cette méthode est bloquée jusqu'à ce qu’il effectue.  
  
 Pour effectuer cette opération de manière synchrone, utilisez la <xref:System.Net.Security.NegotiateStream.Read%2A> (méthode).  
  
 Vous ne pouvez pas appeler cette méthode jusqu'à ce que vous avez correctement authentifié. Pour l’authentification, appelez l’une de le <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, ou <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> méthodes.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’opération de lecture asynchrone de fin. Pour obtenir un exemple qui illustre le démarrage de l’opération, consultez <xref:System.Net.Security.NegotiateStream.BeginRead%2A>.  
  
 [!code-cpp[NclNegoAsyncServer#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoAsyncServer/CPP/NclNegoAsyncServer.cpp#3)]
 [!code-csharp[NclNegoAsyncServer#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoAsyncServer/CS/server.cs#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="asyncResult" /> est <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">asyncResult n'a pas été créé par un appel à <see cref="M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />.</exception>
        <exception cref="T:System.InvalidOperationException">L'authentification n'a pas été effectuée.</exception>
        <exception cref="T:System.IO.IOException">L'opération de lecture a échoué.</exception>
      </Docs>
    </Member>
    <Member MemberName="EndWrite">
      <MemberSignature Language="C#" Value="public override void EndWrite (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void EndWrite(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.EndWrite(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub EndWrite (asyncResult As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void EndWrite(IAsyncResult ^ asyncResult);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">Instance de <see cref="T:System.IAsyncResult" /> retournée par un appel à <see cref="M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />.</param>
        <summary>Termine une opération d'écriture asynchrone qui a été démarrée avec un appel à <see cref="M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si l’opération n’est pas terminée, cette méthode est bloquée jusqu'à ce qu’il effectue.  
  
 Vous ne pouvez pas appeler cette méthode jusqu'à ce que vous avez correctement authentifié. Pour l’authentification, appelez l’une de le <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, ou <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> méthodes.  
  
 Pour effectuer cette opération de manière synchrone, utilisez la <xref:System.Net.Security.NegotiateStream.Write%2A> (méthode).  
  
   
  
## Examples  
 L’exemple de code suivant montre une méthode qui est appelée pour terminer l’opération d’écriture asynchrone. Pour obtenir un exemple qui illustre le démarrage de l’opération, consultez <xref:System.Net.Security.NegotiateStream.BeginWrite%2A>.  
  
 [!code-cpp[NclNegoAsyncClient#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#4)]
 [!code-csharp[NclNegoAsyncClient#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="asyncResult" /> est <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">asyncResult n'a pas été créé par un appel à <see cref="M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />.</exception>
        <exception cref="T:System.InvalidOperationException">L'authentification n'a pas été effectuée.</exception>
        <exception cref="T:System.IO.IOException">L'opération d'écriture a échoué.</exception>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public override void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Flush();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Provoque l'écriture des données mises en mémoire tampon sur le périphérique sous-jacent.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode appelle <xref:System.IO.Stream.Flush%2A> sur le flux sous-jacent.  
  
   
  
## Examples  
 L’exemple de code suivant illustre le vidage du flux.  
  
 [!code-cpp[NclNegoSyncClient#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#4)]
 [!code-csharp[NclNegoSyncClient#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FlushAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task FlushAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task FlushAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.FlushAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task ^ FlushAsync(System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImpersonationLevel">
      <MemberSignature Language="C#" Value="public virtual System.Security.Principal.TokenImpersonationLevel ImpersonationLevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.Principal.TokenImpersonationLevel ImpersonationLevel" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.ImpersonationLevel" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ImpersonationLevel As TokenImpersonationLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Security::Principal::TokenImpersonationLevel ImpersonationLevel { System::Security::Principal::TokenImpersonationLevel get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Principal.TokenImpersonationLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui indique comment le serveur peut utiliser les informations d'identification du client.</summary>
        <value>Une des valeurs de <see cref="T:System.Security.Principal.TokenImpersonationLevel" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous devez vous authentifier avec succès avant d’appeler cette méthode. Les clients spécifier le niveau d’emprunt d’identité lorsqu’elles demandent l’authentification en appelant une de le <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> ou <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> méthodes. Si vous authentifiez sans spécifier un <xref:System.Security.Principal.TokenImpersonationLevel> , <xref:System.Security.Principal.TokenImpersonationLevel.Identification> est utilisé.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’affichage de la valeur de cette propriété.  
  
 [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">L'authentification a échoué ou n'a pas été effectuée.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsAuthenticated">
      <MemberSignature Language="C#" Value="public override bool IsAuthenticated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAuthenticated" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.IsAuthenticated" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsAuthenticated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsAuthenticated { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur <see cref="T:System.Boolean" /> qui indique si l'authentification a réussi.</summary>
        <value>
          <see langword="true" /> si l'authentification réalisée a réussi ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les clients s’authentifient en appelant le <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> ou <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> méthodes. Les serveurs s’authentifient en appelant le <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> ou <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> méthodes.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’affichage de la valeur de cette propriété.  
  
 [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEncrypted">
      <MemberSignature Language="C#" Value="public override bool IsEncrypted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEncrypted" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.IsEncrypted" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsEncrypted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsEncrypted { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur <see cref="T:System.Boolean" /> qui indique si ce <see cref="T:System.Net.Security.NegotiateStream" /> utilise le chiffrement de données.</summary>
        <value>
          <see langword="true" /> si les données sont chiffrées avant d'être transmises sur le réseau et déchiffrées lorsqu'elles atteignent le point de terminaison distant ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le chiffrement permet de protéger la confidentialité des données ; à savoir, il permet de se pour assurer que, pendant des données en transit il ne peut pas être déchiffrée par des tiers.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’affichage de la valeur de cette propriété.  
  
 [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.Security.ProtectionLevel" />
      </Docs>
    </Member>
    <Member MemberName="IsMutuallyAuthenticated">
      <MemberSignature Language="C#" Value="public override bool IsMutuallyAuthenticated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMutuallyAuthenticated" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsMutuallyAuthenticated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsMutuallyAuthenticated { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur <see cref="T:System.Boolean" /> qui indique si le serveur et le client ont tous les deux été authentifiés.</summary>
        <value>
          <see langword="true" /> si le serveur a été authentifié ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’authentification mutuelle est spécifiée par le client lorsque le client souhaite que le serveur pour fournir des informations d’identification pour l’authentification. Par défaut, les clients demandent l’authentification mutuelle.  
  
 Le protocole Negotiate sélectionne NTLM ou Kerberos selon les protocoles de sécurité pris en charge par le client et le serveur. NTLM ne prend pas en charge l’authentification mutuelle.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’affichage de la valeur de cette propriété.  
  
 [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsServer">
      <MemberSignature Language="C#" Value="public override bool IsServer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsServer" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.IsServer" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsServer As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsServer { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur <see cref="T:System.Boolean" /> qui indique si le côté local de la connexion utilisée par ce <see cref="T:System.Net.Security.NegotiateStream" /> a été authentifié comme serveur.</summary>
        <value>
          <see langword="true" /> si le point de terminaison local a été authentifié avec succès comme côté serveur de la connexion authentifiée ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si l’authentification a échoué ou n’a été réalisée, cette propriété retourne `false`.  
  
 Pour l’authentification en tant que le serveur, appelez le <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> ou <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> méthodes.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’affichage de la valeur de cette propriété.  
  
 [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSigned">
      <MemberSignature Language="C#" Value="public override bool IsSigned { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSigned" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.IsSigned" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSigned As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSigned { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur <see cref="T:System.Boolean" /> qui indique si les données envoyées à l'aide de ce flux sont signées.</summary>
        <value>
          <see langword="true" /> si les données sont signées avant d'être transmises ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Signature des données permet de protéger l’intégrité des données ; à savoir, il permet le destinataire de déterminer si les données a été falsifiées lors de leur transit.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’affichage de la valeur de cette propriété.  
  
 [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public override long Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Length" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.Length" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Length As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property long Length { long get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la longueur du flux sous-jacent.</summary>
        <value>
          <see cref="T:System.Int64" /> qui spécifie la longueur du flux sous-jacent.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété retourne la valeur retournée en appelant le <xref:System.IO.Stream.Length%2A> propriété sur le flux sous-jacent. Si le flux sous-jacent n’est pas identifiable, cette propriété lève généralement une exception. Le type au moment de l’exécution du flux sous-jacent détermine le type au moment de l’exécution de l’exception est levée.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’affichage de la valeur de cette propriété.  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">L'obtention de la valeur de cette propriété n'est pas prise en charge lorsque le flux sous-jacent est <see cref="T:System.Net.Sockets.NetworkStream" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public override long Position { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Position" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.Position" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Position As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property long Position { long get(); void set(long value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la position actuelle dans le flux sous-jacent.</summary>
        <value>
          <see cref="T:System.Int64" /> qui spécifie la position actuelle dans le flux sous-jacent.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété retourne la valeur retournée en appelant le <xref:System.IO.Stream.Position%2A> propriété sur le flux sous-jacent. Si le flux sous-jacent n’est pas identifiable, cette propriété lève généralement une exception. Le type au moment de l’exécution du flux sous-jacent détermine le type au moment de l’exécution de l’exception est levée.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">La définition de cette propriété n'est pas prise en charge.  
  
 \- ou -  
  
 L'obtention de la valeur de cette propriété n'est pas prise en charge lorsque le flux sous-jacent est <see cref="T:System.Net.Sockets.NetworkStream" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public override int Read (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Read(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.Read(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Read (buffer As Byte(), offset As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int Read(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Tableau <see cref="T:System.Byte" /> qui reçoit les octets lus dans le flux de données.</param>
        <param name="offset">
          <see cref="T:System.Int32" /> contenant l’emplacement de base zéro dans <c>buffer</c> à partir duquel commencer le stockage des données lues dans ce flux.</param>
        <param name="count">
          <see cref="T:System.Int32" /> contenant le nombre maximal d'octets à lire dans le flux.</param>
        <summary>Lit les données de ce flux et les stocke dans le tableau spécifié.</summary>
        <returns>Valeur <see cref="T:System.Int32" /> qui spécifie le nombre d'octets lus dans le flux sous-jacent. Lorsqu'il n'y a plus de données à lire, retourne 0.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La méthode lit un maximum de `count` octets à partir du flux et les stocke dans `buffer` commençant à `offset`.  
  
 Vous ne pouvez pas appeler cette méthode jusqu'à ce que vous avez correctement authentifié. Pour l’authentification, appelez l’une de le <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, ou <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> méthodes.  
  
 Pour effectuer cette opération de façon asynchrone, utilisez la <xref:System.Net.Security.NegotiateStream.BeginRead%2A> (méthode).  
  
   
  
## Examples  
 L’exemple de code suivant illustre la lecture dans un <xref:System.Net.Security.NegotiateStream>.  
  
 [!code-cpp[NclNegoSyncServer#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncServer/CPP/NclNegoSyncServer.cpp#1)]
 [!code-csharp[NclNegoSyncServer#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncServer/CS/server.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">L'opération de lecture a échoué.</exception>
        <exception cref="T:System.InvalidOperationException">L'authentification n'a pas été effectuée.</exception>
        <exception cref="T:System.NotSupportedException">Une opération <see cref="M:System.Net.Security.NegotiateStream.Read(System.Byte[],System.Int32,System.Int32)" /> est en cours d'exécution.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadTimeout">
      <MemberSignature Language="C#" Value="public override int ReadTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ReadTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.ReadTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ReadTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int ReadTimeout { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la durée pendant laquelle une opération de lecture reste bloquée en attendant des données.</summary>
        <value>
          <see cref="T:System.Int32" /> spécifiant le temps qui doit s'écouler avant l'échec d'une opération de lecture.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété retourne la valeur retournée en appelant le <xref:System.IO.Stream.ReadTimeout%2A> propriété sur le flux sous-jacent. Lorsque vous définissez cette propriété, le <xref:System.IO.Stream.ReadTimeout%2A> sur le flux sous-jacent est la valeur à la valeur spécifiée.  
  
 Si le flux sous-jacent est un <xref:System.Net.Sockets.NetworkStream>, <xref:System.Net.Security.NegotiateStream.ReadTimeout%2A> est exprimée en millisecondes et a la valeur <xref:System.Threading.Timeout.Infinite> par défaut afin que les opérations n’expirent pas de lecture.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’affichage de la valeur de cette propriété.  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoteIdentity">
      <MemberSignature Language="C#" Value="public virtual System.Security.Principal.IIdentity RemoteIdentity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Principal.IIdentity RemoteIdentity" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.RemoteIdentity" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property RemoteIdentity As IIdentity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Security::Principal::IIdentity ^ RemoteIdentity { System::Security::Principal::IIdentity ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Principal.IIdentity</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient des informations à propos de l'identité du tiers distant qui partage ce flux authentifié.</summary>
        <value>Objet <see cref="T:System.Security.Principal.IIdentity" /> qui décrit l'identité du point de terminaison distant.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lors de l’accès par le client, cette propriété retourne un <xref:System.Security.Principal.GenericIdentity> contenant le nom Principal de Service (SPN) du serveur et le protocole d’authentification utilisé. Lors de l’accès par le serveur, cette propriété retourne un <xref:System.Security.Principal.WindowsIdentity> qui décrit le client. Si le <xref:System.Security.Principal.WindowsIdentity> est non disponible, les informations de client sont retournées au serveur dans un <xref:System.Security.Principal.GenericIdentity>.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’affichage de la valeur de cette propriété.  
  
 [!code-cpp[NclNegoAsyncServer#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoAsyncServer/CPP/NclNegoAsyncServer.cpp#2)]
 [!code-csharp[NclNegoAsyncServer#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoAsyncServer/CS/server.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">L'authentification a échoué ou n'a pas été effectuée.</exception>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public override long Seek (long offset, System.IO.SeekOrigin origin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int64 Seek(int64 offset, valuetype System.IO.SeekOrigin origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.Seek(System.Int64,System.IO.SeekOrigin)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Seek (offset As Long, origin As SeekOrigin) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override long Seek(long offset, System::IO::SeekOrigin origin);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.Int64" />
        <Parameter Name="origin" Type="System.IO.SeekOrigin" />
      </Parameters>
      <Docs>
        <param name="offset">Cette valeur est ignorée.</param>
        <param name="origin">Cette valeur est ignorée.</param>
        <summary>Lève <see cref="T:System.NotSupportedException" />.</summary>
        <returns>Lève toujours une exception <see cref="T:System.NotSupportedException" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 N'appelez pas cette méthode. Elle est héritée, mais n’est pas pris en charge par <xref:System.Net.Security.NegotiateStream>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">La recherche n'est pas prise en charge sur <see cref="T:System.Net.Security.NegotiateStream" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SetLength">
      <MemberSignature Language="C#" Value="public override void SetLength (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void SetLength(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.SetLength(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub SetLength (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void SetLength(long value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">Valeur <see cref="T:System.Int64" /> qui spécifie la longueur du flux.</param>
        <summary>Définit la longueur du flux sous-jacent.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.Write(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (buffer As Byte(), offset As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Tableau de <see cref="T:System.Byte" /> qui fournit les octets écrits dans le flux.</param>
        <param name="offset">
          <see cref="T:System.Int32" /> contenant l’emplacement de base zéro dans <c>buffer</c> à partir duquel commencer la lecture des octets à écrire dans le flux.</param>
        <param name="count">
          <see cref="T:System.Int32" /> contenant le nombre d’octets à lire dans <c>buffer</c>.</param>
        <summary>Écrivez le nombre spécifié de <see cref="T:System.Byte" />s dans le flux sous-jacent à l'aide de la mémoire tampon et de l'offset spécifiés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si le chiffrement, la signature, ou le chiffrement et la signature sont activés, cette méthode lit les données de la mémoire tampon, chiffre, les signe ou chiffre et signe et transmet à l’aide du flux sous-jacent. Si aucun service de sécurité telles que la signature ou le chiffrement de données sont en cours d’utilisation, cette méthode appelle <xref:System.IO.Stream.Write%2A> sur le flux sous-jacent.  
  
 Cette méthode est bloquée pendant que l’opération d’écriture se termine. Pour éviter un blocage pendant l’opération est terminée, utilisez le <xref:System.Net.Security.NegotiateStream.Write%2A> (méthode).  
  
 Vous ne pouvez pas appeler cette méthode jusqu'à ce que vous avez correctement authentifié. Pour l’authentification, appelez l’une de le <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, ou <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> méthodes.  
  
 La <xref:System.Net.Security.NegotiateStream> classe ne prend pas en charge plusieurs opérations d’écriture simultanées. Si vous essayez de démarrer une opération d’écriture pendant qu’une autre opération d’écriture s’exécute déjà sur le même flux, une <xref:System.NotSupportedException> exception sera levée.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’écriture dans un <xref:System.Net.Security.NegotiateStream>.  
  
 [!code-cpp[NclNegoSyncClient#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#4)]
 [!code-csharp[NclNegoSyncClient#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> est <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="offset is less than 0" />.  
  
 \- ou -  
  
 <paramref name="offset" /> est supérieur à la longueur de <paramref name="buffer" />.  
  
 \- ou -  
  
 <paramref name="offset" /> plus count est supérieur à la longueur de <paramref name="buffer" />.</exception>
        <exception cref="T:System.IO.IOException">L'opération d'écriture a échoué.  
  
 \- ou -  
  
 Le chiffrement est utilisé, mais les données n'ont pas pu être chiffrées.</exception>
        <exception cref="T:System.NotSupportedException">Une opération d'écriture est déjà en cours.</exception>
        <exception cref="T:System.ObjectDisposedException">L’objet a été fermé.</exception>
        <exception cref="T:System.InvalidOperationException">L'authentification n'a pas été effectuée.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteTimeout">
      <MemberSignature Language="C#" Value="public override int WriteTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WriteTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.WriteTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property WriteTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int WriteTimeout { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la durée pendant laquelle une opération d'écriture reste bloquée en attendant des données.</summary>
        <value>
          <see cref="T:System.Int32" /> spécifiant le temps qui doit s'écouler avant l'échec d'une opération d'écriture.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété retourne la valeur retournée en appelant le <xref:System.IO.Stream.WriteTimeout%2A> propriété sur le flux sous-jacent. Pour les opérations de jeu, définit la valeur spécifiée du <xref:System.IO.Stream.WriteTimeout%2A> valeur sur le flux sous-jacent.  
  
 Si le flux sous-jacent est un <xref:System.Net.Sockets.NetworkStream>, <xref:System.Net.Security.NegotiateStream.WriteTimeout%2A> est exprimée en millisecondes et a la valeur <xref:System.Threading.Timeout.Infinite> par défaut afin que d’écriture opérations n’expirent pas.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’affichage de la valeur de cette propriété.  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>