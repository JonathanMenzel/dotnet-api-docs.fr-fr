<Namespace Name="System.Xml">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="5c4fd9b36a99676d4d624d94c26c034d99294275" />
    <Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="11/17/2018" />
    <Meta Name="ms.locfileid" Value="51864916" />
  </Metadata>
  <Docs>
    <summary>L'espace de noms <see cref="N:System.Xml" /> fournit une prise en charge standard du traitement XML.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="std"></a>   
## <a name="supported-standards"></a>Normes prises en charge  
 Le <xref:System.Xml> espace de noms prend en charge ces normes :  
  
-   XML 1.0, y compris la prise en charge DTD : [http://www.w3.org/TR/2006/REC-xml-20060816/](http://www.w3.org/TR/2006/REC-xml-20060816/)  
  
-   Espaces de noms XML, à la fois au niveau du flux et DOM : [http://www.w3.org/TR/REC-xml-names/](http://www.w3.org/TR/REC-xml-names/)  
  
-   Schémas XML : [http://www.w3.org/2001/XMLSchema](http://www.w3.org/2001/XMLSchema)  
  
-   Expressions XPath : [http://www.w3.org/TR/xpath](http://www.w3.org/TR/xpath)  
  
-   Transformations XSLT : [http://www.w3.org/TR/xslt](http://www.w3.org/TR/xslt)  
  
-   DOM Level 1 Core : [http://www.w3.org/TR/REC-DOM-Level-1/](http://www.w3.org/TR/REC-DOM-Level-1/)  
  
-   DOM Level 2 Core : [http://www.w3.org/TR/DOM-Level-2/](http://www.w3.org/TR/DOM-Level-2/)  
  
 Consultez la section [différences avec les spécifications W3C](#diff) pour les deux cas dans lequel les classes XML diffèrent les recommandations du W3C.  
  
<a name="related"></a>   
## <a name="related-namespaces"></a>Les espaces de noms  
 Le .NET Framework fournit également des autres espaces de noms pour les opérations liées à XML. Pour obtenir la liste, les descriptions et des liens, consultez le [espaces de noms System.Xml](https://msdn.microsoft.com/library/gg145036.aspx) page Web.  
  
<a name="async"></a>   
## <a name="processing-xml-asynchronously"></a>Traitement XML de façon asynchrone  
 Le <xref:System.Xml.XmlReader?displayProperty=nameWithType> et <xref:System.Xml.XmlWriter?displayProperty=nameWithType> classes incluent un nombre de méthodes asynchrones qui sont basées sur le. Ces méthodes peuvent être identifiés par la chaîne « Async » à la fin de leurs noms. Avec ces méthodes, vous pouvez écrire du code asynchrone qui est similaire à votre code synchrone, et vous pouvez migrer facilement votre code synchrone existant en code asynchrone.  
  
-   Utilisez les méthodes asynchrones dans les applications où il existe une latence flux réseau important. Évitez d’utiliser les API asynchrones pour les flux de mémoire ou d’opérations de lecture/écriture de flux de fichier local. Le flux d’entrée, <xref:System.Xml.XmlTextReader>, et <xref:System.Xml.XmlTextWriter> doit de prendre en charge des opérations asynchrones. Sinon, threads seront bloquées par les opérations d’e/s.  
  
-   Nous ne recommandons pas mélanger les appels de fonction synchrones et asynchrones, car vous pouvez oublier d’utiliser la `await` mot-clé ou utiliser une API synchrone où un asynchrone est nécessaire.  
  
-   Ne définissez pas la <xref:System.Xml.XmlReaderSettings.Async%2A?displayProperty=nameWithType> ou <xref:System.Xml.XmlWriterSettings.Async%2A?displayProperty=nameWithType> indicateur `true` si vous n’envisagez pas d’utiliser une méthode asynchrone.  
  
-   Si vous oubliez de spécifier le `await` mot clé lorsque vous appelez une méthode asynchrone, les résultats sont non déterministes : vous pouvez recevoir le résultat que vous attendiez ou une exception.  
  
-   Quand un <xref:System.Xml.XmlReader> objet lit un nœud de texte de grande taille, il peut mettre en cache uniquement une valeur de texte partiel et retourner le nœud de texte, par conséquent, récupérer le <xref:System.Xml.XmlReader.Value%2A?displayProperty=nameWithType> propriété peut être bloquée par une opération d’e/s. Utiliser le <xref:System.Xml.XmlReader.GetValueAsync%2A?displayProperty=nameWithType> méthode pour obtenir la valeur de texte en mode asynchrone, ou utilisez le <xref:System.Xml.XmlReader.ReadValueChunkAsync%2A?displayProperty=nameWithType> bloquer de méthode pour lire un texte de grande taille dans des segments.  
  
-   Lorsque vous utilisez un <xref:System.Xml.XmlWriter> de l’objet, appelez le <xref:System.Xml.XmlWriter.FlushAsync%2A?displayProperty=nameWithType> méthode avant d’appeler <xref:System.Xml.XmlWriter.Close%2A?displayProperty=nameWithType> pour éviter de bloquer une opération d’e/s.  
  
<a name="diff"></a>   
## <a name="differences-from-the-w3c-specs"></a>Différences entre les spécifications W3C  
 Dans les deux scénarios qui impliquent des contraintes sur les composants de schéma de groupe de modèle, le <xref:System.Xml> espace de noms diffère les recommandations du W3C.  
  
 **Cohérence dans les déclarations d’élément :**  
  
 Dans certains cas, lorsque les groupes de substitution sont utilisés, le <xref:System.Xml> implémentation ne satisfait pas le « schéma composant contrainte : déclarations d’élément cohérentes, » qui est décrit dans la [contraintes sur les composants de schéma de modèle de groupe ](https://go.microsoft.com/fwlink/?LinkId=137029) section de la spécification du W3C.  
  
 Par exemple, le schéma suivant inclut des éléments qui portent le même nom mais des types différents dans le même modèle de contenu et les groupes de substitution sont utilisés. Cela doit provoquer une erreur, mais <xref:System.Xml> compile et valide le schéma sans erreurs.  
  
```xml  
<?xml version="1.0" encoding="utf-8" ?>   
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified">  
  
   <xs:element name="e1" type="t1"/>  
   <xs:complexType name="t1"/>  
  
   <xs:element name="e2" type="t2" substitutionGroup="e1"/>  
      <xs:complexType name="t2">  
         <xs:complexContent>  
            <xs:extension base="t1">  
         </xs:extension>  
      </xs:complexContent>  
   </xs:complexType>  
  
   <xs:complexType name="t3">  
      <xs:sequence>  
         <xs:element ref="e1"/>  
         <xs:element name="e2" type="xs:int"/>  
      </xs:sequence>  
   </xs:complexType>  
</xs:schema>  
```  
  
 Dans ce schéma, le type `t3` contient une séquence d'éléments. En raison de la substitution, la référence à l'élément `e1` de la séquence peut générer soit un élément `e1` de type `t1`, soit un élément `e2` de type `t2`. Ce dernier cas entraînerait une séquence de deux `e2` éléments, où un est de type `t2` et l’autre est de type `xs:int`.  
  
 **Attribution de particule unique :**  
  
 Dans les conditions suivantes, le <xref:System.Xml> implémentation ne satisfait pas le « schéma composant contrainte : Attribution de particule Unique, » qui est décrit dans la [contraintes sur les composants de schéma de modèle de groupe](https://go.microsoft.com/fwlink/?LinkId=137029) section de la spécification du W3C.  
  
-   L'un des éléments du groupe fait référence un autre élément.  
  
-   L'élément référencé est un élément head d'un groupe de substitution.  
  
-   Le groupe de substitution contient un élément qui a le même nom qu’un des éléments dans le groupe.  
  
-   La cardinalité de l’élément qui fait référence à l’élément head de groupe de substitution et de l’élément portant le même nom qu’un élément de groupe de substitution n’est pas fixe (minOccurs < maxOccurs).  
  
-   La définition de l’élément qui fait référence au groupe de substitution précède la définition de l’élément avec le même nom qu’un élément de groupe de substitution.  
  
 Par exemple, dans le schéma ci-dessous le modèle de contenu est ambigu et doit provoquer une erreur de compilation, mais <xref:System.Xml> compile le schéma sans erreurs.  
  
```xml  
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified">  
  
  <xs:element name="e1" type="xs:int"/>  
  <xs:element name="e2" type="xs:int" substitutionGroup="e1"/>  
  
  <xs:complexType name="t3">  
    <xs:sequence>  
      <xs:element ref="e1" minOccurs="0" maxOccurs="1"/>  
      <xs:element name="e2" type="xs:int" minOccurs="0" maxOccurs="1"/>  
    </xs:sequence>  
  </xs:complexType>  
  
  <xs:element name="e3" type="t3"/>  
</xs:schema>  
```  
  
 Si vous essayez de valider le code XML suivant par rapport au schéma ci-dessus, la validation échoue avec le message suivant : « l’élément « e3 » possède enfant non valide e2' élément' ». et un <xref:System.Xml.Schema.XmlSchemaValidationException> exception sera levée.  
  
```xml  
<e3>  
  <e2>1</e2>  
  <e2>2</e2>  
</e3>  
```  
  
 Pour contourner ce problème, vous pouvez échanger des déclarations d’élément dans le document XSD. Exemple :  
  
```xml  
<xs:sequence>  
  <xs:element ref="e1" minOccurs="0" maxOccurs="1"/>  
  <xs:element name="e2" type="xs:int" minOccurs="0" maxOccurs="1"/>  
</xs:sequence>  
```  
  
 devient cela :  
  
```xml  
<xs:sequence>  
  <xs:element name="e2" type="xs:int" minOccurs="0" maxOccurs="1"/>  
  <xs:element ref="e1" minOccurs="0" maxOccurs="1"/>  
</xs:sequence>  
```  
  
 Voici un autre exemple du même problème :  
  
```xml  
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified">  
   <xs:element name="e1" type="xs:string"/>  
   <xs:element name="e2" type="xs:string" substitutionGroup="e1"/>  
  
   <xs:complexType name="t3">  
      <xs:sequence>  
         <xs:element ref="e1" minOccurs="0" maxOccurs="1"/>  
         <xs:element name="e2" type="xs:int" minOccurs="0" maxOccurs="1"/>  
      </xs:sequence>  
   </xs:complexType>  
   <xs:element name="e3" type="t3"/>  
</xs:schema>  
```  
  
 Si vous essayez de valider le code XML suivant par rapport au schéma ci-dessus, la validation échoue avec l’exception suivante : « Exception non gérée : System.Xml.Schema.XmlSchemaValidationException : l’élément el « e2 » n’est pas valide : la valeur 'abc' n’est pas valide en fonction de son type de données «http://www.w3.org/2001/XMLSchema:int»-la chaîne « abc » n’est pas une valeur Int32 valide. »
  
```xml  
<e3><e2>abc</e2></e3>  
```  
  
<a name="security"></a>   
## <a name="security-considerations"></a>Considérations relatives à la sécurité  
 Les types et membres dans le <xref:System.Xml> espace de noms s’appuient sur le [système de sécurité .NET](~/docs/standard/security/index.md). Les sections suivantes décrivent les problèmes de sécurité qui sont spécifiques aux technologies XML.
  
 Notez également que lorsque vous utilisez le <xref:System.Xml> types et membres, si le code XML contient des données sensibles, vous devez implémenter votre application d’une manière qui respecte la confidentialité de vos utilisateurs finaux.
  
 **Accès externe**  
  
 Plusieurs technologies XML permettent de récupérer d'autres documents pendant le traitement. Par exemple, une définition de type de document (DTD) peut résider dans le document en cours d'analyse. La DTD peut également résider dans un document externe référencé par le document en cours d'analyse. Le langage XSD (XML Schema Definition) et les technologies XSLT permettent également d'inclure des informations provenant d'autres fichiers. Ces ressources externes peuvent présenter quelques problèmes de sécurité. Par exemple, vous voudrez vous assurer que votre application extrait les fichiers uniquement à partir de sites de confiance, et que le fichier il récupère ne contient pas des données malveillantes.  
  
 Le <xref:System.Xml.XmlUrlResolver> classe est utilisée pour charger des documents XML et pour résoudre des ressources externes telles que les entités, DTD ou schémas et d’importer ou d’inclure des directives.  
  
 Vous pouvez substituer cette classe et spécifier le <xref:System.Xml.XmlResolver> objet à utiliser. La classe <xref:System.Xml.XmlSecureResolver> doit être utilisée si vous devez ouvrir une ressource non contrôlée ou non fiable. L'objet <xref:System.Xml.XmlSecureResolver> enveloppe l'objet <xref:System.Xml.XmlResolver> et permet de limiter les ressources auxquelles l'objet <xref:System.Xml.XmlResolver> sous-jacent a accès.  
  
 **Déni de service**  
  
 Les scénarios suivants sont considérés comme moins vulnérables aux attaques de refus de service car les classes <xref:System.Xml> fournissent un moyen de protection contre ces attaques.  
  
-   Analyse de données de texte XML  
  
-   L’analyse des données XML binaires si les données XML binaires a été générées par Microsoft SQL Server.  
  
-   Écriture de documents XML et de fragments provenant de sources de données dans le système de fichiers, des flux, un objet <xref:System.IO.TextWriter> ou <xref:System.Text.StringBuilder>  
  
-   Chargement de documents dans l'objet DOM (Document Object Model) si un objet <xref:System.Xml.XmlReader> est utilisé et si <xref:System.Xml.XmlReaderSettings.DtdProcessing%2A?displayProperty=nameWithType> est défini sur <xref:System.Xml.DtdProcessing.Prohibit?displayProperty=nameWithType>  
  
-   Exploration de l'objet DOM  
  
 Les scénarios suivants ne sont pas recommandés en cas de crainte concernant les attaques de refus de service ou d'utilisation d'un environnement non fiable.  
  
-   Traitement DTD  
  
-   Traitement de schéma - Il comprend l’ajout d’un schéma non fiable à la collection de schémas, la compilation d’un schéma non fiable et la validation à l’aide d’un schéma non fiable.  
  
-   Traitement XSLT  
  
-   Analyse de n'importe quel flux arbitraire de données XML binaires fournies par l'utilisateur  
  
-   Opérations DOM telles que l’interrogation, la modification, le déplacement de sous-arborescences entre des documents et l’enregistrement d’objets DOM  
  
 Si vous êtes inquiet de déni de service ou si vous êtes confronté à des sources non approuvées, n’activez pas le traitement DTD. Il est désactivé par défaut sur <xref:System.Xml.XmlReader> objets qui la <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> crée de la méthode.  
  
> [!NOTE]
>  L'objet <xref:System.Xml.XmlTextReader> permet le traitement DTD par défaut. La propriété <xref:System.Xml.XmlTextReader.DtdProcessing%2A?displayProperty=nameWithType> permet de désactiver cette fonction.  
  
 Si vous avez activé le traitement DTD, vous pouvez utiliser la <xref:System.Xml.XmlSecureResolver> classe pour limiter les ressources qui le <xref:System.Xml.XmlReader> peut accéder. Vous pouvez également concevoir votre application afin que le traitement XML de la mémoire est limité et de temps. Par exemple, vous pouvez configurer des limites de délai d’attente dans votre application ASP.NET.  
  
 **Considérations de traitement**  
  
 Les documents XML pouvant faire référence à d'autres fichiers, il est difficile de déterminer la puissance de traitement nécessaire pour analyser un document XML. Les documents XML peuvent, par exemple, inclure une DTD. Si la DTD comporte des entités imbriquées ou des modèles de contenu complexes, l'analyse du document peut durer longtemps.  
  
 Lorsque vous utilisez <xref:System.Xml.XmlReader>, vous pouvez restreindre la taille du document qu'il sera possible d'analyser en définissant la propriété <xref:System.Xml.XmlReaderSettings.MaxCharactersInDocument%2A?displayProperty=nameWithType>. Définissez la propriété <xref:System.Xml.XmlReaderSettings.MaxCharactersFromEntities%2A?displayProperty=nameWithType> pour limiter le nombre maximal de caractères résultant des extensions d'entités. Consultez les rubriques de référence appropriées pour obtenir des exemples de définition de ces propriétés.  
  
 Les technologies XSD et XSLT disposent de fonctionnalités supplémentaires qui peuvent affecter les performances de traitement. Par exemple, il est possible de construire un schéma XML nécessitant un traitement relativement long lorsqu'il est évalué en fonction d'un document relativement petit. Il est également possible d'intégrer des blocs de script dans une feuille de style XSLT. Les deux cas représentent une menace de sécurité potentielles pour votre application.  
  
 Lorsque la création d’une application qui utilise le <xref:System.Xml.Xsl.XslCompiledTransform> classe, vous devez être conscient des éléments suivants et leurs implications :  
  
-   Le script XSLT est désactivé par défaut. Le script XSLT ne doit être activé que si la prise en charge des scripts est nécessaire et si vous travaillez dans un environnement totalement fiable.  
  
-   La fonction `document()` XSLT est désactivée par défaut. Si vous activez la fonction `document()`, limitez les ressources accessibles en transmettant un objet <xref:System.Xml.XmlSecureResolver> à la méthode <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A?displayProperty=nameWithType>.  
  
-   Les objets d’extension sont activés par défaut. Si un objet <xref:System.Xml.Xsl.XsltArgumentList> contenant des objets d'extension est transmis à la méthode <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A?displayProperty=nameWithType>, les objets d'extension sont utilisés.  
  
-   Les feuilles de style XSLT peuvent inclure des références à d'autres fichiers et à des blocs de script intégrés. Un utilisateur malveillant peut exploiter cette fonction en fournissant des données ou feuilles de style qui, une fois exécutées, peuvent entraîner l'exécution du traitement jusqu'à l'épuisement des ressources de l'ordinateur.  
  
-   Les applications XSLT qui s’exécutent dans un environnement fiable mixte peuvent entraîner l’usurpation de feuille de style. Un utilisateur malveillant peut, par exemple, charger un objet avec une feuille de style nuisible et le transmettre à un autre utilisateur qui appelle ensuite la méthode <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A?displayProperty=nameWithType> et exécute la transformation.  
  
 Vous pouvez réduire ces problèmes de sécurité en désactivant le script ou la fonction `document()` sauf si la feuille de style provient d'une source fiable et en refusant les objets <xref:System.Xml.Xsl.XslCompiledTransform>, les feuilles de style XSLT ou les données de base XML provenant d'une source non fiable.  
  
 **Gestion des exceptions**  
  
 Les exceptions levées par les composants de niveau inférieur peuvent divulguer des informations de chemin d’accès que vous ne souhaitez pas exposées à l’application. Vos applications doivent intercepter les exceptions et les traiter correctement.  
  
 ]]></format>
    </remarks>
    <altmember cref="N:System.Xml.Xsl" />
    <altmember cref="N:System.Xml.Schema" />
    <altmember cref="N:System.Xml.Linq" />
    <related type="Article" href="https://msdn.microsoft.com/library/e695047f-3c0f-4045-8708-5baea91cc380">Documents et données XML</related>
  </Docs>
</Namespace>