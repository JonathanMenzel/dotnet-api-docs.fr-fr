<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ParameterInfo.xml" source-language="en-US" target-language="fr-FR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac586ca3b754399c792282cbf762bf32b6bca401225.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">86ca3b754399c792282cbf762bf32b6bca401225</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Reflection.ParameterInfo">
          <source>Discovers the attributes of a parameter and provides access to parameter metadata.</source>
          <target state="translated">Identifie les attributs d'un paramètre et donne accès aux métadonnées du paramètre.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.ParameterInfo">
          <source>Use an instance of <ph id="ph1">`ParameterInfo`</ph> to obtain information about the parameter's data type, default value, and so on.</source>
          <target state="translated">Utiliser une instance de <ph id="ph1">`ParameterInfo`</ph> pour obtenir plus d’informations sur le type de données du paramètre, valeur par défaut et ainsi de suite.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.ParameterInfo">
          <source><ph id="ph1">&lt;xref:System.Reflection.MethodBase.GetParameters%2A&gt;</ph> returns an array of <ph id="ph2">`ParameterInfo`</ph> objects representing the parameters of a method, in order.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.MethodBase.GetParameters%2A&gt;</ph> Retourne un tableau de <ph id="ph2">`ParameterInfo`</ph> objets représentant les paramètres d’une méthode, dans l’ordre.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.ParameterInfo">
          <source>This example shows how to use various reflection classes to analyze the metadata contained in an assembly.</source>
          <target state="translated">Cet exemple montre comment utiliser différentes classes de réflexion pour analyser les métadonnées contenues dans un assembly.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.ParameterInfo">
          <source>This type is thread safe.</source>
          <target state="translated">Ce type est thread-safe.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see langword="ParameterInfo" /&gt;</ph> class.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see langword="ParameterInfo" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="P:System.Reflection.ParameterInfo.Attributes">
          <source>Gets the attributes for this parameter.</source>
          <target state="translated">Obtient les attributs de ce paramètre.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.Attributes">
          <source>A <ph id="ph1">&lt;see langword="ParameterAttributes" /&gt;</ph> object representing the attributes for this parameter.</source>
          <target state="translated">Objet <ph id="ph1">&lt;see langword="ParameterAttributes" /&gt;</ph> représentant les attributs de ce paramètre.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.Attributes">
          <source>This method utilizes the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.AttrsImpl&gt;</ph> method.</source>
          <target state="translated">Cette méthode utilise le <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.AttrsImpl&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.Attributes">
          <source>To get the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> array, first get the method or the constructor and then call <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Pour obtenir le <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> de tableau, obtenez d’abord la méthode ou le constructeur, puis appelez <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.Attributes">
          <source>The following example defines a method with three parameters.</source>
          <target state="translated">L’exemple suivant définit une méthode avec trois paramètres.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.Attributes">
          <source>It uses the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.Attributes%2A&gt;</ph> property to get the attributes of the second parameter and display them at the console.</source>
          <target state="translated">Elle utilise le <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.Attributes%2A&gt;</ph> propriété à obtenir les attributs du deuxième paramètre et les afficher sur la console.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="F:System.Reflection.ParameterInfo.AttrsImpl">
          <source>The attributes of the parameter.</source>
          <target state="translated">Attributs du paramètres.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Reflection.ParameterInfo.AttrsImpl">
          <source>This field is intended only for users who are deriving classes from <ph id="ph1">`ParameterInfo`</ph>.</source>
          <target state="translated">Ce champ est destiné uniquement aux utilisateurs qui dérivent les classes de <ph id="ph1">`ParameterInfo`</ph>.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Reflection.ParameterInfo.AttrsImpl">
          <source>Typical access to parameter attributes is through <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.Attributes%2A&gt;</ph>.</source>
          <target state="translated">L’accès aux attributs de paramètre s’effectue via <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.Attributes%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="F:System.Reflection.ParameterInfo.ClassImpl">
          <source>The <ph id="ph1">&lt;see langword="Type" /&gt;</ph> of the parameter.</source>
          <target state="translated">Le <ph id="ph1">&lt;see langword="Type" /&gt;</ph> du paramètre.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Reflection.ParameterInfo.ClassImpl">
          <source>This field is intended only for users who are deriving classes from <ph id="ph1">`ParameterInfo`</ph>.</source>
          <target state="translated">Ce champ est destiné uniquement aux utilisateurs qui dérivent les classes de <ph id="ph1">`ParameterInfo`</ph>.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Reflection.ParameterInfo.ClassImpl">
          <source>Typical access to parameter types is through <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.ParameterType%2A&gt;</ph>.</source>
          <target state="translated">L’accès aux types de paramètres se fait via <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.ParameterType%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="P:System.Reflection.ParameterInfo.CustomAttributes">
          <source>Gets a collection that contains this parameter's custom attributes.</source>
          <target state="translated">Obtient une collection qui contient les attributs personnalisés de ce paramètre.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.CustomAttributes">
          <source>A collection that contains this parameter's custom attributes.</source>
          <target state="translated">Collection qui contient les attributs personnalisés de ce paramètre.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="P:System.Reflection.ParameterInfo.DefaultValue">
          <source>Gets a value indicating the default value if the parameter has a default value.</source>
          <target state="translated">Obtient une valeur qui indique la valeur par défaut si le paramètre a une valeur par défaut.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.DefaultValue">
          <source>The default value of the parameter, or <ph id="ph1">&lt;see cref="F:System.DBNull.Value" /&gt;</ph> if the parameter has no default value.</source>
          <target state="translated">La valeur par défaut du paramètre, ou <ph id="ph1">&lt;see cref="F:System.DBNull.Value" /&gt;</ph> si le paramètre n’a pas de valeur par défaut.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.DefaultValue">
          <source>This property is used only in the execution context.</source>
          <target state="translated">Cette propriété est utilisée uniquement dans le contexte d’exécution.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.DefaultValue">
          <source>In the reflection-only context, use the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.RawDefaultValue%2A&gt;</ph> property instead.</source>
          <target state="translated">Dans le contexte de réflexion uniquement, utilisez le <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.RawDefaultValue%2A&gt;</ph> propriété à la place.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.DefaultValue">
          <source>The default value is used when an actual value is not specified in the method call.</source>
          <target state="translated">La valeur par défaut est utilisée lorsqu’une valeur réelle n’est pas spécifiée dans l’appel de méthode.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.DefaultValue">
          <source>A parameter can have a default value that is <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Un paramètre peut avoir la valeur par défaut est <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.DefaultValue">
          <source>This is distinct from the case where a default value is not defined.</source>
          <target state="translated">Cela est distinct du cas où la valeur par défaut n’est pas définie.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.DefaultValue">
          <source>This method utilizes the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.DefaultValueImpl&gt;</ph> method.</source>
          <target state="translated">Cette méthode utilise le <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.DefaultValueImpl&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.DefaultValue">
          <source>To get the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> array, first get the method or the constructor and then call <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Pour obtenir le <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> de tableau, obtenez d’abord la méthode ou le constructeur, puis appelez <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="F:System.Reflection.ParameterInfo.DefaultValueImpl">
          <source>The default value of the parameter.</source>
          <target state="translated">La valeur par défaut du paramètre.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Reflection.ParameterInfo.DefaultValueImpl">
          <source>This field is intended only for users who are deriving classes from <ph id="ph1">`ParameterInfo`</ph>.</source>
          <target state="translated">Ce champ est destiné uniquement aux utilisateurs qui dérivent les classes de <ph id="ph1">`ParameterInfo`</ph>.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Reflection.ParameterInfo.DefaultValueImpl">
          <source>Typical access to the default value of the parameter is through <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.DefaultValue%2A&gt;</ph>.</source>
          <target state="translated">La valeur par défaut du paramètre de l’accès s’effectue via <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.DefaultValue%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="T:System.Reflection.ParameterInfo">
          <source>Gets the custom attributes applied to this parameter.</source>
          <target state="translated">Obtient les attributs personnalisés appliqués à ce paramètre.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Boolean)">
          <source>This argument is ignored for objects of this type.</source>
          <target state="translated">Cet argument est ignoré pour les objets de ce type.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Boolean)">
          <source>Gets all the custom attributes defined on this parameter.</source>
          <target state="translated">Obtient tous les attributs personnalisés définis sur ce paramètre.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Boolean)">
          <source>An array that contains all the custom attributes applied to this parameter.</source>
          <target state="translated">Tableau qui contient tous les attributs personnalisés appliqués à ce paramètre.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Boolean)">
          <source>This method ignores the <ph id="ph1">`inherit`</ph> parameter.</source>
          <target state="translated">Cette méthode ignore la <ph id="ph1">`inherit`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Boolean)">
          <source>To search the inheritance chain for attributes on parameters, use the appropriate overloads of the <ph id="ph1">&lt;xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Pour rechercher la chaîne d’héritage pour les attributs sur les paramètres, utilisez les surcharges appropriées de la <ph id="ph1">&lt;xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Boolean)">
          <source>The following example shows how custom attributes that have been applied to the parameters of methods can be retrieved at run time.</source>
          <target state="translated">L’exemple suivant montre comment les attributs personnalisés qui ont été appliqués pour les paramètres de méthodes peuvent être récupérés au moment de l’exécution.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Boolean)">
          <source>The example defines a custom attribute named <ph id="ph1">`MyAttribute`</ph> that can be applied to parameters.</source>
          <target state="translated">L’exemple définit un attribut personnalisé nommé <ph id="ph1">`MyAttribute`</ph> qui peut être appliqué aux paramètres.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Boolean)">
          <source>The example then defines a class named <ph id="ph1">`MyClass`</ph> with a method named <ph id="ph2">`MyMethod`</ph>, and applies <ph id="ph3">`MyAttribute`</ph> to a parameter of the method.</source>
          <target state="translated">L’exemple définit ensuite une classe nommée <ph id="ph1">`MyClass`</ph> avec une méthode nommée <ph id="ph2">`MyMethod`</ph>et s’applique <ph id="ph3">`MyAttribute`</ph> à un paramètre de la méthode.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Boolean)">
          <source>When the example is run, it uses the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.GetCustomAttributes%28System.Boolean%29&gt;</ph> method to retrieve the custom attributes that have been applied to all parameters of all methods in <ph id="ph2">`MyClass`</ph>, and displays them at the console.</source>
          <target state="translated">Lorsque l’exemple est exécuté, il utilise le <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.GetCustomAttributes%28System.Boolean%29&gt;</ph> pour récupérer les attributs personnalisés qui ont été appliqués à tous les paramètres de toutes les méthodes de <ph id="ph2">`MyClass`</ph>et les affiche sur la console.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Boolean)">
          <source>A custom attribute type could not be loaded.</source>
          <target state="translated">Un type d'attribut personnalisé ne peut pas être chargé.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>The custom attributes identified by type.</source>
          <target state="translated">Attributs personnalisés identifiés par type.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>This argument is ignored for objects of this type.</source>
          <target state="translated">Cet argument est ignoré pour les objets de ce type.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>Gets the custom attributes of the specified type or its derived types that are applied to this parameter.</source>
          <target state="translated">Obtient les attributs personnalisés du type spécifié ou de ses types dérivés qui sont appliqués à ce paramètre.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>An array that contains the custom attributes of the specified type or its derived types.</source>
          <target state="translated">Tableau qui contient les attributs personnalisés du type spécifié ou de ses types dérivés.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>This method ignores the <ph id="ph1">`inherit`</ph> parameter.</source>
          <target state="translated">Cette méthode ignore la <ph id="ph1">`inherit`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>To search the inheritance chain for attributes on parameters, use the appropriate overloads of the <ph id="ph1">&lt;xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Pour rechercher la chaîne d’héritage pour les attributs sur les paramètres, utilisez les surcharges appropriées de la <ph id="ph1">&lt;xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>The type must be a type provided by the underlying runtime system.</source>
          <target state="translated">Le type doit être un type fourni par le système runtime sous-jacent.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="attributeType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="attributeType" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>A custom attribute type could not be loaded.</source>
          <target state="translated">Un type d'attribut personnalisé ne peut pas être chargé.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetCustomAttributesData">
          <source>Returns a list of <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeData" /&gt;</ph> objects for the current parameter, which can be used in the reflection-only context.</source>
          <target state="translated">Retourne une liste d'objets <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeData" /&gt;</ph> pour le paramètre actuel, qui peuvent être utilisés dans le contexte de réflexion uniquement.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetCustomAttributesData">
          <source>A generic list of <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeData" /&gt;</ph> objects representing data about the attributes that have been applied to the current parameter.</source>
          <target state="translated">Liste générique d'objets <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeData" /&gt;</ph> représentant des données relatives aux attributs qui ont été appliqués au paramètre actuel.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetCustomAttributesData">
          <source>Use this method to examine the custom attributes of code in the reflection-only context, in cases where the custom attributes themselves are defined in code that is loaded into the reflection-only context.</source>
          <target state="translated">Utilisez cette méthode pour examiner les attributs personnalisés du code dans le contexte de réflexion uniquement, dans les cas où les attributs personnalisés eux-mêmes sont définis dans le code qui est chargé dans le contexte de réflexion uniquement.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetCustomAttributesData">
          <source>Methods such as <ph id="ph1">&lt;xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Reflection.ParameterInfo.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph> cannot be used in such cases, because they create instances of the attributes.</source>
          <target state="translated">Les méthodes telles que <ph id="ph1">&lt;xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph> et <ph id="ph2">&lt;xref:System.Reflection.ParameterInfo.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph> ne peut pas être utilisé dans ce cas, parce qu’elles créent des instances des attributs.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetCustomAttributesData">
          <source>Code in the reflection-only context cannot be executed.</source>
          <target state="translated">Impossible d’exécuter le code dans le contexte de réflexion uniquement.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetCustomAttributesData">
          <source>For more information and example code, see the <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData&gt;</ph> class.</source>
          <target state="translated">Pour plus d’informations et des exemples de code, consultez la <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetOptionalCustomModifiers">
          <source>Gets the optional custom modifiers of the parameter.</source>
          <target state="translated">Obtient les modificateurs personnalisés facultatifs du paramètre.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetOptionalCustomModifiers">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> objects that identify the optional custom modifiers of the current parameter, such as <ph id="ph2">&lt;see cref="T:System.Runtime.CompilerServices.IsConst" /&gt;</ph> or <ph id="ph3">&lt;see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" /&gt;</ph>.</source>
          <target state="translated">Tableau d’objets <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> identifiant les modificateurs personnalisés facultatifs du paramètre actuel, tels que <ph id="ph2">&lt;see cref="T:System.Runtime.CompilerServices.IsConst" /&gt;</ph> ou <ph id="ph3">&lt;see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetOptionalCustomModifiers">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.GetOptionalCustomModifiers%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Reflection.ParameterInfo.GetRequiredCustomModifiers%2A&gt;</ph> methods are provided for designers of managed compilers.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.GetOptionalCustomModifiers%2A&gt;</ph> et <ph id="ph2">&lt;xref:System.Reflection.ParameterInfo.GetRequiredCustomModifiers%2A&gt;</ph> méthodes sont fournies pour les concepteurs de compilateurs managés.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetOptionalCustomModifiers">
          <source>For more information on custom modifiers, see <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.IsBoxed&gt;</ph> and related classes in the <ph id="ph2">&lt;xref:System.Runtime.CompilerServices&gt;</ph> namespace, and the metadata specification in the ECMA Partition II documentation.</source>
          <target state="translated">Pour plus d’informations sur les modificateurs personnalisés, consultez <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.IsBoxed&gt;</ph> et les classes associées dans le <ph id="ph2">&lt;xref:System.Runtime.CompilerServices&gt;</ph> espace de noms et la spécification de métadonnées dans la documentation ECMA Partition II.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetOptionalCustomModifiers">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">La documentation est disponible en ligne. Consultez <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> sur MSDN et <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> sur le site web d’Ecma International.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetRealObject(System.Runtime.Serialization.StreamingContext)">
          <source>The serialized stream from which the current object is deserialized.</source>
          <target state="translated">Flux sérialisé à partir duquel l'objet actif est désérialisé.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetRealObject(System.Runtime.Serialization.StreamingContext)">
          <source>Returns the real object that should be deserialized instead of the object that the serialized stream specifies.</source>
          <target state="translated">Retourne l'objet réel qui doit être désérialisé à la place de l'objet spécifié par le flux sérialisé.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetRealObject(System.Runtime.Serialization.StreamingContext)">
          <source>The actual object that is put into the graph.</source>
          <target state="translated">Objet réel placé dans le graphique.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetRealObject(System.Runtime.Serialization.StreamingContext)">
          <source>This method implements the <ph id="ph1">&lt;xref:System.Runtime.Serialization.IObjectReference.GetRealObject%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Cette méthode implémente la méthode <ph id="ph1">&lt;xref:System.Runtime.Serialization.IObjectReference.GetRealObject%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetRealObject(System.Runtime.Serialization.StreamingContext)">
          <source>The parameter's position in the parameter list of its associated member is not valid for that member's type.</source>
          <target state="translated">La position du paramètre dans la liste des paramètres de son membre associé n'est pas valide pour le type de ce membre.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetRealObject(System.Runtime.Serialization.StreamingContext)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">requiert une confiance totale pour l’appelant immédiat.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetRealObject(System.Runtime.Serialization.StreamingContext)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Ce membre ne peut pas être utilisé par le code de confiance partielle ou transparent.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetRequiredCustomModifiers">
          <source>Gets the required custom modifiers of the parameter.</source>
          <target state="translated">Obtient les modificateurs personnalisés requis du paramètre.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetRequiredCustomModifiers">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> objects that identify the required custom modifiers of the current parameter, such as <ph id="ph2">&lt;see cref="T:System.Runtime.CompilerServices.IsConst" /&gt;</ph> or <ph id="ph3">&lt;see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" /&gt;</ph>.</source>
          <target state="translated">Tableau d’objets <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> identifiant les modificateurs personnalisés requis du paramètre actuel, tels que <ph id="ph2">&lt;see cref="T:System.Runtime.CompilerServices.IsConst" /&gt;</ph> ou <ph id="ph3">&lt;see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetRequiredCustomModifiers">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.GetOptionalCustomModifiers%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Reflection.ParameterInfo.GetRequiredCustomModifiers%2A&gt;</ph> methods are provided for designers of managed compilers.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.GetOptionalCustomModifiers%2A&gt;</ph> et <ph id="ph2">&lt;xref:System.Reflection.ParameterInfo.GetRequiredCustomModifiers%2A&gt;</ph> méthodes sont fournies pour les concepteurs de compilateurs managés.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetRequiredCustomModifiers">
          <source>For more information on custom modifiers, see <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.IsBoxed&gt;</ph> and related classes in the <ph id="ph2">&lt;xref:System.Runtime.CompilerServices&gt;</ph> namespace, and the metadata specification in the ECMA Partition II documentation.</source>
          <target state="translated">Pour plus d’informations sur les modificateurs personnalisés, consultez <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.IsBoxed&gt;</ph> et les classes associées dans le <ph id="ph2">&lt;xref:System.Runtime.CompilerServices&gt;</ph> espace de noms et la spécification de métadonnées dans la documentation ECMA Partition II.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetRequiredCustomModifiers">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">La documentation est disponible en ligne. Consultez <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> sur MSDN et <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> sur le site web d’Ecma International.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="P:System.Reflection.ParameterInfo.HasDefaultValue">
          <source>Gets a value that indicates whether this parameter has a default value.</source>
          <target state="translated">Obtient une valeur qui indique si ce paramètre a une valeur par défaut.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.HasDefaultValue">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this parameter has a default value; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si ce paramètre a une valeur par défaut ; sinon <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.IsDefined(System.Type,System.Boolean)">
          <source>The <ph id="ph1">&lt;see langword="Type" /&gt;</ph> object to search for.</source>
          <target state="translated">L'objet <ph id="ph1">&lt;see langword="Type" /&gt;</ph> à rechercher.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.IsDefined(System.Type,System.Boolean)">
          <source>This argument is ignored for objects of this type.</source>
          <target state="translated">Cet argument est ignoré pour les objets de ce type.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.IsDefined(System.Type,System.Boolean)">
          <source>Determines whether the custom attribute of the specified type or its derived types is applied to this parameter.</source>
          <target state="translated">Détermine si l'attribut personnalisé du type spécifié ou de ses types dérivés est appliqué à ce paramètre.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.IsDefined(System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if one or more instances of <ph id="ph2">&lt;paramref name="attributeType" /&gt;</ph> or its derived types are applied to this parameter; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si une ou plusieurs instances de <ph id="ph2">&lt;paramref name="attributeType" /&gt;</ph> ou de ses types dérivés sont appliquées à ce paramètre ; sinon, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.IsDefined(System.Type,System.Boolean)">
          <source>This method ignores the <ph id="ph1">`inherit`</ph> parameter.</source>
          <target state="translated">Cette méthode ignore la <ph id="ph1">`inherit`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.IsDefined(System.Type,System.Boolean)">
          <source>To search the inheritance chain for attributes on parameters, use the appropriate overloads of the <ph id="ph1">&lt;xref:System.Attribute.IsDefined%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Pour rechercher la chaîne d’héritage pour les attributs sur les paramètres, utilisez les surcharges appropriées de la <ph id="ph1">&lt;xref:System.Attribute.IsDefined%2A?displayProperty=nameWithType&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.IsDefined(System.Type,System.Boolean)">
          <source>The following example defines two custom attributes, <ph id="ph1">`MyAttribute`</ph> and <ph id="ph2">`MyDerivedAttribute`</ph>.</source>
          <target state="translated">L’exemple suivant définit deux attributs personnalisés, <ph id="ph1">`MyAttribute`</ph> et <ph id="ph2">`MyDerivedAttribute`</ph>.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.IsDefined(System.Type,System.Boolean)">
          <source><ph id="ph1">`MyDerivedAttribute`</ph> is derived from <ph id="ph2">`MyAttribute`</ph>.</source>
          <target state="translated"><ph id="ph1">`MyDerivedAttribute`</ph> est dérivé de <ph id="ph2">`MyAttribute`</ph>.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.IsDefined(System.Type,System.Boolean)">
          <source>The example then applies these attributes to the parameters of a method of an example class.</source>
          <target state="translated">L’exemple applique ensuite ces attributs aux paramètres d’une méthode d’une classe d’exemple.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.IsDefined(System.Type,System.Boolean)">
          <source>When the example is run, it uses the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.IsDefined%2A&gt;</ph> method to test all parameters of all methods in the example class.</source>
          <target state="translated">Lorsque l’exemple est exécuté, il utilise le <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.IsDefined%2A&gt;</ph> méthode pour tester tous les paramètres de toutes les méthodes dans l’exemple de classe.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.IsDefined(System.Type,System.Boolean)">
          <source>It then displays the parameters that have <ph id="ph1">`MyAttribute`</ph> or <ph id="ph2">`MyDerivedAttribute`</ph>.</source>
          <target state="translated">Il affiche ensuite les paramètres qui ont <ph id="ph1">`MyAttribute`</ph> ou <ph id="ph2">`MyDerivedAttribute`</ph>.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.IsDefined(System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="attributeType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="attributeType" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.IsDefined(System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="attributeType" /&gt;</ph> is not a <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph> object supplied by the common language runtime.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="attributeType" /&gt;</ph> n'est pas un objet <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph> fourni par le Common Language Runtime.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="P:System.Reflection.ParameterInfo.IsIn">
          <source>Gets a value indicating whether this is an input parameter.</source>
          <target state="translated">Obtient une valeur indiquant s'il s'agit d'un paramètre d'entrée.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsIn">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the parameter is an input parameter; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si le paramètre est un paramètre d'entrée ; sinon, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsIn">
          <source>This method depends on an optional metadata flag.</source>
          <target state="translated">Cette méthode dépend d’un indicateur de métadonnées facultatif.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsIn">
          <source>This flag can be inserted by compilers, but the compilers are not obligated to do so.</source>
          <target state="translated">Cet indicateur peut être inséré par les compilateurs, mais les compilateurs ne sont pas obligés de le faire.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsIn">
          <source>This method utilizes the <ph id="ph1">`In`</ph> flag of the <ph id="ph2">`ParameterAttributes`</ph> enumerator.</source>
          <target state="translated">Cette méthode utilise le <ph id="ph1">`In`</ph> indicateur de la <ph id="ph2">`ParameterAttributes`</ph> énumérateur.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsIn">
          <source>To get the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> array, first get the method or the constructor and then call <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Pour obtenir le <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> de tableau, obtenez d’abord la méthode ou le constructeur, puis appelez <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsIn">
          <source>The following example shows how to test method parameters for the <ph id="ph1">&lt;xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType&gt;</ph>, and <ph id="ph3">&lt;xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType&gt;</ph> attributes.</source>
          <target state="translated">L’exemple suivant montre comment tester les paramètres de méthode pour le <ph id="ph1">&lt;xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType&gt;</ph>, et <ph id="ph3">&lt;xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType&gt;</ph> attributs.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsIn">
          <source>The example contains a <ph id="ph1">`DefineMethod`</ph> method that does the following:</source>
          <target state="translated">L’exemple contient un <ph id="ph1">`DefineMethod`</ph> méthode qui effectue les opérations suivantes :</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsIn">
          <source>Creates a dynamic assembly containing a <ph id="ph1">`MyType`</ph> type.</source>
          <target state="translated">Crée un assembly dynamique qui contient un <ph id="ph1">`MyType`</ph> type.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsIn">
          <source>Adds a <ph id="ph1">`MyMethod`</ph> method to <ph id="ph2">`MyType`</ph>.</source>
          <target state="translated">Ajoute un <ph id="ph1">`MyMethod`</ph> méthode <ph id="ph2">`MyType`</ph>.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsIn">
          <source><ph id="ph1">`MyMethod`</ph> has three parameters.</source>
          <target state="translated"><ph id="ph1">`MyMethod`</ph> a trois paramètres.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsIn">
          <source>The first parameter is defined with <ph id="ph1">&lt;xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType&gt;</ph>, the second with <ph id="ph2">&lt;xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType&gt;</ph>, and the third with <ph id="ph3">&lt;xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Le premier paramètre est défini avec <ph id="ph1">&lt;xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType&gt;</ph>, le second avec <ph id="ph2">&lt;xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType&gt;</ph>et le troisième avec <ph id="ph3">&lt;xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsIn">
          <source>Calls <ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=nameWithType&gt;</ph> to complete the type.</source>
          <target state="translated">Appels <ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=nameWithType&gt;</ph> pour terminer le type.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsIn">
          <source>After executing <ph id="ph1">`DefineMethod`</ph>, the example searches the assemblies that are currently loaded until it finds the dynamic assembly.</source>
          <target state="translated">Après l’exécution de <ph id="ph1">`DefineMethod`</ph>, l’exemple recherche les assemblys actuellement chargés jusqu'à ce qu’il trouve l’assembly dynamique.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsIn">
          <source>It loads <ph id="ph1">`MyType`</ph> from the assembly, gets a <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> object for the <ph id="ph3">`MyMethod`</ph> method, and examines the parameters.</source>
          <target state="translated">Il charge <ph id="ph1">`MyType`</ph> à partir de l’assembly, obtient un <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> de l’objet pour le <ph id="ph3">`MyMethod`</ph> (méthode) et examine les paramètres.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsIn">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.IsIn%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.ParameterInfo.IsOut%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Reflection.ParameterInfo.IsOptional%2A&gt;</ph> properties to display information about the parameters.</source>
          <target state="translated">L’exemple utilise le <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.IsIn%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.ParameterInfo.IsOut%2A&gt;</ph>, et <ph id="ph3">&lt;xref:System.Reflection.ParameterInfo.IsOptional%2A&gt;</ph> propriétés pour afficher des informations sur les paramètres.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="P:System.Reflection.ParameterInfo.IsLcid">
          <source>Gets a value indicating whether this parameter is a locale identifier (lcid).</source>
          <target state="translated">Obtient une valeur indiquant si ce paramètre est un identificateur de paramètres régionaux (LCID).</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsLcid">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the parameter is a locale identifier; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si le paramètre est un identificateur de paramètres régionaux ; sinon, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsLcid">
          <source>This method depends on an optional metadata flag.</source>
          <target state="translated">Cette méthode dépend d’un indicateur de métadonnées facultatif.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsLcid">
          <source>This flag can be inserted by compilers, but the compilers are not obligated to do so.</source>
          <target state="translated">Cet indicateur peut être inséré par les compilateurs, mais les compilateurs ne sont pas obligés de le faire.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsLcid">
          <source>This method utilizes the <ph id="ph1">`Lcid`</ph> flag of the <ph id="ph2">`ParameterAttributes`</ph> enumerator.</source>
          <target state="translated">Cette méthode utilise le <ph id="ph1">`Lcid`</ph> indicateur de la <ph id="ph2">`ParameterAttributes`</ph> énumérateur.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsLcid">
          <source>To get the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> array, first get the method or the constructor and then call <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Pour obtenir le <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> de tableau, obtenez d’abord la méthode ou le constructeur, puis appelez <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="P:System.Reflection.ParameterInfo.IsOptional">
          <source>Gets a value indicating whether this parameter is optional.</source>
          <target state="translated">Obtient une valeur indiquant si ce paramètre est facultatif.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOptional">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the parameter is optional; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si le paramètre est facultatif ; sinon, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOptional">
          <source>This method depends on an optional metadata flag.</source>
          <target state="translated">Cette méthode dépend d’un indicateur de métadonnées facultatif.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOptional">
          <source>This flag can be inserted by compilers, but the compilers are not obligated to do so.</source>
          <target state="translated">Cet indicateur peut être inséré par les compilateurs, mais les compilateurs ne sont pas obligés de le faire.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOptional">
          <source>This method utilizes the <ph id="ph1">`Optional`</ph> flag of the <ph id="ph2">`ParameterAttributes`</ph> enumerator.</source>
          <target state="translated">Cette méthode utilise le <ph id="ph1">`Optional`</ph> indicateur de la <ph id="ph2">`ParameterAttributes`</ph> énumérateur.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOptional">
          <source>To get the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> array, first get the method and then call <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Pour obtenir le <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> de tableau, obtenez d’abord la méthode, puis appelez <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOptional">
          <source>The following example shows how to test method parameters for the <ph id="ph1">&lt;xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType&gt;</ph>, and <ph id="ph3">&lt;xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType&gt;</ph> attributes.</source>
          <target state="translated">L’exemple suivant montre comment tester les paramètres de méthode pour le <ph id="ph1">&lt;xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType&gt;</ph>, et <ph id="ph3">&lt;xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType&gt;</ph> attributs.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOptional">
          <source>The example contains a <ph id="ph1">`DefineMethod`</ph> method that does the following:</source>
          <target state="translated">L’exemple contient un <ph id="ph1">`DefineMethod`</ph> méthode qui effectue les opérations suivantes :</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOptional">
          <source>Creates a dynamic assembly containing a <ph id="ph1">`MyType`</ph> type.</source>
          <target state="translated">Crée un assembly dynamique qui contient un <ph id="ph1">`MyType`</ph> type.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOptional">
          <source>Adds a <ph id="ph1">`MyMethod`</ph> method to <ph id="ph2">`MyType`</ph>.</source>
          <target state="translated">Ajoute un <ph id="ph1">`MyMethod`</ph> méthode <ph id="ph2">`MyType`</ph>.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOptional">
          <source><ph id="ph1">`MyMethod`</ph> has three parameters.</source>
          <target state="translated"><ph id="ph1">`MyMethod`</ph> a trois paramètres.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOptional">
          <source>The first parameter is defined with <ph id="ph1">&lt;xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType&gt;</ph>, the second with <ph id="ph2">&lt;xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType&gt;</ph>, and the third with <ph id="ph3">&lt;xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Le premier paramètre est défini avec <ph id="ph1">&lt;xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType&gt;</ph>, le second avec <ph id="ph2">&lt;xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType&gt;</ph>et le troisième avec <ph id="ph3">&lt;xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOptional">
          <source>Calls <ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=nameWithType&gt;</ph> to complete the type.</source>
          <target state="translated">Appels <ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=nameWithType&gt;</ph> pour terminer le type.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOptional">
          <source>After executing <ph id="ph1">`DefineMethod`</ph>, the example searches the assemblies that are currently loaded until it finds the dynamic assembly.</source>
          <target state="translated">Après l’exécution de <ph id="ph1">`DefineMethod`</ph>, l’exemple recherche les assemblys actuellement chargés jusqu'à ce qu’il trouve l’assembly dynamique.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOptional">
          <source>It loads <ph id="ph1">`MyType`</ph> from the assembly, gets a <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> object for the <ph id="ph3">`MyMethod`</ph> method, and examines the parameters.</source>
          <target state="translated">Il charge <ph id="ph1">`MyType`</ph> à partir de l’assembly, obtient un <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> de l’objet pour le <ph id="ph3">`MyMethod`</ph> (méthode) et examine les paramètres.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOptional">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.IsIn%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.ParameterInfo.IsOut%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Reflection.ParameterInfo.IsOptional%2A&gt;</ph> properties to display information about the parameters.</source>
          <target state="translated">L’exemple utilise le <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.IsIn%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.ParameterInfo.IsOut%2A&gt;</ph>, et <ph id="ph3">&lt;xref:System.Reflection.ParameterInfo.IsOptional%2A&gt;</ph> propriétés pour afficher des informations sur les paramètres.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="P:System.Reflection.ParameterInfo.IsOut">
          <source>Gets a value indicating whether this is an output parameter.</source>
          <target state="translated">Obtient une valeur indiquant s'il s'agit d'un paramètre de sortie.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOut">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the parameter is an output parameter; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si le paramètre est un paramètre de sortie ; sinon, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOut">
          <source>This method depends on an optional metadata flag.</source>
          <target state="translated">Cette méthode dépend d’un indicateur de métadonnées facultatif.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOut">
          <source>This flag can be inserted by compilers, but the compilers are not obligated to do so.</source>
          <target state="translated">Cet indicateur peut être inséré par les compilateurs, mais les compilateurs ne sont pas obligés de le faire.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOut">
          <source>This method utilizes the <ph id="ph1">`Out`</ph> flag of the <ph id="ph2">`ParameterAttributes`</ph> enumerator.</source>
          <target state="translated">Cette méthode utilise le <ph id="ph1">`Out`</ph> indicateur de la <ph id="ph2">`ParameterAttributes`</ph> énumérateur.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOut">
          <source>To get the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> array, first get the method or the constructor and then call <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Pour obtenir le <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> de tableau, obtenez d’abord la méthode ou le constructeur, puis appelez <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOut">
          <source>The following example shows how to test method parameters for the <ph id="ph1">&lt;xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType&gt;</ph>, and <ph id="ph3">&lt;xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType&gt;</ph> attributes.</source>
          <target state="translated">L’exemple suivant montre comment tester les paramètres de méthode pour le <ph id="ph1">&lt;xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType&gt;</ph>, et <ph id="ph3">&lt;xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType&gt;</ph> attributs.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOut">
          <source>The example contains a <ph id="ph1">`DefineMethod`</ph> method that does the following:</source>
          <target state="translated">L’exemple contient un <ph id="ph1">`DefineMethod`</ph> méthode qui effectue les opérations suivantes :</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOut">
          <source>Creates a dynamic assembly containing a <ph id="ph1">`MyType`</ph> type.</source>
          <target state="translated">Crée un assembly dynamique qui contient un <ph id="ph1">`MyType`</ph> type.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOut">
          <source>Adds a <ph id="ph1">`MyMethod`</ph> method to <ph id="ph2">`MyType`</ph>.</source>
          <target state="translated">Ajoute un <ph id="ph1">`MyMethod`</ph> méthode <ph id="ph2">`MyType`</ph>.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOut">
          <source><ph id="ph1">`MyMethod`</ph> has three parameters.</source>
          <target state="translated"><ph id="ph1">`MyMethod`</ph> a trois paramètres.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOut">
          <source>The first parameter is defined with <ph id="ph1">&lt;xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType&gt;</ph>, the second with <ph id="ph2">&lt;xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType&gt;</ph>, and the third with <ph id="ph3">&lt;xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Le premier paramètre est défini avec <ph id="ph1">&lt;xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType&gt;</ph>, le second avec <ph id="ph2">&lt;xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType&gt;</ph>et le troisième avec <ph id="ph3">&lt;xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOut">
          <source>Calls <ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=nameWithType&gt;</ph> to complete the type.</source>
          <target state="translated">Appels <ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=nameWithType&gt;</ph> pour terminer le type.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOut">
          <source>After executing <ph id="ph1">`DefineMethod`</ph>, the example searches the assemblies that are currently loaded until it finds the dynamic assembly.</source>
          <target state="translated">Après l’exécution de <ph id="ph1">`DefineMethod`</ph>, l’exemple recherche les assemblys actuellement chargés jusqu'à ce qu’il trouve l’assembly dynamique.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOut">
          <source>It loads <ph id="ph1">`MyType`</ph> from the assembly, gets a <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> object for the <ph id="ph3">`MyMethod`</ph> method, and examines the parameters.</source>
          <target state="translated">Il charge <ph id="ph1">`MyType`</ph> à partir de l’assembly, obtient un <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> de l’objet pour le <ph id="ph3">`MyMethod`</ph> (méthode) et examine les paramètres.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOut">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.IsIn%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.ParameterInfo.IsOut%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Reflection.ParameterInfo.IsOptional%2A&gt;</ph> properties to display information about the parameters.</source>
          <target state="translated">L’exemple utilise le <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.IsIn%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.ParameterInfo.IsOut%2A&gt;</ph>, et <ph id="ph3">&lt;xref:System.Reflection.ParameterInfo.IsOptional%2A&gt;</ph> propriétés pour afficher des informations sur les paramètres.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="P:System.Reflection.ParameterInfo.IsRetval">
          <source>Gets a value indicating whether this is a <ph id="ph1">&lt;see langword="Retval" /&gt;</ph> parameter.</source>
          <target state="translated">Obtient une valeur indiquant s'il s'agit d'un paramètre <ph id="ph1">&lt;see langword="Retval" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsRetval">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the parameter is a <ph id="ph2">&lt;see langword="Retval" /&gt;</ph>; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> s'il s'agit d'un paramètre <ph id="ph2">&lt;see langword="Retval" /&gt;</ph> ; sinon, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsRetval">
          <source>This method depends on an optional metadata flag.</source>
          <target state="translated">Cette méthode dépend d’un indicateur de métadonnées facultatif.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsRetval">
          <source>This flag can be inserted by compilers, but the compilers are not obligated to do so.</source>
          <target state="translated">Cet indicateur peut être inséré par les compilateurs, mais les compilateurs ne sont pas obligés de le faire.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsRetval">
          <source>This method utilizes the <ph id="ph1">`Retval`</ph> flag of the <ph id="ph2">`ParameterAttributes`</ph> enumerator.</source>
          <target state="translated">Cette méthode utilise le <ph id="ph1">`Retval`</ph> indicateur de la <ph id="ph2">`ParameterAttributes`</ph> énumérateur.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsRetval">
          <source>To get the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> array, first get the method or the constructor and then call <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Pour obtenir le <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> de tableau, obtenez d’abord la méthode ou le constructeur, puis appelez <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="P:System.Reflection.ParameterInfo.Member">
          <source>Gets a value indicating the member in which the parameter is implemented.</source>
          <target state="translated">Obtient une valeur indiquant le membre dans lequel est implémenté le paramètre.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.Member">
          <source>The member which implanted the parameter represented by this <ph id="ph1">&lt;see cref="T:System.Reflection.ParameterInfo" /&gt;</ph>.</source>
          <target state="translated">Le membre qui a implanté le paramètre représenté par ce <ph id="ph1">&lt;see cref="T:System.Reflection.ParameterInfo" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="F:System.Reflection.ParameterInfo.MemberImpl">
          <source>The member in which the field is implemented.</source>
          <target state="translated">Membre dans lequel le champ est implémenté.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Reflection.ParameterInfo.MemberImpl">
          <source>This field is intended only for users who are deriving classes from <ph id="ph1">`ParameterInfo`</ph>.</source>
          <target state="translated">Ce champ est destiné uniquement aux utilisateurs qui dérivent les classes de <ph id="ph1">`ParameterInfo`</ph>.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Reflection.ParameterInfo.MemberImpl">
          <source>Typical access to the parameter name is through the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.Member%2A&gt;</ph>.</source>
          <target state="translated">L’accès au nom du paramètre se fait via les <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.Member%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="P:System.Reflection.ParameterInfo.MetadataToken">
          <source>Gets a value that identifies this parameter in metadata.</source>
          <target state="translated">Obtient une valeur qui identifie ce paramètre dans les métadonnées.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.MetadataToken">
          <source>A value which, in combination with the module, uniquely identifies this parameter in metadata.</source>
          <target state="translated">Valeur qui, en association avec le module, identifie de manière unique ce paramètre dans les métadonnées.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.MetadataToken">
          <source>To get the module, use the <ph id="ph1">&lt;xref:System.Reflection.MemberInfo.Module%2A&gt;</ph> property of the member that defines this parameter.</source>
          <target state="translated">Pour obtenir le module, utilisez le <ph id="ph1">&lt;xref:System.Reflection.MemberInfo.Module%2A&gt;</ph> propriété du membre qui définit ce paramètre.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.MetadataToken">
          <source>The tokens obtained using this property can be passed to the unmanaged Reflection API.</source>
          <target state="translated">Les jetons obtenus à l’aide de cette propriété peuvent être passés à l’API de réflexion non managée.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.MetadataToken">
          <source>For more information, please see <bpt id="p1">[</bpt>Unmanaged Reflection API<ept id="p1">](http://msdn.microsoft.com/library/0c5bb9de-0cf6-438d-ba47-134e6c775fb8)</ept>.</source>
          <target state="translated">Pour plus d’informations, consultez <bpt id="p1">[</bpt>API de réflexion non managée<ept id="p1">](http://msdn.microsoft.com/library/0c5bb9de-0cf6-438d-ba47-134e6c775fb8)</ept>.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="P:System.Reflection.ParameterInfo.Name">
          <source>Gets the name of the parameter.</source>
          <target state="translated">Obtient le nom du paramètre.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.Name">
          <source>The simple name of this parameter.</source>
          <target state="translated">Nom simple de ce paramètre.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.Name">
          <source>This property utilizes the protected <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.NameImpl&gt;</ph> field, and depends on an optional metadata flag that might not be available in all compilers.</source>
          <target state="translated">Cette propriété utilise la méthode protégée <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.NameImpl&gt;</ph> champ et dépend d’un indicateur de métadonnées facultatif qui ne peut pas être disponible dans tous les compilateurs.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.Name">
          <source>To get the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> array, first get the method or the constructor and then call the <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Pour obtenir le <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> de tableau, obtenez d’abord la méthode ou le constructeur, puis appelez le <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.Name">
          <source>If this <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> represents a return value (that is, if it was obtained by using the <ph id="ph2">&lt;xref:System.Reflection.MethodInfo.ReturnParameter%2A?displayProperty=nameWithType&gt;</ph> property), this property will be <ph id="ph3">`null`</ph>.</source>
          <target state="translated">Si cette <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> représente une valeur de retour (autrement dit, si elle a été obtenu à l’aide de la <ph id="ph2">&lt;xref:System.Reflection.MethodInfo.ReturnParameter%2A?displayProperty=nameWithType&gt;</ph> propriété), cette propriété sera <ph id="ph3">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.Name">
          <source>The following example shows how to get <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> objects for the parameters of a method, and then use the <ph id="ph2">&lt;xref:System.Reflection.ParameterInfo.Name%2A&gt;</ph> property to obtain the parameter names.</source>
          <target state="translated">L’exemple suivant montre comment obtenir <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> objets pour les paramètres d’une méthode, puis utiliser le <ph id="ph2">&lt;xref:System.Reflection.ParameterInfo.Name%2A&gt;</ph> propriété pour obtenir les noms de paramètres.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="F:System.Reflection.ParameterInfo.NameImpl">
          <source>The name of the parameter.</source>
          <target state="translated">Nom du paramètre.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Reflection.ParameterInfo.NameImpl">
          <source>This field is intended only for users who are deriving classes from <ph id="ph1">`ParameterInfo`</ph>.</source>
          <target state="translated">Ce champ est destiné uniquement aux utilisateurs qui dérivent les classes de <ph id="ph1">`ParameterInfo`</ph>.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Reflection.ParameterInfo.NameImpl">
          <source>Typical access to the parameter name is through the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.Name%2A&gt;</ph>.</source>
          <target state="translated">L’accès au nom du paramètre se fait via les <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.Name%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="P:System.Reflection.ParameterInfo.ParameterType">
          <source>Gets the <ph id="ph1">&lt;see langword="Type" /&gt;</ph> of this parameter.</source>
          <target state="translated">Obtient le <ph id="ph1">&lt;see langword="Type" /&gt;</ph> de ce paramètre.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.ParameterType">
          <source>The <ph id="ph1">&lt;see langword="Type" /&gt;</ph> object that represents the <ph id="ph2">&lt;see langword="Type" /&gt;</ph> of this parameter.</source>
          <target state="translated">Objet <ph id="ph1">&lt;see langword="Type" /&gt;</ph> qui représente le <ph id="ph2">&lt;see langword="Type" /&gt;</ph> de ce paramètre.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.ParameterType">
          <source>This method depends on an optional metadata and might not be available in all compilers.</source>
          <target state="translated">Cette méthode dépend de métadonnées facultatives et ne peut pas être disponible dans tous les compilateurs.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.ParameterType">
          <source>To get the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> array, first get the method or the constructor and then call <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Pour obtenir le <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> de tableau, obtenez d’abord la méthode ou le constructeur, puis appelez <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.ParameterType">
          <source>The following example shows how to get <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> objects for the parameters of a method, and then use the <ph id="ph2">&lt;xref:System.Reflection.ParameterInfo.ParameterType%2A&gt;</ph> property to display the type of each parameter.</source>
          <target state="translated">L’exemple suivant montre comment obtenir <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> objets pour les paramètres d’une méthode, puis utiliser le <ph id="ph2">&lt;xref:System.Reflection.ParameterInfo.ParameterType%2A&gt;</ph> propriété pour afficher le type de chaque paramètre.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="P:System.Reflection.ParameterInfo.Position">
          <source>Gets the zero-based position of the parameter in the formal parameter list.</source>
          <target state="translated">Obtient la position de base zéro du paramètre dans la liste de paramètres formels.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.Position">
          <source>An integer representing the position this parameter occupies in the parameter list.</source>
          <target state="translated">Entier représentant la position du paramètre dans la liste de paramètres.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.Position">
          <source>Only parameters in the method signature (that is, in the formal parameter list) are considered when calculating the position.</source>
          <target state="translated">Seuls les paramètres dans la signature de méthode (autrement dit, dans la liste de paramètres formels) sont pris en compte lors du calcul de la position.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.Position">
          <source>For instance methods, the hidden parameter that represents <ph id="ph1">`this`</ph> (<ph id="ph2">`Me`</ph> in Visual Basic) is not counted.</source>
          <target state="translated">Par exemple les méthodes, le paramètre caché qui représente <ph id="ph1">`this`</ph> (<ph id="ph2">`Me`</ph> en Visual Basic) n’est pas compté.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.Position">
          <source>This method utilizes the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.PositionImpl&gt;</ph> method.</source>
          <target state="translated">Cette méthode utilise le <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.PositionImpl&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.Position">
          <source>To get the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> array, first get the method or the constructor and then call <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Pour obtenir le <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> de tableau, obtenez d’abord la méthode ou le constructeur, puis appelez <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="F:System.Reflection.ParameterInfo.PositionImpl">
          <source>The zero-based position of the parameter in the parameter list.</source>
          <target state="translated">Position de base zéro du paramètre dans la liste de paramètres.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Reflection.ParameterInfo.PositionImpl">
          <source>This field is intended only for users who are deriving classes from <ph id="ph1">`ParameterInfo`</ph>.</source>
          <target state="translated">Ce champ est destiné uniquement aux utilisateurs qui dérivent les classes de <ph id="ph1">`ParameterInfo`</ph>.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Reflection.ParameterInfo.PositionImpl">
          <source>Typical access to the name of the parameter is through <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.Position%2A&gt;</ph>.</source>
          <target state="translated">Le nom du paramètre de l’accès s’effectue via <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.Position%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="P:System.Reflection.ParameterInfo.RawDefaultValue">
          <source>Gets a value indicating the default value if the parameter has a default value.</source>
          <target state="translated">Obtient une valeur qui indique la valeur par défaut si le paramètre a une valeur par défaut.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.RawDefaultValue">
          <source>The default value of the parameter, or <ph id="ph1">&lt;see cref="F:System.DBNull.Value" /&gt;</ph> if the parameter has no default value.</source>
          <target state="translated">La valeur par défaut du paramètre, ou <ph id="ph1">&lt;see cref="F:System.DBNull.Value" /&gt;</ph> si le paramètre n’a pas de valeur par défaut.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.RawDefaultValue">
          <source>This property can be used in both the execution context and the reflection-only context.</source>
          <target state="translated">Cette propriété peut être utilisée dans le contexte d’exécution et le contexte de réflexion uniquement.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.RawDefaultValue">
          <source>The default value is used when an actual value is not specified in the method call.</source>
          <target state="translated">La valeur par défaut est utilisée lorsqu’une valeur réelle n’est pas spécifiée dans l’appel de méthode.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.RawDefaultValue">
          <source>A parameter can have a default value that is <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Un paramètre peut avoir la valeur par défaut est <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.RawDefaultValue">
          <source>This is distinct from the case where a default value is not defined.</source>
          <target state="translated">Cela est distinct du cas où la valeur par défaut n’est pas définie.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.RawDefaultValue">
          <source>To get the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> array, first get the method or the constructor and then call the <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Pour obtenir le <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> de tableau, obtenez d’abord la méthode ou le constructeur, puis appelez le <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Reserved for future use.</source>
          <target state="translated">Réservé à un usage ultérieur.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Must be IID_NULL.</source>
          <target state="translated">Doit être IID_NULL.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Passed-in array of names to be mapped.</source>
          <target state="translated">Tableau passé des noms à mapper.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Count of the names to be mapped.</source>
          <target state="translated">Compte des noms à mapper.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>The locale context in which to interpret the names.</source>
          <target state="translated">Contexte des paramètres régionaux dans lequel interpréter les noms.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Caller-allocated array which receives the IDs corresponding to the names.</source>
          <target state="translated">Tableau alloué par l'appelant et recevant les ID qui correspondent aux noms.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Maps a set of names to a corresponding set of dispatch identifiers.</source>
          <target state="translated">Mappe un jeu de noms avec un jeu correspondant d'identificateurs de dispatch.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::GetIDsOfNames`</ph>, see the MSDN Library.</source>
          <target state="translated">Pour plus d’informations sur <ph id="ph1">`IDispatch::GetIDsOfNames`</ph>, consultez MSDN Library.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">L’accès à liaison tardive à l’aide de l’interface <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> COM n’est pas pris en charge.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The type information to return.</source>
          <target state="translated">Informations de type à retourner.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The locale identifier for the type information.</source>
          <target state="translated">Identificateur des paramètres régionaux pour les informations de type.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Receives a pointer to the requested type information object.</source>
          <target state="translated">Reçoit un pointeur vers l'objet d'informations de type demandé.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Retrieves the type information for an object, which can then be used to get the type information for an interface.</source>
          <target state="translated">Récupère les informations de type pour un objet, qui peuvent être utilisées ensuite pour obtenir les informations de type d'une interface.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfo`</ph>, see the MSDN Library.</source>
          <target state="translated">Pour plus d’informations sur <ph id="ph1">`IDispatch::GetTypeInfo`</ph>, consultez MSDN Library.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">L’accès à liaison tardive à l’aide de l’interface <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> COM n’est pas pris en charge.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetTypeInfoCount(System.UInt32@)">
          <source>Points to a location that receives the number of type information interfaces provided by the object.</source>
          <target state="translated">Pointe vers un emplacement qui reçoit le nombre d'interfaces d'informations de type fourni par l'objet.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetTypeInfoCount(System.UInt32@)">
          <source>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</source>
          <target state="translated">Récupère le nombre d'interfaces d'informations de type fourni par un objet (0 ou 1).</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetTypeInfoCount(System.UInt32@)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetTypeInfoCount(System.UInt32@)">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfoCount`</ph>, see the MSDN Library.</source>
          <target state="translated">Pour plus d’informations sur <ph id="ph1">`IDispatch::GetTypeInfoCount`</ph>, consultez MSDN Library.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetTypeInfoCount(System.UInt32@)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">L’accès à liaison tardive à l’aide de l’interface <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> COM n’est pas pris en charge.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Identifies the member.</source>
          <target state="translated">Identifie le membre.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Reserved for future use.</source>
          <target state="translated">Réservé à un usage ultérieur.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Must be IID_NULL.</source>
          <target state="translated">Doit être IID_NULL.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The locale context in which to interpret arguments.</source>
          <target state="translated">Contexte des paramètres régionaux dans lequel interpréter les arguments.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Flags describing the context of the call.</source>
          <target state="translated">Indicateurs décrivant le contexte de l'appel.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</source>
          <target state="translated">Pointeur vers une structure qui contient un tableau d’arguments, un tableau d’arguments DISPID pour les arguments nommés et le nombre d’éléments de chaque tableau.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to the location where the result is to be stored.</source>
          <target state="translated">Pointeur vers l'emplacement où le résultat doit être stocké.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to a structure that contains exception information.</source>
          <target state="translated">Pointeur vers une structure qui contient les informations sur les exceptions.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The index of the first argument that has an error.</source>
          <target state="translated">Index du premier argument comportant une erreur.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Provides access to properties and methods exposed by an object.</source>
          <target state="translated">Fournit l'accès aux propriétés et aux méthodes exposées par un objet.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::Invoke`</ph>, see the MSDN Library.</source>
          <target state="translated">Pour plus d’informations sur <ph id="ph1">`IDispatch::Invoke`</ph>, consultez MSDN Library.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">L’accès à liaison tardive à l’aide de l’interface <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> COM n’est pas pris en charge.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.ToString">
          <source>Gets the parameter type and name represented as a string.</source>
          <target state="translated">Obtient le type et le nom du paramètre représentés sous la forme d'une chaîne.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.ToString">
          <source>A string containing the type and the name of the parameter.</source>
          <target state="translated">Chaîne contenant le type et le nom du paramètre.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>