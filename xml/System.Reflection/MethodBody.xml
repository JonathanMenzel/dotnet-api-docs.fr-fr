<Type Name="MethodBody" FullName="System.Reflection.MethodBody">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8f25f1ecde57d260de6191725133c84bb91d0d92" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37472955" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class MethodBody" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi beforefieldinit MethodBody extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.MethodBody" />
  <TypeSignature Language="VB.NET" Value="Public Class MethodBody" />
  <TypeSignature Language="C++ CLI" Value="public ref class MethodBody" />
  <TypeSignature Language="F#" Value="type MethodBody = class" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="69b9a-101">Fournit un accès aux métadonnées et MSIL pour le corps d'une méthode.</span>
      <span class="sxs-lookup">
        <span data-stu-id="69b9a-101">Provides access to the metadata and MSIL for the body of a method.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="69b9a-102">Le <xref:System.Reflection.MethodBody> classe donne accès aux informations sur les variables locales et les clauses de gestion des exceptions dans un corps de méthode et le langage intermédiaire Microsoft (MSIL) qui compose le corps de méthode.</span><span class="sxs-lookup"><span data-stu-id="69b9a-102">The <xref:System.Reflection.MethodBody> class provides access to information about the local variables and exception-handling clauses in a method body, and to the Microsoft intermediate language (MSIL) that makes up the method body.</span></span>  
  
 <span data-ttu-id="69b9a-103">Vous pouvez utiliser les méthodes de résolution de jeton de la classe de module, tel que <xref:System.Reflection.Module.ResolveType%2A>, <xref:System.Reflection.Module.ResolveMethod%2A>, et <xref:System.Reflection.Module.ResolveType%2A>, pour résoudre les jetons dans le corps de méthode pour <xref:System.Type> objets, <xref:System.Reflection.MethodInfo> objets, et <xref:System.Reflection.FieldInfo> objets qui fournissent obtenir des informations détaillées sur les types, les méthodes et les champs auxquels accédés le langage MSIL dans le corps de méthode.</span><span class="sxs-lookup"><span data-stu-id="69b9a-103">You can use the token-resolution methods of the module class, such as <xref:System.Reflection.Module.ResolveType%2A>, <xref:System.Reflection.Module.ResolveMethod%2A>, and <xref:System.Reflection.Module.ResolveType%2A>, to resolve the tokens in the method body to <xref:System.Type> objects, <xref:System.Reflection.MethodInfo> objects, and <xref:System.Reflection.FieldInfo> objects that provide detailed information about the types, methods, and fields accessed by the MSIL in the method body.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="69b9a-104">L’analyse du corps de méthode nécessite une compréhension approfondie des métadonnées et des formats d’instructions MSIL.</span><span class="sxs-lookup"><span data-stu-id="69b9a-104">Parsing method bodies requires a thorough understanding of metadata and MSIL instruction formats.</span></span> <span data-ttu-id="69b9a-105">Vous trouverez des informations dans la documentation du Common Language Infrastructure (CLI), en particulier « Partition II : Metadata Definition and Semantics » et « Partition III : CIL Instruction Set ».</span><span class="sxs-lookup"><span data-stu-id="69b9a-105">Information can be found in the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</span></span> <span data-ttu-id="69b9a-106">La documentation est disponible en ligne. Consultez [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) sur MSDN et [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) sur le site web d’Ecma International.</span><span class="sxs-lookup"><span data-stu-id="69b9a-106">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 <span data-ttu-id="69b9a-107">Pour obtenir un <xref:System.Reflection.MethodBody> de l’objet d’une méthode donnée, obtenez d’abord un <xref:System.Reflection.MethodInfo> objet pour la méthode, puis appelez le <xref:System.Reflection.MethodInfo> l’objet <xref:System.Reflection.MethodBase.GetMethodBody%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="69b9a-107">To obtain a <xref:System.Reflection.MethodBody> object for a given method, first obtain a <xref:System.Reflection.MethodInfo> object for the method, then call the <xref:System.Reflection.MethodInfo> object's <xref:System.Reflection.MethodBase.GetMethodBody%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="69b9a-108">L’exemple de code suivant définit une méthode de test nommée `MethodBodyExample` et affiche ses informations de variable locale et les clauses de gestion des exceptions.</span><span class="sxs-lookup"><span data-stu-id="69b9a-108">The following code example defines a test method named `MethodBodyExample` and displays its local variable information and exception-handling clauses.</span></span> <span data-ttu-id="69b9a-109">Le <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> méthode est utilisée pour obtenir un <xref:System.Reflection.MethodBody> objet pour la méthode de test.</span><span class="sxs-lookup"><span data-stu-id="69b9a-109">The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method.</span></span>  
  
 <span data-ttu-id="69b9a-110">L’exemple utilise le <xref:System.Reflection.MethodBody.LocalVariables%2A> propriété pour obtenir une liste de <xref:System.Reflection.LocalVariableInfo> objets, puis affiche leurs types et leur ordre d’index.</span><span class="sxs-lookup"><span data-stu-id="69b9a-110">The example uses the <xref:System.Reflection.MethodBody.LocalVariables%2A> property to obtain a list of <xref:System.Reflection.LocalVariableInfo> objects and then displays their types and index order.</span></span> <span data-ttu-id="69b9a-111">Le <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> propriété est utilisée pour obtenir une liste des clauses de gestion des exceptions.</span><span class="sxs-lookup"><span data-stu-id="69b9a-111">The <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> property is used to obtain a list of exception-handling clauses.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="69b9a-112">Pas tous les langages de programmation peuvent générer <xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType> clauses.</span><span class="sxs-lookup"><span data-stu-id="69b9a-112">Not all computer languages can generate <xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType> clauses.</span></span> <span data-ttu-id="69b9a-113">L’exemple Visual Basic montre une clause de filtre, à l’aide de Visual Basic `When` expression, qui est omise dans les exemples pour d’autres langages.</span><span class="sxs-lookup"><span data-stu-id="69b9a-113">The Visual Basic example shows a filter clause, using a Visual Basic `When` expression, which is omitted from the examples for other languages.</span></span>  
  
 [!code-cpp[MethodBody#1](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#1)]
 [!code-csharp[MethodBody#1](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#1)]
 [!code-vb[MethodBody#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MethodBody ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MethodBody.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; MethodBody();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="69b9a-114">Initialise une nouvelle instance de la classe <see cref="T:System.Reflection.MethodBody" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="69b9a-114">Initializes a new instance of the <see cref="T:System.Reflection.MethodBody" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="69b9a-115">Ce constructeur est appelé par les classes dérivées lors de la construction de <xref:System.Reflection.MethodBody> objets.</span><span class="sxs-lookup"><span data-stu-id="69b9a-115">This constructor is invoked by derived classes during the construction of <xref:System.Reflection.MethodBody> objects.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExceptionHandlingClauses">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IList&lt;System.Reflection.ExceptionHandlingClause&gt; ExceptionHandlingClauses { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class System.Reflection.ExceptionHandlingClause&gt; ExceptionHandlingClauses" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBody.ExceptionHandlingClauses" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ExceptionHandlingClauses As IList(Of ExceptionHandlingClause)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Collections::Generic::IList&lt;System::Reflection::ExceptionHandlingClause ^&gt; ^ ExceptionHandlingClauses { System::Collections::Generic::IList&lt;System::Reflection::ExceptionHandlingClause ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ExceptionHandlingClauses : System.Collections.Generic.IList&lt;System.Reflection.ExceptionHandlingClause&gt;" Usage="System.Reflection.MethodBody.ExceptionHandlingClauses" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Reflection.ExceptionHandlingClause&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="69b9a-116">Obtient une liste qui inclut toutes les clauses de gestion des exceptions dans le corps de la méthode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="69b9a-116">Gets a list that includes all the exception-handling clauses in the method body.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="69b9a-117">Un <see cref="T:System.Collections.Generic.IList`1" /> de <see cref="T:System.Reflection.ExceptionHandlingClause" /> objets représentant les clauses de gestion des exceptions dans le corps de la méthode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="69b9a-117">An <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:System.Reflection.ExceptionHandlingClause" /> objects representing the exception-handling clauses in the body of the method.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="69b9a-118">La liste inclut toutes les clauses à partir de tous les blocs try dans le corps de méthode.</span><span class="sxs-lookup"><span data-stu-id="69b9a-118">The list includes all clauses from all try blocks in the method body.</span></span> <span data-ttu-id="69b9a-119">Chaque <xref:System.Reflection.ExceptionHandlingClause> objet contient des informations qui identifient le bloc try auquel il est associé.</span><span class="sxs-lookup"><span data-stu-id="69b9a-119">Each <xref:System.Reflection.ExceptionHandlingClause> object contains information that identifies the try block with which it is associated.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="69b9a-120">Utilisation de clauses de gestion des exceptions exige une connaissance approfondie des métadonnées et des formats d’instructions MSIL.</span><span class="sxs-lookup"><span data-stu-id="69b9a-120">Working with exception-handling clauses requires a thorough understanding of metadata and MSIL instruction formats.</span></span> <span data-ttu-id="69b9a-121">Vous trouverez des informations dans la documentation du Common Language Infrastructure (CLI), en particulier « Partition II : Metadata Definition and Semantics » et « Partition III : CIL Instruction Set ».</span><span class="sxs-lookup"><span data-stu-id="69b9a-121">Information can be found in the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</span></span> <span data-ttu-id="69b9a-122">La documentation est disponible en ligne. Consultez [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) sur MSDN et [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) sur le site web d’Ecma International.</span><span class="sxs-lookup"><span data-stu-id="69b9a-122">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="69b9a-123">L’exemple de code suivant définit une méthode de test nommée `MethodBodyExample` et affiche des informations sur ses clauses de gestion des exceptions.</span><span class="sxs-lookup"><span data-stu-id="69b9a-123">The following code example defines a test method named `MethodBodyExample` and displays information about its exception-handling clauses.</span></span> <span data-ttu-id="69b9a-124">Le <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> méthode est utilisée pour obtenir un <xref:System.Reflection.MethodBody> objet pour la méthode de test.</span><span class="sxs-lookup"><span data-stu-id="69b9a-124">The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method.</span></span> <span data-ttu-id="69b9a-125">Le <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> propriété est utilisée pour obtenir une liste de <xref:System.Reflection.ExceptionHandlingClause> objets.</span><span class="sxs-lookup"><span data-stu-id="69b9a-125">The <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> property is used to obtain a list of <xref:System.Reflection.ExceptionHandlingClause> objects.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="69b9a-126">Pas tous les langages de programmation peuvent générer <xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType> clauses.</span><span class="sxs-lookup"><span data-stu-id="69b9a-126">Not all computer languages can generate <xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType> clauses.</span></span> <span data-ttu-id="69b9a-127">L’exemple Visual Basic montre une clause de filtre, à l’aide de Visual Basic `When` expression, qui est omise dans les exemples pour d’autres langages.</span><span class="sxs-lookup"><span data-stu-id="69b9a-127">The Visual Basic example shows a filter clause, using a Visual Basic `When` expression, which is omitted from the examples for other languages.</span></span>  
  
 <span data-ttu-id="69b9a-128">Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.Reflection.MethodBody> classe.</span><span class="sxs-lookup"><span data-stu-id="69b9a-128">This code example is part of a larger example provided for the <xref:System.Reflection.MethodBody> class.</span></span>  
  
 [!code-cpp[MethodBody#2](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#2)]
 [!code-csharp[MethodBody#2](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#2)]
 [!code-vb[MethodBody#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#2)]  
[!code-cpp[MethodBody#4](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#4)]
[!code-csharp[MethodBody#4](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#4)]
[!code-vb[MethodBody#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#4)]  
[!code-cpp[MethodBody#5](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#5)]
[!code-csharp[MethodBody#5](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#5)]
[!code-vb[MethodBody#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#5)]  
[!code-cpp[MethodBody#7](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#7)]
[!code-csharp[MethodBody#7](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#7)]
[!code-vb[MethodBody#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.ExceptionHandlingClause" />
        <altmember cref="T:System.Reflection.ExceptionHandlingClauseOptions" />
      </Docs>
    </Member>
    <Member MemberName="GetILAsByteArray">
      <MemberSignature Language="C#" Value="public virtual byte[] GetILAsByteArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int8[] GetILAsByteArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MethodBody.GetILAsByteArray" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetILAsByteArray () As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Byte&gt; ^ GetILAsByteArray();" />
      <MemberSignature Language="F#" Value="abstract member GetILAsByteArray : unit -&gt; byte[]&#xA;override this.GetILAsByteArray : unit -&gt; byte[]" Usage="methodBody.GetILAsByteArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="69b9a-129">Retourne le MSIL pour le corps de méthode, sous forme de tableau d'octets.</span>
          <span class="sxs-lookup">
            <span data-stu-id="69b9a-129">Returns the MSIL for the method body, as an array of bytes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="69b9a-130">Tableau de type <see cref="T:System.Byte" /> qui contient le MSIL pour le corps de méthode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="69b9a-130">An array of type <see cref="T:System.Byte" /> that contains the MSIL for the method body.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="69b9a-131">Vous pouvez utiliser les méthodes de résolution de jeton de la classe de module, tel que <xref:System.Reflection.Module.ResolveType%2A>, <xref:System.Reflection.Module.ResolveMethod%2A>, et <xref:System.Reflection.Module.ResolveMember%2A>, pour résoudre les jetons dans le corps de méthode pour <xref:System.Type> objets, <xref:System.Reflection.MethodInfo> objets, et <xref:System.Reflection.FieldInfo> objets qui fournissent obtenir des informations détaillées sur les types, les méthodes et les champs auxquels accédés le langage MSIL dans le corps de méthode.</span><span class="sxs-lookup"><span data-stu-id="69b9a-131">You can use the token-resolution methods of the module class, such as <xref:System.Reflection.Module.ResolveType%2A>, <xref:System.Reflection.Module.ResolveMethod%2A>, and <xref:System.Reflection.Module.ResolveMember%2A>, to resolve the tokens in the method body to <xref:System.Type> objects, <xref:System.Reflection.MethodInfo> objects, and <xref:System.Reflection.FieldInfo> objects that provide detailed information about the types, methods, and fields accessed by the MSIL in the method body.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="69b9a-132">L’analyse du corps de méthode nécessite une compréhension approfondie des métadonnées et des formats d’instructions MSIL.</span><span class="sxs-lookup"><span data-stu-id="69b9a-132">Parsing method bodies requires a thorough understanding of metadata and MSIL instruction formats.</span></span> <span data-ttu-id="69b9a-133">Vous trouverez des informations dans la documentation du Common Language Infrastructure (CLI), en particulier « Partition II : Metadata Definition and Semantics » et « Partition III : CIL Instruction Set ».</span><span class="sxs-lookup"><span data-stu-id="69b9a-133">Information can be found in the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</span></span> <span data-ttu-id="69b9a-134">La documentation est disponible en ligne. Consultez [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) sur MSDN et [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) sur le site web d’Ecma International.</span><span class="sxs-lookup"><span data-stu-id="69b9a-134">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Reflection.Module.ResolveType(System.Int32,System.Type[],System.Type[])" />
        <altmember cref="M:System.Reflection.Module.ResolveMethod(System.Int32,System.Type[],System.Type[])" />
      </Docs>
    </Member>
    <Member MemberName="InitLocals">
      <MemberSignature Language="C#" Value="public virtual bool InitLocals { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool InitLocals" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBody.InitLocals" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property InitLocals As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool InitLocals { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.InitLocals : bool" Usage="System.Reflection.MethodBody.InitLocals" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="69b9a-135">Obtient une valeur indiquant si les variables locales du corps de méthode sont initialisées aux valeurs par défaut pour leurs types.</span>
          <span class="sxs-lookup">
            <span data-stu-id="69b9a-135">Gets a value indicating whether local variables in the method body are initialized to the default values for their types.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="69b9a-136">
            <see langword="true" /> si le corps de méthode contient du code pour affecter aux variables locales la valeur <see langword="null" /> pour les types référence, ou la valeur initialisée à zéro pour les types valeur ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="69b9a-136">
              <see langword="true" /> if the method body contains code to initialize local variables to <see langword="null" /> for reference types, or to the zero-initialized value for value types; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="69b9a-137">Le <xref:System.Reflection.MethodBody.InitLocals%2A> propriété fait référence à des variables qui ne sont pas explicitement initialisées, c'est-à-dire, les variables déclarées avec la syntaxe comme `int x;` en c# ou `Dim x As Integer` en Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="69b9a-137">The <xref:System.Reflection.MethodBody.InitLocals%2A> property refers to variables that are not explicitly initialized; that is, variables that are declared with syntax such as `int x;` in C# or `Dim x As Integer` in Visual Basic.</span></span>  
  
 <span data-ttu-id="69b9a-138">Variables de référence sont initialisés à `null` par défaut.</span><span class="sxs-lookup"><span data-stu-id="69b9a-138">Reference variables are initialized to `null` by default.</span></span> <span data-ttu-id="69b9a-139">Les variables numériques sont initialisées à zéro.</span><span class="sxs-lookup"><span data-stu-id="69b9a-139">Numeric variables are initialized to zero.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="69b9a-140">L’exemple de code suivant définit une méthode de test nommée `MethodBodyExample` et affiche ses informations de variable locale et les clauses de gestion des exceptions.</span><span class="sxs-lookup"><span data-stu-id="69b9a-140">The following code example defines a test method named `MethodBodyExample` and displays its local variable information and exception-handling clauses.</span></span> <span data-ttu-id="69b9a-141">Le <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> méthode est utilisée pour obtenir un <xref:System.Reflection.MethodBody> objet pour la méthode de test.</span><span class="sxs-lookup"><span data-stu-id="69b9a-141">The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method.</span></span> <span data-ttu-id="69b9a-142">Le <xref:System.Reflection.MethodBody.MaxStackSize%2A> et <xref:System.Reflection.MethodBody.InitLocals%2A> propriétés sont affichées.</span><span class="sxs-lookup"><span data-stu-id="69b9a-142">The <xref:System.Reflection.MethodBody.MaxStackSize%2A> and <xref:System.Reflection.MethodBody.InitLocals%2A> properties are displayed.</span></span>  
  
 <span data-ttu-id="69b9a-143">Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.Reflection.MethodBody> classe.</span><span class="sxs-lookup"><span data-stu-id="69b9a-143">This code example is part of a larger example provided for the <xref:System.Reflection.MethodBody> class.</span></span>  
  
 [!code-cpp[MethodBody#2](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#2)]
 [!code-csharp[MethodBody#2](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#2)]
 [!code-vb[MethodBody#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#2)]  
[!code-cpp[MethodBody#5](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#5)]
[!code-csharp[MethodBody#5](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#5)]
[!code-vb[MethodBody#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalSignatureMetadataToken">
      <MemberSignature Language="C#" Value="public virtual int LocalSignatureMetadataToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LocalSignatureMetadataToken" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBody.LocalSignatureMetadataToken" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property LocalSignatureMetadataToken As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int LocalSignatureMetadataToken { int get(); };" />
      <MemberSignature Language="F#" Value="member this.LocalSignatureMetadataToken : int" Usage="System.Reflection.MethodBody.LocalSignatureMetadataToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="69b9a-144">Obtient un jeton de métadonnées pour la signature qui décrit les variables locales pour la méthode dans les métadonnées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="69b9a-144">Gets a metadata token for the signature that describes the local variables for the method in metadata.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="69b9a-145">Entier qui représente le jeton de métadonnées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="69b9a-145">An integer that represents the metadata token.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="69b9a-146">Utilisez le <xref:System.Reflection.MethodBody.LocalVariables%2A> propriété à obtenir des informations sur les variables locales de la méthode.</span><span class="sxs-lookup"><span data-stu-id="69b9a-146">Use the <xref:System.Reflection.MethodBody.LocalVariables%2A> property to obtain information about the method's local variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="69b9a-147">Vous trouverez plus d’informations sur les signatures de variables locales dans la documentation du Common Language Infrastructure (CLI), en particulier « Partition II : Metadata Definition et Semantics ».</span><span class="sxs-lookup"><span data-stu-id="69b9a-147">Information about local variable signatures can be found in the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics".</span></span> <span data-ttu-id="69b9a-148">La documentation est disponible en ligne. Consultez [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) sur MSDN et [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) sur le site web d’Ecma International.</span><span class="sxs-lookup"><span data-stu-id="69b9a-148">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalVariables">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IList&lt;System.Reflection.LocalVariableInfo&gt; LocalVariables { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class System.Reflection.LocalVariableInfo&gt; LocalVariables" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBody.LocalVariables" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property LocalVariables As IList(Of LocalVariableInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Collections::Generic::IList&lt;System::Reflection::LocalVariableInfo ^&gt; ^ LocalVariables { System::Collections::Generic::IList&lt;System::Reflection::LocalVariableInfo ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LocalVariables : System.Collections.Generic.IList&lt;System.Reflection.LocalVariableInfo&gt;" Usage="System.Reflection.MethodBody.LocalVariables" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Reflection.LocalVariableInfo&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="69b9a-149">Obtient la liste des variables locales déclarées dans le corps de méthode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="69b9a-149">Gets the list of local variables declared in the method body.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="69b9a-150">
            <see cref="T:System.Collections.Generic.IList`1" /> d'objets <see cref="T:System.Reflection.LocalVariableInfo" /> qui décrivent les variables locales déclarées dans le corps de méthode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="69b9a-150">An <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:System.Reflection.LocalVariableInfo" /> objects that describe the local variables declared in the method body.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="69b9a-151">Vous n’avez pas besoin du jeton de métadonnées pour la signature de variable locale fournie par le <xref:System.Reflection.MethodBody.LocalSignatureMetadataToken%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="69b9a-151">You do not need the metadata token for the local variable signature provided by the <xref:System.Reflection.MethodBody.LocalSignatureMetadataToken%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="69b9a-152">L’exemple de code suivant définit une méthode de test nommée `MethodBodyExample` et affiche ses informations de variable locale.</span><span class="sxs-lookup"><span data-stu-id="69b9a-152">The following code example defines a test method named `MethodBodyExample` and displays its local variable information.</span></span> <span data-ttu-id="69b9a-153">Le <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> méthode est utilisée pour obtenir un <xref:System.Reflection.MethodBody> objet pour la méthode de test.</span><span class="sxs-lookup"><span data-stu-id="69b9a-153">The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method.</span></span> <span data-ttu-id="69b9a-154">Le <xref:System.Reflection.MethodBody.LocalVariables%2A> propriété est utilisée pour obtenir une liste de <xref:System.Reflection.LocalVariableInfo> objets.</span><span class="sxs-lookup"><span data-stu-id="69b9a-154">The <xref:System.Reflection.MethodBody.LocalVariables%2A> property is used to obtain a list of <xref:System.Reflection.LocalVariableInfo> objects.</span></span>  
  
 <span data-ttu-id="69b9a-155">Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.Reflection.MethodBody> classe.</span><span class="sxs-lookup"><span data-stu-id="69b9a-155">This code example is part of a larger example provided for the <xref:System.Reflection.MethodBody> class.</span></span>  
  
 [!code-cpp[MethodBody#2](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#2)]
 [!code-csharp[MethodBody#2](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#2)]
 [!code-vb[MethodBody#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#2)]  
[!code-cpp[MethodBody#3](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#3)]
[!code-csharp[MethodBody#3](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#3)]
[!code-vb[MethodBody#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#3)]  
[!code-cpp[MethodBody#5](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#5)]
[!code-csharp[MethodBody#5](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#5)]
[!code-vb[MethodBody#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#5)]  
[!code-cpp[MethodBody#6](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#6)]
[!code-csharp[MethodBody#6](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#6)]
[!code-vb[MethodBody#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.LocalVariableInfo" />
      </Docs>
    </Member>
    <Member MemberName="MaxStackSize">
      <MemberSignature Language="C#" Value="public virtual int MaxStackSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxStackSize" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBody.MaxStackSize" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property MaxStackSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int MaxStackSize { int get(); };" />
      <MemberSignature Language="F#" Value="member this.MaxStackSize : int" Usage="System.Reflection.MethodBody.MaxStackSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="69b9a-156">Obtient le nombre maximal d'éléments sur le tas d'opérandes lorsque la méthode s'exécute.</span>
          <span class="sxs-lookup">
            <span data-stu-id="69b9a-156">Gets the maximum number of items on the operand stack when the method is executing.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="69b9a-157">Nombre maximal d'éléments sur le tas d'opérandes lorsque la méthode s'exécute.</span>
          <span class="sxs-lookup">
            <span data-stu-id="69b9a-157">The maximum number of items on the operand stack when the method is executing.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="69b9a-158">Pour plus d’informations, consultez la documentation du Common Language Infrastructure (CLI), en particulier « Partition II : Metadata Definition and Semantics » et « Partition III : CIL Instruction Set ».</span><span class="sxs-lookup"><span data-stu-id="69b9a-158">For more information, see the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</span></span> <span data-ttu-id="69b9a-159">La documentation est disponible en ligne. Consultez [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) sur MSDN et [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) sur le site web d’Ecma International.</span><span class="sxs-lookup"><span data-stu-id="69b9a-159">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="69b9a-160">L’exemple de code suivant définit une méthode de test nommée `MethodBodyExample` et affiche ses informations de variable locale et les clauses de gestion des exceptions.</span><span class="sxs-lookup"><span data-stu-id="69b9a-160">The following code example defines a test method named `MethodBodyExample` and displays its local variable information and exception-handling clauses.</span></span> <span data-ttu-id="69b9a-161">Le <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> méthode est utilisée pour obtenir un <xref:System.Reflection.MethodBody> objet pour la méthode de test.</span><span class="sxs-lookup"><span data-stu-id="69b9a-161">The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method.</span></span> <span data-ttu-id="69b9a-162">Le <xref:System.Reflection.MethodBody.MaxStackSize%2A> et <xref:System.Reflection.MethodBody.InitLocals%2A> propriétés sont affichées.</span><span class="sxs-lookup"><span data-stu-id="69b9a-162">The <xref:System.Reflection.MethodBody.MaxStackSize%2A> and <xref:System.Reflection.MethodBody.InitLocals%2A> properties are displayed.</span></span>  
  
 <span data-ttu-id="69b9a-163">Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.Reflection.MethodBody> classe.</span><span class="sxs-lookup"><span data-stu-id="69b9a-163">This code example is part of a larger example provided for the <xref:System.Reflection.MethodBody> class.</span></span>  
  
 [!code-cpp[MethodBody#2](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#2)]
 [!code-csharp[MethodBody#2](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#2)]
 [!code-vb[MethodBody#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#2)]  
[!code-cpp[MethodBody#5](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#5)]
[!code-csharp[MethodBody#5](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#5)]
[!code-vb[MethodBody#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>