<Type Name="ExceptionHandlingClauseOptions" FullName="System.Reflection.ExceptionHandlingClauseOptions">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="392d3cbc4a7aaa362797299233bcbad4451106f3" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public enum ExceptionHandlingClauseOptions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ExceptionHandlingClauseOptions extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.ExceptionHandlingClauseOptions" />
  <TypeSignature Language="VB.NET" Value="Public Enum ExceptionHandlingClauseOptions" />
  <TypeSignature Language="C++ CLI" Value="public enum class ExceptionHandlingClauseOptions" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Flags</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="35069-101">Identifie des types de clauses de gestion des exceptions.</span>
      <span class="sxs-lookup">
        <span data-stu-id="35069-101">Identifies kinds of exception-handling clauses.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="35069-102">Pour examiner les clauses de gestion des exceptions dans une méthode, vous devez obtenir un <xref:System.Reflection.MethodInfo> objet et appelez le <xref:System.Reflection.MethodBase.GetMethodBody%2A> méthode pour obtenir le corps de méthode.</span><span class="sxs-lookup"><span data-stu-id="35069-102">To examine the exception-handling clauses in a method, obtain a <xref:System.Reflection.MethodInfo> object and call the <xref:System.Reflection.MethodBase.GetMethodBody%2A> method to obtain the method body.</span></span> <span data-ttu-id="35069-103">Utilisez le <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> propriété pour obtenir une liste de <xref:System.Reflection.ExceptionHandlingClause> objets.</span><span class="sxs-lookup"><span data-stu-id="35069-103">Use the <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> property to obtain a list of <xref:System.Reflection.ExceptionHandlingClause> objects.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="35069-104">L’utilisation des clauses de gestion des exceptions requiert une connaissance approfondie des métadonnées et des formats d’instructions Microsoft intermediate language (MSIL).</span><span class="sxs-lookup"><span data-stu-id="35069-104">Working with exception-handling clauses requires a thorough understanding of metadata and Microsoft intermediate language (MSIL) instruction formats.</span></span> <span data-ttu-id="35069-105">Vous trouverez des informations dans la documentation du Common Language Infrastructure (CLI), en particulier « Partition II : Metadata Definition et Semantics » et « Partition III : CIL Instruction Set ».</span><span class="sxs-lookup"><span data-stu-id="35069-105">Information can be found in the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</span></span> <span data-ttu-id="35069-106">La documentation est disponible en ligne. Consultez [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) sur MSDN et [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) sur le site web d’Ecma International.</span><span class="sxs-lookup"><span data-stu-id="35069-106">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="35069-107">L’exemple de code suivant définit une méthode de test nommée `MethodBodyExample`et affiche ses informations de variable locale et les clauses de gestion des exceptions.</span><span class="sxs-lookup"><span data-stu-id="35069-107">The following code example defines a test method named `MethodBodyExample`, and displays its local variable information and exception-handling clauses.</span></span> <span data-ttu-id="35069-108">Le <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> méthode est utilisée pour obtenir un <xref:System.Reflection.MethodBody> objet pour la méthode de test.</span><span class="sxs-lookup"><span data-stu-id="35069-108">The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method.</span></span> <span data-ttu-id="35069-109">Le <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> propriété est utilisée pour obtenir une liste des <xref:System.Reflection.ExceptionHandlingClause> des objets et afficher leurs propriétés.</span><span class="sxs-lookup"><span data-stu-id="35069-109">The <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> property is used to obtain a list of <xref:System.Reflection.ExceptionHandlingClause> objects and display their properties.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="35069-110">Pas de tous les langages de programmation peuvent générer des clauses de filtre.</span><span class="sxs-lookup"><span data-stu-id="35069-110">Not all computer languages can generate Filter clauses.</span></span> <span data-ttu-id="35069-111">L’exemple Visual Basic montre une clause de filtre, l’aide de Visual Basic `When` expression, qui est omise dans les exemples pour d’autres langues.</span><span class="sxs-lookup"><span data-stu-id="35069-111">The Visual Basic example shows a filter clause, using a Visual Basic `When` expression, which is omitted from the examples for other languages.</span></span>  
  
 <span data-ttu-id="35069-112">Ce code fait partie d’un exemple plus complet fourni pour la <xref:System.Reflection.MethodBody> classe.</span><span class="sxs-lookup"><span data-stu-id="35069-112">This code is part of a larger example provided for the <xref:System.Reflection.MethodBody> class.</span></span>  
  
 [!code-cpp[MethodBody#2](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#2)]
 [!code-csharp[MethodBody#2](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#2)]
 [!code-vb[MethodBody#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#2)]  
[!code-cpp[MethodBody#4](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#4)]
[!code-csharp[MethodBody#4](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#4)]
[!code-vb[MethodBody#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#4)]  
[!code-cpp[MethodBody#5](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#5)]
[!code-csharp[MethodBody#5](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#5)]
[!code-vb[MethodBody#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#5)]  
[!code-cpp[MethodBody#7](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#7)]
[!code-csharp[MethodBody#7](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#7)]
[!code-vb[MethodBody#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#7)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Reflection.MethodBody" />
    <altmember cref="T:System.Reflection.ExceptionHandlingClause" />
  </Docs>
  <Members>
    <Member MemberName="Clause">
      <MemberSignature Language="C#" Value="Clause" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Reflection.ExceptionHandlingClauseOptions Clause = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.ExceptionHandlingClauseOptions.Clause" />
      <MemberSignature Language="VB.NET" Value="Clause" />
      <MemberSignature Language="C++ CLI" Value="Clause" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ExceptionHandlingClauseOptions</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="35069-113">La clause accepte toutes les exceptions qui dérivent d'un type spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35069-113">The clause accepts all exceptions that derive from a specified type.</span>
          </span>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Fault">
      <MemberSignature Language="C#" Value="Fault" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Reflection.ExceptionHandlingClauseOptions Fault = int32(4)" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.ExceptionHandlingClauseOptions.Fault" />
      <MemberSignature Language="VB.NET" Value="Fault" />
      <MemberSignature Language="C++ CLI" Value="Fault" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ExceptionHandlingClauseOptions</ReturnType>
      </ReturnValue>
      <MemberValue>4</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="35069-114">La clause est exécutée si une exception se produit, mais pas à la fin du flux de contrôle normal.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35069-114">The clause is executed if an exception occurs, but not on completion of normal control flow.</span>
          </span>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="Filter" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Reflection.ExceptionHandlingClauseOptions Filter = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.ExceptionHandlingClauseOptions.Filter" />
      <MemberSignature Language="VB.NET" Value="Filter" />
      <MemberSignature Language="C++ CLI" Value="Filter" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ExceptionHandlingClauseOptions</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="35069-115">La clause contient des instructions spécifiées par l'utilisateur qui déterminent si l'exception doit être ignorée (à savoir, si l'exécution normale doit se poursuivre), gérée par le gestionnaire associé ou passée à la clause suivante.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35069-115">The clause contains user-specified instructions that determine whether the exception should be ignored (that is, whether normal execution should resume), be handled by the associated handler, or be passed on to the next clause.</span>
          </span>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Finally">
      <MemberSignature Language="C#" Value="Finally" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Reflection.ExceptionHandlingClauseOptions Finally = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.ExceptionHandlingClauseOptions.Finally" />
      <MemberSignature Language="VB.NET" Value="Finally" />
      <MemberSignature Language="C++ CLI" Value="Finally" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ExceptionHandlingClauseOptions</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="35069-116">La clause est exécutée à chaque sortie du bloc try, que ce soit avec un flux de contrôle normal ou à cause d'une exception non gérée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35069-116">The clause is executed whenever the try block exits, whether through normal control flow or because of an unhandled exception.</span>
          </span>
        </summary>
      </Docs>
    </Member>
  </Members>
</Type>