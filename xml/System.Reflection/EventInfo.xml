<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="EventInfo.xml" source-language="en-US" target-language="fr-FR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5f9bda12daa17b91e3190c3905b39d15462fcb260.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f9bda12daa17b91e3190c3905b39d15462fcb260</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Reflection.EventInfo">
          <source>Discovers the attributes of an event and provides access to event metadata.</source>
          <target state="translated">Identifie les attributs d'un événement et donne accès aux métadonnées de l'événement.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>Use the <ph id="ph1">&lt;xref:System.Reflection.EventInfo&gt;</ph> class to inspect events and to hook up event handlers, as shown in the example code for the <ph id="ph2">&lt;xref:System.Reflection.EventInfo.AddEventHandler%2A&gt;</ph> method.</source>
          <target state="translated">Utilisez le <ph id="ph1">&lt;xref:System.Reflection.EventInfo&gt;</ph> classe pour examiner des événements et pour raccorder des gestionnaires d’événements, comme indiqué dans l’exemple de code pour le <ph id="ph2">&lt;xref:System.Reflection.EventInfo.AddEventHandler%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source><ph id="ph1">&lt;xref:System.Reflection.EventInfo&gt;</ph> is not intended to be used to raise events.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.EventInfo&gt;</ph> n’est pas destinée à être utilisée pour déclencher des événements.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>An object raises events as dictated by its internal state.</source>
          <target state="translated">Un objet déclenche des événements comme stipulé par son état interne.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>Events are used with delegates.</source>
          <target state="translated">Les événements sont utilisés avec des délégués.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>An event listener instantiates an event-handler delegate that is invoked whenever the event is raised by an event source.</source>
          <target state="translated">Un écouteur d’événements instancie un délégué de gestionnaire d’événements est appelé chaque fois que l’événement est déclenché par une source d’événement.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>In order to connect to the event source, the event listener adds this delegate to the invocation list on the source.</source>
          <target state="translated">Pour vous connecter à la source d’événements, l’écouteur d’événements ajoute ce délégué à la liste d’appel sur la source.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>When the event is raised, the invoke method of the event-handler delegate is called.</source>
          <target state="translated">Lorsque l’événement est déclenché, la méthode invoke du délégué de gestionnaire d’événements est appelée.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>Both multicast and single-cast event notifications are supported.</source>
          <target state="translated">Les notifications d’événements de multidiffusion et cast unique sont pris en charge.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>The <ph id="ph1">`Add`</ph> and <ph id="ph2">`Remove`</ph> methods, as well as the event-handler delegate class associated with an event, must be marked in the metadata.</source>
          <target state="translated">Le <ph id="ph1">`Add`</ph> et <ph id="ph2">`Remove`</ph> méthodes, ainsi que la classe de délégué de gestionnaire d’événements associée à un événement, doive être marquée dans les métadonnées.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>Delegates are object-oriented function pointers.</source>
          <target state="translated">Les délégués sont des pointeurs de fonction orienté objet.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>In C or C++, a function pointer is a reference to a method.</source>
          <target state="translated">En C ou C++, un pointeur de fonction est une référence à une méthode.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>In contrast to the C or C++ function pointer, a delegate contains two references: a reference to a method and a reference to an object that supports the method.</source>
          <target state="translated">Contrairement au pointeur de fonction C ou C++, un délégué contient deux références : une référence à une méthode et une référence à un objet qui prend en charge de la méthode.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>Delegates can invoke a method without knowing the class type that declares or inherits the method.</source>
          <target state="translated">Les délégués peuvent appeler une méthode sans connaître le type de classe qui déclare ou hérite de la méthode.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>Delegates need only know the return type and parameter list of the method.</source>
          <target state="translated">Les délégués doivent uniquement connaître la liste de paramètres et type de retour de la méthode.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>The event model works equally well for single-cast and multicast delegates.</source>
          <target state="translated">Le modèle d’événement fonctionne également bien pour les délégués à cast unique et la multidiffusion.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>When the delegate's invoke method is called, only a single object will have a method called on it.</source>
          <target state="translated">Lorsque le délégué de l’appel de méthode est appelée, un seul objet aura une méthode appelée sur cette dernière.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>A multicast modifier can be applied to a delegate declaration, which allows multiple methods to be called when the invoke method of the delegate is called.</source>
          <target state="translated">Un modificateur de multidiffusion peut être appliqué à une déclaration de délégué, ce qui permet plusieurs méthodes à appeler lorsque la méthode invoke du délégué est appelée.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>Calling <ph id="ph1">&lt;xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph> on <ph id="ph2">`EventInfo`</ph> when the <ph id="ph3">`inherit`</ph> parameter of <ph id="ph4">`GetCustomAttributes`</ph> is <ph id="ph5">`true`</ph> does not walk the type hierarchy.</source>
          <target state="translated">Appel de <ph id="ph1">&lt;xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph> sur <ph id="ph2">`EventInfo`</ph> lors de la <ph id="ph3">`inherit`</ph> paramètre de <ph id="ph4">`GetCustomAttributes`</ph> est <ph id="ph5">`true`</ph> ne parcourt pas la hiérarchie des types.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>Use <ph id="ph1">&lt;xref:System.Attribute?displayProperty=nameWithType&gt;</ph> to inherit custom attributes.</source>
          <target state="translated">Utilisez <ph id="ph1">&lt;xref:System.Attribute?displayProperty=nameWithType&gt;</ph> pour hériter des attributs personnalisés.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>The following code gets an <ph id="ph1">&lt;xref:System.Reflection.EventInfo&gt;</ph> object for the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> event of the <ph id="ph3">&lt;xref:System.Windows.Forms.Button&gt;</ph> class.</source>
          <target state="translated">Le code suivant obtient un <ph id="ph1">&lt;xref:System.Reflection.EventInfo&gt;</ph> de l’objet pour le <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> l’événement de la <ph id="ph3">&lt;xref:System.Windows.Forms.Button&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>for full trust for inheritors.</source>
          <target state="translated">pour la confiance totale pour les héritiers de.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>This class cannot be inherited by partially trusted code.</source>
          <target state="translated">Cette classe ne peut pas être héritée par du code partiellement fiable.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>This type is thread safe.</source>
          <target state="translated">Ce type est thread-safe.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>When you inherit from <ph id="ph1">&lt;see langword="EventInfo" /&gt;</ph>, you must override the following members: <ph id="ph2">&lt;see cref="M:System.Reflection.EventInfo.GetAddMethod(System.Boolean)" /&gt;</ph>, <ph id="ph3">&lt;see cref="M:System.Reflection.EventInfo.GetRemoveMethod(System.Boolean)" /&gt;</ph>, and <ph id="ph4">&lt;see cref="M:System.Reflection.EventInfo.GetRaiseMethod(System.Boolean)" /&gt;</ph>.</source>
          <target state="translated">Lorsque vous héritez de <ph id="ph1">&lt;see langword="EventInfo" /&gt;</ph>, vous devez substituer les membres suivants : <ph id="ph2">&lt;see cref="M:System.Reflection.EventInfo.GetAddMethod(System.Boolean)" /&gt;</ph>, <ph id="ph3">&lt;see cref="M:System.Reflection.EventInfo.GetRemoveMethod(System.Boolean)" /&gt;</ph>, et <ph id="ph4">&lt;see cref="M:System.Reflection.EventInfo.GetRaiseMethod(System.Boolean)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see langword="EventInfo" /&gt;</ph> class.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see langword="EventInfo" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.#ctor">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Lorsqu’elle est appelée à liaison tardive via des mécanismes tels que <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.#ctor">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Énumération associée : <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>The event source.</source>
          <target state="translated">Source de l'événement.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>Encapsulates a method or methods to be invoked when the event is raised by the target.</source>
          <target state="translated">Encapsule une ou plusieurs méthodes à appeler lorsque l’événement est déclenché par la cible.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>Adds an event handler to an event source.</source>
          <target state="translated">Ajoute un gestionnaire d’événements à une source d’événements.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>This method attempts to add a delegate to synchronize the event on the target object.</source>
          <target state="translated">Cette méthode tente d’ajouter un délégué pour synchroniser l’événement sur l’objet cible.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>Each time the event is raised by the target parameter, the method or methods encapsulated by the handler will be invoked.</source>
          <target state="translated">Chaque fois que l’événement est déclenché par le paramètre de la cible, la méthode ou les méthodes encapsulées par le gestionnaire seront appelés.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>The following code example shows how to load an assembly, create an instance of a type from the assembly, create an event handler using a dynamic assembly, and hook up the dynamic event handler.</source>
          <target state="translated">L’exemple de code suivant montre comment charger un assembly, créer une instance d’un type à partir de l’assembly, créez un gestionnaire d’événements à l’aide d’un assembly dynamique et raccorder le Gestionnaire d’événements dynamiques.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>All actions are performed using late binding.</source>
          <target state="translated">Toutes les actions sont effectuées à l’aide de la liaison tardive.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>The code example loads System.dll and creates an instance of the <ph id="ph1">&lt;xref:System.Timers.Timer?displayProperty=nameWithType&gt;</ph> class.</source>
          <target state="translated">L’exemple de code charge System.dll et crée une instance de la <ph id="ph1">&lt;xref:System.Timers.Timer?displayProperty=nameWithType&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Type.GetEvent%2A?displayProperty=nameWithType&gt;</ph> method to get the <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event, and the <ph id="ph3">&lt;xref:System.Reflection.EventInfo.EventHandlerType%2A&gt;</ph> property to get the delegate type for the event.</source>
          <target state="translated">L’exemple utilise le <ph id="ph1">&lt;xref:System.Type.GetEvent%2A?displayProperty=nameWithType&gt;</ph> méthode pour obtenir le <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> événement et le <ph id="ph3">&lt;xref:System.Reflection.EventInfo.EventHandlerType%2A&gt;</ph> propriété à obtenir le type délégué pour l’événement.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>The code example gets a <ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph> for the <ph id="ph2">`Invoke`</ph> method of the delegate type, and from the <ph id="ph3">&lt;xref:System.Reflection.MethodInfo&gt;</ph> obtains the signature of the delegate.</source>
          <target state="translated">L’exemple de code obtient un <ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph> pour le <ph id="ph2">`Invoke`</ph> méthode du type délégué et à partir de la <ph id="ph3">&lt;xref:System.Reflection.MethodInfo&gt;</ph> Obtient la signature du délégué.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>The code example then creates a dynamic assembly with one module containing a single type named <ph id="ph1">`Handler`</ph>, and gives the type a <ph id="ph2">`static`</ph> method (<ph id="ph3">`Shared`</ph> method in Visual Basic) named <ph id="ph4">`DynamicHandler`</ph> that will be used to handle the event.</source>
          <target state="translated">L’exemple de code crée ensuite un assembly dynamique avec un module contenant un seul type nommé <ph id="ph1">`Handler`</ph>et lui donne un <ph id="ph2">`static`</ph> (méthode) (<ph id="ph3">`Shared`</ph> méthode dans Visual Basic) nommée <ph id="ph4">`DynamicHandler`</ph> qui sera utilisé pour gérer l’événement.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>After the dynamic type is created, the code example gets a <ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph> for the finished method and uses it to create a delegate instance.</source>
          <target state="translated">Une fois que le type dynamique est créé, l’exemple de code obtient un <ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph> pour la méthode finie et l’utilise pour créer une instance de délégué.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>This instance is passed to the <ph id="ph1">&lt;xref:System.Reflection.EventInfo.AddEventHandler%2A&gt;</ph> method to hook up the event.</source>
          <target state="translated">Cette instance est passée à la <ph id="ph1">&lt;xref:System.Reflection.EventInfo.AddEventHandler%2A&gt;</ph> méthode pour raccorder l’événement.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>The program then pauses to allow the event to be raised.</source>
          <target state="translated">Le programme s’interrompt ensuite pour permettre le déclenchement de l’événement.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>The event does not have a public <ph id="ph1">&lt;see langword="add" /&gt;</ph> accessor.</source>
          <target state="translated">L’événement ne dispose pas d’un accesseur <ph id="ph1">&lt;see langword="add" /&gt;</ph> public.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>The handler that was passed in cannot be used.</source>
          <target state="translated">Impossible d’utiliser le gestionnaire qui a été transmis.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>In the <bpt id="p1">[</bpt>.NET for Windows Store apps<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the <bpt id="p2">[</bpt>Portable Class Library<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch the base class exception, <ph id="ph1">&lt;see cref="T:System.MemberAccessException" /&gt;</ph>, instead.</source>
          <target state="translated">Dans <bpt id="p1">[</bpt>.NET pour les applications du Windows Store<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> ou la <bpt id="p2">[</bpt>Bibliothèque de classes portable<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, interceptez l’exception de la classe de base, <ph id="ph1">&lt;see cref="T:System.MemberAccessException" /&gt;</ph>, à la place.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>The caller does not have access permission to the member.</source>
          <target state="translated">L’appelant n’est pas autorisé à accéder au membre.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>In the <bpt id="p1">[</bpt>.NET for Windows Store apps<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the <bpt id="p2">[</bpt>Portable Class Library<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> instead.</source>
          <target state="translated">Dans <bpt id="p1">[</bpt>.NET pour les applications du Windows Store<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> ou la <bpt id="p2">[</bpt>Bibliothèque de classes portable<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, interceptez <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> à la place.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>The <ph id="ph1">&lt;paramref name="target" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and the event is not static.</source>
          <target state="translated">Le paramètre <ph id="ph1">&lt;paramref name="target" /&gt;</ph> a la valeur <ph id="ph2">&lt;see langword="null" /&gt;</ph> et l’événement n’est pas statique.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> is not declared on the target.</source>
          <target state="translated">Le <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> n’est pas déclaré dans la cible.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Lorsqu’elle est appelée à liaison tardive via des mécanismes tels que <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Énumération associée : <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="P:System.Reflection.EventInfo.AddMethod">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> object for the <ph id="ph2">&lt;see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" /&gt;</ph> method of the event, including non-public methods.</source>
          <target state="translated">Obtient l'objet <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> de la méthode <ph id="ph2">&lt;see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" /&gt;</ph> d'événement, y compris les méthodes non publiques.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.EventInfo.AddMethod">
          <source>The <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> object for the <ph id="ph2">&lt;see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" /&gt;</ph> method.</source>
          <target state="translated">Objet <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> pour la méthode <ph id="ph2">&lt;see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.EventInfo.AddMethod">
          <source>This property is the equivalent of calling the <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetAddMethod%2A&gt;</ph> with a value of <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Cette propriété est l’équivalent de l’appel de la <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetAddMethod%2A&gt;</ph> avec la valeur <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="P:System.Reflection.EventInfo.Attributes">
          <source>Gets the attributes for this event.</source>
          <target state="translated">Obtient les attributs de cet événement.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.EventInfo.Attributes">
          <source>The read-only attributes for this event.</source>
          <target state="translated">Attributs en lecture seule de cet événement.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.EventInfo.Attributes">
          <source>The attributes are returned in a 4-byte integer representing a bitmap of the attributes set for the event reflected by this instance.</source>
          <target state="translated">Les attributs sont retournés dans un entier de 4 octets représentant une bitmap de l’ensemble d’attributs de l’événement réfléchi par cette instance.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.Equals(System.Object)">
          <source>An object to compare with this instance, or <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Objet à comparer à cette instance ou <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.Equals(System.Object)">
          <source>Returns a value that indicates whether this instance is equal to a specified object.</source>
          <target state="translated">Retourne une valeur qui indique si cette instance est égale à un objet spécifié.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> equals the type and value of this instance; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> est égal au type et à la valeur de cette instance ; sinon, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="P:System.Reflection.EventInfo.EventHandlerType">
          <source>Gets the <ph id="ph1">&lt;see langword="Type" /&gt;</ph> object of the underlying event-handler delegate associated with this event.</source>
          <target state="translated">Obtient l'objet <ph id="ph1">&lt;see langword="Type" /&gt;</ph> du délégué du gestionnaire d'événements sous-jacent associé à cet événement.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.EventInfo.EventHandlerType">
          <source>A read-only <ph id="ph1">&lt;see langword="Type" /&gt;</ph> object representing the delegate event handler.</source>
          <target state="translated">Objet <ph id="ph1">&lt;see langword="Type" /&gt;</ph> en lecture seule qui représente le gestionnaire d'événements du délégué.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.EventInfo.EventHandlerType">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Reflection.EventInfo.EventHandlerType%2A&gt;</ph> property to discover the delegate type of an event and to display its parameter types.</source>
          <target state="translated">L’exemple suivant utilise le <ph id="ph1">&lt;xref:System.Reflection.EventInfo.EventHandlerType%2A&gt;</ph> pour découvrir le type délégué d’un événement et afficher ses types de paramètre de propriété.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.EventInfo.EventHandlerType">
          <source>The example defines a delegate named <ph id="ph1">`MyDelegate`</ph> and an event named <ph id="ph2">`ev`</ph> of type <ph id="ph3">`MyDelegate`</ph>.</source>
          <target state="translated">L’exemple définit un délégué nommé <ph id="ph1">`MyDelegate`</ph> et un événement nommé <ph id="ph2">`ev`</ph> de type <ph id="ph3">`MyDelegate`</ph>.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.EventInfo.EventHandlerType">
          <source>The code in the <ph id="ph1">`Main`</ph> method discovers the event signature by getting the delegate type of the event, getting the <ph id="ph2">`Invoke`</ph> method of the delegate type, and then retrieving and displaying the parameters.</source>
          <target state="translated">Le code dans le <ph id="ph1">`Main`</ph> méthode détecte la signature d’événement en obtenant le type délégué de l’événement, mise en route le <ph id="ph2">`Invoke`</ph> le type délégué, la récupération et afficher les paramètres de méthode.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="P:System.Reflection.EventInfo.EventHandlerType">
          <source>The caller does not have the required permission.</source>
          <target state="translated">L'appelant n'a pas l'autorisation requise.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="T:System.Reflection.EventInfo">
          <source>Returns the method used to add an event handler delegate to the event source.</source>
          <target state="translated">Retourne la méthode utilisée pour ajouter un délégué de gestionnaire d’événements à la source de l’événement.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetAddMethod">
          <source>Returns the method used to add an event handler delegate to the event source.</source>
          <target state="translated">Retourne la méthode utilisée pour ajouter un délégué de gestionnaire d’événements à la source de l’événement.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetAddMethod">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> object representing the method used to add an event handler delegate to the event source.</source>
          <target state="translated">Objet <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> représentant la méthode utilisée pour ajouter un délégué de gestionnaire d’événements à la source de l’événement.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetAddMethod">
          <source><ph id="ph1">`GetAddMethod`</ph> initializes and adds the event subscribe method.</source>
          <target state="translated"><ph id="ph1">`GetAddMethod`</ph> Initialise et ajoute l’événement de méthode d’abonnement.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetAddMethod">
          <source>The <ph id="ph1">`AddEventHandler`</ph> method is used to add an event-handler delegate to the invocation list of an event source.</source>
          <target state="translated">Le <ph id="ph1">`AddEventHandler`</ph> méthode est utilisée pour ajouter un délégué de gestionnaire d’événements à la liste d’appel d’une source d’événement.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetAddMethod">
          <source>Typically, the method has the following signature:</source>
          <target state="translated">En règle générale, la méthode a la signature suivante :</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetAddMethod">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Lorsqu’elle est appelée à liaison tardive via des mécanismes tels que <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetAddMethod">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Énumération associée : <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetAddMethod(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if non-public methods can be returned; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si des méthodes non publiques peuvent être retournées ; sinon <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetAddMethod(System.Boolean)">
          <source>When overridden in a derived class, retrieves the <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> object for the <ph id="ph2">&lt;see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" /&gt;</ph> method of the event, specifying whether to return non-public methods.</source>
          <target state="translated">En cas de substitution dans une classe dérivée, récupère l’objet <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> de la méthode <ph id="ph2">&lt;see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" /&gt;</ph> de l’événement, en spécifiant s’il faut retourner des méthodes non publiques.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetAddMethod(System.Boolean)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> object representing the method used to add an event handler delegate to the event source.</source>
          <target state="translated">Objet <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> représentant la méthode utilisée pour ajouter un délégué de gestionnaire d’événements à la source de l’événement.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetAddMethod(System.Boolean)">
          <source>The <ph id="ph1">`GetAddMethod`</ph> initializes and adds the event subscribe method as a Boolean value.</source>
          <target state="translated">Le <ph id="ph1">`GetAddMethod`</ph> initialise et ajoute l’événement s’abonner à la méthode comme une valeur booléenne.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetAddMethod(System.Boolean)">
          <source>The <ph id="ph1">`AddEventHandler`</ph> method is used to add an event-handler delegate to the invocation list of an event source.</source>
          <target state="translated">Le <ph id="ph1">`AddEventHandler`</ph> méthode est utilisée pour ajouter un délégué de gestionnaire d’événements à la liste d’appel d’une source d’événement.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetAddMethod(System.Boolean)">
          <source>Typically, the method has the following signature:</source>
          <target state="translated">En règle générale, la méthode a la signature suivante :</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetAddMethod(System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="nonPublic" /&gt;</ph> is <ph id="ph2">&lt;see langword="true" /&gt;</ph>, the method used to add an event handler delegate is non-public, and the caller does not have permission to reflect on non-public methods.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="nonPublic" /&gt;</ph> est <ph id="ph2">&lt;see langword="true" /&gt;</ph>, la méthode utilisée pour ajouter un délégué de gestionnaire d’événements est non publique et l’appelant n’est pas autorisé à refléter les méthodes non publiques.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetAddMethod(System.Boolean)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Lorsqu’elle est appelée à liaison tardive via des mécanismes tels que <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetAddMethod(System.Boolean)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Énumération associée : <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetHashCode">
          <source>Returns the hash code for this instance.</source>
          <target state="translated">Retourne le code de hachage de cette instance.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetHashCode">
          <source>A 32-bit signed integer hash code.</source>
          <target state="translated">Code de hachage d'un entier signé 32 bits.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="T:System.Reflection.EventInfo">
          <source>Returns the methods that were associated with an event in MSIL using the <ph id="ph1">&lt;see langword=".other" /&gt;</ph> directive.</source>
          <target state="translated">Retourne les méthodes qui ont été associées à un événement dans MSIL à l'aide de la directive <ph id="ph1">&lt;see langword=".other" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetOtherMethods">
          <source>Returns the public methods that have been associated with an event in metadata using the <ph id="ph1">&lt;see langword=".other" /&gt;</ph> directive.</source>
          <target state="translated">Retourne les méthodes publiques qui ont été associées à un événement dans les métadonnées à l'aide de la directive <ph id="ph1">&lt;see langword=".other" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetOtherMethods">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> objects representing the public methods that have been associated with the event in metadata by using the <ph id="ph2">&lt;see langword=".other" /&gt;</ph> directive.</source>
          <target state="translated">Tableau d'objets <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> représentant les méthodes publiques qui ont été associées à l'événement dans les métadonnées à l'aide de la directive <ph id="ph2">&lt;see langword=".other" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetOtherMethods">
          <source>If there are no such public methods, an empty array is returned.</source>
          <target state="translated">En l'absence de telles méthodes publiques, un tableau vide est retourné.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods">
          <source>The metadata for an event can associate four kinds of methods with the event:</source>
          <target state="translated">Les métadonnées d’un événement peuvent associer quatre types de méthodes à l’événement :</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods">
          <source>The <ph id="ph1">`.addon`</ph> directive specifies the method used to add event handlers.</source>
          <target state="translated">Le <ph id="ph1">`.addon`</ph> directive spécifie la méthode utilisée pour ajouter des gestionnaires d’événements.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods">
          <source>Use the <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetAddMethod%2A&gt;</ph> method to retrieve an <ph id="ph2">&lt;xref:System.Reflection.EventInfo&gt;</ph> for that method.</source>
          <target state="translated">Utilisez le <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetAddMethod%2A&gt;</ph> méthode pour récupérer un <ph id="ph2">&lt;xref:System.Reflection.EventInfo&gt;</ph> pour cette méthode.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods">
          <source>The <ph id="ph1">`.removeon`</ph> directive specifies the method used to detach event handlers.</source>
          <target state="translated">Le <ph id="ph1">`.removeon`</ph> directive spécifie la méthode utilisée pour détacher des gestionnaires d’événements.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods">
          <source>Use the <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetRemoveMethod%2A&gt;</ph> method to retrieve an <ph id="ph2">&lt;xref:System.Reflection.EventInfo&gt;</ph> for that method.</source>
          <target state="translated">Utilisez le <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetRemoveMethod%2A&gt;</ph> méthode pour récupérer un <ph id="ph2">&lt;xref:System.Reflection.EventInfo&gt;</ph> pour cette méthode.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods">
          <source>The <ph id="ph1">`.fire`</ph> directive specifies the method used to raise the event.</source>
          <target state="translated">Le <ph id="ph1">`.fire`</ph> directive spécifie la méthode utilisée pour déclencher l’événement.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods">
          <source>Use the <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetRaiseMethod%2A&gt;</ph> method to retrieve an <ph id="ph2">&lt;xref:System.Reflection.EventInfo&gt;</ph> for that method.</source>
          <target state="translated">Utilisez le <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetRaiseMethod%2A&gt;</ph> méthode pour récupérer un <ph id="ph2">&lt;xref:System.Reflection.EventInfo&gt;</ph> pour cette méthode.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods">
          <source>The <ph id="ph1">`.other`</ph> directive specifies any other methods associated with the event.</source>
          <target state="translated">Le <ph id="ph1">`.other`</ph> directive spécifie d’autres méthodes associées à l’événement.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods">
          <source>Use the <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetOtherMethods%2A&gt;</ph> method to retrieve an array of <ph id="ph2">&lt;xref:System.Reflection.EventInfo&gt;</ph> objects for those methods.</source>
          <target state="translated">Utilisez le <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetOtherMethods%2A&gt;</ph> méthode pour récupérer un tableau de <ph id="ph2">&lt;xref:System.Reflection.EventInfo&gt;</ph> objets pour ces méthodes.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods">
          <source>The methods associated with an event using the <ph id="ph1">`.other`</ph> directive have no special significance to the runtime.</source>
          <target state="translated">Les méthodes associées à un événement à l’aide de la <ph id="ph1">`.other`</ph> directive n’ont aucune signification spéciale à l’exécution.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods">
          <source>The C# and Visual Basic compilers do not use the <ph id="ph1">`.other`</ph> directive.</source>
          <target state="translated">Les compilateurs c# et Visual Basic n’utilisent pas la <ph id="ph1">`.other`</ph> directive.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetOtherMethods(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to include non-public methods; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> pour inclure les méthodes non publiques ; sinon, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetOtherMethods(System.Boolean)">
          <source>Returns the methods that have been associated with the event in metadata using the <ph id="ph1">&lt;see langword=".other" /&gt;</ph> directive, specifying whether to include non-public methods.</source>
          <target state="translated">Retourne les méthodes qui ont été associées à l'événement dans des métadonnées à l'aide de la directive <ph id="ph1">&lt;see langword=".other" /&gt;</ph>, en spécifiant s'il faut inclure les méthodes non publiques.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetOtherMethods(System.Boolean)">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> objects representing methods that have been associated with an event in metadata by using the <ph id="ph2">&lt;see langword=".other" /&gt;</ph> directive.</source>
          <target state="translated">Tableau d'objets <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> représentant les méthodes qui ont été associées à un événement dans des métadonnées à l'aide de la directive <ph id="ph2">&lt;see langword=".other" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetOtherMethods(System.Boolean)">
          <source>If there are no methods matching the specification, an empty array is returned.</source>
          <target state="translated">En l'absence de méthode correspondant à la spécification, un tableau vide est retourné.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods(System.Boolean)">
          <source>The metadata for an event can associate four kinds of methods with the event:</source>
          <target state="translated">Les métadonnées d’un événement peuvent associer quatre types de méthodes à l’événement :</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods(System.Boolean)">
          <source>The <ph id="ph1">`.addon`</ph> directive specifies the method used to add event handlers.</source>
          <target state="translated">Le <ph id="ph1">`.addon`</ph> directive spécifie la méthode utilisée pour ajouter des gestionnaires d’événements.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods(System.Boolean)">
          <source>Use the <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetAddMethod%2A&gt;</ph> method to retrieve an <ph id="ph2">&lt;xref:System.Reflection.EventInfo&gt;</ph> for that method.</source>
          <target state="translated">Utilisez le <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetAddMethod%2A&gt;</ph> méthode pour récupérer un <ph id="ph2">&lt;xref:System.Reflection.EventInfo&gt;</ph> pour cette méthode.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods(System.Boolean)">
          <source>The <ph id="ph1">`.removeon`</ph> directive specifies the method used to detach event handlers.</source>
          <target state="translated">Le <ph id="ph1">`.removeon`</ph> directive spécifie la méthode utilisée pour détacher des gestionnaires d’événements.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods(System.Boolean)">
          <source>Use the <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetRemoveMethod%2A&gt;</ph> method to retrieve an <ph id="ph2">&lt;xref:System.Reflection.EventInfo&gt;</ph> for this method.</source>
          <target state="translated">Utilisez le <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetRemoveMethod%2A&gt;</ph> méthode pour récupérer un <ph id="ph2">&lt;xref:System.Reflection.EventInfo&gt;</ph> pour cette méthode.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods(System.Boolean)">
          <source>The <ph id="ph1">`.fire`</ph> directive specifies the method used to raise the event.</source>
          <target state="translated">Le <ph id="ph1">`.fire`</ph> directive spécifie la méthode utilisée pour déclencher l’événement.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods(System.Boolean)">
          <source>Use the <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetRaiseMethod%2A&gt;</ph> method to retrieve an <ph id="ph2">&lt;xref:System.Reflection.EventInfo&gt;</ph> for this method.</source>
          <target state="translated">Utilisez le <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetRaiseMethod%2A&gt;</ph> méthode pour récupérer un <ph id="ph2">&lt;xref:System.Reflection.EventInfo&gt;</ph> pour cette méthode.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods(System.Boolean)">
          <source>The <ph id="ph1">`.other`</ph> directive specifies any other methods associated with the event.</source>
          <target state="translated">Le <ph id="ph1">`.other`</ph> directive spécifie d’autres méthodes associées à l’événement.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods(System.Boolean)">
          <source>Use the <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetOtherMethods%2A&gt;</ph> method to retrieve an array of <ph id="ph2">&lt;xref:System.Reflection.EventInfo&gt;</ph> objects for those methods.</source>
          <target state="translated">Utilisez le <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetOtherMethods%2A&gt;</ph> méthode pour récupérer un tableau de <ph id="ph2">&lt;xref:System.Reflection.EventInfo&gt;</ph> objets pour ces méthodes.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods(System.Boolean)">
          <source>The methods associated with an event using the <ph id="ph1">`.other`</ph> directive have no special significance to the runtime.</source>
          <target state="translated">Les méthodes associées à un événement à l’aide de la <ph id="ph1">`.other`</ph> directive n’ont aucune signification spéciale à l’exécution.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods(System.Boolean)">
          <source>The C# and Visual Basic compilers do not use the <ph id="ph1">`.other`</ph> directive.</source>
          <target state="translated">Les compilateurs c# et Visual Basic n’utilisent pas la <ph id="ph1">`.other`</ph> directive.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetOtherMethods(System.Boolean)">
          <source>This method is not implemented.</source>
          <target state="translated">Cette méthode n’est pas implémentée.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="T:System.Reflection.EventInfo">
          <source>Returns the method that is called when the event is raised.</source>
          <target state="translated">Retourne la méthode appelée lorsque l’événement est déclenché.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetRaiseMethod">
          <source>Returns the method that is called when the event is raised.</source>
          <target state="translated">Retourne la méthode appelée lorsque l’événement est déclenché.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetRaiseMethod">
          <source>The method that is called when the event is raised.</source>
          <target state="translated">La méthode appelée lorsque l’événement est déclenché.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetRaiseMethod">
          <source>This method usually returns <ph id="ph1">`null`</ph> for events declared with the C# <ph id="ph2">`event`</ph> keyword or the Visual Basic <ph id="ph3">`Event`</ph> keyword.</source>
          <target state="translated">Cette méthode retourne généralement <ph id="ph1">`null`</ph> pour les événements déclarés avec le langage c# <ph id="ph2">`event`</ph> (mot clé) ou Visual Basic <ph id="ph3">`Event`</ph> (mot clé).</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetRaiseMethod">
          <source>This is because the C# and Visual Basic compilers do not generate such a method by default.</source>
          <target state="translated">Il s’agit, car les compilateurs c# et Visual Basic ne génèrent pas d’une telle méthode par défaut.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetRaiseMethod">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Lorsqu’elle est appelée à liaison tardive via des mécanismes tels que <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetRaiseMethod">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Énumération associée : <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetRaiseMethod(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if non-public methods can be returned; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si des méthodes non publiques peuvent être retournées ; sinon <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetRaiseMethod(System.Boolean)">
          <source>When overridden in a derived class, returns the method that is called when the event is raised, specifying whether to return non-public methods.</source>
          <target state="translated">En cas de substitution dans une classe dérivée, retourne la méthode appelée lorsque l’événement est déclenché, en spécifiant s’il faut retourner des méthodes non publiques.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetRaiseMethod(System.Boolean)">
          <source>A <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> object that was called when the event was raised.</source>
          <target state="translated">Objet <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> qui a été appelé lorsque l’événement a été déclenché.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetRaiseMethod(System.Boolean)">
          <source>This method usually returns <ph id="ph1">`null`</ph> for events declared with the C# <ph id="ph2">`event`</ph> keyword or the Visual Basic <ph id="ph3">`Event`</ph> keyword.</source>
          <target state="translated">Cette méthode retourne généralement <ph id="ph1">`null`</ph> pour les événements déclarés avec le langage c# <ph id="ph2">`event`</ph> (mot clé) ou Visual Basic <ph id="ph3">`Event`</ph> (mot clé).</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetRaiseMethod(System.Boolean)">
          <source>This is because the C# and Visual Basic compilers do not generate such a method by default.</source>
          <target state="translated">Il s’agit, car les compilateurs c# et Visual Basic ne génèrent pas d’une telle méthode par défaut.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetRaiseMethod(System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="nonPublic" /&gt;</ph> is <ph id="ph2">&lt;see langword="true" /&gt;</ph>, the method used to add an event handler delegate is non-public, and the caller does not have permission to reflect on non-public methods.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="nonPublic" /&gt;</ph> est <ph id="ph2">&lt;see langword="true" /&gt;</ph>, la méthode utilisée pour ajouter un délégué de gestionnaire d’événements est non publique et l’appelant n’est pas autorisé à refléter les méthodes non publiques.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetRaiseMethod(System.Boolean)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Lorsqu’elle est appelée à liaison tardive via des mécanismes tels que <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetRaiseMethod(System.Boolean)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Énumération associée : <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="T:System.Reflection.EventInfo">
          <source>Returns the method used to remove an event handler delegate from the event source.</source>
          <target state="translated">Retourne la méthode utilisée pour supprimer un délégué de gestionnaire d’événements délégué de la source de l’événement.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetRemoveMethod">
          <source>Returns the method used to remove an event handler delegate from the event source.</source>
          <target state="translated">Retourne la méthode utilisée pour supprimer un délégué de gestionnaire d’événements délégué de la source de l’événement.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetRemoveMethod">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> object representing the method used to remove an event handler delegate from the event source.</source>
          <target state="translated">Un objet <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> représentant la méthode utilisée pour supprimer un délégué de gestionnaire d’événements à partir de la source de l’événement.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetRemoveMethod">
          <source>Typically, the method has the following signature:</source>
          <target state="translated">En règle générale, la méthode a la signature suivante :</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetRemoveMethod">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Lorsqu’elle est appelée à liaison tardive via des mécanismes tels que <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetRemoveMethod">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Énumération associée : <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetRemoveMethod(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if non-public methods can be returned; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si des méthodes non publiques peuvent être retournées ; sinon <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetRemoveMethod(System.Boolean)">
          <source>When overridden in a derived class, retrieves the <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> object for removing a method of the event, specifying whether to return non-public methods.</source>
          <target state="translated">En cas de substitution dans une classe dérivée, récupère l’objet <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> pour supprimer une méthode l’événement, en spécifiant s’il faut retourner des méthodes non publiques.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetRemoveMethod(System.Boolean)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> object representing the method used to remove an event handler delegate from the event source.</source>
          <target state="translated">Un objet <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> représentant la méthode utilisée pour supprimer un délégué de gestionnaire d’événements à partir de la source de l’événement.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetRemoveMethod(System.Boolean)">
          <source>Typically, the method has the following signature:</source>
          <target state="translated">En règle générale, la méthode a la signature suivante :</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetRemoveMethod(System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="nonPublic" /&gt;</ph> is <ph id="ph2">&lt;see langword="true" /&gt;</ph>, the method used to add an event handler delegate is non-public, and the caller does not have permission to reflect on non-public methods.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="nonPublic" /&gt;</ph> est <ph id="ph2">&lt;see langword="true" /&gt;</ph>, la méthode utilisée pour ajouter un délégué de gestionnaire d’événements est non publique et l’appelant n’est pas autorisé à refléter les méthodes non publiques.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetRemoveMethod(System.Boolean)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Lorsqu’elle est appelée à liaison tardive via des mécanismes tels que <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetRemoveMethod(System.Boolean)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Énumération associée : <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="P:System.Reflection.EventInfo.IsMulticast">
          <source>Gets a value indicating whether the event is multicast.</source>
          <target state="translated">Récupère une valeur indiquant si l’événement est multicast.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.EventInfo.IsMulticast">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the delegate is an instance of a multicast delegate; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si le délégué est une instance de délégué multicast ; sinon, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="P:System.Reflection.EventInfo.IsMulticast">
          <source>The caller does not have the required permission.</source>
          <target state="translated">L'appelant n'a pas l'autorisation requise.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="P:System.Reflection.EventInfo.IsSpecialName">
          <source>Gets a value indicating whether the <ph id="ph1">&lt;see langword="EventInfo" /&gt;</ph> has a name with a special meaning.</source>
          <target state="translated">Obtient une valeur indiquant si le nom de <ph id="ph1">&lt;see langword="EventInfo" /&gt;</ph> a une signification particulière.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.EventInfo.IsSpecialName">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this event has a special name; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si l'événement a un nom particulier ; sinon, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.EventInfo.IsSpecialName">
          <source>This property determines whether the event's name has a special meaning.</source>
          <target state="translated">Cette propriété détermine si le nom de l’événement a une signification particulière.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.EventInfo.IsSpecialName">
          <source>Names that begin with or contain an underscore character (_), property accessors, and operator overloading methods are examples of names that might require special treatment by some compilers.</source>
          <target state="translated">Les noms commencent par ou un caractère de soulignement (_), les accesseurs de propriété et les méthodes de surcharge d’opérateur sont des exemples de noms qui peuvent nécessiter un traitement spécial par certains compilateurs.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="P:System.Reflection.EventInfo.MemberType">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Reflection.MemberTypes" /&gt;</ph> value indicating that this member is an event.</source>
          <target state="translated">Obtient une valeur <ph id="ph1">&lt;see cref="T:System.Reflection.MemberTypes" /&gt;</ph> indiquant que ce membre est un événement.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.EventInfo.MemberType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MemberTypes" /&gt;</ph> value indicating that this member is an event.</source>
          <target state="translated">Valeur <ph id="ph1">&lt;see cref="T:System.Reflection.MemberTypes" /&gt;</ph> indiquant que ce membre est un événement.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.EventInfo.MemberType">
          <source>This property overrides <ph id="ph1">&lt;xref:System.Reflection.MemberInfo.MemberType%2A&gt;</ph>.</source>
          <target state="translated">Cette propriété substitue <ph id="ph1">&lt;xref:System.Reflection.MemberInfo.MemberType%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.EventInfo.MemberType">
          <source>Therefore, when you examine a set of <ph id="ph1">&lt;xref:System.Reflection.MemberInfo&gt;</ph> objects — for example, the array returned by <ph id="ph2">&lt;xref:System.Type.GetMembers%2A&gt;</ph> — the <ph id="ph3">&lt;xref:System.Reflection.MemberInfo.MemberType%2A&gt;</ph> property returns <ph id="ph4">&lt;xref:System.Reflection.MemberTypes.Event?displayProperty=nameWithType&gt;</ph> only when a given member is an event.</source>
          <target state="translated">Par conséquent, lorsque vous examinez un ensemble de <ph id="ph1">&lt;xref:System.Reflection.MemberInfo&gt;</ph> objets — par exemple, le tableau retourné par <ph id="ph2">&lt;xref:System.Type.GetMembers%2A&gt;</ph> : le <ph id="ph3">&lt;xref:System.Reflection.MemberInfo.MemberType%2A&gt;</ph> propriété renvoie <ph id="ph4">&lt;xref:System.Reflection.MemberTypes.Event?displayProperty=nameWithType&gt;</ph> uniquement lorsqu’un membre donné est un événement.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.op_Equality(System.Reflection.EventInfo,System.Reflection.EventInfo)">
          <source>The first object to compare.</source>
          <target state="translated">Premier objet à comparer.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.op_Equality(System.Reflection.EventInfo,System.Reflection.EventInfo)">
          <source>The second object to compare.</source>
          <target state="translated">Deuxième objet à comparer.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.op_Equality(System.Reflection.EventInfo,System.Reflection.EventInfo)">
          <source>Indicates whether two <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> objects are equal.</source>
          <target state="translated">Indique si deux objets <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> sont égaux.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.op_Equality(System.Reflection.EventInfo,System.Reflection.EventInfo)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="left" /&gt;</ph> is equal to <ph id="ph3">&lt;paramref name="right" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si <ph id="ph2">&lt;paramref name="left" /&gt;</ph> est égal à <ph id="ph3">&lt;paramref name="right" /&gt;</ph> ; sinon <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.op_Inequality(System.Reflection.EventInfo,System.Reflection.EventInfo)">
          <source>The first object to compare.</source>
          <target state="translated">Premier objet à comparer.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.op_Inequality(System.Reflection.EventInfo,System.Reflection.EventInfo)">
          <source>The second object to compare.</source>
          <target state="translated">Deuxième objet à comparer.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.op_Inequality(System.Reflection.EventInfo,System.Reflection.EventInfo)">
          <source>Indicates whether two <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> objects are not equal.</source>
          <target state="translated">Indique si deux objets <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> ne sont pas égaux.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.op_Inequality(System.Reflection.EventInfo,System.Reflection.EventInfo)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="left" /&gt;</ph> is not equal to <ph id="ph3">&lt;paramref name="right" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si <ph id="ph2">&lt;paramref name="left" /&gt;</ph> n'est pas égal à <ph id="ph3">&lt;paramref name="right" /&gt;</ph> ; sinon, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="P:System.Reflection.EventInfo.RaiseMethod">
          <source>Gets the method that is called when the event is raised, including non-public methods.</source>
          <target state="translated">Obtient la méthode appelée lorsque l'événement est déclenché, y compris les méthodes non publiques.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.EventInfo.RaiseMethod">
          <source>The method that is called when the event is raised.</source>
          <target state="translated">La méthode appelée lorsque l’événement est déclenché.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.EventInfo.RaiseMethod">
          <source>This property is the equivalent of calling the <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetRaiseMethod%2A&gt;</ph> with a value of <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Cette propriété est l’équivalent de l’appel de la <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetRaiseMethod%2A&gt;</ph> avec la valeur <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source>The event source.</source>
          <target state="translated">Source de l'événement.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source>The delegate to be disassociated from the events raised by target.</source>
          <target state="translated">Délégué à dissocier des événements déclenchés par la cible.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source>Removes an event handler from an event source.</source>
          <target state="translated">Supprime un gestionnaire d’événements d’une source d’événements.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source>This method attempts to remove the delegate that may synchronize this event on the target object.</source>
          <target state="translated">Cette méthode essaie de supprimer le délégué qui synchronise l’événement sur l’objet cible.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source>When an event is raised by target, the method or methods encapsulated by <ph id="ph1">`handler`</ph> will no longer be invoked.</source>
          <target state="translated">Quand un événement est déclenché par la cible, la méthode ou les méthodes encapsulées par <ph id="ph1">`handler`</ph> sera n’est plus appelé.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source>The event does not have a public <ph id="ph1">&lt;see langword="remove" /&gt;</ph> accessor.</source>
          <target state="translated">L’événement ne dispose pas d’un accesseur <ph id="ph1">&lt;see langword="remove" /&gt;</ph> public.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source>The handler that was passed in cannot be used.</source>
          <target state="translated">Impossible d’utiliser le gestionnaire qui a été transmis.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source>In the <bpt id="p1">[</bpt>.NET for Windows Store apps<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the <bpt id="p2">[</bpt>Portable Class Library<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> instead.</source>
          <target state="translated">Dans <bpt id="p1">[</bpt>.NET pour les applications du Windows Store<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> ou la <bpt id="p2">[</bpt>Bibliothèque de classes portable<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, interceptez <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> à la place.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source>The <ph id="ph1">&lt;paramref name="target" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and the event is not static.</source>
          <target state="translated">Le paramètre <ph id="ph1">&lt;paramref name="target" /&gt;</ph> a la valeur <ph id="ph2">&lt;see langword="null" /&gt;</ph> et l’événement n’est pas statique.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> is not declared on the target.</source>
          <target state="translated">Le <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> n’est pas déclaré dans la cible.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source>In the <bpt id="p1">[</bpt>.NET for Windows Store apps<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the <bpt id="p2">[</bpt>Portable Class Library<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch the base class exception, <ph id="ph1">&lt;see cref="T:System.MemberAccessException" /&gt;</ph>, instead.</source>
          <target state="translated">Dans <bpt id="p1">[</bpt>.NET pour les applications du Windows Store<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> ou la <bpt id="p2">[</bpt>Bibliothèque de classes portable<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, interceptez l’exception de la classe de base, <ph id="ph1">&lt;see cref="T:System.MemberAccessException" /&gt;</ph>, à la place.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source>The caller does not have access permission to the member.</source>
          <target state="translated">L’appelant n’est pas autorisé à accéder au membre.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Lorsqu’elle est appelée à liaison tardive via des mécanismes tels que <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Énumération associée : <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="P:System.Reflection.EventInfo.RemoveMethod">
          <source>Gets the <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> object for removing a method of the event, including non-public methods.</source>
          <target state="translated">Obtient l'objet <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> pour supprimer une méthode de l'événement, y compris les méthodes non publiques.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.EventInfo.RemoveMethod">
          <source>The <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> object for removing a method of the event.</source>
          <target state="translated">Objet <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> utilisé pour supprimer une méthode de l'événement.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.EventInfo.RemoveMethod">
          <source>This property is the equivalent of calling the <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetRemoveMethod%2A&gt;</ph> with a value of <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Cette propriété est l’équivalent de l’appel de la <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetRemoveMethod%2A&gt;</ph> avec la valeur <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Reserved for future use.</source>
          <target state="translated">Réservé à un usage ultérieur.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Must be IID_NULL.</source>
          <target state="translated">Doit être IID_NULL.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Passed-in array of names to be mapped.</source>
          <target state="translated">Tableau passé des noms à mapper.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Count of the names to be mapped.</source>
          <target state="translated">Compte des noms à mapper.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>The locale context in which to interpret the names.</source>
          <target state="translated">Contexte des paramètres régionaux dans lequel interpréter les noms.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Caller-allocated array which receives the IDs corresponding to the names.</source>
          <target state="translated">Tableau alloué par l'appelant et recevant les ID qui correspondent aux noms.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Maps a set of names to a corresponding set of dispatch identifiers.</source>
          <target state="translated">Mappe un jeu de noms avec un jeu correspondant d'identificateurs de dispatch.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::GetIDsOfNames`</ph>, see the MSDN Library.</source>
          <target state="translated">Pour plus d’informations sur <ph id="ph1">`IDispatch::GetIDsOfNames`</ph>, consultez MSDN Library.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">L’accès à liaison tardive à l’aide de l’interface <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> COM n’est pas pris en charge.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetType">
          <source>Returns a <bpt id="p1">&lt;c&gt;</bpt>T:System.Type<ept id="p1">&lt;/c&gt;</ept> object representing the <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> type.</source>
          <target state="translated">Retourne un objet <bpt id="p1">&lt;c&gt;</bpt>T:System.Type<ept id="p1">&lt;/c&gt;</ept> représentant le type <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetType">
          <source>A <bpt id="p1">&lt;c&gt;</bpt>T:System.Type<ept id="p1">&lt;/c&gt;</ept> object representing the <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> type.</source>
          <target state="translated">Objet <bpt id="p1">&lt;c&gt;</bpt>T:System.Type<ept id="p1">&lt;/c&gt;</ept> représentant le type <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The type information to return.</source>
          <target state="translated">Informations de type à retourner.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The locale identifier for the type information.</source>
          <target state="translated">Identificateur des paramètres régionaux pour les informations de type.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Receives a pointer to the requested type information object.</source>
          <target state="translated">Reçoit un pointeur vers l'objet d'informations de type demandé.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Retrieves the type information for an object, which can then be used to get the type information for an interface.</source>
          <target state="translated">Récupère les informations de type pour un objet, qui peuvent être utilisées ensuite pour obtenir les informations de type d'une interface.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfo`</ph>, see the MSDN Library.</source>
          <target state="translated">Pour plus d’informations sur <ph id="ph1">`IDispatch::GetTypeInfo`</ph>, consultez MSDN Library.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">L’accès à liaison tardive à l’aide de l’interface <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> COM n’est pas pris en charge.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetTypeInfoCount(System.UInt32@)">
          <source>Points to a location that receives the number of type information interfaces provided by the object.</source>
          <target state="translated">Pointe vers un emplacement qui reçoit le nombre d'interfaces d'informations de type fourni par l'objet.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetTypeInfoCount(System.UInt32@)">
          <source>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</source>
          <target state="translated">Récupère le nombre d'interfaces d'informations de type fourni par un objet (0 ou 1).</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetTypeInfoCount(System.UInt32@)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetTypeInfoCount(System.UInt32@)">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfoCount`</ph>, see the MSDN Library.</source>
          <target state="translated">Pour plus d’informations sur <ph id="ph1">`IDispatch::GetTypeInfoCount`</ph>, consultez MSDN Library.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetTypeInfoCount(System.UInt32@)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">L’accès à liaison tardive à l’aide de l’interface <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> COM n’est pas pris en charge.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Identifies the member.</source>
          <target state="translated">Identifie le membre.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Reserved for future use.</source>
          <target state="translated">Réservé à un usage ultérieur.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Must be IID_NULL.</source>
          <target state="translated">Doit être IID_NULL.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The locale context in which to interpret arguments.</source>
          <target state="translated">Contexte des paramètres régionaux dans lequel interpréter les arguments.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Flags describing the context of the call.</source>
          <target state="translated">Indicateurs décrivant le contexte de l'appel.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</source>
          <target state="translated">Pointeur vers une structure qui contient un tableau d’arguments, un tableau d’arguments DISPID pour les arguments nommés et le nombre d’éléments de chaque tableau.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to the location where the result is to be stored.</source>
          <target state="translated">Pointeur vers l'emplacement où le résultat doit être stocké.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to a structure that contains exception information.</source>
          <target state="translated">Pointeur vers une structure qui contient les informations sur les exceptions.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The index of the first argument that has an error.</source>
          <target state="translated">Index du premier argument comportant une erreur.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Provides access to properties and methods exposed by an object.</source>
          <target state="translated">Fournit l'accès aux propriétés et aux méthodes exposées par un objet.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::Invoke`</ph>, see the MSDN Library.</source>
          <target state="translated">Pour plus d’informations sur <ph id="ph1">`IDispatch::Invoke`</ph>, consultez MSDN Library.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">L’accès à liaison tardive à l’aide de l’interface <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> COM n’est pas pris en charge.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>