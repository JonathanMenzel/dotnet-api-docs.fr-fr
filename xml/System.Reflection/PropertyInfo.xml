<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="PropertyInfo.xml" source-language="en-US" target-language="fr-FR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5938c9dbaa20ead9dda7c3ac22b41168c0fe93a5c.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">938c9dbaa20ead9dda7c3ac22b41168c0fe93a5c</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Reflection.PropertyInfo">
          <source>Discovers the attributes of a property and provides access to property metadata.</source>
          <target state="translated">Identifie les attributs d'une propriété et permet d'accéder aux métadonnées de propriété.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>Properties are logically the same as fields.</source>
          <target state="translated">Propriétés sont logiquement les mêmes que les champs.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>A property is a named aspect of an object's state whose value is typically accessible through <ph id="ph1">`get`</ph> and <ph id="ph2">`set`</ph> accessors.</source>
          <target state="translated">Une propriété est un aspect nommé de l’état d’un objet dont la valeur est généralement accessible par le biais de <ph id="ph1">`get`</ph> et <ph id="ph2">`set`</ph> accesseurs.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>Properties may be read-only, in which case a set routine is not supported.</source>
          <target state="translated">Propriétés peuvent être en lecture seule, auquel cas une routine de jeu n’est pas pris en charge.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>To determine whether a property is <ph id="ph1">`static`</ph>, you must obtain the <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> for the <ph id="ph3">`get`</ph> or <ph id="ph4">`set`</ph> accessor, by calling the <ph id="ph5">&lt;xref:System.Reflection.PropertyInfo.GetGetMethod%2A&gt;</ph> or the <ph id="ph6">&lt;xref:System.Reflection.PropertyInfo.GetSetMethod%2A&gt;</ph> method, and examine its <ph id="ph7">&lt;xref:System.Reflection.MethodBase.IsStatic%2A&gt;</ph> property.</source>
          <target state="translated">Pour déterminer si une propriété est <ph id="ph1">`static`</ph>, vous devez obtenir le <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> pour le <ph id="ph3">`get`</ph> ou <ph id="ph4">`set`</ph> accesseur, en appelant le <ph id="ph5">&lt;xref:System.Reflection.PropertyInfo.GetGetMethod%2A&gt;</ph> ou <ph id="ph6">&lt;xref:System.Reflection.PropertyInfo.GetSetMethod%2A&gt;</ph> (méthode) et examinez son <ph id="ph7">&lt;xref:System.Reflection.MethodBase.IsStatic%2A&gt;</ph> propriété.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>Several methods in this class assume that the <ph id="ph1">`get`</ph> accessor and <ph id="ph2">`set`</ph> accessor methods of a property have certain formats.</source>
          <target state="translated">Plusieurs méthodes de cette classe supposent que le <ph id="ph1">`get`</ph> accesseur et <ph id="ph2">`set`</ph> méthodes d’accesseur d’une propriété utilisent des formats spécifiques.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>The signatures of the <ph id="ph1">`get`</ph> and <ph id="ph2">`set`</ph> methods must match the following convention:</source>
          <target state="translated">Les signatures de la <ph id="ph1">`get`</ph> et <ph id="ph2">`set`</ph> méthodes doivent correspondre à la convention suivante :</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>The return type of the <ph id="ph1">`get`</ph> method and the last argument of the <ph id="ph2">`set`</ph> method must be identical.</source>
          <target state="translated">Le type de retour de la <ph id="ph1">`get`</ph> (méthode) et le dernier argument de la <ph id="ph2">`set`</ph> méthode doit être identique.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>This is the type of the property.</source>
          <target state="translated">Il s’agit du type de la propriété.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>The <ph id="ph1">`get`</ph> and <ph id="ph2">`set`</ph> methods must have the same number, type, and order of indices.</source>
          <target state="translated">Le <ph id="ph1">`get`</ph> et <ph id="ph2">`set`</ph> les méthodes doivent avoir le même nombre, type et ordre d’index.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>If this format is not followed, the behavior of the <ph id="ph1">`GetValue`</ph> and <ph id="ph2">`SetValue`</ph> methods is undefined.</source>
          <target state="translated">Si ce format n’est pas suivi, le comportement de la <ph id="ph1">`GetValue`</ph> et <ph id="ph2">`SetValue`</ph> méthodes n’est pas défini.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>Calling <ph id="ph1">&lt;xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph> on <ph id="ph2">`PropertyInfo`</ph> when the <ph id="ph3">`inherit`</ph> parameter of <ph id="ph4">`GetCustomAttributes`</ph> is <ph id="ph5">`true`</ph> does not walk the type hierarchy.</source>
          <target state="translated">Appel de <ph id="ph1">&lt;xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph> sur <ph id="ph2">`PropertyInfo`</ph> lors de la <ph id="ph3">`inherit`</ph> paramètre de <ph id="ph4">`GetCustomAttributes`</ph> est <ph id="ph5">`true`</ph> ne parcourt pas la hiérarchie des types.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>Use <ph id="ph1">&lt;xref:System.Attribute?displayProperty=nameWithType&gt;</ph> to inherit custom attributes.</source>
          <target state="translated">Utilisez <ph id="ph1">&lt;xref:System.Attribute?displayProperty=nameWithType&gt;</ph> pour hériter des attributs personnalisés.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>This example shows how to use various reflection classes to analyze the metadata contained in an assembly.</source>
          <target state="translated">Cet exemple montre comment utiliser différentes classes de réflexion pour analyser les métadonnées contenues dans un assembly.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>This example generates about 55,000 lines of data, which you can redirect to a text file at the command prompt, as follows: <bpt id="p1">**</bpt>example.exe &gt; propertyinfo.txt<ept id="p1">**</ept></source>
          <target state="translated">Cet exemple génère environ 55 000 lignes de données, que vous pouvez rediriger vers un fichier texte à l’invite de commandes, comme suit : <bpt id="p1">**</bpt>example.exe &gt; propertyinfo.txt<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>for full trust for inheritors.</source>
          <target state="translated">pour la confiance totale pour les héritiers de.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>This class cannot be inherited by partially trusted code.</source>
          <target state="translated">Cette classe ne peut pas être héritée par du code partiellement fiable.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>This type is thread safe.</source>
          <target state="translated">Ce type est thread-safe.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>When you inherit from <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph>, you must override the following members: <ph id="ph2">&lt;see cref="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])" /&gt;</ph>, <ph id="ph3">&lt;see cref="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" /&gt;</ph>, <ph id="ph4">&lt;see cref="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)" /&gt;</ph>, <ph id="ph5">&lt;see cref="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)" /&gt;</ph>, <ph id="ph6">&lt;see cref="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)" /&gt;</ph>, and <ph id="ph7">&lt;see cref="M:System.Reflection.PropertyInfo.GetIndexParameters" /&gt;</ph>.</source>
          <target state="translated">Lorsque vous héritez de <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph>, vous devez substituer les membres suivants : <ph id="ph2">&lt;see cref="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])" /&gt;</ph>, <ph id="ph3">&lt;see cref="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" /&gt;</ph>, <ph id="ph4">&lt;see cref="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)" /&gt;</ph>, <ph id="ph5">&lt;see cref="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)" /&gt;</ph>, <ph id="ph6">&lt;see cref="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)" /&gt;</ph>, et <ph id="ph7">&lt;see cref="M:System.Reflection.PropertyInfo.GetIndexParameters" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> class.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.#ctor">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Lorsqu’elle est appelée à liaison tardive via des mécanismes tels que <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.#ctor">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Énumération associée : <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="P:System.Reflection.PropertyInfo.Attributes">
          <source>Gets the attributes for this property.</source>
          <target state="translated">Obtient les attributs de cette propriété.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.Attributes">
          <source>The attributes of this property.</source>
          <target state="translated">Les attributs de cette propriété.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.Attributes">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.Attributes%2A&gt;</ph> property returns the attributes associated with the property represented by this <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.Attributes%2A&gt;</ph> propriété retourne les attributs associés à la propriété représentée par ce <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> objet.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.Attributes">
          <source>The attributes are primarily modifiers applied by a compiler when creating a property; they indicate whether a property is the default property, a <ph id="ph1">`SpecialName`</ph> property, and so on.</source>
          <target state="translated">Les attributs sont principalement les modificateurs appliquées par un compilateur lors de la création d’une propriété. ils indiquent si une propriété est la propriété par défaut, un <ph id="ph1">`SpecialName`</ph> propriété et ainsi de suite.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.Attributes">
          <source>Note that, for almost all properties found in types in the .NET Framework class library, the value of the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.Attributes%2A&gt;</ph> property is <ph id="ph2">&lt;xref:System.Reflection.PropertyAttributes.None?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Notez que, pour presque toutes les propriétés qui se trouvent dans des types dans la bibliothèque de classes .NET Framework, la valeur de la <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.Attributes%2A&gt;</ph> propriété est <ph id="ph2">&lt;xref:System.Reflection.PropertyAttributes.None?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.Attributes">
          <source>In most cases, you probably want to retrieve the custom attributes associated with a property.</source>
          <target state="translated">Dans la plupart des cas, vous souhaitez récupérer les attributs personnalisés associés à une propriété.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.Attributes">
          <source>To do this, retrieve the value of the <ph id="ph1">&lt;xref:System.Reflection.MemberInfo.CustomAttributes%2A&gt;</ph> property, or call one of the overloads of the <ph id="ph2">&lt;xref:System.Reflection.MemberInfo.GetCustomAttributes%2A&gt;</ph> method.</source>
          <target state="translated">Pour ce faire, récupérer la valeur de la <ph id="ph1">&lt;xref:System.Reflection.MemberInfo.CustomAttributes%2A&gt;</ph> propriété ou appelez une des surcharges de la <ph id="ph2">&lt;xref:System.Reflection.MemberInfo.GetCustomAttributes%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.Attributes">
          <source>To get the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.Attributes%2A&gt;</ph> property:</source>
          <target state="translated">Pour obtenir le <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.Attributes%2A&gt;</ph> propriété :</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.Attributes">
          <source>Get a <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the type to which the property belongs.</source>
          <target state="translated">Obtenir un <ph id="ph1">&lt;xref:System.Type&gt;</ph> objet qui représente le type auquel appartient la propriété.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.Attributes">
          <source>Get the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object by calling an overload of the <ph id="ph2">&lt;xref:System.Type.GetProperty%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Obtenir le <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> objet en appelant une surcharge de la <ph id="ph2">&lt;xref:System.Type.GetProperty%2A?displayProperty=nameWithType&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.Attributes">
          <source>Retrieve the property's attributes from the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.Attributes%2A&gt;</ph> property.</source>
          <target state="translated">Récupérer les attributs de la propriété à partir de la <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.Attributes%2A&gt;</ph> propriété.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.Attributes">
          <source>You can define the attributes of a property for a type created dynamically using reflection emit by calling an overload of the <ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A&gt;</ph> method and supplying a value for the <ph id="ph2">`attributes`</ph> argument.</source>
          <target state="translated">Vous pouvez définir les attributs d’une propriété d’un type créé dynamiquement à l’aide de la réflexion émettre en appelant une surcharge de la <ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A&gt;</ph> (méthode) et en fournissant une valeur pour le <ph id="ph2">`attributes`</ph> argument.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="P:System.Reflection.PropertyInfo.CanRead">
          <source>Gets a value indicating whether the property can be read.</source>
          <target state="translated">Obtient une valeur indiquant si la propriété peut être lue.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanRead">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this property can be read; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si la propriété peut être lue ; sinon, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanRead">
          <source>If the property does not have a <ph id="ph1">`get`</ph> accessor, it cannot be read.</source>
          <target state="translated">Si la propriété n’a pas un <ph id="ph1">`get`</ph> accesseur, il ne peut pas être lu.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanRead">
          <source>To get the <ph id="ph1">`CanRead`</ph> property, first get the class <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">Pour obtenir le <ph id="ph1">`CanRead`</ph> propriété, commencez par obtenir la classe <ph id="ph2">`Type`</ph>.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanRead">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">`PropertyInfo`</ph>.</source>
          <target state="translated">À partir de la <ph id="ph1">`Type`</ph>, obtenir le <ph id="ph2">`PropertyInfo`</ph>.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanRead">
          <source>From the <ph id="ph1">`PropertyInfo`</ph>, get the <ph id="ph2">`CanRead`</ph> value.</source>
          <target state="translated">À partir de la <ph id="ph1">`PropertyInfo`</ph>, obtenir le <ph id="ph2">`CanRead`</ph> valeur.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanRead">
          <source>The following example defines two properties.</source>
          <target state="translated">L’exemple suivant définit deux propriétés.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanRead">
          <source>The first property is readable and the <ph id="ph1">`CanRead`</ph> property is <ph id="ph2">`true`</ph>.</source>
          <target state="translated">La première propriété est accessible en lecture et la <ph id="ph1">`CanRead`</ph> propriété est <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanRead">
          <source>The second property is not readable (there is no get accessor), and the <ph id="ph1">`CanRead`</ph> property is <ph id="ph2">`false`</ph>.</source>
          <target state="translated">La deuxième propriété n’est pas lisible (il n’est pas d’accesseur get) et le <ph id="ph1">`CanRead`</ph> propriété est <ph id="ph2">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="P:System.Reflection.PropertyInfo.CanWrite">
          <source>Gets a value indicating whether the property can be written to.</source>
          <target state="translated">Obtient une valeur indiquant s'il est possible d'écrire dans la propriété.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanWrite">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this property can be written to; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> s'il est possible d'écrire dans la propriété ; sinon, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanWrite">
          <source><ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.CanWrite%2A&gt;</ph> returns <ph id="ph2">`true`</ph> if the property has a <ph id="ph3">`set`</ph> accessor, even if the accessor is <ph id="ph4">`private`</ph>, <ph id="ph5">`internal`</ph> (or <ph id="ph6">`Friend`</ph> in Visual Basic), or <ph id="ph7">`protected`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.CanWrite%2A&gt;</ph> Retourne <ph id="ph2">`true`</ph> si la propriété possède un <ph id="ph3">`set`</ph> accesseur, même si l’accesseur est <ph id="ph4">`private`</ph>, <ph id="ph5">`internal`</ph> (ou <ph id="ph6">`Friend`</ph> en Visual Basic), ou <ph id="ph7">`protected`</ph>.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanWrite">
          <source>If the property does not have a <ph id="ph1">`set`</ph> accessor, the method returns <ph id="ph2">`false`</ph>.</source>
          <target state="translated">Si la propriété n’a pas un <ph id="ph1">`set`</ph> accesseur, la méthode retourne <ph id="ph2">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanWrite">
          <source>To get the value of the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.CanWrite%2A&gt;</ph> property:</source>
          <target state="translated">Pour obtenir la valeur de la <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.CanWrite%2A&gt;</ph> propriété :</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanWrite">
          <source>Get the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object of the type that includes the property.</source>
          <target state="translated">Obtenir le <ph id="ph1">&lt;xref:System.Type&gt;</ph> objet du type qui inclut la propriété.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanWrite">
          <source>Call the <ph id="ph1">&lt;xref:System.Type.GetProperty%2A?displayProperty=nameWithType&gt;</ph> to get the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object that represents the property.</source>
          <target state="translated">Appelez le <ph id="ph1">&lt;xref:System.Type.GetProperty%2A?displayProperty=nameWithType&gt;</ph> pour obtenir le <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> objet qui représente la propriété.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanWrite">
          <source>Retrieve the value of the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.CanWrite%2A&gt;</ph> property.</source>
          <target state="translated">Récupérer la valeur de la <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.CanWrite%2A&gt;</ph> propriété.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanWrite">
          <source>The following example defines two properties.</source>
          <target state="translated">L’exemple suivant définit deux propriétés.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanWrite">
          <source>The first property is writable and the <ph id="ph1">`CanWrite`</ph> property is <ph id="ph2">`true`</ph>.</source>
          <target state="translated">La première propriété est accessible en écriture et la <ph id="ph1">`CanWrite`</ph> propriété est <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanWrite">
          <source>The second property is not writable (there is no <ph id="ph1">`set`</ph> accessor), and the <ph id="ph2">`CanWrite`</ph> property is <ph id="ph3">`false`</ph>.</source>
          <target state="translated">La deuxième propriété n’est pas accessible en écriture (il existe aucune <ph id="ph1">`set`</ph> accesseur) et le <ph id="ph2">`CanWrite`</ph> propriété est <ph id="ph3">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.Equals(System.Object)">
          <source>An object to compare with this instance, or <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Objet à comparer à cette instance ou <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.Equals(System.Object)">
          <source>Returns a value that indicates whether this instance is equal to a specified object.</source>
          <target state="translated">Retourne une valeur qui indique si cette instance est égale à un objet spécifié.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> equals the type and value of this instance; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> est égal au type et à la valeur de cette instance ; sinon, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="T:System.Reflection.PropertyInfo">
          <source>Returns an array of the <ph id="ph1">&lt;see langword="get" /&gt;</ph> and <ph id="ph2">&lt;see langword="set" /&gt;</ph> accessors on this property.</source>
          <target state="translated">Retourne un tableau d'accesseurs <ph id="ph1">&lt;see langword="get" /&gt;</ph> et <ph id="ph2">&lt;see langword="set" /&gt;</ph> sur cette propriété.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetAccessors">
          <source>Returns an array whose elements reflect the public <ph id="ph1">&lt;see langword="get" /&gt;</ph> and <ph id="ph2">&lt;see langword="set" /&gt;</ph> accessors of the property reflected by the current instance.</source>
          <target state="translated">Retourne un tableau dont les éléments réfléchissent les accesseurs publics <ph id="ph1">&lt;see langword="get" /&gt;</ph> et <ph id="ph2">&lt;see langword="set" /&gt;</ph> de la propriété réfléchie par l’instance actuelle.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetAccessors">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> objects that reflect the public <ph id="ph2">&lt;see langword="get" /&gt;</ph> and <ph id="ph3">&lt;see langword="set" /&gt;</ph> accessors of the property reflected by the current instance, if found; otherwise, this method returns an array with zero (0) elements.</source>
          <target state="translated">Tableau d’objets <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> qui réfléchissent les accesseurs publics <ph id="ph2">&lt;see langword="get" /&gt;</ph> et <ph id="ph3">&lt;see langword="set" /&gt;</ph> de la propriété réfléchie par l’instance actuelle, le cas échéant ; sinon, cette méthode retourne un tableau avec zéro (0) élément.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetAccessors">
          <source>To call the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetAccessors%2A&gt;</ph> method:</source>
          <target state="translated">Pour appeler le <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetAccessors%2A&gt;</ph> méthode :</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetAccessors">
          <source>Get a <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the class.</source>
          <target state="translated">Obtenir un <ph id="ph1">&lt;xref:System.Type&gt;</ph> objet qui représente la classe.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetAccessors">
          <source>From the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object, get the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object.</source>
          <target state="translated">À partir de la <ph id="ph1">&lt;xref:System.Type&gt;</ph> de l’objet, d’obtenir le <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> objet.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetAccessors">
          <source>From the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object, call the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo.GetAccessors%2A&gt;</ph> method.</source>
          <target state="translated">À partir de la <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> de l’objet, appelez le <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo.GetAccessors%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetAccessors">
          <source>The following example retrieves the public accessors of the <ph id="ph1">`ClassWithProperty.Caption`</ph> property and displays information about them.</source>
          <target state="translated">L’exemple suivant récupère les accesseurs publics de la <ph id="ph1">`ClassWithProperty.Caption`</ph> propriété et affiche des informations à leur sujet.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetAccessors">
          <source>It also calls the <ph id="ph1">&lt;xref:System.Reflection.MethodBase.Invoke%2A&gt;</ph> method of the setter to set the property value and of the getter to retrieve the property value.</source>
          <target state="translated">Il appelle également la <ph id="ph1">&lt;xref:System.Reflection.MethodBase.Invoke%2A&gt;</ph> méthode de l’accesseur Set pour définir la valeur de propriété et de l’accesseur Get pour extraire la valeur de propriété.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetAccessors">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Lorsqu’elle est appelée à liaison tardive via des mécanismes tels que <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetAccessors">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Énumération associée : <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
          <source>Indicates whether non-public methods should be returned in the returned array.</source>
          <target state="translated">Indique si des méthodes non publiques doivent être retournées dans le tableau retourné.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if non-public methods are to be included; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si les méthodes non publiques doivent être incluses ; sinon, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
          <source>Returns an array whose elements reflect the public and, if specified, non-public <ph id="ph1">&lt;see langword="get" /&gt;</ph> and <ph id="ph2">&lt;see langword="set" /&gt;</ph> accessors of the property reflected by the current instance.</source>
          <target state="translated">Retourne un tableau dont les éléments réfléchissent les accesseurs <ph id="ph1">&lt;see langword="get" /&gt;</ph>, <ph id="ph2">&lt;see langword="set" /&gt;</ph> publics et, le cas échéant, non publics, ainsi que d’autres accesseurs de la propriété réfléchie par l’instance actuelle.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
          <source>An array whose elements reflect the <ph id="ph1">&lt;see langword="get" /&gt;</ph> and <ph id="ph2">&lt;see langword="set" /&gt;</ph> accessors of the property reflected by the current instance.</source>
          <target state="translated">Tableau dont les éléments réfléchissent les accesseurs <ph id="ph1">&lt;see langword="get" /&gt;</ph> et <ph id="ph2">&lt;see langword="set" /&gt;</ph> de la propriété réfléchie par l’instance actuelle.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
          <source>If <ph id="ph1">&lt;paramref name="nonPublic" /&gt;</ph> is <ph id="ph2">&lt;see langword="true" /&gt;</ph>, this array contains public and non-public <ph id="ph3">&lt;see langword="get" /&gt;</ph> and <ph id="ph4">&lt;see langword="set" /&gt;</ph> accessors.</source>
          <target state="translated">Si <ph id="ph1">&lt;paramref name="nonPublic" /&gt;</ph> a la valeur <ph id="ph2">&lt;see langword="true" /&gt;</ph>, ce tableau contient des accesseurs <ph id="ph3">&lt;see langword="get" /&gt;</ph> et <ph id="ph4">&lt;see langword="set" /&gt;</ph> publics et non publics.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
          <source>If <ph id="ph1">&lt;paramref name="nonPublic" /&gt;</ph> is <ph id="ph2">&lt;see langword="false" /&gt;</ph>, this array contains only public <ph id="ph3">&lt;see langword="get" /&gt;</ph> and <ph id="ph4">&lt;see langword="set" /&gt;</ph> accessors.</source>
          <target state="translated">Si <ph id="ph1">&lt;paramref name="nonPublic" /&gt;</ph> a la valeur <ph id="ph2">&lt;see langword="false" /&gt;</ph>, ce tableau contient uniquement les accesseurs <ph id="ph3">&lt;see langword="get" /&gt;</ph> et <ph id="ph4">&lt;see langword="set" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
          <source>If no accessors with the specified visibility are found, this method returns an array with zero (0) elements.</source>
          <target state="translated">Si aucun accesseur avec la visibilité spécifiée n'est trouvé, cette méthode retourne un tableau avec zéro (0) éléments.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
          <source>To call the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetAccessors%2A&gt;</ph> method:</source>
          <target state="translated">Pour appeler le <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetAccessors%2A&gt;</ph> méthode :</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
          <source>Get a <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the class.</source>
          <target state="translated">Obtenir un <ph id="ph1">&lt;xref:System.Type&gt;</ph> objet qui représente la classe.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
          <source>From the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object, get the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object.</source>
          <target state="translated">À partir de la <ph id="ph1">&lt;xref:System.Type&gt;</ph> de l’objet, d’obtenir le <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> objet.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
          <source>From the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object, call the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo.GetAccessors%2A&gt;</ph> method.</source>
          <target state="translated">À partir de la <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> de l’objet, appelez le <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo.GetAccessors%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
          <source>The following example retrieves the accessors of the <ph id="ph1">`ClassWithProperty.Caption`</ph> property and displays information about them.</source>
          <target state="translated">L’exemple suivant récupère les accesseurs de la <ph id="ph1">`ClassWithProperty.Caption`</ph> propriété et affiche des informations à leur sujet.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
          <source>It also calls the <ph id="ph1">&lt;xref:System.Reflection.MethodBase.Invoke%2A&gt;</ph> method of the setter to set the property value and of the getter to retrieve the property value.</source>
          <target state="translated">Il appelle également la <ph id="ph1">&lt;xref:System.Reflection.MethodBase.Invoke%2A&gt;</ph> méthode de l’accesseur Set pour définir la valeur de propriété et de l’accesseur Get pour extraire la valeur de propriété.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Lorsqu’elle est appelée à liaison tardive via des mécanismes tels que <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Énumération associée : <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetConstantValue">
          <source>Returns a literal value associated with the property by a compiler.</source>
          <target state="translated">Retourne une valeur littérale associée à la propriété par un compilateur.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetConstantValue">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> that contains the literal value associated with the property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> qui contient la valeur littérale associée à la propriété.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetConstantValue">
          <source>If the literal value is a class type with an element value of zero, the return value is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Si la valeur littérale est un type de classe possédant une valeur d'élément de zéro, la valeur de retour est <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetConstantValue">
          <source>This method is provided for designers of managed compilers and code analyzers.</source>
          <target state="translated">Cette méthode est fournie pour les concepteurs de compilateurs managés et des analyseurs de code.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetConstantValue">
          <source>Do not use this method in the reflection-only context, because it might cause code to execute.</source>
          <target state="translated">N’utilisez pas cette méthode dans le contexte de réflexion uniquement, car cela peut provoquer le code à exécuter.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetConstantValue">
          <source>Use the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetRawConstantValue%2A&gt;</ph> method instead.</source>
          <target state="translated">Utilisez plutôt la méthode <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetRawConstantValue%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetConstantValue">
          <source>In unmanaged metadata, the Constant table is used to store constant values for fields, parameters, and properties.</source>
          <target state="translated">Dans les métadonnées non managées, la table Constant est utilisée pour stocker les valeurs de constante pour les champs, les paramètres et les propriétés.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetConstantValue">
          <source>Constant information does not directly influence runtime behavior.</source>
          <target state="translated">Informations sur les constantes n’influencent pas directement le comportement d’exécution.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetConstantValue">
          <source>Compilers inspect this information, at compile time, when importing metadata.</source>
          <target state="translated">Les compilateurs inspectent ces informations au moment de la compilation, lors de l’importation de métadonnées.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetConstantValue">
          <source>If used, the value of a constant is embedded in the Microsoft intermediate language (MSIL) stream the compiler emits.</source>
          <target state="translated">Si utilisé, la valeur d’une constante est incorporée dans le flux de Microsoft intermediate language (MSIL) le compilateur émet.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetConstantValue">
          <source>There are no MSIL instructions that can be used to access the Constant table at run time.</source>
          <target state="translated">Il n’existe aucune instruction MSIL qui peut être utilisée pour accéder à la table Constant au moment de l’exécution.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetConstantValue">
          <source>For more information on constant values and the Constant table, see the ECMA Partition II documentation.</source>
          <target state="translated">Pour plus d’informations sur les valeurs de constante et la table Constant, consultez la documentation ECMA Partition II.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetConstantValue">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">La documentation est disponible en ligne. Consultez <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> sur MSDN et <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> sur le site web d’Ecma International.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetConstantValue">
          <source>The Constant table in unmanaged metadata does not contain a constant value for the current property.</source>
          <target state="translated">La table Constant dans les métadonnées non managées ne contient pas de valeur de constante pour la propriété actuelle.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetConstantValue">
          <source>The type of the value is not one of the types permitted by the Common Language Specification (CLS).</source>
          <target state="translated">Le type de la valeur n’est pas l’un des types autorisés par la spécification CLS (Common Language Specification).</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetConstantValue">
          <source>See the ECMA Partition II specification, Metadata.</source>
          <target state="translated">Consultez la spécification ECMA Partition II « Metadata ».</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="T:System.Reflection.PropertyInfo">
          <source>Returns a <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> representing the <ph id="ph2">&lt;see langword="get" /&gt;</ph> accessor for this property.</source>
          <target state="translated">Retourne un <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> représentant l'accesseur <ph id="ph2">&lt;see langword="get" /&gt;</ph> de cette propriété.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetGetMethod">
          <source>Returns the public <ph id="ph1">&lt;see langword="get" /&gt;</ph> accessor for this property.</source>
          <target state="translated">Retourne l'accesseur <ph id="ph1">&lt;see langword="get" /&gt;</ph> public de cette propriété.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetGetMethod">
          <source>A <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> object representing the public <ph id="ph2">&lt;see langword="get" /&gt;</ph> accessor for this property, or <ph id="ph3">&lt;see langword="null" /&gt;</ph> if the <ph id="ph4">&lt;see langword="get" /&gt;</ph> accessor is non-public or does not exist.</source>
          <target state="translated">Objet <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> représentant l'accesseur <ph id="ph2">&lt;see langword="get" /&gt;</ph> public de cette propriété ou <ph id="ph3">&lt;see langword="null" /&gt;</ph> si l'accesseur <ph id="ph4">&lt;see langword="get" /&gt;</ph> est non public ou n'existe pas.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetGetMethod">
          <source>This is a convenience method that provides an implementation for the abstract <ph id="ph1">`GetGetMethod`</ph> method with the <ph id="ph2">`nonPublic`</ph> parameter set to <ph id="ph3">`false`</ph>.</source>
          <target state="translated">Il s’agit d’une méthode pratique qui fournit une implémentation pour l’abstraite <ph id="ph1">`GetGetMethod`</ph> méthode avec la <ph id="ph2">`nonPublic`</ph> paramètre la valeur <ph id="ph3">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetGetMethod">
          <source>To use the <ph id="ph1">`GetGetMethod`</ph> method, first get the class <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">Pour utiliser le <ph id="ph1">`GetGetMethod`</ph> méthode, commencez par obtenir la classe <ph id="ph2">`Type`</ph>.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetGetMethod">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>.</source>
          <target state="translated">À partir de la <ph id="ph1">`Type`</ph>, obtenir le <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetGetMethod">
          <source>From the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>, use the <ph id="ph2">`GetGetMethod`</ph> method.</source>
          <target state="translated">À partir de la <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>, utilisez le <ph id="ph2">`GetGetMethod`</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetGetMethod">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Lorsqu’elle est appelée à liaison tardive via des mécanismes tels que <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetGetMethod">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Énumération associée : <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)">
          <source>Indicates whether a non-public <ph id="ph1">&lt;see langword="get" /&gt;</ph> accessor should be returned.</source>
          <target state="translated">Indique si un accesseur <ph id="ph1">&lt;see langword="get" /&gt;</ph> non public doit être retourné.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if a non-public accessor is to be returned; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si un accesseur non public doit être retourné ; sinon, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)">
          <source>When overridden in a derived class, returns the public or non-public <ph id="ph1">&lt;see langword="get" /&gt;</ph> accessor for this property.</source>
          <target state="translated">En cas de substitution dans une classe dérivée, retourne l'accesseur <ph id="ph1">&lt;see langword="get" /&gt;</ph> public ou non public de cette propriété.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)">
          <source>A <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> object representing the <ph id="ph2">&lt;see langword="get" /&gt;</ph> accessor for this property, if <ph id="ph3">&lt;paramref name="nonPublic" /&gt;</ph> is <ph id="ph4">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">Objet <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> représentant l'accesseur <ph id="ph2">&lt;see langword="get" /&gt;</ph> de cette propriété, si <ph id="ph3">&lt;paramref name="nonPublic" /&gt;</ph> est <ph id="ph4">&lt;see langword="true" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)">
          <source>Returns <ph id="ph1">&lt;see langword="null" /&gt;</ph> if <ph id="ph2">&lt;paramref name="nonPublic" /&gt;</ph> is <ph id="ph3">&lt;see langword="false" /&gt;</ph> and the <ph id="ph4">&lt;see langword="get" /&gt;</ph> accessor is non-public, or if <ph id="ph5">&lt;paramref name="nonPublic" /&gt;</ph> is <ph id="ph6">&lt;see langword="true" /&gt;</ph> but no <ph id="ph7">&lt;see langword="get" /&gt;</ph> accessors exist.</source>
          <target state="translated">Retourne <ph id="ph1">&lt;see langword="null" /&gt;</ph> si <ph id="ph2">&lt;paramref name="nonPublic" /&gt;</ph> est <ph id="ph3">&lt;see langword="false" /&gt;</ph> et si l'accesseur <ph id="ph4">&lt;see langword="get" /&gt;</ph> est non public ou si <ph id="ph5">&lt;paramref name="nonPublic" /&gt;</ph> est <ph id="ph6">&lt;see langword="true" /&gt;</ph>, mais qu'il n'existe pas d'accesseur <ph id="ph7">&lt;see langword="get" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)">
          <source>This property is the <ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph> representing the get accessor.</source>
          <target state="translated">Cette propriété est le <ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph> représentant l’accesseur get.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)">
          <source>To use the <ph id="ph1">`GetGetMethod`</ph> method, first get the class <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">Pour utiliser le <ph id="ph1">`GetGetMethod`</ph> méthode, commencez par obtenir la classe <ph id="ph2">`Type`</ph>.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>.</source>
          <target state="translated">À partir de la <ph id="ph1">`Type`</ph>, obtenir le <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)">
          <source>From the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>, use the <ph id="ph2">`GetGetMethod`</ph> method.</source>
          <target state="translated">À partir de la <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>, utilisez le <ph id="ph2">`GetGetMethod`</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)">
          <source>The following example displays the public or non-public <ph id="ph1">`get`</ph> accessor for the specified property.</source>
          <target state="translated">L’exemple suivant affiche le public ou non public <ph id="ph1">`get`</ph> accesseur pour la propriété spécifiée.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)">
          <source>The requested method is non-public and the caller does not have <ph id="ph1">&lt;see cref="T:System.Security.Permissions.ReflectionPermission" /&gt;</ph> to reflect on this non-public method.</source>
          <target state="translated">La méthode demandée est non publique et l’appelant ne dispose pas de <ph id="ph1">&lt;see cref="T:System.Security.Permissions.ReflectionPermission" /&gt;</ph> pour influer sur cette méthode non publique.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Lorsqu’elle est appelée à liaison tardive via des mécanismes tels que <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Énumération associée : <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetHashCode">
          <source>Returns the hash code for this instance.</source>
          <target state="translated">Retourne le code de hachage de cette instance.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetHashCode">
          <source>A 32-bit signed integer hash code.</source>
          <target state="translated">Code de hachage d'un entier signé 32 bits.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetIndexParameters">
          <source>When overridden in a derived class, returns an array of all the index parameters for the property.</source>
          <target state="translated">En cas de substitution dans une classe dérivée, retourne un tableau de tous les paramètres d'index de cette propriété.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetIndexParameters">
          <source>An array of type <ph id="ph1">&lt;see langword="ParameterInfo" /&gt;</ph> containing the parameters for the indexes.</source>
          <target state="translated">Tableau de type <ph id="ph1">&lt;see langword="ParameterInfo" /&gt;</ph> contenant les paramètres des index.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetIndexParameters">
          <source>If the property is not indexed, the array has 0 (zero) elements.</source>
          <target state="translated">Si la propriété n'est pas indexée, le tableau a 0 (zéro) élément.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetIndexParameters">
          <source>Extract any required parameter information from the returned array.</source>
          <target state="translated">Extraire des informations de paramètre requis à partir du tableau retourné.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetIndexParameters">
          <source>To use the <ph id="ph1">`GetIndexParameters`</ph> method, first get the class <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">Pour utiliser le <ph id="ph1">`GetIndexParameters`</ph> méthode, commencez par obtenir la classe <ph id="ph2">`Type`</ph>.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetIndexParameters">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">`PropertyInfo`</ph>.</source>
          <target state="translated">À partir de la <ph id="ph1">`Type`</ph>, obtenir le <ph id="ph2">`PropertyInfo`</ph>.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetIndexParameters">
          <source>From the <ph id="ph1">`PropertyInfo`</ph>, use the <ph id="ph2">`GetIndexParameters`</ph> method.</source>
          <target state="translated">À partir de la <ph id="ph1">`PropertyInfo`</ph>, utilisez le <ph id="ph2">`GetIndexParameters`</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetIndexParameters">
          <source>The following example displays the index parameters of the specified property.</source>
          <target state="translated">L’exemple suivant affiche les paramètres d’index de la propriété spécifiée.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetIndexParameters">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Lorsqu’elle est appelée à liaison tardive via des mécanismes tels que <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetIndexParameters">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Énumération associée : <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="P:System.Reflection.PropertyInfo.GetMethod">
          <source>Gets the <ph id="ph1">&lt;see langword="get" /&gt;</ph> accessor for this property.</source>
          <target state="translated">Obtient l'accesseur <ph id="ph1">&lt;see langword="get" /&gt;</ph> de cette propriété.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.GetMethod">
          <source>The <ph id="ph1">&lt;see langword="get" /&gt;</ph> accessor for this property.</source>
          <target state="translated">Accesseur <ph id="ph1">&lt;see langword="get" /&gt;</ph> de cette propriété.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetOptionalCustomModifiers">
          <source>Returns an array of types representing the optional custom modifiers of the property.</source>
          <target state="translated">Retourne un tableau de types représentant les modificateurs personnalisés facultatifs de la propriété.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetOptionalCustomModifiers">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> objects that identify the optional custom modifiers of the current property, such as <ph id="ph2">&lt;see cref="T:System.Runtime.CompilerServices.IsConst" /&gt;</ph> or <ph id="ph3">&lt;see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" /&gt;</ph>.</source>
          <target state="translated">Tableau d'objets <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> identifiant les modificateurs personnalisés facultatifs de la propriété actuelle, tels que <ph id="ph2">&lt;see cref="T:System.Runtime.CompilerServices.IsConst" /&gt;</ph> ou <ph id="ph3">&lt;see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetOptionalCustomModifiers">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetOptionalCustomModifiers%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo.GetRequiredCustomModifiers%2A&gt;</ph> methods are provided for designers of managed compilers.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetOptionalCustomModifiers%2A&gt;</ph> et <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo.GetRequiredCustomModifiers%2A&gt;</ph> méthodes sont fournies pour les concepteurs de compilateurs managés.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetOptionalCustomModifiers">
          <source>For more information on custom modifiers, see <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.IsBoxed&gt;</ph> and related classes in the <ph id="ph2">&lt;xref:System.Runtime.CompilerServices&gt;</ph> namespace and the metadata specification in the ECMA Partition II documentation.</source>
          <target state="translated">Pour plus d’informations sur les modificateurs personnalisés, consultez <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.IsBoxed&gt;</ph> et les classes associées dans le <ph id="ph2">&lt;xref:System.Runtime.CompilerServices&gt;</ph> espace de noms et les spécifications des métadonnées dans la documentation ECMA Partition II.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetOptionalCustomModifiers">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">La documentation est disponible en ligne. Consultez <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> sur MSDN et <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> sur le site web d’Ecma International.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetRawConstantValue">
          <source>Returns a literal value associated with the property by a compiler.</source>
          <target state="translated">Retourne une valeur littérale associée à la propriété par un compilateur.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetRawConstantValue">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> that contains the literal value associated with the property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> qui contient la valeur littérale associée à la propriété.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetRawConstantValue">
          <source>If the literal value is a class type with an element value of zero, the return value is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Si la valeur littérale est un type de classe possédant une valeur d'élément de zéro, la valeur de retour est <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetRawConstantValue">
          <source>This method is provided for designers of managed compilers and code analyzers.</source>
          <target state="translated">Cette méthode est fournie pour les concepteurs de compilateurs managés et des analyseurs de code.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetRawConstantValue">
          <source>This method can be used in both the execution context and the reflection-only context.</source>
          <target state="translated">Cette méthode peut être utilisée dans le contexte d’exécution et le contexte de réflexion uniquement.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetRawConstantValue">
          <source>In unmanaged metadata, the Constant table is used to store constant values for fields, parameters, and properties.</source>
          <target state="translated">Dans les métadonnées non managées, la table Constant est utilisée pour stocker les valeurs de constante pour les champs, les paramètres et les propriétés.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetRawConstantValue">
          <source>Constant information does not directly influence runtime behavior.</source>
          <target state="translated">Informations sur les constantes n’influencent pas directement le comportement d’exécution.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetRawConstantValue">
          <source>Compilers inspect this information, at compile time, when importing metadata.</source>
          <target state="translated">Les compilateurs inspectent ces informations au moment de la compilation, lors de l’importation de métadonnées.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetRawConstantValue">
          <source>If used, the value of a constant is embedded in the Microsoft intermediate language (MSIL) stream the compiler emits.</source>
          <target state="translated">Si utilisé, la valeur d’une constante est incorporée dans le flux de Microsoft intermediate language (MSIL) le compilateur émet.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetRawConstantValue">
          <source>There are no MSIL instructions that can be used to access the Constant table at run time.</source>
          <target state="translated">Il n’existe aucune instruction MSIL qui peut être utilisée pour accéder à la table Constant au moment de l’exécution.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetRawConstantValue">
          <source>For more information on constant values and the Constant table, see the ECMA Partition II documentation.</source>
          <target state="translated">Pour plus d’informations sur les valeurs de constante et la table Constant, consultez la documentation ECMA Partition II.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetRawConstantValue">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">La documentation est disponible en ligne. Consultez <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> sur MSDN et <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> sur le site web d’Ecma International.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetRawConstantValue">
          <source>The Constant table in unmanaged metadata does not contain a constant value for the current property.</source>
          <target state="translated">La table Constant dans les métadonnées non managées ne contient pas de valeur de constante pour la propriété actuelle.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetRawConstantValue">
          <source>The type of the value is not one of the types permitted by the Common Language Specification (CLS).</source>
          <target state="translated">Le type de la valeur n’est pas l’un des types autorisés par la spécification CLS (Common Language Specification).</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetRawConstantValue">
          <source>See the ECMA Partition II specification, Metadata Logical Format: Other Structures, Element Types used in Signatures.</source>
          <target state="translated">Consultez la spécification ECMA Partition II, format logique des métadonnées : autres structures, types d’éléments utilisés dans les signatures.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetRequiredCustomModifiers">
          <source>Returns an array of types representing the required custom modifiers of the property.</source>
          <target state="translated">Retourne un tableau de types représentant les modificateurs personnalisés requis de la propriété.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetRequiredCustomModifiers">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> objects that identify the required custom modifiers of the current property, such as <ph id="ph2">&lt;see cref="T:System.Runtime.CompilerServices.IsConst" /&gt;</ph> or <ph id="ph3">&lt;see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" /&gt;</ph>.</source>
          <target state="translated">Tableau d'objets <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> identifiant les modificateurs personnalisés requis de la propriété actuelle, tels que <ph id="ph2">&lt;see cref="T:System.Runtime.CompilerServices.IsConst" /&gt;</ph> ou <ph id="ph3">&lt;see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetRequiredCustomModifiers">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetOptionalCustomModifiers%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo.GetRequiredCustomModifiers%2A&gt;</ph> methods are provided for designers of managed compilers.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetOptionalCustomModifiers%2A&gt;</ph> et <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo.GetRequiredCustomModifiers%2A&gt;</ph> méthodes sont fournies pour les concepteurs de compilateurs managés.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetRequiredCustomModifiers">
          <source>For more information on custom modifiers, see <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.IsBoxed&gt;</ph> and related classes in the <ph id="ph2">&lt;xref:System.Runtime.CompilerServices&gt;</ph> namespace and the metadata specification in the ECMA Partition II documentation.</source>
          <target state="translated">Pour plus d’informations sur les modificateurs personnalisés, consultez <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.IsBoxed&gt;</ph> et les classes associées dans le <ph id="ph2">&lt;xref:System.Runtime.CompilerServices&gt;</ph> espace de noms et les spécifications des métadonnées dans la documentation ECMA Partition II.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetRequiredCustomModifiers">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">La documentation est disponible en ligne. Consultez <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> sur MSDN et <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> sur le site web d’Ecma International.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="T:System.Reflection.PropertyInfo">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> representing the <ph id="ph2">&lt;see langword="set" /&gt;</ph> accessor for this property.</source>
          <target state="translated">Retourne un <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> représentant l'accesseur <ph id="ph2">&lt;see langword="set" /&gt;</ph> de cette propriété.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod">
          <source>Returns the public <ph id="ph1">&lt;see langword="set" /&gt;</ph> accessor for this property.</source>
          <target state="translated">Retourne l'accesseur <ph id="ph1">&lt;see langword="set" /&gt;</ph> public de cette propriété.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod">
          <source>The <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> object representing the <ph id="ph2">&lt;see langword="Set" /&gt;</ph> method for this property if the <ph id="ph3">&lt;see langword="set" /&gt;</ph> accessor is public, or <ph id="ph4">&lt;see langword="null" /&gt;</ph> if the <ph id="ph5">&lt;see langword="set" /&gt;</ph> accessor is not public.</source>
          <target state="translated">Objet <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> représentant la méthode <ph id="ph2">&lt;see langword="Set" /&gt;</ph> de cette propriété si l'accesseur <ph id="ph3">&lt;see langword="set" /&gt;</ph> est public ou <ph id="ph4">&lt;see langword="null" /&gt;</ph> si l'accesseur <ph id="ph5">&lt;see langword="set" /&gt;</ph> n'est pas public.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetSetMethod">
          <source>This is a convenience method that provides an implementation for the abstract <ph id="ph1">`GetSetMethod`</ph> method with the <ph id="ph2">`nonPublic`</ph> parameter set to <ph id="ph3">`false`</ph>.</source>
          <target state="translated">Il s’agit d’une méthode pratique qui fournit une implémentation pour l’abstraite <ph id="ph1">`GetSetMethod`</ph> méthode avec la <ph id="ph2">`nonPublic`</ph> paramètre la valeur <ph id="ph3">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetSetMethod">
          <source>To use the <ph id="ph1">`GetSetMethod`</ph> method, first get the class <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">Pour utiliser le <ph id="ph1">`GetSetMethod`</ph> méthode, commencez par obtenir la classe <ph id="ph2">`Type`</ph>.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetSetMethod">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>.</source>
          <target state="translated">À partir de la <ph id="ph1">`Type`</ph>, obtenir le <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetSetMethod">
          <source>From the <ph id="ph1">`PropertyInfo`</ph>, use the <ph id="ph2">`GetSetMethod`</ph> method.</source>
          <target state="translated">À partir de la <ph id="ph1">`PropertyInfo`</ph>, utilisez le <ph id="ph2">`GetSetMethod`</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetSetMethod">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Lorsqu’elle est appelée à liaison tardive via des mécanismes tels que <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetSetMethod">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Énumération associée : <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source>Indicates whether the accessor should be returned if it is non-public.</source>
          <target state="translated">Indique si l’accesseur doit être retourné s’il est non public.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if a non-public accessor is to be returned; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si un accesseur non public doit être retourné ; sinon, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source>When overridden in a derived class, returns the <ph id="ph1">&lt;see langword="set" /&gt;</ph> accessor for this property.</source>
          <target state="translated">En cas de substitution dans une classe dérivée, retourne l'accesseur <ph id="ph1">&lt;see langword="set" /&gt;</ph> de cette propriété.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source>This property's <ph id="ph1">&lt;see langword="Set" /&gt;</ph> method, or <ph id="ph2">&lt;see langword="null" /&gt;</ph>, as shown in the following table.</source>
          <target state="translated">La méthode <ph id="ph1">&lt;see langword="Set" /&gt;</ph> de la propriété, ou <ph id="ph2">&lt;see langword="null" /&gt;</ph>, comme indiqué dans le tableau suivant.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Value</source>
          <target state="translated"><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Valeur</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Condition</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Condition</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> The <ph id="ph5">&lt;see langword="Set" /&gt;</ph> method for this property.</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Méthode <ph id="ph5">&lt;see langword="Set" /&gt;</ph> pour cette propriété.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> The <ph id="ph3">&lt;see langword="set" /&gt;</ph> accessor is public.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> L’accesseur <ph id="ph3">&lt;see langword="set" /&gt;</ph> est public.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="nonPublic" /&gt;</ph> is <ph id="ph2">&lt;see langword="true" /&gt;</ph> and the <ph id="ph3">&lt;see langword="set" /&gt;</ph> accessor is non-public.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="nonPublic" /&gt;</ph> a la valeur <ph id="ph2">&lt;see langword="true" /&gt;</ph> et l'accesseur <ph id="ph3">&lt;see langword="set" /&gt;</ph> est non public.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><bpt id="p1">&lt;term&gt;</bpt><ph id="ph4">&lt;see langword="null" /&gt;</ph><ept id="p1">&lt;/term&gt;</ept><ph id="ph5">&lt;description&gt;</ph><ph id="ph6">&lt;paramref name="nonPublic" /&gt;</ph> is <ph id="ph7">&lt;see langword="true" /&gt;</ph>, but the property is read-only.</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><bpt id="p1">&lt;term&gt;</bpt><ph id="ph4">&lt;see langword="null" /&gt;</ph><ept id="p1">&lt;/term&gt;</ept><ph id="ph5">&lt;description&gt;</ph><ph id="ph6">&lt;paramref name="nonPublic" /&gt;</ph> a la valeur <ph id="ph7">&lt;see langword="true" /&gt;</ph>, mais la propriété est en lecture seule.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="nonPublic" /&gt;</ph> is <ph id="ph2">&lt;see langword="false" /&gt;</ph> and the <ph id="ph3">&lt;see langword="set" /&gt;</ph> accessor is non-public.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="nonPublic" /&gt;</ph> a la valeur <ph id="ph2">&lt;see langword="false" /&gt;</ph> et l'accesseur <ph id="ph3">&lt;see langword="set" /&gt;</ph> est non public.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source>There is no <ph id="ph1">&lt;see langword="set" /&gt;</ph> accessor.</source>
          <target state="translated">Il n'existe aucun accesseur <ph id="ph1">&lt;see langword="set" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source>To use the <ph id="ph1">`GetSetMethod`</ph> method, first get the class <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">Pour utiliser le <ph id="ph1">`GetSetMethod`</ph> méthode, commencez par obtenir la classe <ph id="ph2">`Type`</ph>.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>.</source>
          <target state="translated">À partir de la <ph id="ph1">`Type`</ph>, obtenir le <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source>From the <ph id="ph1">`PropertyInfo`</ph>, use the <ph id="ph2">`GetSetMethod`</ph> method.</source>
          <target state="translated">À partir de la <ph id="ph1">`PropertyInfo`</ph>, utilisez le <ph id="ph2">`GetSetMethod`</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source>The following example displays the <ph id="ph1">`set`</ph> accessor for the specified property.</source>
          <target state="translated">L’exemple suivant affiche la <ph id="ph1">`set`</ph> accesseur pour la propriété spécifiée.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source>The requested method is non-public and the caller does not have <ph id="ph1">&lt;see cref="T:System.Security.Permissions.ReflectionPermission" /&gt;</ph> to reflect on this non-public method.</source>
          <target state="translated">La méthode demandée est non publique et l’appelant ne dispose pas de <ph id="ph1">&lt;see cref="T:System.Security.Permissions.ReflectionPermission" /&gt;</ph> pour influer sur cette méthode non publique.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Lorsqu’elle est appelée à liaison tardive via des mécanismes tels que <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Énumération associée : <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="T:System.Reflection.PropertyInfo">
          <source>Returns the property value of a specified object.</source>
          <target state="translated">Retourne la valeur de la propriété d'un objet spécifié.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object)">
          <source>The object whose property value will be returned.</source>
          <target state="translated">Objet dont la valeur de propriété sera retournée.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object)">
          <source>Returns the property value of a specified object.</source>
          <target state="translated">Retourne la valeur de la propriété d'un objet spécifié.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object)">
          <source>The property value of the specified object.</source>
          <target state="translated">Valeur de la propriété de l'objet spécifié.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object)">
          <source>You call the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetValue%28System.Object%29&gt;</ph> overload to retrieve the value of a non-indexed property; if you try to retrieve the value of an indexed property, the method throws a <ph id="ph2">&lt;xref:System.Reflection.TargetParameterCountException&gt;</ph> exception.</source>
          <target state="translated">Vous appelez le <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetValue%28System.Object%29&gt;</ph> surcharge pour récupérer la valeur d’une propriété non indexée ; si vous essayez de récupérer la valeur d’une propriété indexée, la méthode lève un <ph id="ph2">&lt;xref:System.Reflection.TargetParameterCountException&gt;</ph> exception.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object)">
          <source>You can determine whether a property is indexed or not by calling the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetIndexParameters%2A&gt;</ph> method.</source>
          <target state="translated">Vous pouvez déterminer si une propriété est indexée, ou non, en appelant le <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetIndexParameters%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object)">
          <source>If the length of the returned <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> array is zero, the property is not indexed.</source>
          <target state="translated">Si la longueur de retourné <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> tableau est égal à zéro, la propriété n’est pas indexée.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object)">
          <source>This is a convenience method that provides an implementation for the abstract <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetValue%28System.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29&gt;</ph> method with the <ph id="ph2">&lt;xref:System.Reflection.BindingFlags&gt;</ph> parameter set to <ph id="ph3">&lt;xref:System.Reflection.BindingFlags.Default?displayProperty=nameWithType&gt;</ph>, the <ph id="ph4">&lt;xref:System.Reflection.Binder&gt;</ph> set to <ph id="ph5">`null`</ph>, the object array of index values set to <ph id="ph6">`null`</ph>, and the <ph id="ph7">&lt;xref:System.Globalization.CultureInfo&gt;</ph> set to <ph id="ph8">`null`</ph>.</source>
          <target state="translated">Il s’agit d’une méthode pratique qui fournit une implémentation pour l’abstraite <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetValue%28System.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29&gt;</ph> méthode avec la <ph id="ph2">&lt;xref:System.Reflection.BindingFlags&gt;</ph> paramètre la valeur <ph id="ph3">&lt;xref:System.Reflection.BindingFlags.Default?displayProperty=nameWithType&gt;</ph>, le <ph id="ph4">&lt;xref:System.Reflection.Binder&gt;</ph> la valeur <ph id="ph5">`null`</ph>, le tableau d’objets de valeurs d’index défini sur <ph id="ph6">`null`</ph>, et le <ph id="ph7">&lt;xref:System.Globalization.CultureInfo&gt;</ph> la valeur <ph id="ph8">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object)">
          <source>The following example defines a <ph id="ph1">`Planet`</ph> class that has two properties: <ph id="ph2">`Name`</ph>, the name of the planet; and <ph id="ph3">`Distance`</ph>, the planet's distance from Earth.</source>
          <target state="translated">L’exemple suivant définit un <ph id="ph1">`Planet`</ph> classe qui a deux propriétés : <ph id="ph2">`Name`</ph>, le nom de la planète ; et <ph id="ph3">`Distance`</ph>, la distance de la planète à partir de la terre.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object)">
          <source>The example instantiates a <ph id="ph1">`Planet`</ph> object that represents the planet Jupiter and passes it to a <ph id="ph2">`GetPropertyValues`</ph> method that displays information about the properties and uses the <ph id="ph3">&lt;xref:System.Reflection.PropertyInfo.GetValue%2A&gt;</ph> method to get the value of each <ph id="ph4">`Planet`</ph> property.</source>
          <target state="translated">L’exemple instancie un <ph id="ph1">`Planet`</ph> objet qui représente la planète Jupiter et passe à un <ph id="ph2">`GetPropertyValues`</ph> méthode qui affiche des informations sur les propriétés et les utilise le <ph id="ph3">&lt;xref:System.Reflection.PropertyInfo.GetValue%2A&gt;</ph> pour obtenir la valeur de chaque méthode <ph id="ph4">`Planet`</ph> propriété.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>The object whose property value will be returned.</source>
          <target state="translated">Objet dont la valeur de propriété sera retournée.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>Optional index values for indexed properties.</source>
          <target state="translated">Valeurs d'index facultatives pour les propriétés indexées.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>The indexes of indexed properties are zero-based.</source>
          <target state="translated">Les index des propriétés indexées sont en base zéro.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>This value should be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for non-indexed properties.</source>
          <target state="translated">Cette valeur doit être <ph id="ph1">&lt;see langword="null" /&gt;</ph> pour les propriétés non indexées.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>Returns the property value of a specified object with optional index values for indexed properties.</source>
          <target state="translated">Retourne la valeur de la propriété d'un objet spécifié avec des valeurs d'index facultatives pour les propriétés indexées.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>The property value of the specified object.</source>
          <target state="translated">Valeur de la propriété de l'objet spécifié.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>To determine whether a property is indexed, use the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetIndexParameters%2A&gt;</ph> method.</source>
          <target state="translated">Pour déterminer si une propriété est indexée, utilisez le <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetIndexParameters%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>If the resulting array has 0 (zero) elements, the property is not indexed.</source>
          <target state="translated">Si le tableau résultant est 0 (zéro) élément, la propriété n’est pas indexée.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>This is a convenience method that provides an implementation for the abstract <ph id="ph1">`GetValue`</ph> method with a <ph id="ph2">`BindingFlags`</ph> parameter of <ph id="ph3">`Default`</ph>, the <ph id="ph4">`Binder`</ph> set to <ph id="ph5">`null`</ph>, and the <ph id="ph6">`CultureInfo`</ph> set to <ph id="ph7">`null`</ph>.</source>
          <target state="translated">Il s’agit d’une méthode pratique qui fournit une implémentation pour le résumé <ph id="ph1">`GetValue`</ph> méthode avec un <ph id="ph2">`BindingFlags`</ph> paramètre de <ph id="ph3">`Default`</ph>, le <ph id="ph4">`Binder`</ph> la valeur <ph id="ph5">`null`</ph>et le <ph id="ph6">`CultureInfo`</ph> la valeur <ph id="ph7">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>Because static properties belong to the type, not individual objects, get static properties by passing <ph id="ph1">`null`</ph> as the object argument.</source>
          <target state="translated">Comme les propriétés statiques appartiennent au type, et non aux objets individuels, obtenez-les en passant <ph id="ph1">`null`</ph> en tant qu’argument de l’objet.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>For example, use the following code to get the static <ph id="ph1">`CurrentCulture`</ph> property of <ph id="ph2">`CultureInfo`</ph> :</source>
          <target state="translated">Par exemple, utilisez le code suivant pour obtenir la méthode statique <ph id="ph1">`CurrentCulture`</ph> propriété du <ph id="ph2">`CultureInfo`</ph> :</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>To use the <ph id="ph1">`GetValue`</ph> method, first get the class <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">Pour utiliser le <ph id="ph1">`GetValue`</ph> méthode, commencez par obtenir la classe <ph id="ph2">`Type`</ph>.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">`PropertyInfo`</ph>.</source>
          <target state="translated">À partir de la <ph id="ph1">`Type`</ph>, obtenir le <ph id="ph2">`PropertyInfo`</ph>.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>From the <ph id="ph1">`PropertyInfo`</ph>, use the <ph id="ph2">`GetValue`</ph> method.</source>
          <target state="translated">À partir de la <ph id="ph1">`PropertyInfo`</ph>, utilisez le <ph id="ph2">`GetValue`</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this method can be used to access non-public members if the caller has been granted <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.</source>
          <target state="translated">En commençant par le <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, cette méthode peut être utilisée pour accéder aux membres non publics si l’appelant a été accordé <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> avec la <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph> indicateur et si le jeu d’autorisations des membres non publics est limité à l’appelant de l’accorder le jeu, ou un sous-ensemble son.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>(See <bpt id="p1">[</bpt>Security Considerations for Reflection<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)</source>
          <target state="translated">(Consultez <bpt id="p1">[</bpt>considérations de sécurité pour la réflexion<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>To use this functionality, your application should target the <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.</source>
          <target state="translated">Pour utiliser cette fonctionnalité, votre application doit cibler <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> ou version ultérieure.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>The following example shows how to get the value of an indexed property.</source>
          <target state="translated">L’exemple suivant montre comment obtenir la valeur d’une propriété indexée.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>The <ph id="ph1">&lt;xref:System.String.Chars%2A?displayProperty=nameWithType&gt;</ph> property is the default property (the indexer in C#) of the <ph id="ph2">&lt;xref:System.String&gt;</ph> class.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.String.Chars%2A?displayProperty=nameWithType&gt;</ph> propriété est la propriété par défaut (l’indexeur en c#) de la <ph id="ph2">&lt;xref:System.String&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>The <ph id="ph1">&lt;paramref name="index" /&gt;</ph> array does not contain the type of arguments needed.</source>
          <target state="translated">Le tableau <ph id="ph1">&lt;paramref name="index" /&gt;</ph> ne contient pas le type d’arguments requis.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>The property's <ph id="ph1">&lt;see langword="get" /&gt;</ph> accessor is not found.</source>
          <target state="translated">L’accesseur <ph id="ph1">&lt;see langword="get" /&gt;</ph> de la propriété est introuvable.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>In the <bpt id="p1">[</bpt>.NET for Windows Store apps<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the <bpt id="p2">[</bpt>Portable Class Library<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> instead.</source>
          <target state="translated">Dans <bpt id="p1">[</bpt>.NET pour les applications du Windows Store<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> ou la <bpt id="p2">[</bpt>Bibliothèque de classes portable<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, interceptez <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> à la place.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>The object does not match the target type, or a property is an instance property but <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">L’objet ne correspond pas au type cible, ou une propriété est une propriété d’instance mais <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> a la valeur <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>The number of parameters in <ph id="ph1">&lt;paramref name="index" /&gt;</ph> does not match the number of parameters the indexed property takes.</source>
          <target state="translated">Le nombre de paramètres dans <ph id="ph1">&lt;paramref name="index" /&gt;</ph> ne correspond pas au nombre de paramètres que prend la propriété indexée.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>In the <bpt id="p1">[</bpt>.NET for Windows Store apps<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the <bpt id="p2">[</bpt>Portable Class Library<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch the base class exception, <ph id="ph1">&lt;see cref="T:System.MemberAccessException" /&gt;</ph>, instead.</source>
          <target state="translated">Dans <bpt id="p1">[</bpt>.NET pour les applications du Windows Store<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> ou la <bpt id="p2">[</bpt>Bibliothèque de classes portable<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, interceptez l’exception de la classe de base, <ph id="ph1">&lt;see cref="T:System.MemberAccessException" /&gt;</ph>, à la place.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>There was an illegal attempt to access a private or protected method inside a class.</source>
          <target state="translated">Tentative non autorisée d’accéder à une méthode privée ou protégée à l’intérieur d’une classe.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>An error occurred while retrieving the property value.</source>
          <target state="translated">Une erreur s’est produite lors de la récupération de la valeur de la propriété.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>For example, an index value specified for an indexed property is out of range.</source>
          <target state="translated">Par exemple, une valeur d’index spécifiée pour une propriété indexée est hors limites.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>The <ph id="ph1">&lt;see cref="P:System.Exception.InnerException" /&gt;</ph> property indicates the reason for the error.</source>
          <target state="translated">La propriété <ph id="ph1">&lt;see cref="P:System.Exception.InnerException" /&gt;</ph> indique la raison de l’erreur.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Lorsqu’elle est appelée à liaison tardive via des mécanismes tels que <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Énumération associée : <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The object whose property value will be returned.</source>
          <target state="translated">Objet dont la valeur de propriété sera retournée.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>A bitwise combination of the following enumeration members that specify the invocation attribute: <ph id="ph1">&lt;see langword="InvokeMethod" /&gt;</ph>, <ph id="ph2">&lt;see langword="CreateInstance" /&gt;</ph>, <ph id="ph3">&lt;see langword="Static" /&gt;</ph>, <ph id="ph4">&lt;see langword="GetField" /&gt;</ph>, <ph id="ph5">&lt;see langword="SetField" /&gt;</ph>, <ph id="ph6">&lt;see langword="GetProperty" /&gt;</ph>, and <ph id="ph7">&lt;see langword="SetProperty" /&gt;</ph>.</source>
          <target state="translated">Combinaison d'opérations de bits des membres suivants de l'énumération qui spécifie l'attribut d'appel : <ph id="ph1">&lt;see langword="InvokeMethod" /&gt;</ph>, <ph id="ph2">&lt;see langword="CreateInstance" /&gt;</ph>, <ph id="ph3">&lt;see langword="Static" /&gt;</ph>, <ph id="ph4">&lt;see langword="GetField" /&gt;</ph>, <ph id="ph5">&lt;see langword="SetField" /&gt;</ph>, <ph id="ph6">&lt;see langword="GetProperty" /&gt;</ph> et <ph id="ph7">&lt;see langword="SetProperty" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>You must specify a suitable invocation attribute.</source>
          <target state="translated">Vous devez spécifier un attribut d'appel approprié.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>For example, to invoke a static member, set the <ph id="ph1">&lt;see langword="Static" /&gt;</ph> flag.</source>
          <target state="translated">Par exemple, pour appeler un membre statique, définissez l'indicateur <ph id="ph1">&lt;see langword="Static" /&gt;</ph> .</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> objects through reflection.</source>
          <target state="translated">Objet qui active la liaison, la contrainte de types d'arguments, l'appel des membres et la récupération d'objets <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> par la réflexion.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>binder<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the default binder is used.</source>
          <target state="translated">Si <bpt id="p1">&lt;c&gt;</bpt>binder<ept id="p1">&lt;/c&gt;</ept> a la valeur <ph id="ph1">&lt;see langword="null" /&gt;</ph>, le binder par défaut est utilisé.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>Optional index values for indexed properties.</source>
          <target state="translated">Valeurs d'index facultatives pour les propriétés indexées.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>This value should be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for non-indexed properties.</source>
          <target state="translated">Cette valeur doit être <ph id="ph1">&lt;see langword="null" /&gt;</ph> pour les propriétés non indexées.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The culture for which the resource is to be localized.</source>
          <target state="translated">Culture pour laquelle la ressource doit être localisée.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>If the resource is not localized for this culture, the <ph id="ph1">&lt;see cref="P:System.Globalization.CultureInfo.Parent" /&gt;</ph> property will be called successively in search of a match.</source>
          <target state="translated">Si la ressource n'est pas localisée pour cette culture, la propriété <ph id="ph1">&lt;see cref="P:System.Globalization.CultureInfo.Parent" /&gt;</ph> sera appelée pour rechercher une correspondance.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>If this value is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the culture-specific information is obtained from the <ph id="ph2">&lt;see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /&gt;</ph> property.</source>
          <target state="translated">Si cette valeur est <ph id="ph1">&lt;see langword="null" /&gt;</ph>, les informations spécifiques à la culture sont obtenues à partir de la propriété <ph id="ph2">&lt;see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>When overridden in a derived class, returns the property value of a specified object that has the specified binding, index, and culture-specific information.</source>
          <target state="translated">En cas de substitution dans une classe dérivée, retourne la valeur de propriété d’un objet spécifié qui possède la liaison, l’index et les informations propres à la culture spécifiés.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The property value of the specified object.</source>
          <target state="translated">Valeur de la propriété de l'objet spécifié.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>To determine whether a property is indexed, use the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetIndexParameters%2A&gt;</ph> method.</source>
          <target state="translated">Pour déterminer si une propriété est indexée, utilisez le <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetIndexParameters%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>If the resulting array has 0 (zero) elements, the property is not indexed.</source>
          <target state="translated">Si le tableau résultant est 0 (zéro) élément, la propriété n’est pas indexée.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>Because static properties belong to the type, not individual objects, get static properties by passing <ph id="ph1">`null`</ph> as the object argument.</source>
          <target state="translated">Comme les propriétés statiques appartiennent au type, et non aux objets individuels, obtenez-les en passant <ph id="ph1">`null`</ph> en tant qu’argument de l’objet.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>For example, use the following code to get the static <ph id="ph1">`CurrentCulture`</ph> property of <ph id="ph2">`CultureInfo`</ph> :</source>
          <target state="translated">Par exemple, utilisez le code suivant pour obtenir la méthode statique <ph id="ph1">`CurrentCulture`</ph> propriété du <ph id="ph2">`CultureInfo`</ph> :</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>To use the <ph id="ph1">`GetValue`</ph> method, first get the class <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">Pour utiliser le <ph id="ph1">`GetValue`</ph> méthode, commencez par obtenir la classe <ph id="ph2">`Type`</ph>.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">`PropertyInfo`</ph>.</source>
          <target state="translated">À partir de la <ph id="ph1">`Type`</ph>, obtenir le <ph id="ph2">`PropertyInfo`</ph>.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>From the <ph id="ph1">`PropertyInfo`</ph>, use the <ph id="ph2">`GetValue`</ph> method.</source>
          <target state="translated">À partir de la <ph id="ph1">`PropertyInfo`</ph>, utilisez le <ph id="ph2">`GetValue`</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this method can be used to access non-public members if the caller has been granted <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.</source>
          <target state="translated">En commençant par le <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, cette méthode peut être utilisée pour accéder aux membres non publics si l’appelant a été accordé <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> avec la <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph> indicateur et si le jeu d’autorisations des membres non publics est limité à l’appelant de l’accorder le jeu, ou un sous-ensemble son.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>(See <bpt id="p1">[</bpt>Security Considerations for Reflection<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)</source>
          <target state="translated">(Consultez <bpt id="p1">[</bpt>considérations de sécurité pour la réflexion<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>To use this functionality, your application should target the <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.</source>
          <target state="translated">Pour utiliser cette fonctionnalité, votre application doit cibler <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> ou version ultérieure.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The <ph id="ph1">&lt;paramref name="index" /&gt;</ph> array does not contain the type of arguments needed.</source>
          <target state="translated">Le tableau <ph id="ph1">&lt;paramref name="index" /&gt;</ph> ne contient pas le type d’arguments requis.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The property's <ph id="ph1">&lt;see langword="get" /&gt;</ph> accessor is not found.</source>
          <target state="translated">L’accesseur <ph id="ph1">&lt;see langword="get" /&gt;</ph> de la propriété est introuvable.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The object does not match the target type, or a property is an instance property but <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">L’objet ne correspond pas au type cible, ou une propriété est une propriété d’instance mais <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> a la valeur <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The number of parameters in <ph id="ph1">&lt;paramref name="index" /&gt;</ph> does not match the number of parameters the indexed property takes.</source>
          <target state="translated">Le nombre de paramètres dans <ph id="ph1">&lt;paramref name="index" /&gt;</ph> ne correspond pas au nombre de paramètres que prend la propriété indexée.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>There was an illegal attempt to access a private or protected method inside a class.</source>
          <target state="translated">Tentative non autorisée d’accéder à une méthode privée ou protégée à l’intérieur d’une classe.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>An error occurred while retrieving the property value.</source>
          <target state="translated">Une erreur s’est produite lors de la récupération de la valeur de la propriété.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>For example, an index value specified for an indexed property is out of range.</source>
          <target state="translated">Par exemple, une valeur d’index spécifiée pour une propriété indexée est hors limites.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Exception.InnerException" /&gt;</ph> property indicates the reason for the error.</source>
          <target state="translated">La propriété <ph id="ph1">&lt;see cref="P:System.Exception.InnerException" /&gt;</ph> indique la raison de l’erreur.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Lorsqu’elle est appelée à liaison tardive via des mécanismes tels que <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Énumération associée : <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" uid="P:System.Reflection.PropertyInfo.IsSpecialName">
          <source>Gets a value indicating whether the property is the special name.</source>
          <target state="translated">Obtient une valeur indiquant si la propriété correspond au nom spécial.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.IsSpecialName">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this property is the special name; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si cette propriété correspond au nom spécial ; sinon, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.IsSpecialName">
          <source>The <ph id="ph1">`SpecialName`</ph> bit is set to flag members that are treated in a special way by some compilers (such as property accessors and operator overloading methods).</source>
          <target state="translated">Le <ph id="ph1">`SpecialName`</ph> bit est défini pour signaler des membres qui sont traités de manière spécifique par certains compilateurs (par exemple, les accesseurs de propriété et les méthodes de surcharge d’opérateur).</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.IsSpecialName">
          <source>To get the <ph id="ph1">`IsSpecialName`</ph> property, first get the class <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">Pour obtenir le <ph id="ph1">`IsSpecialName`</ph> propriété, commencez par obtenir la classe <ph id="ph2">`Type`</ph>.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.IsSpecialName">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">`PropertyInfo`</ph>.</source>
          <target state="translated">À partir de la <ph id="ph1">`Type`</ph>, obtenir le <ph id="ph2">`PropertyInfo`</ph>.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.IsSpecialName">
          <source>From the <ph id="ph1">`PropertyInfo`</ph>, get the <ph id="ph2">`IsSpecialName`</ph> value.</source>
          <target state="translated">À partir de la <ph id="ph1">`PropertyInfo`</ph>, obtenir le <ph id="ph2">`IsSpecialName`</ph> valeur.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" uid="P:System.Reflection.PropertyInfo.MemberType">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Reflection.MemberTypes" /&gt;</ph> value indicating that this member is a property.</source>
          <target state="translated">Obtient une valeur <ph id="ph1">&lt;see cref="T:System.Reflection.MemberTypes" /&gt;</ph> indiquant que ce membre est une propriété.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.MemberType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MemberTypes" /&gt;</ph> value indicating that this member is a property.</source>
          <target state="translated">Valeur <ph id="ph1">&lt;see cref="T:System.Reflection.MemberTypes" /&gt;</ph> indiquant que ce membre est une propriété.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.MemberType">
          <source>This property overrides <ph id="ph1">&lt;xref:System.Reflection.MemberInfo.MemberType%2A&gt;</ph>.</source>
          <target state="translated">Cette propriété substitue <ph id="ph1">&lt;xref:System.Reflection.MemberInfo.MemberType%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.MemberType">
          <source>Therefore, when you examine a set of <ph id="ph1">&lt;xref:System.Reflection.MemberInfo&gt;</ph> objects — for example, the array returned by <ph id="ph2">&lt;xref:System.Type.GetMembers%2A&gt;</ph> — the <ph id="ph3">&lt;xref:System.Reflection.MemberInfo.MemberType%2A&gt;</ph> property returns <ph id="ph4">&lt;xref:System.Reflection.MemberTypes.Property&gt;</ph> only when a given member is a property.</source>
          <target state="translated">Par conséquent, lorsque vous examinez un ensemble de <ph id="ph1">&lt;xref:System.Reflection.MemberInfo&gt;</ph> objets — par exemple, le tableau retourné par <ph id="ph2">&lt;xref:System.Type.GetMembers%2A&gt;</ph> : le <ph id="ph3">&lt;xref:System.Reflection.MemberInfo.MemberType%2A&gt;</ph> propriété renvoie <ph id="ph4">&lt;xref:System.Reflection.MemberTypes.Property&gt;</ph> uniquement lorsqu’un membre donné est une propriété.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.MemberType">
          <source><ph id="ph1">`MemberType`</ph> is a derived class of <ph id="ph2">`MemberInfo`</ph> and specifies the type of member this is.</source>
          <target state="translated"><ph id="ph1">`MemberType`</ph> est une classe dérivée de <ph id="ph2">`MemberInfo`</ph> et spécifie le type de ce membre.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.MemberType">
          <source>Member types are constructors, properties, fields, and methods.</source>
          <target state="translated">Types de membres sont des constructeurs, propriétés, champs et méthodes.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.MemberType">
          <source>Since this is a <ph id="ph1">`PropertyInfo`</ph> property, the returned type is a property.</source>
          <target state="translated">Dans la mesure où il s’agit d’un <ph id="ph1">`PropertyInfo`</ph> , le type retourné est une propriété.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.MemberType">
          <source>To get the <ph id="ph1">`MemberType`</ph> property, first get the class <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">Pour obtenir le <ph id="ph1">`MemberType`</ph> propriété, commencez par obtenir la classe <ph id="ph2">`Type`</ph>.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.MemberType">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">`PropertyInfo`</ph>.</source>
          <target state="translated">À partir de la <ph id="ph1">`Type`</ph>, obtenir le <ph id="ph2">`PropertyInfo`</ph>.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.MemberType">
          <source>From the <ph id="ph1">`PropertyInfo`</ph>, get the <ph id="ph2">`MemberType`</ph> value.</source>
          <target state="translated">À partir de la <ph id="ph1">`PropertyInfo`</ph>, obtenir le <ph id="ph2">`MemberType`</ph> valeur.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.MemberType">
          <source>The following example displays the type of the specified member.</source>
          <target state="translated">L’exemple suivant affiche le type du membre spécifié.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.op_Equality(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)">
          <source>The first object to compare.</source>
          <target state="translated">Premier objet à comparer.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.op_Equality(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)">
          <source>The second object to compare.</source>
          <target state="translated">Deuxième objet à comparer.</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.op_Equality(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)">
          <source>Indicates whether two <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> objects are equal.</source>
          <target state="translated">Indique si deux objets <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> sont égaux.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.op_Equality(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="left" /&gt;</ph> is equal to <ph id="ph3">&lt;paramref name="right" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si <ph id="ph2">&lt;paramref name="left" /&gt;</ph> est égal à <ph id="ph3">&lt;paramref name="right" /&gt;</ph> ; sinon <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.op_Inequality(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)">
          <source>The first object to compare.</source>
          <target state="translated">Premier objet à comparer.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.op_Inequality(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)">
          <source>The second object to compare.</source>
          <target state="translated">Deuxième objet à comparer.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.op_Inequality(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)">
          <source>Indicates whether two <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> objects are not equal.</source>
          <target state="translated">Indique si deux objets <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> ne sont pas égaux.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.op_Inequality(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="left" /&gt;</ph> is not equal to <ph id="ph3">&lt;paramref name="right" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si <ph id="ph2">&lt;paramref name="left" /&gt;</ph> n'est pas égal à <ph id="ph3">&lt;paramref name="right" /&gt;</ph> ; sinon, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" uid="P:System.Reflection.PropertyInfo.PropertyType">
          <source>Gets the type of this property.</source>
          <target state="translated">Obtient le type de cette propriété.</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.PropertyType">
          <source>The type of this property.</source>
          <target state="translated">Type de cette propriété.</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.PropertyType">
          <source>To determine the type of a particular property, do the following:</source>
          <target state="translated">Pour déterminer le type d’une propriété particulière, procédez comme suit :</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.PropertyType">
          <source>Get a <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the type (the class or structure) that contains the property.</source>
          <target state="translated">Obtenir un <ph id="ph1">&lt;xref:System.Type&gt;</ph> objet qui représente le type (la classe ou structure) qui contient la propriété.</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.PropertyType">
          <source>If you are working with an object (an instance of a type), you can call its <ph id="ph1">&lt;xref:System.Object.GetType%2A&gt;</ph> method.</source>
          <target state="translated">Si vous travaillez avec un objet (il s’agit d’une instance d’un type), vous pouvez appeler son <ph id="ph1">&lt;xref:System.Object.GetType%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.PropertyType">
          <source>Otherwise, you can use the C#  operator or the Visual Basic  operator, as the example illustrates.</source>
          <target state="translated">Sinon, vous pouvez utiliser l’opérateur c# ou l’opérateur Visual Basic, comme l’exemple.</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.PropertyType">
          <source>Get a <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object that represents the property in which you're interested.</source>
          <target state="translated">Obtenir un <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> objet qui représente la propriété qui vous intéressent.</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.PropertyType">
          <source>You can do this by getting an array of all properties from the <ph id="ph1">&lt;xref:System.Type.GetProperties%2A?displayProperty=nameWithType&gt;</ph> method and then iterating the elements in the array, or you can retrieve the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object that represents the property directly by calling the <ph id="ph3">&lt;xref:System.Type.GetProperty%2A?displayProperty=nameWithType&gt;</ph> method and specifying the property name.</source>
          <target state="translated">Ce faire, vous pouvez obtention d’un tableau de toutes les propriétés de la <ph id="ph1">&lt;xref:System.Type.GetProperties%2A?displayProperty=nameWithType&gt;</ph> (méthode) et puis itérer les éléments dans le tableau, ou vous pouvez extraire le <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> objet qui représente la propriété directement en appelant le <ph id="ph3">&lt;xref:System.Type.GetProperty%2A?displayProperty=nameWithType&gt;</ph> méthode et en spécifiant le nom de propriété.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.PropertyType">
          <source>Retrieve the value of the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.PropertyType%2A&gt;</ph> property from the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object.</source>
          <target state="translated">Récupérer la valeur de la <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.PropertyType%2A&gt;</ph> propriété à partir de la <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> objet.</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.PropertyType">
          <source>The following example defines an <ph id="ph1">`Employee`</ph> class that has five properties.</source>
          <target state="translated">L’exemple suivant définit un <ph id="ph1">`Employee`</ph> classe qui a cinq propriétés.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.PropertyType">
          <source>It then uses retrieves an array of <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> objects that represent those properties and displays the name and type of each.</source>
          <target state="translated">Il utilise récupère un tableau de <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> objets qui représentent les propriétés et affiche le nom et le type de chacun.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" uid="P:System.Reflection.PropertyInfo.SetMethod">
          <source>Gets the <ph id="ph1">&lt;see langword="set" /&gt;</ph> accessor for this property.</source>
          <target state="translated">Obtient l'accesseur <ph id="ph1">&lt;see langword="set" /&gt;</ph> de cette propriété.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.SetMethod">
          <source>The <ph id="ph1">&lt;see langword="set" /&gt;</ph> accessor for this property, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if the property is read-only.</source>
          <target state="translated">Le <ph id="ph1">&lt;see langword="set" /&gt;</ph> accesseur pour cette propriété, ou <ph id="ph2">&lt;see langword="null" /&gt;</ph> si la propriété est en lecture seule.</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.SetMethod">
          <source>Retrieving the value of the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetMethod%2A&gt;</ph> property is equivalent to calling the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo.GetSetMethod%28System.Boolean%29&gt;</ph> method with a value of <ph id="ph3">`true`</ph> for the <ph id="ph4">`nonPublic`</ph> argument.</source>
          <target state="translated">La récupération de la valeur de la <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetMethod%2A&gt;</ph> propriété revient à appeler la <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo.GetSetMethod%28System.Boolean%29&gt;</ph> méthode avec une valeur de <ph id="ph3">`true`</ph> pour la <ph id="ph4">`nonPublic`</ph> argument.</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" uid="T:System.Reflection.PropertyInfo">
          <source>Sets the property value for a specified object.</source>
          <target state="translated">Définit la valeur de propriété d'un objet spécifié.</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>The object whose property value will be set.</source>
          <target state="translated">Objet dont la valeur de propriété sera définie.</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>The new property value.</source>
          <target state="translated">Nouvelle valeur de la propriété.</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>Sets the property value of a specified object.</source>
          <target state="translated">Définit la valeur de la propriété d'un objet spécifié.</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%29&gt;</ph> overload sets the value of a non-indexed property.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%29&gt;</ph> surcharge définit la valeur d’une propriété non indexées.</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>To determine whether a property is indexed, call the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetIndexParameters%2A&gt;</ph> method.</source>
          <target state="translated">Pour déterminer si une propriété est indexée, appelez le <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetIndexParameters%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>If the resulting array has 0 (zero) elements, the property is not indexed.</source>
          <target state="translated">Si le tableau résultant est 0 (zéro) élément, la propriété n’est pas indexée.</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>To set the value of an indexed property, call the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%2CSystem.Object%5B%5D%29&gt;</ph> overload.</source>
          <target state="translated">Pour définir la valeur d’une propriété indexée, appelez le <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%2CSystem.Object%5B%5D%29&gt;</ph> de surcharge.</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>If the property type of this <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object is a value type and <ph id="ph2">`value`</ph> is <ph id="ph3">`null`</ph>, the property will be set to the default value for that type.</source>
          <target state="translated">Si la propriété type de ce <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> objet est un type valeur et <ph id="ph2">`value`</ph> est <ph id="ph3">`null`</ph>, la propriété est fixée à la valeur par défaut pour ce type.</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>This is a convenience method that calls the runtime implementation of the abstract <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29&gt;</ph> method, specifying <ph id="ph2">&lt;xref:System.Reflection.BindingFlags.Default?displayProperty=nameWithType&gt;</ph> for the <ph id="ph3">`BindingFlags`</ph> parameter, <ph id="ph4">`null`</ph> for <ph id="ph5">`Binder`</ph>, <ph id="ph6">`null`</ph> for <ph id="ph7">`Object[]`</ph>, and <ph id="ph8">`null`</ph> for <ph id="ph9">`CultureInfo`</ph>.</source>
          <target state="translated">Il s’agit d’une méthode pratique qui appelle l’implémentation de l’exécution du résumé <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29&gt;</ph> (méthode), en spécifiant <ph id="ph2">&lt;xref:System.Reflection.BindingFlags.Default?displayProperty=nameWithType&gt;</ph> pour le <ph id="ph3">`BindingFlags`</ph> paramètre, <ph id="ph4">`null`</ph> pour <ph id="ph5">`Binder`</ph>, <ph id="ph6">`null`</ph> pour <ph id="ph7">`Object[]`</ph>et <ph id="ph8">`null`</ph> pour <ph id="ph9">`CultureInfo`</ph>.</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>To use the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetValue%2A&gt;</ph> method, first get a <ph id="ph2">&lt;xref:System.Type&gt;</ph> object that represents the class.</source>
          <target state="translated">Pour utiliser le <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetValue%2A&gt;</ph> méthode, commencez par obtenir un <ph id="ph2">&lt;xref:System.Type&gt;</ph> objet qui représente la classe.</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>From the <ph id="ph1">&lt;xref:System.Type&gt;</ph>, get the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object.</source>
          <target state="translated">À partir de la <ph id="ph1">&lt;xref:System.Type&gt;</ph>, obtenir le <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> objet.</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>From the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object, call the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo.SetValue%2A&gt;</ph> method.</source>
          <target state="translated">À partir de la <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> de l’objet, appelez le <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo.SetValue%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this method can be used to access non-public members if the caller has been granted <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.</source>
          <target state="translated">En commençant par le <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, cette méthode peut être utilisée pour accéder aux membres non publics si l’appelant a été accordé <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> avec la <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph> indicateur et si le jeu d’autorisations des membres non publics est limité à l’appelant de l’accorder le jeu, ou un sous-ensemble son.</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>(See <bpt id="p1">[</bpt>Security Considerations for Reflection<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)</source>
          <target state="translated">(Consultez <bpt id="p1">[</bpt>considérations de sécurité pour la réflexion<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>To use this functionality, your application should target the <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.</source>
          <target state="translated">Pour utiliser cette fonctionnalité, votre application doit cibler <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> ou version ultérieure.</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>The following example declares a class named <ph id="ph1">`Example`</ph> with one <ph id="ph2">`static`</ph> (<ph id="ph3">`Shared`</ph> in Visual Basic) and one instance property.</source>
          <target state="translated">L’exemple suivant déclare une classe nommée <ph id="ph1">`Example`</ph> avec un <ph id="ph2">`static`</ph> (<ph id="ph3">`Shared`</ph> en Visual Basic) et la propriété d’une seule instance.</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%29&gt;</ph> method to change the original property values and displays the original and final values.</source>
          <target state="translated">L’exemple utilise le <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%29&gt;</ph> valeurs de méthode pour modifier la propriété d’origine et affiche les valeurs d’origine et finales.</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>The property's <ph id="ph1">&lt;see langword="set" /&gt;</ph> accessor is not found.</source>
          <target state="translated">L’accesseur <ph id="ph1">&lt;see langword="set" /&gt;</ph> de la propriété est introuvable.</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> cannot be converted to the type of <ph id="ph2">&lt;see cref="P:System.Reflection.PropertyInfo.PropertyType" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> ne peut pas être converti en type de <ph id="ph2">&lt;see cref="P:System.Reflection.PropertyInfo.PropertyType" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>In the <bpt id="p1">[</bpt>.NET for Windows Store apps<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the <bpt id="p2">[</bpt>Portable Class Library<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> instead.</source>
          <target state="translated">Dans <bpt id="p1">[</bpt>.NET pour les applications du Windows Store<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> ou la <bpt id="p2">[</bpt>Bibliothèque de classes portable<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, interceptez <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> à la place.</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>The type of <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> does not match the target type, or a property is an instance property but <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Le type de <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> ne correspond pas au type cible, ou une propriété est une propriété d’instance alors que <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> a la valeur <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>In the <bpt id="p1">[</bpt>.NET for Windows Store apps<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the <bpt id="p2">[</bpt>Portable Class Library<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch the base class exception, <ph id="ph1">&lt;see cref="T:System.MemberAccessException" /&gt;</ph>, instead.</source>
          <target state="translated">Dans <bpt id="p1">[</bpt>.NET pour les applications du Windows Store<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> ou la <bpt id="p2">[</bpt>Bibliothèque de classes portable<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, interceptez l’exception de la classe de base, <ph id="ph1">&lt;see cref="T:System.MemberAccessException" /&gt;</ph>, à la place.</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>There was an illegal attempt to access a private or protected method inside a class.</source>
          <target state="translated">Tentative non autorisée d’accéder à une méthode privée ou protégée à l’intérieur d’une classe.</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>An error occurred while setting the property value.</source>
          <target state="translated">Une erreur s’est produite pendant la définition de la valeur de la propriété.</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Exception.InnerException" /&gt;</ph> property indicates the reason for the error.</source>
          <target state="translated">La propriété <ph id="ph1">&lt;see cref="P:System.Exception.InnerException" /&gt;</ph> indique la raison de l’erreur.</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Lorsqu’elle est appelée à liaison tardive via des mécanismes tels que <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Énumération associée : <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>The object whose property value will be set.</source>
          <target state="translated">Objet dont la valeur de propriété sera définie.</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>The new property value.</source>
          <target state="translated">Nouvelle valeur de la propriété.</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>Optional index values for indexed properties.</source>
          <target state="translated">Valeurs d'index facultatives pour les propriétés indexées.</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>This value should be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for non-indexed properties.</source>
          <target state="translated">Cette valeur doit être <ph id="ph1">&lt;see langword="null" /&gt;</ph> pour les propriétés non indexées.</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>Sets the property value of a specified object with optional index values for index properties.</source>
          <target state="translated">Définit la valeur de la propriété d'un objet spécifié avec des valeurs d'index facultatives pour les propriétés de l'index.</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>If this <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object is a value type and <ph id="ph2">`value`</ph> is <ph id="ph3">`null`</ph>, then the property will be set to the default value for that type.</source>
          <target state="translated">Si cette <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> objet est un type valeur et <ph id="ph2">`value`</ph> est <ph id="ph3">`null`</ph>, puis la propriété est fixée à la valeur par défaut pour ce type.</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>To determine whether a property is indexed, use the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetIndexParameters%2A&gt;</ph> method.</source>
          <target state="translated">Pour déterminer si une propriété est indexée, utilisez le <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetIndexParameters%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>If the resulting array has 0 (zero) elements, the property is not indexed.</source>
          <target state="translated">Si le tableau résultant est 0 (zéro) élément, la propriété n’est pas indexée.</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>This is a convenience method that calls the runtime implementation of the abstract <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29&gt;</ph> method, specifying <ph id="ph2">&lt;xref:System.Reflection.BindingFlags.Default?displayProperty=nameWithType&gt;</ph> for the <ph id="ph3">`BindingFlags`</ph> parameter, <ph id="ph4">`null`</ph> for <ph id="ph5">`Binder`</ph>, and <ph id="ph6">`null`</ph> for <ph id="ph7">`CultureInfo`</ph>.</source>
          <target state="translated">Il s’agit d’une méthode pratique qui appelle l’implémentation de l’exécution du résumé <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29&gt;</ph> (méthode), en spécifiant <ph id="ph2">&lt;xref:System.Reflection.BindingFlags.Default?displayProperty=nameWithType&gt;</ph> pour le <ph id="ph3">`BindingFlags`</ph> paramètre, <ph id="ph4">`null`</ph> pour <ph id="ph5">`Binder`</ph>, et <ph id="ph6">`null`</ph> pour <ph id="ph7">`CultureInfo`</ph>.</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>To use the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetValue%2A&gt;</ph> method, first get a <ph id="ph2">&lt;xref:System.Type&gt;</ph> object that represents the class.</source>
          <target state="translated">Pour utiliser le <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetValue%2A&gt;</ph> méthode, commencez par obtenir un <ph id="ph2">&lt;xref:System.Type&gt;</ph> objet qui représente la classe.</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>From the <ph id="ph1">&lt;xref:System.Type&gt;</ph>, get the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>.</source>
          <target state="translated">À partir de la <ph id="ph1">&lt;xref:System.Type&gt;</ph>, obtenir le <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>From the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>, use the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo.SetValue%2A&gt;</ph> method.</source>
          <target state="translated">À partir de la <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>, utilisez le <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo.SetValue%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this method can be used to access non-public members if the caller has been granted <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.</source>
          <target state="translated">En commençant par le <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, cette méthode peut être utilisée pour accéder aux membres non publics si l’appelant a été accordé <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> avec la <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph> indicateur et si le jeu d’autorisations des membres non publics est limité à l’appelant de l’accorder le jeu, ou un sous-ensemble son.</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>(See <bpt id="p1">[</bpt>Security Considerations for Reflection<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)</source>
          <target state="translated">(Consultez <bpt id="p1">[</bpt>considérations de sécurité pour la réflexion<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>To use this functionality, your application should target the <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.</source>
          <target state="translated">Pour utiliser cette fonctionnalité, votre application doit cibler <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> ou version ultérieure.</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>The following example defines a class named <ph id="ph1">`TestClass`</ph> that has a read-write property named <ph id="ph2">`Caption`</ph>.</source>
          <target state="translated">L’exemple suivant définit une classe nommée <ph id="ph1">`TestClass`</ph> qui a une propriété en lecture-écriture nommée <ph id="ph2">`Caption`</ph>.</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>It  displays the default value of the <ph id="ph1">`Caption`</ph> property, calls the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo.SetValue%2A&gt;</ph> method to change the property value, and displays the result.</source>
          <target state="translated">Il affiche la valeur par défaut de la <ph id="ph1">`Caption`</ph> propriété, appelle le <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo.SetValue%2A&gt;</ph> méthode pour modifier la valeur de propriété et affiche le résultat.</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>Note that, because the <ph id="ph1">`Caption`</ph> property is not a parameter array, the <ph id="ph2">`index`</ph> argument is <ph id="ph3">`null`</ph>.</source>
          <target state="translated">Notez que, étant donné que la <ph id="ph1">`Caption`</ph> propriété n’est pas un tableau de paramètres, le <ph id="ph2">`index`</ph> argument est <ph id="ph3">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>The following example declares a class named <ph id="ph1">`Example`</ph> with three properties: a <ph id="ph2">`static`</ph> property (<ph id="ph3">`Shared`</ph> in Visual Basic), an instance property, and an indexed instance property.</source>
          <target state="translated">L’exemple suivant déclare une classe nommée <ph id="ph1">`Example`</ph> avec trois propriétés : un <ph id="ph2">`static`</ph> propriété (<ph id="ph3">`Shared`</ph> en Visual Basic), une propriété d’instance et une propriété d’instance indexée.</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetValue%2A&gt;</ph> method to change the default values of the properties and displays the original and final values.</source>
          <target state="translated">L’exemple utilise le <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetValue%2A&gt;</ph> méthode pour modifier les valeurs par défaut des propriétés et affiche les valeurs d’origine et finales.</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>The name that is used to search for an indexed instance property with reflection is different depending on the language and on attributes applied to the property.</source>
          <target state="translated">Le nom qui est utilisé pour rechercher une propriété d’instance indexée avec réflexion est différent selon le langage et les attributs appliqués à la propriété.</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>In Visual Basic, the property name is always used to search for the property with reflection.</source>
          <target state="translated">En Visual Basic, le nom de propriété est toujours utilisé pour rechercher la propriété avec réflexion.</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>You can use the <ph id="ph1">`Default`</ph> keyword to make the property a default indexed property, in which case you can omit the name when accessing the property, as in this example.</source>
          <target state="translated">Vous pouvez utiliser la <ph id="ph1">`Default`</ph> (mot clé) à la propriété par défaut de propriété indexée, auquel cas vous pouvez omettre le nom lors de l’accès à la propriété, comme dans cet exemple.</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>You can also use the property name.</source>
          <target state="translated">Vous pouvez également utiliser le nom de propriété.</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>In C#, the indexed instance property is a default property called an indexer, and the name is never used when accessing the property in code.</source>
          <target state="translated">La propriété d’instance indexée est une propriété par défaut appelée un indexeur en c#, et le nom n’est jamais utilisé lors de l’accès à la propriété dans le code.</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>By default, the name of the property is <ph id="ph1">`Item`</ph>, and you must use that name when you search for the property with reflection.</source>
          <target state="translated">Par défaut, le nom de la propriété est <ph id="ph1">`Item`</ph>, et vous devez utiliser ce nom lorsque vous recherchez la propriété avec réflexion.</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>You can use the <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.IndexerNameAttribute&gt;</ph> attribute to give the indexer a different name.</source>
          <target state="translated">Vous pouvez utiliser la <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.IndexerNameAttribute&gt;</ph> attribut pour donner un nom différent à l’indexeur.</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>In this example, the name is <ph id="ph1">`IndexedInstanceProperty`</ph>.</source>
          <target state="translated">Dans cet exemple, le nom est <ph id="ph1">`IndexedInstanceProperty`</ph>.</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>In C++, the <ph id="ph1">`default`</ph> specifier can be used to make an indexed property a default indexed property (class indexer).</source>
          <target state="translated">En C++, le <ph id="ph1">`default`</ph> spécificateur peut être utilisé pour définir une propriété indexée par défaut (indexeur de classe) de propriété indexée.</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>In that case, the name of the property by default is <ph id="ph1">`Item`</ph>, and you must use that name when you search for the property with reflection, as in this example.</source>
          <target state="translated">Dans ce cas, le nom de la propriété par défaut est <ph id="ph1">`Item`</ph>, et vous devez utiliser ce nom lorsque vous recherchez la propriété avec la réflexion, comme dans cet exemple.</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>You can use the <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.IndexerNameAttribute&gt;</ph> attribute to give the class indexer a different name in reflection, but you cannot use that name to access the property in code.</source>
          <target state="translated">Vous pouvez utiliser la <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.IndexerNameAttribute&gt;</ph> pour donner un nom différent à l’indexeur de classe dans la réflexion d’attribut, mais vous ne pouvez pas utiliser ce nom pour accéder à la propriété dans le code.</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>An indexed property that is not a class indexer is accessed using its name, both in code and in reflection.</source>
          <target state="translated">Une propriété indexée qui n’est pas un indexeur de classe est accessible à l’aide de son nom, à la fois dans le code et dans la réflexion.</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>The <ph id="ph1">&lt;paramref name="index" /&gt;</ph> array does not contain the type of arguments needed.</source>
          <target state="translated">Le tableau <ph id="ph1">&lt;paramref name="index" /&gt;</ph> ne contient pas le type d’arguments requis.</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>The property's <ph id="ph1">&lt;see langword="set" /&gt;</ph> accessor is not found.</source>
          <target state="translated">L’accesseur <ph id="ph1">&lt;see langword="set" /&gt;</ph> de la propriété est introuvable.</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> cannot be converted to the type of <ph id="ph2">&lt;see cref="P:System.Reflection.PropertyInfo.PropertyType" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> ne peut pas être converti en type de <ph id="ph2">&lt;see cref="P:System.Reflection.PropertyInfo.PropertyType" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>In the <bpt id="p1">[</bpt>.NET for Windows Store apps<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the <bpt id="p2">[</bpt>Portable Class Library<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> instead.</source>
          <target state="translated">Dans <bpt id="p1">[</bpt>.NET pour les applications du Windows Store<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> ou la <bpt id="p2">[</bpt>Bibliothèque de classes portable<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, interceptez <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> à la place.</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>The object does not match the target type, or a property is an instance property but <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">L’objet ne correspond pas au type cible, ou une propriété est une propriété d’instance mais <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> a la valeur <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>The number of parameters in <ph id="ph1">&lt;paramref name="index" /&gt;</ph> does not match the number of parameters the indexed property takes.</source>
          <target state="translated">Le nombre de paramètres dans <ph id="ph1">&lt;paramref name="index" /&gt;</ph> ne correspond pas au nombre de paramètres que prend la propriété indexée.</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>In the <bpt id="p1">[</bpt>.NET for Windows Store apps<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the <bpt id="p2">[</bpt>Portable Class Library<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch the base class exception, <ph id="ph1">&lt;see cref="T:System.MemberAccessException" /&gt;</ph>, instead.</source>
          <target state="translated">Dans <bpt id="p1">[</bpt>.NET pour les applications du Windows Store<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> ou la <bpt id="p2">[</bpt>Bibliothèque de classes portable<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, interceptez l’exception de la classe de base, <ph id="ph1">&lt;see cref="T:System.MemberAccessException" /&gt;</ph>, à la place.</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>There was an illegal attempt to access a private or protected method inside a class.</source>
          <target state="translated">Tentative non autorisée d’accéder à une méthode privée ou protégée à l’intérieur d’une classe.</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>An error occurred while setting the property value.</source>
          <target state="translated">Une erreur s’est produite pendant la définition de la valeur de la propriété.</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>For example, an index value specified for an indexed property is out of range.</source>
          <target state="translated">Par exemple, une valeur d’index spécifiée pour une propriété indexée est hors limites.</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>The <ph id="ph1">&lt;see cref="P:System.Exception.InnerException" /&gt;</ph> property indicates the reason for the error.</source>
          <target state="translated">La propriété <ph id="ph1">&lt;see cref="P:System.Exception.InnerException" /&gt;</ph> indique la raison de l’erreur.</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Lorsqu’elle est appelée à liaison tardive via des mécanismes tels que <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Énumération associée : <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The object whose property value will be set.</source>
          <target state="translated">Objet dont la valeur de propriété sera définie.</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The new property value.</source>
          <target state="translated">Nouvelle valeur de la propriété.</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>A bitwise combination of the following enumeration members that specify the invocation attribute: <ph id="ph1">&lt;see langword="InvokeMethod" /&gt;</ph>, <ph id="ph2">&lt;see langword="CreateInstance" /&gt;</ph>, <ph id="ph3">&lt;see langword="Static" /&gt;</ph>, <ph id="ph4">&lt;see langword="GetField" /&gt;</ph>, <ph id="ph5">&lt;see langword="SetField" /&gt;</ph>, <ph id="ph6">&lt;see langword="GetProperty" /&gt;</ph>, or <ph id="ph7">&lt;see langword="SetProperty" /&gt;</ph>.</source>
          <target state="translated">Combinaison d'opérations de bits des membres suivants de l'énumération qui spécifie l'attribut d'appel : <ph id="ph1">&lt;see langword="InvokeMethod" /&gt;</ph>, <ph id="ph2">&lt;see langword="CreateInstance" /&gt;</ph>, <ph id="ph3">&lt;see langword="Static" /&gt;</ph>, <ph id="ph4">&lt;see langword="GetField" /&gt;</ph>, <ph id="ph5">&lt;see langword="SetField" /&gt;</ph>, <ph id="ph6">&lt;see langword="GetProperty" /&gt;</ph> ou <ph id="ph7">&lt;see langword="SetProperty" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>You must specify a suitable invocation attribute.</source>
          <target state="translated">Vous devez spécifier un attribut d'appel approprié.</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>For example, to invoke a static member, set the <ph id="ph1">&lt;see langword="Static" /&gt;</ph> flag.</source>
          <target state="translated">Par exemple, pour appeler un membre statique, définissez l'indicateur <ph id="ph1">&lt;see langword="Static" /&gt;</ph> .</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> objects through reflection.</source>
          <target state="translated">Objet qui active la liaison, la contrainte de types d'arguments, l'appel des membres et la récupération d'objets <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> par la réflexion.</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>binder<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the default binder is used.</source>
          <target state="translated">Si <bpt id="p1">&lt;c&gt;</bpt>binder<ept id="p1">&lt;/c&gt;</ept> a la valeur <ph id="ph1">&lt;see langword="null" /&gt;</ph>, le binder par défaut est utilisé.</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>Optional index values for indexed properties.</source>
          <target state="translated">Valeurs d'index facultatives pour les propriétés indexées.</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>This value should be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for non-indexed properties.</source>
          <target state="translated">Cette valeur doit être <ph id="ph1">&lt;see langword="null" /&gt;</ph> pour les propriétés non indexées.</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The culture for which the resource is to be localized.</source>
          <target state="translated">Culture pour laquelle la ressource doit être localisée.</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>If the resource is not localized for this culture, the <ph id="ph1">&lt;see cref="P:System.Globalization.CultureInfo.Parent" /&gt;</ph> property will be called successively in search of a match.</source>
          <target state="translated">Si la ressource n'est pas localisée pour cette culture, la propriété <ph id="ph1">&lt;see cref="P:System.Globalization.CultureInfo.Parent" /&gt;</ph> sera appelée pour rechercher une correspondance.</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>If this value is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the culture-specific information is obtained from the <ph id="ph2">&lt;see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /&gt;</ph> property.</source>
          <target state="translated">Si cette valeur est <ph id="ph1">&lt;see langword="null" /&gt;</ph>, les informations spécifiques à la culture sont obtenues à partir de la propriété <ph id="ph2">&lt;see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>When overridden in a derived class, sets the property value for a specified object that has the specified binding, index, and culture-specific information.</source>
          <target state="translated">En cas de substitution dans une classe dérivée, définit la valeur de propriété d'un objet spécifié qui possède la liaison, l'index et les informations propres à la culture spécifiés.</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>If this <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object is a value type and <ph id="ph2">`value`</ph> is <ph id="ph3">`null`</ph>, then the property will be set to the default value for that type.</source>
          <target state="translated">Si cette <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> objet est un type valeur et <ph id="ph2">`value`</ph> est <ph id="ph3">`null`</ph>, puis la propriété est fixée à la valeur par défaut pour ce type.</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>To determine whether a property is indexed, use the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetIndexParameters%2A&gt;</ph> method.</source>
          <target state="translated">Pour déterminer si une propriété est indexée, utilisez le <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetIndexParameters%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>If the resulting array has 0 (zero) elements, the property is not indexed.</source>
          <target state="translated">Si le tableau résultant est 0 (zéro) élément, la propriété n’est pas indexée.</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>Access restrictions are ignored for fully trusted code.</source>
          <target state="translated">Restrictions d’accès sont ignorées pour le code de confiance totale.</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>That is, private constructors, methods, fields, and properties can be accessed and invoked via Reflection whenever the code is fully trusted.</source>
          <target state="translated">Autrement dit, les propriétés, méthodes, champs et constructeurs privés sont accessibles et peuvent être appelées via la réflexion chaque fois que le code est entièrement fiable.</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>To use the <ph id="ph1">`SetValue`</ph> method, first get the class <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">Pour utiliser le <ph id="ph1">`SetValue`</ph> méthode, commencez par obtenir la classe <ph id="ph2">`Type`</ph>.</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">`PropertyInfo`</ph>.</source>
          <target state="translated">À partir de la <ph id="ph1">`Type`</ph>, obtenir le <ph id="ph2">`PropertyInfo`</ph>.</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>From the <ph id="ph1">`PropertyInfo`</ph>, use the <ph id="ph2">`SetValue`</ph> method.</source>
          <target state="translated">À partir de la <ph id="ph1">`PropertyInfo`</ph>, utilisez le <ph id="ph2">`SetValue`</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this method can be used to access non-public members if the caller has been granted <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.</source>
          <target state="translated">En commençant par le <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, cette méthode peut être utilisée pour accéder aux membres non publics si l’appelant a été accordé <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> avec la <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph> indicateur et si le jeu d’autorisations des membres non publics est limité à l’appelant de l’accorder le jeu, ou un sous-ensemble son.</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>(See <bpt id="p1">[</bpt>Security Considerations for Reflection<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)</source>
          <target state="translated">(Consultez <bpt id="p1">[</bpt>considérations de sécurité pour la réflexion<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>To use this functionality, your application should target the <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.</source>
          <target state="translated">Pour utiliser cette fonctionnalité, votre application doit cibler <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> ou version ultérieure.</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The <ph id="ph1">&lt;paramref name="index" /&gt;</ph> array does not contain the type of arguments needed.</source>
          <target state="translated">Le tableau <ph id="ph1">&lt;paramref name="index" /&gt;</ph> ne contient pas le type d’arguments requis.</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The property's <ph id="ph1">&lt;see langword="set" /&gt;</ph> accessor is not found.</source>
          <target state="translated">L’accesseur <ph id="ph1">&lt;see langword="set" /&gt;</ph> de la propriété est introuvable.</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> cannot be converted to the type of <ph id="ph2">&lt;see cref="P:System.Reflection.PropertyInfo.PropertyType" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> ne peut pas être converti dans le type de <ph id="ph2">&lt;see cref="P:System.Reflection.PropertyInfo.PropertyType" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The object does not match the target type, or a property is an instance property but <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">L’objet ne correspond pas au type cible, ou une propriété est une propriété d’instance mais <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> a la valeur <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The number of parameters in <ph id="ph1">&lt;paramref name="index" /&gt;</ph> does not match the number of parameters the indexed property takes.</source>
          <target state="translated">Le nombre de paramètres dans <ph id="ph1">&lt;paramref name="index" /&gt;</ph> ne correspond pas au nombre de paramètres que prend la propriété indexée.</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>There was an illegal attempt to access a private or protected method inside a class.</source>
          <target state="translated">Tentative non autorisée d’accéder à une méthode privée ou protégée à l’intérieur d’une classe.</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>An error occurred while setting the property value.</source>
          <target state="translated">Une erreur s’est produite pendant la définition de la valeur de la propriété.</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>For example, an index value specified for an indexed property is out of range.</source>
          <target state="translated">Par exemple, une valeur d’index spécifiée pour une propriété indexée est hors limites.</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Exception.InnerException" /&gt;</ph> property indicates the reason for the error.</source>
          <target state="translated">La propriété <ph id="ph1">&lt;see cref="P:System.Exception.InnerException" /&gt;</ph> indique la raison de l’erreur.</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Lorsqu’elle est appelée à liaison tardive via des mécanismes tels que <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Énumération associée : <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Reserved for future use.</source>
          <target state="translated">Réservé à un usage ultérieur.</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Must be IID_NULL.</source>
          <target state="translated">Doit être IID_NULL.</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Passed-in array of names to be mapped.</source>
          <target state="translated">Tableau passé des noms à mapper.</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Count of the names to be mapped.</source>
          <target state="translated">Compte des noms à mapper.</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>The locale context in which to interpret the names.</source>
          <target state="translated">Contexte des paramètres régionaux dans lequel interpréter les noms.</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Caller-allocated array which receives the IDs corresponding to the names.</source>
          <target state="translated">Tableau alloué par l'appelant et recevant les ID qui correspondent aux noms.</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Maps a set of names to a corresponding set of dispatch identifiers.</source>
          <target state="translated">Mappe un jeu de noms avec un jeu correspondant d'identificateurs de dispatch.</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::GetIDsOfNames`</ph>, see the MSDN Library.</source>
          <target state="translated">Pour plus d’informations sur <ph id="ph1">`IDispatch::GetIDsOfNames`</ph>, consultez MSDN Library.</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">L’accès à liaison tardive à l’aide de l’interface <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> COM n’est pas pris en charge.</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetType">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object representing the <ph id="ph2">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> type.</source>
          <target state="translated">Obtient un objet <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> qui représente le type <ph id="ph2">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object representing the <ph id="ph2">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> type.</source>
          <target state="translated">Objet <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> qui représente le type <ph id="ph2">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The type information to return.</source>
          <target state="translated">Informations de type à retourner.</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The locale identifier for the type information.</source>
          <target state="translated">Identificateur des paramètres régionaux pour les informations de type.</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Receives a pointer to the requested type information object.</source>
          <target state="translated">Reçoit un pointeur vers l'objet d'informations de type demandé.</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Retrieves the type information for an object, which can then be used to get the type information for an interface.</source>
          <target state="translated">Récupère les informations de type pour un objet, qui peuvent être utilisées ensuite pour obtenir les informations de type d'une interface.</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfo`</ph>, see the MSDN Library.</source>
          <target state="translated">Pour plus d’informations sur <ph id="ph1">`IDispatch::GetTypeInfo`</ph>, consultez MSDN Library.</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">L’accès à liaison tardive à l’aide de l’interface <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> COM n’est pas pris en charge.</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfoCount(System.UInt32@)">
          <source>Points to a location that receives the number of type information interfaces provided by the object.</source>
          <target state="translated">Pointe vers un emplacement qui reçoit le nombre d'interfaces d'informations de type fourni par l'objet.</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfoCount(System.UInt32@)">
          <source>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</source>
          <target state="translated">Récupère le nombre d'interfaces d'informations de type fourni par un objet (0 ou 1).</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfoCount(System.UInt32@)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfoCount(System.UInt32@)">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfoCount`</ph>, see the MSDN Library.</source>
          <target state="translated">Pour plus d’informations sur <ph id="ph1">`IDispatch::GetTypeInfoCount`</ph>, consultez MSDN Library.</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfoCount(System.UInt32@)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">L’accès à liaison tardive à l’aide de l’interface <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> COM n’est pas pris en charge.</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Identifies the member.</source>
          <target state="translated">Identifie le membre.</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Reserved for future use.</source>
          <target state="translated">Réservé à un usage ultérieur.</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Must be IID_NULL.</source>
          <target state="translated">Doit être IID_NULL.</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The locale context in which to interpret arguments.</source>
          <target state="translated">Contexte des paramètres régionaux dans lequel interpréter les arguments.</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Flags describing the context of the call.</source>
          <target state="translated">Indicateurs décrivant le contexte de l'appel.</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</source>
          <target state="translated">Pointeur vers une structure qui contient un tableau d’arguments, un tableau d’arguments DISPID pour les arguments nommés et le nombre d’éléments de chaque tableau.</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to the location where the result is to be stored.</source>
          <target state="translated">Pointeur vers l'emplacement où le résultat doit être stocké.</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to a structure that contains exception information.</source>
          <target state="translated">Pointeur vers une structure qui contient les informations sur les exceptions.</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The index of the first argument that has an error.</source>
          <target state="translated">Index du premier argument comportant une erreur.</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Provides access to properties and methods exposed by an object.</source>
          <target state="translated">Fournit l'accès aux propriétés et aux méthodes exposées par un objet.</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Cette méthode permet d’accéder aux classes managées à partir de code non managé et ne doit pas être appelée à partir du code managé.</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::Invoke`</ph>, see the MSDN Library.</source>
          <target state="translated">Pour plus d’informations sur <ph id="ph1">`IDispatch::Invoke`</ph>, consultez MSDN Library.</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">L’accès à liaison tardive à l’aide de l’interface <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> COM n’est pas pris en charge.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>