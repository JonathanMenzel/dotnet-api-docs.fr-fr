<Type Name="ClockController" FullName="System.Windows.Media.Animation.ClockController">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9f3e3a0d4297d65c72643c8d8d5fd64c4d366c45" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36500792" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ClockController : System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ClockController extends System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Media.Animation.ClockController" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ClockController&#xA;Inherits DispatcherObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class ClockController sealed : System::Windows::Threading::DispatcherObject" />
  <TypeSignature Language="F#" Value="type ClockController = class&#xA;    inherit DispatcherObject" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Threading.DispatcherObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Contrôle de manière interactive un <see cref="T:System.Windows.Media.Animation.Clock" /></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez un <xref:System.Windows.Media.Animation.ClockController> à interactivement commencer, suspendre, reprendre, rechercher, ignorer, arrêter et supprimer un <xref:System.Windows.Media.Animation.Clock>. Vous pouvez contrôler uniquement de manière interactive les horloges de niveau racine.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Media.Animation.Clock" />
    <altmember cref="P:System.Windows.Media.Animation.Clock.Controller" />
  </Docs>
  <Members>
    <Member MemberName="Begin">
      <MemberSignature Language="C#" Value="public void Begin ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Begin() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.ClockController.Begin" />
      <MemberSignature Language="VB.NET" Value="Public Sub Begin ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Begin();" />
      <MemberSignature Language="F#" Value="member this.Begin : unit -&gt; unit" Usage="clockController.Begin " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Définit le <see cref="P:System.Windows.Media.Animation.ClockController.Clock" /> cible à démarrer au battement suivant.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode provoque la cible <xref:System.Windows.Media.Animation.Clock> se comporte comme si son <xref:System.Windows.Media.Animation.Timeline> l’objet <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> ont été définies à l’heure du battement suivant. La chronologie de réelle <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> paramètre est ignoré (mais pas modifié).  
  
 Cette méthode modifie l’horloge cible <xref:System.Windows.Media.Animation.Clock.CurrentState%2A> à <xref:System.Windows.Media.Animation.ClockState.Active>. Le <xref:System.Windows.Media.Animation.ClockController.Begin%2A> méthode ne reprend pas une horloge suspendue.  
  
 Cette méthode n’a aucun effet sur l’arborescence de minutage jusqu'à la prochaine fois qu’un cycle est traité. Comme un effet secondaire, les événements appropriés ne sont également pas être déclenchés là. Appel de cette méthode déclenche la <xref:System.Windows.Media.Animation.Clock.CurrentStateInvalidated> et <xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated> les événements.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Animation.Timeline.BeginTime" />
        <altmember cref="M:System.Windows.Media.Animation.ClockController.SkipToFill" />
        <altmember cref="M:System.Windows.Media.Animation.ClockController.Stop" />
      </Docs>
    </Member>
    <Member MemberName="Clock">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Animation.Clock Clock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Animation.Clock Clock" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Animation.ClockController.Clock" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Clock As Clock" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Animation::Clock ^ Clock { System::Windows::Media::Animation::Clock ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Clock : System.Windows.Media.Animation.Clock" Usage="System.Windows.Media.Animation.ClockController.Clock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Animation.Clock</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le <see cref="T:System.Windows.Media.Animation.Clock" /> contrôlé par ce <see cref="T:System.Windows.Media.Animation.ClockController" />.</summary>
        <value>
          <see cref="T:System.Windows.Media.Animation.Clock" /> contrôlé par ce <see cref="T:System.Windows.Media.Animation.ClockController" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pause">
      <MemberSignature Language="C#" Value="public void Pause ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Pause() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.ClockController.Pause" />
      <MemberSignature Language="VB.NET" Value="Public Sub Pause ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Pause();" />
      <MemberSignature Language="F#" Value="member this.Pause : unit -&gt; unit" Usage="clockController.Pause " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Arrête la progression du <see cref="T:System.Windows.Media.Animation.Clock" /> cible.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez suspendre un <xref:System.Windows.Media.Animation.Clock> , quelle que soit sa situation actuelle et la suspension une horloge ne modifie pas son état actuel. Une horloge peut être suspendue pendant <xref:System.Windows.Media.Animation.ClockState.Active>, <xref:System.Windows.Media.Animation.ClockState.Stopped>, ou <xref:System.Windows.Media.Animation.ClockState.Filling>. La seule façon de reprise d’une horloge est à l’aide de la <xref:System.Windows.Media.Animation.ClockController.Resume%2A> (méthode). Suspension d’une horloge implicitement suspend ses enfants.  
  
 Lorsque l’horloge cible est déjà suspendue, l’appel de cette méthode n’a aucun effet.  
  
 Suspension d’une horloge déclenche le <xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated> événement.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Media.Animation.ClockController.Resume" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.ClockController.Remove" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove();" />
      <MemberSignature Language="F#" Value="member this.Remove : unit -&gt; unit" Usage="clockController.Remove " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Supprime le <see cref="T:System.Windows.Media.Animation.Clock" /> associé à ce <see cref="T:System.Windows.Media.Animation.ClockController" /> à partir des propriétés qu'il anime. L'horloge et ses horloges enfants n'affecteront plus ces propriétés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode déclenche la <xref:System.Windows.Media.Animation.Clock.RemoveRequested> événement.  
  
   
  
## Examples  
 L’exemple suivant montre comment supprimer et contrôler de façon interactive une horloge.  
  
 [!code-csharp[ClockController_procedural_snip#ClockControllerSeekExample](~/samples/snippets/csharp/VS_Snippets_Wpf/ClockController_procedural_snip/CSharp/SeekAlignedToLastTickExample.cs#clockcontrollerseekexample)]
 [!code-vb[ClockController_procedural_snip#ClockControllerSeekExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ClockController_procedural_snip/visualbasic/seekalignedtolasttickexample.vb#clockcontrollerseekexample)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Resume">
      <MemberSignature Language="C#" Value="public void Resume ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Resume() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.ClockController.Resume" />
      <MemberSignature Language="VB.NET" Value="Public Sub Resume ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Resume();" />
      <MemberSignature Language="F#" Value="member this.Resume : unit -&gt; unit" Usage="clockController.Resume " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Active un <see cref="T:System.Windows.Media.Animation.Clock" /> qui était déjà suspendu pour reprendre sa progression.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez suspendre ou reprendre un <xref:System.Windows.Media.Animation.Clock> , quelle que soit son état actuel et mise en pause ou la reprise d’une horloge ne modifie pas son état actuel. Une horloge peut être suspendue pendant <xref:System.Windows.Media.Animation.ClockState.Active>, <xref:System.Windows.Media.Animation.ClockState.Stopped>, ou <xref:System.Windows.Media.Animation.ClockState.Filling>. La seule façon de reprendre une horloge suspendue est à l’aide de la <xref:System.Windows.Media.Animation.ClockController.Resume%2A> (méthode). La reprise d’une horloge implicitement reprend ses enfants. Appeler cette méthode sur une horloge qui n’est pas suspendue n’a aucun effet.  
  
 La reprise d’une horloge suspendue déclenche le <xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated> événement.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Media.Animation.ClockController.Pause" />
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public void Seek (TimeSpan offset, System.Windows.Media.Animation.TimeSeekOrigin origin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Seek(valuetype System.TimeSpan offset, valuetype System.Windows.Media.Animation.TimeSeekOrigin origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.ClockController.Seek(System.TimeSpan,System.Windows.Media.Animation.TimeSeekOrigin)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Seek (offset As TimeSpan, origin As TimeSeekOrigin)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Seek(TimeSpan offset, System::Windows::Media::Animation::TimeSeekOrigin origin);" />
      <MemberSignature Language="F#" Value="member this.Seek : TimeSpan * System.Windows.Media.Animation.TimeSeekOrigin -&gt; unit" Usage="clockController.Seek (offset, origin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.TimeSpan" />
        <Parameter Name="origin" Type="System.Windows.Media.Animation.TimeSeekOrigin" />
      </Parameters>
      <Docs>
        <param name="offset">Décalage de la recherche, exprimé en heure de l’horloge cible. Ce décalage est relatif au <see cref="F:System.Windows.Media.Animation.TimeSeekOrigin.BeginTime" /> ou au <see cref="F:System.Windows.Media.Animation.TimeSeekOrigin.Duration" /> de l’horloge, selon la valeur de l’<c>origine</c>.</param>
        <param name="origin">Valeur qui indique si l'offset spécifié est relatif au <see cref="F:System.Windows.Media.Animation.TimeSeekOrigin.BeginTime" /> ou au <see cref="F:System.Windows.Media.Animation.TimeSeekOrigin.Duration" /> de l'horloge cible.</param>
        <summary>Recherche le <see cref="P:System.Windows.Media.Animation.ClockController.Clock" /> cible selon la valeur spécifiée au battement suivant. Si l’horloge cible est arrêtée, une recherche la rend à nouveau active.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Recherche d’opérations ne prennent pas la <xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A> ou <xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A> compte des paramètres de la chronologie cette horloge : l’horloge est traitée comme si son scénario a un <xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A> de 1 et aucun <xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A>.  
  
 Cette méthode modifie l’horloge <xref:System.Windows.Media.Animation.Clock.CurrentState%2A> à <xref:System.Windows.Media.Animation.ClockState.Active>. Cette méthode n’a aucun effet sur l’arborescence de minutage jusqu'à la prochaine fois qu’un cycle est traité. En effet, les événements appropriés également ne seront pas déclenchés là.  
  
 La recherche d’un déclencheur de la table de montage séquentiel le <xref:System.Windows.Media.Animation.Clock.CurrentGlobalSpeedInvalidated> et <xref:System.Windows.Media.Animation.Clock.CurrentStateInvalidated> les événements.  
  
 Si l’horloge cible a des enfants, leur heure actuelle est mise à jour en conséquence.  
  
   
  
## Examples  
 L’exemple suivant montre comment rechercher à l’aide un <xref:System.Windows.Media.Animation.ClockController>.  
  
 [!code-csharp[ClockController_procedural_snip#ClockControllerSeekExample](~/samples/snippets/csharp/VS_Snippets_Wpf/ClockController_procedural_snip/CSharp/SeekAlignedToLastTickExample.cs#clockcontrollerseekexample)]
 [!code-vb[ClockController_procedural_snip#ClockControllerSeekExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ClockController_procedural_snip/visualbasic/seekalignedtolasttickexample.vb#clockcontrollerseekexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Media.Animation.TimeSeekOrigin" />
        <altmember cref="M:System.Windows.Media.Animation.ClockController.SeekAlignedToLastTick(System.TimeSpan,System.Windows.Media.Animation.TimeSeekOrigin)" />
      </Docs>
    </Member>
    <Member MemberName="SeekAlignedToLastTick">
      <MemberSignature Language="C#" Value="public void SeekAlignedToLastTick (TimeSpan offset, System.Windows.Media.Animation.TimeSeekOrigin origin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SeekAlignedToLastTick(valuetype System.TimeSpan offset, valuetype System.Windows.Media.Animation.TimeSeekOrigin origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.ClockController.SeekAlignedToLastTick(System.TimeSpan,System.Windows.Media.Animation.TimeSeekOrigin)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SeekAlignedToLastTick (offset As TimeSpan, origin As TimeSeekOrigin)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SeekAlignedToLastTick(TimeSpan offset, System::Windows::Media::Animation::TimeSeekOrigin origin);" />
      <MemberSignature Language="F#" Value="member this.SeekAlignedToLastTick : TimeSpan * System.Windows.Media.Animation.TimeSeekOrigin -&gt; unit" Usage="clockController.SeekAlignedToLastTick (offset, origin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.TimeSpan" />
        <Parameter Name="origin" Type="System.Windows.Media.Animation.TimeSeekOrigin" />
      </Parameters>
      <Docs>
        <param name="offset">Décalage de la recherche, exprimé en heure de l’horloge cible. Ce décalage est relatif au <see cref="F:System.Windows.Media.Animation.TimeSeekOrigin.BeginTime" /> ou au <see cref="F:System.Windows.Media.Animation.TimeSeekOrigin.Duration" /> de l’horloge, selon la valeur de l’<c>origine</c>.</param>
        <param name="origin">Valeur qui indique si l'offset spécifié est relatif au <see cref="F:System.Windows.Media.Animation.TimeSeekOrigin.BeginTime" /> ou au <see cref="F:System.Windows.Media.Animation.TimeSeekOrigin.Duration" /> de l'horloge cible.</param>
        <summary>Recherche immédiatement le <see cref="T:System.Windows.Media.Animation.Clock" /> cible selon la valeur spécifiée. Si l’horloge cible est arrêtée, une recherche la rend à nouveau active.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Recherche d’opérations ne prennent pas la <xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A> ou <xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A> compte des paramètres de la chronologie cette horloge : l’horloge est traitée comme si son scénario a un <xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A> de 1 et aucun <xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A>.  
  
 <xref:System.Windows.Media.Animation.ClockController.SeekAlignedToLastTick%2A> Aligne la durée recherchée de l’horloge avec le dernier battement d’horloge. Les valeurs sont immédiatement mis à jour pour refléter les modifications dues à <xref:System.Windows.Media.Animation.ClockController.SeekAlignedToLastTick%2A>, même si l’écran ne reflétera pas ces modifications jusqu'à ce que les mises à jour de l’écran.  
  
 Si l’horloge cible a des enfants, leur heure actuelle est mise à jour en conséquence.  
  
 Cette méthode modifie l’horloge <xref:System.Windows.Media.Animation.Clock.CurrentState%2A> à <xref:System.Windows.Media.Animation.ClockState.Active>.  
  
 La recherche d’un déclencheur de la table de montage séquentiel le <xref:System.Windows.Media.Animation.Clock.CurrentGlobalSpeedInvalidated> et <xref:System.Windows.Media.Animation.Clock.CurrentStateInvalidated> les événements.  
  
   
  
## Examples  
 L’exemple suivant montre les deux le <xref:System.Windows.Media.Animation.ClockController.Seek%2A> et <xref:System.Windows.Media.Animation.ClockController.SeekAlignedToLastTick%2A> méthodes d’un <xref:System.Windows.Media.Animation.ClockController>.  
  
 [!code-csharp[ClockController_procedural_snip#ClockControllerSeekExample](~/samples/snippets/csharp/VS_Snippets_Wpf/ClockController_procedural_snip/CSharp/SeekAlignedToLastTickExample.cs#clockcontrollerseekexample)]
 [!code-vb[ClockController_procedural_snip#ClockControllerSeekExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ClockController_procedural_snip/visualbasic/seekalignedtolasttickexample.vb#clockcontrollerseekexample)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SkipToFill">
      <MemberSignature Language="C#" Value="public void SkipToFill ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SkipToFill() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.ClockController.SkipToFill" />
      <MemberSignature Language="VB.NET" Value="Public Sub SkipToFill ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SkipToFill();" />
      <MemberSignature Language="F#" Value="member this.SkipToFill : unit -&gt; unit" Usage="clockController.SkipToFill " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Avance l'heure actuelle du <see cref="T:System.Windows.Media.Animation.Clock" /> cible jusqu'à la fin de sa période active.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode avance l’horloge cible l’heure actuelle à la fin de sa période active ; comportement de l’horloge est à ce stade spécifié par le <xref:System.Windows.Media.Animation.Timeline.FillBehavior%2A> définition de sa <xref:System.Windows.Media.Animation.Timeline>. Si la chronologie <xref:System.Windows.Media.Animation.Timeline.FillBehavior%2A> est définie sur <xref:System.Windows.Media.Animation.FillBehavior.HoldEnd>, l’horloge remplit ; si la propriété est définie <xref:System.Windows.Media.Animation.FillBehavior.Stop>, l’horloge arrête.  
  
 Cette méthode n’a d’effet que si l’horloge cible <xref:System.Windows.Media.Animation.Clock.CurrentState%2A> est <xref:System.Windows.Media.Animation.ClockState.Active>.  
  
 Cette méthode n’a aucun effet sur l’arborescence de minutage jusqu'à la prochaine fois qu’un cycle est traité. En effet, les événements appropriés également ne seront pas déclenchés là.  
  
 Avancer d’un plan conceptuel à son remplissage déclencheurs périodes le <xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated> et <xref:System.Windows.Media.Animation.Clock.CurrentStateInvalidated> les événements.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpeedRatio">
      <MemberSignature Language="C#" Value="public double SpeedRatio { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 SpeedRatio" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Animation.ClockController.SpeedRatio" />
      <MemberSignature Language="VB.NET" Value="Public Property SpeedRatio As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double SpeedRatio { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.SpeedRatio : double with get, set" Usage="System.Windows.Media.Animation.ClockController.SpeedRatio" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la vitesse interactive du <see cref="T:System.Windows.Media.Animation.Clock" /> cible.</summary>
        <value>Valeur finie supérieure à zéro qui décrit la vitesse interactive de l’horloge cible. Cette valeur est multipliée par la valeur du <see cref="P:System.Windows.Media.Animation.Timeline.SpeedRatio" /> du <see cref="T:System.Windows.Media.Animation.Timeline" /> de l'horloge. Par exemple, si le <see cref="P:System.Windows.Media.Animation.Timeline.SpeedRatio" /> de la chronologie est 0,5 et le <see cref="T:System.Windows.Media.Animation.ClockController" /> de l'objet <see cref="P:System.Windows.Media.Animation.ClockController.SpeedRatio" /> est 3,0, la chronologie se déplace alors à une vitesse normale de 1,5 (0,5 * 3,0). La valeur par défaut est 1,0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Définition de cette propriété n’a aucun effet jusqu’au battement suivant. Si vous définissez cette propriété et que vous obtenez sa valeur avant le battement suivant, vous obtiendrez l’ancienne valeur. Cette propriété retourne la nouvelle valeur au battement suivant.  
  
 Définition de cette propriété ne modifie pas la valeur de la chronologie sous-jacente <xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A>.  
  
 Définition de cette propriété déclenche l’horloge cible <xref:System.Windows.Media.Animation.Clock.CurrentGlobalSpeedInvalidated> événement.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Animation.Timeline.SpeedRatio" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.ClockController.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="clockController.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Arrête le <see cref="T:System.Windows.Media.Animation.Clock" /> cible.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode modifie l’horloge cible <xref:System.Windows.Media.Animation.Clock.CurrentState%2A> à <xref:System.Windows.Media.Animation.Clock.Stopped%2A>.  
  
 A <xref:System.Windows.Media.Animation.Clock.Stopped%2A> horloge peut être redémarré à l’aide de la <xref:System.Windows.Media.Animation.ClockController.Begin%2A>, <xref:System.Windows.Media.Animation.ClockController.Seek%2A>, ou <xref:System.Windows.Media.Animation.ClockController.SeekAlignedToLastTick%2A> (méthode).  
  
 Cette méthode n’a aucun effet sur l’arborescence de minutage jusqu'à la prochaine fois qu’un cycle est traité. En effet, les événements appropriés également ne seront pas déclenchés là.  
  
 L’arrêt d’une horloge déclenche le <xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated> et <xref:System.Windows.Media.Animation.Clock.CurrentStateInvalidated> événements, mais pas les <xref:System.Windows.Media.Animation.Clock.Completed> événement.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>