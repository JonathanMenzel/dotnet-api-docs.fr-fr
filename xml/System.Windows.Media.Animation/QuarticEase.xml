<Type Name="QuarticEase" FullName="System.Windows.Media.Animation.QuarticEase">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ac78fa02a49503f26b74ec8d2324ab3becfdaf7f" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30657263" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class QuarticEase : System.Windows.Media.Animation.EasingFunctionBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit QuarticEase extends System.Windows.Media.Animation.EasingFunctionBase" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Media.Animation.QuarticEase" />
  <TypeSignature Language="VB.NET" Value="Public Class QuarticEase&#xA;Inherits EasingFunctionBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class QuarticEase : System::Windows::Media::Animation::EasingFunctionBase" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Media.Animation.EasingFunctionBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Représente une fonction d’accélération qui crée une animation qui accélère et/ou ralentit en utilisant la formule *f*(*t*) = *t*<sup>4</sup>.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez contrôler si l’animation accélère, ralentit, ou les deux en spécifiant le <xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A>. Le graphique suivant montre les différentes valeurs de <xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A>, où *f*(*t*) représente la progression de l’animation et *t* représente l’heure.  
  
 ![QuarticEase avec graphiques de différents easingmodes. ] (~/add/media/quarticease-graph.png "QuarticEase avec graphiques de différents easingmodes.")  
  
 La formule utilisée pour cette fonction est la suivante.  
  
 *f*(*t*) = *t*<sup>4</sup>  
  
> [!NOTE]
>  Vous pouvez utiliser <xref:System.Windows.Media.Animation.PowerEase> pour créer le même comportement que <xref:System.Windows.Media.Animation.CubicEase>, <xref:System.Windows.Media.Animation.QuadraticEase>, <xref:System.Windows.Media.Animation.QuarticEase>, et <xref:System.Windows.Media.Animation.QuinticEase> à l’aide de la <xref:System.Windows.Media.Animation.PowerEase.Power%2A> propriété. Par exemple, si vous souhaitez utiliser <xref:System.Windows.Media.Animation.PowerEase> pour remplacer les <xref:System.Windows.Media.Animation.CubicEase>, spécifiez un <xref:System.Windows.Media.Animation.PowerEase.Power%2A> la valeur 3.  
  
 Il existe plusieurs autres fonctions d’accélération outre <xref:System.Windows.Media.Animation.QuarticEase> que vous pouvez Explorer à l’aide de l’exemple suivant de Silverlight.  
  
 [Exécuter cet exemple](http://go.microsoft.com/fwlink/?LinkId=139798&sref=easing_functions_gallery)  
  
 Outre l’utilisation des fonctions d’accélération présentes dans la durée d’exécution, vous pouvez créer vos propres fonctions d’accélération personnalisées en héritant de <xref:System.Windows.Media.Animation.EasingFunctionBase>.  
  
<a name="xamlObjectElementUsage_QuarticEase"></a>   
## <a name="xaml-object-element-usage"></a>Utilisation d'éléments objet XAML  
  
```  
<QuarticEase .../>  
```  
  
   
  
## Examples  
 L’exemple suivant applique un <xref:System.Windows.Media.Animation.QuarticEase> accélération de fonction à un <xref:System.Windows.Media.Animation.DoubleAnimation> pour créer une animation qui décélère.  
  
 [!code-xaml[QuarticEase#QuarticEase](~/samples/snippets/csharp/VS_Snippets_Wpf/quarticease/CS/window1.xaml#quarticease)]   
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Media.Animation.PowerEase" />
    <altmember cref="T:System.Windows.Media.Animation.BackEase" />
    <altmember cref="T:System.Windows.Media.Animation.BounceEase" />
    <altmember cref="T:System.Windows.Media.Animation.CircleEase" />
    <altmember cref="T:System.Windows.Media.Animation.CubicEase" />
    <altmember cref="T:System.Windows.Media.Animation.ElasticEase" />
    <altmember cref="T:System.Windows.Media.Animation.ExponentialEase" />
    <altmember cref="T:System.Windows.Media.Animation.QuadraticEase" />
    <altmember cref="T:System.Windows.Media.Animation.QuinticEase" />
    <altmember cref="T:System.Windows.Media.Animation.SineEase" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public QuarticEase ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.QuarticEase.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; QuarticEase();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Media.Animation.QuarticEase" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceCore">
      <MemberSignature Language="C#" Value="protected override System.Windows.Freezable CreateInstanceCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Freezable CreateInstanceCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.QuarticEase.CreateInstanceCore" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateInstanceCore () As Freezable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Freezable ^ CreateInstanceCore();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Freezable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crée une nouvelle instance de la classe dérivée de <see cref="T:System.Windows.Freezable" />. Quand vous créez une classe dérivée, vous devez substituer cette méthode.</summary>
        <returns>Nouvelle instance.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Classes d’animation héritent indirectement <xref:System.Windows.Freezable>. Pour cette raison, vous devez substituer la <xref:System.Windows.Media.Animation.BackEase.CreateInstanceCore%2A> méthode pour construire un objet d’animation personnalisée.  
  
   
  
## Examples  
 L’exemple suivant montre une implémentation classique des <xref:System.Windows.Freezable.CreateInstanceCore%2A>.  
  
 [!code-csharp[freezablesample_procedural#CreateInstanceCoreExample](~/samples/snippets/csharp/VS_Snippets_Wpf/freezablesample_procedural/CSharp/freezablesample.cs#createinstancecoreexample)]
 [!code-vb[freezablesample_procedural#CreateInstanceCoreExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/freezablesample_procedural/visualbasic/freezablesample.vb#createinstancecoreexample)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EaseInCore">
      <MemberSignature Language="C#" Value="protected override double EaseInCore (double normalizedTime);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance float64 EaseInCore(float64 normalizedTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.QuarticEase.EaseInCore(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function EaseInCore (normalizedTime As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override double EaseInCore(double normalizedTime);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="normalizedTime" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="normalizedTime">Durée normalisée (progression) de l’animation.</param>
        <summary>Fournit la partie logique de la fonction d’accélération que vous pouvez remplacer pour produire le mode <see cref="F:System.Windows.Media.Animation.EasingMode.EaseIn" /> de la fonction d’accélération personnalisée.</summary>
        <returns>Double qui représente la progression transformée.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode transforme l’heure normalisée pour contrôler la vitesse d’une animation pour le <xref:System.Windows.Media.Animation.EasingMode.EaseIn> cas de <xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A>.  
  
 Vous ne devez spécifier votre fonction d’accélération pour le <xref:System.Windows.Media.Animation.EasingMode.EaseIn> cas, car l’implémentation de la <xref:System.Windows.Media.Animation.EasingFunctionBase.Ease%2A> méthode transformations `normalizedTime` pour le <xref:System.Windows.Media.Animation.EasingMode.EaseOut> et <xref:System.Windows.Media.Animation.EasingMode.EaseInOut> cas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>