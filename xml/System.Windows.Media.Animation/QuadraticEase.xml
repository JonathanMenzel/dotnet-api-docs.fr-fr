<Type Name="QuadraticEase" FullName="System.Windows.Media.Animation.QuadraticEase">
  <Metadata><Meta Name="ms.openlocfilehash" Value="71f85409cc60c00b8ce3e24917902b4b869c9e00" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="08/25/2018" /><Meta Name="ms.locfileid" Value="39763524" /></Metadata><TypeSignature Language="C#" Value="public class QuadraticEase : System.Windows.Media.Animation.EasingFunctionBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit QuadraticEase extends System.Windows.Media.Animation.EasingFunctionBase" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Media.Animation.QuadraticEase" />
  <TypeSignature Language="VB.NET" Value="Public Class QuadraticEase&#xA;Inherits EasingFunctionBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class QuadraticEase : System::Windows::Media::Animation::EasingFunctionBase" />
  <TypeSignature Language="F#" Value="type QuadraticEase = class&#xA;    inherit EasingFunctionBase" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Media.Animation.EasingFunctionBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Représente une fonction d'accélération qui crée une animation qui accélère et/ou ralentit en utilisant la formule *f*(*t*) = *t*<sup>2</sup></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez contrôler si l’animation accélère, décélère, ou les deux en spécifiant le <xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A>. Le graphique suivant montre les différentes valeurs de <xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A>, où *f*(*t*) représente la progression de l’animation et *t* représente l’heure.  
  
 ![QuadraticEase avec graphiques de différents easingmodes](~/add/media/quadraticease-graph.png "QuadraticEase avec graphiques de différents easingmodes")  
  
 La formule utilisée pour cette fonction est la suivante.  
  
 *f*(*t*) = *t*<sup>2</sup>  
  
> [!NOTE]
>  Vous pouvez utiliser <xref:System.Windows.Media.Animation.PowerEase> pour créer le même comportement que <xref:System.Windows.Media.Animation.CubicEase>, <xref:System.Windows.Media.Animation.QuadraticEase>, <xref:System.Windows.Media.Animation.QuarticEase>, et <xref:System.Windows.Media.Animation.QuinticEase> à l’aide de la <xref:System.Windows.Media.Animation.PowerEase.Power%2A> propriété. Par exemple, si vous souhaitez utiliser <xref:System.Windows.Media.Animation.PowerEase> pour remplacer les <xref:System.Windows.Media.Animation.CubicEase>, spécifiez un <xref:System.Windows.Media.Animation.PowerEase.Power%2A> valeur 3.  
  
 Il existe plusieurs autres fonctions d’accélération en plus de <xref:System.Windows.Media.Animation.QuadraticEase>.
Outre l’utilisation des fonctions d’accélération incluses dans le temps d’exécution, vous pouvez créer vos propres fonctions d’accélération personnalisées en héritant de <xref:System.Windows.Media.Animation.EasingFunctionBase>.  
  
## <a name="xaml-object-element-usage"></a>Utilisation d'éléments objet XAML  
  
```xaml
<QuadraticEase .../>  
```  
  
   
  
## Examples  
 L’exemple suivant applique un <xref:System.Windows.Media.Animation.QuadraticEase> fonction d’accélération un <xref:System.Windows.Media.Animation.DoubleAnimation> pour créer une animation qui décélère.  
  
 [!code-xaml[QuadraticEase#QuadraticEase](~/samples/snippets/csharp/VS_Snippets_Wpf/quadraticease/CS/window1.xaml#quadraticease)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public QuadraticEase ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.QuadraticEase.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; QuadraticEase();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Media.Animation.QuadraticEase" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceCore">
      <MemberSignature Language="C#" Value="protected override System.Windows.Freezable CreateInstanceCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Freezable CreateInstanceCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.QuadraticEase.CreateInstanceCore" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateInstanceCore () As Freezable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Freezable ^ CreateInstanceCore();" />
      <MemberSignature Language="F#" Value="abstract member CreateInstanceCore : unit -&gt; System.Windows.Freezable&#xA;override this.CreateInstanceCore : unit -&gt; System.Windows.Freezable" Usage="quadraticEase.CreateInstanceCore " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Freezable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crée une nouvelle instance de la classe dérivée de <see cref="T:System.Windows.Freezable" />. Quand vous créez une classe dérivée, vous devez substituer cette méthode.</summary>
        <returns>Nouvelle instance.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Classes d’animation héritent indirectement <xref:System.Windows.Freezable>. Pour cette raison, vous devez remplacer le <xref:System.Windows.Media.Animation.BackEase.CreateInstanceCore%2A> méthode pour construire un objet d’animation personnalisée.  
  
   
  
## Examples  
 L’exemple suivant montre une implémentation classique de <xref:System.Windows.Freezable.CreateInstanceCore%2A>.  
  
 [!code-csharp[freezablesample_procedural#CreateInstanceCoreExample](~/samples/snippets/csharp/VS_Snippets_Wpf/freezablesample_procedural/CSharp/freezablesample.cs#createinstancecoreexample)]
 [!code-vb[freezablesample_procedural#CreateInstanceCoreExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/freezablesample_procedural/visualbasic/freezablesample.vb#createinstancecoreexample)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EaseInCore">
      <MemberSignature Language="C#" Value="protected override double EaseInCore (double normalizedTime);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance float64 EaseInCore(float64 normalizedTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.QuadraticEase.EaseInCore(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function EaseInCore (normalizedTime As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override double EaseInCore(double normalizedTime);" />
      <MemberSignature Language="F#" Value="override this.EaseInCore : double -&gt; double" Usage="quadraticEase.EaseInCore normalizedTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="normalizedTime" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="normalizedTime">Durée normalisée (progression) de l’animation.</param>
        <summary>Fournit la partie logique de la fonction d’accélération que vous pouvez remplacer pour produire le mode <see cref="F:System.Windows.Media.Animation.EasingMode.EaseIn" /> de la fonction d’accélération personnalisée.</summary>
        <returns>Double qui représente la progression transformée.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode transforme l’heure normalisée pour contrôler la vitesse d’une animation pour la <xref:System.Windows.Media.Animation.EasingMode.EaseIn> cas de <xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A>.  
  
 Vous ne devez spécifier votre fonction d’accélération pour le <xref:System.Windows.Media.Animation.EasingMode.EaseIn> cas étant donné que l’implémentation de la <xref:System.Windows.Media.Animation.EasingFunctionBase.Ease%2A> méthode transformations `normalizedTime` pour le <xref:System.Windows.Media.Animation.EasingMode.EaseOut> et <xref:System.Windows.Media.Animation.EasingMode.EaseInOut> cas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>