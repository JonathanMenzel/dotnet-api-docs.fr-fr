<Type Name="IEasingFunction" FullName="System.Windows.Media.Animation.IEasingFunction">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9b75dd4240b2e8b325a65d21fd2208b67e65840f" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36498926" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IEasingFunction" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEasingFunction" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Media.Animation.IEasingFunction" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEasingFunction" />
  <TypeSignature Language="C++ CLI" Value="public interface class IEasingFunction" />
  <TypeSignature Language="F#" Value="type IEasingFunction = interface" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Définit la fonctionnalité de base d'une fonction d'accélération.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette interface vous permet de créer vos propres fonctions d’accélération en prenant normalisé heure (il s’agit d’une valeur comprise entre 0 et 1) et en retournant la valeur souhaitée.  
  
 Cette interface représente une transformation d’heure normalisée (progression). Animations l’utilisent pour transformer leur progression. Les classes qui implémentent cette interface peuvent contrôler le rythme auquel une animation est effectuée.  
  
 Dériver à partir de la <xref:System.Windows.Media.Animation.EasingFunctionBase> fonctions de classe pour implémenter votre propre accélération personnalisée.  
  
> [!NOTE]
>  L’implémentation WPF de fonctions d’accélération est compatible avec l’implémentation Silverlight. Si vous avez le code XAML qui utilise des fonctions d’accélération dans une seule technologie, il est utilisable sans modification dans l’autre.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Media.Animation.EasingFunctionBase" />
    <altmember cref="T:System.Windows.Media.Animation.PowerEase" />
    <altmember cref="T:System.Windows.Media.Animation.BackEase" />
    <altmember cref="T:System.Windows.Media.Animation.BounceEase" />
    <altmember cref="T:System.Windows.Media.Animation.CircleEase" />
    <altmember cref="T:System.Windows.Media.Animation.CubicEase" />
    <altmember cref="T:System.Windows.Media.Animation.ElasticEase" />
    <altmember cref="T:System.Windows.Media.Animation.ExponentialEase" />
    <altmember cref="T:System.Windows.Media.Animation.QuadraticEase" />
    <altmember cref="T:System.Windows.Media.Animation.QuarticEase" />
    <altmember cref="T:System.Windows.Media.Animation.QuinticEase" />
  </Docs>
  <Members>
    <Member MemberName="Ease">
      <MemberSignature Language="C#" Value="public double Ease (double normalizedTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ease(float64 normalizedTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.IEasingFunction.Ease(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ease (normalizedTime As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Ease(double normalizedTime);" />
      <MemberSignature Language="F#" Value="abstract member Ease : double -&gt; double" Usage="iEasingFunction.Ease normalizedTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="normalizedTime" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="normalizedTime">Durée normalisée (progression) de l’animation.</param>
        <summary>Transforme le temps normalisé pour contrôler la vitesse d'une animation.</summary>
        <returns>Progression transformée.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Media.Animation.EasingFunctionBase" />
        <altmember cref="T:System.Windows.Media.Animation.PowerEase" />
        <altmember cref="T:System.Windows.Media.Animation.BackEase" />
        <altmember cref="T:System.Windows.Media.Animation.BounceEase" />
        <altmember cref="T:System.Windows.Media.Animation.CircleEase" />
        <altmember cref="T:System.Windows.Media.Animation.CubicEase" />
        <altmember cref="T:System.Windows.Media.Animation.ElasticEase" />
        <altmember cref="T:System.Windows.Media.Animation.ExponentialEase" />
        <altmember cref="T:System.Windows.Media.Animation.QuadraticEase" />
        <altmember cref="T:System.Windows.Media.Animation.QuarticEase" />
        <altmember cref="T:System.Windows.Media.Animation.QuinticEase" />
      </Docs>
    </Member>
  </Members>
</Type>