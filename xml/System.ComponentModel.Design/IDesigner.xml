<Type Name="IDesigner" FullName="System.ComponentModel.Design.IDesigner">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6c1eb61fa7b91e86c117f45ee3d4c4ad7c804d72" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36706296" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IDesigner : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDesigner implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Design.IDesigner" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDesigner&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDesigner : IDisposable" />
  <TypeSignature Language="F#" Value="type IDesigner = interface&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Fournit l'infrastructure de base pour la génération d'un concepteur personnalisé.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.ComponentModel.Design.IDesigner> fournit une interface par le biais duquel vous pouvez implémenter des services de base d’un concepteur. Un concepteur peut modifier le comportement d’un composant au moment du design et peut fournir ses propres services et le comportement. Un concepteur n’est actif au moment du design et doit être associé à un type de composant à l’aide un <xref:System.ComponentModel.DesignerAttribute> pour pouvoir être chargé lorsqu’un composant du type associé est créé au moment du design.  
  
 Le <xref:System.ComponentModel.Design.IDesigner> interface fournit les méthodes et propriétés que vous pouvez implémenter afin de fournir un comportement personnalisé au moment du design.  
  
 Implémentez la <xref:System.ComponentModel.Design.IDesigner.Initialize%2A> méthode d’un concepteur pour effectuer des actions lorsqu’un composant est créé. Cela peut être utile si un composant doit avoir une configuration spécifique au moment du design, ou si sa configuration doit changer en fonction de conditions que le concepteur peut déterminer.  
  
 Un concepteur peut fournir des commandes de menu dans le menu contextuel qui s’affiche lorsqu’un utilisateur clique sur un composant ou un contrôle dans l’environnement au moment du design. Vous pouvez implémenter la <xref:System.ComponentModel.Design.IDesigner.Verbs%2A> propriété pour définir un accesseur get qui retourne un <xref:System.ComponentModel.Design.DesignerVerbCollection> contenant le <xref:System.ComponentModel.Design.DesignerVerb> objets pour générer des commandes de menu.  
  
 Un concepteur pour un composant qui s’affiche dans la barre d’état du composant peut exécuter une action par défaut lorsque l’utilisateur double-clique sur le composant. Implémentez la <xref:System.ComponentModel.Design.IDesigner.DoDefaultAction%2A> méthode pour spécifier le comportement à effectuer lorsque l’utilisateur double-clique sur le composant.  
  
 Un concepteur peut utiliser également les services disponibles au moment du design pour effectuer diverses tâches, notamment la surveillance de l’environnement au moment du design pour les composants et leurs propriétés, en lecture et en définissant les valeurs des propriétés des composants, la gestion de la boîte à outils, la gestion des composants sélectionnés, ou l’affichage d’une interface utilisateur qui peut être utilisée pour configurer les valeurs ou appliquer un traitement supplémentaire.  
  
 Pour implémenter un concepteur pour un contrôle qui peut être placé sur un formulaire, vous pouvez hériter de la <xref:System.Windows.Forms.Design.ControlDesigner> classe. Les contrôles dont le concepteur associé ne dérive pas de <xref:System.Windows.Forms.Design.ControlDesigner> sont affichés dans la barre d’état du composant. Le <xref:System.ComponentModel.Design.ComponentDesigner> et <xref:System.Windows.Forms.Design.ControlDesigner> classes implémentent la <xref:System.ComponentModel.Design.IDesigner> de l’interface et fournissent une prise en charge supplémentaire au moment du design qui peut s’avérer utile pour les auteurs de concepteurs. Pour plus d’informations, consultez la documentation de référence pour ces classes.  
  
 Pour une vue d’ensemble de la création de composants de conception, consultez [étendre la prise en charge au moment du Design](http://msdn.microsoft.com/library/d6ac8a6a-42fd-4bc8-bf33-b212811297e2).  
  
   
  
## Examples  
 Cet exemple montre un <xref:System.ComponentModel.Design.IDesigner> implémentation qui stocke une référence locale à son composant, effectue une action par défaut lorsque le double-clic sur le composant et fournit une commande de menu de verbe de concepteur.  
  
 [!code-cpp[IDesignerExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/IDesignerExample/CPP/testcontrol.cpp#1)]
 [!code-csharp[IDesignerExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/IDesignerExample/CS/testcontrol.cs#1)]
 [!code-vb[IDesignerExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/IDesignerExample/VB/testcontrol.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.Design.IRootDesigner" />
    <altmember cref="T:System.ComponentModel.Design.IDesignerHost" />
    <altmember cref="T:System.ComponentModel.Design.DesignerVerb" />
  </Docs>
  <Members>
    <Member MemberName="Component">
      <MemberSignature Language="C#" Value="public System.ComponentModel.IComponent Component { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.IComponent Component" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.IDesigner.Component" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Component As IComponent" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ComponentModel::IComponent ^ Component { System::ComponentModel::IComponent ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Component : System.ComponentModel.IComponent" Usage="System.ComponentModel.Design.IDesigner.Component" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.IComponent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le composant de base qui est créé par ce concepteur.</summary>
        <value>
          <see cref="T:System.ComponentModel.IComponent" /> indiquant le composant de base qui est créé par ce concepteur.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DoDefaultAction">
      <MemberSignature Language="C#" Value="public void DoDefaultAction ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DoDefaultAction() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IDesigner.DoDefaultAction" />
      <MemberSignature Language="VB.NET" Value="Public Sub DoDefaultAction ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DoDefaultAction();" />
      <MemberSignature Language="F#" Value="abstract member DoDefaultAction : unit -&gt; unit" Usage="iDesigner.DoDefaultAction " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Exécute l'action par défaut pour ce concepteur.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode est appelée quand un utilisateur double-clique sur la représentation sous forme d’un composant dans la barre d’état du composant.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public void Initialize (System.ComponentModel.IComponent component);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Initialize(class System.ComponentModel.IComponent component) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IDesigner.Initialize(System.ComponentModel.IComponent)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Initialize (component As IComponent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Initialize(System::ComponentModel::IComponent ^ component);" />
      <MemberSignature Language="F#" Value="abstract member Initialize : System.ComponentModel.IComponent -&gt; unit" Usage="iDesigner.Initialize component" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
      </Parameters>
      <Docs>
        <param name="component">Composant à associer à ce concepteur.</param>
        <summary>Initialise le concepteur avec le composant spécifié.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Verbs">
      <MemberSignature Language="C#" Value="public System.ComponentModel.Design.DesignerVerbCollection Verbs { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.Design.DesignerVerbCollection Verbs" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.IDesigner.Verbs" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Verbs As DesignerVerbCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ComponentModel::Design::DesignerVerbCollection ^ Verbs { System::ComponentModel::Design::DesignerVerbCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Verbs : System.ComponentModel.Design.DesignerVerbCollection" Usage="System.ComponentModel.Design.IDesigner.Verbs" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Design.DesignerVerbCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une collection des verbes de design pris en charge par le concepteur.</summary>
        <value>
          <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" /> contenant les verbes pris en charge par le concepteur ou <see langword="null" /> si le composant ne possède pas de verbe.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Retourne la conception de verbes d’heure pris en charge par le composant associé au concepteur. Les verbes retournées par cette méthode sont généralement affichés par l’environnement au moment du design dans le menu contextuel. Lorsqu’un utilisateur sélectionne un des verbes, le Gestionnaire d’événements correspondantes <xref:System.ComponentModel.Design.DesignerVerb> est appelé.  
  
> [!NOTE]
>  Un environnement au moment du design fournit généralement une **propriétés... ** entrée dans le menu contextuel d’un composant. Pour éviter des titres en double pour les entrées de menu, aucun verbe portant le titre « Propriétés... » ne doit être incluse dans un <xref:System.ComponentModel.Design.DesignerVerbCollection>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.DesignerVerb" />
        <altmember cref="T:System.ComponentModel.Design.DesignerVerbCollection" />
      </Docs>
    </Member>
  </Members>
</Type>