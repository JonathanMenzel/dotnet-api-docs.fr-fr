<Type Name="IMenuCommandService" FullName="System.ComponentModel.Design.IMenuCommandService">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4446ee90bf32fe234db8c8c634d6b18bb066bec1" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30372773" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IMenuCommandService" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IMenuCommandService" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Design.IMenuCommandService" />
  <TypeSignature Language="VB.NET" Value="Public Interface IMenuCommandService" />
  <TypeSignature Language="C++ CLI" Value="public interface class IMenuCommandService" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Fournit des méthodes servant à gérer les verbes de concepteur globaux et les commandes de menu disponibles en mode design, ainsi qu'à afficher certains types de menus contextuels.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette interface fournit des méthodes pour :  
  
-   Rechercher, invoke, ajouter et supprimer des commandes de verbe de concepteur global.  
  
-   Rechercher, invoke, ajouter et supprimer des commandes de menu standard.  
  
-   Modifiez les gestionnaires d’événements associés aux commandes de menu standard.  
  
-   Afficher un menu contextuel de commandes standard associé à un menu <xref:System.ComponentModel.Design.CommandID>.  
  
 Verbes de concepteur représentent des commandes personnalisées qui sont répertoriées dans le menu contextuel en mode Création. Un verbe de concepteur peut fournir une étiquette de texte spécifié. Chaque verbe de concepteur est automatiquement attribué à un unique <xref:System.ComponentModel.Design.CommandID>. Un concepteur peut fournir des verbes de concepteur via son <xref:System.ComponentModel.Design.IDesigner.Verbs%2A> propriété, mais ces derniers sont disponibles uniquement lorsque composant du concepteur est actuellement sélectionné. Verbes de concepteur globaux sont des commandes de verbe de concepteur qui sont accessibles à partir d’un menu de raccourci en mode design, quelle que soit le composant sélectionné. Cette interface vous permet de gérer l’ensemble de verbes de concepteur globaux qui sont disponibles en mode Création.  
  
 Vous pouvez ajouter un verbe de concepteur global à l’aide de la <xref:System.ComponentModel.Design.IMenuCommandService.AddVerb%2A> (méthode), vous pouvez supprimer un verbe de concepteur global à l’aide de la <xref:System.ComponentModel.Design.IMenuCommandService.RemoveVerb%2A> (méthode). Vous pouvez appeler un verbe de concepteur à l’aide de la <xref:System.ComponentModel.Design.IMenuCommandService.GlobalInvoke%2A> méthode si vous connaissez le <xref:System.ComponentModel.Design.CommandID> du verbe. Le <xref:System.ComponentModel.Design.IMenuCommandService.Verbs%2A> propriété de cette interface contient l’ensemble actuel des commandes de verbe de concepteur à afficher dans un menu contextuel. Cet ensemble de commandes de verbe de concepteur se compose de tous les verbes de concepteur globaux et les verbes de concepteur offerts par le Concepteur de tout composant actuellement sélectionné. Cet ensemble de verbes est mis à jour chaque fois un composant avec un concepteur offre des commandes de verbe de concepteur est sélectionné ou désélectionné.  
  
 Commandes de menu sont limités à l’ensemble des commandes standard prédéfinies. La plupart des commandes standard prédéfinies est définie dans le <xref:System.ComponentModel.Design.StandardCommands> et <xref:System.Windows.Forms.Design.MenuCommands> énumérations. Vous pouvez ajouter, supprimer et appeler des commandes de menu et rechercher des commandes de menu qui ont été ajoutés à un menu à l’aide des méthodes de cette interface.  
  
 Vous pouvez ajouter une commande de menu standard à l’aide de la <xref:System.ComponentModel.Design.IMenuCommandService.AddCommand%2A> (méthode) et supprimer une commande de menu standard à l’aide de la <xref:System.ComponentModel.Design.IMenuCommandService.RemoveCommand%2A> (méthode). Vous pouvez attacher un gestionnaire d’événements à une commande de menu standard prédéfinie en suivant la procédure détaillée dans la documentation relative à la <xref:System.ComponentModel.Design.IMenuCommandService.AddCommand%2A> (méthode). Vous pouvez récupérer une commande de menu par <xref:System.ComponentModel.Design.CommandID> si elle a été ajoutée à un menu à l’aide du <xref:System.ComponentModel.Design.IMenuCommandService.FindCommand%2A> (méthode). Vous pouvez appeler une commande de menu ou une commande de verbe de concepteur par <xref:System.ComponentModel.Design.CommandID> à l’aide de la <xref:System.ComponentModel.Design.IMenuCommandService.GlobalInvoke%2A> (méthode).  
  
> [!NOTE]
>  Une tentative d’ajout d’une commande de menu avec un déjà existant <xref:System.ComponentModel.Design.CommandID> lèvera une <xref:System.InvalidOperationException>. Lorsque vous ajoutez une commande de menu, veillez à vérifier qu’il n’est pas déjà dans un menu à l’aide de la <xref:System.ComponentModel.Design.IMenuCommandService.FindCommand%2A> (méthode), ou utilisez Gestion des exceptions judicieusement.  
  
> [!NOTE]
>  Une commande de menu peuvent être ajoutés à un menu et avoir son <xref:System.ComponentModel.Design.MenuCommand.Visible%2A> ou <xref:System.ComponentModel.Design.MenuCommand.Enabled%2A> propriétés définies sur `false`. Si vous ne pouvez pas localiser visuellement une commande de menu qui a été ajoutée à un menu, une de ces propriétés a peut-être été définie `false`.  
  
 Vous pouvez afficher certains menus contextuels standard contenant des commandes de menu à un emplacement spécifié à l’aide de la <xref:System.ComponentModel.Design.IMenuCommandService.ShowContextMenu%2A> (méthode). La documentation de cette méthode contient une table répertoriant les ID de commande qui spécifient les menus valides à afficher.  
  
   
  
## Examples  
 Cet exemple montre comment utiliser le <xref:System.ComponentModel.Design.IMenuCommandService> pour ajouter un <xref:System.ComponentModel.Design.MenuCommand>.  
  
 [!code-cpp[MenuCommand Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/MenuCommand Example/CPP/component1.cpp#1)]
 [!code-csharp[MenuCommand Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/MenuCommand Example/CS/component1.cs#1)]
 [!code-vb[MenuCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MenuCommand Example/VB/component1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
    <altmember cref="T:System.ComponentModel.Design.DesignerVerb" />
    <altmember cref="T:System.ComponentModel.Design.CommandID" />
    <altmember cref="T:System.Windows.Forms.Design.MenuCommands" />
    <altmember cref="T:System.ComponentModel.Design.StandardCommands" />
  </Docs>
  <Members>
    <Member MemberName="AddCommand">
      <MemberSignature Language="C#" Value="public void AddCommand (System.ComponentModel.Design.MenuCommand command);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddCommand(class System.ComponentModel.Design.MenuCommand command) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IMenuCommandService.AddCommand(System.ComponentModel.Design.MenuCommand)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddCommand (command As MenuCommand)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddCommand(System::ComponentModel::Design::MenuCommand ^ command);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.ComponentModel.Design.MenuCommand" />
      </Parameters>
      <Docs>
        <param name="command">
          <see cref="T:System.ComponentModel.Design.MenuCommand" /> à ajouter.</param>
        <summary>Ajoute la commande de menu standard spécifiée au menu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.Design.MenuCommands> et <xref:System.ComponentModel.Design.StandardCommands> contiennent des énumérations <xref:System.ComponentModel.Design.CommandID> identificateurs prédéfinis des commandes standard et des commandes de menu qui sont déjà associées à un emplacement dans un menu spécifique.  
  
> [!NOTE]
>  Une tentative d’ajout d’une commande de menu avec un déjà existant <xref:System.ComponentModel.Design.CommandID> lèvera une <xref:System.InvalidOperationException>. Lorsque vous ajoutez une commande de menu, veillez à vérifier qu’il n’est pas déjà dans un menu à l’aide de la <xref:System.ComponentModel.Design.IMenuCommandService.FindCommand%2A> (méthode), ou utilisez Gestion des exceptions judicieusement.  
  
 Vous pouvez attacher un gestionnaire d’événements à une commande de menu prédéfinis avec la procédure suivante :  
  
1.  Si la commande de menu à lier à un gestionnaire d’événements a été ajoutée à un menu ou se trouve à la <xref:System.ComponentModel.Design.IMenuCommandService.FindCommand%2A> (méthode), considérez si vous voulez restaurer cette commande de menu ultérieurement et si vous voulez appeler le Gestionnaire d’événements actuel à partir de votre nouveau gestionnaire d’événements. Si votre code peut restaurer la commande de menu ou la chaîne de l’appel de gestionnaires d’événements, veillez à stocker une référence à la commande de menu quelque part.  
  
2.  Assurez-vous que toute commande de menu précédemment existante avec le même <xref:System.ComponentModel.Design.CommandID> a été supprimé du menu à l’aide de la <xref:System.ComponentModel.Design.IMenuCommandService.RemoveCommand%2A> (méthode).  
  
3.  Créer un nouveau <xref:System.ComponentModel.Design.MenuCommand> et spécifiez votre gestionnaire d’événements dans le constructeur, avec un <xref:System.ComponentModel.Design.CommandID> qui représente la commande à ajouter. Chaque commande de menu standard est associée à un emplacement prédéfini de menu dans lequel il est ajouté à. Les ID de commande pris en charge sont définies dans le <xref:System.ComponentModel.Design.StandardCommands> et <xref:System.Windows.Forms.Design.MenuCommands> énumérations.  
  
4.  Si vous voulez appeler un gestionnaire d’événements préexistant pour la commande de menu, appelez le <xref:System.ComponentModel.Design.MenuCommand.Invoke%2A> méthode de la commande de menu que vous avez remplacée dans le menu du Gestionnaire d’événements qui gère l’événement d’appel de votre commande de menu.  
  
5.  Si vous souhaitez en mode de restauration d’une commande de menu préexistante que vous avez remplacé le Gestionnaire d’événements, ajoutez stocké, commande de menu préexistante après la suppression de la commande de menu de remplacement que vous avez créé. Vous pouvez souhaiter ajouter ce comportement à le `Dispose` méthode pour votre type.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Le <see cref="T:System.ComponentModel.Design.CommandID" /> du <see cref="T:System.ComponentModel.Design.MenuCommand" /> spécifié figure déjà dans un menu.</exception>
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
        <altmember cref="T:System.ComponentModel.Design.CommandID" />
      </Docs>
    </Member>
    <Member MemberName="AddVerb">
      <MemberSignature Language="C#" Value="public void AddVerb (System.ComponentModel.Design.DesignerVerb verb);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddVerb(class System.ComponentModel.Design.DesignerVerb verb) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IMenuCommandService.AddVerb(System.ComponentModel.Design.DesignerVerb)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddVerb (verb As DesignerVerb)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddVerb(System::ComponentModel::Design::DesignerVerb ^ verb);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="verb" Type="System.ComponentModel.Design.DesignerVerb" />
      </Parameters>
      <Docs>
        <param name="verb">
          <see cref="T:System.ComponentModel.Design.DesignerVerb" /> à ajouter.</param>
        <summary>Ajoute le verbe de concepteur spécifié à l'ensemble de verbes de concepteur globaux.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les concepteurs de composants qui fournissent des verbes de concepteur doivent utiliser le <xref:System.ComponentModel.Design.IDesigner.Verbs%2A> propriété de leur concepteur plutôt que d’appeler cette méthode. Cette méthode ajoute un verbe de concepteur global qui est accessible à partir du menu contextuel en mode Création, quelle que soit le composant sélectionné.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.DesignerVerb" />
      </Docs>
    </Member>
    <Member MemberName="FindCommand">
      <MemberSignature Language="C#" Value="public System.ComponentModel.Design.MenuCommand FindCommand (System.ComponentModel.Design.CommandID commandID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ComponentModel.Design.MenuCommand FindCommand(class System.ComponentModel.Design.CommandID commandID) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IMenuCommandService.FindCommand(System.ComponentModel.Design.CommandID)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ComponentModel::Design::MenuCommand ^ FindCommand(System::ComponentModel::Design::CommandID ^ commandID);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Design.MenuCommand</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandID" Type="System.ComponentModel.Design.CommandID" />
      </Parameters>
      <Docs>
        <param name="commandID">
          <see cref="T:System.ComponentModel.Design.CommandID" /> à rechercher.</param>
        <summary>Recherche l'ID de commande spécifié et retourne la commande de menu qui lui est associée.</summary>
        <returns>
          <see cref="T:System.ComponentModel.Design.MenuCommand" /> associé à l'ID de commande, ou <see langword="null" /> si aucune commande n'est trouvée.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.ComponentModel.Design.CommandID" />
      </Docs>
    </Member>
    <Member MemberName="GlobalInvoke">
      <MemberSignature Language="C#" Value="public bool GlobalInvoke (System.ComponentModel.Design.CommandID commandID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GlobalInvoke(class System.ComponentModel.Design.CommandID commandID) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IMenuCommandService.GlobalInvoke(System.ComponentModel.Design.CommandID)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GlobalInvoke(System::ComponentModel::Design::CommandID ^ commandID);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandID" Type="System.ComponentModel.Design.CommandID" />
      </Parameters>
      <Docs>
        <param name="commandID">
          <see cref="T:System.ComponentModel.Design.CommandID" /> de la commande à rechercher et à exécuter.</param>
        <summary>Appelle une commande de menu ou une commande sous forme de verbe de concepteur correspondant à l'ID de commande spécifié.</summary>
        <returns>
          <see langword="true" /> si la commande a été correctement trouvée et appelée ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode recherche une commande de menu ou un verbe de concepteur avec une <xref:System.ComponentModel.Design.CommandID> correspondant spécifié <xref:System.ComponentModel.Design.CommandID>. Cette méthode commence par rechercher dans la collection de verbes de concepteur comprenant des verbes de concepteur fourni globales et actives avant de poursuivre la recherche, si nécessaire, via le service de commande d’environnement global. Si une commande de menu correspondante ou d’un verbe de concepteur est localisé, la commande est appelée.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.CommandID" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCommand">
      <MemberSignature Language="C#" Value="public void RemoveCommand (System.ComponentModel.Design.MenuCommand command);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveCommand(class System.ComponentModel.Design.MenuCommand command) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IMenuCommandService.RemoveCommand(System.ComponentModel.Design.MenuCommand)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveCommand (command As MenuCommand)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveCommand(System::ComponentModel::Design::MenuCommand ^ command);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.ComponentModel.Design.MenuCommand" />
      </Parameters>
      <Docs>
        <param name="command">
          <see cref="T:System.ComponentModel.Design.MenuCommand" /> à supprimer.</param>
        <summary>Supprime la commande de menu standard spécifiée du menu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode supprime le texte spécifié <xref:System.ComponentModel.Design.MenuCommand> s’il est trouvé. Cette méthode ne pas lever une exception ou une valeur de retour si spécifié <xref:System.ComponentModel.Design.MenuCommand> est introuvable. Utilisez le <xref:System.ComponentModel.Design.IMenuCommandService.FindCommand%2A> méthode pour déterminer si un <xref:System.ComponentModel.Design.MenuCommand> correspondant spécifié <xref:System.ComponentModel.Design.CommandID> se trouve dans un menu.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
      </Docs>
    </Member>
    <Member MemberName="RemoveVerb">
      <MemberSignature Language="C#" Value="public void RemoveVerb (System.ComponentModel.Design.DesignerVerb verb);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveVerb(class System.ComponentModel.Design.DesignerVerb verb) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IMenuCommandService.RemoveVerb(System.ComponentModel.Design.DesignerVerb)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveVerb (verb As DesignerVerb)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveVerb(System::ComponentModel::Design::DesignerVerb ^ verb);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="verb" Type="System.ComponentModel.Design.DesignerVerb" />
      </Parameters>
      <Docs>
        <param name="verb">
          <see cref="T:System.ComponentModel.Design.DesignerVerb" /> à supprimer.</param>
        <summary>Supprime le verbe de concepteur spécifié de la collection de verbes de concepteur globaux.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode supprime le verbe de concepteur global spécifié s’il s’agit de la collection de verbes de concepteur globaux. Vous pouvez ajouter un verbe de concepteur à la collection de verbes de concepteur globaux à l’aide de la <xref:System.ComponentModel.Design.IMenuCommandService.AddVerb%2A> (méthode).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.DesignerVerb" />
      </Docs>
    </Member>
    <Member MemberName="ShowContextMenu">
      <MemberSignature Language="C#" Value="public void ShowContextMenu (System.ComponentModel.Design.CommandID menuID, int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ShowContextMenu(class System.ComponentModel.Design.CommandID menuID, int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IMenuCommandService.ShowContextMenu(System.ComponentModel.Design.CommandID,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ShowContextMenu (menuID As CommandID, x As Integer, y As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ShowContextMenu(System::ComponentModel::Design::CommandID ^ menuID, int x, int y);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="menuID" Type="System.ComponentModel.Design.CommandID" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="menuID">
          <see cref="T:System.ComponentModel.Design.CommandID" /> du menu contextuel à afficher.</param>
        <param name="x">Coordonnée x (en coordonnées d'écran) à laquelle le menu doit être affiché.</param>
        <param name="y">Coordonnée y (en coordonnées d'écran) à laquelle le menu doit être affiché.</param>
        <summary>Affiche le menu contextuel spécifié à l'emplacement indiqué.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.ComponentModel.Design.IMenuCommandService.ShowContextMenu%2A> méthode peut afficher des menus contextuels Visual Studio suivants contenant des commandes de menu à un point spécifié :  
  
|Menu|CommandID|  
|----------|---------------|  
|Le menu contextuel affiché pour un conteneur|<xref:System.Windows.Forms.Design.MenuCommands.ContainerMenu>|  
|Le menu contextuel affiché pour la barre d’état du composant|<xref:System.Windows.Forms.Design.MenuCommands.ComponentTrayMenu>|  
|Le menu contextuel affiché pour une sélection|<xref:System.Windows.Forms.Design.MenuCommands.SelectionMenu>|  
|Le menu contextuel affiché pour une sélection de la barre d’état|<xref:System.Windows.Forms.Design.MenuCommands.TraySelectionMenu>|  
  
 Cette méthode peut également afficher les autres menus contextuels enregistrés.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.CommandID" />
      </Docs>
    </Member>
    <Member MemberName="Verbs">
      <MemberSignature Language="C#" Value="public System.ComponentModel.Design.DesignerVerbCollection Verbs { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.Design.DesignerVerbCollection Verbs" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.IMenuCommandService.Verbs" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Verbs As DesignerVerbCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ComponentModel::Design::DesignerVerbCollection ^ Verbs { System::ComponentModel::Design::DesignerVerbCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Design.DesignerVerbCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une collection des verbes du concepteur actuellement disponibles.</summary>
        <value>
          <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" /> contenant les verbes du concepteur actuellement disponibles.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’ensemble de verbes de concepteur actuellement disponibles se compose de tous les verbes de concepteur globaux, qui sont ajoutés par le <xref:System.ComponentModel.Design.IMenuCommandService.AddVerb%2A> méthode sur cette interface et les verbes de concepteur isolés, fournis par le <xref:System.ComponentModel.Design.IDesigner.Verbs%2A> propriété de concepteurs individuels. Si le nom d’un verbe global est en conflit avec le nom d’un verbe de concepteur, le verbe de concepteur fournis par le concepteur est prioritaire.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.DesignerVerbCollection" />
        <altmember cref="P:System.ComponentModel.Design.IDesigner.Verbs" />
      </Docs>
    </Member>
  </Members>
</Type>