<Type Name="ViewTechnology" FullName="System.ComponentModel.Design.ViewTechnology">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="459f390c97929264d6e88e0b246805ff33a0d5b3" />
    <Meta Name="ms.sourcegitcommit" Value="4b4804968da1dfdf71c501075a5b66957b54f2e8" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/27/2018" />
    <Meta Name="ms.locfileid" Value="32036602" />
  </Metadata>
  <TypeSignature Language="C#" Value="public enum ViewTechnology" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ViewTechnology extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Design.ViewTechnology" />
  <TypeSignature Language="VB.NET" Value="Public Enum ViewTechnology" />
  <TypeSignature Language="C++ CLI" Value="public enum class ViewTechnology" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Définit des identificateurs pour un ensemble de technologies prises en charge par les hôtes du concepteur.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le modèle d’adaptateur de vue remplace et ajoute des fonctionnalités à la <xref:System.ComponentModel.Design.ViewTechnology> fonctionnalité ; Toutefois, le <xref:System.ComponentModel.Design.ViewTechnology> fonctionnalité est conservée pour la compatibilité descendante et une utilisation ultérieure, si vous choisissez. Pour plus d’informations, consultez « .NET forme Library : A Sample Designer » dans la Base de connaissances Windows Forms à http://windowsforms.net/articles/shapedesigner.aspx.  
  
 <xref:System.ComponentModel.Design.ViewTechnology> définit les identificateurs qui indiquent le mode à utiliser pour le contrôle de l’affichage d’un document hébergé de concepteur.  
  
 Vous devez uniquement utiliser la valeur par défaut dans votre environnement d’hébergement concepteur. Dans les versions précédentes de la [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)], le <xref:System.ComponentModel.Design.ViewTechnology.Default> énumération spécifié le type de modèle d’interface utilisateur prises en charge par un concepteur racine. Étant donné que ce modèle n’est pas extensible, vous devez utiliser un *adaptateur vue* modèle. Un adaptateur de vue est un type qui s’adapte à un objet d’un type à un autre.  
  
 Par exemple, un Concepteur HTML peut retourner un `DemoDOM` arborescence en tant que son affichage. Le Concepteur HTML retourne une technologie d’affichage de la valeur par défaut. Un environnement d’hébergement de Windows Forms aurait une ou plusieurs classes d’adaptateur d’affichage disponibles. Si une telle classe peut convertir le `DemoDOM` dans un contrôle Windows Forms, l’application d’hébergement peut prendre en charge ce type de concepteur. Si aucune carte ne peut gérer le type de données retourné à partir du concepteur <xref:System.ComponentModel.Design.IRootDesigner.GetView%2A> (méthode), le chargement du concepteur échouera et l’utilisateur s’affiche avec une erreur.  
  
 Visual Studio a un schéma extensible pour fournir des adaptateurs de vue, et il peut donc s’adapter à n’importe quelle technologie de l’interface utilisateur. Les fournisseurs de technologie tierce peuvent également proposer un adaptateur de vue approprié et leurs modèles objet sont immédiatement consommables.  
  
 Pour obtenir un exemple d’utilisation des adaptateurs de vue, consultez « .NET forme Library : A Sample Designer » dans la Base de connaissances Windows Forms à http://windowsforms.net/articles/shapedesigner.aspx.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser la <xref:System.ComponentModel.Design.ViewTechnology.Default> classe dans un concepteur. Cet exemple de code fait partie d’un exemple plus complet fourni pour le <xref:System.ComponentModel.Design.IRootDesigner.GetView%2A> interface.  
  
 [!code-cpp[IRootDesigner Sample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/IRootDesigner Sample/CPP/class1.cpp#1)]
 [!code-csharp[IRootDesigner Sample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/IRootDesigner Sample/CS/class1.cs#1)]
 [!code-vb[IRootDesigner Sample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/IRootDesigner Sample/VB/class1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Default">
      <MemberSignature Language="C#" Value="Default" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ComponentModel.Design.ViewTechnology Default = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.ComponentModel.Design.ViewTechnology.Default" />
      <MemberSignature Language="VB.NET" Value="Default" />
      <MemberSignature Language="C++ CLI" Value="Default" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Design.ViewTechnology</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>Spécifie la prise en charge de la technologie d'affichage par défaut.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le concepteur racine peut retourner tout type d’objet, mais l’objet doit être compatible avec un adaptateur pour la technologie de l’hôte. Les environnements d’hébergement tels que Visual Studio fournissent un moyen de brancher de nouveaux adaptateurs de technologie d’affichage. L’objet d’affichage par défaut pour le Concepteur Windows Forms est un <xref:System.Windows.Forms.Control?displayProperty=nameWithType> instance.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser la <xref:System.ComponentModel.Design.ViewTechnology> classe dans un concepteur. Cet exemple de code fait partie d’un exemple plus complet fourni pour le <xref:System.ComponentModel.Design.IRootDesigner> interface.  
  
 [!code-cpp[IRootDesigner Sample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/IRootDesigner Sample/CPP/class1.cpp#1)]
 [!code-csharp[IRootDesigner Sample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/IRootDesigner Sample/CS/class1.cs#1)]
 [!code-vb[IRootDesigner Sample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/IRootDesigner Sample/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Passthrough">
      <MemberSignature Language="C#" Value="Passthrough" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ComponentModel.Design.ViewTechnology Passthrough = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.ComponentModel.Design.ViewTechnology.Passthrough" />
      <MemberSignature Language="VB.NET" Value="Passthrough" />
      <MemberSignature Language="C++ CLI" Value="Passthrough" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This value has been deprecated. Use ViewTechnology.Default instead.  http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Design.ViewTechnology</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>Représente un mode dans lequel l'objet de vue est passé directement à l'environnement de développement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’objet de vue doit implémenter les interfaces que nécessite de l’environnement de développement. L’environnement de développement Visual Studio prend en charge les objets de vue qui sont un contrôle ActiveX, un document actif ou un objet qui implémente l’interface IVsWindowPane disponible via le programme Visual Studio VSI (intégration de Visual Studio). L’environnement de développement Visual Studio prend en charge cette technologie d’affichage. Prise en charge de cette technologie d’affichage n’est pas nécessairement disponible dans tous les environnements de développement.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WindowsForms">
      <MemberSignature Language="C#" Value="WindowsForms" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ComponentModel.Design.ViewTechnology WindowsForms = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.ComponentModel.Design.ViewTechnology.WindowsForms" />
      <MemberSignature Language="VB.NET" Value="WindowsForms" />
      <MemberSignature Language="C++ CLI" Value="WindowsForms" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This value has been deprecated. Use ViewTechnology.Default instead.  http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Design.ViewTechnology</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>Représente un mode dans lequel un objet contrôle Windows Forms assure l'affichage du concepteur racine.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’hôte de concepteur remplit la fenêtre de l’environnement de développement avec le contrôle Windows Forms.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser la <xref:System.ComponentModel.Design.ViewTechnology> classe dans un concepteur. Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.ComponentModel.Design.LocalizationExtenderProvider> classe.  
  
 [!code-cpp[LocalizationExtenderProviderExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/LocalizationExtenderProviderExample/CPP/class1.cpp#1)]
 [!code-csharp[LocalizationExtenderProviderExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/LocalizationExtenderProviderExample/CS/class1.cs#1)]
 [!code-vb[LocalizationExtenderProviderExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/LocalizationExtenderProviderExample/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>