<Type Name="DesignerActionService" FullName="System.ComponentModel.Design.DesignerActionService">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="42dcb34d43a78ca3caa207a4d231e6a0f025e330" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39841823" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DesignerActionService : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DesignerActionService extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Design.DesignerActionService" />
  <TypeSignature Language="VB.NET" Value="Public Class DesignerActionService&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class DesignerActionService : IDisposable" />
  <TypeSignature Language="F#" Value="type DesignerActionService = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Établit un service au moment du design qui gère la collection d'objets <see cref="T:System.ComponentModel.Design.DesignerActionItem" /> pour les composants.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.ComponentModel.Design.DesignerActionService> classe est chargée de gérer la collection de <xref:System.ComponentModel.Design.DesignerActionItem> objets pour chaque instance d’un composant qui existe sur un formulaire au moment du design. Cette classe permet à un modèle d’émission directe de la création d’élément et s’adresse principalement pour une utilisation par les développeurs au moment du design, bien qu’il peut également être utilisé par composant et les développeurs de contrôles personnalisés.  
  
 Les développeurs au moment du design outil devrez déterminer la liste des éléments à afficher pour un composant et déterminer quand cette liste change. Ils peuvent également créer des compléments qui fonctionnent conjointement avec les objets de panneau de configuration de la balise active.  
  
 Advanced composant être amenés à contrôler de manière dynamique les éléments associés à un composant, remplaçant ou complétant le modèle d’extraction standard. Par exemple, les commandes du Panneau de configuration peuvent être modifiées selon le contexte de leur utilisation et l’état au moment du design du composant.  
  
> [!NOTE]
>  Le <xref:System.ComponentModel.Design.DesignerActionService> est réellement le service conduite derrière les modèles push et pull ; Toutefois, dans ce dernier cas, il fonctionne implicitement.  
  
 <xref:System.ComponentModel.Design.DesignerActionService> Fournit une interface simple pour accéder et manipuler les éléments de chaque composant, y compris les méthodes et événements suivants :  
  
-   Le <xref:System.ComponentModel.Design.DesignerActionService.Contains%2A> méthode détermine si le <xref:System.ComponentModel.Design.DesignerActionService> gère actuellement un composant particulier.  
  
-   Le <xref:System.ComponentModel.Design.DesignerActionService.GetComponentActions%2A> méthode prend en charge l’énumération des listes d’éléments.  
  
-   Le <xref:System.ComponentModel.Design.DesignerActionService.Add%2A> méthode permet d’ajouter un <xref:System.ComponentModel.Design.DesignerActionList> ou <xref:System.ComponentModel.Design.DesignerActionListCollection> au jeu d’éléments existants pour une instance du composant. En revanche, le <xref:System.ComponentModel.Design.DesignerActionService.Remove%2A> méthode supprime une ou toutes les listes d’éléments associés au composant.  
  
    > [!NOTE]
    >  Le <xref:System.ComponentModel.Design.DesignerActionService.Add%2A> méthode représente le modèle push direct d’association d’éléments de panneau à un composant. En revanche, le modèle d’extraction repose sur la substitution du <xref:System.ComponentModel.Design.ComponentDesigner.ActionLists%2A> propriété de la classe de concepteur pour ce composant. L’environnement de design est chargé d’ajouter ces éléments dans la zone actuelle <xref:System.ComponentModel.Design.DesignerActionService> quand un composant est créé sur l’aire de conception.  
  
    > [!IMPORTANT]
    >  Le <xref:System.ComponentModel.Design.DesignerActionService.Add%2A>, <xref:System.ComponentModel.Design.DesignerActionService.Remove%2A>, <xref:System.ComponentModel.Design.DesignerActionService.Contains%2A>, et <xref:System.ComponentModel.Design.DesignerActionService.Clear%2A> méthodes uniquement prendre en compte ou affectent des éléments de modèle push.  
  
-   Le <xref:System.ComponentModel.Design.DesignerActionService.DesignerActionListsChanged> événements indique quand la collection d’éléments change pour un composant.  
  
 Comme il est souvent souhaitable d’utiliser certains éléments d’un même panneau dans le menu de raccourci de la conception du composant et son panneau, il existe une importante d’interopérabilité entre <xref:System.ComponentModel.Design.DesignerActionItem> objets et les verbes de concepteur.  
  
 Si un concepteur de composants ne spécifie pas explicitement un <xref:System.ComponentModel.Design.DesignerActionList> (autrement dit, il ne contient pas substitué <xref:System.ComponentModel.Design.ComponentDesigner.ActionLists%2A> propriété), une liste sera créée à partir des verbes de concepteur existants. Ces verbes sont spécifiées par le <xref:System.ComponentModel.Design.ComponentDesigner.Verbs%2A> propriété. Dans ce cas, une classe de liste de verbes interne est utilisée pour contenir la collection d’entrées de panneau d’élément verbe.  
  
 Si vous souhaitez un <xref:System.ComponentModel.Design.DesignerActionMethodItem> à utiliser à la fois comme entrée de panneau et une entrée de menu contextuel au moment du design, vous pouvez définir le `includeAsDesignerVerb` paramètre dans le constructeur de l’élément.  
  
 Utilisez le <xref:System.ComponentModel.Design.DesignerActionUIService> pour contrôler l’affichage du Concepteur de votre <xref:System.ComponentModel.Design.ComponentDesigner.ActionLists%2A>.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.Design.DesignerActionListCollection" />
    <altmember cref="T:System.ComponentModel.Design.ComponentDesigner" />
    <altmember cref="T:System.ComponentModel.Design.DesignerActionItem" />
    <altmember cref="T:System.ComponentModel.Design.DesignerActionUIService" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DesignerActionService (IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionService.#ctor(System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (serviceProvider As IServiceProvider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DesignerActionService(IServiceProvider ^ serviceProvider);" />
      <MemberSignature Language="F#" Value="new System.ComponentModel.Design.DesignerActionService : IServiceProvider -&gt; System.ComponentModel.Design.DesignerActionService" Usage="new System.ComponentModel.Design.DesignerActionService serviceProvider" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="serviceProvider">Fournisseur de services pour l'environnement au moment du design actuel.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.DesignerActionService" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un fournisseur de services est nécessaire pour la surveillance des modifications de composant et de sélection. Il est prévu pour prendre en charge la <xref:System.ComponentModel.Design.IDesignerHost> et <xref:System.ComponentModel.Design.IComponentChangeService> types. Le <xref:System.ComponentModel.Design.DesignerActionService> classe utilise une table interne pour gérer les composants et leur sont associées <xref:System.ComponentModel.Design.DesignerActionList> les balises actives.  
  
 En règle générale, les développeurs de composants seront inutile créer une instance de cette classe ; au lieu de cela, ils peuvent acquérir une instance existante via un appel à la <xref:System.ComponentModel.Component.GetService%2A?displayProperty=nameWithType> (méthode).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.Design.DesignerActionService.Dispose" />
        <altmember cref="T:System.ComponentModel.Design.IDesignerHost" />
        <altmember cref="T:System.ComponentModel.Design.IComponentChangeService" />
        <altmember cref="M:System.ComponentModel.Component.GetService(System.Type)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ajoute un ou plusieurs objets <see cref="T:System.ComponentModel.Design.DesignerActionList" /> à la collection actuelle de balises actives managées.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.ComponentModel.IComponent comp, System.ComponentModel.Design.DesignerActionList actionList);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.ComponentModel.IComponent comp, class System.ComponentModel.Design.DesignerActionList actionList) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionService.Add(System.ComponentModel.IComponent,System.ComponentModel.Design.DesignerActionList)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (comp As IComponent, actionList As DesignerActionList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::ComponentModel::IComponent ^ comp, System::ComponentModel::Design::DesignerActionList ^ actionList);" />
      <MemberSignature Language="F#" Value="member this.Add : System.ComponentModel.IComponent * System.ComponentModel.Design.DesignerActionList -&gt; unit" Usage="designerActionService.Add (comp, actionList)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comp" Type="System.ComponentModel.IComponent" />
        <Parameter Name="actionList" Type="System.ComponentModel.Design.DesignerActionList" />
      </Parameters>
      <Docs>
        <param name="comp">
          <see cref="T:System.ComponentModel.IComponent" /> auquel associer les balises actives.</param>
        <param name="actionList">
          <see cref="T:System.ComponentModel.Design.DesignerActionList" /> qui contient les nouveaux éléments de balises actives à ajouter.</param>
        <summary>Ajoute <see cref="T:System.ComponentModel.Design.DesignerActionList" /> à la collection actuelle de balises actives managées.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.ComponentModel.Design.DesignerActionService.Add%2A> méthode représente le modèle push d’ajout d’éléments de balise active. Le modèle d’extraction alternatif repose sur la substitution du <xref:System.ComponentModel.Design.ComponentDesigner.ActionLists%2A> propriété dans le concepteur pour le composant correspondant.  
  
 Lorsque cette méthode est appelée, les listes à ajouter sont analysés pour toute <xref:System.ComponentModel.Design.DesignerActionMethodItem> avec la <xref:System.ComponentModel.Design.DesignerActionMethodItem.IncludeAsDesignerVerb%2A> propriété définie sur `true`. Ces éléments sont ajoutés à la liste des verbes de concepteur pour ce composant, via un appel à la <xref:System.ComponentModel.Design.MenuCommandService.AddVerb%2A?displayProperty=nameWithType> (méthode).  
  
 Balises actives sont gérées sur la base d’une instance de composant. La collection managée peut contenir des entrées en double.  
  
 Cette méthode déclenche la <xref:System.ComponentModel.Design.DesignerActionService.DesignerActionListsChanged> événement.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Au moins l’un des deux paramètres a la valeur <see langword="null" />.</exception>
        <altmember cref="T:System.ComponentModel.Design.DesignerActionList" />
        <altmember cref="P:System.ComponentModel.Design.ComponentDesigner.ActionLists" />
        <altmember cref="Overload:System.ComponentModel.Design.DesignerActionService.Remove" />
        <altmember cref="M:System.ComponentModel.Design.DesignerActionService.Contains(System.ComponentModel.IComponent)" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.ComponentModel.IComponent comp, System.ComponentModel.Design.DesignerActionListCollection designerActionListCollection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.ComponentModel.IComponent comp, class System.ComponentModel.Design.DesignerActionListCollection designerActionListCollection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionService.Add(System.ComponentModel.IComponent,System.ComponentModel.Design.DesignerActionListCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::ComponentModel::IComponent ^ comp, System::ComponentModel::Design::DesignerActionListCollection ^ designerActionListCollection);" />
      <MemberSignature Language="F#" Value="member this.Add : System.ComponentModel.IComponent * System.ComponentModel.Design.DesignerActionListCollection -&gt; unit" Usage="designerActionService.Add (comp, designerActionListCollection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comp" Type="System.ComponentModel.IComponent" />
        <Parameter Name="designerActionListCollection" Type="System.ComponentModel.Design.DesignerActionListCollection" />
      </Parameters>
      <Docs>
        <param name="comp">
          <see cref="T:System.ComponentModel.IComponent" /> auquel associer les balises actives.</param>
        <param name="designerActionListCollection">
          <see cref="T:System.ComponentModel.Design.DesignerActionListCollection" /> qui contient les nouveaux éléments de balises actives à ajouter.</param>
        <summary>Ajoute <see cref="T:System.ComponentModel.Design.DesignerActionListCollection" /> à la collection actuelle de balises actives managées.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.ComponentModel.Design.DesignerActionService.Add%2A> méthode représente le modèle push d’ajout d’éléments de balise active. Le modèle d’extraction alternatif repose sur la substitution du <xref:System.ComponentModel.Design.ComponentDesigner.ActionLists%2A> propriété dans le concepteur pour le composant correspondant.  
  
 Lorsque cette méthode est appelée, les listes à ajouter sont analysés pour toute <xref:System.ComponentModel.Design.DesignerActionMethodItem> avec la <xref:System.ComponentModel.Design.DesignerActionMethodItem.IncludeAsDesignerVerb%2A> propriété définie sur `true`. Ces éléments sont ajoutés à la liste des verbes de concepteur pour ce composant, via un appel à la <xref:System.ComponentModel.Design.MenuCommandService.AddVerb%2A?displayProperty=nameWithType> (méthode).  
  
 Balises actives sont gérées sur la base d’une instance de composant. La collection managée peut contenir des entrées en double.  
  
 Cette méthode déclenche la <xref:System.ComponentModel.Design.DesignerActionService.DesignerActionListsChanged> événement.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Au moins l’un des deux paramètres a la valeur <see langword="null" />.</exception>
        <altmember cref="T:System.ComponentModel.Design.DesignerActionList" />
        <altmember cref="P:System.ComponentModel.Design.ComponentDesigner.ActionLists" />
        <altmember cref="Overload:System.ComponentModel.Design.DesignerActionService.Remove" />
        <altmember cref="M:System.ComponentModel.Design.DesignerActionService.Contains(System.ComponentModel.IComponent)" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionService.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="designerActionService.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Libère tous les composants de la gestion et efface toutes les listes de balises actives de modèle push.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.ComponentModel.Design.DesignerActionService.Clear%2A> méthode vide la table interne utilisée pour stocker des informations sur des composants et leur modèle d’émission de listes de balises actives.  
  
> [!CAUTION]
>  Étant donné que cette méthode affecte tous les composants gérés par le service actuel et pas seulement le composant en cours, cette méthode doit être utilisée judicieusement. En règle générale, le développeur de l’outil de conception utilise lors de la réinitialisation d’une aire de conception. Les développeurs de composants doivent utiliser l’une de le <xref:System.ComponentModel.Design.DesignerActionService.Remove%2A> méthodes au lieu de cela pour chaque balise de supprimer des éléments ou des listes.  
  
 Un <xref:System.ComponentModel.Design.DesignerActionService.DesignerActionListsChanged> événement est déclenché pour chaque composant qui a été précédemment géré par le service actuel.  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.ComponentModel.Design.DesignerActionService.Remove" />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (System.ComponentModel.IComponent comp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(class System.ComponentModel.IComponent comp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionService.Contains(System.ComponentModel.IComponent)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (comp As IComponent) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::ComponentModel::IComponent ^ comp);" />
      <MemberSignature Language="F#" Value="member this.Contains : System.ComponentModel.IComponent -&gt; bool" Usage="designerActionService.Contains comp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comp" Type="System.ComponentModel.IComponent" />
      </Parameters>
      <Docs>
        <param name="comp">
          <see cref="T:System.ComponentModel.IComponent" /> à rechercher.</param>
        <summary>Détermine si le service de balises actives actuel gère les listes d'actions pour le composant spécifié.</summary>
        <returns>
          <see langword="true" /> si le composant est géré par le service actuel ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.ComponentModel.Design.DesignerActionService.Contains%2A> méthode reconnaît uniquement les balises actives de modèle push, qui sont associés à un composant avec le <xref:System.ComponentModel.Design.DesignerActionService.Add%2A> (méthode).  
  
 Bien qu’il n’existe aucune limitation structurelle quant au nombre de simultanées <xref:System.ComponentModel.Design.DesignerActionService> instances créées par un outil au moment du design, en général qu’une seule instance du service est créée par aire de conception.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="comp" /> est <see langword="null" />.</exception>
        <altmember cref="Overload:System.ComponentModel.Design.DesignerActionService.Add" />
        <altmember cref="Overload:System.ComponentModel.Design.DesignerActionService.Remove" />
      </Docs>
    </Member>
    <Member MemberName="DesignerActionListsChanged">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.Design.DesignerActionListsChangedEventHandler DesignerActionListsChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.Design.DesignerActionListsChangedEventHandler DesignerActionListsChanged" />
      <MemberSignature Language="DocId" Value="E:System.ComponentModel.Design.DesignerActionService.DesignerActionListsChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DesignerActionListsChanged As DesignerActionListsChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::ComponentModel::Design::DesignerActionListsChangedEventHandler ^ DesignerActionListsChanged;" />
      <MemberSignature Language="F#" Value="member this.DesignerActionListsChanged : System.ComponentModel.Design.DesignerActionListsChangedEventHandler " Usage="member this.DesignerActionListsChanged : System.ComponentModel.Design.DesignerActionListsChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Design.DesignerActionListsChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque <see cref="T:System.ComponentModel.Design.DesignerActionList" /> est supprimé ou ajouté pour n'importe quel composant.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le tableau suivant montre le jeu de classes spécialisées associé à le <xref:System.ComponentModel.Design.DesignerActionService.DesignerActionListsChanged> événement.  
  
|Type spécialisé|Description |  
|----------------------|-----------------|  
|<xref:System.ComponentModel.Design.DesignerActionListsChangedEventArgs>|Ajoute des informations spécifiques à la gestion de liste de balises actives. Cette classe est spécialisée à partir de <xref:System.EventArgs>.|  
|<xref:System.ComponentModel.Design.DesignerActionListsChangedEventHandler>|Se connecte le <xref:System.ComponentModel.Design.DesignerActionListsChangedEventArgs> avec son gestionnaire.|  
|<xref:System.ComponentModel.Design.DesignerActionListsChangedType>|Indique si une liste a été ajoutée ou supprimée.|  
  
 Pour plus d’informations sur la gestion des événements, consultez [NIB : consommation d’événements](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.DesignerActionListsChangedEventArgs" />
        <altmember cref="T:System.ComponentModel.Design.DesignerActionListsChangedType" />
        <altmember cref="T:System.ComponentModel.Design.DesignerActionListsChangedEventHandler" />
        <altmember cref="Overload:System.ComponentModel.Design.DesignerActionService.Add" />
        <altmember cref="Overload:System.ComponentModel.Design.DesignerActionService.Remove" />
        <altmember cref="M:System.ComponentModel.Design.DesignerActionService.Clear" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Libère les ressources utilisées par le <see cref="T:System.ComponentModel.Design.DesignerActionService" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionService.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="designerActionService.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Libère toutes les ressources utilisées par la classe <see cref="T:System.ComponentModel.Design.DesignerActionService" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.ComponentModel.Design.DesignerActionService.Dispose%2A> méthode est l’implémentation de la seule méthode mandatée par la <xref:System.IDisposable> interface. Appelez cette méthode une fois que vous avez terminé d'utiliser <xref:System.ComponentModel.Design.DesignerActionService>. Il exécute deux actions principales :  
  
-   Supprime le service en cours de la liste des services disponibles dans l’environnement de conception via un appel à la <xref:System.ComponentModel.Design.IServiceContainer.RemoveService%2A> (méthode).  
  
-   Annule l’abonnement aux événements de modification de composant associé <xref:System.ComponentModel.Design.IComponentChangeService> interface.  
  
 Appelez la méthode <xref:System.ComponentModel.Design.DesignerActionService.Dispose%2A> une fois que vous avez terminé d'utiliser <xref:System.ComponentModel.Design.DesignerActionService>. La méthode <xref:System.ComponentModel.Design.DesignerActionService.Dispose%2A> rend le <xref:System.ComponentModel.Design.DesignerActionService> inutilisable. Après avoir appelé <xref:System.ComponentModel.Design.DesignerActionService.Dispose%2A>, vous devez libérer toutes les références à la <xref:System.ComponentModel.Design.DesignerActionService> pour que le garbage collector puisse récupérer la mémoire qui le <xref:System.ComponentModel.Design.DesignerActionService> occupée. Pour plus d’informations, consultez [de nettoyage des ressources non managées](~/docs/standard/garbage-collection/unmanaged.md) et [implémentation d’une méthode Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
> [!NOTE]
>  Appelez toujours <xref:System.ComponentModel.Design.DesignerActionService.Dispose%2A> avant de libérer votre dernière référence à <xref:System.ComponentModel.Design.DesignerActionService>. Sinon, les ressources utilisées ne seront pas libérées tant que le garbage collector n'aura pas appelé la méthode <xref:System.ComponentModel.Design.DesignerActionService> de l'objet `Finalize`.  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.ComponentModel.Design.IServiceContainer.RemoveService" />
        <altmember cref="T:System.ComponentModel.Design.IComponentChangeService" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionService.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="designerActionService.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> pour libérer les ressources managées et non managées ; <see langword="false" /> pour ne libérer que les ressources non managées.</param>
        <summary>Libère les ressources non managées utilisées par <see cref="T:System.ComponentModel.Design.DesignerActionService" /> et libère éventuellement les ressources managées.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.ComponentModel.Design.DesignerActionService.Dispose%2A> méthode est l’implémentation de la seule méthode mandatée par la <xref:System.IDisposable> interface. Appelez cette méthode une fois que vous avez terminé d'utiliser <xref:System.ComponentModel.Design.DesignerActionService>. Il exécute deux actions principales :  
  
-   Supprime le service en cours de la liste des services disponibles dans l’environnement de conception via un appel à la <xref:System.ComponentModel.Design.IServiceContainer.RemoveService%2A> (méthode).  
  
-   Annule l’abonnement aux événements de modification de composant associé <xref:System.ComponentModel.Design.IComponentChangeService> interface.  
  
 Cette méthode est appelée par le public `Dispose()` (méthode) et le <xref:System.Object.Finalize%2A> (méthode). `Dispose()` appelle la méthode protégée `Dispose(Boolean)` méthode avec le `disposing` paramètre défini sur `true`. <xref:System.Object.Finalize%2A> appelle `Dispose` avec `disposing` défini sur `false`.  
  
 Si le paramètre `disposing` a la valeur `true`, cette méthode libère toutes les ressources détenues par les objets managés référencés par ce <xref:System.ComponentModel.Design.DesignerActionService>. Cette méthode appelle la méthode `Dispose()` de chaque objet référencé.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see langword="Dispose" /> peut être appelée plusieurs fois par d’autres objets. Lors de la substitution <see langword="Dispose(Boolean)" /> veillez à ne pas référencer des objets qui ont été supprimés lors d’un appel précédent à <see langword="Dispose" />. Pour plus d’informations sur l’implémentation <see langword="Dispose(Boolean)" />, consultez [implémentation d’une méthode Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).  Pour plus d’informations sur <see langword="Dispose" /> et <see cref="M:System.Object.Finalize" />, consultez [de nettoyage des ressources non managées](~/docs/standard/garbage-collection/unmanaged.md) et [substitution de la méthode Finalize](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).</para>
        </block>
        <altmember cref="Overload:System.ComponentModel.Design.IServiceContainer.RemoveService" />
        <altmember cref="T:System.ComponentModel.Design.IComponentChangeService" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetComponentActions">
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Retourne la collection de listes d'éléments de balises actives associée à un composant.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetComponentActions">
      <MemberSignature Language="C#" Value="public System.ComponentModel.Design.DesignerActionListCollection GetComponentActions (System.ComponentModel.IComponent component);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.ComponentModel.Design.DesignerActionListCollection GetComponentActions(class System.ComponentModel.IComponent component) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionService.GetComponentActions(System.ComponentModel.IComponent)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetComponentActions (component As IComponent) As DesignerActionListCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ComponentModel::Design::DesignerActionListCollection ^ GetComponentActions(System::ComponentModel::IComponent ^ component);" />
      <MemberSignature Language="F#" Value="member this.GetComponentActions : System.ComponentModel.IComponent -&gt; System.ComponentModel.Design.DesignerActionListCollection" Usage="designerActionService.GetComponentActions component" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Design.DesignerActionListCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
      </Parameters>
      <Docs>
        <param name="component">Composant auquel les balises actives sont associées.</param>
        <summary>Retourne la collection de listes d'éléments de balises actives associée à un composant.</summary>
        <returns>Collection de balises actives du composant spécifié.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.ComponentModel.Design.DesignerActionService.GetComponentActions%2A> méthode équivaut à un appel à la <xref:System.ComponentModel.Design.DesignerActionService.GetComponentActions%28System.ComponentModel.IComponent%2CSystem.ComponentModel.Design.ComponentActionsType%29> à l’aide de la méthode un `type` paramètre de <xref:System.ComponentModel.Design.ComponentActionsType.All>. Par conséquent, la collection retournée contient les listes push et pull de balises actives.  
  
 Retourné <xref:System.ComponentModel.Design.DesignerActionListCollection> est l’union des listes d’éléments ajoutés via la <xref:System.ComponentModel.Design.DesignerActionService.Add%2A> méthodes et des listes obtenues à partir de la <xref:System.ComponentModel.Design.DesignerCommandSet> instance obtenue à partir du site du composant.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="comp" /> est <see langword="null" />.</exception>
        <altmember cref="M:System.ComponentModel.Design.DesignerActionService.GetComponentDesignerActions(System.ComponentModel.IComponent,System.ComponentModel.Design.DesignerActionListCollection)" />
        <altmember cref="M:System.ComponentModel.Design.DesignerActionService.GetComponentServiceActions(System.ComponentModel.IComponent,System.ComponentModel.Design.DesignerActionListCollection)" />
        <altmember cref="Overload:System.ComponentModel.Design.DesignerActionService.Add" />
        <altmember cref="T:System.ComponentModel.Design.DesignerCommandSet" />
      </Docs>
    </Member>
    <Member MemberName="GetComponentActions">
      <MemberSignature Language="C#" Value="public virtual System.ComponentModel.Design.DesignerActionListCollection GetComponentActions (System.ComponentModel.IComponent component, System.ComponentModel.Design.ComponentActionsType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ComponentModel.Design.DesignerActionListCollection GetComponentActions(class System.ComponentModel.IComponent component, valuetype System.ComponentModel.Design.ComponentActionsType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionService.GetComponentActions(System.ComponentModel.IComponent,System.ComponentModel.Design.ComponentActionsType)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetComponentActions (component As IComponent, type As ComponentActionsType) As DesignerActionListCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::ComponentModel::Design::DesignerActionListCollection ^ GetComponentActions(System::ComponentModel::IComponent ^ component, System::ComponentModel::Design::ComponentActionsType type);" />
      <MemberSignature Language="F#" Value="abstract member GetComponentActions : System.ComponentModel.IComponent * System.ComponentModel.Design.ComponentActionsType -&gt; System.ComponentModel.Design.DesignerActionListCollection&#xA;override this.GetComponentActions : System.ComponentModel.IComponent * System.ComponentModel.Design.ComponentActionsType -&gt; System.ComponentModel.Design.DesignerActionListCollection" Usage="designerActionService.GetComponentActions (component, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Design.DesignerActionListCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
        <Parameter Name="type" Type="System.ComponentModel.Design.ComponentActionsType" />
      </Parameters>
      <Docs>
        <param name="component">Composant auquel les balises actives sont associées.</param>
        <param name="type">
          <see cref="T:System.ComponentModel.Design.ComponentActionsType" /> avec lequel filtrer les balises actives associées.</param>
        <summary>Retourne la collection de listes d'éléments de balises actives du type spécifié associée à un composant.</summary>
        <returns>Collection de balises actives du type spécifié pour le composant spécifié.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette version surchargée <xref:System.ComponentModel.Design.DesignerActionService.GetComponentActions%2A> méthode filtre sur la `type` paramètre, qui peut avoir l’une des valeurs suivantes.  
  
|Value|Description |  
|-----------|-----------------|  
|<xref:System.ComponentModel.Design.ComponentActionsType.All>|Toutes les balises actives associées.|  
|<xref:System.ComponentModel.Design.ComponentActionsType.Component>|Balises actives du modèle d’extraction uniquement.|  
|<xref:System.ComponentModel.Design.ComponentActionsType.Service>|Balises actives du modèle push uniquement.|  
  
 Si le concepteur associé d’un composant ne fournit pas une liste de balises actives de modèle d’extraction, puis le <xref:System.ComponentModel.Design.DesignerActionService.GetComponentActions%2A> méthode utilisera à la place des éléments de menu contextuel au moment du design du concepteur à partir de la <xref:System.ComponentModel.Design.ComponentDesigner.Verbs%2A> propriété.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="comp" /> est <see langword="null" />.</exception>
        <altmember cref="M:System.ComponentModel.Design.DesignerActionService.GetComponentDesignerActions(System.ComponentModel.IComponent,System.ComponentModel.Design.DesignerActionListCollection)" />
        <altmember cref="M:System.ComponentModel.Design.DesignerActionService.GetComponentServiceActions(System.ComponentModel.IComponent,System.ComponentModel.Design.DesignerActionListCollection)" />
        <altmember cref="T:System.ComponentModel.Design.DesignerActionListCollection" />
        <altmember cref="T:System.ComponentModel.Design.DesignerVerb" />
        <altmember cref="T:System.ComponentModel.Design.ComponentActionsType" />
      </Docs>
    </Member>
    <Member MemberName="GetComponentDesignerActions">
      <MemberSignature Language="C#" Value="protected virtual void GetComponentDesignerActions (System.ComponentModel.IComponent component, System.ComponentModel.Design.DesignerActionListCollection actionLists);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GetComponentDesignerActions(class System.ComponentModel.IComponent component, class System.ComponentModel.Design.DesignerActionListCollection actionLists) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionService.GetComponentDesignerActions(System.ComponentModel.IComponent,System.ComponentModel.Design.DesignerActionListCollection)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GetComponentDesignerActions (component As IComponent, actionLists As DesignerActionListCollection)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void GetComponentDesignerActions(System::ComponentModel::IComponent ^ component, System::ComponentModel::Design::DesignerActionListCollection ^ actionLists);" />
      <MemberSignature Language="F#" Value="abstract member GetComponentDesignerActions : System.ComponentModel.IComponent * System.ComponentModel.Design.DesignerActionListCollection -&gt; unit&#xA;override this.GetComponentDesignerActions : System.ComponentModel.IComponent * System.ComponentModel.Design.DesignerActionListCollection -&gt; unit" Usage="designerActionService.GetComponentDesignerActions (component, actionLists)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
        <Parameter Name="actionLists" Type="System.ComponentModel.Design.DesignerActionListCollection" />
      </Parameters>
      <Docs>
        <param name="component">Composant auquel les balises actives sont associées.</param>
        <param name="actionLists">Collection à laquelle ajouter les balises actives associées.</param>
        <summary>Récupère les balises actives de modèle d'extraction associées à un composant.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.ComponentModel.Design.DesignerActionService.GetComponentDesignerActions%2A> méthode est une méthode d’assistance pour la <xref:System.ComponentModel.Design.DesignerActionService.GetComponentActions%2A> méthodes. <xref:System.ComponentModel.Design.DesignerActionService.GetComponentDesignerActions%2A> recherche du modèle d’extraction intelligente des balises de type <xref:System.ComponentModel.Design.ComponentActionsType.Component>, puis ajoute ces fourni `actionLists` collection.  
  
 Si le développeur du composant ne fournit pas explicitement une collection de balises actives via la <xref:System.ComponentModel.Design.ComponentDesigner.ActionLists%2A> propriété de son concepteur, cette méthode réutilise les entrées de menu contextuel au moment du design, obtenues via le <xref:System.ComponentModel.Design.ComponentDesigner.Verbs%2A> propriété de la concepteur.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Au moins l’un des deux paramètres a la valeur <see langword="null" />.</exception>
        <altmember cref="Overload:System.ComponentModel.Design.DesignerActionService.GetComponentActions" />
        <altmember cref="M:System.ComponentModel.Design.DesignerActionService.GetComponentServiceActions(System.ComponentModel.IComponent,System.ComponentModel.Design.DesignerActionListCollection)" />
        <altmember cref="P:System.ComponentModel.Design.ComponentDesigner.ActionLists" />
        <altmember cref="P:System.ComponentModel.Design.ComponentDesigner.Verbs" />
      </Docs>
    </Member>
    <Member MemberName="GetComponentServiceActions">
      <MemberSignature Language="C#" Value="protected virtual void GetComponentServiceActions (System.ComponentModel.IComponent component, System.ComponentModel.Design.DesignerActionListCollection actionLists);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GetComponentServiceActions(class System.ComponentModel.IComponent component, class System.ComponentModel.Design.DesignerActionListCollection actionLists) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionService.GetComponentServiceActions(System.ComponentModel.IComponent,System.ComponentModel.Design.DesignerActionListCollection)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GetComponentServiceActions (component As IComponent, actionLists As DesignerActionListCollection)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void GetComponentServiceActions(System::ComponentModel::IComponent ^ component, System::ComponentModel::Design::DesignerActionListCollection ^ actionLists);" />
      <MemberSignature Language="F#" Value="abstract member GetComponentServiceActions : System.ComponentModel.IComponent * System.ComponentModel.Design.DesignerActionListCollection -&gt; unit&#xA;override this.GetComponentServiceActions : System.ComponentModel.IComponent * System.ComponentModel.Design.DesignerActionListCollection -&gt; unit" Usage="designerActionService.GetComponentServiceActions (component, actionLists)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
        <Parameter Name="actionLists" Type="System.ComponentModel.Design.DesignerActionListCollection" />
      </Parameters>
      <Docs>
        <param name="component">Composant auquel les balises actives sont associées.</param>
        <param name="actionLists">Collection à laquelle ajouter les balises actives associées.</param>
        <summary>Récupère les balises actives de modèle push associées à un composant.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.ComponentModel.Design.DesignerActionService.GetComponentServiceActions%2A> méthode est une méthode d’assistance pour la <xref:System.ComponentModel.Design.DesignerActionService.GetComponentActions%2A> méthodes. Il recherche des balises actives de modèle d’émission de type <xref:System.ComponentModel.Design.ComponentActionsType.Service>, puis ajoute ces fourni `actionLists` collection.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Au moins l’un des deux paramètres a la valeur <see langword="null" />.</exception>
        <altmember cref="Overload:System.ComponentModel.Design.DesignerActionService.GetComponentActions" />
        <altmember cref="M:System.ComponentModel.Design.DesignerActionService.GetComponentDesignerActions(System.ComponentModel.IComponent,System.ComponentModel.Design.DesignerActionListCollection)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Remove">
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Dissocie une ou plusieurs listes de balises actives d'un ou de plusieurs composants.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (System.ComponentModel.Design.DesignerActionList actionList);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.ComponentModel.Design.DesignerActionList actionList) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionService.Remove(System.ComponentModel.Design.DesignerActionList)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (actionList As DesignerActionList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::ComponentModel::Design::DesignerActionList ^ actionList);" />
      <MemberSignature Language="F#" Value="member this.Remove : System.ComponentModel.Design.DesignerActionList -&gt; unit" Usage="designerActionService.Remove actionList" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="actionList" Type="System.ComponentModel.Design.DesignerActionList" />
      </Parameters>
      <Docs>
        <param name="actionList">Liste de balises actives à supprimer.</param>
        <summary>Supprime la liste de balises actives spécifiée de tous les composants gérés par le service actuel.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette version de la <xref:System.ComponentModel.Design.DesignerActionService.Remove%2A> méthode est généralement utilisée par les développeurs d’outils de conception, car les développeurs de composants ne savent pas quels autres composants existent dans l’espace de conception en cours.  
  
 Si la réussite, cette méthode déclenche la <xref:System.ComponentModel.Design.DesignerActionService.DesignerActionListsChanged> événement.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="actionList" /> est <see langword="null" />.</exception>
        <altmember cref="Overload:System.ComponentModel.Design.DesignerActionService.Add" />
        <altmember cref="M:System.ComponentModel.Design.DesignerActionUIService.HideUI(System.ComponentModel.IComponent)" />
        <altmember cref="M:System.ComponentModel.Design.DesignerActionService.Clear" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (System.ComponentModel.IComponent comp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.ComponentModel.IComponent comp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionService.Remove(System.ComponentModel.IComponent)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (comp As IComponent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::ComponentModel::IComponent ^ comp);" />
      <MemberSignature Language="F#" Value="member this.Remove : System.ComponentModel.IComponent -&gt; unit" Usage="designerActionService.Remove comp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comp" Type="System.ComponentModel.IComponent" />
      </Parameters>
      <Docs>
        <param name="comp">Composant à dissocier des balises actives.</param>
        <summary>Supprime toutes les listes de balises actives associées au composant spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En cas de réussite, le <xref:System.ComponentModel.Design.DesignerActionService.Remove%2A> méthode déclenche la <xref:System.ComponentModel.Design.DesignerActionService.DesignerActionListsChanged> événement.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="comp" /> est <see langword="null" />.</exception>
        <altmember cref="Overload:System.ComponentModel.Design.DesignerActionService.Add" />
        <altmember cref="M:System.ComponentModel.Design.DesignerActionUIService.HideUI(System.ComponentModel.IComponent)" />
        <altmember cref="M:System.ComponentModel.Design.DesignerActionService.Clear" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (System.ComponentModel.IComponent comp, System.ComponentModel.Design.DesignerActionList actionList);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.ComponentModel.IComponent comp, class System.ComponentModel.Design.DesignerActionList actionList) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignerActionService.Remove(System.ComponentModel.IComponent,System.ComponentModel.Design.DesignerActionList)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (comp As IComponent, actionList As DesignerActionList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::ComponentModel::IComponent ^ comp, System::ComponentModel::Design::DesignerActionList ^ actionList);" />
      <MemberSignature Language="F#" Value="member this.Remove : System.ComponentModel.IComponent * System.ComponentModel.Design.DesignerActionList -&gt; unit" Usage="designerActionService.Remove (comp, actionList)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comp" Type="System.ComponentModel.IComponent" />
        <Parameter Name="actionList" Type="System.ComponentModel.Design.DesignerActionList" />
      </Parameters>
      <Docs>
        <param name="comp">Composant à dissocier des balises actives.</param>
        <param name="actionList">Liste de balises actives à supprimer.</param>
        <summary>Supprime la liste de balises actives spécifiée du composant spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En cas de réussite, le <xref:System.ComponentModel.Design.DesignerActionService.Remove%2A> méthode déclenche la <xref:System.ComponentModel.Design.DesignerActionService.DesignerActionListsChanged> événement.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Au moins l’un des deux paramètres a la valeur <see langword="null" />.</exception>
        <altmember cref="Overload:System.ComponentModel.Design.DesignerActionService.Add" />
        <altmember cref="M:System.ComponentModel.Design.DesignerActionUIService.HideUI(System.ComponentModel.IComponent)" />
        <altmember cref="M:System.ComponentModel.Design.DesignerActionService.Clear" />
      </Docs>
    </Member>
  </Members>
</Type>