<Type Name="ITypeDescriptorFilterService" FullName="System.ComponentModel.Design.ITypeDescriptorFilterService">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="560d1d0f3f0ac591966c66d848c794269545cf1d" />
    <Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="11/17/2018" />
    <Meta Name="ms.locfileid" Value="51919430" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface ITypeDescriptorFilterService" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ITypeDescriptorFilterService" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Design.ITypeDescriptorFilterService" />
  <TypeSignature Language="VB.NET" Value="Public Interface ITypeDescriptorFilterService" />
  <TypeSignature Language="C++ CLI" Value="public interface class ITypeDescriptorFilterService" />
  <TypeSignature Language="F#" Value="type ITypeDescriptorFilterService = interface" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Fournit une interface permettant de modifier l'ensemble des descripteurs membres d'un composant en mode design.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.ComponentModel.Design.ITypeDescriptorFilterService> fournit une interface qui autorise la modification des propriétés, des événements et des attributs de niveau de la classe d’un composant au moment du design. Cette modification se produit via l’ensemble de descripteurs qu’un composant fournit par le biais d’un <xref:System.ComponentModel.TypeDescriptor>. Le descripteur de type interroge le site d’un composant pour le <xref:System.ComponentModel.Design.ITypeDescriptorFilterService> de service et, si elle existe, le descripteur de type passe toutes les métadonnées qu’il a collectées à ce service. Le service peut ensuite modifier les métadonnées en ajout, suppression et modification des caractéristiques existantes du composant.  
  
 Par exemple, les propriétés d’un composant peuvent être modifiées via un appel à la <xref:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterProperties%2A> (méthode). Le service de filtre Obtient un dictionnaire qui contient les noms de propriétés et leurs descripteurs de propriété de type <xref:System.ComponentModel.PropertyDescriptor>. Les modifications sont implémentées à l’aide de la logique suivante.  
  
|Modification|Implémentation|  
|------------------|--------------------|  
|Suppression|Supprimer l’entrée correspondante dans le dictionnaire.|  
|Addition|Ajoutez l’entrée appropriée au dictionnaire.|  
|Modification|Appeler les méthodes de descripteur de propriété existant, remplacez l’entrée du descripteur de propriété associée ou remplacez la paire clé/valeur de propriété entière dans le dictionnaire.|  
  
 La valeur de retour de <xref:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterProperties%2A> détermine si ce jeu de propriétés est fixe. Si cette méthode retourne `true`, le <xref:System.ComponentModel.TypeDescriptor> pour ce composant peut mettre en cache les résultats. Ce cache est conservé jusqu'à ce que le composant soit récupéré par garbage collecté ou le <xref:System.ComponentModel.TypeDescriptor.Refresh%2A> méthode du descripteur de type est appelée.  
  
   
  
## Examples  
 L’exemple de code suivant illustre un concepteur qui utilise le <xref:System.ComponentModel.Design.ITypeDescriptorFilterService> pour filtrer la collection d’attributs de toute nouvelle ou existante <xref:System.Windows.Forms.Button> pour ajouter un attribut de concepteur pour un nouveau concepteur avant de charger ou de recharger le concepteur pour le bouton.  
  
 Pour utiliser l’exemple, ajoutez le code à un projet Windows Forms et charger les composants à partir de la bibliothèque de classes dans la boîte à outils.  
  
 Consultez également [procédure pas à pas : remplissage automatique de la boîte à outils avec des composants personnalisés](https://msdn.microsoft.com/library/fw694kde\(v=vs.110\).aspx).  
  
 Ajouter des boutons à votre formulaire. Ajouter un `ButtonDesignerFilterComponent` à votre formulaire, et il apparaîtra dans la barre d’état du composant. Le `ButtonDesignerFilterComponent` ajoutera un `ButtonDesignerFilterService`, qui implémente <xref:System.ComponentModel.Design.ITypeDescriptorFilterService>, comme un fournisseur de services en mode conception. Nouvelle ou existante <xref:System.Windows.Forms.Button> objets sur le formulaire commencera couleur selon un cycle après le `ButtonDesignerFilterService` remplace le concepteur pour chaque bouton nouveaux et existant avec un `ColorCycleButtonDesigner`. Les boutons changent de couleur cycle lorsque vous déplacez le pointeur de la souris au-dessus d’eux et vous pouvez également continuez le cycle ou réinitialisez les couleurs d’arrière-plan et de premier plan sur `MouseLeave` événements. Nouvelle <xref:System.Windows.Forms.Button> recevra des objets le `ColorCycleButtonDesigner` via la <xref:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterAttributes%2A> méthode de la `ButtonDesignerFilterService` qui a été chargé, jusqu'à ce que le `ButtonDesignerFilterComponent` est supprimé et remplace la version d’origine <xref:System.ComponentModel.Design.ITypeDescriptorFilterService>. Le `ColorCycleButton` classe dans cet exemple est un <xref:System.Windows.Forms.Button> associé à un `ColorCycleButtonDesigner`.  
  
 [!code-cpp[ITypeDescriptorFilterService#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ITypeDescriptorFilterService/CPP/source.cpp#1)]
 [!code-csharp[ITypeDescriptorFilterService#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ITypeDescriptorFilterService/CS/source.cs#1)]
 [!code-vb[ITypeDescriptorFilterService#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ITypeDescriptorFilterService/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Pour filtrer les descripteurs membres exposés par un <see cref="T:System.ComponentModel.TypeDescriptor" />, implémentez cette interface sur un composant et remplacez le <see cref="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterAttributes(System.ComponentModel.IComponent,System.Collections.IDictionary)" />, <see cref="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterEvents(System.ComponentModel.IComponent,System.Collections.IDictionary)" />, ou <see cref="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterProperties(System.ComponentModel.IComponent,System.Collections.IDictionary)" /> méthodes de cette classe pour filtrer les attributs, des événements ou des propriétés, respectivement.</para>
    </block>
    <altmember cref="T:System.ComponentModel.TypeDescriptor" />
    <altmember cref="T:System.ComponentModel.EventDescriptor" />
    <altmember cref="T:System.ComponentModel.PropertyDescriptor" />
    <altmember cref="T:System.Attribute" />
    <altmember cref="T:System.Collections.IDictionary" />
  </Docs>
  <Members>
    <Member MemberName="FilterAttributes">
      <MemberSignature Language="C#" Value="public bool FilterAttributes (System.ComponentModel.IComponent component, System.Collections.IDictionary attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool FilterAttributes(class System.ComponentModel.IComponent component, class System.Collections.IDictionary attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterAttributes(System.ComponentModel.IComponent,System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Function FilterAttributes (component As IComponent, attributes As IDictionary) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool FilterAttributes(System::ComponentModel::IComponent ^ component, System::Collections::IDictionary ^ attributes);" />
      <MemberSignature Language="F#" Value="abstract member FilterAttributes : System.ComponentModel.IComponent * System.Collections.IDictionary -&gt; bool" Usage="iTypeDescriptorFilterService.FilterAttributes (component, attributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
        <Parameter Name="attributes" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="component">Composant dont les attributs doivent être filtrés.</param>
        <param name="attributes">Dictionnaire d'attributs pouvant être modifiés.</param>
        <summary>Filtre les attributs exposés par un composant à l'aide de <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
        <returns>
          <see langword="true" /> si l'ensemble d'attributs filtrés doit être mis en cache ; <see langword="false" /> si le service de filtre doit interroger à nouveau.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode est appelée lorsqu’un utilisateur demande un ensemble d’attributs pour un composant. Les attributs sont ajoutés au dictionnaire avec l’attribut <xref:System.Attribute.TypeId%2A> en tant que les clés et l’attribut réel en tant que la valeur. Les implémenteurs de ce service peuvent ajouter, supprimer ou modifier des entrées d’attribut existantes dans le dictionnaire.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Retourner <see langword="false" /> uniquement lorsque cela est nécessaire, étant donné que les requêtes pour le service de filtre de descripteur de type peuvent diminuer les performances.</para>
        </block>
        <altmember cref="T:System.Attribute" />
        <altmember cref="P:System.Attribute.TypeId" />
        <altmember cref="T:System.Collections.IDictionary" />
      </Docs>
    </Member>
    <Member MemberName="FilterEvents">
      <MemberSignature Language="C#" Value="public bool FilterEvents (System.ComponentModel.IComponent component, System.Collections.IDictionary events);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool FilterEvents(class System.ComponentModel.IComponent component, class System.Collections.IDictionary events) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterEvents(System.ComponentModel.IComponent,System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Function FilterEvents (component As IComponent, events As IDictionary) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool FilterEvents(System::ComponentModel::IComponent ^ component, System::Collections::IDictionary ^ events);" />
      <MemberSignature Language="F#" Value="abstract member FilterEvents : System.ComponentModel.IComponent * System.Collections.IDictionary -&gt; bool" Usage="iTypeDescriptorFilterService.FilterEvents (component, events)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
        <Parameter Name="events" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="component">Composant dont les événements doivent être filtrés.</param>
        <param name="events">Dictionnaire d'événements pouvant être modifiés.</param>
        <summary>Filtre les événements exposés par un composant à l'aide de <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
        <returns>
          <see langword="true" /> si l'ensemble d'événements filtrés doit être mis en cache ; <see langword="false" /> si le service de filtre doit interroger à nouveau.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode est appelée lorsqu’un utilisateur demande un ensemble d’événements pour un composant. Les événements sont ajoutés au dictionnaire avec les noms d’événements, ainsi que les clés correspondantes <xref:System.ComponentModel.EventDescriptor> objets en tant que les valeurs. Les implémenteurs de ce service peuvent ajouter, supprimer ou modifier des entrées d’événement dans le dictionnaire.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Retourner <see langword="false" /> uniquement lorsque cela est nécessaire, étant donné que les requêtes pour le service de filtre de descripteur de type peuvent diminuer les performances.</para>
        </block>
        <altmember cref="T:System.ComponentModel.EventDescriptor" />
        <altmember cref="T:System.Collections.IDictionary" />
      </Docs>
    </Member>
    <Member MemberName="FilterProperties">
      <MemberSignature Language="C#" Value="public bool FilterProperties (System.ComponentModel.IComponent component, System.Collections.IDictionary properties);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool FilterProperties(class System.ComponentModel.IComponent component, class System.Collections.IDictionary properties) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterProperties(System.ComponentModel.IComponent,System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Function FilterProperties (component As IComponent, properties As IDictionary) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool FilterProperties(System::ComponentModel::IComponent ^ component, System::Collections::IDictionary ^ properties);" />
      <MemberSignature Language="F#" Value="abstract member FilterProperties : System.ComponentModel.IComponent * System.Collections.IDictionary -&gt; bool" Usage="iTypeDescriptorFilterService.FilterProperties (component, properties)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
        <Parameter Name="properties" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="component">Composant dont les propriétés doivent être filtrées.</param>
        <param name="properties">Dictionnaire de propriétés pouvant être modifiées.</param>
        <summary>Filtre les propriétés exposées par un composant à l'aide de <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
        <returns>
          <see langword="true" /> si l'ensemble de propriétés filtrées doit être mis en cache ; <see langword="false" /> si le service de filtre doit interroger à nouveau.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode est appelée lorsqu’un utilisateur demande un ensemble de propriétés pour un composant. Les propriétés sont ajoutées au dictionnaire avec les noms de propriété ainsi que les clés correspondantes <xref:System.ComponentModel.PropertyDescriptor> objets en tant que les valeurs. Les implémenteurs de ce service peuvent ajouter, supprimer ou modifier les entrées de propriété dans le dictionnaire.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Retourner <see langword="false" /> uniquement lorsque cela est nécessaire, étant donné que les requêtes pour le service de filtre de descripteur de type peuvent diminuer les performances.</para>
        </block>
        <altmember cref="T:System.ComponentModel.PropertyDescriptor" />
        <altmember cref="T:System.Collections.IDictionary" />
      </Docs>
    </Member>
  </Members>
</Type>