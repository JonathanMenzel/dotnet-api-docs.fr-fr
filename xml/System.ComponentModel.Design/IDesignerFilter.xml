<Type Name="IDesignerFilter" FullName="System.ComponentModel.Design.IDesignerFilter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2dbad6fdfb09f4fc16d8d85beafb69dfaa4f5eea" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="37696278" /></Metadata><TypeSignature Language="C#" Value="public interface IDesignerFilter" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDesignerFilter" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Design.IDesignerFilter" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDesignerFilter" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDesignerFilter" />
  <TypeSignature Language="F#" Value="type IDesignerFilter = interface" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Fournit une interface permettant à un concepteur d'accéder et de filtrer les dictionnaires d'un <see cref="T:System.ComponentModel.TypeDescriptor" /> qui stocke les descripteurs de propriétés, d'attributs et d'événements qu'un concepteur de composant peut exposer dans l'environnement au moment du design.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ComponentModel.Design.IDesignerFilter> permet à un concepteur de filtrer le jeu de descripteurs de propriété, d’attribut et d’événement qui expose par le composant associé à l’aide d’un <xref:System.ComponentModel.TypeDescriptor>. Les méthodes de cette interface dont les noms commencent par `Pre` sont appelées immédiatement avant les méthodes dont les noms commencent par `Post`.  
  
 Si vous souhaitez ajouter l’attribut, d’événement ou de descripteurs de propriété, utilisez un <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes%2A>, <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterEvents%2A>, ou <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterProperties%2A> (méthode).  
  
 Si vous souhaitez modifier ou supprimer l’attribut, d’événement ou de descripteurs de propriété, utilisez un <xref:System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes%2A>, <xref:System.ComponentModel.Design.IDesignerFilter.PostFilterEvents%2A>, ou <xref:System.ComponentModel.Design.IDesignerFilter.PostFilterProperties%2A> (méthode).  
  
   
  
## Examples  
 L’exemple suivant illustre une substitution de <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterProperties%2A> qui ajoute une propriété du concepteur à la fenêtre Propriétés lorsque le contrôle du concepteur est sélectionné au moment du design. Consultez l’exemple de la <xref:System.Windows.Forms.Design.ControlDesigner> classe pour un exemple de concepteur complet qui utilise le <xref:System.ComponentModel.Design.IDesignerFilter> interface.  
  
 [!code-cpp[ControlDesignerExample#2](~/samples/snippets/cpp/VS_Snippets_Winforms/ControlDesignerExample/CPP/controldesignerexample.cpp#2)]
 [!code-csharp[ControlDesignerExample#2](~/samples/snippets/csharp/VS_Snippets_Winforms/ControlDesignerExample/CS/controldesignerexample.cs#2)]
 [!code-vb[ControlDesignerExample#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ControlDesignerExample/VB/controldesignerexample.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.Design.ITypeDescriptorFilterService" />
    <altmember cref="T:System.ComponentModel.TypeDescriptor" />
  </Docs>
  <Members>
    <Member MemberName="PostFilterAttributes">
      <MemberSignature Language="C#" Value="public void PostFilterAttributes (System.Collections.IDictionary attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PostFilterAttributes(class System.Collections.IDictionary attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PostFilterAttributes (attributes As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PostFilterAttributes(System::Collections::IDictionary ^ attributes);" />
      <MemberSignature Language="F#" Value="abstract member PostFilterAttributes : System.Collections.IDictionary -&gt; unit" Usage="iDesignerFilter.PostFilterAttributes attributes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributes" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="attributes">Objets <see cref="T:System.Attribute" /> de la classe du composant. Les clés du dictionnaire d'attributs sont les valeurs <see cref="P:System.Attribute.TypeId" /> des attributs.</param>
        <summary>Lorsqu'elle est substituée dans une classe dérivée, permet à un concepteur de modifier ou de supprimer des éléments de l'ensemble d'attributs qu'il expose par le biais d'un <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode fournit un moyen pour modifier ou supprimer des éléments au sein du dictionnaire d’attributs que le composant associé du concepteur implémentant cette interface expose par le biais une <xref:System.ComponentModel.TypeDescriptor>.  
  
 Les clés du dictionnaire d’attributs sont les identificateurs de type des attributs. Les objets sont de type <xref:System.Attribute>. Cette méthode est appelée immédiatement après <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes%2A>.  
  
 L’ID de type d’un attribut peut être n’importe quel objet. Par défaut, <xref:System.Attribute> retourne son <xref:System.Type> comme valeur de son <xref:System.Attribute.TypeId%2A> propriété. Vous pouvez vérifier le <xref:System.Attribute.TypeId%2A> d’un attribut dans le dictionnaire pour l’équivalence avec un connu <xref:System.Attribute.TypeId%2A> pour un attribut pour identifier ou utiliser <xref:System.Reflection> pour identifier l’objet de l’attribut lui-même.  
  
 Lorsqu’un attribut ayant le même <xref:System.Attribute.TypeId%2A> comme un attribut existant ou hérité est ajouté à un composant, le nouvel attribut remplace l’ancien. Pour beaucoup d’attributs, un nouvel attribut du même type remplace n’importe quel attribut du type précédent. Toutefois, certains types d’attributs retournent un <xref:System.Attribute.TypeId%2A> qui distingue l’attribut de manière sélective. Par exemple, afin de fournir différents types de concepteurs simultanément actifs pour un type, comme un <xref:System.ComponentModel.Design.IRootDesigner> et un <xref:System.ComponentModel.Design.IDesigner>, le <xref:System.ComponentModel.DesignerAttribute> classe retourne un <xref:System.Attribute.TypeId%2A> qui identifie de façon unique l’attribut et le Concepteur de base type. Le <xref:System.ComponentModel.DesignerAttribute> constructeur vous permet de spécifier le type de Concepteur de base du concepteur en plus de son type spécifique, et <xref:System.ComponentModel.DesignerAttribute> retourne un <xref:System.Attribute.TypeId%2A> qui indique ce nom. Par conséquent, lorsque vous ajoutez un nouveau <xref:System.ComponentModel.DesignerAttribute> avec un type de Concepteur de base du même type que le type de Concepteur de base de configuration existant <xref:System.ComponentModel.DesignerAttribute>, l’ancien attribut est remplacé par le nouvel attribut.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Vous pouvez filtrer directement le dictionnaire qui est accessible via la <paramref name="attributes" /> paramètre, ou vous pouvez la laisser inchangée. Si vous substituez cette méthode, appelez l’implémentation de base après avoir effectué votre propre filtrage.</para></block>
        <altmember cref="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterAttributes(System.ComponentModel.IComponent,System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="PostFilterEvents">
      <MemberSignature Language="C#" Value="public void PostFilterEvents (System.Collections.IDictionary events);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PostFilterEvents(class System.Collections.IDictionary events) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IDesignerFilter.PostFilterEvents(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PostFilterEvents (events As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PostFilterEvents(System::Collections::IDictionary ^ events);" />
      <MemberSignature Language="F#" Value="abstract member PostFilterEvents : System.Collections.IDictionary -&gt; unit" Usage="iDesignerFilter.PostFilterEvents events" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="events" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="events">Objets <see cref="T:System.ComponentModel.EventDescriptor" /> représentant les événements de la classe du composant. Les clés du dictionnaire d'événements sont des noms d'événements.</param>
        <summary>Lorsqu'elle est substituée dans une classe dérivée, permet à un concepteur de modifier ou de supprimer des éléments de l'ensemble d'événements qu'il expose à l'aide d'un <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode fournit un moyen pour modifier ou supprimer des éléments au sein du dictionnaire d’événements qui sont exposées via un <xref:System.ComponentModel.TypeDescriptor>.  
  
 Les clés du dictionnaire d’événements sont les noms des événements. Les objets sont de type <xref:System.ComponentModel.EventDescriptor>. Cette méthode est appelée immédiatement après <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterEvents%2A>.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Vous pouvez filtrer directement le dictionnaire qui est accessible via la <paramref name="events" /> paramètre, ou vous pouvez la laisser inchangée. Si vous substituez cette méthode, appelez l’implémentation de base après avoir effectué votre propre filtrage.</para></block>
        <altmember cref="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterEvents(System.ComponentModel.IComponent,System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="PostFilterProperties">
      <MemberSignature Language="C#" Value="public void PostFilterProperties (System.Collections.IDictionary properties);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PostFilterProperties(class System.Collections.IDictionary properties) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IDesignerFilter.PostFilterProperties(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PostFilterProperties (properties As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PostFilterProperties(System::Collections::IDictionary ^ properties);" />
      <MemberSignature Language="F#" Value="abstract member PostFilterProperties : System.Collections.IDictionary -&gt; unit" Usage="iDesignerFilter.PostFilterProperties properties" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="properties" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="properties">Objets <see cref="T:System.ComponentModel.PropertyDescriptor" /> représentant les propriétés de la classe du composant. Les clés du dictionnaire de propriétés sont des noms de propriétés.</param>
        <summary>Lorsqu'elle est substituée dans une classe dérivée, permet à un concepteur de modifier ou de supprimer des éléments de l'ensemble de propriétés qu'il expose à l'aide d'un <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode fournit un moyen pour modifier ou supprimer des éléments au sein du dictionnaire de propriétés qui sont exposées via un <xref:System.ComponentModel.TypeDescriptor>.  
  
 Les clés dans le dictionnaire de propriétés sont les noms des propriétés. Les objets sont de type <xref:System.ComponentModel.PropertyDescriptor>. Cette méthode est appelée immédiatement après <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterProperties%2A>.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Vous pouvez filtrer directement le dictionnaire qui est accessible via la <paramref name="properties" /> paramètre, ou vous pouvez la laisser inchangée. Si vous substituez cette méthode, appelez l’implémentation de base après avoir effectué votre propre filtrage.</para></block>
        <altmember cref="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterProperties(System.ComponentModel.IComponent,System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="PreFilterAttributes">
      <MemberSignature Language="C#" Value="public void PreFilterAttributes (System.Collections.IDictionary attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PreFilterAttributes(class System.Collections.IDictionary attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PreFilterAttributes (attributes As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PreFilterAttributes(System::Collections::IDictionary ^ attributes);" />
      <MemberSignature Language="F#" Value="abstract member PreFilterAttributes : System.Collections.IDictionary -&gt; unit" Usage="iDesignerFilter.PreFilterAttributes attributes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributes" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="attributes">Objets <see cref="T:System.Attribute" /> de la classe du composant. Les clés du dictionnaire d'attributs sont les valeurs <see cref="P:System.Attribute.TypeId" /> des attributs.</param>
        <summary>Lorsqu'elle est substituée dans une classe dérivée, permet à un concepteur d'ajouter des éléments à l'ensemble d'attributs qu'il expose à l'aide d'un <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode fournit un moyen d’ajouter des éléments au dictionnaire d’attributs que le composant associé du concepteur implémentant cette interface expose par le biais une <xref:System.ComponentModel.TypeDescriptor>.  
  
 Les clés du dictionnaire d’attributs sont les identificateurs de type des attributs. Les objets sont de type <xref:System.Attribute>. Cette méthode est appelée immédiatement avant <xref:System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes%2A>.  
  
 L’ID de type d’un attribut peut être n’importe quel objet. Par défaut, <xref:System.Attribute> retourne son <xref:System.Type> comme valeur de son <xref:System.Attribute.TypeId%2A> propriété. Vous pouvez vérifier le <xref:System.Attribute.TypeId%2A> d’un attribut dans le dictionnaire pour l’équivalence avec un connu <xref:System.Attribute.TypeId%2A> pour un attribut pour identifier ou utiliser <xref:System.Reflection> pour identifier l’objet de l’attribut lui-même.  
  
 Lorsqu’un attribut ayant le même <xref:System.Attribute.TypeId%2A> comme un attribut existant ou hérité est ajouté à un composant, le nouvel attribut remplace l’ancien. Pour beaucoup d’attributs, un nouvel attribut du même type remplace n’importe quel attribut du type précédent. Toutefois, certains types d’attributs retournent un <xref:System.Attribute.TypeId%2A> qui distingue l’attribut de manière sélective. Par exemple, afin de fournir différents types de concepteurs simultanément actifs pour un type, comme un <xref:System.ComponentModel.Design.IRootDesigner> et un <xref:System.ComponentModel.Design.IDesigner>, le <xref:System.ComponentModel.DesignerAttribute> classe retourne un <xref:System.Attribute.TypeId%2A> qui identifie de façon unique l’attribut et le Concepteur de base type. Le <xref:System.ComponentModel.DesignerAttribute> constructeur vous permet de spécifier le type de Concepteur de base du concepteur en plus de son type spécifique, et <xref:System.ComponentModel.DesignerAttribute> retourne un <xref:System.Attribute.TypeId%2A> qui indique ce nom. Par conséquent, lorsque vous ajoutez un nouveau <xref:System.ComponentModel.DesignerAttribute> avec un type de Concepteur de base du même type que le type de Concepteur de base de configuration existant <xref:System.ComponentModel.DesignerAttribute>, l’ancien attribut est remplacé par le nouvel attribut.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Vous pouvez filtrer directement le dictionnaire qui est accessible via la <paramref name="attributes" /> paramètre, ou vous pouvez la laisser inchangée. Si vous substituez cette méthode, appelez l’implémentation de base après avoir effectué votre propre filtrage.</para></block>
        <altmember cref="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterAttributes(System.ComponentModel.IComponent,System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="PreFilterEvents">
      <MemberSignature Language="C#" Value="public void PreFilterEvents (System.Collections.IDictionary events);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PreFilterEvents(class System.Collections.IDictionary events) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IDesignerFilter.PreFilterEvents(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PreFilterEvents (events As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PreFilterEvents(System::Collections::IDictionary ^ events);" />
      <MemberSignature Language="F#" Value="abstract member PreFilterEvents : System.Collections.IDictionary -&gt; unit" Usage="iDesignerFilter.PreFilterEvents events" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="events" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="events">Objets <see cref="T:System.ComponentModel.EventDescriptor" /> représentant les événements de la classe du composant. Les clés du dictionnaire d'événements sont des noms d'événements.</param>
        <summary>Lorsqu'elle est substituée dans une classe dérivée, permet à un concepteur d'ajouter des éléments à l'ensemble d'événements qu'il expose à l'aide d'un <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode fournit un moyen d’ajouter des éléments au dictionnaire d’événements qu’un concepteur expose via une <xref:System.ComponentModel.TypeDescriptor>.  
  
 Les clés du dictionnaire d’événements sont les noms des événements. Les objets sont de type <xref:System.ComponentModel.EventDescriptor>. Cette méthode est appelée immédiatement avant <xref:System.ComponentModel.Design.IDesignerFilter.PostFilterEvents%2A>.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Vous pouvez modifier directement le dictionnaire qui est accessible via la <paramref name="events" /> paramètre, ou vous pouvez la laisser inchangée. Si vous substituez cette méthode, appelez l’implémentation de base avant d’effectuer votre propre filtrage.</para></block>
        <altmember cref="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterEvents(System.ComponentModel.IComponent,System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="PreFilterProperties">
      <MemberSignature Language="C#" Value="public void PreFilterProperties (System.Collections.IDictionary properties);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PreFilterProperties(class System.Collections.IDictionary properties) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IDesignerFilter.PreFilterProperties(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PreFilterProperties (properties As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PreFilterProperties(System::Collections::IDictionary ^ properties);" />
      <MemberSignature Language="F#" Value="abstract member PreFilterProperties : System.Collections.IDictionary -&gt; unit" Usage="iDesignerFilter.PreFilterProperties properties" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="properties" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="properties">Objets <see cref="T:System.ComponentModel.PropertyDescriptor" /> représentant les propriétés de la classe du composant. Les clés du dictionnaire de propriétés sont des noms de propriétés.</param>
        <summary>Lorsqu'elle est substituée dans une classe dérivée, permet à un concepteur d'ajouter des éléments à l'ensemble de propriétés qu'il expose à l'aide d'un <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode fournit un moyen d’ajouter des éléments au dictionnaire de propriétés qu’un concepteur expose via une <xref:System.ComponentModel.TypeDescriptor>.  
  
 Les clés dans le dictionnaire de propriétés sont les noms des propriétés. Les objets sont de type <xref:System.ComponentModel.PropertyDescriptor>. Cette méthode est appelée immédiatement avant <xref:System.ComponentModel.Design.IDesignerFilter.PostFilterProperties%2A>.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Vous pouvez modifier directement le dictionnaire qui est accessible via la <paramref name="properties" /> paramètre, ou vous pouvez la laisser inchangée. Si vous substituez cette méthode, appelez l’implémentation de base avant d’effectuer votre propre filtrage.</para></block>
        <altmember cref="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterProperties(System.ComponentModel.IComponent,System.Collections.IDictionary)" />
      </Docs>
    </Member>
  </Members>
</Type>