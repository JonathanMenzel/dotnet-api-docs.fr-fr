<Type Name="Membership" FullName="System.Web.Security.Membership">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="fbfc664c3a94f1a8028a63444dbf2423e8f46edc" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37604897" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class Membership" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Membership extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Security.Membership" />
  <TypeSignature Language="VB.NET" Value="Public Class Membership" />
  <TypeSignature Language="C++ CLI" Value="public ref class Membership abstract sealed" />
  <TypeSignature Language="F#" Value="type Membership = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Validates user credentials and manages user settings. This class cannot be inherited.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.Security.Membership> classe est utilisée dans les applications ASP.NET pour valider les informations d’identification utilisateur et de gérer des paramètres utilisateur tels que les mots de passe et d’adresses de messagerie. Le <xref:System.Web.Security.Membership> classe peut être utilisée sur sa propre ou conjointement avec le <xref:System.Web.Security.FormsAuthentication> pour créer un système complet pour l’authentification des utilisateurs d’une application ou site Web. Le <xref:System.Web.UI.WebControls.Login> contrôle encapsule la <xref:System.Web.Security.Membership> classe pour fournir un mécanisme pratique pour valider les utilisateurs.  
  
> [!NOTE]
>  Si vous n’êtes pas familiarisé avec les fonctionnalités de l’appartenance d’ASP.NET, consultez [Introduction à l’appartenance](http://msdn.microsoft.com/library/79184d17-f4c7-4c9f-a073-cec4f5543980) avant de continuer. Pour obtenir la liste des autres rubriques relatives à l’appartenance, consultez [gestion des utilisateurs à l’aide de l’appartenance](http://msdn.microsoft.com/library/824c3a24-f0af-427c-a652-0d2d1e9397cd).  
  
 Le <xref:System.Web.Security.Membership> classe fournit des fonctionnalités pour :  
  
-   Création de nouveaux utilisateurs.  
  
-   Stockage des informations d’appartenance (noms d’utilisateur, les mots de passe, les adresses de messagerie et des données prise en charge) dans Microsoft SQL Server ou dans un autre magasin de données.  
  
-   Authentification des utilisateurs qui visitent votre site. Vous pouvez authentifier les utilisateurs par programmation, ou vous pouvez utiliser la <xref:System.Web.UI.WebControls.Login> contrôle pour créer un système d’authentification complet qui nécessite peu ou pas de code.  
  
-   La gestion des mots de passe, qui inclut la création, la modification, la récupération et la réinitialisation et ainsi de suite. Vous pouvez éventuellement configurer l’appartenance ASP.NET pour exiger une question de mot de passe et une réponse pour authentifier les demandes de réinitialisation ou la récupération de mot de passe pour les utilisateurs qui ont oublié leur mot de passe.  
  
 Bien que l’appartenance ASP.NET est une fonctionnalité autonome dans ASP.NET pour l’authentification, il peut être intégré à la gestion de rôle ASP.NET pour fournir des services d’autorisation pour votre site. L’appartenance peut également être intégrée à l’utilisateur ASP.NET <xref:System.Web.Profile> pour fournir une personnalisation spécifique à l’application qui peut être adaptée à des utilisateurs individuels. Pour plus d’informations, consultez [comprendre la gestion des rôles](http://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6) et [vue d’ensemble des propriétés de profil ASP.NET](http://msdn.microsoft.com/library/89439440-92ea-48c3-a4bd-dea40307899d).  
  
 Le <xref:System.Web.Security.Membership> classe s’appuie sur les fournisseurs d’appartenances pour communiquer avec une source de données. Le .NET Framework inclut un <xref:System.Web.Security.SqlMembershipProvider>, qui stocke des informations utilisateur dans une base de données Microsoft SQL Server et un <xref:System.Web.Security.ActiveDirectoryMembershipProvider>, ce qui vous permet de stocker les informations utilisateur sur un serveur Active Directory ou Active Directory Application Mode (ADAM). Vous pouvez également implémenter un fournisseur d’appartenances personnalisé pour communiquer avec une autre source de données qui peut être utilisée par le <xref:System.Web.Security.Membership> classe. Fournisseurs d’appartenances personnalisés héritent la <xref:System.Web.Security.MembershipProvider> classe abstraite. Pour plus d’informations, consultez [implémentant un fournisseur d’appartenances](http://msdn.microsoft.com/library/d8658b8e-c962-4f64-95e1-4acce35e4582).  
  
 Par défaut, l’appartenance ASP.NET est activé pour toutes les applications ASP.NET. Le fournisseur d’appartenances par défaut est le <xref:System.Web.Security.SqlMembershipProvider> et est spécifié dans la configuration d’ordinateur portant le nom `AspNetSqlProvider`. L’instance par défaut de la <xref:System.Web.Security.SqlMembershipProvider> est configuré pour se connecter à une instance locale de Microsoft SQL Server.  
  
 Vous pouvez modifier les paramètres par défaut pour spécifier un <xref:System.Web.Security.SqlMembershipProvider> autre que le `AspNetSqlProvider` instance en tant que le fournisseur par défaut ou spécifier une instance d’un fournisseur personnalisé en tant que le fournisseur par défaut pour votre application ASP.NET à l’aide du fichier Web.config. Vous pouvez spécifier la configuration de l’appartenance ASP.NET pour votre application Web à l’aide de la section de configuration dans le fichier Web.config. Vous pouvez utiliser le `providers` sous-section de la section pour spécifier un fournisseur d’appartenances autre que les fournisseurs par défaut. Par exemple, la section suivante supprime les fournisseurs d’appartenances par défaut de la configuration d’application actuelle et ajoute un nouveau fournisseur avec un nom de `SqlProvider` qui se connecte à une instance de SQL Server nommée `AspSqlServer`.  
  
```  
<configuration>  
  <connectionStrings>  
    <add name="SqlServices" connectionString="Data Source=AspSqlServer;Integrated Security=SSPI;Initial Catalog=aspnetdb;" />  
  </connectionStrings>  
  <system.web>  
    <membership defaultProvider="SqlProvider" userIsOnlineTimeWindow="20">  
      <providers>  
        <remove name="AspNetSqlProvider" />  
        <add name="SqlProvider"  
          type="System.Web.Security.SqlMembershipProvider"  
          connectionStringName="SqlServices"  
          enablePasswordRetrieval="false"  
          enablePasswordReset="true"  
          requiresQuestionAndAnswer="true"  
          passwordFormat="Hashed"  
          applicationName="/" />  
      </providers>  
    </membership>  
  </system.web>  
</configuration>  
```  
  
   
  
## Examples  
 L’exemple de code suivant montre la page de connexion pour une application ASP.NET configurée pour utiliser l’authentification par formulaire et l’appartenance ASP.NET. Si les informations d’identification d’utilisateur fourni ne sont pas valides, un message s’affiche à l’utilisateur. Sinon, l’utilisateur est redirigé vers l’URL demandée à l’origine à l’aide de la <xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A> (méthode).  
  
> [!NOTE]
>  Les contrôles de connexion ASP.NET (<xref:System.Web.UI.WebControls.Login>, <xref:System.Web.UI.WebControls.LoginView>, <xref:System.Web.UI.WebControls.LoginStatus>, <xref:System.Web.UI.WebControls.LoginName>, et <xref:System.Web.UI.WebControls.PasswordRecovery>) encapsulent virtuellement toute la logique nécessaire pour demander aux utilisateurs d’informations d’identification et de valider les informations d’identification dans le système d’appartenance et peut être utilisé à la place de la vérification par programmation à l’aide de la <xref:System.Web.Security.Membership> classe.  
  
> [!IMPORTANT]
>  Cet exemple contient une zone de texte qui accepte l’entrée d’utilisateur, ce qui constitue une menace de sécurité potentielle. Par défaut, les pages web ASP.NET vérifient que l’entrée d’utilisateur n’inclut pas de script ou d’éléments HTML. Pour plus d’informations, consultez [Vue d’ensemble des attaques de script](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[System.Web.Security.SqlMembershipProvider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/logincs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.SqlMembershipProvider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/loginvb.aspx#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ApplicationName">
      <MemberSignature Language="C#" Value="public static string ApplicationName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property string ApplicationName" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Membership.ApplicationName" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property ApplicationName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ ApplicationName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ApplicationName : string with get, set" Usage="System.Web.Security.Membership.ApplicationName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the name of the application.</summary>
        <value>Nom de l'application.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.Security.Membership.ApplicationName%2A> est utilisé pour identifier les utilisateurs spécifiques à une application. Autrement dit, le même nom d’utilisateur peut exister dans la base de données pour plusieurs applications ASP.NET qui spécifient une autre <xref:System.Web.Security.Membership.ApplicationName%2A>. Cela permet à plusieurs applications d’utiliser la même base de données pour stocker les informations utilisateur sans provoquer de conflits de nom d’utilisateur en double. Plusieurs applications ASP.NET peuvent également utiliser la même base de données utilisateur en spécifiant la même <xref:System.Web.Security.Membership.ApplicationName%2A>. Le <xref:System.Web.Security.Membership.ApplicationName%2A> peut être définie par programme ou de façon déclarative dans la configuration de l’application Web.  
  
> [!CAUTION]
>  Car une instance de fournisseur d’appartenances par défaut unique est utilisée pour toutes les demandes prises en charge par un <xref:System.Web.HttpApplication> de l’objet, plusieurs demandes peuvent s’exécuter simultanément et tentez de définir la <xref:System.Web.Security.Membership.ApplicationName%2A> valeur de propriété. Le <xref:System.Web.Security.Membership.ApplicationName%2A> propriété n’est pas thread-safe pour les écritures multiples et la modification du <xref:System.Web.Security.Membership.ApplicationName%2A> valeur de propriété peut entraîner un comportement inattendu pour plusieurs utilisateurs d’une application. Nous vous recommandons d’éviter d’écrire du code qui permet aux utilisateurs de définir la <xref:System.Web.Security.Membership.ApplicationName%2A> propriété, sauf si vous devez. Un exemple d’une application où le paramètre le <xref:System.Web.Security.Membership.ApplicationName%2A> propriété peut être requise est une application administrative qui gère les données d’appartenance de plusieurs applications. Ce type d’application doit être une application pour utilisateur unique et non une application Web.  
  
   
  
## Examples  
 L’exemple de code suivant montre l’élément dans la `system.web` section du fichier Web.config pour une application ASP.NET. Il indique que l’application utilise un <xref:System.Web.Security.SqlMembershipProvider> instance et définit les <xref:System.Web.Security.Membership.ApplicationName%2A> à `MyApplication`.  
  
```  
<membership defaultProvider="SqlProvider" userIsOnlineTimeWindow="20">  
  <providers>  
    <add name="SqlProvider"  
      type="System.Web.Security.SqlMembershipProvider"  
      connectionStringName="SqlServices"  
      enablePasswordRetrieval="true"  
      enablePasswordReset="false"  
      requiresQuestionAndAnswer="true"  
      passwordFormat="Encrypted"  
      applicationName="MyApplication" />  
  </providers>  
</membership>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateUser">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Adds a new user to the data store.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateUser">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipUser CreateUser (string username, string password);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.MembershipUser CreateUser(string username, string password) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.CreateUser(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateUser (username As String, password As String) As MembershipUser" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Security::MembershipUser ^ CreateUser(System::String ^ username, System::String ^ password);" />
      <MemberSignature Language="F#" Value="static member CreateUser : string * string -&gt; System.Web.Security.MembershipUser" Usage="System.Web.Security.Membership.CreateUser (username, password)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipUser</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="password" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">The user name for the new user.</param>
        <param name="password">The password for the new user.</param>
        <summary>Adds a new user to the data store.</summary>
        <returns>A <see cref="T:System.Web.Security.MembershipUser" /> object for the newly created user.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Membership.CreateUser%2A> Ajoute un nouvel utilisateur au magasin de données et retourne un <xref:System.Web.Security.MembershipUser> objet pour l’utilisateur nouvellement créé. Si la création de l’utilisateur échoue, un <xref:System.Web.Security.MembershipCreateUserException> est levée. Vous pouvez récupérer un <xref:System.Web.Security.MembershipCreateStatus> valeur à partir de la <xref:System.Web.Security.MembershipCreateUserException.StatusCode%2A> propriété de la <xref:System.Web.Security.MembershipCreateUserException> qui indique pourquoi la création de l’utilisateur a échoué.  
  
 Une fois qu’un utilisateur d’appartenance a été créé et que vous avez une référence à un <xref:System.Web.Security.MembershipUser> de l’objet pour cet utilisateur, vous pouvez modifier les paramètres pour cet utilisateur avec le <xref:System.Web.Security.MembershipUser> des méthodes publiques, telles que <xref:System.Web.Security.MembershipUser.ChangePasswordQuestionAndAnswer%2A> pour les applications où <xref:System.Web.Security.Membership.RequiresQuestionAndAnswer%2A> est `true`, ou en définissant les valeurs de propriété de la <xref:System.Web.Security.MembershipUser> objet et en les passant à la <xref:System.Web.Security.Membership.UpdateUser%2A> (méthode).  
  
 Si un utilisateur existe déjà dans la source de données pour l’application, vous pouvez obtenir un <xref:System.Web.Security.MembershipUser> objet pour l’utilisateur existant avec le <xref:System.Web.Security.Membership.GetUser%2A> (méthode).  
  
 Le <xref:System.Web.Security.SqlMembershipProvider> fournit une option pour exiger une adresse de messagerie unique pour chaque utilisateur. Si le <xref:System.Web.Security.SqlMembershipProvider.RequiresUniqueEmail%2A> propriété est `true`, vous devez utiliser une de le <xref:System.Web.Security.Membership.CreateUser%2A> surcharges qui vous permet de spécifier une adresse de messagerie pour l’utilisateur en cours de création. Sinon, un <xref:System.Web.Security.MembershipCreateUserException> sera levée.  
  
 Début et les espaces à droite sont supprimés de toutes les valeurs de paramètre.  
  
   
  
## Examples  
 L’exemple de code suivant crée un nouvel utilisateur pour une application ASP.NET configurée pour utiliser l’authentification par formulaire et l’appartenance ASP.NET. Si l’utilisateur n’est pas créé avec succès, un message s’affiche à l’utilisateur. Sinon, l’utilisateur est redirigé vers la page de connexion pour l’application.  
  
> [!IMPORTANT]
>  Cet exemple contient une zone de texte qui accepte l’entrée d’utilisateur, ce qui constitue une menace de sécurité potentielle. Par défaut, les pages web ASP.NET vérifient que l’entrée d’utilisateur n’inclut pas de script ou d’éléments HTML. Pour plus d’informations, consultez [Vue d’ensemble des attaques de script](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[System.Web.Security.Membership#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Membership/CS/createuser2cs.aspx#2)]
 [!code-aspx-vb[System.Web.Security.Membership#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Membership/VB/createuser2vb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.Security.MembershipCreateUserException">The user was not created. Check the <see cref="P:System.Web.Security.MembershipCreateUserException.StatusCode" /> property for a <see cref="T:System.Web.Security.MembershipCreateStatus" /> value.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateUser">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipUser CreateUser (string username, string password, string email);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.MembershipUser CreateUser(string username, string password, string email) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.CreateUser(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateUser (username As String, password As String, email As String) As MembershipUser" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Security::MembershipUser ^ CreateUser(System::String ^ username, System::String ^ password, System::String ^ email);" />
      <MemberSignature Language="F#" Value="static member CreateUser : string * string * string -&gt; System.Web.Security.MembershipUser" Usage="System.Web.Security.Membership.CreateUser (username, password, email)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipUser</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="email" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">The user name for the new user.</param>
        <param name="password">The password for the new user.</param>
        <param name="email">The email address for the new user.</param>
        <summary>Adds a new user with a specified email address to the data store.</summary>
        <returns>A <see cref="T:System.Web.Security.MembershipUser" /> object for the newly created user.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Membership.CreateUser%2A> Ajoute un nouvel utilisateur au magasin de données et retourne un <xref:System.Web.Security.MembershipUser> objet pour l’utilisateur nouvellement créé. Si la création de l’utilisateur échoue, un <xref:System.Web.Security.MembershipCreateUserException> est levée. Vous pouvez récupérer un <xref:System.Web.Security.MembershipCreateStatus> valeur à partir de la <xref:System.Web.Security.MembershipCreateUserException.StatusCode%2A> propriété de la <xref:System.Web.Security.MembershipCreateUserException> qui indique pourquoi la création de l’utilisateur a échoué.  
  
 Une fois qu’un utilisateur d’appartenance a été créé et que vous avez une référence à un <xref:System.Web.Security.MembershipUser> de l’objet pour cet utilisateur, vous pouvez modifier les paramètres pour cet utilisateur avec le <xref:System.Web.Security.MembershipUser> des méthodes publiques, telles que <xref:System.Web.Security.MembershipUser.ChangePasswordQuestionAndAnswer%2A> pour les applications où <xref:System.Web.Security.Membership.RequiresQuestionAndAnswer%2A> est `true`, ou en définissant les valeurs de propriété de la <xref:System.Web.Security.MembershipUser> objet et en les passant à la <xref:System.Web.Security.Membership.UpdateUser%2A> (méthode).  
  
 Si un utilisateur existe déjà dans la source de données pour l’application, vous pouvez obtenir un <xref:System.Web.Security.MembershipUser> objet pour l’utilisateur existant avec le <xref:System.Web.Security.Membership.GetUser%2A> (méthode).  
  
 Début et les espaces à droite sont supprimés de toutes les valeurs de paramètre.  
  
   
  
## Examples  
 L’exemple de code suivant crée un nouvel utilisateur pour une application ASP.NET configurée pour utiliser l’authentification par formulaire et l’appartenance ASP.NET. Si l’utilisateur n’est pas créé avec succès, un message s’affiche à l’utilisateur. Sinon, l’utilisateur est redirigé vers la page de connexion pour l’application.  
  
> [!IMPORTANT]
>  Cet exemple contient une zone de texte qui accepte l’entrée d’utilisateur, ce qui constitue une menace de sécurité potentielle. Par défaut, les pages web ASP.NET vérifient que l’entrée d’utilisateur n’inclut pas de script ou d’éléments HTML. Pour plus d’informations, consultez [Vue d’ensemble des attaques de script](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[System.Web.Security.Membership#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Membership/CS/createuser1cs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.Membership#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Membership/VB/createuser1vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.Security.MembershipCreateUserException">The user was not created. Check the <see cref="P:System.Web.Security.MembershipCreateUserException.StatusCode" /> property for a <see cref="T:System.Web.Security.MembershipCreateStatus" /> value.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateUser">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipUser CreateUser (string username, string password, string email, string passwordQuestion, string passwordAnswer, bool isApproved, out System.Web.Security.MembershipCreateStatus status);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.MembershipUser CreateUser(string username, string password, string email, string passwordQuestion, string passwordAnswer, bool isApproved, [out] valuetype System.Web.Security.MembershipCreateStatus&amp; status) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.CreateUser(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Web.Security.MembershipCreateStatus@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateUser (username As String, password As String, email As String, passwordQuestion As String, passwordAnswer As String, isApproved As Boolean, ByRef status As MembershipCreateStatus) As MembershipUser" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Security::MembershipUser ^ CreateUser(System::String ^ username, System::String ^ password, System::String ^ email, System::String ^ passwordQuestion, System::String ^ passwordAnswer, bool isApproved, [Runtime::InteropServices::Out] System::Web::Security::MembershipCreateStatus % status);" />
      <MemberSignature Language="F#" Value="static member CreateUser : string * string * string * string * string * bool *  -&gt; System.Web.Security.MembershipUser" Usage="System.Web.Security.Membership.CreateUser (username, password, email, passwordQuestion, passwordAnswer, isApproved, status)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipUser</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="email" Type="System.String" />
        <Parameter Name="passwordQuestion" Type="System.String" />
        <Parameter Name="passwordAnswer" Type="System.String" />
        <Parameter Name="isApproved" Type="System.Boolean" />
        <Parameter Name="status" Type="System.Web.Security.MembershipCreateStatus&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="username">The user name for the new user.</param>
        <param name="password">The password for the new user.</param>
        <param name="email">The email address for the new user.</param>
        <param name="passwordQuestion">The password-question value for the membership user.</param>
        <param name="passwordAnswer">The password-answer value for the membership user.</param>
        <param name="isApproved">A Boolean that indicates whether the new user is approved to log on.</param>
        <param name="status">A <see cref="T:System.Web.Security.MembershipCreateStatus" /> indicating that the user was created successfully or the reason that creation failed.</param>
        <summary>Adds a new user with specified property values to the data store and returns a status parameter indicating that the user was successfully created or the reason the user creation failed.</summary>
        <returns>A <see cref="T:System.Web.Security.MembershipUser" /> object for the newly created user. If no user was created, this method returns <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Membership.CreateUser%2A> Ajoute un nouvel utilisateur au magasin de données et retourne un <xref:System.Web.Security.MembershipUser> objet pour l’utilisateur nouvellement créé. Si la création de l’utilisateur échoue, vous pouvez récupérer un <xref:System.Web.Security.MembershipCreateStatus> valeur à partir de la `status` paramètre de sortie qui indique pourquoi la création de l’utilisateur a échoué.  
  
 Le <xref:System.Web.Security.Membership.CreateUser%2A> méthode retournera `null` si `password` est une chaîne vide ou `null`, `username` est une chaîne vide ou `null` ou contient une virgule (,), `passwordQuestion` n’est pas `null` et est une chaîne vide, ou `passwordAnswer` n’est pas `null` et contient une chaîne vide.  
  
 Une fois qu’un utilisateur d’appartenance a été créé et que vous avez une référence à un <xref:System.Web.Security.MembershipUser> de l’objet pour cet utilisateur, vous pouvez modifier les paramètres pour cet utilisateur avec le <xref:System.Web.Security.MembershipUser> méthodes publiques et en définissant les valeurs de propriété de la <xref:System.Web.Security.MembershipUser> et transmettre le <xref:System.Web.Security.MembershipUser> de l’objet à le <xref:System.Web.Security.Membership.UpdateUser%2A> (méthode).  
  
 Si un utilisateur existe déjà dans la source de données pour l’application, vous pouvez obtenir un <xref:System.Web.Security.MembershipUser> objet pour l’utilisateur existant avec le <xref:System.Web.Security.Membership.GetUser%2A> (méthode).  
  
 Espaces à gauche et sont supprimés de toutes les valeurs de paramètre de chaîne.  
  
   
  
## Examples  
 L’exemple de code suivant crée un nouvel utilisateur pour une application ASP.NET configurée pour utiliser l’authentification par formulaire et l’appartenance ASP.NET. Si l’utilisateur n’est pas créé avec succès, un message s’affiche à l’utilisateur. Sinon, l’utilisateur est redirigé vers la page de connexion pour l’application.  
  
> [!IMPORTANT]
>  Cet exemple contient une zone de texte qui accepte l’entrée d’utilisateur, ce qui constitue une menace de sécurité potentielle. Par défaut, les pages web ASP.NET vérifient que l’entrée d’utilisateur n’inclut pas de script ou d’éléments HTML. Pour plus d’informations, consultez [Vue d’ensemble des attaques de script](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[System.Web.Security.SqlMembershipProvider#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/CreateUsercs.aspx#2)]
 [!code-aspx-vb[System.Web.Security.SqlMembershipProvider#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/CreateUservb.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateUser">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipUser CreateUser (string username, string password, string email, string passwordQuestion, string passwordAnswer, bool isApproved, object providerUserKey, out System.Web.Security.MembershipCreateStatus status);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.MembershipUser CreateUser(string username, string password, string email, string passwordQuestion, string passwordAnswer, bool isApproved, object providerUserKey, [out] valuetype System.Web.Security.MembershipCreateStatus&amp; status) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.CreateUser(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Object,System.Web.Security.MembershipCreateStatus@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateUser (username As String, password As String, email As String, passwordQuestion As String, passwordAnswer As String, isApproved As Boolean, providerUserKey As Object, ByRef status As MembershipCreateStatus) As MembershipUser" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Security::MembershipUser ^ CreateUser(System::String ^ username, System::String ^ password, System::String ^ email, System::String ^ passwordQuestion, System::String ^ passwordAnswer, bool isApproved, System::Object ^ providerUserKey, [Runtime::InteropServices::Out] System::Web::Security::MembershipCreateStatus % status);" />
      <MemberSignature Language="F#" Value="static member CreateUser : string * string * string * string * string * bool * obj *  -&gt; System.Web.Security.MembershipUser" Usage="System.Web.Security.Membership.CreateUser (username, password, email, passwordQuestion, passwordAnswer, isApproved, providerUserKey, status)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipUser</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="email" Type="System.String" />
        <Parameter Name="passwordQuestion" Type="System.String" />
        <Parameter Name="passwordAnswer" Type="System.String" />
        <Parameter Name="isApproved" Type="System.Boolean" />
        <Parameter Name="providerUserKey" Type="System.Object" />
        <Parameter Name="status" Type="System.Web.Security.MembershipCreateStatus&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="username">The user name for the new user.</param>
        <param name="password">The password for the new user.</param>
        <param name="email">The email address for the new user.</param>
        <param name="passwordQuestion">The password-question value for the membership user.</param>
        <param name="passwordAnswer">The password-answer value for the membership user.</param>
        <param name="isApproved">A Boolean that indicates whether the new user is approved to log on.</param>
        <param name="providerUserKey">The user identifier for the user that should be stored in the membership data store.</param>
        <param name="status">A <see cref="T:System.Web.Security.MembershipCreateStatus" /> indicating that the user was created successfully or the reason creation failed.</param>
        <summary>Adds a new user with specified property values and a unique identifier to the data store and returns a status parameter indicating that the user was successfully created or the reason the user creation failed.</summary>
        <returns>A <see cref="T:System.Web.Security.MembershipUser" /> object for the newly created user. If no user was created, this method returns <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Membership.CreateUser%2A> Ajoute un nouvel utilisateur au magasin de données et retourne un <xref:System.Web.Security.MembershipUser> objet pour l’utilisateur nouvellement créé. Si la création de l’utilisateur échoue, vous pouvez récupérer un <xref:System.Web.Security.MembershipCreateStatus> valeur à partir de la `status` paramètre de sortie qui indique pourquoi la création de l’utilisateur a échoué. Vous pouvez spécifier un identificateur unique pour l’utilisateur, comme une valeur de clé primaire pour une base de données, en utilisant le `providerUserKey` paramètre.  
  
 Le <xref:System.Web.Security.Membership.CreateUser%2A> méthode retournera `null` si `password` est une chaîne vide ou `null`, `username` est une chaîne vide ou `null` ou contient une virgule (,), `passwordQuestion` n’est pas `null` et contient vide chaîne, ou `passwordAnswer` n’est pas `null` et contient une chaîne vide.  
  
 Une fois qu’un utilisateur d’appartenance a été créé et que vous avez une référence à un <xref:System.Web.Security.MembershipUser> de l’objet pour cet utilisateur, vous pouvez modifier les paramètres pour cet utilisateur avec le <xref:System.Web.Security.MembershipUser> méthodes publiques et en définissant les valeurs de propriété de la <xref:System.Web.Security.MembershipUser> et transmettre le <xref:System.Web.Security.MembershipUser> de l’objet à le <xref:System.Web.Security.Membership.UpdateUser%2A> (méthode).  
  
 Si un utilisateur existe déjà dans la source de données pour l’application, vous pouvez obtenir un <xref:System.Web.Security.MembershipUser> objet pour l’utilisateur existant avec le <xref:System.Web.Security.Membership.GetUser%2A> (méthode).  
  
 Espaces à gauche et sont supprimés de toutes les valeurs de paramètre de chaîne.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="DeleteUser">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Deletes a user from the database.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DeleteUser">
      <MemberSignature Language="C#" Value="public static bool DeleteUser (string username);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool DeleteUser(string username) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.DeleteUser(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DeleteUser (username As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool DeleteUser(System::String ^ username);" />
      <MemberSignature Language="F#" Value="static member DeleteUser : string -&gt; bool" Usage="System.Web.Security.Membership.DeleteUser username" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">The name of the user to delete.</param>
        <summary>Deletes a user and any related user data from the database.</summary>
        <returns>
          <see langword="true" /> if the user was deleted; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Données utilisateur stockées dans la base de données pour le <xref:System.Web.Security.Roles>, <xref:System.Web.HttpContext.Profile%2A>, ou <xref:System.Web.UI.WebControls.WebParts.WebPart> personnalisation est également supprimée lorsque vous utilisez le <xref:System.Web.Security.SqlRoleProvider>, <xref:System.Web.Profile.SqlProfileProvider>, et <xref:System.Web.UI.WebControls.WebParts.SqlPersonalizationProvider> objets pour le stockage de données.  
  
   
  
## Examples  
 L’exemple de code suivant supprime l’utilisateur actuellement connecté et toutes les données associées.  
  
 [!code-aspx-csharp[System.Web.Security.Membership#8](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Membership/CS/DeleteUsercs.aspx#8)]
 [!code-aspx-vb[System.Web.Security.Membership#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Membership/VB/DeleteUservb.aspx#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="username" /> is an empty string or contains a comma (,).</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="username" /> is <see langword="null." /></exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteUser">
      <MemberSignature Language="C#" Value="public static bool DeleteUser (string username, bool deleteAllRelatedData);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool DeleteUser(string username, bool deleteAllRelatedData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.DeleteUser(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DeleteUser (username As String, deleteAllRelatedData As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool DeleteUser(System::String ^ username, bool deleteAllRelatedData);" />
      <MemberSignature Language="F#" Value="static member DeleteUser : string * bool -&gt; bool" Usage="System.Web.Security.Membership.DeleteUser (username, deleteAllRelatedData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="deleteAllRelatedData" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="username">The name of the user to delete.</param>
        <param name="deleteAllRelatedData">
          <see langword="true" /> to delete data related to the user from the database; <see langword="false" /> to leave data related to the user in the database.</param>
        <summary>Deletes a user from the database.</summary>
        <returns>
          <see langword="true" /> if the user was deleted; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les utilisateurs supprimés de la base de données ne sont pas supprimés à partir de la configuration `applicationName`.  
  
 Si `deleteAllRelatedData` est `true`, les données utilisateur stockées dans la base de données pour le <xref:System.Web.Security.Roles>, <xref:System.Web.HttpContext.Profile%2A>, ou <xref:System.Web.UI.WebControls.WebParts.WebPart> personnalisation est également supprimée lorsque vous utilisez le <xref:System.Web.Security.SqlRoleProvider>, <xref:System.Web.Profile.SqlProfileProvider>, et <xref:System.Web.UI.WebControls.WebParts.SqlPersonalizationProvider> pour des objets stockage de données.  
  
   
  
## Examples  
 L’exemple de code suivant supprime l’utilisateur actuellement connecté et toutes les données associées.  
  
 [!code-aspx-csharp[System.Web.Security.SqlMembershipProvider#6](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/DeleteUsercs.aspx#6)]
 [!code-aspx-vb[System.Web.Security.SqlMembershipProvider#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/DeleteUservb.aspx#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="username" /> is an empty string or contains a comma (,).</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="username" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="EnablePasswordReset">
      <MemberSignature Language="C#" Value="public static bool EnablePasswordReset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool EnablePasswordReset" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Membership.EnablePasswordReset" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property EnablePasswordReset As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool EnablePasswordReset { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.EnablePasswordReset : bool" Usage="System.Web.Security.Membership.EnablePasswordReset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the current membership provider is configured to allow users to reset their passwords.</summary>
        <value>
          <see langword="true" /> si le fournisseur d’appartenances prend en charge la réinitialisation du mot de passe ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mot de passe réinitialisation est la possibilité pour l’appartenance ASP.NET remplacer le mot de passe actuel du mot de passe pour un nom d’utilisateur avec un nouveau est généré de façon aléatoire lorsqu’un utilisateur a oublié son mot de passe ou mot de passe actuel n’est plus valide. Cela est particulièrement utile lorsque le format de mot de passe est défini sur <xref:System.Web.Security.MembershipPasswordFormat.Hashed>, comme les utilisateurs ne peuvent pas récupérer les valeurs de mot de passe haché.  
  
   
  
## Examples  
 L’exemple de code suivant montre l’élément dans la `system.web` section du fichier Web.config pour une application ASP.NET. Il indique que l’application utilise une instance de la <xref:System.Web.Security.SqlMembershipProvider> et Active la réinitialisation de mot de passe.  
  
```  
<membership defaultProvider="SqlProvider" userIsOnlineTimeWindow="20">  
  <providers>  
    <add name="SqlProvider"  
      type="System.Web.Security.SqlMembershipProvider"  
      connectionStringName="SqlServices"  
      enablePasswordRetrieval="false"  
      enablePasswordReset="true"  
      requiresQuestionAndAnswer="true"  
      passwordFormat="Hashed"  
      applicationName="MyApplication" />  
  </providers>  
</membership>  
```  
  
 L’exemple de code suivant vérifie tout d’abord que <xref:System.Web.Security.Membership.EnablePasswordReset%2A> est `true`, puis réinitialise un mot de passe utilisateur et retourne le nouveau mot de passe généré automatiquement.  
  
 [!code-aspx-csharp[System.Web.Security.SqlMembershipProvider#8](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/ResetPasswordcs.aspx#8)]
 [!code-aspx-vb[System.Web.Security.SqlMembershipProvider#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/ResetPasswordvb.aspx#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnablePasswordRetrieval">
      <MemberSignature Language="C#" Value="public static bool EnablePasswordRetrieval { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool EnablePasswordRetrieval" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Membership.EnablePasswordRetrieval" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property EnablePasswordRetrieval As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool EnablePasswordRetrieval { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.EnablePasswordRetrieval : bool" Usage="System.Web.Security.Membership.EnablePasswordRetrieval" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the current membership provider is configured to allow users to retrieve their passwords.</summary>
        <value>
          <see langword="true" /> Si le fournisseur d’appartenances prend en charge la récupération du mot de passe ; Sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si <xref:System.Web.Security.Membership.EnablePasswordRetrieval%2A> est `false`, le fournisseur d’appartenances sous-jacent peut lever une <xref:System.Web.HttpException>.  
  
 Les fournisseurs qui sont inclus avec le .NET Framework prend en charge plusieurs formats de mot de passe pour améliorer la sécurité de mot de passe. Si le format de mot de passe est défini sur <xref:System.Web.Security.MembershipPasswordFormat.Hashed>, puis les utilisateurs ne seront pas en mesure de récupérer leur mot de passe existant à partir de la base de données. Le <xref:System.Web.Security.MembershipPasswordFormat.Hashed> format de mot de passe fournit un codage unidirectionnel des valeurs de mot de passe. Les mots de passe sont « hachés » et comparées aux valeurs stockées dans la base de données pour l’authentification. Les valeurs « Hachées » ne peut pas être non encodés pour récupérer la valeur de mot de passe d’origine. Pour plus d'informations, consultez <xref:System.Web.Security.MembershipPasswordFormat>.  
  
   
  
## Examples  
 L’exemple de code suivant montre l’élément dans la `system.web` section du fichier Web.config pour une application ASP.NET. Il indique que l’application utilise une instance de la <xref:System.Web.Security.SqlMembershipProvider> et Active la récupération de mot de passe.  
  
```  
<membership defaultProvider="SqlProvider" userIsOnlineTimeWindow="20">  
  <providers>  
    <add name="SqlProvider"  
      type="System.Web.Security.SqlMembershipProvider"  
      connectionStringName="SqlServices"  
      enablePasswordRetrieval="true"  
      enablePasswordReset="false"  
      requiresQuestionAndAnswer="false"  
      passwordFormat="Encrypted"  
      applicationName="MyApplication" />  
  </providers>  
</membership>  
```  
  
 L’exemple de code suivant vérifie tout d’abord que <xref:System.Web.Security.Membership.EnablePasswordRetrieval%2A> est `true`, puis récupère le mot de passe pour un nom d’utilisateur spécifié et l’envoie à l’adresse de messagerie pour l’utilisateur spécifié.  
  
> [!IMPORTANT]
>  Renvoi d’un mot de passe en texte clair à l’aide de la messagerie n’est pas recommandée pour les sites qui nécessitent un niveau élevé de sécurité. Pour les sites de haute sécurité, nous vous recommandons de retourner des mots de passe à l’aide du chiffrement, tel que SSL.  
>   
>  Cet exemple inclut une zone de texte qui accepte l’entrée d’utilisateur, ce qui constitue une menace de sécurité potentielle. Par défaut, les pages web ASP.NET vérifient que l’entrée d’utilisateur n’inclut pas de script ou d’éléments HTML. Pour plus d’informations, consultez [Vue d’ensemble des attaques de script](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[System.Web.Security.SqlMembershipProvider#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/RetrievePasswordcs.aspx#4)]
 [!code-aspx-vb[System.Web.Security.SqlMembershipProvider#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/RetrievePasswordvb.aspx#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="FindUsersByEmail">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gets a collection of membership users where the email address contains the specified email address to match.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FindUsersByEmail">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipUserCollection FindUsersByEmail (string emailToMatch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.MembershipUserCollection FindUsersByEmail(string emailToMatch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.FindUsersByEmail(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindUsersByEmail (emailToMatch As String) As MembershipUserCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Security::MembershipUserCollection ^ FindUsersByEmail(System::String ^ emailToMatch);" />
      <MemberSignature Language="F#" Value="static member FindUsersByEmail : string -&gt; System.Web.Security.MembershipUserCollection" Usage="System.Web.Security.Membership.FindUsersByEmail emailToMatch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipUserCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="emailToMatch" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="emailToMatch">The email address to search for.</param>
        <summary>Gets a collection of membership users where the email address contains the specified email address to match.</summary>
        <returns>A <see cref="T:System.Web.Security.MembershipUserCollection" /> that contains all users that match the <paramref name="emailToMatch" /> parameter.  Leading and trailing spaces are trimmed from the <paramref name="emailToMatch" /> parameter value.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Membership.FindUsersByEmail%2A> Retourne une liste d’utilisateurs d’appartenance dont l’adresse de messagerie correspond à fourni `emailToMatch` pour configuré `applicationName`.  
  
 Le <xref:System.Web.Security.SqlMembershipProvider> effectue sa recherche à l’aide d’une clause LIKE contre le `emailToMatch` paramètre. Tous les caractères génériques sont pris en charge par SQL Server dans comme clauses peuvent être utilisées dans le `emailToMatch` valeur du paramètre.  
  
   
  
## Examples  
 Le code suivant exemple utilise le <xref:System.Web.Security.Membership.FindUsersByEmail%2A> méthode pour récupérer des informations utilisateur d’appartenance à partir de la base de données d’appartenance basée sur l’entrée d’utilisateur et affiche les résultats dans les pages de données.  
  
> [!IMPORTANT]
>  Cet exemple contient une zone de texte qui accepte l’entrée d’utilisateur, ce qui constitue une menace de sécurité potentielle. Par défaut, les pages web ASP.NET vérifient que l’entrée d’utilisateur n’inclut pas de script ou d’éléments HTML. Pour plus d’informations, consultez [Vue d’ensemble des attaques de script](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[System.Web.Security.Membership#9](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Membership/CS/FindUsersByEmailcs.aspx#9)]
 [!code-aspx-vb[System.Web.Security.Membership#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Membership/VB/FindUsersByEmailvb.aspx#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindUsersByEmail">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipUserCollection FindUsersByEmail (string emailToMatch, int pageIndex, int pageSize, out int totalRecords);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.MembershipUserCollection FindUsersByEmail(string emailToMatch, int32 pageIndex, int32 pageSize, [out] int32&amp; totalRecords) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.FindUsersByEmail(System.String,System.Int32,System.Int32,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindUsersByEmail (emailToMatch As String, pageIndex As Integer, pageSize As Integer, ByRef totalRecords As Integer) As MembershipUserCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Security::MembershipUserCollection ^ FindUsersByEmail(System::String ^ emailToMatch, int pageIndex, int pageSize, [Runtime::InteropServices::Out] int % totalRecords);" />
      <MemberSignature Language="F#" Value="static member FindUsersByEmail : string * int * int *  -&gt; System.Web.Security.MembershipUserCollection" Usage="System.Web.Security.Membership.FindUsersByEmail (emailToMatch, pageIndex, pageSize, totalRecords)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipUserCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="emailToMatch" Type="System.String" />
        <Parameter Name="pageIndex" Type="System.Int32" />
        <Parameter Name="pageSize" Type="System.Int32" />
        <Parameter Name="totalRecords" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="emailToMatch">The email address to search for.</param>
        <param name="pageIndex">The index of the page of results to return. <c>pageIndex</c> is zero-based.</param>
        <param name="pageSize">The size of the page of results to return.</param>
        <param name="totalRecords">The total number of matched users.</param>
        <summary>Gets a collection of membership users, in a page of data, where the email address contains the specified email address to match.</summary>
        <returns>A <see cref="T:System.Web.Security.MembershipUserCollection" /> that contains a page of <paramref name="pageSize" /><see cref="T:System.Web.Security.MembershipUser" /> objects beginning at the page specified by <paramref name="pageIndex" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Membership.FindUsersByEmail%2A> Retourne une liste d’utilisateurs d’appartenance dont l’adresse de messagerie correspond à fourni `emailToMatch` pour configuré `applicationName`.  
  
 Le <xref:System.Web.Security.SqlMembershipProvider> effectue sa recherche à l’aide d’une clause LIKE contre le `emailToMatch` paramètre. Tous les caractères génériques sont pris en charge par SQL Server dans comme clauses peuvent être utilisées dans le `emailToMatch` valeur du paramètre.  
  
 Les résultats retournés par <xref:System.Web.Security.Membership.FindUsersByEmail%2A> sont contraints par le `pageIndex` et `pageSize` paramètres. Le `pageSize` paramètre identifie le nombre maximal de <xref:System.Web.Security.MembershipUser> objets à retourner dans le <xref:System.Web.Security.MembershipUserCollection>. Le `pageIndex` paramètre identifie la page de résultats à retourner, 0 correspondant à la première page. Le `totalRecords` paramètre est un `out` paramètre est défini sur le nombre total d’utilisateurs d’appartenance qui a correspondu le `emailToMatch` valeur. Par exemple, si 13 utilisateurs ont été trouvés pour lesquels `emailToMatch` correspondait à l’adresse de messagerie entier, ou de la partie d’et le `pageIndex` valeur était 1 avec un `pageSize` de 5, le <xref:System.Web.Security.MembershipUserCollection> retournée contient les sixième à dixième utilisateurs retournés. `totalRecords` est défini sur 13.  
  
 Et les espaces à droite sont retirés de la `emailToMatch` valeur du paramètre.  
  
   
  
## Examples  
 Le code suivant exemple utilise le <xref:System.Web.Security.Membership.FindUsersByEmail%2A> méthode pour récupérer des informations utilisateur d’appartenance à partir de la base de données d’appartenance basée sur l’entrée d’utilisateur et affiche les résultats dans les pages de données.  
  
> [!IMPORTANT]
>  Cet exemple contient une zone de texte qui accepte l’entrée d’utilisateur, ce qui constitue une menace de sécurité potentielle. Par défaut, les pages web ASP.NET vérifient que l’entrée d’utilisateur n’inclut pas de script ou d’éléments HTML. Pour plus d’informations, consultez [Vue d’ensemble des attaques de script](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[System.Web.Security.SqlMembershipProvider#13](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/FindUsersByEmailcs.aspx#13)]
 [!code-aspx-vb[System.Web.Security.SqlMembershipProvider#13](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/FindUsersByEmailvb.aspx#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="pageIndex" /> is less than zero.  -or-  <paramref name="pageSize" /> is less than 1.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="FindUsersByName">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gets a collection of membership users where the user name contains the specified user name to match.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FindUsersByName">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipUserCollection FindUsersByName (string usernameToMatch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.MembershipUserCollection FindUsersByName(string usernameToMatch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.FindUsersByName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindUsersByName (usernameToMatch As String) As MembershipUserCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Security::MembershipUserCollection ^ FindUsersByName(System::String ^ usernameToMatch);" />
      <MemberSignature Language="F#" Value="static member FindUsersByName : string -&gt; System.Web.Security.MembershipUserCollection" Usage="System.Web.Security.Membership.FindUsersByName usernameToMatch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipUserCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usernameToMatch" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="usernameToMatch">The user name to search for.</param>
        <summary>Gets a collection of membership users where the user name contains the specified user name to match.</summary>
        <returns>A <see cref="T:System.Web.Security.MembershipUserCollection" /> that contains all users that match the <paramref name="usernameToMatch" /> parameter.  Leading and trailing spaces are trimmed from the <paramref name="usernameToMatch" /> parameter value.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.SqlMembershipProvider.FindUsersByName%2A> Retourne une liste d’utilisateurs d’appartenance dont le nom d’utilisateur correspond à fourni `usernameToMatch` pour configuré `applicationName`.  
  
 Le <xref:System.Web.Security.SqlMembershipProvider> effectue sa recherche à l’aide d’une clause LIKE contre le `usernameToMatch` paramètre. Tous les caractères génériques sont pris en charge par SQL Server dans comme clauses peuvent être utilisées dans le `usernameToMatch` valeur du paramètre.  
  
 Début et les espaces à droite sont supprimés de toutes les valeurs de paramètre.  
  
   
  
## Examples  
 Le code suivant exemple utilise le <xref:System.Web.Security.Membership.FindUsersByName%2A> méthode pour récupérer des informations utilisateur d’appartenance à partir de la base de données d’appartenance basée sur l’entrée d’utilisateur et affiche les résultats dans les pages de données.  
  
> [!IMPORTANT]
>  Cet exemple contient une zone de texte qui accepte l’entrée d’utilisateur, ce qui constitue une menace de sécurité potentielle. Par défaut, les pages web ASP.NET vérifient que l’entrée d’utilisateur n’inclut pas de script ou d’éléments HTML. Pour plus d’informations, consultez [Vue d’ensemble des attaques de script](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[System.Web.Security.Membership#10](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Membership/CS/FindUsersByNamecs.aspx#10)]
 [!code-aspx-vb[System.Web.Security.Membership#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Membership/VB/FindUsersByNamevb.aspx#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="usernameToMatch" /> is an empty string.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="usernameToMatch" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FindUsersByName">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipUserCollection FindUsersByName (string usernameToMatch, int pageIndex, int pageSize, out int totalRecords);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.MembershipUserCollection FindUsersByName(string usernameToMatch, int32 pageIndex, int32 pageSize, [out] int32&amp; totalRecords) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.FindUsersByName(System.String,System.Int32,System.Int32,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindUsersByName (usernameToMatch As String, pageIndex As Integer, pageSize As Integer, ByRef totalRecords As Integer) As MembershipUserCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Security::MembershipUserCollection ^ FindUsersByName(System::String ^ usernameToMatch, int pageIndex, int pageSize, [Runtime::InteropServices::Out] int % totalRecords);" />
      <MemberSignature Language="F#" Value="static member FindUsersByName : string * int * int *  -&gt; System.Web.Security.MembershipUserCollection" Usage="System.Web.Security.Membership.FindUsersByName (usernameToMatch, pageIndex, pageSize, totalRecords)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipUserCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usernameToMatch" Type="System.String" />
        <Parameter Name="pageIndex" Type="System.Int32" />
        <Parameter Name="pageSize" Type="System.Int32" />
        <Parameter Name="totalRecords" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="usernameToMatch">The user name to search for.</param>
        <param name="pageIndex">The index of the page of results to return. <c>pageIndex</c> is zero-based.</param>
        <param name="pageSize">The size of the page of results to return.</param>
        <param name="totalRecords">The total number of matched users.</param>
        <summary>Gets a collection of membership users, in a page of data, where the user name contains the specified user name to match.</summary>
        <returns>A <see cref="T:System.Web.Security.MembershipUserCollection" /> that contains a page of <paramref name="pageSize" /><see cref="T:System.Web.Security.MembershipUser" /> objects beginning at the page specified by <paramref name="pageIndex" />.  Leading and trailing spaces are trimmed from the <paramref name="usernameToMatch" /> parameter value.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.SqlMembershipProvider.FindUsersByName%2A> Retourne une liste d’utilisateurs d’appartenance dont le nom d’utilisateur correspond à fourni `usernameToMatch` pour configuré `applicationName`.  
  
 Le <xref:System.Web.Security.SqlMembershipProvider> effectue sa recherche à l’aide d’une clause LIKE contre le `usernameToMatch` paramètre. Tous les caractères génériques sont pris en charge par SQL Server dans comme clauses peuvent être utilisées dans le `usernameToMatch` valeur du paramètre.  
  
 Les résultats retournés par <xref:System.Web.Security.Membership.FindUsersByName%2A> sont contraints par le `pageIndex` et `pageSize` paramètres. Le `pageSize` paramètre identifie le nombre maximal de <xref:System.Web.Security.MembershipUser> objets à retourner dans le <xref:System.Web.Security.MembershipUserCollection>. Le `pageIndex` paramètre identifie la page de résultats à retourner, 0 correspondant à la première page. Le `totalRecords` paramètre est un `out` paramètre est défini sur le nombre total d’utilisateurs d’appartenance qui a correspondu le `usernameToMatch` valeur. Par exemple, si 13 utilisateurs ont été trouvés pour lesquels `usernameToMatch` mis en correspondance de la partie ou le nom d’utilisateur entière et le `pageIndex` valeur était 1 avec un `pageSize` de 5, le <xref:System.Web.Security.MembershipUserCollection> retourné contiendrait les sixième à dixième utilisateurs retournés. `totalRecords` est défini sur 13.  
  
   
  
## Examples  
 Le code suivant exemple utilise le <xref:System.Web.Security.Membership.FindUsersByName%2A> méthode pour récupérer des informations utilisateur d’appartenance à partir de la base de données d’appartenance basée sur l’entrée d’utilisateur et affiche les résultats dans les pages de données.  
  
> [!IMPORTANT]
>  Cet exemple contient une zone de texte qui accepte l’entrée d’utilisateur, ce qui constitue une menace de sécurité potentielle. Par défaut, les pages web ASP.NET vérifient que l’entrée d’utilisateur n’inclut pas de script ou d’éléments HTML. Pour plus d’informations, consultez [Vue d’ensemble des attaques de script](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[System.Web.Security.SqlMembershipProvider#12](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/FindUsersByNamecs.aspx#12)]
 [!code-aspx-vb[System.Web.Security.SqlMembershipProvider#12](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/FindUsersByNamevb.aspx#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="usernameToMatch" /> is an empty string.  -or-  <paramref name="pageIndex" /> is less than zero.  -or-  <paramref name="pageSize" /> is less than 1.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="usernameToMatch" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GeneratePassword">
      <MemberSignature Language="C#" Value="public static string GeneratePassword (int length, int numberOfNonAlphanumericCharacters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GeneratePassword(int32 length, int32 numberOfNonAlphanumericCharacters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.GeneratePassword(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GeneratePassword (length As Integer, numberOfNonAlphanumericCharacters As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GeneratePassword(int length, int numberOfNonAlphanumericCharacters);" />
      <MemberSignature Language="F#" Value="static member GeneratePassword : int * int -&gt; string" Usage="System.Web.Security.Membership.GeneratePassword (length, numberOfNonAlphanumericCharacters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="length" Type="System.Int32" />
        <Parameter Name="numberOfNonAlphanumericCharacters" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="length">The number of characters in the generated password. The length must be between 1 and 128 characters.</param>
        <param name="numberOfNonAlphanumericCharacters">The minimum number of non-alphanumeric characters (such as @, #, !, %, &amp;, and so on) in the generated password.</param>
        <summary>Generates a random password of the specified length.</summary>
        <returns>A random password of the specified length.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.Security.Membership.GeneratePassword%2A> méthode est utilisée pour générer un mot de passe aléatoire et est plus couramment utilisé par le <xref:System.Web.Security.MembershipProvider.ResetPassword%2A> méthode implémentée par un fournisseur d’appartenances pour réinitialiser le mot de passe pour un utilisateur à un nouveau mot de passe temporaire.  
  
 Le mot de passe généré contient uniquement des caractères alphanumériques et les marques de ponctuation suivants : `!@#$%^&*()_-+=[{]};:<>|./?`. Aucun caractère de contrôle masqué ou non imprimables n’est inclus dans le mot de passe généré.  
  
> [!NOTE]
>  Le mot de passe aléatoire créé par la <xref:System.Web.Security.Membership.GeneratePassword%2A> n’est pas garanti que le méthode correspond à l’expression régulière dans le <xref:System.Web.Security.Membership.PasswordStrengthRegularExpression%2A> propriété. Toutefois, le mot de passe aléatoire répond aux critères établis par le <xref:System.Web.Security.Membership.MinRequiredPasswordLength%2A> propriété et le `numberOfNonAlphanumericCharacters` paramètre.  
  
   
  
## Examples  
 L’exemple de code suivant crée un nouvel utilisateur d’appartenance et utilise le <xref:System.Web.Security.Membership.GeneratePassword%2A> méthode pour initialiser le mot de passe pour le nouvel utilisateur à une valeur aléatoire, qui est affiché pour l’utilisateur.  
  
> [!IMPORTANT]
>  Cet exemple contient une zone de texte qui accepte l’entrée d’utilisateur, ce qui constitue une menace de sécurité potentielle. Par défaut, les pages web ASP.NET vérifient que l’entrée d’utilisateur n’inclut pas de script ou d’éléments HTML. Pour plus d’informations, consultez [Vue d’ensemble des attaques de script](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[System.Web.Security.Membership#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Membership/CS/GeneratePasswordcs.aspx#5)]
 [!code-aspx-vb[System.Web.Security.Membership#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Membership/VB/GeneratePasswordvb.aspx#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="length" /> is less than 1 or greater than 128 -or-  <paramref name="numberOfNonAlphanumericCharacters" /> is less than 0 or greater than <paramref name="length" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAllUsers">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gets a collection of the users in the database.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAllUsers">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipUserCollection GetAllUsers ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.MembershipUserCollection GetAllUsers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.GetAllUsers" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetAllUsers () As MembershipUserCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Security::MembershipUserCollection ^ GetAllUsers();" />
      <MemberSignature Language="F#" Value="static member GetAllUsers : unit -&gt; System.Web.Security.MembershipUserCollection" Usage="System.Web.Security.Membership.GetAllUsers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipUserCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets a collection of all the users in the database.</summary>
        <returns>A <see cref="T:System.Web.Security.MembershipUserCollection" /> of <see cref="T:System.Web.Security.MembershipUser" /> objects representing all of the users in the database.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Membership.GetAllUsers%2A> Retourne les informations pour tous les utilisateurs d’appartenance pour une application comme une collection de <xref:System.Web.Security.MembershipUser> objets. Soyez prudent lorsque vous utilisez le <xref:System.Web.Security.Membership.GetAllUsers%2A> méthode avec les bases de données utilisateur de très grande taille, en tant que résultant <xref:System.Web.Security.MembershipUserCollection> dans votre application ASP.NET page peut dégrader les performances de votre application.  
  
   
  
## Examples  
 L’exemple de code suivant retourne une liste d’utilisateurs avec un décompte du nombre d’utilisateurs actuellement en ligne.  
  
 [!code-aspx-csharp[System.Web.Security.SqlMembershipProvider#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/ShowUserscs.aspx#5)]
 [!code-aspx-vb[System.Web.Security.SqlMembershipProvider#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/ShowUsersvb.aspx#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAllUsers">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipUserCollection GetAllUsers (int pageIndex, int pageSize, out int totalRecords);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.MembershipUserCollection GetAllUsers(int32 pageIndex, int32 pageSize, [out] int32&amp; totalRecords) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.GetAllUsers(System.Int32,System.Int32,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetAllUsers (pageIndex As Integer, pageSize As Integer, ByRef totalRecords As Integer) As MembershipUserCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Security::MembershipUserCollection ^ GetAllUsers(int pageIndex, int pageSize, [Runtime::InteropServices::Out] int % totalRecords);" />
      <MemberSignature Language="F#" Value="static member GetAllUsers : int * int *  -&gt; System.Web.Security.MembershipUserCollection" Usage="System.Web.Security.Membership.GetAllUsers (pageIndex, pageSize, totalRecords)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipUserCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pageIndex" Type="System.Int32" />
        <Parameter Name="pageSize" Type="System.Int32" />
        <Parameter Name="totalRecords" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pageIndex">The index of the page of results to return. Use 0 to indicate the first page.</param>
        <param name="pageSize">The size of the page of results to return. <c>pageIndex</c> is zero-based.</param>
        <param name="totalRecords">The total number of users.</param>
        <summary>Gets a collection of all the users in the database in pages of data.</summary>
        <returns>A <see cref="T:System.Web.Security.MembershipUserCollection" /> of <see cref="T:System.Web.Security.MembershipUser" /> objects representing all the users in the database for the configured <see langword="applicationName" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les résultats retournés par <xref:System.Web.Security.Membership.GetAllUsers%2A> sont contraints par le `pageIndex` et `pageSize` paramètres. Le `pageSize` paramètre identifie le nombre maximal de <xref:System.Web.Security.MembershipUser> objets à retourner dans le <xref:System.Web.Security.MembershipUserCollection>. Le `pageIndex` paramètre identifie la page de résultats à retourner, 0 correspondant à la première page. Le `totalRecords` paramètre est un `out` paramètre est défini sur le nombre total d’utilisateurs d’appartenance pour le `applicationName`. Par exemple, si 13 utilisateurs pour le `applicationName`et le `pageIndex` valeur était 1 avec un `pageSize` de 5, le <xref:System.Web.Security.MembershipUserCollection> retournée contient les sixième à dixième utilisateurs retournés. `totalRecords` est défini sur 13.  
  
   
  
## Examples  
 L’exemple de code suivant retourne une liste d’utilisateurs dans les pages de données avec un décompte du nombre d’utilisateurs actuellement en ligne.  
  
 [!code-aspx-csharp[System.Web.Security.SqlMembershipProvider#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/ShowUserscs.aspx#5)]
 [!code-aspx-vb[System.Web.Security.SqlMembershipProvider#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/ShowUsersvb.aspx#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="pageIndex" /> is less than zero.  -or-  <paramref name="pageSize" /> is less than 1.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetNumberOfUsersOnline">
      <MemberSignature Language="C#" Value="public static int GetNumberOfUsersOnline ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetNumberOfUsersOnline() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.GetNumberOfUsersOnline" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetNumberOfUsersOnline () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetNumberOfUsersOnline();" />
      <MemberSignature Language="F#" Value="static member GetNumberOfUsersOnline : unit -&gt; int" Usage="System.Web.Security.Membership.GetNumberOfUsersOnline " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets the number of users currently accessing an application.</summary>
        <returns>The number of users currently accessing an application.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.SqlMembershipProvider.GetNumberOfUsersOnline%2A> Retourne le nombre d’utilisateurs pour les cours <xref:System.Web.Security.Membership.ApplicationName%2A> où la date de dernière activité est supérieure à l’heure actuelle moins la <xref:System.Web.Security.Membership.UserIsOnlineTimeWindow%2A>. Dernière activité informations de date/heure est mise à jour à la date et heure actuelles lorsque les informations d’identification de l’utilisateur sont validées par l’intermédiaire de la <xref:System.Web.Security.Membership.ValidateUser%2A> ou <xref:System.Web.Security.Membership.UpdateUser%2A> méthode ou lorsqu’un appel à une <xref:System.Web.Security.Membership.GetUser%2A> surcharge acceptant aucun paramètre ou qui utilise le `userIsOnline`paramètre pour spécifier que l’horodatage date/heure doit être mis à jour.  
  
   
  
## Examples  
 L’exemple de code suivant retourne une liste d’utilisateurs avec un décompte du nombre d’utilisateurs actuellement en ligne.  
  
 [!code-aspx-csharp[System.Web.Security.SqlMembershipProvider#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/ShowUserscs.aspx#5)]
 [!code-aspx-vb[System.Web.Security.SqlMembershipProvider#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/ShowUsersvb.aspx#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetUser">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gets the information for a membership user from the data source.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetUser">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipUser GetUser ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.MembershipUser GetUser() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.GetUser" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUser () As MembershipUser" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Security::MembershipUser ^ GetUser();" />
      <MemberSignature Language="F#" Value="static member GetUser : unit -&gt; System.Web.Security.MembershipUser" Usage="System.Web.Security.Membership.GetUser " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipUser</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets the information from the data source and updates the last-activity date/time stamp for the current logged-on membership user.</summary>
        <returns>A <see cref="T:System.Web.Security.MembershipUser" /> object representing the current logged-on user.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Membership.GetUser> Récupère les informations utilisateur de la source de données et crée un <xref:System.Web.Security.MembershipUser> objet rempli avec les données retournées. Si vous utilisez une de la <xref:System.Web.Security.Membership.GetUser%2A> surcharges qui n’accepte pas un `username` paramètre, <xref:System.Web.Security.Membership.GetUser%2A> retourne les informations de l’utilisateur d’appartenance connecté actuel. L’utilisateur d’appartenance connecté est identifié par le <xref:System.Security.Principal.IIdentity.Name%2A> de l’utilisateur en cours <xref:System.Web.HttpContext>.  
  
 Vous pouvez également spécifier si vous souhaitez <xref:System.Web.Security.Membership.GetUser%2A> pour mettre à jour de la dernière activité date/heure de l’utilisateur en cours de récupération à l’aide de le `userIsOnline` paramètre. De la <xref:System.Web.Security.Membership.GetUser%2A> surcharges qui ne prennent pas une `userIsOnline` paramètre, `GetUser()` implicitement mises à jour de la dernière activité date/heure de l’utilisateur. `GetUser(System.String)` et `GetUser(System.Object)` ne le faites pas.  
  
   
  
## Examples  
 Le code exemple suivant augmente la dernière activité date/heure de l’utilisateur d’appartenance connecté actuel et affiche le nom d’utilisateur dans la page ASP.NET.  
  
 [!code-aspx-csharp[System.Web.Security.Membership#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Membership/CS/default1cs.aspx#3)]
 [!code-aspx-vb[System.Web.Security.Membership#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Membership/VB/default1vb.aspx#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">No membership user is currently logged in.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetUser">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipUser GetUser (bool userIsOnline);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.MembershipUser GetUser(bool userIsOnline) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.GetUser(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUser (userIsOnline As Boolean) As MembershipUser" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Security::MembershipUser ^ GetUser(bool userIsOnline);" />
      <MemberSignature Language="F#" Value="static member GetUser : bool -&gt; System.Web.Security.MembershipUser" Usage="System.Web.Security.Membership.GetUser userIsOnline" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipUser</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userIsOnline" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="userIsOnline">If <see langword="true" />, updates the last-activity date/time stamp for the specified user.</param>
        <summary>Gets the information from the data source for the current logged-on membership user. Updates the last-activity date/time stamp for the current logged-on membership user, if specified.</summary>
        <returns>A <see cref="T:System.Web.Security.MembershipUser" /> object representing the current logged-on user.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.Security.Membership.GetUser%2A> méthode récupère les informations utilisateur à partir de la source de données et crée un <xref:System.Web.Security.MembershipUser> objet rempli avec les données retournées. Si vous utilisez une de la <xref:System.Web.Security.Membership.GetUser%2A> surcharges qui n’accepte pas un `username` paramètre, <xref:System.Web.Security.Membership.GetUser%2A> retourne les informations de l’utilisateur d’appartenance connecté actuel. L’utilisateur d’appartenance connecté est identifié par le <xref:System.Security.Principal.IIdentity.Name%2A> de l’utilisateur en cours <xref:System.Web.HttpContext>.  
  
 Vous pouvez également spécifier si vous souhaitez <xref:System.Web.Security.Membership.GetUser%2A> pour mettre à jour de la dernière activité date/heure de l’utilisateur en cours de récupération à l’aide de le `userIsOnline` paramètre. De la <xref:System.Web.Security.Membership.GetUser%2A> surcharges qui ne prennent pas une `userIsOnline` paramètre, `GetUser()` implicitement mises à jour de la dernière activité date/heure de l’utilisateur. `GetUser(System.String)` et `GetUser(System.Object)` ne le faites pas.  
  
   
  
## Examples  
 L’exemple de code suivant affiche le nom d’utilisateur pour l’utilisateur d’appartenance connecté actuel dans la page ASP.NET sans mettre à jour de la dernière activité date/heure de l’utilisateur.  
  
 [!code-aspx-csharp[System.Web.Security.Membership#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Membership/CS/default2cs.aspx#4)]
 [!code-aspx-vb[System.Web.Security.Membership#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Membership/VB/default2vb.aspx#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">No membership user is currently logged in.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetUser">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipUser GetUser (object providerUserKey);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.MembershipUser GetUser(object providerUserKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.GetUser(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUser (providerUserKey As Object) As MembershipUser" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Security::MembershipUser ^ GetUser(System::Object ^ providerUserKey);" />
      <MemberSignature Language="F#" Value="static member GetUser : obj -&gt; System.Web.Security.MembershipUser" Usage="System.Web.Security.Membership.GetUser providerUserKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipUser</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="providerUserKey" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="providerUserKey">The unique user identifier from the membership data source for the user.</param>
        <summary>Gets the information from the data source for the membership user associated with the specified unique identifier.</summary>
        <returns>A <see cref="T:System.Web.Security.MembershipUser" /> object representing the user associated with the specified unique identifier.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.Security.Membership.GetUser%2A> méthode récupère les informations utilisateur à partir de la source de données et crée un <xref:System.Web.Security.MembershipUser> objet rempli avec les données retournées. L’utilisateur est identifié à l’aide de l’identificateur unique à partir de la source de données spécifiée à l’aide de le `providerUserKey` paramètre.  
  
 Vous pouvez également spécifier si vous souhaitez <xref:System.Web.Security.Membership.GetUser%2A> pour mettre à jour de la dernière activité date/heure de l’utilisateur en cours de récupération avec le `userIsOnline` paramètre. De la <xref:System.Web.Security.Membership.GetUser%2A> surcharges qui ne prennent pas une `userIsOnline` paramètre, `GetUser()` implicitement mises à jour de la dernière activité date/heure de l’utilisateur. `GetUser(System.String)` et `GetUser(System.Object)` ne le faites pas  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="providerUserKey" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetUser">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipUser GetUser (string username);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.MembershipUser GetUser(string username) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.GetUser(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUser (username As String) As MembershipUser" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Security::MembershipUser ^ GetUser(System::String ^ username);" />
      <MemberSignature Language="F#" Value="static member GetUser : string -&gt; System.Web.Security.MembershipUser" Usage="System.Web.Security.Membership.GetUser username" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipUser</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">The name of the user to retrieve.</param>
        <summary>Gets the information from the data source for the specified membership user.</summary>
        <returns>A <see cref="T:System.Web.Security.MembershipUser" /> object representing the specified user. If the <paramref name="username" /> parameter does not correspond to an existing user, this method returns <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.Security.Membership.GetUser%2A> méthode récupère les informations utilisateur à partir de la source de données et crée un <xref:System.Web.Security.MembershipUser> objet rempli avec les données retournées. Si vous utilisez une de la <xref:System.Web.Security.Membership.GetUser%2A> surcharges qui n’accepte pas un `username` paramètre, <xref:System.Web.Security.Membership.GetUser%2A> retourne les informations de l’utilisateur d’appartenance connecté actuel. L’utilisateur d’appartenance connecté est identifié par le <xref:System.Security.Principal.IIdentity.Name%2A> de l’utilisateur en cours <xref:System.Web.HttpContext>.  
  
 Vous pouvez également spécifier si vous souhaitez <xref:System.Web.Security.Membership.GetUser%2A> pour mettre à jour de la dernière activité date/heure de l’utilisateur en cours de récupération avec le `userIsOnline` paramètre. De la <xref:System.Web.Security.Membership.GetUser%2A> surcharges qui ne prennent pas une `userIsOnline` paramètre, <xref:System.Web.Security.Membership.GetUser%2A?displayProperty=nameWithType> implicitement mises à jour de la dernière activité date/heure de l’utilisateur. <xref:System.Web.Security.Membership.GetUser%2A?displayProperty=nameWithType> et <xref:System.Web.Security.Membership.GetUser%2A> ne le faites pas.  
  
   
  
## Examples  
 Le code suivant exemple utilise le <xref:System.Web.Security.Membership.GetUser%2A> méthode pour retourner un <xref:System.Web.Security.MembershipUser> objet pour l’utilisateur actuellement connecté et les mises à jour l’adresse de messagerie pour l’utilisateur.  
  
 [!code-aspx-csharp[System.Web.Security.SqlMembershipProvider#11](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/UpdateEmailcs.aspx#11)]
 [!code-aspx-vb[System.Web.Security.SqlMembershipProvider#11](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/UpdateEmailvb.aspx#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="username" /> contains a comma (,).</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="username" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetUser">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipUser GetUser (object providerUserKey, bool userIsOnline);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.MembershipUser GetUser(object providerUserKey, bool userIsOnline) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.GetUser(System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUser (providerUserKey As Object, userIsOnline As Boolean) As MembershipUser" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Security::MembershipUser ^ GetUser(System::Object ^ providerUserKey, bool userIsOnline);" />
      <MemberSignature Language="F#" Value="static member GetUser : obj * bool -&gt; System.Web.Security.MembershipUser" Usage="System.Web.Security.Membership.GetUser (providerUserKey, userIsOnline)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipUser</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="providerUserKey" Type="System.Object" />
        <Parameter Name="userIsOnline" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="providerUserKey">The unique user identifier from the membership data source for the user.</param>
        <param name="userIsOnline">If <see langword="true" />, updates the last-activity date/time stamp for the specified user.</param>
        <summary>Gets the information from the data source for the membership user associated with the specified unique identifier. Updates the last-activity date/time stamp for the user, if specified.</summary>
        <returns>A <see cref="T:System.Web.Security.MembershipUser" /> object representing the user associated with the specified unique identifier.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.Security.Membership.GetUser%2A> méthode récupère les informations utilisateur à partir de la source de données et crée un <xref:System.Web.Security.MembershipUser> objet rempli avec les données retournées. L’utilisateur est identifié par l’identificateur unique à partir de la source de données spécifiée dans le `providerUserKey` paramètre.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="providerUserKey" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetUser">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipUser GetUser (string username, bool userIsOnline);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.MembershipUser GetUser(string username, bool userIsOnline) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.GetUser(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUser (username As String, userIsOnline As Boolean) As MembershipUser" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Security::MembershipUser ^ GetUser(System::String ^ username, bool userIsOnline);" />
      <MemberSignature Language="F#" Value="static member GetUser : string * bool -&gt; System.Web.Security.MembershipUser" Usage="System.Web.Security.Membership.GetUser (username, userIsOnline)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipUser</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="userIsOnline" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="username">The name of the user to retrieve.</param>
        <param name="userIsOnline">If <see langword="true" />, updates the last-activity date/time stamp for the specified user.</param>
        <summary>Gets the information from the data source for the specified membership user. Updates the last-activity date/time stamp for the user, if specified.</summary>
        <returns>A <see cref="T:System.Web.Security.MembershipUser" /> object representing the specified user. If the <paramref name="username" /> parameter does not correspond to an existing user, this method returns <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.Security.Membership.GetUser%2A> méthode récupère les informations utilisateur à partir de la source de données et crée un <xref:System.Web.Security.MembershipUser> objet rempli avec les données retournées.  
  
 Si vous utilisez une de la <xref:System.Web.Security.Membership.GetUser%2A> surcharges qui n’accepte pas un `username` paramètre, <xref:System.Web.Security.Membership.GetUser%2A> retourne les informations de l’utilisateur d’appartenance connecté actuel. L’utilisateur d’appartenance connecté est identifié par le <xref:System.Security.Principal.IIdentity.Name%2A> de l’utilisateur en cours <xref:System.Web.HttpContext>.  
  
 Vous pouvez également spécifier si vous souhaitez <xref:System.Web.Security.Membership.GetUser%2A> pour mettre à jour de la dernière activité date/heure de l’utilisateur en cours de récupération avec le `userIsOnline` paramètre. De la <xref:System.Web.Security.Membership.GetUser%2A> surcharges qui ne prennent pas une `userIsOnline` paramètre, <xref:System.Web.Security.Membership.GetUser%2A?displayProperty=nameWithType> implicitement mises à jour de la dernière activité date/heure de l’utilisateur. <xref:System.Web.Security.Membership.GetUser%2A?displayProperty=nameWithType> et <xref:System.Web.Security.Membership.GetUser%2A> ne le faites pas.  
  
   
  
## Examples  
 L’exemple de code suivant récupère le mot de passe pour un nom d’utilisateur spécifié et l’envoie à l’adresse de messagerie de l’utilisateur spécifié. L’appel à <xref:System.Web.Security.Membership.GetUser%2A> Spécifie que la date/heure de dernière activité horodatage pour l’utilisateur verra ne pas.  
  
 [!code-aspx-csharp[System.Web.Security.SqlMembershipProvider#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/RetrievePasswordcs.aspx#4)]
 [!code-aspx-vb[System.Web.Security.SqlMembershipProvider#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/RetrievePasswordvb.aspx#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="username" /> contains a comma (,).</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="username" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetUserNameByEmail">
      <MemberSignature Language="C#" Value="public static string GetUserNameByEmail (string emailToMatch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetUserNameByEmail(string emailToMatch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.GetUserNameByEmail(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUserNameByEmail (emailToMatch As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetUserNameByEmail(System::String ^ emailToMatch);" />
      <MemberSignature Language="F#" Value="static member GetUserNameByEmail : string -&gt; string" Usage="System.Web.Security.Membership.GetUserNameByEmail emailToMatch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="emailToMatch" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="emailToMatch">The email address to search for.</param>
        <summary>Gets a user name where the email address for the user matches the specified email address.</summary>
        <returns>The user name where the email address for the user matches the specified email address. If no match is found, <see langword="null" /> is returned.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Membership.GetUserNameByEmail%2A> peut être utilisé pour récupérer le nom d’utilisateur pour un utilisateur d’appartenance dans le cas où un utilisateur ne connaît pas son nom d’utilisateur, mais ne sait pas leur adresse de messagerie. Si plusieurs utilisateurs dans le magasin de données a la même adresse e-mail, le premier nom d’utilisateur rencontré est retourné.  
  
 Début et les espaces à droite sont supprimés de toutes les valeurs de paramètre.  
  
   
  
## Examples  
 L’exemple de code suivant récupère le nom d’utilisateur pour une adresse e-mail spécifiée.  
  
> [!IMPORTANT]
>  Cet exemple contient une zone de texte qui accepte l’entrée d’utilisateur, ce qui constitue une menace de sécurité potentielle. Par défaut, les pages web ASP.NET vérifient que l’entrée d’utilisateur n’inclut pas de script ou d’éléments HTML. Pour plus d’informations, consultez [Vue d’ensemble des attaques de script](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[System.Web.Security.SqlMembershipProvider#7](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/GetUserByEmailcs.aspx#7)]
 [!code-aspx-vb[System.Web.Security.SqlMembershipProvider#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/GetUserByEmailvb.aspx#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HashAlgorithmType">
      <MemberSignature Language="C#" Value="public static string HashAlgorithmType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string HashAlgorithmType" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Membership.HashAlgorithmType" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property HashAlgorithmType As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ HashAlgorithmType { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.HashAlgorithmType : string" Usage="System.Web.Security.Membership.HashAlgorithmType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The identifier of the algorithm used to hash passwords.</summary>
        <value>L’identificateur de l’algorithme utilisé pour les mots de passe de hachage, ou vide pour utiliser l’algorithme de hachage par défaut.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.Security.Membership.HashAlgorithmType%2A> propriété identifie l’algorithme de hachage personnalisé utilisé par la <xref:System.Web.Security.Membership> classe. Vous définissez le <xref:System.Web.Security.Membership.HashAlgorithmType%2A> à l’aide de la propriété du `hashAlgorithmType` attribut de l’élément.  
  
 Le .NET Framework vous permet de vous permettent de configurer les classes de chiffrement personnalisées à l’aide de la section de configuration d’élément. Le <xref:System.Web.Security.Membership.HashAlgorithmType%2A> propriété doit correspondre à la `name` attribut de l’élément dans un élément. Pour plus d’informations, consultez [mappage de noms d’algorithmes à des Classes de chiffrement](~/docs/framework/configure-apps/map-algorithm-names-to-cryptography-classes.md).  
  
 Si le <xref:System.Web.Security.Membership.HashAlgorithmType%2A> propriété n’est pas définie, le <xref:System.Web.Security.Membership> classe utilise l’algorithme de hachage défini le `validation` attribut de l’élément.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxInvalidPasswordAttempts">
      <MemberSignature Language="C#" Value="public static int MaxInvalidPasswordAttempts { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 MaxInvalidPasswordAttempts" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Membership.MaxInvalidPasswordAttempts" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MaxInvalidPasswordAttempts As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int MaxInvalidPasswordAttempts { int get(); };" />
      <MemberSignature Language="F#" Value="member this.MaxInvalidPasswordAttempts : int" Usage="System.Web.Security.Membership.MaxInvalidPasswordAttempts" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the number of invalid password or password-answer attempts allowed before the membership user is locked out.</summary>
        <value>Nombre de tentatives autorisées de saisie de mot de passe ou de réponse de mot de passe non valide avant que l’utilisateur d’appartenance soit verrouillé.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.Security.Membership.MaxInvalidPasswordAttempts%2A> propriété fonctionne conjointement avec le <xref:System.Web.Security.Membership.PasswordAttemptWindow%2A> propriété pour vous prémunir contre une source non à l’aide des tentatives répétées pour deviner le mot de passe ou une réponse de mot de passe d’un utilisateur d’appartenance.  
  
 Si le nombre de mots de passe ou des réponses de mot de passe entré pour un utilisateur d’appartenance est supérieur ou égal à la valeur de la <xref:System.Web.Security.Membership.MaxInvalidPasswordAttempts%2A> propriété dans le nombre de minutes spécifié par le <xref:System.Web.Security.Membership.PasswordAttemptWindow%2A> propriété, puis l’utilisateur est verrouillé hors du site Web par définition de la <xref:System.Web.Security.MembershipUser.IsLockedOut%2A> propriété `true` jusqu'à ce que l’utilisateur est déverrouillé par un appel à la <xref:System.Web.Security.MembershipUser.UnlockUser%2A> (méthode).  
  
 Si un mot de passe valide ou d’une réponse de mot de passe est fournie avant que la valeur de la <xref:System.Web.Security.Membership.MaxInvalidPasswordAttempts%2A> propriété est atteinte, le compteur qui comptabilise le nombre de tentatives non valides est défini à zéro.  
  
 Les tentatives de réponse de mot de passe et de mot de passe non valide sont suivies séparément. Par exemple, si le <xref:System.Web.Security.Membership.MaxInvalidPasswordAttempts%2A> propriété est définie sur 5, l’utilisateur dispose de cinq tentatives pour entrer un mot de passe correct et de cinq tentatives pour entrer une réponse de mot de passe correct sans leur compte est verrouillé.  
  
 Le <xref:System.Web.Security.Membership.MaxInvalidPasswordAttempts%2A> valeur de propriété est définie dans la configuration d’application à l’aide du `maxInvalidPasswordAttempts` attribut de l’élément de configuration.  
  
 Si le <xref:System.Web.Security.Membership.RequiresQuestionAndAnswer%2A> propriété est `false`, les tentatives de réponse de mot de passe non valides ne sont pas suivies.  
  
   
  
## Examples  
 L’exemple de code suivant montre l’élément dans la `system.web` section du fichier Web.config d’une application. Il indique que l’application utilise une instance de la <xref:System.Web.Security.SqlMembershipProvider> classe pour fournir des services d’appartenance et affecte le `maxInvalidPasswordAttempts` attribut cinq tentatives non valides et le `passwordAttemptWindow` à 30 minutes.  
  
```  
<membership defaultProvider="SqlProvider"  
  userIsOnlineTimeWindow = "20>  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlMembershipProvider"  
      connectionStringName="SqlServices"  
      requiresQuestionAndAnswer="true"  
      maxInvalidPasswordAttempts="5"  
      passwordAttemptWindow="30"  
      applicationName="MyApplication" />  
  </providers>  
</membership>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinRequiredNonAlphanumericCharacters">
      <MemberSignature Language="C#" Value="public static int MinRequiredNonAlphanumericCharacters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 MinRequiredNonAlphanumericCharacters" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Membership.MinRequiredNonAlphanumericCharacters" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MinRequiredNonAlphanumericCharacters As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int MinRequiredNonAlphanumericCharacters { int get(); };" />
      <MemberSignature Language="F#" Value="member this.MinRequiredNonAlphanumericCharacters : int" Usage="System.Web.Security.Membership.MinRequiredNonAlphanumericCharacters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the minimum number of special characters that must be present in a valid password.</summary>
        <value>Nombre minimal de caractères spéciaux qui doivent être présents dans un mot de passe.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.Security.Membership.MinRequiredNonAlphanumericCharacters%2A> propriété retourne le nombre minimal de caractères spéciaux non alphanumériques qui doivent être entrés pour créer un mot de passe valide pour le fournisseur d’appartenances spécifié dans le <xref:System.Web.Security.Membership.Provider%2A> propriété.  
  
 Le <xref:System.Web.Security.Membership.MinRequiredNonAlphanumericCharacters%2A> valeur de propriété est définie dans la configuration d’application à l’aide du `minRequiredNonAlphanumericCharacters` attribut de l’élément de configuration.  
  
 Un caractère non alphanumérique est un caractère pour lequel la <xref:System.Char.IsLetterOrDigit%2A> retourne de la méthode `false`.  
  
   
  
## Examples  
 L’exemple de code suivant montre l’élément de configuration dans la `system.web` section du fichier Web.config de l’application. Il indique que l’application utilise une instance de la <xref:System.Web.Security.SqlMembershipProvider> classe pour fournir des services d’appartenance et affecte le `minRequiredNonAlphanumericCharacters` attribut 1 caractère.  
  
```  
<membership defaultProvider="SqlProvider"  
  userIsOnlineTimeWindow = "20>  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlMembershipProvider"  
      connectionStringName="SqlServices"  
      requiresQuestionAndAnswer="true"  
      minRequiredNonAlphanumericCharacters="1"  
      />  
  </providers>  
</membership>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinRequiredPasswordLength">
      <MemberSignature Language="C#" Value="public static int MinRequiredPasswordLength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 MinRequiredPasswordLength" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Membership.MinRequiredPasswordLength" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MinRequiredPasswordLength As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int MinRequiredPasswordLength { int get(); };" />
      <MemberSignature Language="F#" Value="member this.MinRequiredPasswordLength : int" Usage="System.Web.Security.Membership.MinRequiredPasswordLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the minimum length required for a password.</summary>
        <value>Longueur minimale requise pour un mot de passe.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.Security.Membership.MinRequiredPasswordLength%2A> propriété obtient le nombre minimal de caractères qui doivent être entrés pour créer un mot de passe valide pour le fournisseur d’appartenances spécifié dans le <xref:System.Web.Security.Membership.Provider%2A> propriété.  
  
 Le <xref:System.Web.Security.Membership.MinRequiredPasswordLength%2A> valeur de propriété est définie dans la configuration d’application à l’aide du `minRequiredPasswordLength` attribut de l’élément de configuration.  
  
   
  
## Examples  
 L’exemple de code suivant montre l’élément de configuration dans la `system.web` section du fichier Web.config de l’application. Il indique que l’application utilise une instance de la <xref:System.Web.Security.SqlMembershipProvider> classe pour fournir des services d’appartenance et affecte le `minRequiredPasswordLength` attribut sept caractères.  
  
```  
<membership defaultProvider="SqlProvider"  
  userIsOnlineTimeWindow = "20>  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlMembershipProvider"  
      connectionStringName="SqlServices"  
      requiresQuestionAndAnswer="true"  
      minRequiredPasswordLength="7"  
      />  
  </providers>  
</membership>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PasswordAttemptWindow">
      <MemberSignature Language="C#" Value="public static int PasswordAttemptWindow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 PasswordAttemptWindow" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Membership.PasswordAttemptWindow" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property PasswordAttemptWindow As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int PasswordAttemptWindow { int get(); };" />
      <MemberSignature Language="F#" Value="member this.PasswordAttemptWindow : int" Usage="System.Web.Security.Membership.PasswordAttemptWindow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the time window between which consecutive failed attempts to provide a valid password or password answer are tracked.</summary>
        <value>La fenêtre de temps, en minutes, pendant laquelle consécutifs échec tente de fournir un mot de passe ou de réponse de mot de passe sont suivies. La valeur par défaut est 10 minutes. Si l’intervalle entre l’échec de la tentative actuels et l’échec de la dernière tentative est supérieure à la <see cref="P:System.Web.Security.Membership.PasswordAttemptWindow" /> la propriété, chaque échec de tentative est traitée comme s’il s’agissait de la première tentative ayant échouée.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.Security.Membership.PasswordAttemptWindow%2A> propriété fonctionne conjointement avec le <xref:System.Web.Security.Membership.MaxInvalidPasswordAttempts%2A> propriété pour vous prémunir contre une source non deviner le mot de passe ou une réponse de mot de passe d’un utilisateur d’appartenance par le biais de tentatives répétées. Lorsqu’un utilisateur tente de se connecter avec, modifier ou réinitialiser son mot de passe, seul un certain nombre de tentatives consécutives est autorisé dans une fenêtre de temps spécifié. La longueur de cette fenêtre de temps est spécifiée dans le <xref:System.Web.Security.Membership.PasswordAttemptWindow%2A> propriété, qui identifie le nombre de minutes autorisées entre les tentatives non valides.  
  
 Si le nombre d’échecs des tentatives successives qu’un utilisateur effectue pour réinitialiser son mot de passe est égal à la valeur stockée dans le <xref:System.Web.Security.Membership.MaxInvalidPasswordAttempts%2A> propriété et le temps écoulé depuis la dernière tentative non valide est inférieur au nombre de minutes spécifié dans le <xref:System.Web.Security.Membership.PasswordAttemptWindow%2A> propriété, puis l’utilisateur d’appartenance est verrouillé. L’utilisateur est verrouillé en définissant le <xref:System.Web.Security.MembershipUser.IsLockedOut%2A> propriété `true` jusqu'à ce que l’utilisateur est déverrouillé par un appel à la <xref:System.Web.Security.MembershipUser.UnlockUser%2A> (méthode).  
  
 Si l’intervalle entre l’échec de la tentative actuels et l’échec de la dernière tentative est supérieure à la <xref:System.Web.Security.Membership.PasswordAttemptWindow%2A> la propriété, la tentative non valide actuelle est considérée comme la première. Si une réponse de mot de passe valide est fournie avant que le nombre maximal de tentatives non valides autorisées est atteinte, le nombre de tentatives de réponse de mot de passe non valide est défini sur 0 (zéro). Si un mot de passe valide est fourni avant que le nombre maximal de non valide autorisées tentatives soit atteint, le nombre de tentatives de mot de passe non valide et le nombre de tentatives de réponse de mot de passe non valides sont définies sur 0 (zéro).  
  
 Les tentatives de mot de passe et de réponse de mot de passe non valides s’accumulent indépendamment les uns des autres. Par exemple, si le <xref:System.Web.Security.Membership.MaxInvalidPasswordAttempts%2A> est défini sur 5 et trois tentatives de mot de passe non valides sont effectués par deux tentatives de réponse de mot de passe non valide, deux autres tentatives de mot de passe non valide (ou trois autres tentatives de réponse de mot de passe non valides) doivent être effectuées dans <xref:System.Web.Security.Membership.PasswordAttemptWindow%2A> l’utilisateur d’appartenance soit verrouillé.  
  
 Le <xref:System.Web.Security.Membership.PasswordAttemptWindow%2A> valeur de propriété est définie dans la configuration d’application à l’aide de la `passwordAttemptWindow` attribut de la section de l’élément de configuration.  
  
 Si le <xref:System.Web.Security.Membership.RequiresQuestionAndAnswer%2A> propriété est définie sur `false`, les tentatives de réponse de mot de passe non valides ne sont pas suivies.  
  
   
  
## Examples  
 L’exemple de code suivant montre l’élément dans la `system.web` section du fichier Web.config pour une application ASP.NET. Il indique que l’application utilise une instance de la <xref:System.Web.Security.SqlMembershipProvider> et définit le `maxInvalidPasswordAttempts` attribut cinq tentatives non valides et le `passwordAttemptWindow` à 30 minutes.  
  
```  
<membership defaultProvider="SqlProvider"   
  userIsOnlineTimeWindow="20">  
  <providers>  
    <add name="SqlProvider"  
      type="System.Web.Security.SqlMembershipProvider"  
      connectionStringName="SqlServices"  
      requiresQuestionAndAnswer="true"  
      maxInvalidPasswordAttempts="5"  
      passwordAttemptWindow="30"  
      applicationName="MyApplication" />  
  </providers>  
</membership>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PasswordStrengthRegularExpression">
      <MemberSignature Language="C#" Value="public static string PasswordStrengthRegularExpression { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string PasswordStrengthRegularExpression" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Membership.PasswordStrengthRegularExpression" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property PasswordStrengthRegularExpression As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ PasswordStrengthRegularExpression { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PasswordStrengthRegularExpression : string" Usage="System.Web.Security.Membership.PasswordStrengthRegularExpression" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the regular expression used to evaluate a password.</summary>
        <value>Expression régulière utilisée pour évaluer un mot de passe.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.Security.Membership.PasswordStrengthRegularExpression%2A> propriété obtient l’expression régulière utilisée pour évaluer la complexité du mot de passe à partir du fournisseur spécifié dans le <xref:System.Web.Security.Membership.Provider%2A> propriété.  
  
 Le <xref:System.Web.Security.Membership.PasswordStrengthRegularExpression%2A> propriété est définie dans la configuration d’application à l’aide du `passwordStrengthRegularExpression` attribut de l’élément de configuration.  
  
 Pour plus d’informations sur les expressions régulières, consultez [Expressions régulières .NET Framework](~/docs/standard/base-types/regular-expressions.md).  
  
   
  
## Examples  
 L’exemple de code suivant montre l’élément de configuration dans la `system.web` section du fichier Web.config de l’application. Il indique que l’application utilise une instance de la <xref:System.Web.Security.SqlMembershipProvider> classe pour fournir des services d’appartenance et affecte le `passwordStrengthRegularExpression` attribut à une expression régulière qui valide le mot de passe répond aux critères suivants :  
  
-   Est supérieure à sept caractères.  
  
-   Contient au moins un chiffre.  
  
-   Contient au moins un caractère (non alphanumériques) spécial.  
  
 Si le mot de passe ne répond pas à ces critères, le mot de passe n’est pas accepté par le fournisseur d’appartenances.  
  
```  
<membership defaultProvider="SqlProvider"  
  userIsOnlineTimeWindow = "20>  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlMembershipProvider"  
      connectionStringName="SqlServices"  
      requiresQuestionAndAnswer="true"  
      passwordStrengthRegularExpression=" @\"(?=.{6,})(?=(.*\d){1,})(?=(.*\W){1,})"  
      />  
   </providers>  
</membership>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Provider">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipProvider Provider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.Security.MembershipProvider Provider" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Membership.Provider" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Provider As MembershipProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Security::MembershipProvider ^ Provider { System::Web::Security::MembershipProvider ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Provider : System.Web.Security.MembershipProvider" Usage="System.Web.Security.Membership.Provider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a reference to the default membership provider for the application.</summary>
        <value>Le fournisseur d’appartenances par défaut pour l’application exposé à l’aide de la <see cref="T:System.Web.Security.MembershipProvider" /> classe de base abstraite.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.Security.Membership.Provider%2A> propriété vous permet de référencer le fournisseur d’appartenances par défaut pour une application directement. Elle est couramment utilisée pour accéder aux membres personnalisés du fournisseur d’appartenances qui ne sont pas dans le cadre de la <xref:System.Web.Security.MembershipProvider> classe de base abstraite.  
  
   
  
## Examples  
 L’exemple de code suivant accède à la valeur par défaut <xref:System.Web.Security.SqlMembershipProvider> activé pour l’application en utilisant le <xref:System.Web.Security.Membership.Provider%2A> propriété afin de déterminer la valeur de la personnalisation <xref:System.Web.Security.SqlMembershipProvider.RequiresUniqueEmail%2A> propriété.  
  
 [!code-aspx-csharp[System.Web.Security.Membership#6](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Membership/CS/Providercs.aspx#6)]
 [!code-aspx-vb[System.Web.Security.Membership#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Membership/VB/Providervb.aspx#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Providers">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipProviderCollection Providers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.Security.MembershipProviderCollection Providers" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Membership.Providers" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Providers As MembershipProviderCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Security::MembershipProviderCollection ^ Providers { System::Web::Security::MembershipProviderCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Providers : System.Web.Security.MembershipProviderCollection" Usage="System.Web.Security.Membership.Providers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipProviderCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a collection of the membership providers for the ASP.NET application.</summary>
        <value>A <see cref="T:System.Web.Security.MembershipProviderCollection" /> les fournisseurs d’appartenances configurées pour l’application ASP.NET.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.Security.Membership.Providers%2A> propriété fait référence à tous les fournisseurs d’appartenances activés pour une application, notamment les fournisseurs ajoutés dans le fichier Web.config de l’application et le fichier Machine.config pour toutes les applications. Vous pouvez contrôler quels appartenance fournisseurs sont disponibles pour une application qui utilise le `providers` élément de la section dans la configuration de votre application. Par exemple, l’exemple suivant montre la section dans le fichier Web.config pour une application qui supprime le <xref:System.Web.Security.SqlMembershipProvider> instance (`AspNetSqlProvider`) spécifié dans le fichier de configuration machine et ajoute une <xref:System.Web.Security.SqlMembershipProvider> instance nommée `SqlProvider` comme le fournisseur d’appartenances par défaut pour l’application.  
  
```  
<configuration>  
  <connectionStrings>  
    <add name="SqlServices" connectionString="Data Source=MySqlServer;Integrated Security=SSPI;Initial Catalog=aspnetdb;" />  
  </connectionStrings>  
  <system.web>  
    <membership defaultProvider="SqlProvider" userIsOnlineTimeWindow="20">  
      <providers>  
        <remove name="AspNetSqlProvider" />  
          <add name="SqlProvider"  
            type="System.Web.Security.SqlMembershipProvider"  
            connectionStringName="SqlServices"  
            enablePasswordRetrieval="false"  
            enablePasswordReset="true"  
            requiresQuestionAndAnswer="true"  
            passwordFormat="Hashed"  
            applicationName="/" />  
      </providers>  
    </membership>  
  </system.web>  
</configuration>  
```  
  
 Lorsque vous spécifiez le [membership, élément (schéma des paramètres ASP.NET)](http://msdn.microsoft.com/library/b9c1ee8f-33ca-4361-8666-b42a0fe86049) section, vous devez spécifier le `defaultProvider` attribut. Si vous ne spécifiez pas un [membership, élément (schéma des paramètres ASP.NET)](http://msdn.microsoft.com/library/b9c1ee8f-33ca-4361-8666-b42a0fe86049) section dans votre fichier Web.config, les valeurs à partir de la configuration d’ordinateur sont utilisés et le <xref:System.Web.Security.SqlMembershipProvider> instance nommée `AspNetSqlProvider` est établie en tant que le `defaultProvider`.  
  
 Vous pouvez obtenir une référence fortement typée à un fournisseur à partir de la <xref:System.Web.Security.Membership.Providers%2A> collection en indexant le fournisseur d’appartenances par nom et un cast en tant que le type souhaité.  
  
   
  
## Examples  
 L’exemple de code suivant répertorie les fournisseurs activés pour une application et leurs types respectifs.  
  
 [!code-aspx-csharp[System.Web.Security.Membership#7](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Membership/CS/Providerscs.aspx#7)]
 [!code-aspx-vb[System.Web.Security.Membership#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Membership/VB/Providersvb.aspx#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RequiresQuestionAndAnswer">
      <MemberSignature Language="C#" Value="public static bool RequiresQuestionAndAnswer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool RequiresQuestionAndAnswer" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Membership.RequiresQuestionAndAnswer" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property RequiresQuestionAndAnswer As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool RequiresQuestionAndAnswer { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.RequiresQuestionAndAnswer : bool" Usage="System.Web.Security.Membership.RequiresQuestionAndAnswer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the default membership provider requires the user to answer a password question for password reset and retrieval.</summary>
        <value>
          <see langword="true" /> Si une réponse de mot de passe est requise pour la réinitialisation de mot de passe et de récupération ; Sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le code suivant exemple utilise le  méthode pour récupérer les informations utilisateur d’appartenance et affiche les résultats dans les pages de données. Les utilisateurs peuvent fournir une question et une réponse lors de la création de son nom d’utilisateur qu’ils peuvent utiliser ultérieurement pour récupérer ou réinitialiser un mot de passe oublié.  
  
 <xref:System.Web.Security.Membership.RequiresQuestionAndAnswer%2A> est vérifiée lorsque <xref:System.Web.Security.MembershipUser.ResetPassword%2A> ou <xref:System.Web.Security.MembershipUser.GetPassword%2A> est appelée. Le fournisseur fourni avec le .NET Framework lève une <xref:System.NotSupportedException> si <xref:System.Web.Security.Membership.RequiresQuestionAndAnswer%2A> est `true` et la réponse de mot de passe fourni est `null`.  
  
 Si <xref:System.Web.Security.Membership.EnablePasswordReset%2A> et <xref:System.Web.Security.Membership.EnablePasswordRetrieval%2A> sont tous deux `false`, <xref:System.Web.Security.Membership.RequiresQuestionAndAnswer%2A> peut toujours être utilisé pour appliquer la création de questions et réponses lors de la création de nouveaux utilisateurs ; Toutefois, la question et la réponse ne seront pas être utilisées. Vous serez en mesure de récupérer la question à l’aide de la <xref:System.Web.Security.MembershipUser> classe.  
  
 Pour plus d’informations, consultez <xref:System.Web.Security.MembershipUser.ResetPassword%2A> et <xref:System.Web.Security.MembershipUser.GetPassword%2A>.  
  
   
  
## Examples  
 L’exemple de code suivant montre l’élément dans la `system.web` section du fichier Web.config pour une application ASP.NET. Il indique que l’application utilise une instance de la <xref:System.Web.Security.SqlMembershipProvider>, Active la réinitialisation de mot de passe et requiert une réponse de mot de passe lorsque vous effectuez une réinitialisation.  
  
```  
<membership defaultProvider="SqlProvider" userIsOnlineTimeWindow="20">  
  <providers>  
    <add name="SqlProvider"  
      type="System.Web.Security.SqlMembershipProvider"  
      connectionStringName="SqlServices"  
      enablePasswordRetrieval="false"  
      enablePasswordReset="true"  
      requiresQuestionAndAnswer="true"  
      passwordFormat="Hashed"  
      applicationName="MyApplication" />  
  </providers>  
</membership>  
```  
  
 L’exemple de code suivant vérifie la valeur de <xref:System.Web.Security.Membership.RequiresQuestionAndAnswer%2A> et ajoute les contrôles nécessaires pour une question de mot de passe et une réponse à fournir lors de la création d’un utilisateur.  
  
> [!IMPORTANT]
>  Cet exemple inclut une zone de texte qui accepte l’entrée d’utilisateur, ce qui constitue une menace de sécurité potentielle. Par défaut, les pages web ASP.NET vérifient que l’entrée d’utilisateur n’inclut pas de script ou d’éléments HTML. Pour plus d’informations, consultez [Vue d’ensemble des attaques de script](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[System.Web.Security.SqlMembershipProvider#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/CreateUsercs.aspx#2)]
 [!code-aspx-vb[System.Web.Security.SqlMembershipProvider#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/CreateUservb.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateUser">
      <MemberSignature Language="C#" Value="public static void UpdateUser (System.Web.Security.MembershipUser user);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UpdateUser(class System.Web.Security.MembershipUser user) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.UpdateUser(System.Web.Security.MembershipUser)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub UpdateUser (user As MembershipUser)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void UpdateUser(System::Web::Security::MembershipUser ^ user);" />
      <MemberSignature Language="F#" Value="static member UpdateUser : System.Web.Security.MembershipUser -&gt; unit" Usage="System.Web.Security.Membership.UpdateUser user" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="System.Web.Security.MembershipUser" />
      </Parameters>
      <Docs>
        <param name="user">A <see cref="T:System.Web.Security.MembershipUser" /> object that represents the user to be updated and the updated information for the user.</param>
        <summary>Updates the database with the information for the specified user.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Membership.UpdateUser%2A> prend en entrée, une <xref:System.Web.Security.MembershipUser> objet rempli avec les informations actuelles pour l’utilisateur d’appartenance et met à jour de la source de données avec les valeurs de propriété de la <xref:System.Web.Security.MembershipUser> objet. Vous pouvez construire un nouveau <xref:System.Web.Security.MembershipUser>, ou récupérer un <xref:System.Web.Security.MembershipUser> objet rempli avec les valeurs actuelles à la source de données en utilisant le <xref:System.Web.Security.Membership.GetUser%2A>, <xref:System.Web.Security.Membership.GetAllUsers%2A>, <xref:System.Web.Security.Membership.FindUsersByName%2A>, ou <xref:System.Web.Security.Membership.FindUsersByEmail%2A> méthodes.  
  
   
  
## Examples  
 L’exemple de code suivant met à jour l’adresse de messagerie pour l’utilisateur connecté.  
  
> [!IMPORTANT]
>  Cet exemple contient une zone de texte qui accepte l’entrée d’utilisateur, ce qui constitue une menace de sécurité potentielle. Par défaut, les pages web ASP.NET vérifient que l’entrée d’utilisateur n’inclut pas de script ou d’éléments HTML. Pour plus d’informations, consultez [Vue d’ensemble des attaques de script](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[System.Web.Security.SqlMembershipProvider#11](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/UpdateEmailcs.aspx#11)]
 [!code-aspx-vb[System.Web.Security.SqlMembershipProvider#11](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/UpdateEmailvb.aspx#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="user" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="UserIsOnlineTimeWindow">
      <MemberSignature Language="C#" Value="public static int UserIsOnlineTimeWindow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 UserIsOnlineTimeWindow" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Membership.UserIsOnlineTimeWindow" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property UserIsOnlineTimeWindow As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int UserIsOnlineTimeWindow { int get(); };" />
      <MemberSignature Language="F#" Value="member this.UserIsOnlineTimeWindow : int" Usage="System.Web.Security.Membership.UserIsOnlineTimeWindow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Specifies the number of minutes after the last-activity date/time stamp for a user during which the user is considered online.</summary>
        <value>Le nombre de minutes après la dernière activité date/heure pour un utilisateur au cours de laquelle l’utilisateur est considéré en ligne.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.Security.Membership.UserIsOnlineTimeWindow%2A> valeur de propriété est vérifiée pendant l’appel à <xref:System.Web.Security.Membership.GetNumberOfUsersOnline%2A>. Si le <xref:System.Web.Security.MembershipUser.LastActivityDate%2A> pour un utilisateur est supérieur à la date et heure actuelles moins la <xref:System.Web.Security.Membership.UserIsOnlineTimeWindow%2A> valeur en minutes, puis l’utilisateur soit considéré en ligne. Vous pouvez déterminer si un utilisateur d’appartenance est considéré en ligne avec la <xref:System.Web.Security.MembershipUser.IsOnline%2A> propriété de la <xref:System.Web.Security.MembershipUser> classe.  
  
 Le <xref:System.Web.Security.MembershipUser.LastActivityDate%2A> pour un utilisateur est mis à jour lorsque les informations d’identification d’un utilisateur sont validées par le <xref:System.Web.Security.Membership.ValidateUser%2A> (méthode). Vous pouvez également mettre à jour le <xref:System.Web.Security.MembershipUser.LastActivityDate%2A> pour un utilisateur d’appartenance lorsque vous appelez une de la <xref:System.Web.Security.Membership.GetUser%2A> surcharges. Si vous appelez un <xref:System.Web.Security.Membership.GetUser%2A> surcharge qui accepte un `userIsOnline` paramètre, affectez la valeur `true` pour mettre à jour le <xref:System.Web.Security.MembershipUser.LastActivityDate%2A> pour l’utilisateur.  
  
   
  
## Examples  
 L’exemple de code suivant montre l’élément dans la `system.web` section du fichier Web.config pour une application ASP.NET. Il indique que l’application utilise une instance de la <xref:System.Web.Security.SqlMembershipProvider> et définit le `userIsOnlineTimeWindow` attribut à 20 minutes.  
  
```  
<membership defaultProvider="SqlProvider"  
  userIsOnlineTimeWindow="20">  
  <providers>  
    <add name="SqlProvider"  
      type="System.Web.Security.SqlMembershipProvider"  
      connectionStringName="SqlServices"  
      enablePasswordRetrieval="true"  
      enablePasswordReset="false"  
      requiresQuestionAndAnswer="true"  
      passwordFormat="Encrypted"  
      applicationName="MyApplication" />  
  </providers>  
</membership>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateUser">
      <MemberSignature Language="C#" Value="public static bool ValidateUser (string username, string password);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ValidateUser(string username, string password) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.ValidateUser(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ValidateUser (username As String, password As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool ValidateUser(System::String ^ username, System::String ^ password);" />
      <MemberSignature Language="F#" Value="static member ValidateUser : string * string -&gt; bool" Usage="System.Web.Security.Membership.ValidateUser (username, password)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="password" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">The name of the user to be validated.</param>
        <param name="password">The password for the specified user.</param>
        <summary>Verifies that the supplied user name and password are valid.</summary>
        <returns>
          <see langword="true" /> if the supplied user name and password are valid; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Membership.ValidateUser%2A> fournit un moyen simple de vérifier un nom d’utilisateur et le mot de passe à partir de la source de données. Notez que, si le `username` paramètre est vide ou `null`, un <xref:System.Web.HttpException> est levée.  
  
   
  
## Examples  
 L’exemple de code suivant montre la page de connexion pour une application ASP.NET configurée pour utiliser l’authentification par formulaire et la <xref:System.Web.Security.Membership> classe. Si les informations d’identification d’utilisateur fourni ne sont pas valides, un message s’affiche à l’utilisateur. Sinon, l’utilisateur est redirigé vers l’URL initialement demandée par le <xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A> (méthode).  
  
> [!IMPORTANT]
>  Cet exemple contient une zone de texte qui accepte l’entrée d’utilisateur, ce qui constitue une menace de sécurité potentielle. Par défaut, les pages web ASP.NET vérifient que l’entrée d’utilisateur n’inclut pas de script ou d’éléments HTML. Pour plus d’informations, consultez [Vue d’ensemble des attaques de script](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[System.Web.Security.SqlMembershipProvider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/logincs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.SqlMembershipProvider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/loginvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidatingPassword">
      <MemberSignature Language="C#" Value="public static event System.Web.Security.MembershipValidatePasswordEventHandler ValidatingPassword;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.Security.MembershipValidatePasswordEventHandler ValidatingPassword" />
      <MemberSignature Language="DocId" Value="E:System.Web.Security.Membership.ValidatingPassword" />
      <MemberSignature Language="VB.NET" Value="Public Shared Custom Event ValidatingPassword As MembershipValidatePasswordEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static event System::Web::Security::MembershipValidatePasswordEventHandler ^ ValidatingPassword;" />
      <MemberSignature Language="F#" Value="member this.ValidatingPassword : System.Web.Security.MembershipValidatePasswordEventHandler " Usage="member this.ValidatingPassword : System.Web.Security.MembershipValidatePasswordEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipValidatePasswordEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a user is created, a password is changed, or a password is reset.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.Security.MembershipProvider.ValidatingPassword> événement est déclenché lorsque le <xref:System.Web.Security.MembershipProvider.CreateUser%2A> (méthode), le <xref:System.Web.Security.MembershipProvider.ChangePassword%2A> (méthode), ou le <xref:System.Web.Security.MembershipProvider.ResetPassword%2A> méthode d’un fournisseur d’appartenances est appelée.  
  
 Vous pouvez utiliser le <xref:System.Web.Security.MembershipProvider.ValidatingPassword> événement pour valider des valeurs pour les utilisateurs d’appartenance et des formats de mot de passe.  
  
 Vous pouvez annuler actuel <xref:System.Web.Security.MembershipProvider.CreateUser%2A>, <xref:System.Web.Security.MembershipProvider.ChangePassword%2A>, ou <xref:System.Web.Security.MembershipProvider.ResetPassword%2A> action en définissant le <xref:System.Web.Security.ValidatePasswordEventArgs.Cancel%2A> propriété de l’élément <xref:System.Web.Security.ValidatePasswordEventArgs> à `true` pendant la <xref:System.Web.Security.MembershipProvider.ValidatingPassword> événement.  
  
 Si vous annulez l’action en cours en définissant le <xref:System.Web.Security.ValidatePasswordEventArgs.Cancel%2A> propriété `true`, vous pouvez définir le <xref:System.Web.Security.ValidatePasswordEventArgs.FailureInformation%2A> propriété de l’élément <xref:System.Web.Security.ValidatePasswordEventArgs> une exception qui décrit la raison de l’échec de validation de mot de passe. La méthode d’appel lève l’exception qui le <xref:System.Web.Security.ValidatePasswordEventArgs.FailureInformation%2A> a la valeur de propriété. Si le <xref:System.Web.Security.ValidatePasswordEventArgs.FailureInformation%2A> propriété est `null`, l’appelant lèvera une exception d’échec de validation de mot de passe générique.  
  
   
  
## Examples  
 Le code suivant montre l’exemple un <xref:System.Web.Security.MembershipProvider.ValidatingPassword> événement qui valide le format du mot de passe pour un utilisateur et annule l’action si le mot de passe ne correspond pas au format requis.  
  
 [!code-csharp[System.Web.Security.Membership#11](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Membership/CS/CreateUser3cs.aspx#11)]
 [!code-vb[System.Web.Security.Membership#11](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Membership/VB/CreateUser3vb.aspx#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>