<Type Name="UrlAuthorizationModule" FullName="System.Web.Security.UrlAuthorizationModule">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="be5d071b917e424696668088467a08d983ec9ba0" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30545523" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class UrlAuthorizationModule : System.Web.IHttpModule" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit UrlAuthorizationModule extends System.Object implements class System.Web.IHttpModule" />
  <TypeSignature Language="DocId" Value="T:System.Web.Security.UrlAuthorizationModule" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class UrlAuthorizationModule&#xA;Implements IHttpModule" />
  <TypeSignature Language="C++ CLI" Value="public ref class UrlAuthorizationModule sealed : System::Web::IHttpModule" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.IHttpModule</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Vérifie que l'utilisateur est autorisé à accéder à l'URL demandée. Cette classe ne peut pas être héritée.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.Security.UrlAuthorizationModule> détermine si l’utilisateur actuel est autorisé à accéder à l’URL demandée, en fonction de l’utilisateur <xref:System.Security.Principal.IIdentity.Name%2A> ou la liste des rôles dont un utilisateur est membre. Pour plus d’informations sur la manière dont le nom d’utilisateur est déterminé, consultez [l’authentification ASP.NET](http://msdn.microsoft.com/library/fc10b0ef-4ce4-4a7f-9174-886325221ee1). Pour plus d’informations sur la gestion des rôles d’utilisateur, consultez [gestion des rôles d’à l’aide de l’autorisation](http://msdn.microsoft.com/library/01954ce4-39a2-487f-8153-a69f6f6f3195).  
  
 Autorisations pour un utilisateur ou un rôle sont gérées à l’aide de l’élément de configuration. Vous pouvez autoriser ou refuser à un utilisateur ou un rôle à l’aide de la `allow` ou `deny` sous-éléments, respectivement. Le `allow` et `deny` sous-éléments sont interprétées dans l’ordre d’apparition dans la configuration. Une fois qu’un élément indique que l’accès est autorisé ou refusé, le <xref:System.Web.Security.UrlAuthorizationModule> se termine son contrôle d’autorisation. Par exemple, la section suivante à partir d’un fichier Web.config requiert que les utilisateurs pour se connecter (en refusant des utilisateurs anonymes), puis autorise uniquement les utilisateurs dans le rôle administrateurs aient accès. Refusé aux utilisateurs, pas dans le rôle Administrateurs.  
  
```  
<authorization>  
  <deny users="?" />  
  <allow roles="Administrators" />  
  <deny users="*" />  
</authorization>  
```  
  
 Un utilisateur ou un rôle doit être rejeté spécifiquement de refuser une URL de l’utilisateur ou l’autorisation de rôle. Autrement dit, si l’exemple précédent n’avait pas spécifié le `<deny users="*" />` élément, puis tous les utilisateurs authentifiés auraient été autorisés à accéder à l’URL demandée, indépendamment de quel rôle qu’ils étaient des membres.  
  
   
  
## Examples  
 L’exemple suivant accorde l’accès à Kim et aux membres du rôle Administrateurs, tout en refusant à John et tous les utilisateurs anonymes.  
  
```  
<authorization>  
  <allow users="Kim"/>  
  <allow roles="Admins"/>  
  <deny users="John"/>  
  <deny users="?"/>  
</authorization>  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UrlAuthorizationModule ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.UrlAuthorizationModule.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UrlAuthorizationModule();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Crée une instance de la classe <see cref="T:System.Web.Security.UrlAuthorizationModule" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce constructeur n’est pas destiné à être appelé à partir de code d’application.  
  
 ASP.NET appelle ce constructeur pour créer une instance de la <xref:System.Web.Security.UrlAuthorizationModule> classe. Après avoir appelé le constructeur, il appelle la <xref:System.Web.Security.UrlAuthorizationModule.Init%2A> pour initialiser la nouvelle méthode <xref:System.Web.Security.UrlAuthorizationModule> objet.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckUrlAccessForPrincipal">
      <MemberSignature Language="C#" Value="public static bool CheckUrlAccessForPrincipal (string virtualPath, System.Security.Principal.IPrincipal user, string verb);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool CheckUrlAccessForPrincipal(string virtualPath, class System.Security.Principal.IPrincipal user, string verb) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.UrlAuthorizationModule.CheckUrlAccessForPrincipal(System.String,System.Security.Principal.IPrincipal,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CheckUrlAccessForPrincipal (virtualPath As String, user As IPrincipal, verb As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool CheckUrlAccessForPrincipal(System::String ^ virtualPath, System::Security::Principal::IPrincipal ^ user, System::String ^ verb);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
        <Parameter Name="user" Type="System.Security.Principal.IPrincipal" />
        <Parameter Name="verb" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="virtualPath">Chemin d'accès virtuel du fichier.</param>
        <param name="user">Objet <see cref="T:System.Security.Principal.IPrincipal" /> représentant l'utilisateur en cours.</param>
        <param name="verb">Verbe HTTP utilisé pour faire la demande.</param>
        <summary>Détermine si l'utilisateur a accès au fichier demandé.</summary>
        <returns>
          <see langword="true" /> si l'utilisateur peut accéder au fichier ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.Security.UrlAuthorizationModule.CheckUrlAccessForPrincipal%2A> méthode vérifie si l’utilisateur actuel a accès au fichier demandé dans le fichier Web.config de l’application.  
  
 Si le verbe HTTP utilisé pour effectuer la demande est `GET`, `POST`, ou `HEAD`, le <xref:System.Web.Security.UrlAuthorizationModule.CheckUrlAccessForPrincipal%2A> méthode vérifie pour l’accès en lecture au fichier. Si tout autre verbe est utilisé, le <xref:System.Web.Security.UrlAuthorizationModule.CheckUrlAccessForPrincipal%2A> vérifie l’accès en lecture/écriture au fichier.  
  
 Pour plus d’informations et un exemple de fichier Web.config, consultez la <xref:System.Web.Security.UrlAuthorizationModule> documentation sur la classe.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="virtualPath" /> est <see langword="null" />.  
  
 \- ou -  
  
 <paramref name="user" /> est <see langword="null" />.  
  
 \- ou -  
  
 <paramref name="verb" /> est <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="virtualPath" /> est en dehors du chemin d'accès racine de l'application.</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.UrlAuthorizationModule.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.IHttpModule.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Libère toutes les ressources (autres que la mémoire) utilisées par <see cref="T:System.Web.Security.UrlAuthorizationModule" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode n’est pas destinée à être appelée à partir de code d’application.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Init">
      <MemberSignature Language="C#" Value="public void Init (System.Web.HttpApplication app);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Init(class System.Web.HttpApplication app) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.UrlAuthorizationModule.Init(System.Web.HttpApplication)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Init (app As HttpApplication)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Init(System::Web::HttpApplication ^ app);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.IHttpModule.Init(System.Web.HttpApplication)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="app" Type="System.Web.HttpApplication" />
      </Parameters>
      <Docs>
        <param name="app">Instance actuelle de <see cref="T:System.Web.HttpApplication" />.</param>
        <summary>Initialise l'objet <see cref="T:System.Web.Security.UrlAuthorizationModule" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode n’est pas destinée à être appelée à partir de code d’application.  
  
 Le <xref:System.Web.Security.UrlAuthorizationModule.Init%2A> méthode garantit que le <xref:System.Web.Security.UrlAuthorizationModule> est inclus dans le traitement de la <xref:System.Web.HttpApplication.AuthorizeRequest> événement.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>