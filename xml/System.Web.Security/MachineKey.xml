<Type Name="MachineKey" FullName="System.Web.Security.MachineKey">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="00d92598ad25b0e4cb646b22ce74ddd2181ad2c7" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39812053" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class MachineKey" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit MachineKey extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Security.MachineKey" />
  <TypeSignature Language="VB.NET" Value="Public Class MachineKey" />
  <TypeSignature Language="C++ CLI" Value="public ref class MachineKey abstract sealed" />
  <TypeSignature Language="F#" Value="type MachineKey = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Offre un moyen de chiffrer et/ou hacher les données à l'aide des mêmes algorithmes et valeurs de clés que celles utilisées pour l'authentification par formulaire ASP.NET et l'état d'affichage.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.Security.MachineKey> classe fournit des méthodes qui exposent la logique de hachage et de chiffrement fournies par ASP.NET. Pour plus d’informations sur le chiffrement et les algorithmes de hachage ASP.NET utilise et les valeurs de clés qu’il utilise avec eux, consultez [machineKey, élément (schéma des paramètres ASP.NET)](http://msdn.microsoft.com/library/4b5699a9-bc21-4c4a-85f1-8b3b8ebd2d46).  
  
> [!WARNING]
>  Le <xref:System.Web.Security.MachineKey> API doivent uniquement être utilisés dans une application ASP.NET. Comportement des APIs MachineKey en dehors du contexte d’une application ASP.NET n’est pas défini  
  
 ]]></format>
    </remarks>
    <exception cref="T:System.ArgumentNullException">Les données à chiffrer, hacher, déchiffrer ou valider n'existent pas</exception>
  </Docs>
  <Members>
    <Member MemberName="Decode">
      <MemberSignature Language="C#" Value="public static byte[] Decode (string encodedData, System.Web.Security.MachineKeyProtection protectionOption);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] Decode(string encodedData, valuetype System.Web.Security.MachineKeyProtection protectionOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.MachineKey.Decode(System.String,System.Web.Security.MachineKeyProtection)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Decode (encodedData As String, protectionOption As MachineKeyProtection) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Byte&gt; ^ Decode(System::String ^ encodedData, System::Web::Security::MachineKeyProtection protectionOption);" />
      <MemberSignature Language="F#" Value="static member Decode : string * System.Web.Security.MachineKeyProtection -&gt; byte[]" Usage="System.Web.Security.MachineKey.Decode (encodedData, protectionOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Obsolete("This method is obsolete and is only provided for compatibility with existing code. It is recommended that new code use the Protect and Unprotect methods instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encodedData" Type="System.String" />
        <Parameter Name="protectionOption" Type="System.Web.Security.MachineKeyProtection" />
      </Parameters>
      <Docs>
        <param name="encodedData">Données chiffrées à déchiffrer et/ou à valider.</param>
        <param name="protectionOption">Indique si le paramètre <c>encodedData</c> doit être chiffré et/ou haché.</param>
        <summary>Décode et/ou valide des données qui ont été chiffrées ou fournies avec du code HMAC (Hash-based Message Authentication Code).</summary>
        <returns>Un tableau <see cref="T:System.Byte" /> qui représente les données déchiffrées.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour plus d’informations sur le chiffrement et les algorithmes de hachage ASP.NET utilise pour déchiffrer et valider les données qui sont passées, consultez [machineKey, élément (schéma des paramètres ASP.NET)](http://msdn.microsoft.com/library/4b5699a9-bc21-4c4a-85f1-8b3b8ebd2d46).  
  
   
  
## Examples  
 Pour obtenir un exemple de code, consultez le <xref:System.Web.Security.MachineKey> vue d’ensemble de la classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Encode">
      <MemberSignature Language="C#" Value="public static string Encode (byte[] data, System.Web.Security.MachineKeyProtection protectionOption);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Encode(unsigned int8[] data, valuetype System.Web.Security.MachineKeyProtection protectionOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.MachineKey.Encode(System.Byte[],System.Web.Security.MachineKeyProtection)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Encode (data As Byte(), protectionOption As MachineKeyProtection) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Encode(cli::array &lt;System::Byte&gt; ^ data, System::Web::Security::MachineKeyProtection protectionOption);" />
      <MemberSignature Language="F#" Value="static member Encode : byte[] * System.Web.Security.MachineKeyProtection -&gt; string" Usage="System.Web.Security.MachineKey.Encode (data, protectionOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Obsolete("This method is obsolete and is only provided for compatibility with existing code. It is recommended that new code use the Protect and Unprotect methods instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Byte[]" />
        <Parameter Name="protectionOption" Type="System.Web.Security.MachineKeyProtection" />
      </Parameters>
      <Docs>
        <param name="data">Données à chiffrer.</param>
        <param name="protectionOption">Indique si le paramètre <c>data</c> doit être chiffré et/ou haché.</param>
        <summary>Chiffre les données et/ou ajoute du code HMAC (Hash-based Message Authentication Code).</summary>
        <returns>La valeur chiffrée, la valeur d'entrée avec un HMAC a ajouté, ou le résultat du chiffrement de la valeur d'entrée avec un HMAC ajouté.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour plus d’informations sur le chiffrement et les algorithmes de hachage ASP.NET utilise pour déchiffrer et valider les données qui sont passées, consultez [machineKey, élément (schéma des paramètres ASP.NET)](http://msdn.microsoft.com/library/4b5699a9-bc21-4c4a-85f1-8b3b8ebd2d46).  
  
   
  
## Examples  
 Pour obtenir un exemple de code, consultez le <xref:System.Web.Security.MachineKey> vue d’ensemble de la classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Protect">
      <MemberSignature Language="C#" Value="public static byte[] Protect (byte[] userData, params string[] purposes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] Protect(unsigned int8[] userData, string[] purposes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.MachineKey.Protect(System.Byte[],System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Protect (userData As Byte(), ParamArray purposes As String()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Byte&gt; ^ Protect(cli::array &lt;System::Byte&gt; ^ userData, ... cli::array &lt;System::String ^&gt; ^ purposes);" />
      <MemberSignature Language="F#" Value="static member Protect : byte[] * string[] -&gt; byte[]" Usage="System.Web.Security.MachineKey.Protect (userData, purposes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userData" Type="System.Byte[]" />
        <Parameter Name="purposes" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="userData">Données à protéger. Ces données sont passées en texte brut.</param>
        <param name="purposes">Liste des objectifs pour les données. Si cette valeur est spécifiée, la même liste doit être passée à la méthode <see cref="M:System.Web.Security.MachineKey.Unprotect(System.Byte[],System.String[])" /> pour déchiffrer le texte chiffré retourné.</param>
        <summary>Protège les données spécifiées par chiffrement ou signature.</summary>
        <returns>Les données de texte chiffré.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode remplace la <xref:System.Web.Security.MachineKey.Encode%2A> (méthode), ce qui oblige l’appelant de spécifier si les données en texte brut doivent être chiffrées, signé, ou les deux. Le <xref:System.Web.Security.MachineKey.Protect%2A> méthode effectue l’opération appropriée et en toute sécurité protège les données. Les données de texte chiffré générées par cette méthode peuvent uniquement être déchiffrées par le <xref:System.Web.Security.MachineKey.Unprotect%2A> (méthode).  
  
 Le `purposes` paramètre est une liste facultative de raisons pour lesquelles vous pouvez verrouiller le texte chiffré à un objectif spécifique. Ce paramètre vous permet d’isoler les opérations de chiffrement effectuées par différents sous-systèmes au sein d’une application. Un client malveillant ne doit pas être en mesure d’obtenir le résultat d’un sous-système <xref:System.Web.Security.MachineKey.Protect%2A> (méthode) et des flux en tant qu’entrée d’un autre sous-système <xref:System.Web.Security.MachineKey.Unprotect%2A> (méthode), qui pourrait compromettre la sécurité de l’application. Le `purposes` paramètre permet de s’assurer que les données protégées utilisable uniquement par le composant qui l’a généré à l’origine. Applications devraient vous assurer que chaque sous-système utilise une valeur unique `purposes` liste.  
  
 Par exemple, pour protéger ou ôter la protection d’un jeton d’authentification, vous pouvez appeler la méthode à l’aide de code comme dans l’exemple suivant :  
  
```csharp  
MachineKey.Protect(..., "Authentication token");  
MachineKey.Unprotect(..., "Authentication token");  
```  
  
```vb  
MachineKey.Protect(..., "Authentication token")  
MachineKey.Unprotect(..., "Authentication token")  
```  
  
 Les applications peuvent générer dynamiquement le `purposes` paramètre. Dans ce cas, les valeurs fournies par l’utilisateur avec une valeur fixe de préfixe (tels que «`Username:` » + *nom d’utilisateur*) pour réduire le risque d’un client malveillant élaboration d’entrée qui correspond à un jeton qui est utilisé par une autre partie du système. Toutes les chaînes générées de façon dynamique doivent être placé après les chaînes fixes. Par exemple, pour protéger ou ôter la protection d’un message privé qui est lié à un utilisateur spécifique, utilisez le code comme dans l’exemple suivant :  
  
```csharp  
MachineKey.Protect(..., "Private message", "Recipient: " + username);  
MachineKey.Unprotect(..., "Private message", "Recipient: " + username);  
```  
  
```vb  
MachineKey.Protect(..., "Private message", "Recipient: " + username)  
MachineKey.Unprotect(..., "Private message", "Recipient: " + username)  
```  
  
 Lorsque le <xref:System.Web.Security.MachineKey.Unprotect%2A> méthode est appelée, la valeur fournie pour le `purposes` paramètre doit être la même valeur que celle qui a été fournie pour le <xref:System.Web.Security.MachineKey.Protect%2A> (méthode). Sinon l’opération échouera avec une <xref:System.Security.Cryptography.CryptographicException> exception.  
  
 Les paramètres de configuration qui sont requis pour le <xref:System.Web.Configuration.MachineKeyCompatibilityMode.Framework45?displayProperty=nameWithType> option sont requis pour cette même si de méthode le <xref:System.Web.Configuration.MachineKeySection.CompatibilityMode%2A?displayProperty=nameWithType> propriété n’est pas définie sur le <xref:System.Web.Configuration.MachineKeyCompatibilityMode.Framework45> option.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="userData" /> est null.</exception>
        <exception cref="T:System.ArgumentException">Le tableau des objectifs contient une ou plusieurs entrées composées uniquement d’espaces blancs.</exception>
      </Docs>
    </Member>
    <Member MemberName="Unprotect">
      <MemberSignature Language="C#" Value="public static byte[] Unprotect (byte[] protectedData, params string[] purposes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] Unprotect(unsigned int8[] protectedData, string[] purposes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.MachineKey.Unprotect(System.Byte[],System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Unprotect (protectedData As Byte(), ParamArray purposes As String()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Byte&gt; ^ Unprotect(cli::array &lt;System::Byte&gt; ^ protectedData, ... cli::array &lt;System::String ^&gt; ^ purposes);" />
      <MemberSignature Language="F#" Value="static member Unprotect : byte[] * string[] -&gt; byte[]" Usage="System.Web.Security.MachineKey.Unprotect (protectedData, purposes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="protectedData" Type="System.Byte[]" />
        <Parameter Name="purposes" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="protectedData">Données de texte chiffré pour lesquelles ôter la protection.</param>
        <param name="purposes">Liste d'objectifs décrivant la finalité des données. Il doit s'agir de la même valeur que celle passée à la méthode <see cref="M:System.Web.Security.MachineKey.Protect(System.Byte[],System.String[])" /> lorsque les données ont été protégées.</param>
        <summary>Ôte la protection des données spécifiées dans le paramètre <see cref="M:System.Web.Security.MachineKey.Protect(System.Byte[],System.String[])" />, qui était protégé par la méthode.</summary>
        <returns>Données de texte brut.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour plus d’informations sur cette méthode, consultez la <xref:System.Web.Security.MachineKey.Protect%2A> (méthode).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="protectedData" /> est null.</exception>
        <exception cref="T:System.ArgumentException">Le tableau des objectifs contient une ou plusieurs entrées composées uniquement d’espaces blancs.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">Les causes possibles sont les suivantes : 
-   Les données protégées ont fait l’objet d'une falsification.  
  
-   La valeur du paramètre <paramref name="purposes" /> n’est pas identique à la valeur spécifiée au moment où les données ont été protégées.  
  
-   L’application est déployée sur plusieurs serveurs et utilise des clés de chiffrement générées automatiquement.</exception>
      </Docs>
    </Member>
  </Members>
</Type>