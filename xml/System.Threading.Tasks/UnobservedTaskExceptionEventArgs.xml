<Type Name="UnobservedTaskExceptionEventArgs" FullName="System.Threading.Tasks.UnobservedTaskExceptionEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6bf03b81e6d239ad8f78ac51ddeeeb5683fef1bd" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58721534" /></Metadata><TypeSignature Language="C#" Value="public class UnobservedTaskExceptionEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UnobservedTaskExceptionEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.UnobservedTaskExceptionEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class UnobservedTaskExceptionEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class UnobservedTaskExceptionEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type UnobservedTaskExceptionEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fournit des données sur l'événement déclenché lorsqu'une exception d'une <see cref="T:System.Threading.Tasks.Task" /> défaillante n'est pas prise en charge.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La propriété d’Exception est utilisée pour examiner l’exception sans la marquer comme observée, alors que le <xref:System.Threading.Tasks.UnobservedTaskExceptionEventArgs.SetObserved%2A> méthode est utilisée pour marquer l’exception comme observée. Marquage de l’exception comme observée l’empêche de déclencher la stratégie de promotion d’exception qui, par défaut, arrête le processus.  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/standard/parallel-programming/task-based-asynchronous-programming.md">Programmation asynchrone basée sur les tâches</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UnobservedTaskExceptionEventArgs (AggregateException exception);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.AggregateException exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.UnobservedTaskExceptionEventArgs.#ctor(System.AggregateException)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (exception As AggregateException)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UnobservedTaskExceptionEventArgs(AggregateException ^ exception);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.UnobservedTaskExceptionEventArgs : AggregateException -&gt; System.Threading.Tasks.UnobservedTaskExceptionEventArgs" Usage="new System.Threading.Tasks.UnobservedTaskExceptionEventArgs exception" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="exception" Type="System.AggregateException" />
      </Parameters>
      <Docs>
        <param name="exception">Exception qui n'a pas été prise en charge.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Threading.Tasks.UnobservedTaskExceptionEventArgs" /> avec l'exception non prise en charge.</summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/task-based-asynchronous-programming.md">Programmation asynchrone basée sur les tâches</related>
      </Docs>
    </Member>
    <Member MemberName="Exception">
      <MemberSignature Language="C#" Value="public AggregateException Exception { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.AggregateException Exception" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.UnobservedTaskExceptionEventArgs.Exception" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Exception As AggregateException" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property AggregateException ^ Exception { AggregateException ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Exception : AggregateException" Usage="System.Threading.Tasks.UnobservedTaskExceptionEventArgs.Exception" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AggregateException</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Exception qui n'a pas été prise en charge.</summary>
        <value>Exception qui n'a pas été prise en charge.</value>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/task-based-asynchronous-programming.md">Programmation asynchrone basée sur les tâches</related>
      </Docs>
    </Member>
    <Member MemberName="Observed">
      <MemberSignature Language="C#" Value="public bool Observed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Observed" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.UnobservedTaskExceptionEventArgs.Observed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Observed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Observed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Observed : bool" Usage="System.Threading.Tasks.UnobservedTaskExceptionEventArgs.Observed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Détermine si cette exception a été signalée comme « observée ».</summary>
        <value>true si cette exception a été signalée comme « observée » ; sinon, false.</value>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/task-based-asynchronous-programming.md">Programmation asynchrone basée sur les tâches</related>
      </Docs>
    </Member>
    <Member MemberName="SetObserved">
      <MemberSignature Language="C#" Value="public void SetObserved ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetObserved() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.UnobservedTaskExceptionEventArgs.SetObserved" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetObserved ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetObserved();" />
      <MemberSignature Language="F#" Value="member this.SetObserved : unit -&gt; unit" Usage="unobservedTaskExceptionEventArgs.SetObserved " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Signale la <see cref="P:System.Threading.Tasks.UnobservedTaskExceptionEventArgs.Exception" /> comme « observée » et l'empêche ainsi de déclencher la stratégie d'escalade de l'exception qui, par défaut, arrête le processus.</summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/task-based-asynchronous-programming.md">Programmation asynchrone basée sur les tâches</related>
      </Docs>
    </Member>
  </Members>
</Type>