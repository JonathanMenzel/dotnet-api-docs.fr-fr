<Type Name="TaskExtensions" FullName="System.Threading.Tasks.TaskExtensions">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e1dde85ae7c10af9a001c513d6bcae9abb382db4" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30526953" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class TaskExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit TaskExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.TaskExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module TaskExtensions" />
  <TypeSignature Language="C++ CLI" Value="public ref class TaskExtensions abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fournit un ensemble de méthodes statiques (méthodes partagées en Visual Basic) pour l'utilisation de types spécifiques d'instances de <see cref="T:System.Threading.Tasks.Task" />.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Unwrap">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task Unwrap (this System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&gt; task);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task Unwrap(class System.Threading.Tasks.Task`1&lt;class System.Threading.Tasks.Task&gt; task) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskExtensions.Unwrap(System.Threading.Tasks.Task{System.Threading.Tasks.Task})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task ^ Unwrap(System::Threading::Tasks::Task&lt;System::Threading::Tasks::Task ^&gt; ^ task);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="task" Type="System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="task">Le <see langword="Task&lt;Task&gt;" /> (C#) ou <see langword="Task (Of Task)" /> (Visual Basic) à défaire.</param>
        <summary>Crée un proxy <see cref="T:System.Threading.Tasks.Task" /> qui représente l'opération asynchrone d'une <see cref="M:System.Threading.Tasks.TaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)" />.</summary>
        <returns>Tâche qui représente l'opération asynchrone de la <see langword="System.Threading.Tasks.Task(Of Task)" /> fournie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il est souvent utile de pouvoir retourner une tâche à partir d’un <xref:System.Threading.Tasks.Task%601>, où la tâche interne représente le travail effectué dans le cadre de l’élément externe <xref:System.Threading.Tasks.Task%601>. Toutefois, vous obtenez ainsi un `Task<Task>` (c#) ou `Task (Of Task)` (Visual Basic), qui, si ne pas soigneusement traité, peut entraîner un comportement inattendu. Unwrap résout ce problème en créant une tâche de proxy qui représente l’intégralité de l’opération asynchrone d’une telle tâche.  
  
   
  
## Examples  
 L’exemple suivant montre comment désencapsuler une tâche :  
  
 [!code-csharp[System.Threading.Tasks.TaskExtensions#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.taskextensions/cs/unwrap.cs#01)]
 [!code-vb[System.Threading.Tasks.TaskExtensions#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.taskextensions/vb/unwrap.vb#01)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">L'exception levée si l'argument <paramref name="task" /> est null.</exception>
      </Docs>
    </Member>
    <Member MemberName="Unwrap&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; Unwrap&lt;TResult&gt; (this System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt; task);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; Unwrap&lt;TResult&gt;(class System.Threading.Tasks.Task`1&lt;class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; task) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskExtensions.Unwrap``1(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Unwrap(Of TResult) (task As Task(Of Task(Of TResult))) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task&lt;TResult&gt; ^ Unwrap(System::Threading::Tasks::Task&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^&gt; ^ task);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="task" Type="System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">Type du résultat de la tâche.</typeparam>
        <param name="task">Le <see langword="Task&lt;Task&lt;T&gt;&gt;" /> (C#) ou <see langword="Task (Of Task(Of T))" /> (Visual Basic) à défaire.</param>
        <summary>Crée un proxy <see cref="T:System.Threading.Tasks.Task" /> qui représente l'opération asynchrone d'un <see langword="Task&lt;Task&lt;T&gt;&gt;" /> (en C#) ou <see langword="Task (Of Task(Of T))" /> (en Visual Basic).</summary>
        <returns>Un <see cref="T:System.Threading.Tasks.Task" /> qui représente l'opération asynchrone du <see langword="Task&lt;Task&lt;T&gt;&gt;" /> fourni (C#) ou <see langword="Task (Of Task(Of T))" /> (Visual Basic).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il est souvent utile d’être en mesure de retourner un <xref:System.Threading.Tasks.Task> d’un <xref:System.Threading.Tasks.Task>, où interne <xref:System.Threading.Tasks.Task> représente le travail effectué dans le cadre de l’extérieur <xref:System.Threading.Tasks.Task>. Toutefois, vous obtenez ainsi un `Task<Task<T>>` (c#) ou `Task (Of Task(Of T))` (Visual Basic), qui, si ne pas soigneusement traité, peut entraîner un comportement inattendu. Unwrap résout ce problème en créant un proxy <xref:System.Threading.Tasks.Task%601> qui représente l’intégralité de l’opération asynchrone de ces un `Task<Task<T>>` (c#) ou `Task (Of Task(Of T))` (Visual Basic).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">L'exception levée si l'argument <paramref name="task" /> est null.</exception>
      </Docs>
    </Member>
  </Members>
</Type>