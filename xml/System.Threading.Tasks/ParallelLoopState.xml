<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ParallelLoopState.xml" source-language="en-US" target-language="fr-FR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac53e4244160069333f5d930b81c7b54173c2ad6d6a.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3e4244160069333f5d930b81c7b54173c2ad6d6a</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>Enables iterations of parallel loops to interact with other iterations.</source>
          <target state="translated">Permet aux itérations de boucles parallèles d'interagir avec d'autres itérations.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>An instance of this class is provided by the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Parallel" /&gt;</ph> class to each loop; you can not create instances in your code.</source>
          <target state="translated">Une instance de cette classe est fournie par la classe <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Parallel" /&gt;</ph> à chaque boucle ; vous ne pouvez pas créer d'instances dans votre code utilisateur.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>Note that you cannot instantiate an instance of this class.</source>
          <target state="translated">Notez que vous ne pouvez pas instancier une instance de cette classe.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>It is automatically generated by the compiler as an argument in a call to the <ph id="ph1">&lt;xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Il est généré automatiquement par le compilateur en tant qu’argument dans un appel à la <ph id="ph1">&lt;xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType&gt;</ph> ou <ph id="ph2">&lt;xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>The example provides an illustration.</source>
          <target state="translated">Cet exemple en fournit une illustration.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>Constructs such as <ph id="ph1">`for`</ph> and <ph id="ph2">`foreach`</ph> (in C#) and <ph id="ph3">`For`</ph> and <ph id="ph4">`For Each`</ph> (in Visual Basic) execute sequentially from the lowest index to the highest or from the first object in a set to the last.</source>
          <target state="translated">Des constructions comme <ph id="ph1">`for`</ph> et <ph id="ph2">`foreach`</ph> (en c#) et <ph id="ph3">`For`</ph> et <ph id="ph4">`For Each`</ph> (en Visual Basic) exécuter de façon séquentielle à partir de l’index la plus basse à la plus élevée ou du premier objet dans un ensemble à la dernière.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>In contrast, the <ph id="ph1">&lt;xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType&gt;</ph> methods do not.</source>
          <target state="translated">En revanche, le <ph id="ph1">&lt;xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType&gt;</ph> et <ph id="ph2">&lt;xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType&gt;</ph> méthodes ne sont pas.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>Because individual iterations of the loop run in parallel, they can begin and end in any order.</source>
          <target state="translated">Des itérations de la boucle s’exécutant en parallèle, ils peuvent commencer et se terminer dans n’importe quel ordre.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState&gt;</ph> class allows individual iterations of parallel loops to interact with one another.</source>
          <target state="translated">La <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState&gt;</ph> classe permet à des itérations de boucles parallèles d’interagir avec eux.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState&gt;</ph> class allows you to:</source>
          <target state="translated">La <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState&gt;</ph> classe vous permet de :</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>Exit the current iteration and prevent any additional iterations from starting by calling the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> method.</source>
          <target state="translated">Quittez l’itération actuelle et empêcher des itérations supplémentaires de démarrer en appelant le <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>This does not affect iterations that have already begun execution.</source>
          <target state="translated">Cela n’affecte pas les itérations que vous ont déjà commencé l’exécution.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>Prevent any iterations with an index greater than the current index from executing by calling the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> method.</source>
          <target state="translated">Empêcher des itérations avec un index supérieur à l’index en cours de l’exécution en appelant le <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>This does not affect iterations that have already begun execution.</source>
          <target state="translated">Cela n’affecte pas les itérations que vous ont déjà commencé l’exécution.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>Determine whether an exception has occurred in any loop iteration by retrieving the value of the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.IsExceptional%2A&gt;</ph> property.</source>
          <target state="translated">Déterminer si une exception s’est produite dans une itération de boucle en récupérant la valeur de la <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.IsExceptional%2A&gt;</ph> propriété.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>Determine whether any iteration of the loop has called the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> method by retrieving the value of the <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A&gt;</ph> property.</source>
          <target state="translated">Déterminer si une itération de la boucle a appelé le <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> méthode en récupérant la valeur de la <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A&gt;</ph> propriété.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>You can use this property to return from iterations of the loop that started before the call to the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> method but are still executing.</source>
          <target state="translated">Vous pouvez utiliser cette propriété pour retourner des itérations de la boucle qui ont démarré avant l’appel à la <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> (méthode), mais sont en cours d’exécution.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>Determine whether any iteration of the loop has called the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> method or has thrown an exception by retrieving the value of the <ph id="ph3">&lt;xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A&gt;</ph> property.</source>
          <target state="translated">Déterminer si une itération de la boucle a appelé le <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> ou <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> méthode ou a levé une exception en récupérant la valeur de la <ph id="ph3">&lt;xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A&gt;</ph> propriété.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>Exit from a long-running iteration whose index is greater than the index of an iteration in which Break was called by retrieving the value of the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> property.</source>
          <target state="translated">Sortie d’une itération de longue dont l’index est supérieur à l’index d’une itération dans laquelle Break a été appelé en récupérant la valeur de la <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> propriété.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>The following example executes up to 100 iterations of a loop in parallel.</source>
          <target state="translated">L’exemple suivant exécute jusqu'à 100 itérations d’une boucle en parallèle.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</source>
          <target state="translated">Chaque itération s’arrête pour un intervalle aléatoire compris entre 1 et 1 000 millisecondes.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>A randomly generated value determines on which iteration of the loop the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> method is called.</source>
          <target state="translated">Une valeur générée de manière aléatoire détermine sur quelle itération de la boucle la <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> méthode est appelée.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>As the output from the example shows, no iterations whose index is greater than the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> property value start after the call to the <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> method.</source>
          <target state="translated">Comme la sortie de l’exemple, aucune itération dont l’index est supérieur à la <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> début de valeur de propriété après l’appel à la <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>Because iterations of the loop are still likely to be executing when the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> method is called, each iteration calls the <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A&gt;</ph> property to check whether another iteration has called the <ph id="ph3">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> method.</source>
          <target state="translated">Étant donné que les itérations de la boucle sont encore susceptibles de s’exécuter lorsque le <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> méthode est appelée, les appels de chaque itération le <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A&gt;</ph> propriété pour vérifier si une autre itération a appelé le <ph id="ph3">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>If  the property value is <ph id="ph1">`true`</ph>, the iteration checks the value of the <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> property and, if it is greater than the current iteration's index value, returns immediately.</source>
          <target state="translated">Si la valeur de propriété est <ph id="ph1">`true`</ph>, l’itération vérifie la valeur de la <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> propriété et, si elle est supérieure à la valeur d’index de l’itération actuelle, retourne immédiatement.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.ParallelLoopState" /&gt;</ph> instance is meant to be used only within the body of the loop to which an instance was provided.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.ParallelLoopState" /&gt;</ph> instance est destinée à être utilisée uniquement dans le corps de la boucle à laquelle une instance a été fournie.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>It is not safe to use a provided <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.ParallelLoopState" /&gt;</ph> instance after the associated loop ends, nor is it safe to explicitly hand it off to other threads and have those threads access it at any time.</source>
          <target state="translated">Il est déconseillé d’utiliser un <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.ParallelLoopState" /&gt;</ph> instance après la boucle associée se termine, ni à remettre explicitement à d’autres threads et de laisser ces derniers y accéder à tout moment.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.ParallelLoopState">
          <source>A different <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.ParallelLoopState" /&gt;</ph> instance will be provided to each thread involved in a loop.</source>
          <target state="translated">Une autre <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.ParallelLoopState" /&gt;</ph> instance sera fournie à chaque thread impliqué dans une boucle.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ParallelLoopState.Break">
          <source>Communicates that the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Parallel" /&gt;</ph> loop should cease execution of iterations beyond the current iteration at the system's earliest convenience.</source>
          <target state="translated">Indique que l'exécution de la boucle <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Parallel" /&gt;</ph> doit s'arrêter après l'itération actuelle dès que le système le peut.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Break">
          <source><ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> indicates that no iterations after the current iteration should be run.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> Indique qu’aucune itération après l’itération actuelle doit être exécutée.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Break">
          <source>It effectively cancels any additional iterations of the loop.</source>
          <target state="translated">Elle annule effectivement des itérations supplémentaires de la boucle.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Break">
          <source>However, it does not stop any iterations that have already begun execution.</source>
          <target state="translated">Toutefois, il n’arrête pas toutes les itérations que vous ont déjà commencé l’exécution.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Break">
          <source>For example, if <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> is called from the 100th iteration of a parallel loop iterating from 0 to 1,000, all iterations less than 100 should still be run, but the iterations from 101 through to 1000 that have not yet started are not executed.</source>
          <target state="translated">Par exemple, si <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> est appelée à partir de la 100 ème itération d’une boucle parallèle itération de 0 à 1000, toutes les itérations inférieur à 100 doivent s’exécuter, mais les itérations de 101 à 1000 qui n’ont pas encore démarré ne sont pas exécutées.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Break">
          <source>For long-running iterations that may already be executing, <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> sets the <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> property to the current iteration's index if the current index is less than the current value of <ph id="ph3">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph>.</source>
          <target state="translated">Pour les itérations longues qui peuvent déjà être exécutés, <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> définit le <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> propriété pour un index de l’itération actuelle si l’index actuel est inférieur à la valeur actuelle de <ph id="ph3">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Break">
          <source>To stop iterations whose index is greater than the lowest break iteration from competing execution, you should do the following:</source>
          <target state="translated">Pour arrêter les itérations dont l’index est supérieur à l’itération la plus basse saut à partir de l’exécution de concurrente, vous devez procédez comme suit :</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Break">
          <source>Check whether the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A&gt;</ph> property is <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Vérifiez si le <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A&gt;</ph> propriété est <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Break">
          <source>Exit from the iteration if its index is greater than the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> property value.</source>
          <target state="translated">À partir de l’itération de sortie si son index est supérieure à la <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> valeur de propriété.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Break">
          <source>The example provides an illustration.</source>
          <target state="translated">Cet exemple en fournit une illustration.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Break">
          <source><ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> is typically employed in search-based algorithms where an ordering is present in the data source.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> est généralement utilisée dans les algorithmes basés sur recherche où un classement est présent dans la source de données.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Break">
          <source>The following example executes up to 100 iterations of a loop in parallel.</source>
          <target state="translated">L’exemple suivant exécute jusqu'à 100 itérations d’une boucle en parallèle.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Break">
          <source>Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</source>
          <target state="translated">Chaque itération s’arrête pour un intervalle aléatoire compris entre 1 et 1 000 millisecondes.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Break">
          <source>A randomly generated value determines on which iteration of the loop the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> method is called.</source>
          <target state="translated">Une valeur générée de manière aléatoire détermine sur quelle itération de la boucle la <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> méthode est appelée.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Break">
          <source>As the output from the example shows, no iterations whose index is greater than the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> property value start after the call to the <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> method.</source>
          <target state="translated">Comme la sortie de l’exemple, aucune itération dont l’index est supérieur à la <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> début de valeur de propriété après l’appel à la <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Break">
          <source>Because iterations of the loop are still likely to be executing when the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> method is called, each iteration calls the <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A&gt;</ph> property to check whether another iteration has called the <ph id="ph3">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> method.</source>
          <target state="translated">Étant donné que les itérations de la boucle sont encore susceptibles de s’exécuter lorsque le <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> méthode est appelée, les appels de chaque itération le <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A&gt;</ph> propriété pour vérifier si une autre itération a appelé le <ph id="ph3">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Break">
          <source>If  the property value is <ph id="ph1">`true`</ph>, the iteration checks the value of the <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> property and, if it is greater than the current iteration's index value, returns immediately.</source>
          <target state="translated">Si la valeur de propriété est <ph id="ph1">`true`</ph>, l’itération vérifie la valeur de la <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> propriété et, si elle est supérieure à la valeur d’index de l’itération actuelle, retourne immédiatement.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ParallelLoopState.Break">
          <source>The <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /&gt;</ph> method was previously called.</source>
          <target state="translated">La méthode <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /&gt;</ph> a été appelée au préalable.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ParallelLoopState.Break">
          <source><ph id="ph1">&lt;see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /&gt;</ph> and <ph id="ph2">&lt;see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /&gt;</ph> may not be used in combination by iterations of the same loop.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /&gt;</ph> et <ph id="ph2">&lt;see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /&gt;</ph> ne peuvent pas être utilisés en combinaison par les itérations de la même boucle.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="P:System.Threading.Tasks.ParallelLoopState.IsExceptional">
          <source>Gets whether any iteration of the loop has thrown an exception that went unhandled by that iteration.</source>
          <target state="translated">Indique si une itération de la boucle a levé une exception qui n'a pas été gérée par cette itération.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.IsExceptional">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if an unhandled exception was thrown; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si une exception non gérée a été levée ; sinon, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="P:System.Threading.Tasks.ParallelLoopState.IsStopped">
          <source>Gets whether any iteration of the loop has called the <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /&gt;</ph> method.</source>
          <target state="translated">Indique si une itération de la boucle a appelé la méthode <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.IsStopped">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if any iteration has stopped the loop by calling the <ph id="ph2">&lt;see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /&gt;</ph> method; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si une itération a arrêté la boucle en appelant la méthode <ph id="ph2">&lt;see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /&gt;</ph> ; sinon, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.IsStopped">
          <source>For long-running iterations of the loop, you can retrieve the value of the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A&gt;</ph> property to determine whether any iterations of the loop that began execution before the call to the <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> method are still executing.</source>
          <target state="translated">Pour les itérations à long terme de la boucle, vous pouvez récupérer la valeur de la <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A&gt;</ph> propriété pour déterminer si toutes les itérations de la boucle qui a commencé l’exécution avant l’appel à la <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> méthode sont en cours d’exécution.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.IsStopped">
          <source>You can then use the value of the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A&gt;</ph> property to determine whether they should return immediately or execute normally.</source>
          <target state="translated">Vous pouvez ensuite utiliser la valeur de la <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A&gt;</ph> propriété pour déterminer s’ils doivent retourner immédiatement ou s’exécuter normalement.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.IsStopped">
          <source>The following example executes up to 10,000 iterations of a loop in parallel.</source>
          <target state="translated">L’exemple suivant exécute jusqu'à 10 000 itérations d’une boucle en parallèle.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.IsStopped">
          <source>Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</source>
          <target state="translated">Chaque itération s’arrête pour un intervalle aléatoire compris entre 1 et 1 000 millisecondes.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.IsStopped">
          <source>A randomly generated value determines on which iteration of the loop the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> method is called.</source>
          <target state="translated">Une valeur générée de manière aléatoire détermine sur quelle itération de la boucle la <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> méthode est appelée.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.IsStopped">
          <source>Because iterations of the loop are still likely to be executing when the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> method is called, the lambda expression calls the <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A&gt;</ph> method to check whether another iteration has called the <ph id="ph3">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> method.</source>
          <target state="translated">Étant donné que les itérations de la boucle sont encore susceptibles de s’exécuter lorsque le <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> méthode est appelée, l’expression lambda appelle la <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A&gt;</ph> méthode permettant de vérifier si une autre itération a appelé le <ph id="ph3">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.IsStopped">
          <source>If it returns <ph id="ph1">`true`</ph>, the iteration returns immediately.</source>
          <target state="translated">Si elle retourne <ph id="ph1">`true`</ph>, l’itération retourne immédiatement.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration">
          <source>Gets the lowest iteration of the loop from which <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /&gt;</ph> was called.</source>
          <target state="translated">Obtient l'itération la plus basse de la boucle d'où <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /&gt;</ph> a été appelé.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration">
          <source>The lowest iteration from which <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /&gt;</ph> was called.</source>
          <target state="translated">Itération la plus basse d'où <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /&gt;</ph> a été appelé.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration">
          <source>In the case of a <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})" /&gt;</ph> loop, the value is based on an internally-generated index.</source>
          <target state="translated">Dans le cas d'une boucle <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})" /&gt;</ph>, la valeur est basée sur un index généré en interne.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration">
          <source>It is possible for multiple iterations of a parallel loop to call the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> method.</source>
          <target state="translated">Il est possible pour plusieurs itérations d’une boucle parallèle pour appeler le <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration">
          <source>If they do, this value is the smallest index of an iteration that called <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph>.</source>
          <target state="translated">Dans le cas, cette valeur est le plus petit index d’une itération appelée <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration">
          <source>If no iteration of the loop called <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph>, this property returns <ph id="ph2">`null`</ph>.</source>
          <target state="translated">Si aucune itération de la boucle n’appelé <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph>, cette propriété retourne <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration">
          <source>Note that the property value is unaffected by calls to the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> method.</source>
          <target state="translated">Notez que la valeur de propriété n’est pas affectée par les appels à la <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration">
          <source>In long-running iterations in which all iterations after the iteration that calls the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> method need not run, the <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> property is used to terminate iterations that began execution before the call to the <ph id="ph3">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> method.</source>
          <target state="translated">Dans les itérations de longs dans laquelle toutes les itérations après l’itération qui appelle le <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> méthode ne devez pas exécuter, le <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> propriété est utilisée pour mettre fin à des itérations qui a commencé l’exécution avant l’appel à la <ph id="ph3">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration">
          <source>To stop iterations whose index is greater than the lowest break iteration from competing execution, you should do the following:</source>
          <target state="translated">Pour arrêter les itérations dont l’index est supérieur à l’itération la plus basse saut à partir de l’exécution de concurrente, vous devez procédez comme suit :</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration">
          <source>Check whether the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A&gt;</ph> property is <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Vérifiez si le <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A&gt;</ph> propriété est <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration">
          <source>Exit from the iteration if its index is greater than the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> property value.</source>
          <target state="translated">À partir de l’itération de sortie si son index est supérieure à la <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> valeur de propriété.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration">
          <source>The example provides an illustration.</source>
          <target state="translated">Cet exemple en fournit une illustration.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration">
          <source>The following example executes up to 100 iterations of a loop in parallel.</source>
          <target state="translated">L’exemple suivant exécute jusqu'à 100 itérations d’une boucle en parallèle.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration">
          <source>Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</source>
          <target state="translated">Chaque itération s’arrête pour un intervalle aléatoire compris entre 1 et 1 000 millisecondes.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration">
          <source>A randomly generated value determines on which iteration of the loop the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> method is called.</source>
          <target state="translated">Une valeur générée de manière aléatoire détermine sur quelle itération de la boucle la <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> méthode est appelée.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration">
          <source>This prevents iterations whose index is greater than the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> property value from starting after the call to the <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> method, but it does not affect any iterations that have already begun executing.</source>
          <target state="translated">Cela empêche les itérations dont l’index est supérieur à la <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> valeur de la propriété de démarrer après l’appel à la <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> (méthode), mais elle n’affecte pas les itérations que vous ont déjà commencé à l’exécution.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration">
          <source>To prevent these from completing, each iteration calls the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A&gt;</ph> method to check whether another iteration has called the <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> method.</source>
          <target state="translated">Pour empêcher de se terminer, chaque itération appelle la <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A&gt;</ph> méthode permettant de vérifier si une autre itération a appelé le <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration">
          <source>If so, the iteration checks the value of the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> property and, if it is greater than the current iteration's index value, returns immediately.</source>
          <target state="translated">Si, par conséquent, l’itération vérifie la valeur de la <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> propriété et, si elle est supérieure à la valeur d’index de l’itération actuelle, retourne immédiatement.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration">
          <source>Note that, because the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> value is out of scope outside of the parallel loop, you must assign it to a variable that is visible outside of the loop if you want to preserve its value.</source>
          <target state="translated">Notez que, étant donné que le <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> valeur est hors de portée en dehors de la boucle parallèle, vous devez l’attribuer à une variable qui est visible en dehors de la boucle si vous souhaitez conserver sa valeur.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration">
          <source>Gets whether the current iteration of the loop should exit based on requests made by this or other iterations.</source>
          <target state="translated">Indique si l'itération actuelle de la boucle doit s'arrêter en fonction des requêtes effectuées par cette itération ou d'autres.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current iteration should exit; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si l'itération actuelle doit s'arrêter ; sinon, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A&gt;</ph> property is set to <ph id="ph2">`true`</ph> under any of the following conditions:</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A&gt;</ph> est définie sur <ph id="ph2">`true`</ph> si l’une des conditions suivantes :</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration">
          <source>An iteration of the loop calls <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph>.</source>
          <target state="translated">Une itération de la boucle appelle <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> ou <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration">
          <source>An iteration of the loop throws an exception.</source>
          <target state="translated">Une itération de la boucle lève une exception.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration">
          <source>The loop is canceled.</source>
          <target state="translated">La boucle est annulée.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration">
          <source>When this property is <ph id="ph1">`true`</ph>, the <ph id="ph2">&lt;xref:System.Threading.Tasks.Parallel&gt;</ph> class will proactively attempt to prohibit additional iterations of the loop from starting execution.</source>
          <target state="translated">Lorsque cette propriété est <ph id="ph1">`true`</ph>, la <ph id="ph2">&lt;xref:System.Threading.Tasks.Parallel&gt;</ph> classe essaiera d’interdire le démarrage de l’exécution des itérations supplémentaires de la boucle.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration">
          <source>However, there may be cases where it is unable to prevent additional iterations from starting.</source>
          <target state="translated">Toutefois, il peut arriver lorsqu’elle est incapable d’empêcher le démarrage d’autres itérations.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration">
          <source>It may also be the case that a long-running iteration has already begun execution.</source>
          <target state="translated">Il peut également être le cas qu’une itération de la durée d’exécution longue a déjà commencé à l’exécution.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration">
          <source>In such cases, iterations may explicitly check the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A&gt;</ph> property and cease execution if the property returns <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Dans ce cas, les itérations peuvent vérifier explicitement la <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A&gt;</ph> propriété et arrêter l’exécution si la propriété retourne <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration">
          <source>The following example executes up to 100 iterations of a loop in parallel.</source>
          <target state="translated">L’exemple suivant exécute jusqu'à 100 itérations d’une boucle en parallèle.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration">
          <source>Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</source>
          <target state="translated">Chaque itération s’arrête pour un intervalle aléatoire compris entre 1 et 1 000 millisecondes.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration">
          <source>A randomly generated value determines on which iteration of the loop the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> method is called.</source>
          <target state="translated">Une valeur générée de manière aléatoire détermine sur quelle itération de la boucle la <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> méthode est appelée.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration">
          <source>This prevents iterations whose index is greater than the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> property value from starting after the call to the <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> method, but it does not affect any iterations that have already begun executing.</source>
          <target state="translated">Cela empêche les itérations dont l’index est supérieur à la <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> valeur de la propriété de démarrer après l’appel à la <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> (méthode), mais elle n’affecte pas les itérations que vous ont déjà commencé à l’exécution.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration">
          <source>To prevent these from completing, each iteration calls the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A&gt;</ph> method to check whether another iteration has called the <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> method.</source>
          <target state="translated">Pour empêcher de se terminer, chaque itération appelle la <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A&gt;</ph> méthode permettant de vérifier si une autre itération a appelé le <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration">
          <source>If so, the iteration checks the value of the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> property and, if it is greater than the current iteration's index value, returns immediately.</source>
          <target state="translated">Si, par conséquent, l’itération vérifie la valeur de la <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A&gt;</ph> propriété et, si elle est supérieure à la valeur d’index de l’itération actuelle, retourne immédiatement.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ParallelLoopState.Stop">
          <source>Communicates that the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Parallel" /&gt;</ph> loop should cease execution at the system's earliest convenience.</source>
          <target state="translated">Indique que l'exécution de la boucle <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Parallel" /&gt;</ph> doit s'arrêter dès que le système le peut.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Stop">
          <source>Calling the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> method indicates that any iterations of the loop that have not yet started need not be run.</source>
          <target state="translated">Appel de la <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> méthode indique que toutes les itérations de la boucle qui n’ont pas encore démarré ne doivent pas être exécutées.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Stop">
          <source>It effectively cancels any additional iterations of the loop.</source>
          <target state="translated">Elle annule effectivement des itérations supplémentaires de la boucle.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Stop">
          <source>However, it does not stop any iterations that have already begun execution.</source>
          <target state="translated">Toutefois, il n’arrête pas toutes les itérations que vous ont déjà commencé l’exécution.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Stop">
          <source>Calling the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> method causes the <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A&gt;</ph> property to return <ph id="ph3">`true`</ph> for any iteration of the loop that is still executing.</source>
          <target state="translated">Appel de la <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> méthode provoque la <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A&gt;</ph> propriété à retourner <ph id="ph3">`true`</ph> pour une itération de la boucle est en cours d’exécution.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Stop">
          <source>This is particularly useful for long-running iterations, which can check the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A&gt;</ph> property and exit early if its value is <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Cela est particulièrement utile pour les itérations longues, ce qui peuvent vérifier le <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A&gt;</ph> propriété et quitter tôt si sa valeur est <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Stop">
          <source><ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> is typically employed in search-based algorithms, where once a result is found, no other iterations need be executed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> est généralement utilisée dans les algorithmes basés sur recherche, où une fois le résultat trouvées, aucune autres itérations doivent être exécutées.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Stop">
          <source>The following example executes up to 10,000 iterations of a loop in parallel.</source>
          <target state="translated">L’exemple suivant exécute jusqu'à 10 000 itérations d’une boucle en parallèle.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Stop">
          <source>Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</source>
          <target state="translated">Chaque itération s’arrête pour un intervalle aléatoire compris entre 1 et 1 000 millisecondes.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Stop">
          <source>A randomly generated value determines on which iteration of the loop the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> method is called.</source>
          <target state="translated">Une valeur générée de manière aléatoire détermine sur quelle itération de la boucle la <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> méthode est appelée.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Stop">
          <source>As the output from the example shows, no iterations execute after the call to the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> method.</source>
          <target state="translated">Comme le montre la sortie de l’exemple, aucune itération s’exécutent après l’appel à la <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Stop">
          <source>Because iterations of the loop are still likely to be executing when the <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> method is called, each iteration calls the <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A&gt;</ph> method to check whether another iteration has called the <ph id="ph3">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> method.</source>
          <target state="translated">Étant donné que les itérations de la boucle sont encore susceptibles de s’exécuter lorsque le <ph id="ph1">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> méthode est appelée, les appels de chaque itération le <ph id="ph2">&lt;xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A&gt;</ph> méthode permettant de vérifier si une autre itération a appelé le <ph id="ph3">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.ParallelLoopState.Stop">
          <source>If it returns <ph id="ph1">`true`</ph>, the iteration returns immediately.</source>
          <target state="translated">Si elle retourne <ph id="ph1">`true`</ph>, l’itération retourne immédiatement.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ParallelLoopState.Stop">
          <source>The <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /&gt;</ph> method was called previously.</source>
          <target state="translated">La méthode <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /&gt;</ph> a été appelée au préalable.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.ParallelLoopState.Stop">
          <source><ph id="ph1">&lt;see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /&gt;</ph> and <ph id="ph2">&lt;see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /&gt;</ph> may not be used in combination by iterations of the same loop.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /&gt;</ph> et <ph id="ph2">&lt;see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /&gt;</ph> ne peuvent pas être utilisés en combinaison par les itérations de la même boucle.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>