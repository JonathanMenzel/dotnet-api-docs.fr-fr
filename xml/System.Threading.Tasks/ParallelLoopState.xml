<Type Name="ParallelLoopState" FullName="System.Threading.Tasks.ParallelLoopState">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="af16a98f705e63e2ba868d464648af2e365bcb9a" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48619324" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ParallelLoopState" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ParallelLoopState extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.ParallelLoopState" />
  <TypeSignature Language="VB.NET" Value="Public Class ParallelLoopState" />
  <TypeSignature Language="C++ CLI" Value="public ref class ParallelLoopState" />
  <TypeSignature Language="F#" Value="type ParallelLoopState = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("ShouldExitCurrentIteration = {ShouldExitCurrentIteration}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="c67fc-101">Permet aux itérations de boucles parallèles d'interagir avec d'autres itérations.</span>
      <span class="sxs-lookup">
        <span data-stu-id="c67fc-101">Enables iterations of parallel loops to interact with other iterations.</span>
      </span>
      <span data-ttu-id="c67fc-102">Une instance de cette classe est fournie par la classe <see cref="T:System.Threading.Tasks.Parallel" /> à chaque boucle ; vous ne pouvez pas créer d'instances dans votre code utilisateur.</span>
      <span class="sxs-lookup">
        <span data-stu-id="c67fc-102">An instance of this class is provided by the <see cref="T:System.Threading.Tasks.Parallel" /> class to each loop; you can not create instances in your code.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c67fc-103">Notez que vous ne pouvez pas instancier une instance de cette classe.</span><span class="sxs-lookup"><span data-stu-id="c67fc-103">Note that you cannot instantiate an instance of this class.</span></span> <span data-ttu-id="c67fc-104">Il est automatiquement généré par le compilateur en tant qu’argument dans un appel à la <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> ou <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="c67fc-104">It is automatically generated by the compiler as an argument in a call to the <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> or <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="c67fc-105">Cet exemple en fournit une illustration.</span><span class="sxs-lookup"><span data-stu-id="c67fc-105">The example provides an illustration.</span></span>  
  
 <span data-ttu-id="c67fc-106">Des constructions comme `for` et `foreach` (en c#) et `For` et `For Each` (en Visual Basic) s’exécuter séquentiellement à partir de l’index le plus bas au plus grand ou du premier objet dans un ensemble à la dernière.</span><span class="sxs-lookup"><span data-stu-id="c67fc-106">Constructs such as `for` and `foreach` (in C#) and `For` and `For Each` (in Visual Basic) execute sequentially from the lowest index to the highest or from the first object in a set to the last.</span></span> <span data-ttu-id="c67fc-107">En revanche, le <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> et <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> n’est pas le cas de méthodes.</span><span class="sxs-lookup"><span data-stu-id="c67fc-107">In contrast, the <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> and <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> methods do not.</span></span> <span data-ttu-id="c67fc-108">Étant donné que chaque itération de la boucle s’exécuter en parallèle, ils peuvent commencer et se terminer dans n’importe quel ordre.</span><span class="sxs-lookup"><span data-stu-id="c67fc-108">Because individual iterations of the loop run in parallel, they can begin and end in any order.</span></span> <span data-ttu-id="c67fc-109">Le <xref:System.Threading.Tasks.ParallelLoopState> classe permet à des itérations de boucles parallèles d’interagir avec eux.</span><span class="sxs-lookup"><span data-stu-id="c67fc-109">The <xref:System.Threading.Tasks.ParallelLoopState> class allows individual iterations of parallel loops to interact with one another.</span></span> <span data-ttu-id="c67fc-110">Le <xref:System.Threading.Tasks.ParallelLoopState> classe vous permet de :</span><span class="sxs-lookup"><span data-stu-id="c67fc-110">The <xref:System.Threading.Tasks.ParallelLoopState> class allows you to:</span></span>  
  
-   <span data-ttu-id="c67fc-111">Quitter l’itération actuelle et empêcher des itérations supplémentaires de démarrer en appelant le <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="c67fc-111">Exit the current iteration and prevent any additional iterations from starting by calling the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span> <span data-ttu-id="c67fc-112">Cela n’affecte pas les itérations qui ont déjà commencé l’exécution.</span><span class="sxs-lookup"><span data-stu-id="c67fc-112">This does not affect iterations that have already begun execution.</span></span>  
  
-   <span data-ttu-id="c67fc-113">Empêcher des itérations avec un index supérieur à l’index actuel de l’exécution en appelant le <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="c67fc-113">Prevent any iterations with an index greater than the current index from executing by calling the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="c67fc-114">Cela n’affecte pas les itérations qui ont déjà commencé l’exécution.</span><span class="sxs-lookup"><span data-stu-id="c67fc-114">This does not affect iterations that have already begun execution.</span></span>  
  
-   <span data-ttu-id="c67fc-115">Déterminer si une exception s’est produite dans une itération de boucle en récupérant la valeur de la <xref:System.Threading.Tasks.ParallelLoopState.IsExceptional%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="c67fc-115">Determine whether an exception has occurred in any loop iteration by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsExceptional%2A> property.</span></span>  
  
-   <span data-ttu-id="c67fc-116">Déterminer si une itération de la boucle a appelé le <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> méthode en récupérant la valeur de la <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="c67fc-116">Determine whether any iteration of the loop has called the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property.</span></span> <span data-ttu-id="c67fc-117">Vous pouvez utiliser cette propriété pour retourner à partir d’itérations de la boucle qui a démarré avant l’appel à la <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> méthode mais sont en cours d’exécution.</span><span class="sxs-lookup"><span data-stu-id="c67fc-117">You can use this property to return from iterations of the loop that started before the call to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method but are still executing.</span></span>  
  
-   <span data-ttu-id="c67fc-118">Déterminer si une itération de la boucle a appelé le <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> ou <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> méthode ou a levé une exception en récupérant la valeur de la <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="c67fc-118">Determine whether any iteration of the loop has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> or <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method or has thrown an exception by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property.</span></span>  
  
-   <span data-ttu-id="c67fc-119">Sortie à partir d’une itération de longue dont l’index est supérieur à l’index d’une itération dans laquelle Break a été appelé en récupérant la valeur de la <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="c67fc-119">Exit from a long-running iteration whose index is greater than the index of an iteration in which Break was called by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c67fc-120">L’exemple suivant exécute jusqu'à 100 itérations d’une boucle en parallèle.</span><span class="sxs-lookup"><span data-stu-id="c67fc-120">The following example executes up to 100 iterations of a loop in parallel.</span></span> <span data-ttu-id="c67fc-121">Chaque itération s’interrompt pendant un intervalle aléatoire compris entre 1 et 1 000 millisecondes.</span><span class="sxs-lookup"><span data-stu-id="c67fc-121">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="c67fc-122">Une valeur générée de manière aléatoire détermine sur quelle itération de la boucle la <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> méthode est appelée.</span><span class="sxs-lookup"><span data-stu-id="c67fc-122">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called.</span></span> <span data-ttu-id="c67fc-123">Comme la sortie de l’exemple, aucune itération dont l’index est supérieur à la <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> début de valeur de propriété après l’appel à la <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="c67fc-123">As the output from the example shows, no iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value start after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 <span data-ttu-id="c67fc-124">Étant donné que les itérations de la boucle sont encore susceptibles d’être l’exécution lorsque le <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> méthode est appelée, les appels de chaque itération le <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> propriété pour vérifier si une autre itération a appelé le <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="c67fc-124">Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="c67fc-125">Si la valeur de propriété est `true`, l’itération vérifie la valeur de la <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> propriété et, si elle est supérieure à la valeur d’index de l’itération actuelle, retourne immédiatement.</span><span class="sxs-lookup"><span data-stu-id="c67fc-125">If  the property value is `true`, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property and, if it is greater than the current iteration's index value, returns immediately.</span></span>  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="c67fc-126">Un <see cref="T:System.Threading.Tasks.ParallelLoopState" /> instance est destinée à être utilisé uniquement dans le corps de la boucle à laquelle une instance a été fournie.</span>
      <span class="sxs-lookup">
        <span data-stu-id="c67fc-126">A <see cref="T:System.Threading.Tasks.ParallelLoopState" /> instance is meant to be used only within the body of the loop to which an instance was provided.</span>
      </span>
      <span data-ttu-id="c67fc-127">Il est déconseillé d’utiliser un fourni <see cref="T:System.Threading.Tasks.ParallelLoopState" /> instance après la boucle associée se termine, ni à remettre explicitement à d’autres threads et de laisser ces derniers y accéder à tout moment.</span>
      <span class="sxs-lookup">
        <span data-stu-id="c67fc-127">It is not safe to use a provided <see cref="T:System.Threading.Tasks.ParallelLoopState" /> instance after the associated loop ends, nor is it safe to explicitly hand it off to other threads and have those threads access it at any time.</span>
      </span>
      <span data-ttu-id="c67fc-128">Une autre <see cref="T:System.Threading.Tasks.ParallelLoopState" /> instance est fournie à chaque thread impliqué dans une boucle.</span>
      <span class="sxs-lookup">
        <span data-stu-id="c67fc-128">A different <see cref="T:System.Threading.Tasks.ParallelLoopState" /> instance will be provided to each thread involved in a loop.</span>
      </span>
    </threadsafe>
    <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">
      <span data-ttu-id="c67fc-129">Parallélisme de données (bibliothèque parallèle de tâches)</span>
      <span class="sxs-lookup">
        <span data-stu-id="c67fc-129">Data Parallelism (Task Parallel Library)</span>
      </span>
    </related>
  </Docs>
  <Members>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public void Break ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Break() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.ParallelLoopState.Break" />
      <MemberSignature Language="VB.NET" Value="Public Sub Break ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Break();" />
      <MemberSignature Language="F#" Value="member this.Break : unit -&gt; unit" Usage="parallelLoopState.Break " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c67fc-130">Indique que l'exécution de la boucle <see cref="T:System.Threading.Tasks.Parallel" /> doit s'arrêter après l'itération actuelle dès que le système le peut.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c67fc-130">Communicates that the <see cref="T:System.Threading.Tasks.Parallel" /> loop should cease execution of iterations beyond the current iteration at the system's earliest convenience.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c67fc-131"><xref:System.Threading.Tasks.ParallelLoopState.Break%2A> Indique qu’aucune itération après l’itération actuelle ne doit être exécutée.</span><span class="sxs-lookup"><span data-stu-id="c67fc-131"><xref:System.Threading.Tasks.ParallelLoopState.Break%2A> indicates that no iterations after the current iteration should be run.</span></span> <span data-ttu-id="c67fc-132">Il annule efficacement des itérations supplémentaires de la boucle.</span><span class="sxs-lookup"><span data-stu-id="c67fc-132">It effectively cancels any additional iterations of the loop.</span></span> <span data-ttu-id="c67fc-133">Toutefois, il n’arrête pas d’itérations qui ont déjà commencé l’exécution.</span><span class="sxs-lookup"><span data-stu-id="c67fc-133">However, it does not stop any iterations that have already begun execution.</span></span> <span data-ttu-id="c67fc-134">Par exemple, si <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> est appelée à partir de la 100 ème itération d’une boucle parallèle itération à partir de 0 à 1 000, toutes les itérations inférieure à 100 doivent toujours être exécuter, mais les itérations de 101 à 1000 qui n’ont pas encore démarré ne sont pas exécutées.</span><span class="sxs-lookup"><span data-stu-id="c67fc-134">For example, if <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> is called from the 100th iteration of a parallel loop iterating from 0 to 1,000, all iterations less than 100 should still be run, but the iterations from 101 through to 1000 that have not yet started are not executed.</span></span>  
  
 <span data-ttu-id="c67fc-135">Pour les itérations longues qui peuvent déjà être exécutés, <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> définit le <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> propriété pour un index de l’itération actuelle si l’index actuel est inférieur à la valeur actuelle de <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>.</span><span class="sxs-lookup"><span data-stu-id="c67fc-135">For long-running iterations that may already be executing, <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> sets the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property to the current iteration's index if the current index is less than the current value of <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>.</span></span> <span data-ttu-id="c67fc-136">Pour arrêter les itérations dont l’index est supérieur à l’itération la plus basse de saut à partir de l’exécution de concurrente, vous devez procédez comme suit :</span><span class="sxs-lookup"><span data-stu-id="c67fc-136">To stop iterations whose index is greater than the lowest break iteration from competing execution, you should do the following:</span></span>  
  
1.  <span data-ttu-id="c67fc-137">Vérifiez si le <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> propriété est `true`.</span><span class="sxs-lookup"><span data-stu-id="c67fc-137">Check whether the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property is `true`.</span></span>  
  
2.  <span data-ttu-id="c67fc-138">Quitter à partir de l’itération si son index est supérieure à la <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> valeur de propriété.</span><span class="sxs-lookup"><span data-stu-id="c67fc-138">Exit from the iteration if its index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value.</span></span>  
  
 <span data-ttu-id="c67fc-139">Cet exemple en fournit une illustration.</span><span class="sxs-lookup"><span data-stu-id="c67fc-139">The example provides an illustration.</span></span>  
  
 <span data-ttu-id="c67fc-140"><xref:System.Threading.Tasks.ParallelLoopState.Break%2A> est généralement employée dans les algorithmes basés sur recherche où un classement est présent dans la source de données.</span><span class="sxs-lookup"><span data-stu-id="c67fc-140"><xref:System.Threading.Tasks.ParallelLoopState.Break%2A> is typically employed in search-based algorithms where an ordering is present in the data source.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c67fc-141">L’exemple suivant exécute jusqu'à 100 itérations d’une boucle en parallèle.</span><span class="sxs-lookup"><span data-stu-id="c67fc-141">The following example executes up to 100 iterations of a loop in parallel.</span></span> <span data-ttu-id="c67fc-142">Chaque itération s’interrompt pendant un intervalle aléatoire compris entre 1 et 1 000 millisecondes.</span><span class="sxs-lookup"><span data-stu-id="c67fc-142">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="c67fc-143">Une valeur générée de manière aléatoire détermine sur quelle itération de la boucle la <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> méthode est appelée.</span><span class="sxs-lookup"><span data-stu-id="c67fc-143">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called.</span></span> <span data-ttu-id="c67fc-144">Comme la sortie de l’exemple, aucune itération dont l’index est supérieur à la <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> début de valeur de propriété après l’appel à la <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="c67fc-144">As the output from the example shows, no iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value start after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 <span data-ttu-id="c67fc-145">Étant donné que les itérations de la boucle sont encore susceptibles d’être l’exécution lorsque le <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> méthode est appelée, les appels de chaque itération le <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> propriété pour vérifier si une autre itération a appelé le <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="c67fc-145">Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="c67fc-146">Si la valeur de propriété est `true`, l’itération vérifie la valeur de la <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> propriété et, si elle est supérieure à la valeur d’index de l’itération actuelle, retourne immédiatement.</span><span class="sxs-lookup"><span data-stu-id="c67fc-146">If  the property value is `true`, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property and, if it is greater than the current iteration's index value, returns immediately.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="c67fc-147">La méthode <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> a été appelée au préalable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c67fc-147">The <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> method was previously called.</span>
          </span>
          <span data-ttu-id="c67fc-148">
            <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> et <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> ne peuvent pas être utilisés en combinaison par les itérations de la même boucle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c67fc-148">
              <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> and <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> may not be used in combination by iterations of the same loop.</span>
          </span>
        </exception>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">
          <span data-ttu-id="c67fc-149">Parallélisme de données (bibliothèque parallèle de tâches)</span>
          <span class="sxs-lookup">
            <span data-stu-id="c67fc-149">Data Parallelism (Task Parallel Library)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="IsExceptional">
      <MemberSignature Language="C#" Value="public bool IsExceptional { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsExceptional" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.IsExceptional" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsExceptional As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsExceptional { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsExceptional : bool" Usage="System.Threading.Tasks.ParallelLoopState.IsExceptional" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c67fc-150">Indique si une itération de la boucle a levé une exception qui n'a pas été gérée par cette itération.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c67fc-150">Gets whether any iteration of the loop has thrown an exception that went unhandled by that iteration.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c67fc-151">
            <see langword="true" /> si une exception non gérée a été levée ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c67fc-151">
              <see langword="true" /> if an unhandled exception was thrown; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">
          <span data-ttu-id="c67fc-152">Parallélisme de données (bibliothèque parallèle de tâches)</span>
          <span class="sxs-lookup">
            <span data-stu-id="c67fc-152">Data Parallelism (Task Parallel Library)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="IsStopped">
      <MemberSignature Language="C#" Value="public bool IsStopped { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStopped" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.IsStopped" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStopped As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStopped { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStopped : bool" Usage="System.Threading.Tasks.ParallelLoopState.IsStopped" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c67fc-153">Indique si une itération de la boucle a appelé la méthode <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c67fc-153">Gets whether any iteration of the loop has called the <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c67fc-154">
            <see langword="true" /> si une itération a arrêté la boucle en appelant la méthode <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c67fc-154">
              <see langword="true" /> if any iteration has stopped the loop by calling the <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> method; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c67fc-155">Pour les itérations de longs de la boucle, vous pouvez récupérer la valeur de la <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> propriété afin de déterminer si les itérations de la boucle qui a commencé l’exécution avant l’appel à la <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> méthode sont en cours d’exécution.</span><span class="sxs-lookup"><span data-stu-id="c67fc-155">For long-running iterations of the loop, you can retrieve the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property to determine whether any iterations of the loop that began execution before the call to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method are still executing.</span></span> <span data-ttu-id="c67fc-156">Vous pouvez ensuite utiliser la valeur de la <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> propriété afin de déterminer s’ils doivent retourner immédiatement ou s’exécuter normalement.</span><span class="sxs-lookup"><span data-stu-id="c67fc-156">You can then use the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property to determine whether they should return immediately or execute normally.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c67fc-157">L’exemple suivant exécute jusqu'à 10 000 itérations d’une boucle en parallèle.</span><span class="sxs-lookup"><span data-stu-id="c67fc-157">The following example executes up to 10,000 iterations of a loop in parallel.</span></span> <span data-ttu-id="c67fc-158">Chaque itération s’interrompt pendant un intervalle aléatoire compris entre 1 et 1 000 millisecondes.</span><span class="sxs-lookup"><span data-stu-id="c67fc-158">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="c67fc-159">Une valeur générée de manière aléatoire détermine sur quelle itération de la boucle la <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> méthode est appelée.</span><span class="sxs-lookup"><span data-stu-id="c67fc-159">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method is called.</span></span> <span data-ttu-id="c67fc-160">Étant donné que les itérations de la boucle sont encore susceptibles d’être l’exécution lorsque le <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> méthode est appelée, l’expression lambda appelle la <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> méthode permettant de vérifier si une autre itération a appelé le <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="c67fc-160">Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method is called, the lambda expression calls the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> method to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span> <span data-ttu-id="c67fc-161">Si elle retourne `true`, l’itération retourne immédiatement.</span><span class="sxs-lookup"><span data-stu-id="c67fc-161">If it returns `true`, the iteration returns immediately.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/stop1.cs#1)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/stop1.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">
          <span data-ttu-id="c67fc-162">Parallélisme de données (bibliothèque parallèle de tâches)</span>
          <span class="sxs-lookup">
            <span data-stu-id="c67fc-162">Data Parallelism (Task Parallel Library)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="LowestBreakIteration">
      <MemberSignature Language="C#" Value="public Nullable&lt;long&gt; LowestBreakIteration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;int64&gt; LowestBreakIteration" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LowestBreakIteration As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;long&gt; LowestBreakIteration { Nullable&lt;long&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.LowestBreakIteration : Nullable&lt;int64&gt;" Usage="System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c67fc-163">Obtient l'itération la plus basse de la boucle d'où <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> a été appelé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c67fc-163">Gets the lowest iteration of the loop from which <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> was called.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c67fc-164">Itération la plus basse d'où <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> a été appelé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c67fc-164">The lowest iteration from which <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> was called.</span>
          </span>
          <span data-ttu-id="c67fc-165">Dans le cas d'une boucle <see cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})" />, la valeur est basée sur un index généré en interne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c67fc-165">In the case of a <see cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})" /> loop, the value is based on an internally-generated index.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c67fc-166">Il est possible que plusieurs itérations d’une boucle parallèle pour appeler le <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="c67fc-166">It is possible for multiple iterations of a parallel loop to call the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="c67fc-167">S’ils le font, cette valeur est le plus petit index d’une itération appelée <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>.</span><span class="sxs-lookup"><span data-stu-id="c67fc-167">If they do, this value is the smallest index of an iteration that called <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>.</span></span> <span data-ttu-id="c67fc-168">Si aucune itération de la boucle n’appelé <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, cette propriété retourne `null`.</span><span class="sxs-lookup"><span data-stu-id="c67fc-168">If no iteration of the loop called <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, this property returns `null`.</span></span> <span data-ttu-id="c67fc-169">Notez que la valeur de propriété n’est pas affectée par les appels à la <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="c67fc-169">Note that the property value is unaffected by calls to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span>  
  
 <span data-ttu-id="c67fc-170">Dans les itérations de longs dans laquelle toutes les itérations après l’itération qui appelle le <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> méthode doive s’exécute pas, le <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> propriété est utilisée pour terminer les itérations qui a commencé l’exécution avant l’appel à la <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="c67fc-170">In long-running iterations in which all iterations after the iteration that calls the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method need not run, the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property is used to terminate iterations that began execution before the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="c67fc-171">Pour arrêter les itérations dont l’index est supérieur à l’itération la plus basse de saut à partir de l’exécution de concurrente, vous devez procédez comme suit :</span><span class="sxs-lookup"><span data-stu-id="c67fc-171">To stop iterations whose index is greater than the lowest break iteration from competing execution, you should do the following:</span></span>  
  
1.  <span data-ttu-id="c67fc-172">Vérifiez si le <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> propriété est `true`.</span><span class="sxs-lookup"><span data-stu-id="c67fc-172">Check whether the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property is `true`.</span></span>  
  
2.  <span data-ttu-id="c67fc-173">Quitter à partir de l’itération si son index est supérieure à la <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> valeur de propriété.</span><span class="sxs-lookup"><span data-stu-id="c67fc-173">Exit from the iteration if its index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value.</span></span>  
  
 <span data-ttu-id="c67fc-174">Cet exemple en fournit une illustration.</span><span class="sxs-lookup"><span data-stu-id="c67fc-174">The example provides an illustration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c67fc-175">L’exemple suivant exécute jusqu'à 100 itérations d’une boucle en parallèle.</span><span class="sxs-lookup"><span data-stu-id="c67fc-175">The following example executes up to 100 iterations of a loop in parallel.</span></span> <span data-ttu-id="c67fc-176">Chaque itération s’interrompt pendant un intervalle aléatoire compris entre 1 et 1 000 millisecondes.</span><span class="sxs-lookup"><span data-stu-id="c67fc-176">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="c67fc-177">Une valeur générée de manière aléatoire détermine sur quelle itération de la boucle la <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> méthode est appelée.</span><span class="sxs-lookup"><span data-stu-id="c67fc-177">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called.</span></span> <span data-ttu-id="c67fc-178">Cela empêche les itérations dont l’index est supérieur à la <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> valeur de propriété de démarrer après l’appel à la <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> (méthode), mais elle n’affecte pas d’itérations qui ont déjà commencé l’exécution.</span><span class="sxs-lookup"><span data-stu-id="c67fc-178">This prevents iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value from starting after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method, but it does not affect any iterations that have already begun executing.</span></span> <span data-ttu-id="c67fc-179">Pour éviter ces de se terminer, chaque itération appelle le <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> méthode permettant de vérifier si une autre itération a appelé le <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="c67fc-179">To prevent these from completing, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> method to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="c67fc-180">Si, par conséquent, l’itération vérifie la valeur de la <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> propriété et, si elle est supérieure à la valeur d’index de l’itération actuelle, retourne immédiatement.</span><span class="sxs-lookup"><span data-stu-id="c67fc-180">If so, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property and, if it is greater than the current iteration's index value, returns immediately.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 <span data-ttu-id="c67fc-181">Notez que, étant donné que le <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> valeur est hors de portée en dehors de la boucle parallèle, vous devez l’attribuer à une variable qui est visible en dehors de la boucle si vous souhaitez conserver sa valeur.</span><span class="sxs-lookup"><span data-stu-id="c67fc-181">Note that, because the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> value is out of scope outside of the parallel loop, you must assign it to a variable that is visible outside of the loop if you want to preserve its value.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Break" />
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">
          <span data-ttu-id="c67fc-182">Parallélisme de données (bibliothèque parallèle de tâches)</span>
          <span class="sxs-lookup">
            <span data-stu-id="c67fc-182">Data Parallelism (Task Parallel Library)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ShouldExitCurrentIteration">
      <MemberSignature Language="C#" Value="public bool ShouldExitCurrentIteration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShouldExitCurrentIteration" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ShouldExitCurrentIteration As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShouldExitCurrentIteration { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ShouldExitCurrentIteration : bool" Usage="System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c67fc-183">Indique si l'itération actuelle de la boucle doit s'arrêter en fonction des requêtes effectuées par cette itération ou d'autres.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c67fc-183">Gets whether the current iteration of the loop should exit based on requests made by this or other iterations.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c67fc-184">
            <see langword="true" /> si l'itération actuelle doit s'arrêter ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c67fc-184">
              <see langword="true" /> if the current iteration should exit; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c67fc-185">Le <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> propriété est définie sur `true` si l’une des conditions suivantes :</span><span class="sxs-lookup"><span data-stu-id="c67fc-185">The <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property is set to `true` under any of the following conditions:</span></span>  
  
-   <span data-ttu-id="c67fc-186">Une itération de la boucle appelle <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> ou <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>.</span><span class="sxs-lookup"><span data-stu-id="c67fc-186">An iteration of the loop calls <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> or <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>.</span></span>  
  
-   <span data-ttu-id="c67fc-187">Une itération de la boucle lève une exception.</span><span class="sxs-lookup"><span data-stu-id="c67fc-187">An iteration of the loop throws an exception.</span></span>  
  
-   <span data-ttu-id="c67fc-188">La boucle est annulée.</span><span class="sxs-lookup"><span data-stu-id="c67fc-188">The loop is canceled.</span></span>  
  
 <span data-ttu-id="c67fc-189">Lorsque cette propriété a `true`, la <xref:System.Threading.Tasks.Parallel> classe essaiera d’interdire le démarrage de l’exécution des itérations supplémentaires de la boucle.</span><span class="sxs-lookup"><span data-stu-id="c67fc-189">When this property is `true`, the <xref:System.Threading.Tasks.Parallel> class will proactively attempt to prohibit additional iterations of the loop from starting execution.</span></span> <span data-ttu-id="c67fc-190">Toutefois, il peut arriver lorsqu’elle est incapable d’empêcher le démarrage d’autres itérations.</span><span class="sxs-lookup"><span data-stu-id="c67fc-190">However, there may be cases where it is unable to prevent additional iterations from starting.</span></span>  
  
 <span data-ttu-id="c67fc-191">Il peut également arriver qu’une itération de longs a déjà commencé l’exécution.</span><span class="sxs-lookup"><span data-stu-id="c67fc-191">It may also be the case that a long-running iteration has already begun execution.</span></span> <span data-ttu-id="c67fc-192">Dans ce cas, les itérations peuvent vérifier explicitement la <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> propriété et arrêter l’exécution si la propriété renvoie `true`.</span><span class="sxs-lookup"><span data-stu-id="c67fc-192">In such cases, iterations may explicitly check the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property and cease execution if the property returns `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c67fc-193">L’exemple suivant exécute jusqu'à 100 itérations d’une boucle en parallèle.</span><span class="sxs-lookup"><span data-stu-id="c67fc-193">The following example executes up to 100 iterations of a loop in parallel.</span></span> <span data-ttu-id="c67fc-194">Chaque itération s’interrompt pendant un intervalle aléatoire compris entre 1 et 1 000 millisecondes.</span><span class="sxs-lookup"><span data-stu-id="c67fc-194">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="c67fc-195">Une valeur générée de manière aléatoire détermine sur quelle itération de la boucle la <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> méthode est appelée.</span><span class="sxs-lookup"><span data-stu-id="c67fc-195">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called.</span></span> <span data-ttu-id="c67fc-196">Cela empêche les itérations dont l’index est supérieur à la <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> valeur de propriété de démarrer après l’appel à la <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> (méthode), mais elle n’affecte pas d’itérations qui ont déjà commencé l’exécution.</span><span class="sxs-lookup"><span data-stu-id="c67fc-196">This prevents iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value from starting after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method, but it does not affect any iterations that have already begun executing.</span></span> <span data-ttu-id="c67fc-197">Pour éviter ces de se terminer, chaque itération appelle le <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> méthode permettant de vérifier si une autre itération a appelé le <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="c67fc-197">To prevent these from completing, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> method to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="c67fc-198">Si, par conséquent, l’itération vérifie la valeur de la <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> propriété et, si elle est supérieure à la valeur d’index de l’itération actuelle, retourne immédiatement.</span><span class="sxs-lookup"><span data-stu-id="c67fc-198">If so, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property and, if it is greater than the current iteration's index value, returns immediately.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Break" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Stop" />
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">
          <span data-ttu-id="c67fc-199">Parallélisme de données (bibliothèque parallèle de tâches)</span>
          <span class="sxs-lookup">
            <span data-stu-id="c67fc-199">Data Parallelism (Task Parallel Library)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.ParallelLoopState.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="parallelLoopState.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c67fc-200">Indique que l'exécution de la boucle <see cref="T:System.Threading.Tasks.Parallel" /> doit s'arrêter dès que le système le peut.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c67fc-200">Communicates that the <see cref="T:System.Threading.Tasks.Parallel" /> loop should cease execution at the system's earliest convenience.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c67fc-201">Appel de la <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> méthode indique que toutes les itérations de la boucle qui n’ont pas encore démarré ne doivent pas être exécutées.</span><span class="sxs-lookup"><span data-stu-id="c67fc-201">Calling the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method indicates that any iterations of the loop that have not yet started need not be run.</span></span> <span data-ttu-id="c67fc-202">Il annule efficacement des itérations supplémentaires de la boucle.</span><span class="sxs-lookup"><span data-stu-id="c67fc-202">It effectively cancels any additional iterations of the loop.</span></span> <span data-ttu-id="c67fc-203">Toutefois, il n’arrête pas d’itérations qui ont déjà commencé l’exécution.</span><span class="sxs-lookup"><span data-stu-id="c67fc-203">However, it does not stop any iterations that have already begun execution.</span></span>  
  
 <span data-ttu-id="c67fc-204">Appelant le <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> méthode provoque la <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> propriété à retourner `true` pour une itération de la boucle est en cours d’exécution.</span><span class="sxs-lookup"><span data-stu-id="c67fc-204">Calling the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method causes the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property to return `true` for any iteration of the loop that is still executing.</span></span> <span data-ttu-id="c67fc-205">Cela est particulièrement utile pour les itérations de longs, ce qui peuvent vérifier le <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> propriété et à la sortie au début si sa valeur est `true`.</span><span class="sxs-lookup"><span data-stu-id="c67fc-205">This is particularly useful for long-running iterations, which can check the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property and exit early if its value is `true`.</span></span>  
  
 <span data-ttu-id="c67fc-206"><xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> est généralement employée dans les algorithmes basés sur recherche, où une fois le résultat trouvées, aucune autres itérations doivent être exécutées.</span><span class="sxs-lookup"><span data-stu-id="c67fc-206"><xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> is typically employed in search-based algorithms, where once a result is found, no other iterations need be executed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c67fc-207">L’exemple suivant exécute jusqu'à 10 000 itérations d’une boucle en parallèle.</span><span class="sxs-lookup"><span data-stu-id="c67fc-207">The following example executes up to 10,000 iterations of a loop in parallel.</span></span> <span data-ttu-id="c67fc-208">Chaque itération s’interrompt pendant un intervalle aléatoire compris entre 1 et 1 000 millisecondes.</span><span class="sxs-lookup"><span data-stu-id="c67fc-208">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="c67fc-209">Une valeur générée de manière aléatoire détermine sur quelle itération de la boucle la <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> méthode est appelée.</span><span class="sxs-lookup"><span data-stu-id="c67fc-209">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method is called.</span></span> <span data-ttu-id="c67fc-210">Comme le montre la sortie de l’exemple, aucune itération s’exécutent après l’appel à la <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="c67fc-210">As the output from the example shows, no iterations execute after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/stop1.cs#1)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/stop1.vb#1)]  
  
 <span data-ttu-id="c67fc-211">Étant donné que les itérations de la boucle sont encore susceptibles d’être l’exécution lorsque le <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> méthode est appelée, les appels de chaque itération le <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> méthode permettant de vérifier si une autre itération a appelé le <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="c67fc-211">Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method is called, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> method to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span> <span data-ttu-id="c67fc-212">Si elle retourne `true`, l’itération retourne immédiatement.</span><span class="sxs-lookup"><span data-stu-id="c67fc-212">If it returns `true`, the iteration returns immediately.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="c67fc-213">La méthode <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> a été appelée au préalable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c67fc-213">The <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> method was called previously.</span>
          </span>
          <span data-ttu-id="c67fc-214">
            <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> et <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> ne peuvent pas être utilisés en combinaison par les itérations de la même boucle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c67fc-214">
              <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> and <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> may not be used in combination by iterations of the same loop.</span>
          </span>
        </exception>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.IsStopped" />
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">
          <span data-ttu-id="c67fc-215">Parallélisme de données (bibliothèque parallèle de tâches)</span>
          <span class="sxs-lookup">
            <span data-stu-id="c67fc-215">Data Parallelism (Task Parallel Library)</span>
          </span>
        </related>
      </Docs>
    </Member>
  </Members>
</Type>