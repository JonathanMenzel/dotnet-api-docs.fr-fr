<Type Name="ParallelLoopState" FullName="System.Threading.Tasks.ParallelLoopState">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d3b07afddc935be0926bc23b1edf4117d5a410bf" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39873098" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ParallelLoopState" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ParallelLoopState extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.ParallelLoopState" />
  <TypeSignature Language="VB.NET" Value="Public Class ParallelLoopState" />
  <TypeSignature Language="C++ CLI" Value="public ref class ParallelLoopState" />
  <TypeSignature Language="F#" Value="type ParallelLoopState = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Diagnostics.DebuggerDisplay("ShouldExitCurrentIteration = {ShouldExitCurrentIteration}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Permet aux itérations de boucles parallèles d'interagir avec d'autres itérations. Une instance de cette classe est fournie par la classe <see cref="T:System.Threading.Tasks.Parallel" /> à chaque boucle ; vous ne pouvez pas créer d'instances dans votre code utilisateur.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Notez que vous ne pouvez pas instancier une instance de cette classe. Il est automatiquement généré par le compilateur en tant qu’argument dans un appel à la <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> ou <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> (méthode). Cet exemple en fournit une illustration.  
  
 Des constructions comme `for` et `foreach` (en c#) et `For` et `For Each` (en Visual Basic) s’exécuter séquentiellement à partir de l’index le plus bas au plus grand ou du premier objet dans un ensemble à la dernière. En revanche, le <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> et <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> n’est pas le cas de méthodes. Étant donné que chaque itération de la boucle s’exécuter en parallèle, ils peuvent commencer et se terminer dans n’importe quel ordre. Le <xref:System.Threading.Tasks.ParallelLoopState> classe permet à des itérations de boucles parallèles d’interagir avec eux. Le <xref:System.Threading.Tasks.ParallelLoopState> classe vous permet de :  
  
-   Quitter l’itération actuelle et empêcher des itérations supplémentaires de démarrer en appelant le <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> (méthode). Cela n’affecte pas les itérations qui ont déjà commencé l’exécution.  
  
-   Empêcher des itérations avec un index supérieur à l’index actuel de l’exécution en appelant le <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> (méthode). Cela n’affecte pas les itérations qui ont déjà commencé l’exécution.  
  
-   Déterminer si une exception s’est produite dans une itération de boucle en récupérant la valeur de la <xref:System.Threading.Tasks.ParallelLoopState.IsExceptional%2A> propriété.  
  
-   Déterminer si une itération de la boucle a appelé le <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> méthode en récupérant la valeur de la <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> propriété. Vous pouvez utiliser cette propriété pour retourner à partir d’itérations de la boucle qui a démarré avant l’appel à la <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> méthode mais sont en cours d’exécution.  
  
-   Déterminer si une itération de la boucle a appelé le <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> ou <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> méthode ou a levé une exception en récupérant la valeur de la <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> propriété.  
  
-   Sortie à partir d’une itération de longue dont l’index est supérieur à l’index d’une itération dans laquelle Break a été appelé en récupérant la valeur de la <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> propriété.  
  
   
  
## Examples  
 L’exemple suivant exécute jusqu'à 100 itérations d’une boucle en parallèle. Chaque itération s’interrompt pendant un intervalle aléatoire compris entre 1 et 1 000 millisecondes. Une valeur générée de manière aléatoire détermine sur quelle itération de la boucle la <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> méthode est appelée. Comme la sortie de l’exemple, aucune itération dont l’index est supérieur à la <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> début de valeur de propriété après l’appel à la <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> (méthode).  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 Étant donné que les itérations de la boucle sont encore susceptibles d’être l’exécution lorsque le <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> méthode est appelée, les appels de chaque itération le <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> propriété pour vérifier si une autre itération a appelé le <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> (méthode). Si la valeur de propriété est `true`, l’itération vérifie la valeur de la <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> propriété et, si elle est supérieure à la valeur d’index de l’itération actuelle, retourne immédiatement.  
  
 ]]></format>
    </remarks>
    <threadsafe>Un <see cref="T:System.Threading.Tasks.ParallelLoopState" /> instance est destinée à être utilisé uniquement dans le corps de la boucle à laquelle une instance a été fournie.  Il est déconseillé d’utiliser un fourni <see cref="T:System.Threading.Tasks.ParallelLoopState" /> instance après la boucle associée se termine, ni à remettre explicitement à d’autres threads et de laisser ces derniers y accéder à tout moment.  Une autre <see cref="T:System.Threading.Tasks.ParallelLoopState" /> instance est fournie à chaque thread impliqué dans une boucle.</threadsafe>
  </Docs>
  <Members>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public void Break ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Break() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.ParallelLoopState.Break" />
      <MemberSignature Language="VB.NET" Value="Public Sub Break ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Break();" />
      <MemberSignature Language="F#" Value="member this.Break : unit -&gt; unit" Usage="parallelLoopState.Break " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Indique que l'exécution de la boucle <see cref="T:System.Threading.Tasks.Parallel" /> doit s'arrêter après l'itération actuelle dès que le système le peut.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> Indique qu’aucune itération après l’itération actuelle ne doit être exécutée. Il annule efficacement des itérations supplémentaires de la boucle. Toutefois, il n’arrête pas d’itérations qui ont déjà commencé l’exécution. Par exemple, si <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> est appelée à partir de la 100 ème itération d’une boucle parallèle itération à partir de 0 à 1 000, toutes les itérations inférieure à 100 doivent toujours être exécuter, mais les itérations de 101 à 1000 qui n’ont pas encore démarré ne sont pas exécutées.  
  
 Pour les itérations longues qui peuvent déjà être exécutés, <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> définit le <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> propriété pour un index de l’itération actuelle si l’index actuel est inférieur à la valeur actuelle de <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>. Pour arrêter les itérations dont l’index est supérieur à l’itération la plus basse de saut à partir de l’exécution de concurrente, vous devez procédez comme suit :  
  
1.  Vérifiez si le <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> propriété est `true`.  
  
2.  Quitter à partir de l’itération si son index est supérieure à la <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> valeur de propriété.  
  
 Cet exemple en fournit une illustration.  
  
 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> est généralement employée dans les algorithmes basés sur recherche où un classement est présent dans la source de données.  
  
   
  
## Examples  
 L’exemple suivant exécute jusqu'à 100 itérations d’une boucle en parallèle. Chaque itération s’interrompt pendant un intervalle aléatoire compris entre 1 et 1 000 millisecondes. Une valeur générée de manière aléatoire détermine sur quelle itération de la boucle la <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> méthode est appelée. Comme la sortie de l’exemple, aucune itération dont l’index est supérieur à la <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> début de valeur de propriété après l’appel à la <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> (méthode).  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 Étant donné que les itérations de la boucle sont encore susceptibles d’être l’exécution lorsque le <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> méthode est appelée, les appels de chaque itération le <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> propriété pour vérifier si une autre itération a appelé le <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> (méthode). Si la valeur de propriété est `true`, l’itération vérifie la valeur de la <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> propriété et, si elle est supérieure à la valeur d’index de l’itération actuelle, retourne immédiatement.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">La méthode <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> a été appelée au préalable. <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> et <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> ne peuvent pas être utilisés en combinaison par les itérations de la même boucle.</exception>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
      </Docs>
    </Member>
    <Member MemberName="IsExceptional">
      <MemberSignature Language="C#" Value="public bool IsExceptional { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsExceptional" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.IsExceptional" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsExceptional As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsExceptional { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsExceptional : bool" Usage="System.Threading.Tasks.ParallelLoopState.IsExceptional" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indique si une itération de la boucle a levé une exception qui n'a pas été gérée par cette itération.</summary>
        <value>
          <see langword="true" /> si une exception non gérée a été levée ; sinon, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStopped">
      <MemberSignature Language="C#" Value="public bool IsStopped { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStopped" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.IsStopped" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStopped As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStopped { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStopped : bool" Usage="System.Threading.Tasks.ParallelLoopState.IsStopped" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indique si une itération de la boucle a appelé la méthode <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" />.</summary>
        <value>
          <see langword="true" /> si une itération a arrêté la boucle en appelant la méthode <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour les itérations de longs de la boucle, vous pouvez récupérer la valeur de la <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> propriété afin de déterminer si les itérations de la boucle qui a commencé l’exécution avant l’appel à la <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> méthode sont en cours d’exécution. Vous pouvez ensuite utiliser la valeur de la <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> propriété afin de déterminer s’ils doivent retourner immédiatement ou s’exécuter normalement.  
  
   
  
## Examples  
 L’exemple suivant exécute jusqu'à 10 000 itérations d’une boucle en parallèle. Chaque itération s’interrompt pendant un intervalle aléatoire compris entre 1 et 1 000 millisecondes. Une valeur générée de manière aléatoire détermine sur quelle itération de la boucle la <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> méthode est appelée. Étant donné que les itérations de la boucle sont encore susceptibles d’être l’exécution lorsque le <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> méthode est appelée, l’expression lambda appelle la <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> méthode permettant de vérifier si une autre itération a appelé le <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> (méthode). Si elle retourne `true`, l’itération retourne immédiatement.  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/stop1.cs#1)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/stop1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LowestBreakIteration">
      <MemberSignature Language="C#" Value="public Nullable&lt;long&gt; LowestBreakIteration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;int64&gt; LowestBreakIteration" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LowestBreakIteration As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;long&gt; LowestBreakIteration { Nullable&lt;long&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.LowestBreakIteration : Nullable&lt;int64&gt;" Usage="System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient l'itération la plus basse de la boucle d'où <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> a été appelé.</summary>
        <value>Itération la plus basse d'où <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> a été appelé. Dans le cas d'une boucle <see cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})" />, la valeur est basée sur un index généré en interne.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il est possible que plusieurs itérations d’une boucle parallèle pour appeler le <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> (méthode). S’ils le font, cette valeur est le plus petit index d’une itération appelée <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>. Si aucune itération de la boucle n’appelé <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, cette propriété retourne `null`. Notez que la valeur de propriété n’est pas affectée par les appels à la <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> (méthode).  
  
 Dans les itérations de longs dans laquelle toutes les itérations après l’itération qui appelle le <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> méthode doive s’exécute pas, le <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> propriété est utilisée pour terminer les itérations qui a commencé l’exécution avant l’appel à la <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> (méthode). Pour arrêter les itérations dont l’index est supérieur à l’itération la plus basse de saut à partir de l’exécution de concurrente, vous devez procédez comme suit :  
  
1.  Vérifiez si le <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> propriété est `true`.  
  
2.  Quitter à partir de l’itération si son index est supérieure à la <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> valeur de propriété.  
  
 Cet exemple en fournit une illustration.  
  
   
  
## Examples  
 L’exemple suivant exécute jusqu'à 100 itérations d’une boucle en parallèle. Chaque itération s’interrompt pendant un intervalle aléatoire compris entre 1 et 1 000 millisecondes. Une valeur générée de manière aléatoire détermine sur quelle itération de la boucle la <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> méthode est appelée. Cela empêche les itérations dont l’index est supérieur à la <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> valeur de propriété de démarrer après l’appel à la <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> (méthode), mais elle n’affecte pas d’itérations qui ont déjà commencé l’exécution. Pour éviter ces de se terminer, chaque itération appelle le <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> méthode permettant de vérifier si une autre itération a appelé le <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> (méthode). Si, par conséquent, l’itération vérifie la valeur de la <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> propriété et, si elle est supérieure à la valeur d’index de l’itération actuelle, retourne immédiatement.  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 Notez que, étant donné que le <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> valeur est hors de portée en dehors de la boucle parallèle, vous devez l’attribuer à une variable qui est visible en dehors de la boucle si vous souhaitez conserver sa valeur.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Break" />
      </Docs>
    </Member>
    <Member MemberName="ShouldExitCurrentIteration">
      <MemberSignature Language="C#" Value="public bool ShouldExitCurrentIteration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShouldExitCurrentIteration" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ShouldExitCurrentIteration As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShouldExitCurrentIteration { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ShouldExitCurrentIteration : bool" Usage="System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indique si l'itération actuelle de la boucle doit s'arrêter en fonction des requêtes effectuées par cette itération ou d'autres.</summary>
        <value>
          <see langword="true" /> si l'itération actuelle doit s'arrêter ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> propriété est définie sur `true` si l’une des conditions suivantes :  
  
-   Une itération de la boucle appelle <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> ou <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>.  
  
-   Une itération de la boucle lève une exception.  
  
-   La boucle est annulée.  
  
 Lorsque cette propriété a `true`, la <xref:System.Threading.Tasks.Parallel> classe essaiera d’interdire le démarrage de l’exécution des itérations supplémentaires de la boucle. Toutefois, il peut arriver lorsqu’elle est incapable d’empêcher le démarrage d’autres itérations.  
  
 Il peut également arriver qu’une itération de longs a déjà commencé l’exécution. Dans ce cas, les itérations peuvent vérifier explicitement la <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> propriété et arrêter l’exécution si la propriété renvoie `true`.  
  
   
  
## Examples  
 L’exemple suivant exécute jusqu'à 100 itérations d’une boucle en parallèle. Chaque itération s’interrompt pendant un intervalle aléatoire compris entre 1 et 1 000 millisecondes. Une valeur générée de manière aléatoire détermine sur quelle itération de la boucle la <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> méthode est appelée. Cela empêche les itérations dont l’index est supérieur à la <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> valeur de propriété de démarrer après l’appel à la <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> (méthode), mais elle n’affecte pas d’itérations qui ont déjà commencé l’exécution. Pour éviter ces de se terminer, chaque itération appelle le <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> méthode permettant de vérifier si une autre itération a appelé le <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> (méthode). Si, par conséquent, l’itération vérifie la valeur de la <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> propriété et, si elle est supérieure à la valeur d’index de l’itération actuelle, retourne immédiatement.  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Break" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Stop" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.ParallelLoopState.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="parallelLoopState.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Indique que l'exécution de la boucle <see cref="T:System.Threading.Tasks.Parallel" /> doit s'arrêter dès que le système le peut.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Appel de la <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> méthode indique que toutes les itérations de la boucle qui n’ont pas encore démarré ne doivent pas être exécutées. Il annule efficacement des itérations supplémentaires de la boucle. Toutefois, il n’arrête pas d’itérations qui ont déjà commencé l’exécution.  
  
 Appelant le <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> méthode provoque la <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> propriété à retourner `true` pour une itération de la boucle est en cours d’exécution. Cela est particulièrement utile pour les itérations de longs, ce qui peuvent vérifier le <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> propriété et à la sortie au début si sa valeur est `true`.  
  
 <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> est généralement employée dans les algorithmes basés sur recherche, où une fois le résultat trouvées, aucune autres itérations doivent être exécutées.  
  
   
  
## Examples  
 L’exemple suivant exécute jusqu'à 10 000 itérations d’une boucle en parallèle. Chaque itération s’interrompt pendant un intervalle aléatoire compris entre 1 et 1 000 millisecondes. Une valeur générée de manière aléatoire détermine sur quelle itération de la boucle la <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> méthode est appelée. Comme le montre la sortie de l’exemple, aucune itération s’exécutent après l’appel à la <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> (méthode).  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/stop1.cs#1)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/stop1.vb#1)]  
  
 Étant donné que les itérations de la boucle sont encore susceptibles d’être l’exécution lorsque le <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> méthode est appelée, les appels de chaque itération le <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> méthode permettant de vérifier si une autre itération a appelé le <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> (méthode). Si elle retourne `true`, l’itération retourne immédiatement.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">La méthode <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> a été appelée au préalable. <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> et <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> ne peuvent pas être utilisés en combinaison par les itérations de la même boucle.</exception>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.IsStopped" />
      </Docs>
    </Member>
  </Members>
</Type>