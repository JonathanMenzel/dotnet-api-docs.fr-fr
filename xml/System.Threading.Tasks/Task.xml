<Type Name="Task" FullName="System.Threading.Tasks.Task">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d920b17ab80db20fab0e3101b745858eade81dd1" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Task : IAsyncResult, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Task extends System.Object implements class System.IAsyncResult, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.Task" />
  <TypeSignature Language="VB.NET" Value="Public Class Task&#xA;Implements IAsyncResult, IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Task : IAsyncResult, IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IAsyncResult</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("Id = {Id}, Status = {Status}, Method = {DebuggerDisplayMethodDescription}")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Threading.Tasks.SystemThreadingTasks_TaskDebugView))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="371e8-101">Représente une opération asynchrone.</span>
      <span class="sxs-lookup">
        <span data-stu-id="371e8-101">Represents an asynchronous operation.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
   
## Remarks  
 <span data-ttu-id="371e8-102">La <xref:System.Threading.Tasks.Task> classe représente une opération unique qui ne retourne pas une valeur et qui généralement exécute de façon asynchrone.</span><span class="sxs-lookup"><span data-stu-id="371e8-102">The <xref:System.Threading.Tasks.Task> class represents a single operation that does not return a value and that usually executes asynchronously.</span></span> <span data-ttu-id="371e8-103"><xref:System.Threading.Tasks.Task> les objets sont un des composants central de la [modèle asynchrone basé sur des tâches](~/docs/standard/asynchronous-programming-patterns/task-based-asynchronous-pattern-tap.md) introduite dans .NET Framework 4.</span><span class="sxs-lookup"><span data-stu-id="371e8-103"><xref:System.Threading.Tasks.Task> objects are one of the central components of the  [task-based asynchronous pattern](~/docs/standard/asynchronous-programming-patterns/task-based-asynchronous-pattern-tap.md) first introduced in the .NET Framework 4.</span></span> <span data-ttu-id="371e8-104">Étant donné que le travail effectué par un <xref:System.Threading.Tasks.Task> objet généralement exécute de façon asynchrone sur un thread de pool de threads plutôt que de façon synchrone sur le thread d’application principal, vous pouvez utiliser la <xref:System.Threading.Tasks.Task.Status%2A> propriété, ainsi que le <xref:System.Threading.Tasks.Task.IsCanceled%2A>, <xref:System.Threading.Tasks.Task.IsCompleted%2A>, et <xref:System.Threading.Tasks.Task.IsFaulted%2A> propriétés, pour déterminer l’état d’une tâche.</span><span class="sxs-lookup"><span data-stu-id="371e8-104">Because the work performed by a <xref:System.Threading.Tasks.Task> object typically executes asynchronously on a thread pool thread rather than synchronously on the main application thread, you can use the <xref:System.Threading.Tasks.Task.Status%2A> property, as well as the <xref:System.Threading.Tasks.Task.IsCanceled%2A>, <xref:System.Threading.Tasks.Task.IsCompleted%2A>, and <xref:System.Threading.Tasks.Task.IsFaulted%2A> properties, to determine the   state of a task.</span></span> <span data-ttu-id="371e8-105">En règle générale, une expression lambda est utilisée pour spécifier le travail à effectuer la tâche.</span><span class="sxs-lookup"><span data-stu-id="371e8-105">Most commonly, a lambda expression is used to specify the work that the task is to perform.</span></span>  
  
 <span data-ttu-id="371e8-106">Pour les opérations qui retournent des valeurs, vous utilisez la <xref:System.Threading.Tasks.Task%601> classe.</span><span class="sxs-lookup"><span data-stu-id="371e8-106">For operations that return values, you use the <xref:System.Threading.Tasks.Task%601> class.</span></span>  
  
 <span data-ttu-id="371e8-107">Dans cette section :</span><span class="sxs-lookup"><span data-stu-id="371e8-107">In this section:</span></span>  
  
 <span data-ttu-id="371e8-108">[Exemples d’instanciation de tâche](#Instant) </span><span class="sxs-lookup"><span data-stu-id="371e8-108">[Task instantiation examples](#Instant) </span></span>  
 <span data-ttu-id="371e8-109">[Création et exécution d’une tâche](#Creating) </span><span class="sxs-lookup"><span data-stu-id="371e8-109">[Creating and executing a task](#Creating) </span></span>  
 <span data-ttu-id="371e8-110">[Séparation de la création de tâches et de l’exécution](#Separating) </span><span class="sxs-lookup"><span data-stu-id="371e8-110">[Separating task creation and execution](#Separating) </span></span>  
 <span data-ttu-id="371e8-111">[En attente d’une ou plusieurs tâches](#WaitingForOne) </span><span class="sxs-lookup"><span data-stu-id="371e8-111">[Waiting for one or more tasks to complete](#WaitingForOne) </span></span>  
 <span data-ttu-id="371e8-112">[Tâches et à la culture](#Culture) </span><span class="sxs-lookup"><span data-stu-id="371e8-112">[Tasks and culture](#Culture) </span></span>  
 [<span data-ttu-id="371e8-113">Pour les développeurs de débogueur</span><span class="sxs-lookup"><span data-stu-id="371e8-113">For debugger developers</span></span>](#Debugger)  

 <a name="Instant"></a>     
## <a name="task-instantiation"></a><span data-ttu-id="371e8-114">Instanciation de la tâche</span><span class="sxs-lookup"><span data-stu-id="371e8-114">Task instantiation</span></span>  
 <span data-ttu-id="371e8-115">L’exemple suivant crée et exécute des quatre tâches.</span><span class="sxs-lookup"><span data-stu-id="371e8-115">The following example creates and executes four tasks.</span></span> <span data-ttu-id="371e8-116">Trois tâches exécutent un <xref:System.Action%601> délégué nommé `action`, qui accepte un argument de type <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="371e8-116">Three tasks execute an <xref:System.Action%601> delegate named `action`, which accepts an argument of type <xref:System.Object>.</span></span> <span data-ttu-id="371e8-117">Une quatrième tâche exécute une expression lambda (un <xref:System.Action> délégué) qui est définie en ligne dans l’appel à la méthode de création de tâche.</span><span class="sxs-lookup"><span data-stu-id="371e8-117">A fourth task executes a lambda expression (an <xref:System.Action> delegate) that is defined inline in the call to the task creation method.</span></span> <span data-ttu-id="371e8-118">Chaque tâche est instanciée et exécutée dans une autre façon :</span><span class="sxs-lookup"><span data-stu-id="371e8-118">Each task is instantiated and run in a different way:</span></span>  
  
-   <span data-ttu-id="371e8-119">Tâche `t1` est instancié en appelant un constructeur de classe de tâche, mais est lancée en appelant son <xref:System.Threading.Tasks.Task.Start> méthode uniquement après la tâche `t2` a démarré.</span><span class="sxs-lookup"><span data-stu-id="371e8-119">Task `t1` is instantiated by calling a Task class constructor, but is started by calling its <xref:System.Threading.Tasks.Task.Start> method only after task `t2` has started.</span></span>  
  
-   <span data-ttu-id="371e8-120">Tâche `t2` est instanciée et démarrée dans un seul appel de méthode en appelant le <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%29?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="371e8-120">Task `t2` is instantiated and started in a single method call by calling the <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%29?displayProperty=nameWithType> method.</span></span>  
  
-   <span data-ttu-id="371e8-121">Tâche `t3` est instanciée et démarrée dans un seul appel de méthode en appelant le <xref:System.Threading.Tasks.Task.Run%28System.Action%29> (méthode).</span><span class="sxs-lookup"><span data-stu-id="371e8-121">Task `t3` is instantiated and started in a single method call by calling the <xref:System.Threading.Tasks.Task.Run%28System.Action%29> method.</span></span>  
  
-   <span data-ttu-id="371e8-122">Tâche `t4` est exécutée de façon synchrone sur le thread principal en appelant le <xref:System.Threading.Tasks.Task.RunSynchronously> (méthode).</span><span class="sxs-lookup"><span data-stu-id="371e8-122">Task `t4` is executed synchronously on the main thread by calling the <xref:System.Threading.Tasks.Task.RunSynchronously> method.</span></span>  
  
 <span data-ttu-id="371e8-123">Étant donné que tâche `t4` exécute de façon synchrone, il s’exécute sur le thread d’application principal.</span><span class="sxs-lookup"><span data-stu-id="371e8-123">Because task `t4` executes synchronously, it executes on the main application thread.</span></span> <span data-ttu-id="371e8-124">Les tâches restantes exécutent de façon asynchrone en général sur un ou plusieurs threads de pool.</span><span class="sxs-lookup"><span data-stu-id="371e8-124">The remaining tasks execute asynchronously typically on one or more thread pool threads.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/startnew.cs#01)]
 [!code-vb[System.Threading.Tasks.Task#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/startnew.vb#01)] 
    
<a name="Creating"></a>   
## <a name="creating-and-executing-a-task"></a><span data-ttu-id="371e8-125">Création et exécution d’une tâche</span><span class="sxs-lookup"><span data-stu-id="371e8-125">Creating and executing a task</span></span>  
 <span data-ttu-id="371e8-126"><xref:System.Threading.Tasks.Task> instances peuvent être créées de plusieurs façons.</span><span class="sxs-lookup"><span data-stu-id="371e8-126"><xref:System.Threading.Tasks.Task> instances may be created in a variety of ways.</span></span> <span data-ttu-id="371e8-127">L’approche la plus courante, qui est disponible à partir de la [!INCLUDE[net_v45](~/includes/net-v45-md.md)], consiste à appeler la méthode statique <xref:System.Threading.Tasks.Task.Run%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="371e8-127">The most common approach, which is available starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], is to call the static <xref:System.Threading.Tasks.Task.Run%2A> method.</span></span> <span data-ttu-id="371e8-128">Le <xref:System.Threading.Tasks.Task.Run%2A> méthode offre un moyen simple pour démarrer une tâche à l’aide des valeurs par défaut et sans nécessiter des paramètres supplémentaires.</span><span class="sxs-lookup"><span data-stu-id="371e8-128">The <xref:System.Threading.Tasks.Task.Run%2A> method provides a simple way to start a task using default values and without requiring additional parameters.</span></span> <span data-ttu-id="371e8-129">L’exemple suivant utilise la <xref:System.Threading.Tasks.Task.Run%28System.Action%29> méthode pour lancer une tâche qui effectue une boucle, puis affiche le nombre d’itérations de boucle :</span><span class="sxs-lookup"><span data-stu-id="371e8-129">The following example uses the <xref:System.Threading.Tasks.Task.Run%28System.Action%29> method to start a task that loops and then displays the number of loop iterations:</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/run1.cs#6)]
 [!code-vb[System.Threading.Tasks.Task#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/run1.vb#6)]  
  
 <span data-ttu-id="371e8-130">Une alternative et la méthode la plus courante pour démarrer une tâche dans [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], est la méthode statique <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="371e8-130">An alternative, and the most common method to start a task in [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], is the static <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="371e8-131">Le <xref:System.Threading.Tasks.Task.Factory%2A?displayProperty=nameWithType> propriété retourne un <xref:System.Threading.Tasks.TaskFactory> objet.</span><span class="sxs-lookup"><span data-stu-id="371e8-131">The <xref:System.Threading.Tasks.Task.Factory%2A?displayProperty=nameWithType> property returns a <xref:System.Threading.Tasks.TaskFactory> object.</span></span> <span data-ttu-id="371e8-132">Les surcharges de la <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> méthode vous permettre de spécifier les paramètres à passer à un planificateur de tâches et les options de création de la tâche.</span><span class="sxs-lookup"><span data-stu-id="371e8-132">Overloads of the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> method let you specify parameters to pass to the task creation options and a task scheduler.</span></span> <span data-ttu-id="371e8-133">L’exemple suivant utilise la <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> méthode pour lancer une tâche.</span><span class="sxs-lookup"><span data-stu-id="371e8-133">The following example uses the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> method to start a task.</span></span> <span data-ttu-id="371e8-134">Il est fonctionnellement équivalent au code dans l’exemple précédent.</span><span class="sxs-lookup"><span data-stu-id="371e8-134">It is functionally equivalent to the code in the previous example.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/startnew1.cs#7)]
 [!code-vb[System.Threading.Tasks.Task#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/startnew1.vb#7)]  
  
 <span data-ttu-id="371e8-135">Pour obtenir des exemples plus complètes, consultez [basé sur des tâches de programmation asynchrone](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md).</span><span class="sxs-lookup"><span data-stu-id="371e8-135">For more complete examples, see [Task-based Asynchronous Programming](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md).</span></span>  
  
<a name="Separating"></a>   
## <a name="separating-task-creation-and-execution"></a><span data-ttu-id="371e8-136">Séparation de la création de tâches et de l’exécution</span><span class="sxs-lookup"><span data-stu-id="371e8-136">Separating task creation and execution</span></span>  
 <span data-ttu-id="371e8-137">La <xref:System.Threading.Tasks.Task> classe fournit également des constructeurs qui initialisent la tâche mais qui ne la planifient pas pour l’exécution.</span><span class="sxs-lookup"><span data-stu-id="371e8-137">The <xref:System.Threading.Tasks.Task> class also provides constructors that initialize the task but that do not schedule it for execution.</span></span> <span data-ttu-id="371e8-138">Pour des raisons de performances, le <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> ou <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> (méthode) est le mécanisme recommandé pour la création et la planification des tâches de calculs, mais pour les scénarios où la création et la planification doivent être séparés, vous pouvez utiliser les constructeurs et appeler le <xref:System.Threading.Tasks.Task.Start%2A?displayProperty=nameWithType> (méthode) pour planifier la tâche pour l’exécution à une date ultérieure.</span><span class="sxs-lookup"><span data-stu-id="371e8-138">For performance reasons, the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> or <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> method is the preferred mechanism for creating and scheduling computational tasks, but for scenarios where creation and scheduling must be separated, you can use the constructors and then call the <xref:System.Threading.Tasks.Task.Start%2A?displayProperty=nameWithType> method to schedule the task for execution at a later time.</span></span>  
  
<a name="WaitingForOne"></a>   
## <a name="waiting-for-one-or-more-tasks-to-complete"></a><span data-ttu-id="371e8-139">En attente d’une ou plusieurs tâches</span><span class="sxs-lookup"><span data-stu-id="371e8-139">Waiting for one or more tasks to complete</span></span>  
 <span data-ttu-id="371e8-140">Étant donné que les tâches généralement exécutent de façon asynchrone sur un thread de pool de threads, le thread qui crée et démarre la tâche continue l’exécution, dès que la tâche a été instanciée.</span><span class="sxs-lookup"><span data-stu-id="371e8-140">Because tasks typically run asynchronously on a thread pool thread, the thread that creates and starts the task continues execution as soon as the task has been instantiated.</span></span> <span data-ttu-id="371e8-141">Dans certains cas, lorsque le thread appelant est le thread d’application principal, l’application peut se terminer avant la tâche réellement commence l’exécution.</span><span class="sxs-lookup"><span data-stu-id="371e8-141">In some cases, when the calling thread is the main application thread, the app may terminate before any the task actually begins execution.</span></span> <span data-ttu-id="371e8-142">Dans d’autres, la logique de votre application peut nécessiter que le thread appelant poursuivre l’exécution uniquement lorsqu’une ou plusieurs tâches a terminé son exécution.</span><span class="sxs-lookup"><span data-stu-id="371e8-142">In others,   your application's logic may require that the calling thread continue execution only when one or more tasks has completed execution.</span></span> <span data-ttu-id="371e8-143">Vous pouvez synchroniser l’exécution du thread appelant et asynchrone des tâches qu’il lance en appelant un `Wait` méthode pour attendre une ou plusieurs tâches à effectuer.</span><span class="sxs-lookup"><span data-stu-id="371e8-143">You can synchronize the execution of the calling thread and the asynchronous tasks it launches by calling a `Wait` method to wait for one or more tasks to complete.</span></span>  
  
 <span data-ttu-id="371e8-144">Pour attendre qu’une seule tâche se termine, vous pouvez appeler son <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="371e8-144">To wait for a single task to complete, you can call its <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="371e8-145">Un appel à la <xref:System.Threading.Tasks.Task.Wait%2A> méthode bloque le thread appelant jusqu'à ce que l’instance de classe unique a terminé son exécution.</span><span class="sxs-lookup"><span data-stu-id="371e8-145">A call to the  <xref:System.Threading.Tasks.Task.Wait%2A> method blocks the calling thread until the single class instance has completed execution.</span></span>  
  
 <span data-ttu-id="371e8-146">L’exemple suivant appelle sans paramètre <xref:System.Threading.Tasks.Task.Wait> méthode doit attendre de manière inconditionnelle jusqu'à ce qu’une tâche se termine.</span><span class="sxs-lookup"><span data-stu-id="371e8-146">The following example calls the parameterless <xref:System.Threading.Tasks.Task.Wait> method to wait unconditionally until a task completes.</span></span> <span data-ttu-id="371e8-147">La tâche simule le travail en appelant le <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> méthode en veille pendant deux secondes.</span><span class="sxs-lookup"><span data-stu-id="371e8-147">The task simulates work by calling the <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> method to sleep for two seconds.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/Wait1.cs#8)]
 [!code-vb[System.Threading.Tasks.Task#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/Wait1.vb#8)]  
  
 <span data-ttu-id="371e8-148">Vous pouvez également de manière conditionnelle attendre une tâche se termine.</span><span class="sxs-lookup"><span data-stu-id="371e8-148">You can also conditionally wait for a task to complete.</span></span> <span data-ttu-id="371e8-149">Le <xref:System.Threading.Tasks.Task.Wait%28System.Int32%29> et <xref:System.Threading.Tasks.Task.Wait%28System.TimeSpan%29> méthodes bloquent le thread appelant jusqu'à ce que la tâche se termine ou un intervalle de délai d’attente est écoulé, selon ce qui se produit en premier.</span><span class="sxs-lookup"><span data-stu-id="371e8-149">The  <xref:System.Threading.Tasks.Task.Wait%28System.Int32%29> and <xref:System.Threading.Tasks.Task.Wait%28System.TimeSpan%29> methods block the calling thread until the task finishes or a timeout interval elapses, whichever comes first.</span></span> <span data-ttu-id="371e8-150">Étant donné que l’exemple suivant démarre une tâche qui se met en veille pendant deux secondes, mais définit une valeur de délai d’attente d’une seconde, le thread appelant se bloque jusqu'à ce que le délai d’attente expire et avant la tâche de fin de l’exécution.</span><span class="sxs-lookup"><span data-stu-id="371e8-150">Since the following example launches a task that sleeps for two seconds but defines a one-second timeout value, the calling thread blocks until the timeout expires and before the task has completed execution.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/Wait2.cs#9)]
 [!code-vb[System.Threading.Tasks.Task#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/Wait2.vb#9)]  
  
 <span data-ttu-id="371e8-151">Vous pouvez également fournir un jeton d’annulation en appelant le <xref:System.Threading.Tasks.Task.Wait%28System.Threading.CancellationToken%29> et <xref:System.Threading.Tasks.Task.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29> méthodes.</span><span class="sxs-lookup"><span data-stu-id="371e8-151">You can also supply a cancellation token by calling the <xref:System.Threading.Tasks.Task.Wait%28System.Threading.CancellationToken%29> and  <xref:System.Threading.Tasks.Task.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29> methods.</span></span> <span data-ttu-id="371e8-152">Si du jeton <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> propriété est `true`, l’attente est annulée ; si elle prend la valeur true lors de la <xref:System.Threading.Tasks.Task.Wait%2A> méthode se termine.</span><span class="sxs-lookup"><span data-stu-id="371e8-152">If the  token's <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> property is `true`, the wait is cancelled; if it becomes true while the <xref:System.Threading.Tasks.Task.Wait%2A> method terminates.</span></span>  
  
 <span data-ttu-id="371e8-153">Dans certains cas, vous souhaiterez attendre pour la première d’une série de l’exécution de tâches à effectuer, mais ne soins de tâches qu’il est.</span><span class="sxs-lookup"><span data-stu-id="371e8-153">In some cases, you may want to wait for the first of a series of executing tasks to complete, but don't care which task it is.</span></span>  <span data-ttu-id="371e8-154">Pour cela, vous pouvez appeler une des surcharges de la <xref:System.Threading.Tasks.Task.WaitAll%2A?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="371e8-154">For this purpose, you can call one of the overloads of the <xref:System.Threading.Tasks.Task.WaitAll%2A?displayProperty=nameWithType> method.</span></span>  <span data-ttu-id="371e8-155">L’exemple suivant crée trois tâches, chacune d’elles se met en veille pour un intervalle déterminent par un générateur de nombres aléatoires.</span><span class="sxs-lookup"><span data-stu-id="371e8-155">The following example creates three tasks, each of which sleeps for an interval determine by a random number generator.</span></span> <span data-ttu-id="371e8-156">Le <xref:System.Threading.Tasks.Task.WaitAny%28System.Threading.Tasks.Task%5B%5D%29> méthode attend que la première tâche se termine.</span><span class="sxs-lookup"><span data-stu-id="371e8-156">The <xref:System.Threading.Tasks.Task.WaitAny%28System.Threading.Tasks.Task%5B%5D%29> method waits for the first task to complete.</span></span> <span data-ttu-id="371e8-157">L’exemple affiche ensuite des informations sur l’état de tous les trois tâches.</span><span class="sxs-lookup"><span data-stu-id="371e8-157">The example then displays information about the status of all three tasks.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/WhenAny1.cs#10)]
 [!code-vb[System.Threading.Tasks.Task#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/WaitAny1.vb#10)]  
  
 <span data-ttu-id="371e8-158">Vous pouvez également attendre que tous d’une série de tâches à effectuer en appelant le <xref:System.Threading.Tasks.Task.WaitAll%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="371e8-158">You can also wait for all of a series of tasks to complete by calling the <xref:System.Threading.Tasks.Task.WaitAll%2A> method.</span></span> <span data-ttu-id="371e8-159">L’exemple suivant crée dix tâches, attend que toutes les dix se termine, puis affiche leur état.</span><span class="sxs-lookup"><span data-stu-id="371e8-159">The following example creates ten tasks, waits for all ten to complete, and then displays their status.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/WaitAll1.cs#11)]
 [!code-vb[System.Threading.Tasks.Task#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/WaitAll1.vb#11)]  
  
 <span data-ttu-id="371e8-160">Notez que lorsque vous attendez une ou plusieurs tâches à effectuer, toutes les exceptions levées dans les tâches en cours d’exécution sont propagées sur le thread qui appelle la `Wait` méthode, comme le montre l’exemple suivant.</span><span class="sxs-lookup"><span data-stu-id="371e8-160">Note that when you wait for one or more tasks to complete, any exceptions thrown in the running tasks are propagated on the thread that calls the `Wait` method, as the following example shows.</span></span> <span data-ttu-id="371e8-161">Il lance des 12 tâches, dont trois se terminer normalement et trois des qui lève une exception.</span><span class="sxs-lookup"><span data-stu-id="371e8-161">It launches 12 tasks, three of which complete normally and three of which throw an exception.</span></span> <span data-ttu-id="371e8-162">Le reste des six tâches, trois sont annulés avant le début de trois sont annulées lors de leur exécution.</span><span class="sxs-lookup"><span data-stu-id="371e8-162">Of the remaining six tasks, three are cancelled before the start, and three are cancelled while they executing.</span></span> <span data-ttu-id="371e8-163">Les exceptions sont levées le <xref:System.Threading.Tasks.Task.WaitAll%2A> appel de méthode et sont gérées par un `try` / `catch` bloc.</span><span class="sxs-lookup"><span data-stu-id="371e8-163">Exceptions are thrown in the <xref:System.Threading.Tasks.Task.WaitAll%2A> method call and are handled by a `try`/`catch` block.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/WaitAll2.cs#12)]
 [!code-vb[System.Threading.Tasks.Task#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/WaitAll2.vb#12)]  
  
 <span data-ttu-id="371e8-164">Pour plus d’informations sur la gestion des exceptions dans les opérations asynchrones basées sur des tâches, consultez [la gestion des exceptions](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span><span class="sxs-lookup"><span data-stu-id="371e8-164">For more information on exception handling in task-based asynchronous operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
<a name="Culture"></a>   
## <a name="tasks-and-culture"></a><span data-ttu-id="371e8-165">Tâches et à la culture</span><span class="sxs-lookup"><span data-stu-id="371e8-165">Tasks and culture</span></span>  
 <span data-ttu-id="371e8-166">Depuis les applications de bureau qui ciblent le [!INCLUDE[net_v46](~/includes/net-v46-md.md)], la culture du thread qui crée et appelle une tâche devient partie intégrante le contexte du thread.</span><span class="sxs-lookup"><span data-stu-id="371e8-166">Starting with desktop apps that target the [!INCLUDE[net_v46](~/includes/net-v46-md.md)], the culture of the thread that creates and invokes a task becomes part of the thread's context.</span></span> <span data-ttu-id="371e8-167">Autrement dit, indépendamment de la culture actuelle du thread sur lequel la tâche s’exécute, la culture en cours de la tâche est la culture du thread appelant.</span><span class="sxs-lookup"><span data-stu-id="371e8-167">That is, regardless of the current culture of the thread on which the task executes, the current culture of the task is the culture of the calling thread.</span></span> <span data-ttu-id="371e8-168">Pour les applications qui ciblent des versions du .NET Framework antérieures à la [!INCLUDE[net_v46](~/includes/net-v46-md.md)], la culture de la tâche est la culture du thread sur lequel la tâche s’exécute.</span><span class="sxs-lookup"><span data-stu-id="371e8-168">For apps that target versions of the .NET Framework prior to the [!INCLUDE[net_v46](~/includes/net-v46-md.md)], the culture of the task is the culture of the thread on which the task executes.</span></span> <span data-ttu-id="371e8-169">Pour plus d’informations, consultez la section « Culture et opérations asynchrones basées sur une tâche » dans la <xref:System.Globalization.CultureInfo> rubrique.</span><span class="sxs-lookup"><span data-stu-id="371e8-169">For more information, see the "Culture and task-based asynchronous operations" section in the <xref:System.Globalization.CultureInfo> topic.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="371e8-170">Suivez les applications du Windows Store Windows Runtime dans le paramètre et l’obtention de la culture par défaut.</span><span class="sxs-lookup"><span data-stu-id="371e8-170">Store apps follow the Windows Runtime in setting and getting the default culture.</span></span>  
  
<a name="Debugger"></a>   
## <a name="for-debugger-developers"></a><span data-ttu-id="371e8-171">Pour les développeurs de débogueur</span><span class="sxs-lookup"><span data-stu-id="371e8-171">For debugger developers</span></span>  
 <span data-ttu-id="371e8-172">Pour les développeurs implémentent des débogueurs personnalisés, plusieurs membres internes et privés de tâche peuvent être utiles de (ils peuvent changer d’une version à l’autre).</span><span class="sxs-lookup"><span data-stu-id="371e8-172">For developers implementing custom debuggers, several internal and private members of task may be useful (these may change from release to release).</span></span> <span data-ttu-id="371e8-173">Le `m_taskId` champ sert de magasin de stockage pour le <xref:System.Threading.Tasks.Task.Id%2A> propriété, toutefois l’accès à ce champ directement à partir d’un débogueur peut être plus efficace que l’accès à la même valeur via la méthode d’accesseur Get de la propriété (la `s_taskIdCounter` compteur est permet de récupérer le prochain ID disponible pour une tâche).</span><span class="sxs-lookup"><span data-stu-id="371e8-173">The `m_taskId` field serves as the backing store for the <xref:System.Threading.Tasks.Task.Id%2A> property, however accessing this field directly from a debugger may be more efficient than accessing the same value through the property's getter method (the `s_taskIdCounter` counter is used to retrieve the next available ID for a task).</span></span> <span data-ttu-id="371e8-174">De même, la `m_stateFlags` champ stocke des informations sur l’étape du cycle de vie actuelle de la tâche, informations également accessibles via la <xref:System.Threading.Tasks.Task.Status%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="371e8-174">Similarly, the `m_stateFlags` field stores information about the current lifecycle stage of the task, information also accessible through the <xref:System.Threading.Tasks.Task.Status%2A> property.</span></span> <span data-ttu-id="371e8-175">Le `m_action` champ stocke une référence au délégué de la tâche et le `m_stateObject` champ stocke l’état asynchrone passé à la tâche par le développeur.</span><span class="sxs-lookup"><span data-stu-id="371e8-175">The `m_action` field stores a reference to the task's delegate, and the `m_stateObject` field stores the async state passed to the task by the developer.</span></span> <span data-ttu-id="371e8-176">Enfin, pour les débogueurs qui analysent des frames de pile, le `InternalWait` méthode sert un marqueur potentiel pour une tâche entre quand une opération d’attente.</span><span class="sxs-lookup"><span data-stu-id="371e8-176">Finally, for debuggers that parse stack frames, the `InternalWait` method serves a potential marker for when a task is entering a wait operation.</span></span>   
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="371e8-177">Tous les membres de <see cref="T:System.Threading.Tasks.Task" />, à l’exception de <see cref="M:System.Threading.Tasks.Task.Dispose" />, sont thread-safe et peuvent être utilisés à partir de plusieurs threads simultanément.</span>
      <span class="sxs-lookup">
        <span data-stu-id="371e8-177">All members of <see cref="T:System.Threading.Tasks.Task" />, except for <see cref="M:System.Threading.Tasks.Task.Dispose" />, are thread-safe and may be used from multiple threads concurrently.</span>
      </span>
    </threadsafe>
    <altmember cref="T:System.Threading.Tasks.Task`1" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="371e8-178">Initialise un nouveau <see cref="T:System.Threading.Tasks.Task" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-178">Initializes a new <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Task (Action action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Action action) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.#ctor(System.Action)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Task(Action ^ action);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="action">
          <span data-ttu-id="371e8-179">Délégué qui représente le code à exécuter dans la tâche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-179">The delegate that represents the code to execute in the task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="371e8-180">Initialise un nouveau <see cref="T:System.Threading.Tasks.Task" /> avec l'action spécifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-180">Initializes a new <see cref="T:System.Threading.Tasks.Task" /> with the specified action.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="371e8-181">Au lieu d’appeler ce constructeur, la méthode la plus courante pour instancier un <xref:System.Threading.Tasks.Task> objet et lancer une tâche est en appelant la méthode statique <xref:System.Threading.Tasks.Task.Run%28System.Action%29?displayProperty=nameWithType> ou <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="371e8-181">Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.Task.Run%28System.Action%29?displayProperty=nameWithType> or <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="371e8-182">Le seul avantage offert par ce constructeur est qu’il permet l’instanciation d’objet d’être séparé de l’invocation de la tâche.</span><span class="sxs-lookup"><span data-stu-id="371e8-182">The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="371e8-183">L’exemple suivant utilise le <xref:System.Threading.Tasks.Task.%23ctor%28System.Action%29> constructeur pour créer des tâches qui récupèrent les noms de fichiers dans les répertoires spécifiés.</span><span class="sxs-lookup"><span data-stu-id="371e8-183">The following example uses the <xref:System.Threading.Tasks.Task.%23ctor%28System.Action%29> constructor to create tasks that retrieve the filenames in specified directories.</span></span> <span data-ttu-id="371e8-184">Toutes les tâches d’écrivent les noms de fichiers dans un seul <xref:System.Collections.Concurrent.ConcurrentBag%601> objet.</span><span class="sxs-lookup"><span data-stu-id="371e8-184">All tasks write the file names to a single <xref:System.Collections.Concurrent.ConcurrentBag%601> object.</span></span> <span data-ttu-id="371e8-185">L’exemple appelle ensuite la <xref:System.Threading.Tasks.Task.WaitAll%28System.Threading.Tasks.Task%5B%5D%29> pour s’assurer que toutes les tâches terminées et affiche le nombre total de noms de fichiers écrits dans le <xref:System.Collections.Concurrent.ConcurrentBag%601> objet.</span><span class="sxs-lookup"><span data-stu-id="371e8-185">The example then calls the <xref:System.Threading.Tasks.Task.WaitAll%28System.Threading.Tasks.Task%5B%5D%29> method to ensure that all tasks have completed, and then displays a count of the total number of file names written to the <xref:System.Collections.Concurrent.ConcurrentBag%601> object.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Ctor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.ctor/cs/ctor1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.Ctor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.ctor/vb/ctor1.vb#1)]  
  
 <span data-ttu-id="371e8-186">L’exemple suivant est identique, sauf qu’il a utilisé la <xref:System.Threading.Tasks.Task.Run%28System.Action%29> méthode pour instancier et exécuter la tâche en une seule opération.</span><span class="sxs-lookup"><span data-stu-id="371e8-186">The following example is identical, except that it used the <xref:System.Threading.Tasks.Task.Run%28System.Action%29> method to instantiate and run the task in a single operation.</span></span> <span data-ttu-id="371e8-187">La méthode retourne la <xref:System.Threading.Tasks.Task> objet qui représente la tâche.</span><span class="sxs-lookup"><span data-stu-id="371e8-187">The method returns the <xref:System.Threading.Tasks.Task> object that represents the task.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Run#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/run2.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.Run#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/run2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="371e8-188">L'argument <paramref name="action" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-188">The <paramref name="action" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Threading.Tasks.Task.Run(System.Action)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Task (Action action, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Action action, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Task(Action ^ action, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="action">
          <span data-ttu-id="371e8-189">Délégué qui représente le code à exécuter dans la tâche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-189">The delegate that represents the code to execute in the task.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="371e8-190">Le <see cref="T:System.Threading.CancellationToken" /> que la nouvelle tâche observera.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-190">The <see cref="T:System.Threading.CancellationToken" /> that the new  task will observe.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="371e8-191">Initialise un nouveau <see cref="T:System.Threading.Tasks.Task" /> avec l'action spécifiée et <see cref="T:System.Threading.CancellationToken" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-191">Initializes a new <see cref="T:System.Threading.Tasks.Task" /> with the specified action and <see cref="T:System.Threading.CancellationToken" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="371e8-192">Au lieu d’appeler ce constructeur, la méthode la plus courante pour instancier un <xref:System.Threading.Tasks.Task> objet et lancer une tâche est en appelant la méthode statique <xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> et <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> méthodes.</span><span class="sxs-lookup"><span data-stu-id="371e8-192">Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> and <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> methods.</span></span> <span data-ttu-id="371e8-193">Le seul avantage offert par ce constructeur est qu’il permet l’instanciation d’objet d’être séparé de l’invocation de la tâche.</span><span class="sxs-lookup"><span data-stu-id="371e8-193">The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</span></span>  
  
 <span data-ttu-id="371e8-194">Pour plus d’informations, consultez [parallélisme des tâches (bibliothèque parallèle de tâches)](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md) et [l’annulation dans les Threads managés](~/docs/standard/threading/cancellation-in-managed-threads.md).</span><span class="sxs-lookup"><span data-stu-id="371e8-194">For more information, see [Task Parallelism (Task Parallel Library)](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md) and [Cancellation in Managed Threads](~/docs/standard/threading/cancellation-in-managed-threads.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="371e8-195">L’exemple suivant appelle la <xref:System.Threading.Tasks.Task.%23ctor%28System.Action%2CSystem.Threading.CancellationToken%29> constructeur pour créer une tâche qui parcourt les fichiers dans le répertoire C:\Windows\System32.</span><span class="sxs-lookup"><span data-stu-id="371e8-195">The following example calls the <xref:System.Threading.Tasks.Task.%23ctor%28System.Action%2CSystem.Threading.CancellationToken%29> constructor to create a task that iterates the files in the C:\Windows\System32 directory.</span></span> <span data-ttu-id="371e8-196">L’expression lambda appelle la <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> méthode pour ajouter des informations sur chaque fichier à un <xref:System.Collections.Generic.List%601> objet.</span><span class="sxs-lookup"><span data-stu-id="371e8-196">The lambda expression calls the <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method to add information about each  file to a <xref:System.Collections.Generic.List%601> object.</span></span> <span data-ttu-id="371e8-197">Chaque détachée tâche imbriquée appelée par le <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> boucle vérifie l’état du jeton d’annulation et, si l’annulation est demandée, appelle le <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="371e8-197">Each detached nested task invoked by the <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> loop checks the state of the cancellation token and, if cancellation is requested, calls the <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="371e8-198">Le <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType> méthode lève une exception une <xref:System.OperationCanceledException> exception est gérée dans un `catch` bloquer lorsque le thread appelant appelle la <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="371e8-198">The <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType> method throws an <xref:System.OperationCanceledException> exception that is handled in a `catch` block when the calling thread calls the <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType> method.</span></span>  <span data-ttu-id="371e8-199">Le <xref:System.Threading.Tasks.Task.Start%2A> méthode est alors appelée pour démarrer la tâche.</span><span class="sxs-lookup"><span data-stu-id="371e8-199">The <xref:System.Threading.Tasks.Task.Start%2A> method is then called to start the task.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.ctor#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.ctor/cs/run4.cs#4)]
 [!code-vb[System.Threading.Tasks.Task.ctor#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.ctor/vb/run4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="371e8-200">Le <see cref="T:System.Threading.CancellationToken" /> fourni a déjà été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-200">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="371e8-201">L’argument <paramref name="action" /> a la valeur null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-201">The <paramref name="action" /> argument is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Task (Action action, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Action action, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Task(Action ^ action, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <param name="action">
          <span data-ttu-id="371e8-202">Délégué qui représente le code à exécuter dans la tâche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-202">The delegate that represents the code to execute in the task.</span>
          </span>
        </param>
        <param name="creationOptions">
          <span data-ttu-id="371e8-203">
            <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> utilisé pour personnaliser le comportement de la tâche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-203">The <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> used to customize the task's behavior.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="371e8-204">Initialise une nouvelle <see cref="T:System.Threading.Tasks.Task" /> avec l'action et les options de création spécifiées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-204">Initializes a new <see cref="T:System.Threading.Tasks.Task" /> with the specified action and creation options.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="371e8-205">Au lieu d’appeler ce constructeur, la méthode la plus courante pour instancier un <xref:System.Threading.Tasks.Task> objet et lancer une tâche est en appelant la méthode statique <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.Tasks.TaskCreationOptions%29?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="371e8-205">Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.Tasks.TaskCreationOptions%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="371e8-206">Le seul avantage offert par ce constructeur est qu’il permet l’instanciation d’objet d’être séparé de l’invocation de la tâche.</span><span class="sxs-lookup"><span data-stu-id="371e8-206">The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="371e8-207">L’argument <paramref name="action" /> a la valeur null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-207">The <paramref name="action" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="371e8-208">L'argument <paramref name="creationOptions" /> spécifie une valeur non valide pour <see cref="T:System.Threading.Tasks.TaskCreationOptions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-208">The <paramref name="creationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskCreationOptions" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Task (Action&lt;object&gt; action, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Action`1&lt;object&gt; action, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (action As Action(Of Object), state As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Task(Action&lt;System::Object ^&gt; ^ action, System::Object ^ state);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="action" Type="System.Action&lt;System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="action">
          <span data-ttu-id="371e8-209">Délégué qui représente le code à exécuter dans la tâche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-209">The delegate that represents the code to execute in the task.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="371e8-210">Objet représentant les données que l'action doit utiliser.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-210">An object representing data to be used by the action.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="371e8-211">Initialise un nouveau <see cref="T:System.Threading.Tasks.Task" /> avec l'action et l'état spécifiés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-211">Initializes a new <see cref="T:System.Threading.Tasks.Task" /> with the specified action and state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="371e8-212">Au lieu d’appeler ce constructeur, la méthode la plus courante pour instancier un <xref:System.Threading.Tasks.Task> objet et lancer une tâche est en appelant la méthode statique <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%29?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="371e8-212">Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="371e8-213">Le seul avantage offert par ce constructeur est qu’il permet l’instanciation d’objet d’être séparé de l’invocation de la tâche.</span><span class="sxs-lookup"><span data-stu-id="371e8-213">The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="371e8-214">L’exemple suivant définit un tableau de mots de la lettre de 6.</span><span class="sxs-lookup"><span data-stu-id="371e8-214">The following example defines an array of 6-letter words.</span></span> <span data-ttu-id="371e8-215">Chaque mot est ensuite passé comme argument à la <xref:System.Threading.Tasks.Task.%23ctor%28System.Action%7BSystem.Object%7D%2CSystem.Object%29> constructeur, dont <xref:System.Action%601> délégué brouille les caractères du mot, puis affiche le mot d’origine et sa version cryptée.</span><span class="sxs-lookup"><span data-stu-id="371e8-215">Each word is then passed as an argument to the <xref:System.Threading.Tasks.Task.%23ctor%28System.Action%7BSystem.Object%7D%2CSystem.Object%29> constructor, whose <xref:System.Action%601> delegate scrambles the characters in the word, then displays the original word and its scrambled version.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.ctor#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.ctor/cs/startnew3.cs#3)]
 [!code-vb[System.Threading.Tasks.Task.ctor#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.ctor/vb/startnew3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="371e8-216">L’argument <paramref name="action" /> a la valeur null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-216">The <paramref name="action" /> argument is null.</span>
          </span>
        </exception>
        <altmember cref="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Task (Action action, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Action action, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Task(Action ^ action, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <param name="action">
          <span data-ttu-id="371e8-217">Délégué qui représente le code à exécuter dans la tâche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-217">The delegate that represents the code to execute in the task.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="371e8-218">Le <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> que la nouvelle tâche observera.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-218">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that the new task will observe.</span>
          </span>
        </param>
        <param name="creationOptions">
          <span data-ttu-id="371e8-219">
            <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> utilisé pour personnaliser le comportement de la tâche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-219">The <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> used to customize the task's behavior.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="371e8-220">Initialise une nouvelle <see cref="T:System.Threading.Tasks.Task" /> avec l'action et les options de création spécifiées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-220">Initializes a new <see cref="T:System.Threading.Tasks.Task" /> with the specified action and creation options.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="371e8-221">Au lieu d’appeler ce constructeur, la méthode la plus courante pour instancier un <xref:System.Threading.Tasks.Task> objet et lancer une tâche est en appelant la méthode statique <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%2CSystem.Threading.Tasks.TaskCreationOptions%2CSystem.Threading.Tasks.TaskScheduler%29?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="371e8-221">Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%2CSystem.Threading.Tasks.TaskCreationOptions%2CSystem.Threading.Tasks.TaskScheduler%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="371e8-222">Le seul avantage offert par ce constructeur est qu’il permet l’instanciation d’objet d’être séparé de l’invocation de la tâche.</span><span class="sxs-lookup"><span data-stu-id="371e8-222">The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</span></span>  
  
 <span data-ttu-id="371e8-223">Pour plus d’informations, consultez [parallélisme des tâches (bibliothèque parallèle de tâches)](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md) et [l’annulation de tâche](~/docs/standard/parallel-programming/task-cancellation.md).</span><span class="sxs-lookup"><span data-stu-id="371e8-223">For more information, see [Task Parallelism (Task Parallel Library)](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md) and [Task Cancellation](~/docs/standard/parallel-programming/task-cancellation.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="371e8-224">Le <see cref="T:System.Threading.CancellationTokenSource" /> qui a créé <paramref name="cancellationToken" /> a déjà été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-224">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="371e8-225">L’argument <paramref name="action" /> a la valeur null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-225">The <paramref name="action" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="371e8-226">L'argument <paramref name="creationOptions" /> spécifie une valeur non valide pour <see cref="T:System.Threading.Tasks.TaskCreationOptions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-226">The <paramref name="creationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskCreationOptions" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Task (Action&lt;object&gt; action, object state, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Action`1&lt;object&gt; action, object state, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Task(Action&lt;System::Object ^&gt; ^ action, System::Object ^ state, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="action" Type="System.Action&lt;System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="action">
          <span data-ttu-id="371e8-227">Délégué qui représente le code à exécuter dans la tâche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-227">The delegate that represents the code to execute in the task.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="371e8-228">Objet représentant les données que l'action doit utiliser.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-228">An object representing data to be used by the action.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="371e8-229">
            <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> que la nouvelle tâche observera.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-229">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that that the new task will observe.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="371e8-230">Initialise une nouvelle <see cref="T:System.Threading.Tasks.Task" /> avec l'action, l'état et les options spécifiés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-230">Initializes a new <see cref="T:System.Threading.Tasks.Task" /> with the specified action, state, and options.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="371e8-231">Au lieu d’appeler ce constructeur, la méthode la plus courante pour instancier un <xref:System.Threading.Tasks.Task> objet et lancer une tâche est en appelant la méthode statique <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="371e8-231">Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="371e8-232">Le seul avantage offert par ce constructeur est qu’il permet l’instanciation d’objet d’être séparé de l’invocation de la tâche.</span><span class="sxs-lookup"><span data-stu-id="371e8-232">The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="371e8-233">Le <see cref="T:System.Threading.CancellationTokenSource" /> qui a créé <paramref name="cancellationToken" /> a déjà été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-233">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="371e8-234">L’argument <paramref name="action" /> a la valeur null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-234">The <paramref name="action" /> argument is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Task (Action&lt;object&gt; action, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Action`1&lt;object&gt; action, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (action As Action(Of Object), state As Object, creationOptions As TaskCreationOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Task(Action&lt;System::Object ^&gt; ^ action, System::Object ^ state, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="action" Type="System.Action&lt;System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <param name="action">
          <span data-ttu-id="371e8-235">Délégué qui représente le code à exécuter dans la tâche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-235">The delegate that represents the code to execute in the task.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="371e8-236">Objet représentant les données que l'action doit utiliser.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-236">An object representing data to be used by the action.</span>
          </span>
        </param>
        <param name="creationOptions">
          <span data-ttu-id="371e8-237">
            <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> utilisé pour personnaliser le comportement de la tâche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-237">The <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> used to customize the task's behavior.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="371e8-238">Initialise une nouvelle <see cref="T:System.Threading.Tasks.Task" /> avec l'action, l'état et les options spécifiés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-238">Initializes a new <see cref="T:System.Threading.Tasks.Task" /> with the specified action, state, and options.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="371e8-239">Au lieu d’appeler ce constructeur, la méthode la plus courante pour instancier un <xref:System.Threading.Tasks.Task> objet et lancer une tâche est en appelant la méthode statique <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%2CSystem.Threading.Tasks.TaskCreationOptions%29?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="371e8-239">Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%2CSystem.Threading.Tasks.TaskCreationOptions%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="371e8-240">Le seul avantage offert par ce constructeur est qu’il permet l’instanciation d’objet d’être séparé de l’invocation de la tâche.</span><span class="sxs-lookup"><span data-stu-id="371e8-240">The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="371e8-241">L’argument <paramref name="action" /> a la valeur null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-241">The <paramref name="action" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="371e8-242">L'argument <paramref name="creationOptions" /> spécifie une valeur non valide pour <see cref="T:System.Threading.Tasks.TaskCreationOptions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-242">The <paramref name="creationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskCreationOptions" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Task (Action&lt;object&gt; action, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Action`1&lt;object&gt; action, object state, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Task(Action&lt;System::Object ^&gt; ^ action, System::Object ^ state, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="action" Type="System.Action&lt;System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <param name="action">
          <span data-ttu-id="371e8-243">Délégué qui représente le code à exécuter dans la tâche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-243">The delegate that represents the code to execute in the task.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="371e8-244">Objet représentant les données que l'action doit utiliser.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-244">An object representing data to be used by the action.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="371e8-245">
            <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> que la nouvelle tâche observera.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-245">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that that the new task will observe..</span>
          </span>
        </param>
        <param name="creationOptions">
          <span data-ttu-id="371e8-246">
            <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> utilisé pour personnaliser le comportement de la tâche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-246">The <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> used to customize the task's behavior.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="371e8-247">Initialise une nouvelle <see cref="T:System.Threading.Tasks.Task" /> avec l'action, l'état et les options spécifiés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-247">Initializes a new <see cref="T:System.Threading.Tasks.Task" /> with the specified action, state, and options.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="371e8-248">Au lieu d’appeler ce constructeur, la méthode la plus courante pour instancier un <xref:System.Threading.Tasks.Task> objet et lancer une tâche est en appelant la méthode statique <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%2CSystem.Threading.CancellationToken%2CSystem.Threading.Tasks.TaskCreationOptions%2CSystem.Threading.Tasks.TaskScheduler%29?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="371e8-248">Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%2CSystem.Threading.CancellationToken%2CSystem.Threading.Tasks.TaskCreationOptions%2CSystem.Threading.Tasks.TaskScheduler%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="371e8-249">Le seul avantage offert par ce constructeur est qu’il permet l’instanciation d’objet d’être séparé de l’invocation de la tâche.</span><span class="sxs-lookup"><span data-stu-id="371e8-249">The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="371e8-250">Le <see cref="T:System.Threading.CancellationTokenSource" /> qui a créé <paramref name="cancellationToken" /> a déjà été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-250">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="371e8-251">L’argument <paramref name="action" /> a la valeur null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-251">The <paramref name="action" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="371e8-252">L'argument <paramref name="creationOptions" /> spécifie une valeur non valide pour <see cref="T:System.Threading.Tasks.TaskCreationOptions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-252">The <paramref name="creationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskCreationOptions" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="AsyncState">
      <MemberSignature Language="C#" Value="public object AsyncState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object AsyncState" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.AsyncState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AsyncState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ AsyncState { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.IAsyncResult.AsyncState</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="371e8-253">Obtient l'objet d'état fourni quand la <see cref="T:System.Threading.Tasks.Task" /> a été créée, ou null si aucune n'a été fournie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-253">Gets the state object supplied when the <see cref="T:System.Threading.Tasks.Task" /> was created, or null if none was supplied.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="371e8-254">
            <see cref="T:System.Object" /> représentant les données d'état passées à la tâche lors de sa création.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-254">An <see cref="T:System.Object" /> that represents the state data that was passed in to the task when it was created.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="371e8-255">Effectuer un cast de l’objet vers le type d’origine pour récupérer ses données.</span><span class="sxs-lookup"><span data-stu-id="371e8-255">Cast the object back to the original type to retrieve its data.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompletedTask">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task CompletedTask { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Threading.Tasks.Task CompletedTask" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.CompletedTask" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CompletedTask As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Threading::Tasks::Task ^ CompletedTask { System::Threading::Tasks::Task ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="371e8-256">Obtient une tâche qui s’est déjà terminée correctement.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-256">Gets a task that has already completed successfully.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="371e8-257">Tâche terminée avec succès.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-257">The successfully completed task.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="371e8-258">Cette propriété retourne une tâche dont <xref:System.Threading.Tasks.Task.Status%2A> est définie sur <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>.</span><span class="sxs-lookup"><span data-stu-id="371e8-258">This property returns a task whose <xref:System.Threading.Tasks.Task.Status%2A> property is set to <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>.</span></span> <span data-ttu-id="371e8-259">Pour créer la tâche qui retourne une valeur et s’exécute jusqu'à son achèvement, appelez le <xref:System.Threading.Tasks.Task.FromResult%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="371e8-259">To create task that returns a value and runs to completion, call the <xref:System.Threading.Tasks.Task.FromResult%2A> method.</span></span>  
  
 <span data-ttu-id="371e8-260">Des tentatives répétées pour récupérer la valeur de cette propriété ne retournent pas toujours la même instance.</span><span class="sxs-lookup"><span data-stu-id="371e8-260">Repeated attempts to retrieve this property value may not always return the same instance.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Threading.Tasks.Task.FromResult``1(``0)" />
      </Docs>
    </Member>
    <Member MemberName="ConfigureAwait">
      <MemberSignature Language="C#" Value="public System.Runtime.CompilerServices.ConfiguredTaskAwaitable ConfigureAwait (bool continueOnCapturedContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Runtime.CompilerServices.ConfiguredTaskAwaitable ConfigureAwait(bool continueOnCapturedContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ConfigureAwait(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function ConfigureAwait (continueOnCapturedContext As Boolean) As ConfiguredTaskAwaitable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Runtime::CompilerServices::ConfiguredTaskAwaitable ConfigureAwait(bool continueOnCapturedContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.CompilerServices.ConfiguredTaskAwaitable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continueOnCapturedContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="continueOnCapturedContext">
          <span data-ttu-id="371e8-261">
            <see langword="true" /> en cas de tentative de marshaling de la continuation vers le contexte d'origine capturé ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-261">
              <see langword="true" /> to attempt to marshal the continuation back to the original context captured; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="371e8-262">Configure un élément awaiter utilisé pour attendre cette <see cref="T:System.Threading.Tasks.Task" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-262">Configures an awaiter used to await this <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="371e8-263">Objet utilisé pour attendre cette tâche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-263">An object used to await this task.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ContinueWith">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="371e8-264">Crée une continuation qui s'exécute de façon asynchrone quand la <see cref="T:System.Threading.Tasks.Task" /> cible se termine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-264">Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task&gt; continuationAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`1&lt;class System.Threading.Tasks.Task&gt; continuationAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task})" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith (continuationAction As Action(Of Task)) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task ^&gt; ^ continuationAction);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&gt;" />
      </Parameters>
      <Docs>
        <param name="continuationAction">
          <span data-ttu-id="371e8-265">Action à exécuter quand <see cref="T:System.Threading.Tasks.Task" /> se termine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-265">An action to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="371e8-266">Quand elle est exécutée, la tâche achevée est passée au délégué en tant qu'argument.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-266">When run, the delegate will be passed the completed task as an argument.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="371e8-267">Crée une continuation qui s'exécute de façon asynchrone quand la <see cref="T:System.Threading.Tasks.Task" /> cible se termine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-267">Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="371e8-268">Nouvelle <see cref="T:System.Threading.Tasks.Task" /> de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-268">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="371e8-269">Retourné <xref:System.Threading.Tasks.Task> n’est plus planifié pour l’exécution jusqu'à ce que la tâche en cours est terminée, si elle se termine en raison de fonctionne correctement jusqu'à son achèvement, provoquer une erreur en raison d’une exception non gérée ou sortir tôt en raison de l’annulation.</span><span class="sxs-lookup"><span data-stu-id="371e8-269">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="371e8-270">L’exemple suivant définit une tâche qui remplit un tableau avec 100 aléatoire valeurs de date et heure.</span><span class="sxs-lookup"><span data-stu-id="371e8-270">The following example defines a task that populates an array with 100 random date and time values.</span></span> <span data-ttu-id="371e8-271">Elle utilise le <xref:System.Threading.Tasks.Task.ContinueWith%28System.Action%7BSystem.Threading.Tasks.Task%7D%29> méthode pour sélectionner plus tôt et les dernières valeurs de date, une fois que le tableau est entièrement rempli.</span><span class="sxs-lookup"><span data-stu-id="371e8-271">It uses the <xref:System.Threading.Tasks.Task.ContinueWith%28System.Action%7BSystem.Threading.Tasks.Task%7D%29> method to select the earliest and the latest date values once the array is fully populated.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.ContinueWith#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.continuewith/cs/continuewith1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.ContinueWith#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.continuewith/vb/continuewith1.vb#1)]  
  
 <span data-ttu-id="371e8-272">Car une application de console peut se fermer avant l’exécution de la tâche de continuation, la <xref:System.Threading.Tasks.Task.Wait> méthode est appelée pour vous assurer que la continuation termine l’exécution avant la fin de l’exemple.</span><span class="sxs-lookup"><span data-stu-id="371e8-272">Because a console application may terminate before the continuation task executes, the <xref:System.Threading.Tasks.Task.Wait> method is called to ensure that the continuation finishes executing before the example ends.</span></span>  
  
 <span data-ttu-id="371e8-273">Pour obtenir un exemple supplémentaire, consultez [chaînage des tâches à l’aide de tâches de Continuation](~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md).</span><span class="sxs-lookup"><span data-stu-id="371e8-273">For an additional example, see [Chaining Tasks by Using Continuation Tasks](~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="371e8-274">L'argument <paramref name="continuationAction" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-274">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task,object&gt; continuationAction, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`2&lt;class System.Threading.Tasks.Task, object&gt; continuationAction, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith (continuationAction As Action(Of Task, Object), state As Object) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task ^, System::Object ^&gt; ^ continuationAction, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task,System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="continuationAction">
          <span data-ttu-id="371e8-275">Action à exécuter quand la tâche se termine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-275">An action to run when the task completes.</span>
          </span>
          <span data-ttu-id="371e8-276">Lors de l’exécution, la tâche achevée et l’objet d’état fourni par l’appelant sont passés comme arguments au délégué.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-276">When run, the delegate is passed the completed task and a caller-supplied state object as arguments.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="371e8-277">Objet représentant les données que l'action de continuation doit utiliser.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-277">An object representing data to be used by the continuation action.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="371e8-278">Crée une continuation qui reçoit des informations d'état fournies par l'appelant et s'exécute quand le <see cref="T:System.Threading.Tasks.Task" /> cible se termine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-278">Creates a continuation that receives caller-supplied state information and executes when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="371e8-279">Nouvelle tâche de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-279">A new continuation task.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="371e8-280">Retourné <xref:System.Threading.Tasks.Task> n’est plus planifié pour l’exécution jusqu'à ce que la tâche en cours est terminée, si elle se termine en raison fonctionne correctement jusqu'à son achèvement, provoquer une erreur en raison d’une exception non gérée ou en cours de fermeture au début en raison de l’annulation.</span><span class="sxs-lookup"><span data-stu-id="371e8-280">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting early due to cancellation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="371e8-281">L'argument <paramref name="continuationAction" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-281">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task&gt; continuationAction, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`1&lt;class System.Threading.Tasks.Task&gt; continuationAction, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task ^&gt; ^ continuationAction, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="continuationAction">
          <span data-ttu-id="371e8-282">Action à exécuter quand <see cref="T:System.Threading.Tasks.Task" /> se termine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-282">An action to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="371e8-283">Quand elle est exécutée, la tâche achevée est passée au délégué en tant qu'argument.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-283">When run, the delegate will be passed the completed task as an argument.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="371e8-284">
            <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> qui sera assigné à la nouvelle tâche de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-284">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new continuation task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="371e8-285">Crée une continuation qui reçoit un jeton d'annulation et s'exécute de façon asynchrone quand le <see cref="T:System.Threading.Tasks.Task" /> cible se termine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-285">Creates a continuation that receives a cancellation token and executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="371e8-286">Nouvelle <see cref="T:System.Threading.Tasks.Task" /> de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-286">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="371e8-287">Retourné <xref:System.Threading.Tasks.Task> n’est plus planifié pour l’exécution jusqu'à ce que la tâche en cours est terminée, si elle se termine en raison de fonctionne correctement jusqu'à son achèvement, provoquer une erreur en raison d’une exception non gérée ou sortir tôt en raison de l’annulation.</span><span class="sxs-lookup"><span data-stu-id="371e8-287">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="371e8-288">Le <see cref="T:System.Threading.CancellationTokenSource" /> qui a créé le jeton a déjà été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-288">The <see cref="T:System.Threading.CancellationTokenSource" /> that created the token has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="371e8-289">L’argument <paramref name="continuationAction" /> a la valeur null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-289">The <paramref name="continuationAction" /> argument is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task&gt; continuationAction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`1&lt;class System.Threading.Tasks.Task&gt; continuationAction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith (continuationAction As Action(Of Task), continuationOptions As TaskContinuationOptions) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task ^&gt; ^ continuationAction, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&gt;" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <param name="continuationAction">
          <span data-ttu-id="371e8-290">Action à exécuter selon le <c>continuationOptions</c>spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-290">An action to run according to the specified <c>continuationOptions</c>.</span>
          </span>
          <span data-ttu-id="371e8-291">Quand elle est exécutée, la tâche achevée est passée au délégué en tant qu'argument.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-291">When run, the delegate will be passed the completed task as an argument.</span>
          </span>
        </param>
        <param name="continuationOptions">
          <span data-ttu-id="371e8-292">Options applicables quand la continuation est planifiée et qui en régissent le comportement.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-292">Options for when the continuation is scheduled and how it behaves.</span>
          </span>
          <span data-ttu-id="371e8-293">Cela inclut des critères, tels que <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, ainsi que des options d'exécution, telles que <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-293">This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="371e8-294">Crée une continuation qui s'exécute quand la tâche cible se termine conformément au <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-294">Creates a continuation that executes when the target task completes according to the specified <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="371e8-295">Nouvelle <see cref="T:System.Threading.Tasks.Task" /> de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-295">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="371e8-296">Retourné <xref:System.Threading.Tasks.Task> ne sera pas planifié pour l’exécution jusqu'à ce que la tâche en cours est terminée.</span><span class="sxs-lookup"><span data-stu-id="371e8-296">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed.</span></span> <span data-ttu-id="371e8-297">Si les critères de continuation spécifiés par le biais du `continuationOptions` paramètre ne sont pas remplies, la tâche de continuation sera annulée au lieu d’être planifiée.</span><span class="sxs-lookup"><span data-stu-id="371e8-297">If the continuation criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="371e8-298">L’exemple suivant montre comment utiliser <xref:System.Threading.Tasks.TaskContinuationOptions> pour spécifier qu’une tâche de continuation doit s’exécuter simultanément lorsque la tâche antécédente est terminée.</span><span class="sxs-lookup"><span data-stu-id="371e8-298">The following example demonstrates using <xref:System.Threading.Tasks.TaskContinuationOptions> to specify that a continuation task should run synchronously when the antecedent task completes.</span></span> <span data-ttu-id="371e8-299">(Si la tâche spécifiée a déjà été effectué par le temps <xref:System.Threading.Tasks.Task.ContinueWith%2A> est appelée, synchrones s’exécute sur la thread appelant la méthode <xref:System.Threading.Tasks.Task.ContinueWith%2A>.)</span><span class="sxs-lookup"><span data-stu-id="371e8-299">(If the specified task has already completed by the time <xref:System.Threading.Tasks.Task.ContinueWith%2A> is called, the synchronous continuation will run on the thread calling <xref:System.Threading.Tasks.Task.ContinueWith%2A>.)</span></span>  
  
```csharp  
  
public class TaskCounter  
{  
   private volatile int _count;  
  
   public void Track(Task t)  
   {  
      if (t == null) throw new ArgumentNullException("t");  
      Interlocked.Increment(ref _count);  
      t.ContinueWith(ct => Interlocked.Decrement(ref _count), TaskContinuationOptions.ExecuteSynchronously);  
   }  
  
   public int NumberOfActiveTasks { get { return _count; } }  
}  
  
```  
  
```vb  
  
Public Class TaskCounter  
   Private _count as Integer  
  
   Public Sub Track(ByVal t as Task)  
      If t is Nothing Then Throw New ArgumentNullException("t")  
      Interlocked.Increment(_count)  
      t.ContinueWith(Sub(ct)  
                        Interlocked.Decrement(_count)  
                     End Sub,  
                     TaskContinuationOptions.ExecuteSynchronously)  
   End Sub  
  
   Public ReadOnly Property NumberOfActiveTasks As Integer  
      Get  
         Return _count  
      End Get  
   End Property  
End Class  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="371e8-300">L’argument <paramref name="continuationAction" /> a la valeur null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-300">The <paramref name="continuationAction" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="371e8-301">L'argument <paramref name="continuationOptions" /> spécifie une valeur non valide pour <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-301">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task&gt; continuationAction, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`1&lt;class System.Threading.Tasks.Task&gt; continuationAction, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith (continuationAction As Action(Of Task), scheduler As TaskScheduler) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task ^&gt; ^ continuationAction, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&gt;" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="continuationAction">
          <span data-ttu-id="371e8-302">Action à exécuter quand <see cref="T:System.Threading.Tasks.Task" /> se termine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-302">An action to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="371e8-303">Quand elle est exécutée, la tâche achevée est passée au délégué en tant qu'argument.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-303">When run, the delegate will be passed the completed task as an argument.</span>
          </span>
        </param>
        <param name="scheduler">
          <span data-ttu-id="371e8-304">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> à associer à la tâche de continuation et à utiliser pour son exécution.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-304">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its execution.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="371e8-305">Crée une continuation qui s'exécute de façon asynchrone quand la <see cref="T:System.Threading.Tasks.Task" /> cible se termine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-305">Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="371e8-306">La continuation utilise un planificateur spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-306">The continuation uses a specified scheduler.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="371e8-307">Nouvelle <see cref="T:System.Threading.Tasks.Task" /> de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-307">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="371e8-308">Retourné <xref:System.Threading.Tasks.Task> n’est plus planifié pour l’exécution jusqu'à ce que la tâche en cours est terminée, si elle se termine en raison de fonctionne correctement jusqu'à son achèvement, provoquer une erreur en raison d’une exception non gérée ou sortir tôt en raison de l’annulation.</span><span class="sxs-lookup"><span data-stu-id="371e8-308">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="371e8-309">
            <see cref="T:System.Threading.Tasks.Task" /> a été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-309">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="371e8-310">L'argument <paramref name="continuationAction" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-310">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="371e8-311">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-311">-or-</span>
          </span>
          <span data-ttu-id="371e8-312">L’argument <paramref name="scheduler" /> a la valeur null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-312">The <paramref name="scheduler" /> argument is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task,object&gt; continuationAction, object state, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`2&lt;class System.Threading.Tasks.Task, object&gt; continuationAction, object state, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task ^, System::Object ^&gt; ^ continuationAction, System::Object ^ state, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task,System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="continuationAction">
          <span data-ttu-id="371e8-313">Action à exécuter quand <see cref="T:System.Threading.Tasks.Task" /> se termine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-313">An action to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="371e8-314">Lors de l'exécution, la tâche achevée et l'objet d'état fourni par l'appelant sont passés au délégué sous la forme d'arguments.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-314">When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="371e8-315">Objet représentant les données que l'action de continuation doit utiliser.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-315">An object representing data to be used by the continuation action.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="371e8-316">
            <see cref="T:System.Threading.CancellationToken" /> qui sera assigné à la nouvelle tâche de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-316">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="371e8-317">Crée une continuation qui reçoit des informations d'état fournies par l'appelant et un jeton d'annulation, et qui s'exécute de façon asynchrone quand le <see cref="T:System.Threading.Tasks.Task" /> cible se termine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-317">Creates a continuation that receives caller-supplied state information and a cancellation token and that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="371e8-318">Nouvelle <see cref="T:System.Threading.Tasks.Task" /> de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-318">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="371e8-319">Retourné <xref:System.Threading.Tasks.Task> n’est plus planifié pour l’exécution jusqu'à ce que la tâche en cours est terminée, si elle se termine en raison de fonctionne correctement jusqu'à son achèvement, provoquer une erreur en raison d’une exception non gérée ou sortir tôt en raison de l’annulation.</span><span class="sxs-lookup"><span data-stu-id="371e8-319">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="371e8-320">L'argument <paramref name="continuationAction" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-320">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="371e8-321">Le <see cref="T:System.Threading.CancellationToken" /> fourni a déjà été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-321">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task,object&gt; continuationAction, object state, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`2&lt;class System.Threading.Tasks.Task, object&gt; continuationAction, object state, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith (continuationAction As Action(Of Task, Object), state As Object, continuationOptions As TaskContinuationOptions) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task ^, System::Object ^&gt; ^ continuationAction, System::Object ^ state, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task,System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <param name="continuationAction">
          <span data-ttu-id="371e8-322">Action à exécuter quand <see cref="T:System.Threading.Tasks.Task" /> se termine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-322">An action to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="371e8-323">Lors de l'exécution, la tâche achevée et l'objet d'état fourni par l'appelant sont passés au délégué sous la forme d'arguments.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-323">When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="371e8-324">Objet représentant les données que l'action de continuation doit utiliser.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-324">An object representing data to be used by the continuation action.</span>
          </span>
        </param>
        <param name="continuationOptions">
          <span data-ttu-id="371e8-325">Options applicables quand la continuation est planifiée et qui en régissent le comportement.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-325">Options for when the continuation is scheduled and how it behaves.</span>
          </span>
          <span data-ttu-id="371e8-326">Cela inclut des critères, tels que <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, ainsi que des options d'exécution, telles que <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-326">This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="371e8-327">Crée une continuation qui reçoit des informations d'état fournies par l'appelant et s'exécute quand le <see cref="T:System.Threading.Tasks.Task" /> cible se termine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-327">Creates a continuation that receives caller-supplied state information and executes when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="371e8-328">La continuation s'exécute selon un ensemble de conditions spécifiées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-328">The continuation executes based on a set of specified conditions.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="371e8-329">Nouvelle <see cref="T:System.Threading.Tasks.Task" /> de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-329">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="371e8-330">Retourné <xref:System.Threading.Tasks.Task> ne sera pas planifié pour l’exécution jusqu'à ce que la tâche en cours est terminée.</span><span class="sxs-lookup"><span data-stu-id="371e8-330">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed.</span></span> <span data-ttu-id="371e8-331">Si les critères de continuation spécifiés par le biais du `continuationOptions` paramètre ne sont pas remplies, la tâche de continuation sera annulée au lieu d’être planifiée.</span><span class="sxs-lookup"><span data-stu-id="371e8-331">If the continuation criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="371e8-332">L'argument <paramref name="continuationAction" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-332">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="371e8-333">L'argument <paramref name="continuationOptions" /> spécifie une valeur non valide pour <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-333">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task,object&gt; continuationAction, object state, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`2&lt;class System.Threading.Tasks.Task, object&gt; continuationAction, object state, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith (continuationAction As Action(Of Task, Object), state As Object, scheduler As TaskScheduler) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task ^, System::Object ^&gt; ^ continuationAction, System::Object ^ state, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task,System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="continuationAction">
          <span data-ttu-id="371e8-334">Action à exécuter quand <see cref="T:System.Threading.Tasks.Task" /> se termine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-334">An action to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="371e8-335">Lors de l'exécution, la tâche achevée et l'objet d'état fourni par l'appelant sont passés au délégué sous la forme d'arguments.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-335">When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="371e8-336">Objet représentant les données que l'action de continuation doit utiliser.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-336">An object representing data to be used by the continuation action.</span>
          </span>
        </param>
        <param name="scheduler">
          <span data-ttu-id="371e8-337">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> à associer à la tâche de continuation et à utiliser pour son exécution.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-337">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its execution.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="371e8-338">Crée une continuation qui reçoit des informations d'état fournies par l'appelant et s'exécute de façon asynchrone quand le <see cref="T:System.Threading.Tasks.Task" /> cible se termine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-338">Creates a continuation that receives caller-supplied state information and executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="371e8-339">La continuation utilise un planificateur spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-339">The continuation uses a specified scheduler.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="371e8-340">Nouvelle <see cref="T:System.Threading.Tasks.Task" /> de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-340">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="371e8-341">Retourné <xref:System.Threading.Tasks.Task> n’est plus planifié pour l’exécution jusqu'à ce que la tâche en cours est terminée, si elle se termine en raison de fonctionne correctement jusqu'à son achèvement, provoquer une erreur en raison d’une exception non gérée ou sortir tôt en raison de l’annulation.</span><span class="sxs-lookup"><span data-stu-id="371e8-341">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="371e8-342">L'argument <paramref name="scheduler" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-342">The <paramref name="scheduler" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task&gt; continuationAction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`1&lt;class System.Threading.Tasks.Task&gt; continuationAction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task ^&gt; ^ continuationAction, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="continuationAction">
          <span data-ttu-id="371e8-343">Action à exécuter selon le <c>continuationOptions</c>spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-343">An action to run according to the specified <c>continuationOptions</c>.</span>
          </span>
          <span data-ttu-id="371e8-344">Quand elle est exécutée, la tâche achevée est passée au délégué en tant qu'argument.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-344">When run, the delegate will be passed the completed task as an argument.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="371e8-345">
            <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> qui sera assigné à la nouvelle tâche de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-345">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new continuation task.</span>
          </span>
        </param>
        <param name="continuationOptions">
          <span data-ttu-id="371e8-346">Options applicables quand la continuation est planifiée et qui en régissent le comportement.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-346">Options for when the continuation is scheduled and how it behaves.</span>
          </span>
          <span data-ttu-id="371e8-347">Cela inclut des critères, tels que <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, ainsi que des options d'exécution, telles que <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-347">This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          </span>
        </param>
        <param name="scheduler">
          <span data-ttu-id="371e8-348">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> à associer à la tâche de continuation et à utiliser pour son exécution.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-348">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its execution.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="371e8-349">Crée une continuation qui s'exécute quand la tâche cible se termine conformément au <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-349">Creates a continuation that executes when the target task competes according to the specified <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          </span>
          <span data-ttu-id="371e8-350">La continuation reçoit un jeton d'annulation et utilise un planificateur spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-350">The continuation receives a cancellation token and uses a specified scheduler.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="371e8-351">Nouvelle <see cref="T:System.Threading.Tasks.Task" /> de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-351">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="371e8-352">Retourné <xref:System.Threading.Tasks.Task> ne sera pas planifié pour l’exécution jusqu'à ce que la tâche en cours est terminée.</span><span class="sxs-lookup"><span data-stu-id="371e8-352">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed.</span></span> <span data-ttu-id="371e8-353">Si les critères spécifiés par le biais du `continuationOptions` paramètre ne sont pas remplies, la tâche de continuation sera annulée au lieu d’être planifiée.</span><span class="sxs-lookup"><span data-stu-id="371e8-353">If the criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="371e8-354">Voici un exemple d’utilisation de ContinueWith pour exécuter des travaux en arrière-plan et sur l’utilisateur threads d’interface.</span><span class="sxs-lookup"><span data-stu-id="371e8-354">The following is an example of using ContinueWith to run work both in the background and on the user interface threads.</span></span>  
  
```csharp  
  
private void Button1_Click(object sender, EventArgs e)  
{  
   var backgroundScheduler = TaskScheduler.Default;  
   var uiScheduler = TaskScheduler.FromCurrentSynchronizationContext();  
   Task.Factory.StartNew(delegate { DoBackgroundComputation(); },  
                         backgroundScheduler).  
   ContinueWith(delegate { UpdateUI(); }, uiScheduler).  
                ContinueWith(delegate { DoAnotherBackgroundComputation(); },  
                             backgroundScheduler).  
                ContinueWith(delegate { UpdateUIAgain(); }, uiScheduler);  
}  
  
```  
  
```vb  
  
Private Sub Button1_Click(ByVal sender As System.Object,   
                          ByVal e As System.EventArgs) Handles Button1.Click  
   Dim backgroundScheduler = TaskScheduler.Default  
   Dim uiScheduler = TaskScheduler.FromCurrentSynchronizationContext()  
  
   Task.Factory.StartNew(Sub()  
                           DoBackgroundComputation()  
                         End Sub, backgroundScheduler).ContinueWith(Sub(t)  
                            UpdateUI()  
                         End Sub, uiScheduler).ContinueWith(Sub(t)  
                            DoAnotherBackgroundComputation()  
                         End Sub, backgroundScheduler).ContinueWith(Sub(t)  
                            UpdateUIAgain()  
                         End Sub, uiScheduler)  
End Sub  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="371e8-355">Le <see cref="T:System.Threading.CancellationTokenSource" /> qui a créé le jeton a déjà été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-355">The <see cref="T:System.Threading.CancellationTokenSource" /> that created the token has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="371e8-356">L’argument <paramref name="continuationAction" /> a la valeur null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-356">The <paramref name="continuationAction" /> argument is null.</span>
          </span>
          <span data-ttu-id="371e8-357">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-357">-or-</span>
          </span>
          <span data-ttu-id="371e8-358">L’argument <paramref name="scheduler" /> a la valeur null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-358">The <paramref name="scheduler" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="371e8-359">L'argument <paramref name="continuationOptions" /> spécifie une valeur non valide pour <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-359">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task,object&gt; continuationAction, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`2&lt;class System.Threading.Tasks.Task, object&gt; continuationAction, object state, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task ^, System::Object ^&gt; ^ continuationAction, System::Object ^ state, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task,System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="continuationAction">
          <span data-ttu-id="371e8-360">Action à exécuter quand <see cref="T:System.Threading.Tasks.Task" /> se termine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-360">An action to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="371e8-361">Lors de l'exécution, la tâche achevée et l'objet d'état fourni par l'appelant sont passés au délégué sous la forme d'arguments.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-361">When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="371e8-362">Objet représentant les données que l'action de continuation doit utiliser.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-362">An object representing data to be used by the continuation action.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="371e8-363">
            <see cref="T:System.Threading.CancellationToken" /> qui sera assigné à la nouvelle tâche de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-363">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</span>
          </span>
        </param>
        <param name="continuationOptions">
          <span data-ttu-id="371e8-364">Options applicables quand la continuation est planifiée et qui en régissent le comportement.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-364">Options for when the continuation is scheduled and how it behaves.</span>
          </span>
          <span data-ttu-id="371e8-365">Cela inclut des critères, tels que <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, ainsi que des options d'exécution, telles que <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-365">This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          </span>
        </param>
        <param name="scheduler">
          <span data-ttu-id="371e8-366">
            <see cref="T:System.Threading.Tasks.TaskScheduler" /> à associer à la tâche de continuation et à utiliser pour son exécution.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-366">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its  execution.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="371e8-367">Crée une continuation qui reçoit des informations d'état fournies par l'appelant et un jeton d'annulation, et qui s'exécute quand le <see cref="T:System.Threading.Tasks.Task" /> cible se termine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-367">Creates a continuation that receives caller-supplied state information and a cancellation token and that executes when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="371e8-368">La continuation s'exécute selon un ensemble de conditions spécifiées et utilise un planificateur spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-368">The continuation executes based on a set of specified conditions and uses a specified scheduler.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="371e8-369">Nouvelle <see cref="T:System.Threading.Tasks.Task" /> de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-369">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="371e8-370">Retourné <xref:System.Threading.Tasks.Task> ne sera pas planifié pour l’exécution jusqu'à ce que la tâche en cours est terminée.</span><span class="sxs-lookup"><span data-stu-id="371e8-370">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has  completed.</span></span> <span data-ttu-id="371e8-371">Si les critères spécifiés par le biais du `continuationOptions` paramètre ne sont pas remplies, la tâche de continuation sera annulée au lieu d’être planifiée.</span><span class="sxs-lookup"><span data-stu-id="371e8-371">If the criteria specified through the `continuationOptions` parameter  are not met, the continuation task will be canceled instead of scheduled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="371e8-372">L'argument <paramref name="scheduler" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-372">The <paramref name="scheduler" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="371e8-373">L'argument <paramref name="continuationOptions" /> spécifie une valeur non valide pour <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-373">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="371e8-374">Le <see cref="T:System.Threading.CancellationToken" /> fourni a déjà été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-374">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWith&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task,TResult&gt; continuationFunction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWith&lt;TResult&gt;(class System.Func`2&lt;class System.Threading.Tasks.Task, !!TResult&gt; continuationFunction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith(Of TResult) (continuationFunction As Func(Of Task, TResult)) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task ^, TResult&gt; ^ continuationFunction);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="371e8-375">Type du résultat produit par la continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-375">The type of the result produced by the continuation.</span>
          </span>
        </typeparam>
        <param name="continuationFunction">
          <span data-ttu-id="371e8-376">Fonction à exécuter quand <see cref="T:System.Threading.Tasks.Task`1" /> se termine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-376">A function to run when the <see cref="T:System.Threading.Tasks.Task`1" /> completes.</span>
          </span>
          <span data-ttu-id="371e8-377">Quand elle est exécutée, la tâche achevée est passée au délégué en tant qu'argument.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-377">When run, the delegate will be passed the completed task as an argument.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="371e8-378">Crée une continuation qui s'exécute de façon asynchrone quand le <see cref="T:System.Threading.Tasks.Task`1" /> cible se termine et retourne une valeur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-378">Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task`1" /> completes and returns a value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="371e8-379">Nouvelle tâche de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-379">A new continuation task.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="371e8-380">Retourné <xref:System.Threading.Tasks.Task%601> n’est plus planifié pour l’exécution jusqu'à ce que la tâche en cours est terminée, si elle se termine en raison de fonctionne correctement jusqu'à son achèvement, provoquer une erreur en raison d’une exception non gérée ou sortir tôt en raison de l’annulation.</span><span class="sxs-lookup"><span data-stu-id="371e8-380">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="371e8-381">L’exemple suivant montre comment utiliser la méthode ContinueWith :</span><span class="sxs-lookup"><span data-stu-id="371e8-381">The following example shows how to use the ContinueWith method:</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task#03](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/continuationsimple.cs#03)]
 [!code-vb[System.Threading.Tasks.Task#03](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/continuationsimple.vb#03)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="371e8-382">
            <see cref="T:System.Threading.Tasks.Task" /> a été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-382">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="371e8-383">L’argument <paramref name="continuationFunction" /> a la valeur null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-383">The <paramref name="continuationFunction" /> argument is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWith&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task,object,TResult&gt; continuationFunction, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWith&lt;TResult&gt;(class System.Func`3&lt;class System.Threading.Tasks.Task, object, !!TResult&gt; continuationFunction, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith(Of TResult) (continuationFunction As Func(Of Task, Object, TResult), state As Object) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task ^, System::Object ^, TResult&gt; ^ continuationFunction, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,System.Object,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="371e8-384">Type du résultat produit par la continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-384">The type of the result produced by the continuation.</span>
          </span>
        </typeparam>
        <param name="continuationFunction">
          <span data-ttu-id="371e8-385">Fonction à exécuter quand <see cref="T:System.Threading.Tasks.Task" /> se termine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-385">A function to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="371e8-386">Lors de l'exécution, la tâche achevée et l'objet d'état fourni par l'appelant sont passés au délégué sous la forme d'arguments.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-386">When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="371e8-387">Objet représentant les données que la fonction de continuation doit utiliser.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-387">An object representing data to be used by the continuation function.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="371e8-388">Crée une continuation qui reçoit des informations d'état fournies par l'appelant et s'exécute de façon asynchrone quand le <see cref="T:System.Threading.Tasks.Task" /> cible se termine et retourne une valeur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-388">Creates a continuation that receives caller-supplied state information and executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes and returns a value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="371e8-389">Nouvelle <see cref="T:System.Threading.Tasks.Task`1" /> de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-389">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="371e8-390">Retourné <xref:System.Threading.Tasks.Task%601> n’est plus planifié pour l’exécution jusqu'à ce que la tâche en cours est terminée, si elle se termine en raison de fonctionne correctement jusqu'à son achèvement, provoquer une erreur en raison d’une exception non gérée ou sortir tôt en raison de l’annulation.</span><span class="sxs-lookup"><span data-stu-id="371e8-390">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="371e8-391">L'argument <paramref name="continuationFunction" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-391">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWith&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task,TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWith&lt;TResult&gt;(class System.Func`2&lt;class System.Threading.Tasks.Task, !!TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="371e8-392">Type du résultat produit par la continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-392">The type of the result produced by the continuation.</span>
          </span>
        </typeparam>
        <param name="continuationFunction">
          <span data-ttu-id="371e8-393">Fonction à exécuter quand <see cref="T:System.Threading.Tasks.Task" /> se termine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-393">A function to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="371e8-394">Quand elle est exécutée, la tâche achevée est passée au délégué en tant qu'argument.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-394">When run, the delegate will be passed the completed task as an argument.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="371e8-395">
            <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> qui sera assigné à la nouvelle tâche de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-395">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new continuation task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="371e8-396">Crée une continuation qui s'exécute de façon asynchrone quand le <see cref="T:System.Threading.Tasks.Task" /> cible se termine et retourne une valeur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-396">Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes and returns a value.</span>
          </span>
          <span data-ttu-id="371e8-397">La continuation reçoit un jeton d'annulation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-397">The continuation receives a cancellation token.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="371e8-398">Nouvelle <see cref="T:System.Threading.Tasks.Task`1" /> de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-398">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="371e8-399">Retourné <xref:System.Threading.Tasks.Task%601> n’est plus planifié pour l’exécution jusqu'à ce que la tâche en cours est terminée, si elle se termine en raison de fonctionne correctement jusqu'à son achèvement, provoquer une erreur en raison d’une exception non gérée ou sortir tôt en raison de l’annulation.</span><span class="sxs-lookup"><span data-stu-id="371e8-399">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="371e8-400">
            <see cref="T:System.Threading.Tasks.Task" /> a été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-400">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          </span>
          <span data-ttu-id="371e8-401">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-401">-or-</span>
          </span>
          <span data-ttu-id="371e8-402">Le <see cref="T:System.Threading.CancellationTokenSource" /> qui a créé le jeton a déjà été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-402">The <see cref="T:System.Threading.CancellationTokenSource" /> that created the token has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="371e8-403">L’argument <paramref name="continuationFunction" /> a la valeur null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-403">The <paramref name="continuationFunction" /> argument is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWith&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task,TResult&gt; continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWith&lt;TResult&gt;(class System.Func`2&lt;class System.Threading.Tasks.Task, !!TResult&gt; continuationFunction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith(Of TResult) (continuationFunction As Func(Of Task, TResult), continuationOptions As TaskContinuationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task ^, TResult&gt; ^ continuationFunction, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,TResult&gt;" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="371e8-404">Type du résultat produit par la continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-404">The type of the result produced by the continuation.</span>
          </span>
        </typeparam>
        <param name="continuationFunction">
          <span data-ttu-id="371e8-405">Fonction à exécuter selon la condition spécifiée dans <c>continuationOptions</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-405">A function to run according to the condition specified in <c>continuationOptions</c>.</span>
          </span>
          <span data-ttu-id="371e8-406">Quand elle est exécutée, la tâche achevée est passée au délégué en tant qu'argument.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-406">When run, the delegate will be passed the completed task as an argument.</span>
          </span>
        </param>
        <param name="continuationOptions">
          <span data-ttu-id="371e8-407">Options applicables quand la continuation est planifiée et qui en régissent le comportement.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-407">Options for when the continuation is scheduled and how it behaves.</span>
          </span>
          <span data-ttu-id="371e8-408">Cela inclut des critères, tels que <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, ainsi que des options d'exécution, telles que <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-408">This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="371e8-409">Crée une continuation qui s'exécute en fonction des options de continuation spécifiées et retourne une valeur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-409">Creates a continuation that executes according to the specified continuation options and returns a value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="371e8-410">Nouvelle <see cref="T:System.Threading.Tasks.Task`1" /> de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-410">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="371e8-411">Retourné <xref:System.Threading.Tasks.Task%601> ne sera pas planifié pour l’exécution jusqu'à ce que la tâche en cours est terminée.</span><span class="sxs-lookup"><span data-stu-id="371e8-411">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed.</span></span> <span data-ttu-id="371e8-412">Si les critères de continuation spécifiés par le biais du `continuationOptions` paramètre ne sont pas remplies, la tâche de continuation sera annulée au lieu d’être planifiée.</span><span class="sxs-lookup"><span data-stu-id="371e8-412">If the continuation criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="371e8-413">
            <see cref="T:System.Threading.Tasks.Task" /> a été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-413">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="371e8-414">L’argument <paramref name="continuationFunction" /> a la valeur null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-414">The <paramref name="continuationFunction" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="371e8-415">L'argument <paramref name="continuationOptions" /> spécifie une valeur non valide pour <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-415">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWith&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task,TResult&gt; continuationFunction, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWith&lt;TResult&gt;(class System.Func`2&lt;class System.Threading.Tasks.Task, !!TResult&gt; continuationFunction, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith(Of TResult) (continuationFunction As Func(Of Task, TResult), scheduler As TaskScheduler) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task ^, TResult&gt; ^ continuationFunction, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,TResult&gt;" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="371e8-416">Type du résultat produit par la continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-416">The type of the result produced by the continuation.</span>
          </span>
        </typeparam>
        <param name="continuationFunction">
          <span data-ttu-id="371e8-417">Fonction à exécuter quand <see cref="T:System.Threading.Tasks.Task" /> se termine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-417">A function to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="371e8-418">Quand elle est exécutée, la tâche achevée est passée au délégué en tant qu'argument.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-418">When run, the delegate will be passed the completed task as an argument.</span>
          </span>
        </param>
        <param name="scheduler">
          <span data-ttu-id="371e8-419">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> à associer à la tâche de continuation et à utiliser pour son exécution.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-419">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its execution.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="371e8-420">Crée une continuation qui s'exécute de façon asynchrone quand le <see cref="T:System.Threading.Tasks.Task" /> cible se termine et retourne une valeur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-420">Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes and returns a value.</span>
          </span>
          <span data-ttu-id="371e8-421">La continuation utilise un planificateur spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-421">The continuation uses a specified scheduler.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="371e8-422">Nouvelle <see cref="T:System.Threading.Tasks.Task`1" /> de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-422">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="371e8-423">Retourné <xref:System.Threading.Tasks.Task%601> n’est plus planifié pour l’exécution jusqu'à ce que la tâche en cours est terminée, si elle se termine en raison de fonctionne correctement jusqu'à son achèvement, provoquer une erreur en raison d’une exception non gérée ou sortir tôt en raison de l’annulation.</span><span class="sxs-lookup"><span data-stu-id="371e8-423">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="371e8-424">
            <see cref="T:System.Threading.Tasks.Task" /> a été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-424">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="371e8-425">L’argument <paramref name="continuationFunction" /> a la valeur null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-425">The <paramref name="continuationFunction" /> argument is null.</span>
          </span>
          <span data-ttu-id="371e8-426">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-426">-or-</span>
          </span>
          <span data-ttu-id="371e8-427">L’argument <paramref name="scheduler" /> a la valeur null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-427">The <paramref name="scheduler" /> argument is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWith&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task,object,TResult&gt; continuationFunction, object state, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWith&lt;TResult&gt;(class System.Func`3&lt;class System.Threading.Tasks.Task, object, !!TResult&gt; continuationFunction, object state, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task ^, System::Object ^, TResult&gt; ^ continuationFunction, System::Object ^ state, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,System.Object,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="371e8-428">Type du résultat produit par la continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-428">The type of the result produced by the continuation.</span>
          </span>
        </typeparam>
        <param name="continuationFunction">
          <span data-ttu-id="371e8-429">Fonction à exécuter quand <see cref="T:System.Threading.Tasks.Task" /> se termine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-429">A function to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="371e8-430">Lors de l'exécution, la tâche achevée et l'objet d'état fourni par l'appelant sont passés au délégué sous la forme d'arguments.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-430">When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="371e8-431">Objet représentant les données que la fonction de continuation doit utiliser.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-431">An object representing data to be used by the continuation function.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="371e8-432">
            <see cref="T:System.Threading.CancellationToken" /> qui sera assigné à la nouvelle tâche de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-432">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="371e8-433">Crée une continuation qui s'exécute de façon asynchrone quand le <see cref="T:System.Threading.Tasks.Task" /> cible se termine et retourne une valeur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-433">Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes and returns a value.</span>
          </span>
          <span data-ttu-id="371e8-434">La continuation reçoit des informations d'état fournies par l'appelant et un jeton d'annulation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-434">The continuation receives caller-supplied state information and a cancellation token.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="371e8-435">Nouvelle <see cref="T:System.Threading.Tasks.Task`1" /> de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-435">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="371e8-436">Retourné <xref:System.Threading.Tasks.Task%601> n’est plus planifié pour l’exécution jusqu'à ce que la tâche en cours est terminée, si elle se termine en raison de fonctionne correctement jusqu'à son achèvement, provoquer une erreur en raison d’une exception non gérée ou sortir tôt en raison de l’annulation.</span><span class="sxs-lookup"><span data-stu-id="371e8-436">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="371e8-437">L'argument <paramref name="continuationFunction" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-437">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="371e8-438">Le <see cref="T:System.Threading.CancellationToken" /> fourni a déjà été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-438">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWith&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task,object,TResult&gt; continuationFunction, object state, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWith&lt;TResult&gt;(class System.Func`3&lt;class System.Threading.Tasks.Task, object, !!TResult&gt; continuationFunction, object state, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith(Of TResult) (continuationFunction As Func(Of Task, Object, TResult), state As Object, continuationOptions As TaskContinuationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task ^, System::Object ^, TResult&gt; ^ continuationFunction, System::Object ^ state, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,System.Object,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="371e8-439">Type du résultat produit par la continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-439">The type of the result produced by the continuation.</span>
          </span>
        </typeparam>
        <param name="continuationFunction">
          <span data-ttu-id="371e8-440">Fonction à exécuter quand <see cref="T:System.Threading.Tasks.Task" /> se termine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-440">A function to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="371e8-441">Lors de l'exécution, la tâche achevée et l'objet d'état fourni par l'appelant sont passés au délégué sous la forme d'arguments.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-441">When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="371e8-442">Objet représentant les données que la fonction de continuation doit utiliser.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-442">An object representing data to be used by the continuation function.</span>
          </span>
        </param>
        <param name="continuationOptions">
          <span data-ttu-id="371e8-443">Options applicables quand la continuation est planifiée et qui en régissent le comportement.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-443">Options for when the continuation is scheduled and how it behaves.</span>
          </span>
          <span data-ttu-id="371e8-444">Cela inclut des critères, tels que <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, ainsi que des options d'exécution, telles que <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-444">This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="371e8-445">Crée une continuation qui s'exécute en fonction des options de continuation de tâche spécifiées quand le <see cref="T:System.Threading.Tasks.Task" /> cible se termine et retourne une valeur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-445">Creates a continuation that executes based on the specified task continuation options when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="371e8-446">La continuation reçoit des informations d'état fournies par l'appelant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-446">The continuation receives caller-supplied state information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="371e8-447">Nouvelle <see cref="T:System.Threading.Tasks.Task`1" /> de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-447">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="371e8-448">Retourné <xref:System.Threading.Tasks.Task%601> ne sera pas planifié pour l’exécution jusqu'à ce que la tâche en cours est terminée.</span><span class="sxs-lookup"><span data-stu-id="371e8-448">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed.</span></span> <span data-ttu-id="371e8-449">Si les critères de continuation spécifiés par le biais du `continuationOptions` paramètre ne sont pas remplies, la tâche de continuation sera annulée au lieu d’être planifiée.</span><span class="sxs-lookup"><span data-stu-id="371e8-449">If the continuation criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="371e8-450">L'argument <paramref name="continuationFunction" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-450">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="371e8-451">L'argument <paramref name="continuationOptions" /> spécifie une valeur non valide pour <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-451">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWith&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task,object,TResult&gt; continuationFunction, object state, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWith&lt;TResult&gt;(class System.Func`3&lt;class System.Threading.Tasks.Task, object, !!TResult&gt; continuationFunction, object state, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith(Of TResult) (continuationFunction As Func(Of Task, Object, TResult), state As Object, scheduler As TaskScheduler) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task ^, System::Object ^, TResult&gt; ^ continuationFunction, System::Object ^ state, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,System.Object,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="371e8-452">Type du résultat produit par la continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-452">The type of the result produced by the continuation.</span>
          </span>
        </typeparam>
        <param name="continuationFunction">
          <span data-ttu-id="371e8-453">Fonction à exécuter quand <see cref="T:System.Threading.Tasks.Task" /> se termine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-453">A function to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="371e8-454">Lors de l'exécution, la tâche achevée et l'objet d'état fourni par l'appelant sont passés au délégué sous la forme d'arguments.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-454">When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="371e8-455">Objet représentant les données que la fonction de continuation doit utiliser.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-455">An object representing data to be used by the continuation function.</span>
          </span>
        </param>
        <param name="scheduler">
          <span data-ttu-id="371e8-456">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> à associer à la tâche de continuation et à utiliser pour son exécution.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-456">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its execution.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="371e8-457">Crée une continuation qui s'exécute de façon asynchrone quand la <see cref="T:System.Threading.Tasks.Task" /> cible se termine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-457">Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="371e8-458">La continuation reçoit des informations d'état fournies par l'appelant et utilise un planificateur spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-458">The continuation receives caller-supplied state information and uses a specified scheduler.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="371e8-459">Nouvelle <see cref="T:System.Threading.Tasks.Task`1" /> de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-459">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="371e8-460">Retourné <xref:System.Threading.Tasks.Task%601> n’est plus planifié pour l’exécution jusqu'à ce que la tâche en cours est terminée, si elle se termine en raison de fonctionne correctement jusqu'à son achèvement, provoquer une erreur en raison d’une exception non gérée ou sortir tôt en raison de l’annulation.</span><span class="sxs-lookup"><span data-stu-id="371e8-460">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="371e8-461">L'argument <paramref name="scheduler" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-461">The <paramref name="scheduler" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWith&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task,TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWith&lt;TResult&gt;(class System.Func`2&lt;class System.Threading.Tasks.Task, !!TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="371e8-462">Type du résultat produit par la continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-462">The type of the result produced by the continuation.</span>
          </span>
        </typeparam>
        <param name="continuationFunction">
          <span data-ttu-id="371e8-463">Fonction à exécuter selon le <c>continuationOptions</c>spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-463">A function to run according to the specified <c>continuationOptions.</c></span>
          </span>
          <span data-ttu-id="371e8-464">Quand elle est exécutée, la tâche achevée est passée au délégué en tant qu'argument.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-464">When run, the delegate will be passed the completed task as an argument.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="371e8-465">
            <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> qui sera assigné à la nouvelle tâche de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-465">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new continuation task.</span>
          </span>
        </param>
        <param name="continuationOptions">
          <span data-ttu-id="371e8-466">Options applicables quand la continuation est planifiée et qui en régissent le comportement.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-466">Options for when the continuation is scheduled and how it behaves.</span>
          </span>
          <span data-ttu-id="371e8-467">Cela inclut des critères, tels que <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, ainsi que des options d'exécution, telles que <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-467">This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          </span>
        </param>
        <param name="scheduler">
          <span data-ttu-id="371e8-468">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> à associer à la tâche de continuation et à utiliser pour son exécution.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-468">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its execution.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="371e8-469">Crée une continuation qui s'exécute en fonction des options de continuation spécifiées et retourne une valeur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-469">Creates a continuation that executes according to the specified continuation options and returns a value.</span>
          </span>
          <span data-ttu-id="371e8-470">La continuation reçoit un jeton d'annulation et utilise un planificateur spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-470">The continuation is passed a cancellation token and uses a specified scheduler.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="371e8-471">Nouvelle <see cref="T:System.Threading.Tasks.Task`1" /> de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-471">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="371e8-472">Retourné <xref:System.Threading.Tasks.Task%601> ne sera pas planifié pour l’exécution jusqu'à ce que la tâche en cours est terminée.</span><span class="sxs-lookup"><span data-stu-id="371e8-472">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed.</span></span> <span data-ttu-id="371e8-473">Si les critères spécifiés par le biais du `continuationOptions` paramètre ne sont pas remplies, la tâche de continuation sera annulée au lieu d’être planifiée.</span><span class="sxs-lookup"><span data-stu-id="371e8-473">If the criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="371e8-474">L’exemple suivant montre comment utiliser la méthode ContinueWith avec les options de continuation :</span><span class="sxs-lookup"><span data-stu-id="371e8-474">The following example shows how to use the ContinueWith method with continuation options:</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task#04](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/continuationoptions.cs#04)]
 [!code-vb[System.Threading.Tasks.Task#04](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/continuationoptions.vb#04)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="371e8-475">
            <see cref="T:System.Threading.Tasks.Task" /> a été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-475">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          </span>
          <span data-ttu-id="371e8-476">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-476">-or-</span>
          </span>
          <span data-ttu-id="371e8-477">Le <see cref="T:System.Threading.CancellationTokenSource" /> qui a créé le jeton a déjà été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-477">The <see cref="T:System.Threading.CancellationTokenSource" /> that created the token has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="371e8-478">L’argument <paramref name="continuationFunction" /> a la valeur null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-478">The <paramref name="continuationFunction" /> argument is null.</span>
          </span>
          <span data-ttu-id="371e8-479">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-479">-or-</span>
          </span>
          <span data-ttu-id="371e8-480">L’argument <paramref name="scheduler" /> a la valeur null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-480">The <paramref name="scheduler" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="371e8-481">L'argument <paramref name="continuationOptions" /> spécifie une valeur non valide pour <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-481">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWith&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task,object,TResult&gt; continuationFunction, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWith&lt;TResult&gt;(class System.Func`3&lt;class System.Threading.Tasks.Task, object, !!TResult&gt; continuationFunction, object state, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task ^, System::Object ^, TResult&gt; ^ continuationFunction, System::Object ^ state, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,System.Object,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="371e8-482">Type du résultat produit par la continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-482">The type of the result produced by the continuation.</span>
          </span>
        </typeparam>
        <param name="continuationFunction">
          <span data-ttu-id="371e8-483">Fonction à exécuter quand <see cref="T:System.Threading.Tasks.Task" /> se termine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-483">A function to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span>
          </span>
          <span data-ttu-id="371e8-484">Lors de l'exécution, la tâche achevée et l'objet d'état fourni par l'appelant sont passés au délégué sous la forme d'arguments.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-484">When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="371e8-485">Objet représentant les données que la fonction de continuation doit utiliser.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-485">An object representing data to be used by the continuation function.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="371e8-486">
            <see cref="T:System.Threading.CancellationToken" /> qui sera assigné à la nouvelle tâche de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-486">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</span>
          </span>
        </param>
        <param name="continuationOptions">
          <span data-ttu-id="371e8-487">Options applicables quand la continuation est planifiée et qui en régissent le comportement.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-487">Options for when the continuation is scheduled and how it behaves.</span>
          </span>
          <span data-ttu-id="371e8-488">Cela inclut des critères, tels que <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, ainsi que des options d'exécution, telles que <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-488">This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span>
          </span>
        </param>
        <param name="scheduler">
          <span data-ttu-id="371e8-489">
            <see cref="T:System.Threading.Tasks.TaskScheduler" /> à associer à la tâche de continuation et à utiliser pour son exécution.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-489">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its  execution.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="371e8-490">Crée une continuation qui s'exécute en fonction des options de continuation de tâche spécifiées quand le <see cref="T:System.Threading.Tasks.Task" /> cible se termine et retourne une valeur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-490">Creates a continuation that executes based on the specified task continuation options when the target <see cref="T:System.Threading.Tasks.Task" /> completes and returns a value.</span>
          </span>
          <span data-ttu-id="371e8-491">La continuation reçoit des informations d'état fournies par l'appelant et un jeton d'annulation et elle utilise un planificateur spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-491">The continuation receives caller-supplied state information and a cancellation token and uses the specified scheduler.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="371e8-492">Nouvelle <see cref="T:System.Threading.Tasks.Task`1" /> de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-492">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="371e8-493">Retourné <xref:System.Threading.Tasks.Task%601> ne sera pas planifié pour l’exécution jusqu'à ce que la tâche en cours est terminée.</span><span class="sxs-lookup"><span data-stu-id="371e8-493">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has  completed.</span></span> <span data-ttu-id="371e8-494">Si les critères spécifiés par le biais du `continuationOptions` paramètre ne sont pas remplies, la tâche de continuation sera annulée au lieu d’être planifiée.</span><span class="sxs-lookup"><span data-stu-id="371e8-494">If the criteria specified through the `continuationOptions` parameter  are not met, the continuation task will be canceled instead of scheduled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="371e8-495">L'argument <paramref name="scheduler" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-495">The <paramref name="scheduler" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="371e8-496">L'argument <paramref name="continuationOptions" /> spécifie une valeur non valide pour <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-496">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="371e8-497">Le <see cref="T:System.Threading.CancellationToken" /> fourni a déjà été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-497">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CreationOptions">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.TaskCreationOptions CreationOptions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Threading.Tasks.TaskCreationOptions CreationOptions" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.CreationOptions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CreationOptions As TaskCreationOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::Tasks::TaskCreationOptions CreationOptions { System::Threading::Tasks::TaskCreationOptions get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.TaskCreationOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="371e8-498">Obtient les <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> utilisées pour créer cette tâche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-498">Gets the <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> used to create this task.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="371e8-499">
            <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> utilisées pour créer cette tâche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-499">The <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> used to create this task.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentId">
      <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; CurrentId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Nullable`1&lt;int32&gt; CurrentId" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.CurrentId" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentId As Nullable(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property Nullable&lt;int&gt; CurrentId { Nullable&lt;int&gt; get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="371e8-500">Retourne l'ID de la <see cref="T:System.Threading.Tasks.Task" /> en cours d'exécution.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-500">Returns the ID of the currently executing <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="371e8-501">Entier assigné par le système à la tâche en cours d’exécution.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-501">An integer that was assigned by the system to the currently-executing task.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="371e8-502"><xref:System.Threading.Tasks.Task.CurrentId%2A> est un `static` (`Shared` en Visual Basic) propriété qui est utilisée pour obtenir l’identificateur de la tâche en cours d’exécution à partir du code qui s’exécute la tâche.</span><span class="sxs-lookup"><span data-stu-id="371e8-502"><xref:System.Threading.Tasks.Task.CurrentId%2A> is a `static` (`Shared` in Visual Basic) property that is used to get the identifier of the currently executing task from the code that the task is executing.</span></span> <span data-ttu-id="371e8-503">Il diffère de la <xref:System.Threading.Tasks.Task.Id%2A> propriété, qui retourne l’identificateur d’un particulier <xref:System.Threading.Tasks.Task> instance.</span><span class="sxs-lookup"><span data-stu-id="371e8-503">It differs from the <xref:System.Threading.Tasks.Task.Id%2A> property, which returns the identifier of a particular <xref:System.Threading.Tasks.Task> instance.</span></span> <span data-ttu-id="371e8-504">Si vous tentez de récupérer le <xref:System.Threading.Tasks.Task.CurrentId%2A> comprise en dehors du code qui s’exécute une tâche, la propriété retourne `null`.</span><span class="sxs-lookup"><span data-stu-id="371e8-504">If you attempt to retrieve the <xref:System.Threading.Tasks.Task.CurrentId%2A> value from outside the code that a task is executing, the property returns `null`.</span></span>  
  
 <span data-ttu-id="371e8-505">Notez que bien que les collisions sont très rares, les identificateurs de tâche ne sont pas garantis être unique.</span><span class="sxs-lookup"><span data-stu-id="371e8-505">Note that although collisions are very rare, task identifiers are not guaranteed to be unique.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.Task.Id" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Delay">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="371e8-506">Crée une tâche qui ne se termine qu’après un certain délai.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-506">Creates a task that will complete after a time delay.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Delay">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task Delay (int millisecondsDelay);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task Delay(int32 millisecondsDelay) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Delay(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Delay (millisecondsDelay As Integer) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ Delay(int millisecondsDelay);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsDelay" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsDelay">
          <span data-ttu-id="371e8-507">Nombre de millisecondes à attendre avant la fin de la tâche retournée ou -1 pour attendre indéfiniment.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-507">The number of milliseconds to wait before completing the returned task, or -1 to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="371e8-508">Crée une tâche qui se termine après un certain délai.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-508">Creates a task that completes after a time delay.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="371e8-509">Tâche qui représente le délai.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-509">A task that represents the time delay.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="371e8-510">Le <xref:System.Threading.Tasks.Task.Delay%2A> méthode est généralement utilisée pour retarder le fonctionnement de tous les ou une partie d’une tâche pour un intervalle de temps spécifié.</span><span class="sxs-lookup"><span data-stu-id="371e8-510">The <xref:System.Threading.Tasks.Task.Delay%2A> method is typically used to delay the operation of all or part of a task for a specified time interval.</span></span> <span data-ttu-id="371e8-511">En règle générale, le délai est introduit :</span><span class="sxs-lookup"><span data-stu-id="371e8-511">Most commonly, the time delay is introduced:</span></span>  
  
-   <span data-ttu-id="371e8-512">Au début de la tâche, comme l’exemple suivant montre.</span><span class="sxs-lookup"><span data-stu-id="371e8-512">At the beginning of the task, as the following example shows.</span></span>  
  
     [!code-csharp[System.Threading.Tasks.Task.Delay#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.delay/cs/delay5.cs#5)]
     [!code-vb[System.Threading.Tasks.Task.Delay#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.delay/vb/delay5.vb#5)]  
  
-   <span data-ttu-id="371e8-513">Alors que la tâche est en cours d’exécution.</span><span class="sxs-lookup"><span data-stu-id="371e8-513">Sometime while the task is executing.</span></span> <span data-ttu-id="371e8-514">Dans ce cas, l’appel à la <xref:System.Threading.Tasks.Task.Delay%2A> méthode exécute une tâche enfant au sein d’une tâche, comme le montre l’exemple suivant.</span><span class="sxs-lookup"><span data-stu-id="371e8-514">In this case, the call to the <xref:System.Threading.Tasks.Task.Delay%2A> method executes as a child task within a task, as the following example shows.</span></span> <span data-ttu-id="371e8-515">Notez que depuis la tâche qui appelle le <xref:System.Threading.Tasks.Task.Delay%2A> méthode s’exécute de façon asynchrone, la tâche parente doit attendre qu’elle se termine à l’aide de la `await` (mot clé).</span><span class="sxs-lookup"><span data-stu-id="371e8-515">Note that since the task that calls the <xref:System.Threading.Tasks.Task.Delay%2A> method executes asynchronously, the parent task must wait for it to complete by using the `await` keyword.</span></span>  
  
     [!code-csharp[System.Threading.Tasks.Task.Delay#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.delay/cs/delay5.cs#7)]
     [!code-vb[System.Threading.Tasks.Task.Delay#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.delay/vb/delay5.vb#7)]  
  
 <span data-ttu-id="371e8-516">Après le délai spécifié, la tâche est terminée dans le <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> état.</span><span class="sxs-lookup"><span data-stu-id="371e8-516">After the specified time delay, the task is completed in the <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state.</span></span>  
  
 <span data-ttu-id="371e8-517">Cette méthode dépend de l’horloge système.</span><span class="sxs-lookup"><span data-stu-id="371e8-517">This method depends on the system clock.</span></span> <span data-ttu-id="371e8-518">Cela signifie que le délai est approximativement égale à la résolution de l’horloge système si le `millisecondsDelay` argument est inférieure à la résolution de l’horloge système, qui est d’environ 15 millisecondes sur les systèmes Windows.</span><span class="sxs-lookup"><span data-stu-id="371e8-518">This means that the time delay will approximately equal the resolution of the system clock if the `millisecondsDelay` argument is less than the resolution of the system clock, which is approximately 15 milliseconds on Windows systems.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="371e8-519">L’exemple suivant montre une utilisation simple de la <xref:System.Threading.Tasks.Task.Delay%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="371e8-519">The following example shows a simple use of the <xref:System.Threading.Tasks.Task.Delay%2A> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Delay#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.delay/cs/delay1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.Delay#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.delay/vb/delay1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="371e8-520">L’argument <paramref name="millisecondsDelay" /> est inférieur à -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-520">The <paramref name="millisecondsDelay" /> argument is less than -1.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Delay">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task Delay (TimeSpan delay);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task Delay(valuetype System.TimeSpan delay) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Delay(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Delay (delay As TimeSpan) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ Delay(TimeSpan delay);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delay" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="delay">
          <span data-ttu-id="371e8-521">Intervalle de temps à attendre avant la fin de la tâche retournée ou <see langword="TimeSpan.FromMilliseconds(-1)" /> pour attendre indéfiniment.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-521">The time span to wait before completing the returned task, or <see langword="TimeSpan.FromMilliseconds(-1)" /> to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="371e8-522">Crée une tâche qui se termine après un intervalle de temps spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-522">Creates a task that completes after a specified time interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="371e8-523">Tâche qui représente le délai.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-523">A task that represents the time delay.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="371e8-524">Après le délai spécifié, la tâche est terminée dans <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> état.</span><span class="sxs-lookup"><span data-stu-id="371e8-524">After the specified time delay, the task is completed in <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state.</span></span>  
  
 <span data-ttu-id="371e8-525">Pour les scénarios d’utilisation et des exemples supplémentaires, consultez la documentation pour le <xref:System.Threading.Tasks.Task.Delay%28System.Int32%29> de surcharge.</span><span class="sxs-lookup"><span data-stu-id="371e8-525">For usage scenarios and additional examples, see the documentation for the <xref:System.Threading.Tasks.Task.Delay%28System.Int32%29> overload.</span></span>  
  
 <span data-ttu-id="371e8-526">Cette méthode dépend de l’horloge système.</span><span class="sxs-lookup"><span data-stu-id="371e8-526">This method depends on the system clock.</span></span> <span data-ttu-id="371e8-527">Cela signifie que le délai est approximativement égale à la résolution de l’horloge système si le `delay` argument est inférieure à la résolution de l’horloge système, qui est d’environ 15 millisecondes sur les systèmes Windows.</span><span class="sxs-lookup"><span data-stu-id="371e8-527">This means that the time delay will approximately equal the resolution of the system clock if the `delay` argument is less than the resolution of the system clock, which is approximately 15 milliseconds on Windows systems.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="371e8-528">L’exemple suivant montre une utilisation simple de la <xref:System.Threading.Tasks.Task.Delay%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="371e8-528">The following example shows a simple use of the <xref:System.Threading.Tasks.Task.Delay%2A> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Delay#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.delay/cs/delay2.cs#2)]
 [!code-vb[System.Threading.Tasks.Task.Delay#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.delay/vb/delay2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="371e8-529">
            <paramref name="delay" /> représente un intervalle de temps négatif autre que <see langword="TimeSpan.FromMillseconds(-1)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-529">
              <paramref name="delay" /> represents a negative time interval other than <see langword="TimeSpan.FromMillseconds(-1)" />.</span>
          </span>
          <span data-ttu-id="371e8-530">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-530">-or-</span>
          </span>
          <span data-ttu-id="371e8-531">La propriété <see cref="P:System.TimeSpan.TotalMilliseconds" /> de l’argument <paramref name="delay" /> est supérieure à <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-531">The <paramref name="delay" /> argument's <see cref="P:System.TimeSpan.TotalMilliseconds" /> property is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Delay">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task Delay (int millisecondsDelay, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task Delay(int32 millisecondsDelay, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Delay(System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ Delay(int millisecondsDelay, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsDelay" Type="System.Int32" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="millisecondsDelay">
          <span data-ttu-id="371e8-532">Nombre de millisecondes à attendre avant la fin de la tâche retournée ou -1 pour attendre indéfiniment.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-532">The number of milliseconds to wait before completing the returned task, or -1 to wait indefinitely.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="371e8-533">Jeton d’annulation qui sera vérifié avant de terminer la tâche retournée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-533">The cancellation token that will be checked prior to completing the returned task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="371e8-534">Crée une tâche pouvant être annulée qui se termine après un certain délai.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-534">Creates a cancellable task that completes after a time delay.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="371e8-535">Tâche qui représente le délai.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-535">A task that represents the time delay.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="371e8-536">Si le jeton d’annulation est signalé avant le délai spécifié, un <xref:System.Threading.Tasks.TaskCanceledException> résultats de l’exception et que la tâche est terminée dans le <xref:System.Threading.Tasks.TaskStatus.Canceled> état.</span><span class="sxs-lookup"><span data-stu-id="371e8-536">If the cancellation token is signaled before the specified time delay, a <xref:System.Threading.Tasks.TaskCanceledException> exception results, and the task is completed in the <xref:System.Threading.Tasks.TaskStatus.Canceled> state.</span></span>  <span data-ttu-id="371e8-537">Sinon, la tâche est terminée dans le <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> état une fois que le délai spécifié écoulé.</span><span class="sxs-lookup"><span data-stu-id="371e8-537">Otherwise, the task is completed in the <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state once the specified time delay has elapsed.</span></span>  
  
 <span data-ttu-id="371e8-538">Pour les scénarios d’utilisation et des exemples supplémentaires, consultez la documentation pour le <xref:System.Threading.Tasks.Task.Delay%28System.Int32%29> de surcharge.</span><span class="sxs-lookup"><span data-stu-id="371e8-538">For usage scenarios and additional examples, see the documentation for the <xref:System.Threading.Tasks.Task.Delay%28System.Int32%29> overload.</span></span>  
  
 <span data-ttu-id="371e8-539">Cette méthode dépend de l’horloge système.</span><span class="sxs-lookup"><span data-stu-id="371e8-539">This method depends on the system clock.</span></span> <span data-ttu-id="371e8-540">Cela signifie que le délai est approximativement égale à la résolution de l’horloge système si le `millisecondsDelay` argument est inférieure à la résolution de l’horloge système, qui est d’environ 15 millisecondes sur les systèmes Windows.</span><span class="sxs-lookup"><span data-stu-id="371e8-540">This means that the time delay will approximately equal the resolution of the system clock if the `millisecondsDelay` argument is less than the resolution of the system clock, which is approximately 15 milliseconds on Windows systems.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="371e8-541">L’exemple suivant démarre une tâche qui inclut un appel à la <xref:System.Threading.Tasks.Task.Delay%28System.Int32%2CSystem.Threading.CancellationToken%29> méthode avec un délai d’une seconde.</span><span class="sxs-lookup"><span data-stu-id="371e8-541">The following example launches a task that includes a call to the <xref:System.Threading.Tasks.Task.Delay%28System.Int32%2CSystem.Threading.CancellationToken%29> method with a one second delay.</span></span> <span data-ttu-id="371e8-542">Avant que l’intervalle de délai s’écoule, le jeton est annulé.</span><span class="sxs-lookup"><span data-stu-id="371e8-542">Before the delay interval elapses, the token is cancelled.</span></span> <span data-ttu-id="371e8-543">La sortie de l’exemple montre que, par conséquent, un <xref:System.Threading.Tasks.TaskCanceledException> est levée et les tâches <xref:System.Threading.Tasks.Task.Status%2A> est définie sur <xref:System.Threading.Tasks.TaskStatus.Canceled>.</span><span class="sxs-lookup"><span data-stu-id="371e8-543">The output from the example shows that, as a result, a <xref:System.Threading.Tasks.TaskCanceledException> is thrown, and the tasks' <xref:System.Threading.Tasks.Task.Status%2A> property is set to <xref:System.Threading.Tasks.TaskStatus.Canceled>.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Delay#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.delay/cs/delay3.cs#3)]
 [!code-vb[System.Threading.Tasks.Task.Delay#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.delay/vb/delay3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="371e8-544">L’argument <paramref name="millisecondsDelay" /> est inférieur à -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-544">The <paramref name="millisecondsDelay" /> argument is less than -1.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException">
          <span data-ttu-id="371e8-545">La tâche a été annulée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-545">The task has been canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="371e8-546">Le <paramref name="cancellationToken" /> fourni a déjà été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-546">The provided <paramref name="cancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Delay">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task Delay (TimeSpan delay, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task Delay(valuetype System.TimeSpan delay, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Delay(System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ Delay(TimeSpan delay, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delay" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="delay">
          <span data-ttu-id="371e8-547">Intervalle de temps à attendre avant la fin de la tâche retournée ou <see langword="TimeSpan.FromMilliseconds(-1)" /> pour attendre indéfiniment.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-547">The time span to wait before completing the returned task, or <see langword="TimeSpan.FromMilliseconds(-1)" /> to wait indefinitely.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="371e8-548">Jeton d’annulation qui sera vérifié avant de terminer la tâche retournée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-548">The cancellation token that will be checked prior to completing the returned task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="371e8-549">Crée une tâche pouvant être annulée qui se termine après un intervalle de temps spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-549">Creates a cancellable task that completes after a specified time interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="371e8-550">Tâche qui représente le délai.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-550">A task that represents the time delay.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="371e8-551">Si le jeton d’annulation est signalé avant le délai spécifié, un <xref:System.Threading.Tasks.TaskCanceledException> résultats de l’exception et que la tâche est terminée dans le <xref:System.Threading.Tasks.TaskStatus.Canceled> état.</span><span class="sxs-lookup"><span data-stu-id="371e8-551">If the cancellation token is signaled before the specified time delay, a <xref:System.Threading.Tasks.TaskCanceledException> exception results, and the task is completed in the <xref:System.Threading.Tasks.TaskStatus.Canceled> state.</span></span>  <span data-ttu-id="371e8-552">Sinon, la tâche est terminée dans le <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> état une fois que le délai spécifié écoulé.</span><span class="sxs-lookup"><span data-stu-id="371e8-552">Otherwise, the task is completed in the <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state once the specified time delay has elapsed.</span></span>  
  
 <span data-ttu-id="371e8-553">Pour les scénarios d’utilisation et des exemples supplémentaires, consultez la documentation pour le <xref:System.Threading.Tasks.Task.Delay%28System.Int32%29> de surcharge.</span><span class="sxs-lookup"><span data-stu-id="371e8-553">For usage scenarios and additional examples, see the documentation for the <xref:System.Threading.Tasks.Task.Delay%28System.Int32%29> overload.</span></span>  
  
 <span data-ttu-id="371e8-554">Cette méthode dépend de l’horloge système.</span><span class="sxs-lookup"><span data-stu-id="371e8-554">This method depends on the system clock.</span></span> <span data-ttu-id="371e8-555">Cela signifie que le délai est approximativement égale à la résolution de l’horloge système si le `delay` argument est inférieure à la résolution de l’horloge système, qui est d’environ 15 millisecondes sur les systèmes Windows.</span><span class="sxs-lookup"><span data-stu-id="371e8-555">This means that the time delay will approximately equal the resolution of the system clock if the `delay` argument is less than the resolution of the system clock, which is approximately 15 milliseconds on Windows systems.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="371e8-556">L’exemple suivant démarre une tâche qui inclut un appel à la <xref:System.Threading.Tasks.Task.Delay%28System.TimeSpan%2CSystem.Threading.CancellationToken%29> méthode avec un délai de deuxième-et-a-moitié.</span><span class="sxs-lookup"><span data-stu-id="371e8-556">The following example launches a task that includes a call to the <xref:System.Threading.Tasks.Task.Delay%28System.TimeSpan%2CSystem.Threading.CancellationToken%29> method with a one-and-a-half second delay.</span></span> <span data-ttu-id="371e8-557">Avant que l’intervalle de délai s’écoule, le jeton est annulé.</span><span class="sxs-lookup"><span data-stu-id="371e8-557">Before the delay interval elapses, the token is cancelled.</span></span> <span data-ttu-id="371e8-558">La sortie de l’exemple montre que, par conséquent, un <xref:System.Threading.Tasks.TaskCanceledException> est levée et les tâches <xref:System.Threading.Tasks.Task.Status%2A> est définie sur <xref:System.Threading.Tasks.TaskStatus.Canceled>.</span><span class="sxs-lookup"><span data-stu-id="371e8-558">The output from the example shows that, as a result, a <xref:System.Threading.Tasks.TaskCanceledException> is thrown, and the tasks' <xref:System.Threading.Tasks.Task.Status%2A> property is set to <xref:System.Threading.Tasks.TaskStatus.Canceled>.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Delay#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.delay/cs/delay4.cs#4)]
 [!code-vb[System.Threading.Tasks.Task.Delay#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.delay/vb/delay4.vb#4)]  
  
 <span data-ttu-id="371e8-559">Notez que cet exemple contient une condition d’engorgement potentiels : il dépend de la tâche exécute de façon asynchrone le délai d’attente lorsque le jeton est annulé.</span><span class="sxs-lookup"><span data-stu-id="371e8-559">Note that this example includes a potential race condition: it depends on the task asynchronously executing the delay when the token is cancelled.</span></span> <span data-ttu-id="371e8-560">Bien que la seconde 1,5 différer de l’appel à la <xref:System.Threading.Tasks.Task.Delay%28System.TimeSpan%2CSystem.Threading.CancellationToken%29> méthode effectue cette hypothèse probable, il est néanmoins possible que l’appel à la <xref:System.Threading.Tasks.Task.Delay%28System.TimeSpan%2CSystem.Threading.CancellationToken%29> méthode pourrait retourner avant que le jeton est annulé.</span><span class="sxs-lookup"><span data-stu-id="371e8-560">Although the 1.5 second delay from the call to the <xref:System.Threading.Tasks.Task.Delay%28System.TimeSpan%2CSystem.Threading.CancellationToken%29> method makes that assumption likely, it is nevertheless possible that the call to the <xref:System.Threading.Tasks.Task.Delay%28System.TimeSpan%2CSystem.Threading.CancellationToken%29> method could return before the token is cancelled.</span></span> <span data-ttu-id="371e8-561">Dans ce cas, l’exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="371e8-561">In that case, the example produces the following output:</span></span>  
  
```  
Task t Status: RanToCompletion, Result: 42  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="371e8-562">
            <paramref name="delay" /> représente un intervalle de temps négatif autre que <see langword="TimeSpan.FromMillseconds(-1)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-562">
              <paramref name="delay" /> represents a negative time interval other than <see langword="TimeSpan.FromMillseconds(-1)" />.</span>
          </span>
          <span data-ttu-id="371e8-563">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-563">-or-</span>
          </span>
          <span data-ttu-id="371e8-564">La propriété <see cref="P:System.TimeSpan.TotalMilliseconds" /> de l’argument <paramref name="delay" /> est supérieure à <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-564">The <paramref name="delay" /> argument's <see cref="P:System.TimeSpan.TotalMilliseconds" /> property is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException">
          <span data-ttu-id="371e8-565">La tâche a été annulée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-565">The task has been canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="371e8-566">Le <paramref name="cancellationToken" /> fourni a déjà été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-566">The provided <paramref name="cancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="371e8-567">Libère toutes les ressources utilisées par l'instance actuelle de la classe <see cref="T:System.Threading.Tasks.Task" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-567">Releases all resources used by the current instance of the <see cref="T:System.Threading.Tasks.Task" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="371e8-568">Libère toutes les ressources utilisées par l'instance actuelle de la classe <see cref="T:System.Threading.Tasks.Task" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-568">Releases all resources used by the current instance of the <see cref="T:System.Threading.Tasks.Task" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="371e8-569">Le <xref:System.Threading.Tasks.Task> la classe implémente le <xref:System.IDisposable> , car il utilise en interne des ressources qui implémentent également l’interface <xref:System.IDisposable>.</span><span class="sxs-lookup"><span data-stu-id="371e8-569">The <xref:System.Threading.Tasks.Task> class implements the <xref:System.IDisposable> interface because internally it uses resources that also implement <xref:System.IDisposable>.</span></span> <span data-ttu-id="371e8-570">Toutefois, en particulier si votre application cible le [!INCLUDE[net_v45](~/includes/net-v45-md.md)] ou une version ultérieure, il n’est pas nécessaire d’appeler <xref:System.Threading.Tasks.Task.Dispose%2A> , sauf si les performances ou le test de l’évolutivité indique que, en fonction de vos modèles d’utilisation, les performances de votre application sont améliorée en supprimant des tâches.</span><span class="sxs-lookup"><span data-stu-id="371e8-570">However, particularly if your app targets the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] or later, there is no need to call <xref:System.Threading.Tasks.Task.Dispose%2A> unless performance or scalability testing indicates that, based on your usage patterns, your app's performance would be improved by disposing of tasks.</span></span> <span data-ttu-id="371e8-571">Pour plus d’informations, consultez [ai-je besoin pour les supprimer de tâches ?](http://blogs.msdn.com/b/pfxteam/archive/2012/03/25/10287435.aspx) dans le blog programmation parallèle avec .NET.</span><span class="sxs-lookup"><span data-stu-id="371e8-571">For more information, see [Do I need to dispose of Tasks?](http://blogs.msdn.com/b/pfxteam/archive/2012/03/25/10287435.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="371e8-572">La tâche n’est pas dans un des états finaux : <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />, <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> ou <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-572">The task is not in one of the final states: <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />, <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />, or <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="371e8-573">Valeur booléenne qui indique si cette méthode est appelée en raison d'un appel à <see cref="M:System.Threading.Tasks.Task.Dispose" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-573">A Boolean value that indicates whether this method is being called due to a call to <see cref="M:System.Threading.Tasks.Task.Dispose" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="371e8-574">Supprime la <see cref="T:System.Threading.Tasks.Task" />, en libérant toutes ses ressources non managées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-574">Disposes the <see cref="T:System.Threading.Tasks.Task" />, releasing all of its unmanaged resources.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="371e8-575">Le <xref:System.Threading.Tasks.Task> la classe implémente le <xref:System.IDisposable> , car il utilise en interne des ressources qui implémentent également l’interface <xref:System.IDisposable>.</span><span class="sxs-lookup"><span data-stu-id="371e8-575">The <xref:System.Threading.Tasks.Task> class implements the <xref:System.IDisposable> interface because internally it uses resources that also implement <xref:System.IDisposable>.</span></span> <span data-ttu-id="371e8-576">Toutefois, en particulier si votre application cible le [!INCLUDE[net_v45](~/includes/net-v45-md.md)] ou une version ultérieure, il n’est pas nécessaire d’appeler <xref:System.Threading.Tasks.Task.Dispose%2A> , sauf si les performances ou le test de l’évolutivité indique que, en fonction de vos modèles d’utilisation, les performances de votre application sont améliorée en supprimant des tâches.</span><span class="sxs-lookup"><span data-stu-id="371e8-576">However, particularly if your app targets the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] or later, there is no need to call <xref:System.Threading.Tasks.Task.Dispose%2A> unless performance or scalability testing indicates that, based on your usage patterns, your app's performance would be improved by disposing of tasks.</span></span> <span data-ttu-id="371e8-577">Pour plus d’informations, consultez [ai-je besoin pour les supprimer de tâches ?](http://blogs.msdn.com/b/pfxteam/archive/2012/03/25/10287435.aspx) dans le blog programmation parallèle avec .NET.</span><span class="sxs-lookup"><span data-stu-id="371e8-577">For more information, see [Do I need to dispose of Tasks?](http://blogs.msdn.com/b/pfxteam/archive/2012/03/25/10287435.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="371e8-578">La tâche n’est pas dans un des états finaux : <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />, <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> ou <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-578">The task is not in one of the final states: <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />, <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />, or <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />.</span>
          </span>
        </exception>
        <threadsafe>
          <span data-ttu-id="371e8-579">Contrairement à la plupart des membres de la <see cref="T:System.Threading.Tasks.Task" /> (classe), cette méthode n’est pas thread-safe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-579">Unlike most of the members of the <see cref="T:System.Threading.Tasks.Task" /> class, this method is not thread-safe.</span>
          </span>
        </threadsafe>
      </Docs>
    </Member>
    <Member MemberName="Exception">
      <MemberSignature Language="C#" Value="public AggregateException Exception { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.AggregateException Exception" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.Exception" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Exception As AggregateException" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property AggregateException ^ Exception { AggregateException ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AggregateException</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="371e8-580">Obtient le <see cref="T:System.AggregateException" /> qui a provoqué l'arrêt prématuré de <see cref="T:System.Threading.Tasks.Task" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-580">Gets the <see cref="T:System.AggregateException" /> that caused the <see cref="T:System.Threading.Tasks.Task" /> to end prematurely.</span>
          </span>
          <span data-ttu-id="371e8-581">Si la <see cref="T:System.Threading.Tasks.Task" /> s'est terminée avec succès ou n'a pas encore levé d'exception, la valeur <see langword="null" /> est retournée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-581">If the <see cref="T:System.Threading.Tasks.Task" /> completed successfully or has not yet thrown any exceptions, this will return <see langword="null" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="371e8-582">
            <see cref="T:System.AggregateException" /> qui a provoqué la fin prématurée de <see cref="T:System.Threading.Tasks.Task" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-582">The <see cref="T:System.AggregateException" /> that caused the <see cref="T:System.Threading.Tasks.Task" /> to end prematurely.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="371e8-583">Tâches qui lèvent des exceptions non gérées stockent l’exception résultante et la propagent encapsulé dans un <xref:System.AggregateException> dans les appels à <xref:System.Threading.Tasks.Task.Wait%2A> ou dans les accès à la <xref:System.Threading.Tasks.Task.Exception%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="371e8-583">Tasks that throw unhandled exceptions store the resulting exception and propagate it wrapped in a <xref:System.AggregateException> in calls to <xref:System.Threading.Tasks.Task.Wait%2A> or in accesses to the <xref:System.Threading.Tasks.Task.Exception%2A> property.</span></span> <span data-ttu-id="371e8-584">Les exceptions non observées au moment où que l’instance de tâche est le garbage collecté seront propagées sur le thread finaliseur.</span><span class="sxs-lookup"><span data-stu-id="371e8-584">Any exceptions not observed by the time the task instance is garbage collected will be propagated on the finalizer thread.</span></span> <span data-ttu-id="371e8-585">Pour plus d’informations et obtenir un exemple, consultez [la gestion des exceptions (bibliothèque parallèle de tâches)](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span><span class="sxs-lookup"><span data-stu-id="371e8-585">For more information and an example, see [Exception Handling (Task Parallel Library)](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Factory">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.TaskFactory Factory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Threading.Tasks.TaskFactory Factory" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.Factory" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Factory As TaskFactory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Threading::Tasks::TaskFactory ^ Factory { System::Threading::Tasks::TaskFactory ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.TaskFactory</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="371e8-586">Fournit l'accès aux méthodes de fabrique pour la création d'instances de <see cref="T:System.Threading.Tasks.Task" /> et de <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-586">Provides access to factory methods for creating and configuring <see cref="T:System.Threading.Tasks.Task" /> and <see cref="T:System.Threading.Tasks.Task`1" /> instances.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="371e8-587">Objet de fabrique pouvant créer une variété d'objets <see cref="T:System.Threading.Tasks.Task" /> et <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-587">A factory object that can create a variety of <see cref="T:System.Threading.Tasks.Task" /> and <see cref="T:System.Threading.Tasks.Task`1" /> objects.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="371e8-588">Cette propriété retourne une instance par défaut de la <xref:System.Threading.Tasks.TaskFactory> classe qui est identique à celui créé par l’appel sans paramètre <xref:System.Threading.Tasks.TaskFactory.%23ctor?displayProperty=nameWithType> constructeur.</span><span class="sxs-lookup"><span data-stu-id="371e8-588">This property returns a default instance of the <xref:System.Threading.Tasks.TaskFactory> class that is identical to the one created by calling the parameterless <xref:System.Threading.Tasks.TaskFactory.%23ctor?displayProperty=nameWithType> constructor.</span></span> <span data-ttu-id="371e8-589">Elle comporte des valeurs de propriété suivantes :</span><span class="sxs-lookup"><span data-stu-id="371e8-589">It has the following property values:</span></span>  
  
|<span data-ttu-id="371e8-590">Property</span><span class="sxs-lookup"><span data-stu-id="371e8-590">Property</span></span>|<span data-ttu-id="371e8-591">Value</span><span class="sxs-lookup"><span data-stu-id="371e8-591">Value</span></span>|  
|--------------|-----------|  
|<xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A?displayProperty=nameWithType>|<xref:System.Threading.CancellationToken.None%2A?displayProperty=nameWithType>|  
|<xref:System.Threading.Tasks.TaskFactory.ContinuationOptions%2A?displayProperty=nameWithType>|<xref:System.Threading.Tasks.TaskContinuationOptions.None?displayProperty=nameWithType>|  
|<xref:System.Threading.Tasks.TaskFactory.CreationOptions%2A?displayProperty=nameWithType>|<xref:System.Threading.Tasks.TaskCreationOptions.None?displayProperty=nameWithType>|  
|<xref:System.Threading.Tasks.TaskFactory.Scheduler%2A?displayProperty=nameWithType>|<span data-ttu-id="371e8-592">`null`, ou <xref:System.Threading.Tasks.TaskScheduler.Current%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="371e8-592">`null`, or <xref:System.Threading.Tasks.TaskScheduler.Current%2A?displayProperty=nameWithType></span></span>|  
  
 <span data-ttu-id="371e8-593">L’utilisation la plus courante de cette propriété consiste à créer et démarrer une nouvelle tâche dans un seul appel à la <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="371e8-593">The most common use of this property is to create and start a new task in a single call to the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="371e8-594">En commençant par le [!INCLUDE[net_v45](~/includes/net-v45-md.md)], le <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> méthode fournit le moyen le plus simple pour créer un <xref:System.Threading.Tasks.Task> objet avec les valeurs de configuration par défaut.</span><span class="sxs-lookup"><span data-stu-id="371e8-594">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> method provides the easiest way to create a <xref:System.Threading.Tasks.Task> object with default configuration values.</span></span>  
  
 <span data-ttu-id="371e8-595">L’exemple suivant utilise la méthode statique <xref:System.Threading.Tasks.Task.Factory%2A> propriété afin que les deux appels à la <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="371e8-595">The following example uses the static <xref:System.Threading.Tasks.Task.Factory%2A> property to make two calls to the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="371e8-596">La première remplit un tableau avec les noms des fichiers dans le répertoire Mes documents de l’utilisateur, tandis que la seconde remplit un tableau avec les noms des sous-répertoires du répertoire Mes documents de l’utilisateur.</span><span class="sxs-lookup"><span data-stu-id="371e8-596">The first populates an array with the names of files in the user's MyDocuments directory, while the second populates an array with the names of subdirectories of the user's MyDocuments directory.</span></span> <span data-ttu-id="371e8-597">Il appelle ensuite la <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%28System.Threading.Tasks.Task%5B%5D%2CSystem.Action%7BSystem.Threading.Tasks.Task%5B%5D%7D%29?displayProperty=nameWithType> (méthode), qui affiche des informations sur le nombre de fichiers et des répertoires dans les deux tableaux une fois les deux premières tâches effectuées à l’exécution.</span><span class="sxs-lookup"><span data-stu-id="371e8-597">It then calls the <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%28System.Threading.Tasks.Task%5B%5D%2CSystem.Action%7BSystem.Threading.Tasks.Task%5B%5D%7D%29?displayProperty=nameWithType> method, which displays information about the number of files and directories in the two arrays after the first two tasks have completed execution.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Factory#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.factory/cs/factory1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.Factory#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.factory/vb/factory1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.Tasks.TaskFactory" />
      </Docs>
    </Member>
    <Member MemberName="FromCanceled">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task FromCanceled (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task FromCanceled(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.FromCanceled(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ FromCanceled(System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">
          <span data-ttu-id="371e8-598">Jeton d’annulation avec lequel terminer la tâche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-598">The cancellation token with which to complete the task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="371e8-599">Crée une <see cref="T:System.Threading.Tasks.Task" /> qui s'est terminée en raison de l'annulation avec un jeton d'annulation spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-599">Creates a <see cref="T:System.Threading.Tasks.Task" /> that's completed due to cancellation with a specified cancellation token.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="371e8-600">Tâche annulée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-600">The canceled task.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="371e8-601">L’annulation n’a pas été demandée pour <paramref name="cancellationToken" /> ; sa propriété <see cref="P:System.Threading.CancellationToken.IsCancellationRequested" /> est <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-601">Cancellation has not been requested for <paramref name="cancellationToken" />; its <see cref="P:System.Threading.CancellationToken.IsCancellationRequested" /> property is <see langword="false" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="FromCanceled&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; FromCanceled&lt;TResult&gt; (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromCanceled&lt;TResult&gt;(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.FromCanceled``1(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Threading::Tasks::Task&lt;TResult&gt; ^ FromCanceled(System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="371e8-602">Type du résultat retourné par la tâche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-602">The type of the result returned by the task.</span>
          </span>
        </typeparam>
        <param name="cancellationToken">
          <span data-ttu-id="371e8-603">Jeton d’annulation avec lequel terminer la tâche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-603">The cancellation token with which to complete the task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="371e8-604">Crée une <see cref="T:System.Threading.Tasks.Task`1" /> qui s'est terminée en raison de l'annulation avec un jeton d'annulation spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-604">Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that's completed due to cancellation with a specified cancellation token.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="371e8-605">Tâche annulée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-605">The canceled task.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="371e8-606">L’annulation n’a pas été demandée pour <paramref name="cancellationToken" /> ; sa propriété <see cref="P:System.Threading.CancellationToken.IsCancellationRequested" /> est <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-606">Cancellation has not been requested for <paramref name="cancellationToken" />; its <see cref="P:System.Threading.CancellationToken.IsCancellationRequested" /> property is <see langword="false" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="FromException">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task FromException (Exception exception);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task FromException(class System.Exception exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.FromException(System.Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ FromException(Exception ^ exception);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exception" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="exception">
          <span data-ttu-id="371e8-607">Exception avec laquelle terminer la tâche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-607">The exception with which to complete the task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="371e8-608">Crée une <see cref="T:System.Threading.Tasks.Task" /> qui s'est terminée avec une exception spécifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-608">Creates a <see cref="T:System.Threading.Tasks.Task" /> that has completed with a specified exception.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="371e8-609">Tâche ayant échoué.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-609">The faulted task.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="371e8-610">Cette méthode crée un <xref:System.Threading.Tasks.Task> dont l’objet <xref:System.Threading.Tasks.Task.Status%2A> propriété <xref:System.Threading.Tasks.TaskStatus.Faulted> et dont <xref:System.Threading.Tasks.Task.Exception%2A> propriété contient `exception`.</span><span class="sxs-lookup"><span data-stu-id="371e8-610">This method creates a <xref:System.Threading.Tasks.Task> object whose <xref:System.Threading.Tasks.Task.Status%2A> property is <xref:System.Threading.Tasks.TaskStatus.Faulted> and whose <xref:System.Threading.Tasks.Task.Exception%2A> property contains `exception`.</span></span> <span data-ttu-id="371e8-611">La méthode est généralement utilisée lorsque vous savez immédiatement que le travail qui exécute une tâche lève une exception avant l’exécution d’un chemin d’accès du code plus de temps.</span><span class="sxs-lookup"><span data-stu-id="371e8-611">The method is commonly used when you immediately know that the work that a task performs will throw an exception before executing a longer code path.</span></span> <span data-ttu-id="371e8-612">Pour obtenir un exemple, consultez la <xref:System.Threading.Tasks.Task.FromException%60%601%28System.Exception%29> de surcharge.</span><span class="sxs-lookup"><span data-stu-id="371e8-612">For an example, see the <xref:System.Threading.Tasks.Task.FromException%60%601%28System.Exception%29> overload.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromException&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; FromException&lt;TResult&gt; (Exception exception);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromException&lt;TResult&gt;(class System.Exception exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.FromException``1(System.Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Threading::Tasks::Task&lt;TResult&gt; ^ FromException(Exception ^ exception);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="exception" Type="System.Exception" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="371e8-613">Type du résultat retourné par la tâche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-613">The type of the result returned by the task.</span>
          </span>
        </typeparam>
        <param name="exception">
          <span data-ttu-id="371e8-614">Exception avec laquelle terminer la tâche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-614">The exception with which to complete the task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="371e8-615">Crée une <see cref="T:System.Threading.Tasks.Task`1" /> qui s'est terminée avec une exception spécifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-615">Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that's completed with a specified exception.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="371e8-616">Tâche ayant échoué.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-616">The faulted task.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="371e8-617">Cette méthode crée un <xref:System.Threading.Tasks.Task%601> dont l’objet <xref:System.Threading.Tasks.Task.Status%2A> propriété <xref:System.Threading.Tasks.TaskStatus.Faulted> et dont <xref:System.Threading.Tasks.Task.Exception%2A> propriété contient `exception`.</span><span class="sxs-lookup"><span data-stu-id="371e8-617">This method creates a <xref:System.Threading.Tasks.Task%601> object whose <xref:System.Threading.Tasks.Task.Status%2A> property is <xref:System.Threading.Tasks.TaskStatus.Faulted> and whose <xref:System.Threading.Tasks.Task.Exception%2A> property contains `exception`.</span></span> <span data-ttu-id="371e8-618">La méthode est généralement utilisée lorsque vous savez immédiatement que le travail qui exécute une tâche lève une exception avant l’exécution d’un chemin d’accès du code plus de temps.</span><span class="sxs-lookup"><span data-stu-id="371e8-618">The method is commonly used when you immediately know that the work that a task performs will throw an exception before executing a longer code path.</span></span> <span data-ttu-id="371e8-619">Cet exemple en fournit une illustration.</span><span class="sxs-lookup"><span data-stu-id="371e8-619">The example provides an illustration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="371e8-620">L’exemple suivant est un utilitaire de ligne de commande qui calcule le nombre d’octets dans les fichiers dans chaque annuaire dont le nom est passé comme argument de ligne de commande.</span><span class="sxs-lookup"><span data-stu-id="371e8-620">The following example is a command-line utility that calculates the number of bytes in the files in each directory whose name is passed as a command-line argument.</span></span> <span data-ttu-id="371e8-621">Au lieu de l’exécution d’un plus long chemin d’accès de code qui instancie un <xref:System.IO.FileInfo> de l’objet et récupère la valeur de son <xref:System.IO.FileInfo.Length%2A?displayProperty=nameWithType> propriété pour chaque fichier dans le répertoire, l’exemple appelle simplement la <xref:System.Threading.Tasks.Task.FromException%60%601%28System.Exception%29> méthode pour créer une tâche ayant échoué si un particulier sous-répertoire n’existe pas.</span><span class="sxs-lookup"><span data-stu-id="371e8-621">Rather than executing a longer code path that instantiates a <xref:System.IO.FileInfo> object and retrieves the value of its <xref:System.IO.FileInfo.Length%2A?displayProperty=nameWithType> property for each file in the directory, the example simply calls the <xref:System.Threading.Tasks.Task.FromException%60%601%28System.Exception%29> method to create a faulted task if a particular subdirectory does not exist.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.FromResult#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.fromresult/cs/fromresult1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.FromResult#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.fromresult/vb/fromresult1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromResult&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; FromResult&lt;TResult&gt; (TResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromResult&lt;TResult&gt;(!!TResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.FromResult``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromResult(Of TResult) (result As TResult) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Threading::Tasks::Task&lt;TResult&gt; ^ FromResult(TResult result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="result" Type="TResult" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="371e8-622">Type du résultat retourné par la tâche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-622">The type of the result returned by the task.</span>
          </span>
        </typeparam>
        <param name="result">
          <span data-ttu-id="371e8-623">Résultat à enregistrer dans la tâche terminée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-623">The result to store into the completed task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="371e8-624">Crée une <see cref="T:System.Threading.Tasks.Task`1" /> qui s'est terminée correctement avec le résultat spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-624">Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that's completed successfully with the specified result.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="371e8-625">Tâche terminée avec succès.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-625">The successfully completed task.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="371e8-626">Cette méthode crée un <xref:System.Threading.Tasks.Task%601> dont l’objet <xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=nameWithType> propriété `result` et dont <xref:System.Threading.Tasks.Task.Status%2A> propriété est <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>.</span><span class="sxs-lookup"><span data-stu-id="371e8-626">This method creates a <xref:System.Threading.Tasks.Task%601> object whose <xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=nameWithType> property is `result` and whose <xref:System.Threading.Tasks.Task.Status%2A> property is <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>.</span></span> <span data-ttu-id="371e8-627">La méthode est généralement utilisée lorsque la valeur de retour d’une tâche est connue immédiatement sans exécuter un chemin d’accès du code plus de temps.</span><span class="sxs-lookup"><span data-stu-id="371e8-627">The method is commonly used when the return value of a task is immediately known without executing a longer code path.</span></span> <span data-ttu-id="371e8-628">Cet exemple en fournit une illustration.</span><span class="sxs-lookup"><span data-stu-id="371e8-628">The example provides an illustration.</span></span>  
  
 <span data-ttu-id="371e8-629">Pour créer un objet de tâche qui ne retourne pas de valeur, récupérer l’objet de tâche à partir de la <xref:System.Threading.Tasks.Task.CompletedTask%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="371e8-629">To create a Task object that does not return a value, retrieve the Task object from the <xref:System.Threading.Tasks.Task.CompletedTask%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="371e8-630">L’exemple suivant est un utilitaire de ligne de commande qui calcule le nombre d’octets dans les fichiers dans chaque annuaire dont le nom est passé comme argument de ligne de commande.</span><span class="sxs-lookup"><span data-stu-id="371e8-630">The following example is a command-line utility that calculates the number of bytes in the files in each directory whose name is passed as a command-line argument.</span></span> <span data-ttu-id="371e8-631">Au lieu de l’exécution d’un plus long chemin d’accès de code qui instancie un <xref:System.IO.FileStream> de l’objet et récupère la valeur de sa <xref:System.IO.FileStream.Length%2A?displayProperty=nameWithType> propriété pour chaque fichier dans le répertoire, l’exemple appelle simplement la <xref:System.Threading.Tasks.Task.FromResult%2A> méthode pour créer une tâche dont <xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=nameWithType> propriété est zéro (0) si un répertoire ne comporte aucun fichier.</span><span class="sxs-lookup"><span data-stu-id="371e8-631">Rather than executing a longer code path that instantiates a <xref:System.IO.FileStream> object and retrieves the value of its <xref:System.IO.FileStream.Length%2A?displayProperty=nameWithType> property for each file in the directory, the example simply calls the <xref:System.Threading.Tasks.Task.FromResult%2A> method to create a task whose <xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=nameWithType> property is zero (0) if a directory has no files.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.FromResult#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.fromresult/cs/fromresult1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.FromResult#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.fromresult/vb/fromresult1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.Task.CompletedTask" />
      </Docs>
    </Member>
    <Member MemberName="GetAwaiter">
      <MemberSignature Language="C#" Value="public System.Runtime.CompilerServices.TaskAwaiter GetAwaiter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Runtime.CompilerServices.TaskAwaiter GetAwaiter() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.GetAwaiter" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAwaiter () As TaskAwaiter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Runtime::CompilerServices::TaskAwaiter GetAwaiter();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.CompilerServices.TaskAwaiter</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="371e8-632">Obtient un élément awaiter utilisé pour attendre cette <see cref="T:System.Threading.Tasks.Task" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-632">Gets an awaiter used to await this <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="371e8-633">Instance d'élément awaiter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-633">An awaiter instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="371e8-634">Cette méthode est conçue pour une utilisation du compilateur plutôt que pour une utilisation dans le code d’application.</span><span class="sxs-lookup"><span data-stu-id="371e8-634">This method is intended for compiler use rather than for use in application code.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public int Id { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Id" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.Id" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Id As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Id { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="371e8-635">Obtient un ID pour cette instance de <see cref="T:System.Threading.Tasks.Task" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-635">Gets an ID for this <see cref="T:System.Threading.Tasks.Task" /> instance.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="371e8-636">Entier assigné par le système à cette instance de <see cref="T:System.Threading.Tasks.Task" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-636">The identifier that is assigned by the system to this <see cref="T:System.Threading.Tasks.Task" /> instance.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="371e8-637">ID de tâche sont assignés à la demande et ne représentent pas nécessairement l’ordre dans la tâche instances sont créées.</span><span class="sxs-lookup"><span data-stu-id="371e8-637">Task IDs are assigned on-demand and do not necessarily represent the order in which task instances are created.</span></span> <span data-ttu-id="371e8-638">Notez que bien que les collisions sont très rares, les identificateurs de tâche ne sont pas garantis être unique.</span><span class="sxs-lookup"><span data-stu-id="371e8-638">Note that although collisions are very rare, task identifiers are not guaranteed to be unique.</span></span>  
  
 <span data-ttu-id="371e8-639">Pour obtenir l’ID de tâche de la tâche en cours d’exécution dans le code de cette tâche est en cours d’exécution, utilisez le <xref:System.Threading.Tasks.Task.CurrentId%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="371e8-639">To get the task ID of the currently executing task from within code that that task is executing, use the <xref:System.Threading.Tasks.Task.CurrentId%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.Task.CurrentId" />
      </Docs>
    </Member>
    <Member MemberName="IsCanceled">
      <MemberSignature Language="C#" Value="public bool IsCanceled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCanceled" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.IsCanceled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCanceled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCanceled { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="371e8-640">Indique si cette instance de <see cref="T:System.Threading.Tasks.Task" /> s'est exécutée avec succès suite à une annulation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-640">Gets whether this <see cref="T:System.Threading.Tasks.Task" /> instance has completed execution due to being canceled.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="371e8-641">
            <see langword="true" /> si la tâche s'est terminée suite à son annulation ; sinon <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-641">
              <see langword="true" /> if the task has completed due to being canceled; otherwise <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="371e8-642">A <xref:System.Threading.Tasks.Task> se termine dans le <xref:System.Threading.Tasks.TaskStatus.Canceled> état si l’une des conditions suivantes :</span><span class="sxs-lookup"><span data-stu-id="371e8-642">A <xref:System.Threading.Tasks.Task> will complete in the <xref:System.Threading.Tasks.TaskStatus.Canceled> state under any of the following conditions:</span></span>  
  
-   <span data-ttu-id="371e8-643">Son <xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A> a été marqué pour l’annulation avant le début de l’exécution, de la tâche</span><span class="sxs-lookup"><span data-stu-id="371e8-643">Its <xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A> was marked for cancellation before the task started executing,</span></span>  
  
-   <span data-ttu-id="371e8-644">La tâche a accepté la demande d’annulation sur son déjà signalé <xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A> en levant une <xref:System.OperationCanceledException> qui porte le même <xref:System.Threading.CancellationToken>.</span><span class="sxs-lookup"><span data-stu-id="371e8-644">The task acknowledged the cancellation request on its already signaled <xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A> by throwing an <xref:System.OperationCanceledException> that bears the same <xref:System.Threading.CancellationToken>.</span></span>  
  
-   <span data-ttu-id="371e8-645">La tâche a accepté la demande d’annulation sur son déjà signalé <xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A> en appelant le <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A> méthode sur le <xref:System.Threading.CancellationToken>.</span><span class="sxs-lookup"><span data-stu-id="371e8-645">The task acknowledged the cancellation request on its already signaled <xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A> by calling the <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A> method on the <xref:System.Threading.CancellationToken>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="371e8-646">La récupération de la valeur de la <xref:System.Threading.Tasks.Task.IsCanceled%2A> propriété ne bloque pas le thread appelant jusqu'à ce que la tâche est terminée.</span><span class="sxs-lookup"><span data-stu-id="371e8-646">Retrieving the value of the <xref:System.Threading.Tasks.Task.IsCanceled%2A> property does not block the calling thread until the task has completed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCompleted">
      <MemberSignature Language="C#" Value="public bool IsCompleted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCompleted" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.IsCompleted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCompleted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCompleted { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.IAsyncResult.IsCompleted</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="371e8-647">Indique si cette <see cref="T:System.Threading.Tasks.Task" /> s'est terminée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-647">Gets whether this <see cref="T:System.Threading.Tasks.Task" /> has completed.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="371e8-648">
            <see langword="true" /> si la tâche s'est terminée ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-648">
              <see langword="true" /> if the task has completed; otherwise <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="371e8-649"><xref:System.Threading.Tasks.Task.IsCompleted%2A> retournera `true` lorsque la tâche est dans un des trois états définitifs : <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, ou <xref:System.Threading.Tasks.TaskStatus.Canceled>.</span><span class="sxs-lookup"><span data-stu-id="371e8-649"><xref:System.Threading.Tasks.Task.IsCompleted%2A> will return `true` when the task is in one of the three final states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="371e8-650">La récupération de la valeur de la <xref:System.Threading.Tasks.Task.IsCompleted%2A?displayProperty=nameWithType> propriété ne bloque pas le thread appelant jusqu'à ce que la tâche est terminée.</span><span class="sxs-lookup"><span data-stu-id="371e8-650">Retrieving the value of the <xref:System.Threading.Tasks.Task.IsCompleted%2A?displayProperty=nameWithType> property does not block the calling thread until the task has completed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCompletedSuccessfully">
      <MemberSignature Language="C#" Value="public bool IsCompletedSuccessfully { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCompletedSuccessfully" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.IsCompletedSuccessfully" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCompletedSuccessfully As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCompletedSuccessfully { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFaulted">
      <MemberSignature Language="C#" Value="public bool IsFaulted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFaulted" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.IsFaulted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsFaulted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsFaulted { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="371e8-651">Indique si la <see cref="T:System.Threading.Tasks.Task" /> s'est terminée suite à une exception non gérée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-651">Gets whether the <see cref="T:System.Threading.Tasks.Task" /> completed due to an unhandled exception.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="371e8-652">
            <see langword="true" /> si la tâche a levé une exception non gérée ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-652">
              <see langword="true" /> if the task has thrown an unhandled exception; otherwise <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="371e8-653">Si <xref:System.Threading.Tasks.Task.IsFaulted%2A> est `true`, de la tâche <xref:System.Threading.Tasks.Task.Status%2A> est égal à <xref:System.Threading.Tasks.TaskStatus.Faulted>et son <xref:System.Threading.Tasks.Task.Exception%2A> propriété sera non null.</span><span class="sxs-lookup"><span data-stu-id="371e8-653">If <xref:System.Threading.Tasks.Task.IsFaulted%2A> is `true`, the task's <xref:System.Threading.Tasks.Task.Status%2A> is equal to <xref:System.Threading.Tasks.TaskStatus.Faulted>, and its <xref:System.Threading.Tasks.Task.Exception%2A> property will be non-null.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="371e8-654">La récupération de la valeur de la <xref:System.Threading.Tasks.Task.IsFaulted%2A?displayProperty=nameWithType> propriété ne bloque pas le thread appelant jusqu'à ce que la tâche est terminée.</span><span class="sxs-lookup"><span data-stu-id="371e8-654">Retrieving the value of the <xref:System.Threading.Tasks.Task.IsFaulted%2A?displayProperty=nameWithType> property does not block the calling thread until the task has completed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Run">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="371e8-655">Met en file d'attente le travail spécifié à exécuter dans le ThreadPool et retourne une tâche ou un handle de <see cref="T:System.Threading.Tasks.Task`1" /> pour ce travail.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-655">Queues the specified work to run on the ThreadPool and returns a task or <see cref="T:System.Threading.Tasks.Task`1" /> handle for that work.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="371e8-656">Le <xref:System.Threading.Tasks.Task.Run%2A> méthode fournit un ensemble de surcharges qui la rendent facile de démarrer une tâche à l’aide des valeurs par défaut.</span><span class="sxs-lookup"><span data-stu-id="371e8-656">The <xref:System.Threading.Tasks.Task.Run%2A> method provides a set of overloads that make it easy to start a task by using default values.</span></span> <span data-ttu-id="371e8-657">Il s’agit d’une alternative légère à la <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> surcharges.</span><span class="sxs-lookup"><span data-stu-id="371e8-657">It is a lightweight alternative to the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> overloads.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task Run (Action action);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task Run(class System.Action action) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Run(System.Action)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ Run(Action ^ action);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="action">
          <span data-ttu-id="371e8-658">Travail à exécuter de façon asynchrone</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-658">The work to execute asynchronously</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="371e8-659">Met en file d'attente le travail spécifié à exécuter dans le pool de threads et retourne un objet <see cref="T:System.Threading.Tasks.Task" /> qui représente ce travail.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-659">Queues the specified work to run on the thread pool and returns a <see cref="T:System.Threading.Tasks.Task" /> object that represents that work.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="371e8-660">Tâche qui représente le travail mis en file d'attente à exécuter dans le ThreadPool.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-660">A task that represents the work queued to execute in the ThreadPool.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="371e8-661">Le <xref:System.Threading.Tasks.Task.Run%2A> méthode vous permet de créer et exécuter une tâche dans un seul appel de méthode et une solution plus simple pour le <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="371e8-661">The <xref:System.Threading.Tasks.Task.Run%2A> method allows you to create and execute a task in a single method call and is a simpler alternative to the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> method.</span></span> <span data-ttu-id="371e8-662">Il crée une tâche avec les valeurs par défaut suivantes :</span><span class="sxs-lookup"><span data-stu-id="371e8-662">It creates a task with the following default values:</span></span>  
  
-   <span data-ttu-id="371e8-663">Son jeton d’annulation est <xref:System.Threading.CancellationToken.None%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="371e8-663">Its cancellation token is <xref:System.Threading.CancellationToken.None%2A?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="371e8-664">Son <xref:System.Threading.Tasks.Task.CreationOptions%2A> valeur de propriété est <xref:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="371e8-664">Its <xref:System.Threading.Tasks.Task.CreationOptions%2A> property value is <xref:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="371e8-665">Elle utilise le Planificateur de tâches par défaut.</span><span class="sxs-lookup"><span data-stu-id="371e8-665">It uses the default task scheduler.</span></span>  
  
 <span data-ttu-id="371e8-666">Pour plus d’informations sur la gestion des exceptions levées par des opérations de la tâche, consultez [la gestion des exceptions](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span><span class="sxs-lookup"><span data-stu-id="371e8-666">For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="371e8-667">L’exemple suivant définit un `ShowThreadInfo` méthode qui affiche le <xref:System.Threading.Thread.ManagedThreadId%2A?displayProperty=nameWithType> du thread actuel.</span><span class="sxs-lookup"><span data-stu-id="371e8-667">The following example defines a `ShowThreadInfo` method  that displays the <xref:System.Threading.Thread.ManagedThreadId%2A?displayProperty=nameWithType> of the current thread.</span></span> <span data-ttu-id="371e8-668">Elle est appelée directement depuis le thread d’application et est appelé à partir de la <xref:System.Action> délégué transmis à la <xref:System.Threading.Tasks.Task.Run%28System.Action%29> (méthode).</span><span class="sxs-lookup"><span data-stu-id="371e8-668">It is called directly from the application thread, and is called from the <xref:System.Action> delegate passed to the <xref:System.Threading.Tasks.Task.Run%28System.Action%29> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Run#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/Run11.cs#11)]
 [!code-vb[System.Threading.Tasks.Task.Run#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/Run11.vb#11)]  
  
 <span data-ttu-id="371e8-669">L’exemple suivant est similaire au précédent, sauf qu’elle utilise une expression lambda pour définir le code à exécuter la tâche.</span><span class="sxs-lookup"><span data-stu-id="371e8-669">The following example is similar to the previous one, except that it uses a lambda expression to define the code that the task is to execute.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Run#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/run6.cs#3)]
 [!code-vb[System.Threading.Tasks.Task.Run#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/run6.vb#3)]  
  
 <span data-ttu-id="371e8-670">Les exemples montrent que la tâche asynchrone s’exécute sur un autre thread que le thread d’application principal.</span><span class="sxs-lookup"><span data-stu-id="371e8-670">The examples show that the asynchronous task executes on a different thread than the main application thread.</span></span>  
  
 <span data-ttu-id="371e8-671">L’appel à la <xref:System.Threading.Tasks.Task.Wait%2A> méthode garantit que la tâche se termine et affiche sa sortie avant la fin de l’application.</span><span class="sxs-lookup"><span data-stu-id="371e8-671">The call to the <xref:System.Threading.Tasks.Task.Wait%2A> method ensures that the task completes and displays its output before the application ends.</span></span> <span data-ttu-id="371e8-672">Dans le cas contraire, il est possible que le `Main` méthode se termine avant que la tâche se termine.</span><span class="sxs-lookup"><span data-stu-id="371e8-672">Otherwise, it is possible that the `Main` method will complete before the task finishes.</span></span>  
  
 <span data-ttu-id="371e8-673">L’exemple suivant illustre la <xref:System.Threading.Tasks.Task.Run%28System.Action%29> (méthode).</span><span class="sxs-lookup"><span data-stu-id="371e8-673">The following example illustrates the <xref:System.Threading.Tasks.Task.Run%28System.Action%29> method.</span></span> <span data-ttu-id="371e8-674">Il définit un tableau des noms de répertoires et démarre une tâche distincte pour récupérer les noms de fichier dans chaque répertoire.</span><span class="sxs-lookup"><span data-stu-id="371e8-674">It defines an array of directory names and starts a separate task to retrieve the file names in each directory.</span></span> <span data-ttu-id="371e8-675">Toutes les tâches d’écrivent les noms de fichiers dans un seul <xref:System.Collections.Concurrent.ConcurrentBag%601> objet.</span><span class="sxs-lookup"><span data-stu-id="371e8-675">All tasks write the file names to a single <xref:System.Collections.Concurrent.ConcurrentBag%601> object.</span></span> <span data-ttu-id="371e8-676">L’exemple appelle ensuite la <xref:System.Threading.Tasks.Task.WaitAll%28System.Threading.Tasks.Task%5B%5D%29> pour s’assurer que toutes les tâches terminées et affiche le nombre total de noms de fichiers écrits dans le <xref:System.Collections.Concurrent.ConcurrentBag%601> objet.</span><span class="sxs-lookup"><span data-stu-id="371e8-676">The example then calls the <xref:System.Threading.Tasks.Task.WaitAll%28System.Threading.Tasks.Task%5B%5D%29> method to ensure that all tasks have completed, and then displays a count of the total number of file names written to the <xref:System.Collections.Concurrent.ConcurrentBag%601> object.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Run#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/run2.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.Run#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/run2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="371e8-677">La valeur du paramètre <paramref name="action" /> était <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-677">The <paramref name="action" /> parameter was <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task Run (Func&lt;System.Threading.Tasks.Task&gt; function);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task Run(class System.Func`1&lt;class System.Threading.Tasks.Task&gt; function) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Run (function As Func(Of Task)) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ Run(Func&lt;System::Threading::Tasks::Task ^&gt; ^ function);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Threading.Tasks.Task&gt;" />
      </Parameters>
      <Docs>
        <param name="function">
          <span data-ttu-id="371e8-678">Travail à exécuter de façon asynchrone</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-678">The work to execute asynchronously</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="371e8-679">Met en file d’attente le travail spécifié à exécuter sur le pool de threads et retourne un proxy pour la tâche retournée par <paramref name="function" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-679">Queues the specified work to run on the thread pool and returns a proxy for the  task returned by <paramref name="function" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="371e8-680">Tâche qui représente un proxy de la tâche retournée par <paramref name="function" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-680">A task that represents a proxy for the task returned by <paramref name="function" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="371e8-681">Pour plus d’informations sur la gestion des exceptions levées par des opérations de la tâche, consultez [la gestion des exceptions](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span><span class="sxs-lookup"><span data-stu-id="371e8-681">For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="371e8-682">La valeur du paramètre <paramref name="function" /> était <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-682">The <paramref name="function" /> parameter was <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task Run (Action action, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task Run(class System.Action action, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Run(System.Action,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ Run(Action ^ action, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="action">
          <span data-ttu-id="371e8-683">Travail à exécuter de façon asynchrone</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-683">The work to execute asynchronously</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="371e8-684">Jeton d’annulation qui peut être utilisé pour annuler le travail.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-684">A cancellation token that can be used to cancel the work</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="371e8-685">Met en file d'attente le travail spécifié à exécuter dans le pool de threads et retourne un objet <see cref="T:System.Threading.Tasks.Task" /> qui représente ce travail.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-685">Queues the specified work to run on the thread pool and returns a <see cref="T:System.Threading.Tasks.Task" /> object that represents that work.</span>
          </span>
          <span data-ttu-id="371e8-686">Un jeton d’annulation permet l’annulation du travail.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-686">A cancellation token allows the work to be cancelled.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="371e8-687">Tâche qui représente le travail mis en file d’attente à exécuter dans le pool de threads.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-687">A task that represents the work queued to execute in the thread pool.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="371e8-688">Si l’annulation est demandée avant le début de la tâche d’exécution, la tâche ne s’exécute pas.</span><span class="sxs-lookup"><span data-stu-id="371e8-688">If cancellation is requested before the task begins execution, the task does not execute.</span></span> <span data-ttu-id="371e8-689">Au lieu de cela, elle est définie sur le <xref:System.Threading.Tasks.TaskStatus.Canceled> état et lève un <xref:System.Threading.Tasks.TaskCanceledException> exception.</span><span class="sxs-lookup"><span data-stu-id="371e8-689">Instead it is set to the <xref:System.Threading.Tasks.TaskStatus.Canceled> state and throws a <xref:System.Threading.Tasks.TaskCanceledException> exception.</span></span>  
  
 <span data-ttu-id="371e8-690">Le <xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29> méthode constitue une alternative plus simple à la <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="371e8-690">The <xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29> method is a simpler alternative to the <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="371e8-691">Il crée une tâche avec les valeurs par défaut suivantes :</span><span class="sxs-lookup"><span data-stu-id="371e8-691">It creates a task with the following default values:</span></span>  
  
-   <span data-ttu-id="371e8-692">Son <xref:System.Threading.Tasks.Task.CreationOptions%2A> valeur de propriété est <xref:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="371e8-692">Its <xref:System.Threading.Tasks.Task.CreationOptions%2A> property value is <xref:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="371e8-693">Elle utilise le Planificateur de tâches par défaut.</span><span class="sxs-lookup"><span data-stu-id="371e8-693">It uses the default task scheduler.</span></span>  
  
 <span data-ttu-id="371e8-694">Pour plus d’informations sur la gestion des exceptions levées par des opérations de la tâche, consultez [la gestion des exceptions](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span><span class="sxs-lookup"><span data-stu-id="371e8-694">For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="371e8-695">L’exemple suivant appelle la <xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29> méthode pour créer une tâche qui parcourt les fichiers dans le répertoire C:\Windows\System32.</span><span class="sxs-lookup"><span data-stu-id="371e8-695">The following example calls the <xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29> method to create a task that iterates the files in the C:\Windows\System32 directory.</span></span> <span data-ttu-id="371e8-696">L’expression lambda appelle la <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> méthode pour ajouter des informations sur chaque fichier à un <xref:System.Collections.Generic.List%601> objet.</span><span class="sxs-lookup"><span data-stu-id="371e8-696">The lambda expression calls the <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method to add information about each  file to a <xref:System.Collections.Generic.List%601> object.</span></span> <span data-ttu-id="371e8-697">Chaque détachée tâche imbriquée appelée par le <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> boucle vérifie l’état du jeton d’annulation et, si l’annulation est demandée, appelle le <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="371e8-697">Each detached nested task invoked by the <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> loop checks the state of the cancellation token and, if cancellation is requested, calls the <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="371e8-698">Le <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType> méthode lève une exception une <xref:System.OperationCanceledException> exception est gérée dans un `catch` bloquer lorsque le thread appelant appelle la <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="371e8-698">The <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType> method throws an <xref:System.OperationCanceledException> exception that is handled in a `catch` block when the calling thread calls the <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Run#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/run4.cs#4)]
 [!code-vb[System.Threading.Tasks.Task.Run#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/run4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="371e8-699">La valeur du paramètre <paramref name="action" /> était <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-699">The <paramref name="action" /> parameter was <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException">
          <span data-ttu-id="371e8-700">La tâche a été annulée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-700">The task has been canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="371e8-701">La <see cref="T:System.Threading.CancellationTokenSource" /> associée au <paramref name="cancellationToken" /> a été supprimée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-701">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with <paramref name="cancellationToken" /> was disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task Run (Func&lt;System.Threading.Tasks.Task&gt; function, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task Run(class System.Func`1&lt;class System.Threading.Tasks.Task&gt; function, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ Run(Func&lt;System::Threading::Tasks::Task ^&gt; ^ function, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Threading.Tasks.Task&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="function">
          <span data-ttu-id="371e8-702">Travail à exécuter de façon asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-702">The work to execute asynchronously.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="371e8-703">Jeton d'annulation qui doit être utilisé pour annuler le travail.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-703">A cancellation token that should be used to cancel the work.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="371e8-704">Met en file d’attente le travail spécifié à exécuter sur le pool de threads et retourne un proxy pour la tâche retournée par <paramref name="function" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-704">Queues the specified work to run on the thread pool and returns a proxy for the task returned by <paramref name="function" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="371e8-705">Tâche qui représente un proxy de la tâche retournée par <paramref name="function" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-705">A task that represents a proxy for the task returned by <paramref name="function" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="371e8-706">Pour plus d’informations sur la gestion des exceptions levées par des opérations de la tâche, consultez [la gestion des exceptions](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span><span class="sxs-lookup"><span data-stu-id="371e8-706">For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="371e8-707">La valeur du paramètre <paramref name="function" /> était <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-707">The <paramref name="function" /> parameter was <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException">
          <span data-ttu-id="371e8-708">La tâche a été annulée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-708">The task has been canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="371e8-709">La <see cref="T:System.Threading.CancellationTokenSource" /> associée au <paramref name="cancellationToken" /> a été supprimée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-709">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with <paramref name="cancellationToken" /> was disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Run&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; Run&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt; function);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; Run&lt;TResult&gt;(class System.Func`1&lt;class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; function) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Run(Of TResult) (function As Func(Of Task(Of TResult))) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Threading::Tasks::Task&lt;TResult&gt; ^ Run(Func&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^&gt; ^ function);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="371e8-710">Type du résultat retourné par la tâche de proxy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-710">The type of the result returned by the proxy task.</span>
          </span>
        </typeparam>
        <param name="function">
          <span data-ttu-id="371e8-711">Travail à exécuter de façon asynchrone</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-711">The work to execute asynchronously</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="371e8-712">Met en file d’attente le travail spécifié à exécuter dans le pool de threads et retourne un proxy pour le <see langword="Task(TResult)" /> retourné par <paramref name="function" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-712">Queues the specified work to run on the thread pool and returns a proxy for the <see langword="Task(TResult)" /> returned by <paramref name="function" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="371e8-713">
            <see langword="Task(TResult)" /> qui représente un proxy de la <see langword="Task(TResult)" /> retournée par <paramref name="function" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-713">A <see langword="Task(TResult)" /> that represents a proxy for the <see langword="Task(TResult)" /> returned by <paramref name="function" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="371e8-714">Pour plus d’informations sur la gestion des exceptions levées par des opérations de la tâche, consultez [la gestion des exceptions](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span><span class="sxs-lookup"><span data-stu-id="371e8-714">For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="371e8-715">La valeur du paramètre <paramref name="function" /> était <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-715">The <paramref name="function" /> parameter was <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Run&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; Run&lt;TResult&gt; (Func&lt;TResult&gt; function);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; Run&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; function) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Run``1(System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Run(Of TResult) (function As Func(Of TResult)) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Threading::Tasks::Task&lt;TResult&gt; ^ Run(Func&lt;TResult&gt; ^ function);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="371e8-716">Type de retour de la tâche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-716">The return type of the task.</span>
          </span>
        </typeparam>
        <param name="function">
          <span data-ttu-id="371e8-717">Travail à exécuter de façon asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-717">The work to execute asynchronously.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="371e8-718">Met en file d'attente le travail spécifié à exécuter dans le pool de threads et retourne un objet <see cref="T:System.Threading.Tasks.Task`1" /> qui représente ce travail.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-718">Queues the specified work to run on the thread pool and returns a <see cref="T:System.Threading.Tasks.Task`1" /> object that represents that work.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="371e8-719">Objet de tâche qui représente le travail mis en file d’attente à exécuter dans le pool de threads.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-719">A task object that represents the work queued to execute in the thread pool.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="371e8-720">Le <xref:System.Threading.Tasks.Task.Run%2A> méthode constitue une alternative plus simple à la <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="371e8-720">The <xref:System.Threading.Tasks.Task.Run%2A> method is a simpler alternative to the <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="371e8-721">Il crée une tâche avec les valeurs par défaut suivantes :</span><span class="sxs-lookup"><span data-stu-id="371e8-721">It creates a task with the following default values:</span></span>  
  
-   <span data-ttu-id="371e8-722">Son jeton d’annulation est <xref:System.Threading.CancellationToken.None%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="371e8-722">Its cancellation token is <xref:System.Threading.CancellationToken.None%2A?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="371e8-723">Son <xref:System.Threading.Tasks.Task.CreationOptions%2A> valeur de propriété est <xref:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="371e8-723">Its <xref:System.Threading.Tasks.Task.CreationOptions%2A> property value is <xref:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="371e8-724">Elle utilise le Planificateur de tâches par défaut.</span><span class="sxs-lookup"><span data-stu-id="371e8-724">It uses the default task scheduler.</span></span>  
  
 <span data-ttu-id="371e8-725">Pour plus d’informations sur la gestion des exceptions levées par des opérations de la tâche, consultez [la gestion des exceptions](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span><span class="sxs-lookup"><span data-stu-id="371e8-725">For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="371e8-726">L’exemple suivant compte le nombre approximatif de mots dans des fichiers texte qui représentent des livres publiés.</span><span class="sxs-lookup"><span data-stu-id="371e8-726">The following example counts the approximate number of words in text files that represent published books.</span></span> <span data-ttu-id="371e8-727">Chaque tâche est responsable de l’ouverture d’un fichier, lire tout son contenu de manière asynchrone et calculer le nombre de mots à l’aide d’une expression régulière.</span><span class="sxs-lookup"><span data-stu-id="371e8-727">Each task is responsible for opening a file, reading its entire contents asynchronously, and calculating the word count by using a regular expression.</span></span> <span data-ttu-id="371e8-728">Le <xref:System.Threading.Tasks.Task.WaitAll%28System.Threading.Tasks.Task%5B%5D%29> méthode est appelée pour vous assurer que toutes les tâches terminées avant d’afficher le nombre de mots de chaque ouvrage sur la console.</span><span class="sxs-lookup"><span data-stu-id="371e8-728">The <xref:System.Threading.Tasks.Task.WaitAll%28System.Threading.Tasks.Task%5B%5D%29> method is called to ensure that all tasks have completed before  displaying the word count of each book to the console.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Run#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/run3.cs#2)]
 [!code-vb[System.Threading.Tasks.Task.Run#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/run3.vb#2)]  
  
 <span data-ttu-id="371e8-729">L’expression régulière `\p{P}*\s+` correspond à zéro, un ou plusieurs caractères de ponctuation suivis d’un ou plusieurs caractères d’espace blanc.</span><span class="sxs-lookup"><span data-stu-id="371e8-729">The regular expression `\p{P}*\s+` matches zero, one, or more punctuation characters followed by one or more whitespace characters.</span></span> <span data-ttu-id="371e8-730">Il suppose que le nombre total de correspondances est égale au nombre de word approximative.</span><span class="sxs-lookup"><span data-stu-id="371e8-730">It assumes that the total number of matches equals the approximate word count.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="371e8-731">Le paramètre <paramref name="function" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-731">The <paramref name="function" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Run&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; Run&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt; function, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; Run&lt;TResult&gt;(class System.Func`1&lt;class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; function, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Threading::Tasks::Task&lt;TResult&gt; ^ Run(Func&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^&gt; ^ function, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="371e8-732">Type du résultat retourné par la tâche de proxy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-732">The type of the result returned by the proxy task.</span>
          </span>
        </typeparam>
        <param name="function">
          <span data-ttu-id="371e8-733">Travail à exécuter de façon asynchrone</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-733">The work to execute asynchronously</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="371e8-734">Jeton d'annulation qui doit être utilisé pour annuler le travail</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-734">A cancellation token that should be used to cancel the work</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="371e8-735">Met en file d’attente le travail spécifié à exécuter dans le pool de threads et retourne un proxy pour le <see langword="Task(TResult)" /> retourné par <paramref name="function" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-735">Queues the specified work to run on the thread pool and returns a proxy for the <see langword="Task(TResult)" /> returned by <paramref name="function" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="371e8-736">
            <see langword="Task(TResult)" /> qui représente un proxy de la <see langword="Task(TResult)" /> retournée par <paramref name="function" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-736">A <see langword="Task(TResult)" /> that represents a proxy for the <see langword="Task(TResult)" /> returned by <paramref name="function" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="371e8-737">Pour plus d’informations sur la gestion des exceptions levées par des opérations de la tâche, consultez [la gestion des exceptions](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span><span class="sxs-lookup"><span data-stu-id="371e8-737">For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="371e8-738">La valeur du paramètre <paramref name="function" /> était <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-738">The <paramref name="function" /> parameter was <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException">
          <span data-ttu-id="371e8-739">La tâche a été annulée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-739">The task has been canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="371e8-740">La <see cref="T:System.Threading.CancellationTokenSource" /> associée au <paramref name="cancellationToken" /> a été supprimée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-740">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with <paramref name="cancellationToken" /> was disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Run&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; Run&lt;TResult&gt; (Func&lt;TResult&gt; function, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; Run&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; function, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Run``1(System.Func{``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Threading::Tasks::Task&lt;TResult&gt; ^ Run(Func&lt;TResult&gt; ^ function, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="371e8-741">Type de résultat de la tâche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-741">The result type of the task.</span>
          </span>
        </typeparam>
        <param name="function">
          <span data-ttu-id="371e8-742">Travail à exécuter de façon asynchrone</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-742">The work to execute asynchronously</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="371e8-743">Jeton d'annulation qui doit être utilisé pour annuler le travail</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-743">A cancellation token that should be used to cancel the work</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="371e8-744">Met en file d'attente le travail spécifié à exécuter dans le pool de threads et retourne un objet <see langword="Task(TResult)" /> qui représente ce travail.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-744">Queues the specified work to run on the thread pool and returns a <see langword="Task(TResult)" /> object that represents that work.</span>
          </span>
          <span data-ttu-id="371e8-745">Un jeton d’annulation permet l’annulation du travail.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-745">A cancellation token allows the work to be cancelled.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="371e8-746">
            <see langword="Task(TResult)" /> qui représente le travail mis en file d’attente à exécuter dans le pool de threads.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-746">A <see langword="Task(TResult)" /> that represents the work queued to execute in the thread pool.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="371e8-747">Si l’annulation est demandée avant le début de la tâche d’exécution, la tâche ne s’exécute pas.</span><span class="sxs-lookup"><span data-stu-id="371e8-747">If cancellation is requested before the task begins execution, the task does not execute.</span></span> <span data-ttu-id="371e8-748">Au lieu de cela, elle est définie sur le <xref:System.Threading.Tasks.TaskStatus.Canceled> état et lève un <xref:System.Threading.Tasks.TaskCanceledException> exception.</span><span class="sxs-lookup"><span data-stu-id="371e8-748">Instead it is set to the <xref:System.Threading.Tasks.TaskStatus.Canceled> state and throws a <xref:System.Threading.Tasks.TaskCanceledException> exception.</span></span>  
  
 <span data-ttu-id="371e8-749">Le <xref:System.Threading.Tasks.Task.Run%2A> méthode constitue une alternative plus simple à la <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="371e8-749">The <xref:System.Threading.Tasks.Task.Run%2A> method is a simpler alternative to the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> method.</span></span> <span data-ttu-id="371e8-750">Il crée une tâche avec les valeurs par défaut suivantes :</span><span class="sxs-lookup"><span data-stu-id="371e8-750">It creates a task with the following default values:</span></span>  
  
-   <span data-ttu-id="371e8-751">Son <xref:System.Threading.Tasks.Task.CreationOptions%2A> valeur de propriété est <xref:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="371e8-751">Its <xref:System.Threading.Tasks.Task.CreationOptions%2A> property value is <xref:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="371e8-752">Elle utilise le Planificateur de tâches par défaut.</span><span class="sxs-lookup"><span data-stu-id="371e8-752">It uses the default task scheduler.</span></span>  
  
 <span data-ttu-id="371e8-753">Pour plus d’informations sur la gestion des exceptions levées par des opérations de la tâche, consultez [la gestion des exceptions](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span><span class="sxs-lookup"><span data-stu-id="371e8-753">For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="371e8-754">L’exemple suivant crée des 20 tâches en boucle jusqu'à ce qu’un compteur est incrémenté à une valeur de 2 millions.</span><span class="sxs-lookup"><span data-stu-id="371e8-754">The following example creates 20 tasks that will loop until a counter is incremented to a value of 2 million.</span></span> <span data-ttu-id="371e8-755">Lorsque les 10 premières tâches atteint 2 millions, le jeton d’annulation est annulé et toutes les tâches dont les compteurs n’ont pas atteint 2 millions sont annulées.</span><span class="sxs-lookup"><span data-stu-id="371e8-755">When the first 10 tasks reach 2 million, the cancellation token is cancelled, and any tasks whose counters have not reached 2 million are cancelled.</span></span> <span data-ttu-id="371e8-756">L’exemple montre les résultats éventuels.</span><span class="sxs-lookup"><span data-stu-id="371e8-756">The example shows possible output.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Run#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/Run7.cs#7)]
 [!code-vb[System.Threading.Tasks.Task.Run#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/Run7.vb#7)]  
  
 <span data-ttu-id="371e8-757">Au lieu d’utiliser le <xref:System.AggregateException.InnerExceptions%2A> propriété pour examiner toutes les exceptions, l’exemple itère au sein de toutes les tâches pour déterminer qui ont abouti et qui ont été annulé.</span><span class="sxs-lookup"><span data-stu-id="371e8-757">Instead of using the <xref:System.AggregateException.InnerExceptions%2A> property to   examine exceptions, the example iterates all tasks to determine which have completed successfully and which have been cancelled.</span></span> <span data-ttu-id="371e8-758">Pour ceux qui ont été effectuées, il affiche la valeur retournée par la tâche.</span><span class="sxs-lookup"><span data-stu-id="371e8-758">For those that have completed, it displays the value returned by the task.</span></span>  
  
 <span data-ttu-id="371e8-759">Étant donné que l’annulation est coopérative, chaque tâche peut décider comment répondre à l’annulation.</span><span class="sxs-lookup"><span data-stu-id="371e8-759">Because cancellation is cooperative, each task can decide how to respond to cancellation.</span></span> <span data-ttu-id="371e8-760">L’exemple suivant est similaire à la première, sauf que, une fois que le jeton est annulé, les tâches de retourner le nombre d’itérations ils terminées, au lieu de lever une exception.</span><span class="sxs-lookup"><span data-stu-id="371e8-760">The following example is like the first, except that, once the token is cancelled, tasks return the number of iterations they've completed rather than throw an exception.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Run#28](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/Run28.cs#28)]
 [!code-vb[System.Threading.Tasks.Task.Run#28](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/Run28.vb#28)]  
  
 <span data-ttu-id="371e8-761">L’exemple doit toujours gérer les <xref:System.AggregateException> exception, étant donné que toutes les tâches qui n’ont pas démarré lors de l’annulation est demandée lèvent toujours une exception.</span><span class="sxs-lookup"><span data-stu-id="371e8-761">The example still must handle the <xref:System.AggregateException> exception,   since any tasks that have not started when cancellation is requested still throw an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="371e8-762">Le paramètre <paramref name="function" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-762">The <paramref name="function" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException">
          <span data-ttu-id="371e8-763">La tâche a été annulée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-763">The task has been canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="371e8-764">La <see cref="T:System.Threading.CancellationTokenSource" /> associée au <paramref name="cancellationToken" /> a été supprimée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-764">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with <paramref name="cancellationToken" /> was disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="RunSynchronously">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="371e8-765">Exécute de façon synchrone la <see cref="T:System.Threading.Tasks.Task" /> sur le <see cref="T:System.Threading.Tasks.TaskScheduler" /> actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-765">Runs the <see cref="T:System.Threading.Tasks.Task" /> synchronously on the current <see cref="T:System.Threading.Tasks.TaskScheduler" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RunSynchronously">
      <MemberSignature Language="C#" Value="public void RunSynchronously ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RunSynchronously() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.RunSynchronously" />
      <MemberSignature Language="VB.NET" Value="Public Sub RunSynchronously ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RunSynchronously();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="371e8-766">Exécute de façon synchrone la <see cref="T:System.Threading.Tasks.Task" /> sur le <see cref="T:System.Threading.Tasks.TaskScheduler" /> actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-766">Runs the <see cref="T:System.Threading.Tasks.Task" /> synchronously on the current <see cref="T:System.Threading.Tasks.TaskScheduler" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="371e8-767">En règle générale, les tâches sont exécutées de façon asynchrone sur un thread de pool de threads et ne bloquent pas le thread appelant.</span><span class="sxs-lookup"><span data-stu-id="371e8-767">Ordinarily, tasks are executed asynchronously on a thread pool thread and do not block the calling thread.</span></span> <span data-ttu-id="371e8-768">Tâches exécutées en appelant le <xref:System.Threading.Tasks.Task.RunSynchronously> méthode associés actuel <xref:System.Threading.Tasks.TaskScheduler> et sont exécutées sur le thread appelant.</span><span class="sxs-lookup"><span data-stu-id="371e8-768">Tasks executed by calling the <xref:System.Threading.Tasks.Task.RunSynchronously> method are associated with the current <xref:System.Threading.Tasks.TaskScheduler> and are run on the calling thread.</span></span> <span data-ttu-id="371e8-769">Si le planificateur cible ne prend pas en charge l’exécution de cette tâche sur le thread appelant, la tâche sera planifiée pour l’exécution sur le planificateur et bloque le thread appelant jusqu'à ce que la tâche a terminé son exécution.</span><span class="sxs-lookup"><span data-stu-id="371e8-769">If the target scheduler does not support running this task on the calling thread, the task will be scheduled for execution on the scheduler, and the calling thread will block until the task has completed execution.</span></span> <span data-ttu-id="371e8-770">Même si la tâche s’exécute de façon synchrone, le thread appelant doit toujours appeler <xref:System.Threading.Tasks.Task.Wait%2A> pour gérer les exceptions susceptibles de lever la tâche.</span><span class="sxs-lookup"><span data-stu-id="371e8-770">Even though the task runs synchronously, the calling thread should still call <xref:System.Threading.Tasks.Task.Wait%2A> to handle any exceptions that the task might throw.</span></span>  <span data-ttu-id="371e8-771">Pour plus d’informations sur la gestion des exceptions, consultez [la gestion des exceptions](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span><span class="sxs-lookup"><span data-stu-id="371e8-771">For more information on exception handling, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
 <span data-ttu-id="371e8-772">Tâches exécutées en appelant le <xref:System.Threading.Tasks.Task.RunSynchronously%2A> méthode sont instanciés en appelant un <xref:System.Threading.Tasks.Task> ou <xref:System.Threading.Tasks.Task%601> constructeur de classe.</span><span class="sxs-lookup"><span data-stu-id="371e8-772">Tasks executed by calling the <xref:System.Threading.Tasks.Task.RunSynchronously%2A> method are instantiated by calling a <xref:System.Threading.Tasks.Task> or <xref:System.Threading.Tasks.Task%601> class constructor.</span></span> <span data-ttu-id="371e8-773">La tâche à exécuter de façon synchrone doit être dans le <xref:System.Threading.Tasks.TaskStatus.Created> état.</span><span class="sxs-lookup"><span data-stu-id="371e8-773">The task to be run synchronously must be in the <xref:System.Threading.Tasks.TaskStatus.Created> state.</span></span> <span data-ttu-id="371e8-774">Une tâche peut être démarrée et exécuter une seule fois.</span><span class="sxs-lookup"><span data-stu-id="371e8-774">A task may be started and run only once.</span></span> <span data-ttu-id="371e8-775">Toute tentative pour planifier une tâche une deuxième fois entraîne une exception.</span><span class="sxs-lookup"><span data-stu-id="371e8-775">Any attempts to schedule a task a second time results in an exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="371e8-776">L’exemple suivant compare une tâche exécutée en appelant le <xref:System.Threading.Tasks.Task.RunSynchronously%2A> méthode avec une exécution asynchrone.</span><span class="sxs-lookup"><span data-stu-id="371e8-776">The following example compares a task executed by calling the <xref:System.Threading.Tasks.Task.RunSynchronously%2A> method with one executed asynchronously.</span></span> <span data-ttu-id="371e8-777">Dans les deux cas, les tâches exécutent des expressions lambda identiques qui affichent l’ID de tâche et l’ID du thread sur lequel la tâche s’exécute.</span><span class="sxs-lookup"><span data-stu-id="371e8-777">In both cases, the tasks execute identical lambda expressions that display the task ID and the ID of the thread on which the task is running.</span></span> <span data-ttu-id="371e8-778">La tâche calcule la somme des entiers compris entre 1 et 1 000 000.</span><span class="sxs-lookup"><span data-stu-id="371e8-778">The task calculates the sum of the integers between 1 and 1,000,000.</span></span> <span data-ttu-id="371e8-779">Comme le montre la sortie de l’exemple, la tâche est exécutée en appelant le <xref:System.Threading.Tasks.Task.RunSynchronously%2A> méthode s’exécute sur le thread d’application n’est pas le cas de la tâche asynchrone.</span><span class="sxs-lookup"><span data-stu-id="371e8-779">As the output from the example shows, the task executed by calling the <xref:System.Threading.Tasks.Task.RunSynchronously%2A> method runs on the application thread, while the asynchronous task does not.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.RunSynchronously#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.runsynchronously/cs/runsynchronously1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.RunSynchronously#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.runsynchronously/vb/runsynchronously1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="371e8-780">L’instance <see cref="T:System.Threading.Tasks.Task" /> a été supprimée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-780">The <see cref="T:System.Threading.Tasks.Task" /> instance has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="371e8-781">La <see cref="T:System.Threading.Tasks.Task" /> n’est pas dans un état valide pour être démarrée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-781">The <see cref="T:System.Threading.Tasks.Task" /> is not in a valid state to be started.</span>
          </span>
          <span data-ttu-id="371e8-782">Elle peut avoir déjà été démarrée, exécutée ou annulée, ou créée d’une manière qui ne prend pas en charge la planification directe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-782">It may have already been started, executed, or canceled, or it may have been created in a manner that doesn't support direct scheduling.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="RunSynchronously">
      <MemberSignature Language="C#" Value="public void RunSynchronously (System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RunSynchronously(class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.RunSynchronously(System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RunSynchronously (scheduler As TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RunSynchronously(System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="scheduler">
          <span data-ttu-id="371e8-783">Planificateur sur lequel tenter d'exécuter cette tâche inline.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-783">The scheduler on which to attempt to run this task inline.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="371e8-784">Exécute de façon synchrone le <see cref="T:System.Threading.Tasks.Task" /> sur le <see cref="T:System.Threading.Tasks.TaskScheduler" /> fourni.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-784">Runs the <see cref="T:System.Threading.Tasks.Task" /> synchronously on the <see cref="T:System.Threading.Tasks.TaskScheduler" /> provided.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="371e8-785">Tâches exécutées en appelant le <xref:System.Threading.Tasks.Task.RunSynchronously%2A> méthode sont instanciés en appelant un <xref:System.Threading.Tasks.Task> ou <xref:System.Threading.Tasks.Task%601> constructeur de classe.</span><span class="sxs-lookup"><span data-stu-id="371e8-785">Tasks executed by calling the <xref:System.Threading.Tasks.Task.RunSynchronously%2A> method are instantiated by calling a <xref:System.Threading.Tasks.Task> or <xref:System.Threading.Tasks.Task%601> class constructor.</span></span> <span data-ttu-id="371e8-786">La tâche à exécuter de façon synchrone doit être dans le <xref:System.Threading.Tasks.TaskStatus.Created> état.</span><span class="sxs-lookup"><span data-stu-id="371e8-786">The task to be run synchronously must be in the <xref:System.Threading.Tasks.TaskStatus.Created> state.</span></span> <span data-ttu-id="371e8-787">Une tâche peut être démarrée et exécuter une seule fois.</span><span class="sxs-lookup"><span data-stu-id="371e8-787">A task may be started and run only once.</span></span> <span data-ttu-id="371e8-788">Toute tentative pour planifier une tâche une deuxième fois entraîne une exception.</span><span class="sxs-lookup"><span data-stu-id="371e8-788">Any attempts to schedule a task a second time results in an exception.</span></span>  
  
 <span data-ttu-id="371e8-789">Si le planificateur cible ne prend pas en charge l’exécution de cette tâche sur le thread actuel, la tâche sera planifiée pour l’exécution sur le planificateur et bloque le thread actuel jusqu'à ce que la tâche a terminé son exécution.</span><span class="sxs-lookup"><span data-stu-id="371e8-789">If the target scheduler does not support running this task on the current thread, the task will be scheduled for execution on the scheduler, and the current thread will block until the task has completed execution.</span></span> <span data-ttu-id="371e8-790">Pour cette raison, le thread appelant n’avez pas besoin d’appeler une méthode telle que <xref:System.Threading.Tasks.Task.Wait%2A> pour vous assurer que la tâche a terminé son exécution.</span><span class="sxs-lookup"><span data-stu-id="371e8-790">Because of this, the calling thread does not need to call a method such as <xref:System.Threading.Tasks.Task.Wait%2A> to ensure that the task has completed execution.</span></span> <span data-ttu-id="371e8-791">Pour plus d’informations sur la gestion des exceptions pour les opérations de tâche, consultez [la gestion des exceptions](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span><span class="sxs-lookup"><span data-stu-id="371e8-791">For more information on exception handling for task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="371e8-792">L’instance <see cref="T:System.Threading.Tasks.Task" /> a été supprimée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-792">The <see cref="T:System.Threading.Tasks.Task" /> instance has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="371e8-793">L'argument <paramref name="scheduler" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-793">The <paramref name="scheduler" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="371e8-794">La <see cref="T:System.Threading.Tasks.Task" /> n’est pas dans un état valide pour être démarrée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-794">The <see cref="T:System.Threading.Tasks.Task" /> is not in a valid state to be started.</span>
          </span>
          <span data-ttu-id="371e8-795">Elle peut avoir déjà été démarrée, exécutée ou annulée, ou créée d’une manière qui ne prend pas en charge la planification directe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-795">It may have already been started, executed, or canceled, or it may have been created in a manner that doesn't support direct scheduling.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Tasks.TaskScheduler" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Start">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="371e8-796">Démarre <see cref="T:System.Threading.Tasks.Task" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-796">Starts the <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="371e8-797">Démarre la <see cref="T:System.Threading.Tasks.Task" />, en planifiant son exécution selon le <see cref="T:System.Threading.Tasks.TaskScheduler" /> actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-797">Starts the <see cref="T:System.Threading.Tasks.Task" />, scheduling it for execution to the current <see cref="T:System.Threading.Tasks.TaskScheduler" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="371e8-798">Une tâche peut être démarrée et exécuter une seule fois.</span><span class="sxs-lookup"><span data-stu-id="371e8-798">A task may be started and run only once.</span></span> <span data-ttu-id="371e8-799">Toute tentative pour planifier une tâche entraîne une exception.</span><span class="sxs-lookup"><span data-stu-id="371e8-799">Any attempts to schedule a task a second time will result in an exception.</span></span>  
  
 <span data-ttu-id="371e8-800">Le <xref:System.Threading.Tasks.Task.Start%2A> est utilisée pour exécuter une tâche qui a été créée en appelant une de le <xref:System.Threading.Tasks.Task> constructeurs.</span><span class="sxs-lookup"><span data-stu-id="371e8-800">The <xref:System.Threading.Tasks.Task.Start%2A> is used to execute a task that has been created by calling one of the <xref:System.Threading.Tasks.Task> constructors.</span></span> <span data-ttu-id="371e8-801">En règle générale, cela lorsque vous avez besoin de séparer la création de la tâche à partir de son exécution, par exemple quand vous exécutez de manière conditionnelle les tâches que vous avez créée.</span><span class="sxs-lookup"><span data-stu-id="371e8-801">Typically, you do this when you need to separate the task's creation from its execution, such as when you conditionally execute tasks that you've created.</span></span> <span data-ttu-id="371e8-802">Pour les cas les plus courants dans lesquels vous n’avez pas besoin de séparer l’instanciation de tâche à partir de l’exécution, nous vous recommandons d’appeler une surcharge de la <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> ou <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="371e8-802">For the more common case in which you don't need to separate  task instantiation from execution, we recommend that you call an overload of the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> or <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="371e8-803">Pour plus d’informations sur la gestion des exceptions levées par des opérations de la tâche, consultez [la gestion des exceptions](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span><span class="sxs-lookup"><span data-stu-id="371e8-803">For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="371e8-804">L’exemple suivant appelle la <xref:System.Threading.Tasks.Task.%23ctor%28System.Action%29> constructeur pour instancier un nouvel <xref:System.Threading.Tasks.Task> objet qui affiche sa tâche ID et l’ID de thread managé, puis exécute une boucle.</span><span class="sxs-lookup"><span data-stu-id="371e8-804">The following example calls the <xref:System.Threading.Tasks.Task.%23ctor%28System.Action%29> constructor to instantiate a new <xref:System.Threading.Tasks.Task> object that displays its task ID and managed thread ID and then executes a loop.</span></span> <span data-ttu-id="371e8-805">Il appelle ensuite la <xref:System.Threading.Tasks.Task.Start%2A> méthode à exécuter la tâche.</span><span class="sxs-lookup"><span data-stu-id="371e8-805">It then calls the <xref:System.Threading.Tasks.Task.Start%2A> method to execute the task.</span></span>  <span data-ttu-id="371e8-806">Comme il s’agit d’une application console, l’appel à la <xref:System.Threading.Tasks.Task.Wait%2A> méthode est nécessaire pour empêcher l’arrêt avant la fin de la tâche d’exécution de l’application.</span><span class="sxs-lookup"><span data-stu-id="371e8-806">Since this is a console app, the call to the <xref:System.Threading.Tasks.Task.Wait%2A> method is necessary to prevent the app from terminating before the task finishes execution.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Start#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.start/cs/Start1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.Start#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.start/vb/Start1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="371e8-807">L’instance <see cref="T:System.Threading.Tasks.Task" /> a été supprimée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-807">The <see cref="T:System.Threading.Tasks.Task" /> instance has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="371e8-808">La <see cref="T:System.Threading.Tasks.Task" /> n’est pas dans un état valide pour être démarrée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-808">The <see cref="T:System.Threading.Tasks.Task" /> is not in a valid state to be started.</span>
          </span>
          <span data-ttu-id="371e8-809">Elle peut avoir déjà été démarrée, exécutée ou annulée, ou créée d’une manière qui ne prend pas en charge la planification directe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-809">It may have already been started, executed, or canceled, or it may have been created in a manner that doesn't support direct scheduling.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start (System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start(class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Start(System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start (scheduler As TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start(System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="scheduler">
          <span data-ttu-id="371e8-810">
            <see cref="T:System.Threading.Tasks.TaskScheduler" /> avec lequel associer et exécuter cette tâche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-810">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> with which to associate and execute this task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="371e8-811">Démarre la <see cref="T:System.Threading.Tasks.Task" />, en planifiant son exécution sur le <see cref="T:System.Threading.Tasks.TaskScheduler" /> spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-811">Starts the <see cref="T:System.Threading.Tasks.Task" />, scheduling it for execution to the specified <see cref="T:System.Threading.Tasks.TaskScheduler" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="371e8-812">Une tâche peut uniquement être démarrée et qu’une seule exécution.</span><span class="sxs-lookup"><span data-stu-id="371e8-812">A task may only be started and run only once.</span></span> <span data-ttu-id="371e8-813">Toute tentative pour planifier une tâche entraîne une exception.</span><span class="sxs-lookup"><span data-stu-id="371e8-813">Any attempts to schedule a task a second time will result in an exception.</span></span>  
  
 <span data-ttu-id="371e8-814">Pour plus d’informations sur la gestion des exceptions levées par des opérations de la tâche, consultez [la gestion des exceptions](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span><span class="sxs-lookup"><span data-stu-id="371e8-814">For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="371e8-815">L'argument <paramref name="scheduler" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-815">The <paramref name="scheduler" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="371e8-816">La <see cref="T:System.Threading.Tasks.Task" /> n’est pas dans un état valide pour être démarrée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-816">The <see cref="T:System.Threading.Tasks.Task" /> is not in a valid state to be started.</span>
          </span>
          <span data-ttu-id="371e8-817">Elle peut avoir déjà été démarrée, exécutée ou annulée, ou créée d’une manière qui ne prend pas en charge la planification directe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-817">It may have already been started, executed, or canceled, or it may have been created in a manner that doesn't support direct scheduling.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="371e8-818">L’instance <see cref="T:System.Threading.Tasks.Task" /> a été supprimée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-818">The <see cref="T:System.Threading.Tasks.Task" /> instance has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.Threading.Tasks.TaskSchedulerException">
          <span data-ttu-id="371e8-819">Le Planificateur n’a pas pu mettre cette tâche en file d’attente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-819">The scheduler was unable to queue this task.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Status">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.TaskStatus Status { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Threading.Tasks.TaskStatus Status" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.Status" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Status As TaskStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::Tasks::TaskStatus Status { System::Threading::Tasks::TaskStatus get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.TaskStatus</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="371e8-820">Obtient le <see cref="T:System.Threading.Tasks.TaskStatus" /> de cette tâche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-820">Gets the <see cref="T:System.Threading.Tasks.TaskStatus" /> of this task.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="371e8-821">
            <see cref="T:System.Threading.Tasks.TaskStatus" /> actuel de cette instance de tâche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-821">The current <see cref="T:System.Threading.Tasks.TaskStatus" /> of this task instance.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="371e8-822">La récupération de la valeur de la <xref:System.Threading.Tasks.Task.Status%2A?displayProperty=nameWithType> propriété ne bloque pas le thread appelant jusqu'à ce que la tâche est terminée.</span><span class="sxs-lookup"><span data-stu-id="371e8-822">Retrieving the value of the <xref:System.Threading.Tasks.Task.Status%2A?displayProperty=nameWithType> property does not block the calling thread until the task has completed.</span></span>  
  
 <span data-ttu-id="371e8-823">Pour plus d’informations et obtenir un exemple, consultez [chaînage des tâches à l’aide de tâches de Continuation](~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md) et [Comment : annuler une tâche et ses enfants](~/docs/standard/parallel-programming/how-to-cancel-a-task-and-its-children.md).</span><span class="sxs-lookup"><span data-stu-id="371e8-823">For more information and an example, see [Chaining Tasks by Using Continuation Tasks](~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md) and [How to: Cancel a Task and Its Children](~/docs/standard/parallel-programming/how-to-cancel-a-task-and-its-children.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="371e8-824">L’exemple suivant crée des 20 tâches en boucle jusqu'à ce qu’un compteur est incrémenté à une valeur de 2 millions.</span><span class="sxs-lookup"><span data-stu-id="371e8-824">The following example creates 20 tasks that will loop until a counter is incremented to a value of 2 million.</span></span> <span data-ttu-id="371e8-825">Lorsque les 10 premières tâches atteint 2 millions, le jeton d’annulation est annulé et toutes les tâches dont les compteurs n’ont pas atteint 2 millions sont annulées.</span><span class="sxs-lookup"><span data-stu-id="371e8-825">When the first 10 tasks reach 2 million, the cancellation token is cancelled, and any tasks whose counters have not reached 2 million are cancelled.</span></span> <span data-ttu-id="371e8-826">L’exemple examine ensuite le <xref:System.Threading.Tasks.Task.Status%2A> propriété de chaque tâche pour indiquer s’il s’est terminée correctement ou a été annulée.</span><span class="sxs-lookup"><span data-stu-id="371e8-826">The example then examines the <xref:System.Threading.Tasks.Task.Status%2A> property of each task to indicate whether it completed successfully or was cancelled.</span></span> <span data-ttu-id="371e8-827">Pour ceux qui s’est terminée, il affiche la valeur retournée par la tâche.</span><span class="sxs-lookup"><span data-stu-id="371e8-827">For those that completed, it displays the value returned by the task.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Run#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/Run7.cs#7)]
 [!code-vb[System.Threading.Tasks.Task.Run#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/Run7.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IAsyncResult.AsyncWaitHandle">
      <MemberSignature Language="C#" Value="System.Threading.WaitHandle System.IAsyncResult.AsyncWaitHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.WaitHandle System.IAsyncResult.AsyncWaitHandle" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.System#IAsyncResult#AsyncWaitHandle" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property AsyncWaitHandle As WaitHandle Implements IAsyncResult.AsyncWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="property System::Threading::WaitHandle ^ System.IAsyncResult.AsyncWaitHandle { System::Threading::WaitHandle ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.IAsyncResult.AsyncWaitHandle</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.WaitHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="371e8-828">Obtient un <see cref="T:System.Threading.WaitHandle" /> qui peut être utilisé en attendant la fin de la tâche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-828">Gets a <see cref="T:System.Threading.WaitHandle" /> that can be used to wait for the task to complete.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="371e8-829">
            <see cref="T:System.Threading.WaitHandle" /> qui peut être utilisé pour attendre la fin de la tâche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-829">A <see cref="T:System.Threading.WaitHandle" /> that can be used to wait for the task to complete.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="371e8-830">À l’aide de la fonctionnalité d’attente fournie par <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType> est préférable à l’utilisation de <xref:System.IAsyncResult.AsyncWaitHandle%2A> pour une fonctionnalité similaire.</span><span class="sxs-lookup"><span data-stu-id="371e8-830">Using the wait functionality provided by <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType> is preferable to using <xref:System.IAsyncResult.AsyncWaitHandle%2A> for similar functionality.</span></span> <span data-ttu-id="371e8-831">Pour plus d’informations, consultez la section « En attente de tâches » dans [basé sur des tâches de programmation asynchrone](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md) et [bibliothèque parallèle de tâches à l’aide avec d’autres modèles asynchrones](~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md).</span><span class="sxs-lookup"><span data-stu-id="371e8-831">For more information, see the "Waiting on Tasks" section in [Task-based Asynchronous Programming](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md) and [Using TPL with Other Asynchronous Patterns](~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="371e8-832">
            <see cref="T:System.Threading.Tasks.Task" /> a été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-832">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.IAsyncResult.CompletedSynchronously">
      <MemberSignature Language="C#" Value="bool System.IAsyncResult.CompletedSynchronously { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.IAsyncResult.CompletedSynchronously" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.System#IAsyncResult#CompletedSynchronously" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property CompletedSynchronously As Boolean Implements IAsyncResult.CompletedSynchronously" />
      <MemberSignature Language="C++ CLI" Value="property bool System.IAsyncResult.CompletedSynchronously { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.IAsyncResult.CompletedSynchronously</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="371e8-833">Obtient une indication précisant si l’opération s’est terminée de manière synchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-833">Gets an indication of whether the operation completed synchronously.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="371e8-834">
            <see langword="true" /> si l'opération s'est terminée de manière synchrone ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-834">
              <see langword="true" /> if the operation completed synchronously; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Wait">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="371e8-835">Attend la fin de l'exécution de <see cref="T:System.Threading.Tasks.Task" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-835">Waits for the <see cref="T:System.Threading.Tasks.Task" /> to complete execution.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public void Wait ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Wait() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Wait" />
      <MemberSignature Language="VB.NET" Value="Public Sub Wait ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Wait();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="371e8-836">Attend la fin de l'exécution de <see cref="T:System.Threading.Tasks.Task" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-836">Waits for the <see cref="T:System.Threading.Tasks.Task" /> to complete execution.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="371e8-837"><xref:System.Threading.Tasks.Task.Wait%2A> est une méthode de synchronisation qui oblige le thread appelant à attendre la fin de la tâche en cours.</span><span class="sxs-lookup"><span data-stu-id="371e8-837"><xref:System.Threading.Tasks.Task.Wait%2A> is a synchronization method that causes the calling thread to wait until the current task has completed.</span></span> <span data-ttu-id="371e8-838">Si l’exécution de la tâche en cours n’a pas démarré, la méthode Wait tente de supprimer la tâche du planificateur et de l’exécuter en ligne sur le thread actuel.</span><span class="sxs-lookup"><span data-stu-id="371e8-838">If the current task has not started execution, the Wait method attempts to remove the task from the scheduler and execute it inline on the current thread.</span></span> <span data-ttu-id="371e8-839">S’il est impossible de le faire, ou si la tâche en cours a déjà commencé l’exécution, elle bloque le thread appelant jusqu'à ce que la tâche se termine.</span><span class="sxs-lookup"><span data-stu-id="371e8-839">If it is unable to do that, or if the current task has already started execution, it blocks the calling thread until the task completes.</span></span> <span data-ttu-id="371e8-840">Pour plus d’informations, consultez [Task.Wait et la fonctionnalité « inline »](http://blogs.msdn.com/b/pfxteam/archive/2009/10/15/9907713.aspx) dans le blog programmation parallèle avec .NET.</span><span class="sxs-lookup"><span data-stu-id="371e8-840">For more information, see [Task.Wait and "Inlining"](http://blogs.msdn.com/b/pfxteam/archive/2009/10/15/9907713.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
 <span data-ttu-id="371e8-841">Pour plus d’informations et obtenir un exemple, consultez [Comment : attendre une ou plusieurs tâches](http://msdn.microsoft.com/library/79cb522b-9c93-46ed-b23a-c06908f3a374).</span><span class="sxs-lookup"><span data-stu-id="371e8-841">For more information and an example, see [How to: Wait on One or More Tasks to Complete](http://msdn.microsoft.com/library/79cb522b-9c93-46ed-b23a-c06908f3a374).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="371e8-842">L’exemple suivant démarre une tâche qui génère un million des entiers aléatoires compris entre 0 et 100 et calcule leur moyenne.</span><span class="sxs-lookup"><span data-stu-id="371e8-842">The following example starts a task that generates one million random integers between 0 and 100 and computes their mean.</span></span> <span data-ttu-id="371e8-843">L’exemple utilise le <xref:System.Threading.Tasks.Task.Wait%2A> pour s’assurer que la tâche se termine avant l’arrêt de l’application.</span><span class="sxs-lookup"><span data-stu-id="371e8-843">The example uses the <xref:System.Threading.Tasks.Task.Wait%2A> method to ensure that the task completes before the application terminates.</span></span> <span data-ttu-id="371e8-844">Dans le cas contraire, car il s’agit d’une application console, l’exemple se terminerait avant que la tâche peut calculer et afficher la moyenne.</span><span class="sxs-lookup"><span data-stu-id="371e8-844">Otherwise, because this is a console application, the example would terminate before the task can compute and display the mean.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Wait#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.wait/cs/wait1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.Wait#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.wait/vb/wait1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="371e8-845">
            <see cref="T:System.Threading.Tasks.Task" /> a été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-845">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="371e8-846">La tâche a été annulée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-846">The task was canceled.</span>
          </span>
          <span data-ttu-id="371e8-847">La collection <see cref="P:System.AggregateException.InnerExceptions" /> contient un objet <see cref="T:System.Threading.Tasks.TaskCanceledException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-847">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains a <see cref="T:System.Threading.Tasks.TaskCanceledException" /> object.</span>
          </span>
          <span data-ttu-id="371e8-848">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-848">-or-</span>
          </span>
          <span data-ttu-id="371e8-849">Une exception a été levée pendant l’exécution de la tâche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-849">An exception was thrown during the execution of the task.</span>
          </span>
          <span data-ttu-id="371e8-850">La collection <see cref="P:System.AggregateException.InnerExceptions" /> contient des informations sur l’exception ou les exceptions.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-850">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains information about the exception or exceptions.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public bool Wait (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Wait(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Wait(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Wait (millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Wait(int millisecondsTimeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout">
          <span data-ttu-id="371e8-851">Nombre de millisecondes à attendre, ou <see cref="F:System.Threading.Timeout.Infinite" /> (-1) pour un délai d'attente infini.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-851">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="371e8-852">Attend la fin de l'exécution de la <see cref="T:System.Threading.Tasks.Task" /> en un nombre de millisecondes spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-852">Waits for the <see cref="T:System.Threading.Tasks.Task" /> to complete execution within a specified number of milliseconds.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="371e8-853">
            <see langword="true" /> si l'exécution de <see cref="T:System.Threading.Tasks.Task" /> s'est terminée dans le délai imparti ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-853">
              <see langword="true" /> if the <see cref="T:System.Threading.Tasks.Task" /> completed execution within the allotted time; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="371e8-854"><xref:System.Threading.Tasks.Task.Wait%28System.Int32%29> est une méthode de synchronisation qui oblige le thread appelant à attendre pour l’instance actuelle de la tâche à effectuer jusqu'à ce qu’une des actions suivantes se produit :</span><span class="sxs-lookup"><span data-stu-id="371e8-854"><xref:System.Threading.Tasks.Task.Wait%28System.Int32%29> is a synchronization method that causes the calling thread to wait for the current task instance to complete until one of the following occurs:</span></span>  
  
-   <span data-ttu-id="371e8-855">La tâche se termine avec succès.</span><span class="sxs-lookup"><span data-stu-id="371e8-855">The task completes successfully.</span></span>  
  
-   <span data-ttu-id="371e8-856">La tâche est annulée ou lève une exception.</span><span class="sxs-lookup"><span data-stu-id="371e8-856">The task itself is canceled or throws an exception.</span></span> <span data-ttu-id="371e8-857">Dans ce cas, vous gérez un <xref:System.AggregateException> exception.</span><span class="sxs-lookup"><span data-stu-id="371e8-857">In this case, you handle an <xref:System.AggregateException> exception.</span></span> <span data-ttu-id="371e8-858">Le <xref:System.AggregateException.InnerExceptions%2A?displayProperty=nameWithType> propriété contient des détails sur l’exception ou des exceptions.</span><span class="sxs-lookup"><span data-stu-id="371e8-858">The <xref:System.AggregateException.InnerExceptions%2A?displayProperty=nameWithType> property contains details about the exception or exceptions.</span></span>  
  
-   <span data-ttu-id="371e8-859">L’intervalle défini par `millisecondsTimeout` s’écoule.</span><span class="sxs-lookup"><span data-stu-id="371e8-859">The interval defined by `millisecondsTimeout` elapses.</span></span> <span data-ttu-id="371e8-860">Dans ce cas, le thread actuel reprend l’exécution et la méthode retourne `false`.</span><span class="sxs-lookup"><span data-stu-id="371e8-860">In this case, the current thread resumes execution and the method returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="371e8-861">L’exemple suivant démarre une tâche qui génère des entiers aléatoires cinq millions comprise entre 0 et 100 et calcule leur moyenne.</span><span class="sxs-lookup"><span data-stu-id="371e8-861">The following example starts a task that generates five million random integers between 0 and 100 and computes their mean.</span></span> <span data-ttu-id="371e8-862">L’exemple utilise le <xref:System.Threading.Tasks.Task.Wait%28System.Int32%29> méthode pour attendre l’application terminée dans 150 millisecondes.</span><span class="sxs-lookup"><span data-stu-id="371e8-862">The example uses the <xref:System.Threading.Tasks.Task.Wait%28System.Int32%29> method to wait for the application to complete within 150 milliseconds.</span></span> <span data-ttu-id="371e8-863">Si l’application s’exécute normalement, la tâche affiche la somme et la moyenne des nombres aléatoires qui il a généré.</span><span class="sxs-lookup"><span data-stu-id="371e8-863">If the application completes normally, the task displays the sum and mean of the random numbers that it has generated.</span></span> <span data-ttu-id="371e8-864">Si l’intervalle de délai d’attente est écoulé, l’exemple affiche un message avant sa fermeture.</span><span class="sxs-lookup"><span data-stu-id="371e8-864">If the timeout interval has elapsed, the example displays a message before it terminates.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Wait#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.wait/cs/Wait5.cs#5)]
 [!code-vb[System.Threading.Tasks.Task.Wait#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.wait/vb/Wait5.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="371e8-865">
            <see cref="T:System.Threading.Tasks.Task" /> a été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-865">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="371e8-866">
            <paramref name="millisecondsTimeout" /> est un nombre négatif différent de -1, qui représente un délai d’attente infini.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-866">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="371e8-867">La tâche a été annulée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-867">The task was canceled.</span>
          </span>
          <span data-ttu-id="371e8-868">La collection <see cref="P:System.AggregateException.InnerExceptions" /> contient un objet <see cref="T:System.Threading.Tasks.TaskCanceledException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-868">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains a <see cref="T:System.Threading.Tasks.TaskCanceledException" /> object.</span>
          </span>
          <span data-ttu-id="371e8-869">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-869">-or-</span>
          </span>
          <span data-ttu-id="371e8-870">Une exception a été levée pendant l’exécution de la tâche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-870">An exception was thrown during the execution of the task.</span>
          </span>
          <span data-ttu-id="371e8-871">La collection <see cref="P:System.AggregateException.InnerExceptions" /> contient des informations sur l’exception ou les exceptions.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-871">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains information about the exception or exceptions.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public void Wait (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Wait(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Wait(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Wait(System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">
          <span data-ttu-id="371e8-872">Jeton d’annulation à observer en attendant que la tâche se termine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-872">A cancellation token to observe while waiting for the task to complete.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="371e8-873">Attend la fin de l'exécution de <see cref="T:System.Threading.Tasks.Task" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-873">Waits for the <see cref="T:System.Threading.Tasks.Task" /> to complete execution.</span>
          </span>
          <span data-ttu-id="371e8-874">L'attente se termine si un jeton d'annulation est annulé avant la fin de la tâche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-874">The wait terminates if a cancellation token is canceled before the task completes.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="371e8-875">Le <xref:System.Threading.Tasks.Task.Wait%28System.Threading.CancellationToken%29> méthode crée une attente annulable ; autrement dit, il oblige le thread en cours d’attente jusqu'à ce qu’une des actions suivantes se produit :</span><span class="sxs-lookup"><span data-stu-id="371e8-875">The <xref:System.Threading.Tasks.Task.Wait%28System.Threading.CancellationToken%29> method creates a cancelable wait; that is, it causes the current thread to wait until one of the following occurs:</span></span>  
  
-   <span data-ttu-id="371e8-876">La tâche se termine.</span><span class="sxs-lookup"><span data-stu-id="371e8-876">The task completes.</span></span>  
  
-   <span data-ttu-id="371e8-877">Le jeton d’annulation est annulé.</span><span class="sxs-lookup"><span data-stu-id="371e8-877">The cancellation token is canceled.</span></span> <span data-ttu-id="371e8-878">Dans ce cas, l’appel à la <xref:System.Threading.Tasks.Task.Wait%28System.Threading.CancellationToken%29> méthode lève une exception une <xref:System.OperationCanceledException>.</span><span class="sxs-lookup"><span data-stu-id="371e8-878">In this case, the call to the <xref:System.Threading.Tasks.Task.Wait%28System.Threading.CancellationToken%29> method throws an <xref:System.OperationCanceledException>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="371e8-879">L’annulation de la `cancellationToken` jeton d’annulation n’a aucun effet sur la tâche en cours d’exécution, sauf si elle a également été passé le jeton d’annulation et est prêt à gérer l’annulation.</span><span class="sxs-lookup"><span data-stu-id="371e8-879">Canceling the `cancellationToken` cancellation token has no effect on the running task unless it has also been passed the cancellation token and is prepared to handle cancellation.</span></span> <span data-ttu-id="371e8-880">En passant le `cancellationToken` objet à cette méthode permet simplement de l’attente d’être annulée.</span><span class="sxs-lookup"><span data-stu-id="371e8-880">Passing the `cancellationToken` object to this method simply allows the wait to be canceled.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="371e8-881">L’exemple suivant illustre l’utilisation simple d’un jeton d’annulation pour annuler l’attente de la fin d’une tâche.</span><span class="sxs-lookup"><span data-stu-id="371e8-881">The following example illustrates the simple use of a cancellation token to cancel waiting for a task's completion.</span></span> <span data-ttu-id="371e8-882">Une tâche est lancé, appelle le <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType> méthode pour annuler toute la source de jeton jetons d’annulation, puis les retards pendant cinq secondes.</span><span class="sxs-lookup"><span data-stu-id="371e8-882">A task is launched, calls the <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType> method to cancel any of the token source's cancellation tokens, and then delays for five seconds.</span></span> <span data-ttu-id="371e8-883">Notez que la tâche elle-même n’a pas été passée le jeton d’annulation et n’est pas annulable.</span><span class="sxs-lookup"><span data-stu-id="371e8-883">Note that the task itself has not been passed the cancellation token and is not cancelable.</span></span> <span data-ttu-id="371e8-884">Le thread de l’application appelle la tâche <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType> méthode pour attendre la tâche se termine, mais que l’attente est annulée une fois que le jeton d’annulation est annulé et un <xref:System.OperationCanceledException> est levée.</span><span class="sxs-lookup"><span data-stu-id="371e8-884">The application thread calls the task's <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType> method to wait for the task to complete, but the wait is canceled once the cancellation token is cancelled and an <xref:System.OperationCanceledException> is thrown.</span></span> <span data-ttu-id="371e8-885">Le Gestionnaire d’exceptions signale l’exception et puis se met en veille pendant six secondes.</span><span class="sxs-lookup"><span data-stu-id="371e8-885">The exception handler reports the exception and then sleeps for six seconds.</span></span> <span data-ttu-id="371e8-886">Comme le montre la sortie de l’exemple, ce délai permet à la tâche à exécuter dans le <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> état.</span><span class="sxs-lookup"><span data-stu-id="371e8-886">As the output from the example shows, that delay allows the task to complete in the <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Wait#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.wait/cs/wait3.cs#3)]
 [!code-vb[System.Threading.Tasks.Task.Wait#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.wait/vb/wait3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="371e8-887">
            <paramref name="cancellationToken" /> a été annulé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-887">The <paramref name="cancellationToken" /> was canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="371e8-888">La tâche a été supprimée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-888">The task has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="371e8-889">La tâche a été annulée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-889">The task was canceled.</span>
          </span>
          <span data-ttu-id="371e8-890">La collection <see cref="P:System.AggregateException.InnerExceptions" /> contient un objet <see cref="T:System.Threading.Tasks.TaskCanceledException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-890">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains a <see cref="T:System.Threading.Tasks.TaskCanceledException" /> object.</span>
          </span>
          <span data-ttu-id="371e8-891">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-891">-or-</span>
          </span>
          <span data-ttu-id="371e8-892">Une exception a été levée pendant l’exécution de la tâche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-892">An exception was thrown during the execution of the task.</span>
          </span>
          <span data-ttu-id="371e8-893">La collection <see cref="P:System.AggregateException.InnerExceptions" /> contient des informations sur l’exception ou les exceptions.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-893">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains information about the exception or exceptions.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public bool Wait (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Wait(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Wait(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Wait (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Wait(TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="371e8-894">
            <see cref="T:System.TimeSpan" /> qui représente le nombre de millièmes de secondes à attendre ou <see cref="T:System.TimeSpan" /> qui représente -1 millième de seconde, pour attendre indéfiniment.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-894">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="371e8-895">Attend la fin de l'exécution de la <see cref="T:System.Threading.Tasks.Task" /> dans un intervalle de temps spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-895">Waits for the <see cref="T:System.Threading.Tasks.Task" /> to complete execution within a specified time interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="371e8-896">
            <see langword="true" /> si l'exécution de <see cref="T:System.Threading.Tasks.Task" /> s'est terminée dans le délai imparti ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-896">
              <see langword="true" /> if the <see cref="T:System.Threading.Tasks.Task" /> completed execution within the allotted time; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="371e8-897"><xref:System.Threading.Tasks.Task.Wait%28System.TimeSpan%29> est une méthode de synchronisation qui oblige le thread appelant à attendre pour l’instance actuelle de la tâche à effectuer jusqu'à ce qu’une des actions suivantes se produit :</span><span class="sxs-lookup"><span data-stu-id="371e8-897"><xref:System.Threading.Tasks.Task.Wait%28System.TimeSpan%29> is a synchronization method that causes the calling thread to wait for the current task instance to complete until one of the following occurs:</span></span>  
  
-   <span data-ttu-id="371e8-898">La tâche se termine avec succès.</span><span class="sxs-lookup"><span data-stu-id="371e8-898">The task completes successfully.</span></span>  
  
-   <span data-ttu-id="371e8-899">La tâche est annulée ou lève une exception.</span><span class="sxs-lookup"><span data-stu-id="371e8-899">The task itself is canceled or throws an exception.</span></span> <span data-ttu-id="371e8-900">Dans ce cas, vous gérez un <xref:System.AggregateException> exception.</span><span class="sxs-lookup"><span data-stu-id="371e8-900">In this case, you handle an <xref:System.AggregateException> exception.</span></span> <span data-ttu-id="371e8-901">Le <xref:System.AggregateException.InnerExceptions%2A?displayProperty=nameWithType> propriété contient des détails sur l’exception ou des exceptions.</span><span class="sxs-lookup"><span data-stu-id="371e8-901">The <xref:System.AggregateException.InnerExceptions%2A?displayProperty=nameWithType> property contains details about the exception or exceptions.</span></span>  
  
-   <span data-ttu-id="371e8-902">L’intervalle défini par `timeout` s’écoule.</span><span class="sxs-lookup"><span data-stu-id="371e8-902">The interval defined by `timeout` elapses.</span></span> <span data-ttu-id="371e8-903">Dans ce cas, le thread actuel reprend l’exécution et la méthode retourne `false`.</span><span class="sxs-lookup"><span data-stu-id="371e8-903">In this case, the current thread resumes execution and the method returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="371e8-904">L’exemple suivant démarre une tâche qui génère des entiers aléatoires cinq millions comprise entre 0 et 100 et calcule leur moyenne.</span><span class="sxs-lookup"><span data-stu-id="371e8-904">The following example starts a task that generates five million random integers between 0 and 100 and computes their mean.</span></span> <span data-ttu-id="371e8-905">L’exemple utilise le <xref:System.Threading.Tasks.Task.Wait%28System.TimeSpan%29> méthode pour attendre l’application terminée dans 150 millisecondes.</span><span class="sxs-lookup"><span data-stu-id="371e8-905">The example uses the <xref:System.Threading.Tasks.Task.Wait%28System.TimeSpan%29> method to wait for the application to complete within 150 milliseconds.</span></span> <span data-ttu-id="371e8-906">Si l’application s’exécute normalement, la tâche affiche la somme et la moyenne des nombres aléatoires qui il a généré.</span><span class="sxs-lookup"><span data-stu-id="371e8-906">If the application completes normally, the task displays the sum and mean of the random numbers that it has generated.</span></span> <span data-ttu-id="371e8-907">Si l’intervalle de délai d’attente est écoulé, l’exemple affiche un message avant sa fermeture.</span><span class="sxs-lookup"><span data-stu-id="371e8-907">If the timeout interval has elapsed, the example displays a message before it terminates.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Wait#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.wait/cs/Wait6.cs#6)]
 [!code-vb[System.Threading.Tasks.Task.Wait#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.wait/vb/Wait6.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="371e8-908">
            <see cref="T:System.Threading.Tasks.Task" /> a été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-908">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="371e8-909">
            <paramref name="timeout" /> est un nombre négatif autre que -1 milliseconde, qui représente un délai d’attente infini.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-909">
              <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.</span>
          </span>
          <span data-ttu-id="371e8-910">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-910">-or-</span>
          </span>
          <span data-ttu-id="371e8-911">
            <paramref name="timeout" /> est supérieur à <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-911">
              <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="371e8-912">La tâche a été annulée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-912">The task was canceled.</span>
          </span>
          <span data-ttu-id="371e8-913">La collection <see cref="P:System.AggregateException.InnerExceptions" /> contient un objet <see cref="T:System.Threading.Tasks.TaskCanceledException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-913">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains a <see cref="T:System.Threading.Tasks.TaskCanceledException" /> object.</span>
          </span>
          <span data-ttu-id="371e8-914">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-914">-or-</span>
          </span>
          <span data-ttu-id="371e8-915">Une exception a été levée pendant l’exécution de la tâche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-915">An exception was thrown during the execution of the task.</span>
          </span>
          <span data-ttu-id="371e8-916">La collection <see cref="P:System.AggregateException.InnerExceptions" /> contient des informations sur l’exception ou les exceptions.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-916">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains information about the exception or exceptions.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public bool Wait (int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Wait(int32 millisecondsTimeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Wait(System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Wait(int millisecondsTimeout, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout">
          <span data-ttu-id="371e8-917">Nombre de millisecondes à attendre, ou <see cref="F:System.Threading.Timeout.Infinite" /> (-1) pour un délai d'attente infini.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-917">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="371e8-918">Jeton d’annulation à observer en attendant que la tâche se termine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-918">A cancellation token to observe while waiting for the task to complete.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="371e8-919">Attend la fin de l'exécution de <see cref="T:System.Threading.Tasks.Task" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-919">Waits for the <see cref="T:System.Threading.Tasks.Task" /> to complete execution.</span>
          </span>
          <span data-ttu-id="371e8-920">L'attente se termine si un intervalle de délai est écoulé ou si un jeton d'annulation est annulé avant la fin de la tâche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-920">The wait terminates if a timeout interval elapses or a cancellation token is canceled before the task completes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="371e8-921">
            <see langword="true" /> si l'exécution de <see cref="T:System.Threading.Tasks.Task" /> s'est terminée dans le délai imparti ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-921">
              <see langword="true" /> if the <see cref="T:System.Threading.Tasks.Task" /> completed execution within the allotted time; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="371e8-922"><xref:System.Threading.Tasks.Task.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29> est une méthode de synchronisation qui oblige le thread appelant à attendre pour l’instance actuelle de la tâche à effectuer jusqu'à ce qu’une des actions suivantes se produit :</span><span class="sxs-lookup"><span data-stu-id="371e8-922"><xref:System.Threading.Tasks.Task.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29> is a synchronization method that causes the calling thread to wait for the current task instance to complete until one of the following occurs:</span></span>  
  
-   <span data-ttu-id="371e8-923">La tâche se termine avec succès.</span><span class="sxs-lookup"><span data-stu-id="371e8-923">The task completes successfully.</span></span>  
  
-   <span data-ttu-id="371e8-924">La tâche est annulée ou lève une exception.</span><span class="sxs-lookup"><span data-stu-id="371e8-924">The task itself is canceled or throws an exception.</span></span> <span data-ttu-id="371e8-925">Dans ce cas, vous gérez un <xref:System.AggregateException> exception.</span><span class="sxs-lookup"><span data-stu-id="371e8-925">In this case, you handle an <xref:System.AggregateException> exception.</span></span> <span data-ttu-id="371e8-926">Le <xref:System.AggregateException.InnerExceptions%2A?displayProperty=nameWithType> propriété contient des détails sur l’exception ou des exceptions.</span><span class="sxs-lookup"><span data-stu-id="371e8-926">The <xref:System.AggregateException.InnerExceptions%2A?displayProperty=nameWithType> property contains details about the exception or exceptions.</span></span>  
  
-   <span data-ttu-id="371e8-927">Le `cancellationToken` jeton d’annulation est annulé.</span><span class="sxs-lookup"><span data-stu-id="371e8-927">The `cancellationToken` cancellation token is canceled.</span></span> <span data-ttu-id="371e8-928">Dans ce cas, l’appel à la <xref:System.Threading.Tasks.Task.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29> méthode lève une exception une <xref:System.OperationCanceledException>.</span><span class="sxs-lookup"><span data-stu-id="371e8-928">In this case, the call to the <xref:System.Threading.Tasks.Task.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29> method throws an <xref:System.OperationCanceledException>.</span></span>  
  
-   <span data-ttu-id="371e8-929">L’intervalle défini par `millisecondsTimeout` s’écoule.</span><span class="sxs-lookup"><span data-stu-id="371e8-929">The interval defined by `millisecondsTimeout` elapses.</span></span> <span data-ttu-id="371e8-930">Dans ce cas, le thread actuel reprend l’exécution et la méthode retourne `false`.</span><span class="sxs-lookup"><span data-stu-id="371e8-930">In this case, the current thread resumes execution and the method returns `false`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="371e8-931">L’annulation de la `cancellationToken` jeton d’annulation n’a aucun effet sur la tâche en cours d’exécution, sauf si elle a également été passé le jeton d’annulation et est prêt à gérer l’annulation.</span><span class="sxs-lookup"><span data-stu-id="371e8-931">Canceling the `cancellationToken` cancellation token has no effect on the running task unless it has also been passed the cancellation token and is prepared to handle cancellation.</span></span> <span data-ttu-id="371e8-932">En passant le `cancellationToken` objet à cette méthode permet simplement l’attente d’être annulée en fonction sur une condition.</span><span class="sxs-lookup"><span data-stu-id="371e8-932">Passing the `cancellationToken` object to this method simply allows the wait to be canceled based on some condition.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="371e8-933">L’exemple suivant appelle la <xref:System.Threading.Tasks.Task.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29> méthode pour fournir une valeur de délai d’attente et l’annulation du jeton qui peut mettre fin à l’attente de la fin d’une tâche.</span><span class="sxs-lookup"><span data-stu-id="371e8-933">The following example calls the <xref:System.Threading.Tasks.Task.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29> method to provide both a timeout value and a cancellation token that can end the wait for a task's completion.</span></span> <span data-ttu-id="371e8-934">Un nouveau thread est démarré et qu’il exécute la `CancelToken` (méthode), qui met en pause et appelle ensuite la <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType> méthode pour annuler les jetons d’annulation.</span><span class="sxs-lookup"><span data-stu-id="371e8-934">A new thread is started and executes the `CancelToken` method, which pauses and then calls the <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType> method to cancel the cancellation tokens.</span></span> <span data-ttu-id="371e8-935">Une tâche est alors lancée et un délai de 5 secondes.</span><span class="sxs-lookup"><span data-stu-id="371e8-935">A task is then launched and delays for 5 seconds.</span></span> <span data-ttu-id="371e8-936">Le <xref:System.Threading.Tasks.Task.Wait%2A> méthode est alors appelée pour attendre la fin de la tâche et est fournie à la fois une valeur de délai brèves et un jeton d’annulation.</span><span class="sxs-lookup"><span data-stu-id="371e8-936">The <xref:System.Threading.Tasks.Task.Wait%2A> method is then called to wait for the task's completion and is provided both a brief timeout value and a cancellation token.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Wait#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.wait/cs/wait4.cs#4)]
 [!code-vb[System.Threading.Tasks.Task.Wait#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.wait/vb/wait4.vb#4)]  
  
 <span data-ttu-id="371e8-937">Notez que la sortie précise à partir de l’exemple dépend de si l’attente a été annulée en raison du jeton d’annulation ou parce que l’intervalle de délai s’est écoulé.</span><span class="sxs-lookup"><span data-stu-id="371e8-937">Note that the precise output from the example depends on whether the wait was canceled because of the cancellation token or because the timeout interval elapsed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="371e8-938">
            <paramref name="cancellationToken" /> a été annulé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-938">The <paramref name="cancellationToken" /> was canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="371e8-939">
            <see cref="T:System.Threading.Tasks.Task" /> a été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-939">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="371e8-940">
            <paramref name="millisecondsTimeout" /> est un nombre négatif différent de -1, qui représente un délai d’attente infini.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-940">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="371e8-941">La tâche a été annulée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-941">The task was canceled.</span>
          </span>
          <span data-ttu-id="371e8-942">La collection <see cref="P:System.AggregateException.InnerExceptions" /> contient un objet <see cref="T:System.Threading.Tasks.TaskCanceledException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-942">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains a <see cref="T:System.Threading.Tasks.TaskCanceledException" /> object.</span>
          </span>
          <span data-ttu-id="371e8-943">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-943">-or-</span>
          </span>
          <span data-ttu-id="371e8-944">Une exception a été levée pendant l’exécution de la tâche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-944">An exception was thrown during the execution of the task.</span>
          </span>
          <span data-ttu-id="371e8-945">La collection <see cref="P:System.AggregateException.InnerExceptions" /> contient des informations sur l’exception ou les exceptions.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-945">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains information about the exception or exceptions.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitAll">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="371e8-946">Attend la fin de l'exécution de tous les objets <see cref="T:System.Threading.Tasks.Task" /> fournis.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-946">Waits for all of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static void WaitAll (params System.Threading.Tasks.Task[] tasks);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WaitAll(class System.Threading.Tasks.Task[] tasks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WaitAll (ParamArray tasks As Task())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WaitAll(... cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="tasks">
          <span data-ttu-id="371e8-947">Tableau d'instances de <see cref="T:System.Threading.Tasks.Task" /> sur lesquelles attendre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-947">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="371e8-948">Attend la fin de l'exécution de tous les objets <see cref="T:System.Threading.Tasks.Task" /> fournis.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-948">Waits for all of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="371e8-949">L’exemple suivant démarre 10 tâches, chacune d’elles est passé à un index en tant qu’un objet d’état.</span><span class="sxs-lookup"><span data-stu-id="371e8-949">The following example starts 10 tasks, each of which is passed an index as a state object.</span></span> <span data-ttu-id="371e8-950">Tâches ayant un index de deux à cinq lever des exceptions.</span><span class="sxs-lookup"><span data-stu-id="371e8-950">Tasks with an index from two to five throw exceptions.</span></span> <span data-ttu-id="371e8-951">L’appel à la <xref:System.Threading.Tasks.Task.WaitAll%2A> méthode encapsule toutes les exceptions dans une <xref:System.AggregateException> de l’objet et les propage vers le thread appelant.</span><span class="sxs-lookup"><span data-stu-id="371e8-951">The call to the <xref:System.Threading.Tasks.Task.WaitAll%2A> method wraps all exceptions in an <xref:System.AggregateException> object and propagates it to the calling thread.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task#02](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/waitall.cs#02)]
 [!code-vb[System.Threading.Tasks.Task#02](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/waitall.vb#02)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="371e8-952">Un ou plusieurs objets <see cref="T:System.Threading.Tasks.Task" /> de <paramref name="tasks" /> ont été supprimés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-952">One or more of the <see cref="T:System.Threading.Tasks.Task" /> objects in <paramref name="tasks" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="371e8-953">L'argument <paramref name="tasks" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-953">The <paramref name="tasks" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="371e8-954">L’argument <paramref name="tasks" /> contient un élément Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-954">The <paramref name="tasks" /> argument contains a null element.</span>
          </span>
          <span data-ttu-id="371e8-955">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-955">-or-</span>
          </span>
          <span data-ttu-id="371e8-956">L’argument <paramref name="tasks" /> est un tableau vide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-956">The <paramref name="tasks" /> argument is an empty array.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="371e8-957">Au moins une des instances de <see cref="T:System.Threading.Tasks.Task" /> a été annulée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-957">At least one of the <see cref="T:System.Threading.Tasks.Task" /> instances was canceled.</span>
          </span>
          <span data-ttu-id="371e8-958">Si une tâche a été annulée, l’exception <see cref="T:System.AggregateException" /> contient une exception <see cref="T:System.OperationCanceledException" /> dans sa collection <see cref="P:System.AggregateException.InnerExceptions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-958">If a task was canceled, the <see cref="T:System.AggregateException" /> exception contains an <see cref="T:System.OperationCanceledException" /> exception in its <see cref="P:System.AggregateException.InnerExceptions" /> collection.</span>
          </span>
          <span data-ttu-id="371e8-959">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-959">-or-</span>
          </span>
          <span data-ttu-id="371e8-960">Une exception a été levée pendant l’exécution d’au moins une des instances de <see cref="T:System.Threading.Tasks.Task" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-960">An exception was thrown during the execution of at least one of the <see cref="T:System.Threading.Tasks.Task" /> instances.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.Tasks.Task[] tasks, int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.Tasks.Task[] tasks, int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAll (tasks As Task(), millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, int millisecondsTimeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="tasks">
          <span data-ttu-id="371e8-961">Tableau d'instances de <see cref="T:System.Threading.Tasks.Task" /> sur lesquelles attendre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-961">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="371e8-962">Nombre de millisecondes à attendre, ou <see cref="F:System.Threading.Timeout.Infinite" /> (-1) pour un délai d'attente infini.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-962">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="371e8-963">Attend la fin de l'exécution de tous les objets <see cref="T:System.Threading.Tasks.Task" /> fournis en un nombre de millisecondes spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-963">Waits for all of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution within a specified number of milliseconds.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="371e8-964">
            <see langword="true" /> si l'exécution de toutes les instances <see cref="T:System.Threading.Tasks.Task" /> s'est terminée dans le délai imparti ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-964">
              <see langword="true" /> if all of the <see cref="T:System.Threading.Tasks.Task" /> instances completed execution within the allotted time; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="371e8-965">Un ou plusieurs objets <see cref="T:System.Threading.Tasks.Task" /> de <paramref name="tasks" /> ont été supprimés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-965">One or more of the <see cref="T:System.Threading.Tasks.Task" /> objects in <paramref name="tasks" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="371e8-966">L'argument <paramref name="tasks" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-966">The <paramref name="tasks" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="371e8-967">Au moins une des instances de <see cref="T:System.Threading.Tasks.Task" /> a été annulée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-967">At least one of the <see cref="T:System.Threading.Tasks.Task" /> instances was canceled.</span>
          </span>
          <span data-ttu-id="371e8-968">Si une tâche a été annulée, <see cref="T:System.AggregateException" /> contient <see cref="T:System.OperationCanceledException" /> dans sa collection <see cref="P:System.AggregateException.InnerExceptions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-968">If a task was canceled, the <see cref="T:System.AggregateException" /> contains an <see cref="T:System.OperationCanceledException" /> in its <see cref="P:System.AggregateException.InnerExceptions" /> collection.</span>
          </span>
          <span data-ttu-id="371e8-969">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-969">-or-</span>
          </span>
          <span data-ttu-id="371e8-970">Une exception a été levée pendant l’exécution d’au moins une des instances de <see cref="T:System.Threading.Tasks.Task" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-970">An exception was thrown during the execution of at least one of the <see cref="T:System.Threading.Tasks.Task" /> instances.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="371e8-971">
            <paramref name="millisecondsTimeout" /> est un nombre négatif différent de -1, qui représente un délai d’attente infini.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-971">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="371e8-972">L’argument <paramref name="tasks" /> contient un élément Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-972">The <paramref name="tasks" /> argument contains a null element.</span>
          </span>
          <span data-ttu-id="371e8-973">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-973">-or-</span>
          </span>
          <span data-ttu-id="371e8-974">L’argument <paramref name="tasks" /> est un tableau vide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-974">The <paramref name="tasks" /> argument is an empty array.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static void WaitAll (System.Threading.Tasks.Task[] tasks, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WaitAll(class System.Threading.Tasks.Task[] tasks, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WaitAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tasks">
          <span data-ttu-id="371e8-975">Tableau d'instances de <see cref="T:System.Threading.Tasks.Task" /> sur lesquelles attendre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-975">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="371e8-976">A <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> à observer en attendant que les tâches se terminent.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-976">A <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> to observe while waiting for the tasks to complete.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="371e8-977">Attend la fin de l'exécution de tous les objets <see cref="T:System.Threading.Tasks.Task" /> fournis sauf si l'attente est annulée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-977">Waits for all of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution unless the wait is cancelled.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="371e8-978">Le `cancellationToken` argument est utilisé pour annuler l’opération d’attente.</span><span class="sxs-lookup"><span data-stu-id="371e8-978">The `cancellationToken` argument is used to cancel the wait operation.</span></span> <span data-ttu-id="371e8-979">L’annulation des tâches est une opération distincte et est signalée par le <xref:System.AggregateException> comme indiqué ci-dessus.</span><span class="sxs-lookup"><span data-stu-id="371e8-979">Cancellation of the tasks is a distinct operation, and is signaled by the <xref:System.AggregateException> as noted above.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="371e8-980">
            <paramref name="cancellationToken" /> a été annulé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-980">The <paramref name="cancellationToken" /> was canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="371e8-981">L'argument <paramref name="tasks" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-981">The <paramref name="tasks" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="371e8-982">Au moins une des instances de <see cref="T:System.Threading.Tasks.Task" /> a été annulée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-982">At least one of the <see cref="T:System.Threading.Tasks.Task" /> instances was canceled.</span>
          </span>
          <span data-ttu-id="371e8-983">Si une tâche a été annulée, <see cref="T:System.AggregateException" /> contient <see cref="T:System.OperationCanceledException" /> dans sa collection <see cref="P:System.AggregateException.InnerExceptions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-983">If a task was canceled, the <see cref="T:System.AggregateException" /> contains an <see cref="T:System.OperationCanceledException" /> in its <see cref="P:System.AggregateException.InnerExceptions" /> collection.</span>
          </span>
          <span data-ttu-id="371e8-984">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-984">-or-</span>
          </span>
          <span data-ttu-id="371e8-985">Une exception a été levée pendant l’exécution d’au moins une des instances de <see cref="T:System.Threading.Tasks.Task" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-985">An exception was thrown during the execution of at least one of the <see cref="T:System.Threading.Tasks.Task" /> instances.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="371e8-986">L’argument <paramref name="tasks" /> contient un élément Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-986">The <paramref name="tasks" /> argument contains a null element.</span>
          </span>
          <span data-ttu-id="371e8-987">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-987">-or-</span>
          </span>
          <span data-ttu-id="371e8-988">L’argument <paramref name="tasks" /> est un tableau vide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-988">The <paramref name="tasks" /> argument is an empty array.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="371e8-989">Un ou plusieurs objets <see cref="T:System.Threading.Tasks.Task" /> de <paramref name="tasks" /> ont été supprimés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-989">One or more of the <see cref="T:System.Threading.Tasks.Task" /> objects in <paramref name="tasks" /> has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.Tasks.Task[] tasks, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.Tasks.Task[] tasks, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAll (tasks As Task(), timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="tasks">
          <span data-ttu-id="371e8-990">Tableau d'instances de <see cref="T:System.Threading.Tasks.Task" /> sur lesquelles attendre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-990">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="371e8-991">
            <see cref="T:System.TimeSpan" /> qui représente le nombre de millièmes de secondes à attendre ou <see cref="T:System.TimeSpan" /> qui représente -1 millième de seconde, pour attendre indéfiniment.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-991">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="371e8-992">Attend la fin de l'exécution de tous les objets <see cref="T:System.Threading.Tasks.Task" /> pouvant être annulés fournis dans un intervalle de temps spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-992">Waits for all of the provided cancellable <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution within a specified time interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="371e8-993">
            <see langword="true" /> si l'exécution de toutes les instances <see cref="T:System.Threading.Tasks.Task" /> s'est terminée dans le délai imparti ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-993">
              <see langword="true" /> if all of the <see cref="T:System.Threading.Tasks.Task" /> instances completed execution within the allotted time; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="371e8-994">Un ou plusieurs objets <see cref="T:System.Threading.Tasks.Task" /> de <paramref name="tasks" /> ont été supprimés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-994">One or more of the <see cref="T:System.Threading.Tasks.Task" /> objects in <paramref name="tasks" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="371e8-995">L'argument <paramref name="tasks" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-995">The <paramref name="tasks" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="371e8-996">Au moins une des instances de <see cref="T:System.Threading.Tasks.Task" /> a été annulée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-996">At least one of the <see cref="T:System.Threading.Tasks.Task" /> instances was canceled.</span>
          </span>
          <span data-ttu-id="371e8-997">Si une tâche a été annulée, <see cref="T:System.AggregateException" /> contient <see cref="T:System.OperationCanceledException" /> dans sa collection <see cref="P:System.AggregateException.InnerExceptions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-997">If a task was canceled, the <see cref="T:System.AggregateException" /> contains an <see cref="T:System.OperationCanceledException" /> in its <see cref="P:System.AggregateException.InnerExceptions" /> collection.</span>
          </span>
          <span data-ttu-id="371e8-998">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-998">-or-</span>
          </span>
          <span data-ttu-id="371e8-999">Une exception a été levée pendant l’exécution d’au moins une des instances de <see cref="T:System.Threading.Tasks.Task" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-999">An exception was thrown during the execution of at least one of the <see cref="T:System.Threading.Tasks.Task" /> instances.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="371e8-1000">
            <paramref name="timeout" /> est un nombre négatif autre que -1 milliseconde, qui représente un délai d’attente infini.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1000">
              <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.</span>
          </span>
          <span data-ttu-id="371e8-1001">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1001">-or-</span>
          </span>
          <span data-ttu-id="371e8-1002">
            <paramref name="timeout" /> est supérieur à <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1002">
              <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="371e8-1003">L’argument <paramref name="tasks" /> contient un élément Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1003">The <paramref name="tasks" /> argument contains a null element.</span>
          </span>
          <span data-ttu-id="371e8-1004">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1004">-or-</span>
          </span>
          <span data-ttu-id="371e8-1005">L’argument <paramref name="tasks" /> est un tableau vide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1005">The <paramref name="tasks" /> argument is an empty array.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.Tasks.Task[] tasks, int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.Tasks.Task[] tasks, int32 millisecondsTimeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, int millisecondsTimeout, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tasks">
          <span data-ttu-id="371e8-1006">Tableau d'instances de <see cref="T:System.Threading.Tasks.Task" /> sur lesquelles attendre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1006">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="371e8-1007">Nombre de millisecondes à attendre, ou <see cref="F:System.Threading.Timeout.Infinite" /> (-1) pour un délai d'attente infini.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1007">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="371e8-1008">A <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> à observer en attendant que les tâches se terminent.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1008">A <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> to observe while waiting for the tasks to complete.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="371e8-1009">Attend la fin de l'exécution de tous les objets <see cref="T:System.Threading.Tasks.Task" /> fournis en un nombre de millisecondes spécifié ou jusqu'à ce que l'attente soit annulée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1009">Waits for all of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution within a specified number of milliseconds or until the wait is cancelled.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="371e8-1010">
            <see langword="true" /> si l'exécution de toutes les instances <see cref="T:System.Threading.Tasks.Task" /> s'est terminée dans le délai imparti ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1010">
              <see langword="true" /> if all of the <see cref="T:System.Threading.Tasks.Task" /> instances completed execution within the allotted time; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="371e8-1011">Le `cancellationToken` argument est utilisé pour annuler l’opération d’attente.</span><span class="sxs-lookup"><span data-stu-id="371e8-1011">The `cancellationToken` argument is used to cancel the wait operation.</span></span> <span data-ttu-id="371e8-1012">L’annulation des tâches est une opération distincte et est signalée par le <xref:System.AggregateException> indiqués ci-dessus.</span><span class="sxs-lookup"><span data-stu-id="371e8-1012">Cancellation of the tasks is a distinct operation, and is signaled by the <xref:System.AggregateException> noted above.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="371e8-1013">Un ou plusieurs objets <see cref="T:System.Threading.Tasks.Task" /> de <paramref name="tasks" /> ont été supprimés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1013">One or more of the <see cref="T:System.Threading.Tasks.Task" /> objects in <paramref name="tasks" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="371e8-1014">L'argument <paramref name="tasks" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1014">The <paramref name="tasks" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="371e8-1015">Au moins une des instances de <see cref="T:System.Threading.Tasks.Task" /> a été annulée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1015">At least one of the <see cref="T:System.Threading.Tasks.Task" /> instances was canceled.</span>
          </span>
          <span data-ttu-id="371e8-1016">Si une tâche a été annulée, <see cref="T:System.AggregateException" /> contient <see cref="T:System.OperationCanceledException" /> dans sa collection <see cref="P:System.AggregateException.InnerExceptions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1016">If a task was canceled, the <see cref="T:System.AggregateException" /> contains an <see cref="T:System.OperationCanceledException" /> in its <see cref="P:System.AggregateException.InnerExceptions" /> collection.</span>
          </span>
          <span data-ttu-id="371e8-1017">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1017">-or-</span>
          </span>
          <span data-ttu-id="371e8-1018">Une exception a été levée pendant l’exécution d’au moins une des instances de <see cref="T:System.Threading.Tasks.Task" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1018">An exception was thrown during the execution of at least one of the <see cref="T:System.Threading.Tasks.Task" /> instances.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="371e8-1019">
            <paramref name="millisecondsTimeout" /> est un nombre négatif différent de -1, qui représente un délai d’attente infini.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1019">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="371e8-1020">L’argument <paramref name="tasks" /> contient un élément Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1020">The <paramref name="tasks" /> argument contains a null element.</span>
          </span>
          <span data-ttu-id="371e8-1021">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1021">-or-</span>
          </span>
          <span data-ttu-id="371e8-1022">L’argument <paramref name="tasks" /> est un tableau vide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1022">The <paramref name="tasks" /> argument is an empty array.</span>
          </span>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="371e8-1023">
            <paramref name="cancellationToken" /> a été annulé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1023">The <paramref name="cancellationToken" /> was canceled.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitAny">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="371e8-1024">Attend la fin de l'exécution de l'un des objets <see cref="T:System.Threading.Tasks.Task" /> fournis.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1024">Waits for any of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (params System.Threading.Tasks.Task[] tasks);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.Tasks.Task[] tasks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (ParamArray tasks As Task()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(... cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="tasks">
          <span data-ttu-id="371e8-1025">Tableau d'instances de <see cref="T:System.Threading.Tasks.Task" /> sur lesquelles attendre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1025">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="371e8-1026">Attend la fin de l'exécution de l'un des objets <see cref="T:System.Threading.Tasks.Task" /> fournis.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1026">Waits for any of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="371e8-1027">Index de l’objet <see cref="T:System.Threading.Tasks.Task" /> terminé dans le tableau <paramref name="tasks" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1027">The index of the completed <see cref="T:System.Threading.Tasks.Task" /> object in the <paramref name="tasks" /> array.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="371e8-1028">L’exemple suivant démarre cinq tâches, chacune d’elles se met en veille pour un minimum de 50 millisecondes ou à un maximum de 1,050 millisecondes.</span><span class="sxs-lookup"><span data-stu-id="371e8-1028">The following example launches five tasks, each of which sleeps for a minimum of 50 milliseconds or a maximum of 1,050 milliseconds.</span></span> <span data-ttu-id="371e8-1029">Le <xref:System.Threading.Tasks.Task.WaitAny%2A> méthode puis attend les fin des tâches.</span><span class="sxs-lookup"><span data-stu-id="371e8-1029">The <xref:System.Threading.Tasks.Task.WaitAny%2A> method then waits for any of the tasks to complete.</span></span> <span data-ttu-id="371e8-1030">L’exemple affiche l’ID de tâche de la tâche qui s’est terminée de l’attente, ainsi que l’état actuel de toutes les tâches.</span><span class="sxs-lookup"><span data-stu-id="371e8-1030">The example displays the task ID of the task that ended the wait, as well as the current status of all the tasks.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.WaitAny#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Tasks.Task.WaitAny/cs/WaitAny1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.WaitAny#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Tasks.Task.WaitAny/vb/WaitAny1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="371e8-1031">
            <see cref="T:System.Threading.Tasks.Task" /> a été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1031">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="371e8-1032">L'argument <paramref name="tasks" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1032">The <paramref name="tasks" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="371e8-1033">L’argument <paramref name="tasks" /> contient un élément Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1033">The <paramref name="tasks" /> argument contains a null element.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.Tasks.Task[] tasks, int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.Tasks.Task[] tasks, int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (tasks As Task(), millisecondsTimeout As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, int millisecondsTimeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="tasks">
          <span data-ttu-id="371e8-1034">Tableau d'instances de <see cref="T:System.Threading.Tasks.Task" /> sur lesquelles attendre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1034">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="371e8-1035">Nombre de millisecondes à attendre, ou <see cref="F:System.Threading.Timeout.Infinite" /> (-1) pour un délai d'attente infini.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1035">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="371e8-1036">Attend la fin de l'exécution de l'un des objets <see cref="T:System.Threading.Tasks.Task" /> fournis en un nombre de millisecondes spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1036">Waits for any of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution within a specified number of milliseconds.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="371e8-1037">Index de la tâche achevée dans l'argument de tableau <paramref name="tasks" /> ou -1, si le délai a expiré.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1037">The index of the completed task in the <paramref name="tasks" /> array argument, or -1 if the timeout occurred.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="371e8-1038">
            <see cref="T:System.Threading.Tasks.Task" /> a été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1038">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="371e8-1039">L'argument <paramref name="tasks" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1039">The <paramref name="tasks" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="371e8-1040">
            <paramref name="millisecondsTimeout" /> est un nombre négatif différent de -1, qui représente un délai d’attente infini.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1040">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="371e8-1041">L’argument <paramref name="tasks" /> contient un élément Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1041">The <paramref name="tasks" /> argument contains a null element.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.Tasks.Task[] tasks, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.Tasks.Task[] tasks, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tasks">
          <span data-ttu-id="371e8-1042">Tableau d'instances de <see cref="T:System.Threading.Tasks.Task" /> sur lesquelles attendre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1042">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="371e8-1043">
            <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> à observer en attendant qu'une tâche se termine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1043">A <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> to observe while waiting for a task to complete.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="371e8-1044">Attend la fin de l'exécution de l'un des objets <see cref="T:System.Threading.Tasks.Task" /> fournis sauf si l'attente est annulée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1044">Waits for any of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution unless the wait is cancelled.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="371e8-1045">Index de la tâche achevée dans l'argument de tableau <paramref name="tasks" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1045">The index of the completed task in the <paramref name="tasks" /> array argument.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="371e8-1046">
            <see cref="T:System.Threading.Tasks.Task" /> a été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1046">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="371e8-1047">L'argument <paramref name="tasks" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1047">The <paramref name="tasks" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="371e8-1048">L’argument <paramref name="tasks" /> contient un élément Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1048">The <paramref name="tasks" /> argument contains a null element.</span>
          </span>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="371e8-1049">
            <paramref name="cancellationToken" /> a été annulé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1049">The <paramref name="cancellationToken" /> was canceled.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.Tasks.Task[] tasks, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.Tasks.Task[] tasks, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (tasks As Task(), timeout As TimeSpan) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="tasks">
          <span data-ttu-id="371e8-1050">Tableau d'instances de <see cref="T:System.Threading.Tasks.Task" /> sur lesquelles attendre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1050">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="371e8-1051">
            <see cref="T:System.TimeSpan" /> qui représente le nombre de millièmes de secondes à attendre ou <see cref="T:System.TimeSpan" /> qui représente -1 millième de seconde, pour attendre indéfiniment.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1051">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="371e8-1052">Attend la fin de l'exécution de n'importe lequel des objets <see cref="T:System.Threading.Tasks.Task" /> fournis dans un intervalle de temps spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1052">Waits for any of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution within a specified time interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="371e8-1053">Index de la tâche achevée dans l'argument de tableau <paramref name="tasks" /> ou -1, si le délai a expiré.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1053">The index of the completed task in the <paramref name="tasks" /> array argument, or -1 if the timeout occurred.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="371e8-1054">
            <see cref="T:System.Threading.Tasks.Task" /> a été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1054">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="371e8-1055">L'argument <paramref name="tasks" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1055">The <paramref name="tasks" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="371e8-1056">
            <paramref name="timeout" /> est un nombre négatif différent de -1 milliseconde, qui représente un délai d’attente infini.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1056">
              <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.</span>
          </span>
          <span data-ttu-id="371e8-1057">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1057">-or-</span>
          </span>
          <span data-ttu-id="371e8-1058">
            <paramref name="timeout" /> est supérieur à <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1058">
              <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="371e8-1059">L’argument <paramref name="tasks" /> contient un élément Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1059">The <paramref name="tasks" /> argument contains a null element.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.Tasks.Task[] tasks, int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.Tasks.Task[] tasks, int32 millisecondsTimeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, int millisecondsTimeout, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tasks">
          <span data-ttu-id="371e8-1060">Tableau d'instances de <see cref="T:System.Threading.Tasks.Task" /> sur lesquelles attendre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1060">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</span>
          </span>
        </param>
        <param name="millisecondsTimeout">
          <span data-ttu-id="371e8-1061">Nombre de millisecondes à attendre, ou <see cref="F:System.Threading.Timeout.Infinite" /> (-1) pour un délai d'attente infini.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1061">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="371e8-1062">
            <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> à observer en attendant qu'une tâche se termine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1062">A <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> to observe while waiting for a task to complete.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="371e8-1063">Attend la fin de l'exécution de l'un des objets <see cref="T:System.Threading.Tasks.Task" /> fournis en un nombre de millisecondes spécifié ou jusqu'à ce qu'un jeton d'annulation soit annulé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1063">Waits for any of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution within a specified number of milliseconds or until a cancellation token is cancelled.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="371e8-1064">Index de la tâche achevée dans l'argument de tableau <paramref name="tasks" /> ou -1, si le délai a expiré.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1064">The index of the completed task in the <paramref name="tasks" /> array argument, or -1 if the timeout occurred.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="371e8-1065">
            <see cref="T:System.Threading.Tasks.Task" /> a été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1065">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="371e8-1066">L'argument <paramref name="tasks" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1066">The <paramref name="tasks" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="371e8-1067">
            <paramref name="millisecondsTimeout" /> est un nombre négatif différent de -1, qui représente un délai d’attente infini.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1067">
              <paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="371e8-1068">L’argument <paramref name="tasks" /> contient un élément Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1068">The <paramref name="tasks" /> argument contains a null element.</span>
          </span>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="371e8-1069">
            <paramref name="cancellationToken" /> a été annulé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1069">The <paramref name="cancellationToken" /> was canceled.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WhenAll">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="371e8-1070">Crée une tâche qui s’achève quand toutes les tâches fournies sont terminées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1070">Creates a task that will complete when all of the supplied tasks have completed.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WhenAll">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task WhenAll (System.Collections.Generic.IEnumerable&lt;System.Threading.Tasks.Task&gt; tasks);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task WhenAll(class System.Collections.Generic.IEnumerable`1&lt;class System.Threading.Tasks.Task&gt; tasks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WhenAll (tasks As IEnumerable(Of Task)) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ WhenAll(System::Collections::Generic::IEnumerable&lt;System::Threading::Tasks::Task ^&gt; ^ tasks);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Collections.Generic.IEnumerable&lt;System.Threading.Tasks.Task&gt;" />
      </Parameters>
      <Docs>
        <param name="tasks">
          <span data-ttu-id="371e8-1071">Tâches restantes à exécuter avant la fin.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1071">The tasks to wait on for completion.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="371e8-1072">Crée une tâche qui s'achève quand tous les objets <see cref="T:System.Threading.Tasks.Task" /> d'une collection énumérable sont terminés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1072">Creates a task that will complete when all of the <see cref="T:System.Threading.Tasks.Task" /> objects in an enumerable collection have completed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="371e8-1073">Tâche qui représente l’achèvement de toutes les tâches fournies.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1073">A task that represents the completion of all of the supplied tasks.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="371e8-1074">Les surcharges de la <xref:System.Threading.Tasks.Task.WhenAll%2A> méthode qui retourne un <xref:System.Threading.Tasks.Task> objet sont généralement appelées lorsque vous intéressez dans l’état d’un ensemble de tâches ou dans les exceptions levées par un ensemble de tâches.</span><span class="sxs-lookup"><span data-stu-id="371e8-1074">The overloads of the <xref:System.Threading.Tasks.Task.WhenAll%2A> method that return a <xref:System.Threading.Tasks.Task> object are typically called when you are interested in the status of a set of tasks or in the exceptions thrown by a set of tasks.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="371e8-1075">L’appel à <xref:System.Threading.Tasks.Task.WhenAll%28System.Collections.Generic.IEnumerable%7BSystem.Threading.Tasks.Task%7D%29> méthode ne bloque pas le thread appelant.</span><span class="sxs-lookup"><span data-stu-id="371e8-1075">The call to <xref:System.Threading.Tasks.Task.WhenAll%28System.Collections.Generic.IEnumerable%7BSystem.Threading.Tasks.Task%7D%29> method does not block the calling thread.</span></span>  
  
 <span data-ttu-id="371e8-1076">Si une des tâches fournies est terminée dans un état d’erreur, la tâche retournée également prendra un <xref:System.Threading.Tasks.TaskStatus.Faulted> état, où ses exceptions contiendra l’agrégation de l’ensemble des exceptions non encapsulées à partir de chacune des tâches fournies.</span><span class="sxs-lookup"><span data-stu-id="371e8-1076">If any of the supplied tasks completes in a faulted state, the returned task will also complete in a <xref:System.Threading.Tasks.TaskStatus.Faulted> state,  where its exceptions will contain the aggregation of the set of unwrapped exceptions from each of the supplied tasks.</span></span>  
  
 <span data-ttu-id="371e8-1077">Si aucune des tâches fournies ayant renvoyé des erreurs, mais au moins un d’eux a été annulé, la tâche retournée se termine dans le <xref:System.Threading.Tasks.TaskStatus.Canceled> état.</span><span class="sxs-lookup"><span data-stu-id="371e8-1077">If none of the supplied tasks faulted but at least one of them was canceled, the returned task will end in the <xref:System.Threading.Tasks.TaskStatus.Canceled> state.</span></span>  
  
 <span data-ttu-id="371e8-1078">Si aucune des tâches ayant renvoyé des erreurs et aucune des tâches ont été annulées, la tâche obtenue se termine dans le <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> état.</span><span class="sxs-lookup"><span data-stu-id="371e8-1078">If none of the tasks faulted and none of the tasks were canceled, the resulting task will end in the <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state.</span></span>  
  
 <span data-ttu-id="371e8-1079">Si les fourni tableau/énumérables ne contient aucune tâche, la tâche retournée immédiatement adopte un <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> état avant d’être retournée à l’appelant.</span><span class="sxs-lookup"><span data-stu-id="371e8-1079">If the supplied array/enumerable contains no tasks, the returned task will immediately transition to a <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state before it's returned to the caller.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="371e8-1080">L’exemple suivant crée un ensemble de tâches qui ping les URL dans un tableau.</span><span class="sxs-lookup"><span data-stu-id="371e8-1080">The following example creates a set of tasks that ping the URLs in an array.</span></span> <span data-ttu-id="371e8-1081">Les tâches sont stockées dans un `List<Task>` collection qui est passée à la <xref:System.Threading.Tasks.Task.WhenAll%28System.Collections.Generic.IEnumerable%7BSystem.Threading.Tasks.Task%7D%29> (méthode).</span><span class="sxs-lookup"><span data-stu-id="371e8-1081">The tasks are stored in a `List<Task>` collection that is passed to the <xref:System.Threading.Tasks.Task.WhenAll%28System.Collections.Generic.IEnumerable%7BSystem.Threading.Tasks.Task%7D%29> method.</span></span> <span data-ttu-id="371e8-1082">Après l’appel à la <xref:System.Threading.Tasks.Task.Wait%2A> méthode garantit que tous les threads sont terminés, l’exemple examine la <xref:System.Threading.Tasks.Task.Status%2A?displayProperty=nameWithType> propriété pour déterminer si toutes les tâches ont généré une erreur.</span><span class="sxs-lookup"><span data-stu-id="371e8-1082">After the call to the <xref:System.Threading.Tasks.Task.Wait%2A> method ensures that all threads have completed, the example examines the <xref:System.Threading.Tasks.Task.Status%2A?displayProperty=nameWithType> property to determine whether any tasks have faulted.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.WhenAll#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.whenall/cs/WhenAll4.cs#4)]
 [!code-vb[System.Threading.Tasks.Task.WhenAll#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.whenall/vb/WhenAll4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="371e8-1083">L'argument <paramref name="tasks" /> était <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1083">The <paramref name="tasks" /> argument was <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="371e8-1084">La collection de <paramref name="tasks" /> contenait une tâche <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1084">The <paramref name="tasks" /> collection contained a <see langword="null" /> task.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WhenAll">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task WhenAll (params System.Threading.Tasks.Task[] tasks);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task WhenAll(class System.Threading.Tasks.Task[] tasks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WhenAll(System.Threading.Tasks.Task[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WhenAll (ParamArray tasks As Task()) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ WhenAll(... cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="tasks">
          <span data-ttu-id="371e8-1085">Tâches restantes à exécuter avant la fin.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1085">The tasks to wait on for completion.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="371e8-1086">Crée une tâche qui s'achève quand tous les objets <see cref="T:System.Threading.Tasks.Task" /> d'un tableau sont terminés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1086">Creates a task that will complete when all of the <see cref="T:System.Threading.Tasks.Task" /> objects in an array have completed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="371e8-1087">Tâche qui représente l’achèvement de toutes les tâches fournies.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1087">A task that represents the completion of all of the supplied tasks.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="371e8-1088">Les surcharges de la <xref:System.Threading.Tasks.Task.WhenAll%2A> méthode qui retourne un <xref:System.Threading.Tasks.Task> objet sont généralement appelées lorsque vous intéressez dans l’état d’un ensemble de tâches ou dans les exceptions levées par un ensemble de tâches.</span><span class="sxs-lookup"><span data-stu-id="371e8-1088">The overloads of the <xref:System.Threading.Tasks.Task.WhenAll%2A> method that return a <xref:System.Threading.Tasks.Task> object are typically called when you are interested in the status of a set of tasks or in the exceptions thrown by a set of tasks.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="371e8-1089">L’appel à <xref:System.Threading.Tasks.Task.WhenAll%28System.Threading.Tasks.Task%5B%5D%29> méthode ne bloque pas le thread appelant.</span><span class="sxs-lookup"><span data-stu-id="371e8-1089">The call to <xref:System.Threading.Tasks.Task.WhenAll%28System.Threading.Tasks.Task%5B%5D%29> method does not block the calling thread.</span></span>  
  
 <span data-ttu-id="371e8-1090">Si une des tâches fournies est terminée dans un état d’erreur, la tâche retournée également prendra un <xref:System.Threading.Tasks.TaskStatus.Faulted> état, où ses exceptions contiendra l’agrégation de l’ensemble des exceptions non encapsulées à partir de chacune des tâches fournies.</span><span class="sxs-lookup"><span data-stu-id="371e8-1090">If any of the supplied tasks completes in a faulted state, the returned task will also complete in a <xref:System.Threading.Tasks.TaskStatus.Faulted> state, where its exceptions will contain the aggregation of the set of unwrapped exceptions from each of the supplied tasks.</span></span>  
  
 <span data-ttu-id="371e8-1091">Si aucune des tâches fournies ayant renvoyé des erreurs, mais au moins un d’eux a été annulé, la tâche retournée se termine dans le <xref:System.Threading.Tasks.TaskStatus.Canceled> état.</span><span class="sxs-lookup"><span data-stu-id="371e8-1091">If none of the supplied tasks faulted but at least one of them was canceled, the returned task will end in the <xref:System.Threading.Tasks.TaskStatus.Canceled> state.</span></span>  
  
 <span data-ttu-id="371e8-1092">Si aucune des tâches ayant renvoyé des erreurs et aucune des tâches ont été annulées, la tâche obtenue se termine dans le <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> état.</span><span class="sxs-lookup"><span data-stu-id="371e8-1092">If none of the tasks faulted and none of the tasks were canceled, the resulting task will end in the <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state.</span></span>  
  
 <span data-ttu-id="371e8-1093">Si les fourni tableau/énumérables ne contient aucune tâche, la tâche retournée immédiatement adopte un <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> état avant d’être retournée à l’appelant.</span><span class="sxs-lookup"><span data-stu-id="371e8-1093">If the supplied array/enumerable contains no tasks, the returned task will immediately transition to a <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state before it's returned to the caller.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="371e8-1094">L’exemple suivant crée un ensemble de tâches qui ping les URL dans un tableau.</span><span class="sxs-lookup"><span data-stu-id="371e8-1094">The following example creates a set of tasks that ping the URLs in an array.</span></span> <span data-ttu-id="371e8-1095">Les tâches sont stockées dans un `List<Task>` collection qui est convertie en un tableau et passée à la <xref:System.Threading.Tasks.Task.WhenAll%28System.Collections.Generic.IEnumerable%7BSystem.Threading.Tasks.Task%7D%29> (méthode).</span><span class="sxs-lookup"><span data-stu-id="371e8-1095">The tasks are stored in a `List<Task>` collection that is converted to an array and passed to the <xref:System.Threading.Tasks.Task.WhenAll%28System.Collections.Generic.IEnumerable%7BSystem.Threading.Tasks.Task%7D%29> method.</span></span> <span data-ttu-id="371e8-1096">Après l’appel à la <xref:System.Threading.Tasks.Task.Wait%2A> méthode garantit que tous les threads sont terminés, l’exemple examine la <xref:System.Threading.Tasks.Task.Status%2A?displayProperty=nameWithType> propriété pour déterminer si toutes les tâches ont généré une erreur.</span><span class="sxs-lookup"><span data-stu-id="371e8-1096">After the call to the <xref:System.Threading.Tasks.Task.Wait%2A> method ensures that all threads have completed, the example examines the <xref:System.Threading.Tasks.Task.Status%2A?displayProperty=nameWithType> property to determine whether any tasks have faulted.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.WhenAll#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.whenall/cs/WhenAll3.cs#3)]
 [!code-vb[System.Threading.Tasks.Task.WhenAll#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.whenall/vb/WhenAll3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="371e8-1097">L'argument <paramref name="tasks" /> était <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1097">The <paramref name="tasks" /> argument was <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="371e8-1098">Le tableau de <paramref name="tasks" /> contenait une tâche <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1098">The <paramref name="tasks" /> array contained a <see langword="null" /> task.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WhenAll&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult[]&gt; WhenAll&lt;TResult&gt; (System.Collections.Generic.IEnumerable&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt; tasks);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult[]&gt; WhenAll&lt;TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; tasks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WhenAll(Of TResult) (tasks As IEnumerable(Of Task(Of TResult))) As Task(Of TResult())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Threading::Tasks::Task&lt;cli::array &lt;TResult&gt; ^&gt; ^ WhenAll(System::Collections::Generic::IEnumerable&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^&gt; ^ tasks);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult[]&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Collections.Generic.IEnumerable&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="371e8-1099">Type de la tâche terminée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1099">The type of the completed task.</span>
          </span>
        </typeparam>
        <param name="tasks">
          <span data-ttu-id="371e8-1100">Tâches restantes à exécuter avant la fin.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1100">The tasks to wait on for completion.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="371e8-1101">Crée une tâche qui s'achève quand tous les objets <see cref="T:System.Threading.Tasks.Task`1" /> d'une collection énumérable sont terminés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1101">Creates a task that will complete when all of the <see cref="T:System.Threading.Tasks.Task`1" /> objects in an enumerable collection have completed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="371e8-1102">Tâche qui représente l’achèvement de toutes les tâches fournies.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1102">A task that represents the completion of all of the supplied tasks.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="371e8-1103">L’appel à <xref:System.Threading.Tasks.Task.WhenAll%60%601%28System.Collections.Generic.IEnumerable%7BSystem.Threading.Tasks.Task%7B%60%600%7D%7D%29> méthode ne bloque pas le thread appelant.</span><span class="sxs-lookup"><span data-stu-id="371e8-1103">The call to <xref:System.Threading.Tasks.Task.WhenAll%60%601%28System.Collections.Generic.IEnumerable%7BSystem.Threading.Tasks.Task%7B%60%600%7D%7D%29> method does not block the calling thread.</span></span> <span data-ttu-id="371e8-1104">Toutefois, un appel à retourné <xref:System.Threading.Tasks.Task%601.Result%2A> propriété ne bloque le thread appelant.</span><span class="sxs-lookup"><span data-stu-id="371e8-1104">However, a call to the returned <xref:System.Threading.Tasks.Task%601.Result%2A> property does block the calling thread.</span></span>  
  
 <span data-ttu-id="371e8-1105">Si une des tâches fournies est terminée dans un état d’erreur, la tâche retournée également prendra un <xref:System.Threading.Tasks.TaskStatus.Faulted> état, où ses exceptions contiendra l’agrégation de l’ensemble des exceptions non encapsulées à partir de chacune des tâches fournies.</span><span class="sxs-lookup"><span data-stu-id="371e8-1105">If any of the supplied tasks completes in a faulted state, the returned task will also complete in a <xref:System.Threading.Tasks.TaskStatus.Faulted> state, where its exceptions will contain the aggregation of the set of unwrapped exceptions from each of the supplied tasks.</span></span>  
  
 <span data-ttu-id="371e8-1106">Si aucune des tâches fournies ayant renvoyé des erreurs, mais au moins un d’eux a été annulé, la tâche retournée se termine dans le <xref:System.Threading.Tasks.TaskStatus.Canceled> état.</span><span class="sxs-lookup"><span data-stu-id="371e8-1106">If none of the supplied tasks faulted but at least one of them was canceled, the returned task will end in the <xref:System.Threading.Tasks.TaskStatus.Canceled> state.</span></span>  
  
 <span data-ttu-id="371e8-1107">Si aucune des tâches ayant renvoyé des erreurs et aucune des tâches ont été annulées, la tâche obtenue se termine dans le <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> état.</span><span class="sxs-lookup"><span data-stu-id="371e8-1107">If none of the tasks faulted and none of the tasks were canceled, the resulting task will end in the <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state.</span></span>  <span data-ttu-id="371e8-1108">Le <xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=nameWithType> propriété de la tâche retournée est fixée à un tableau contenant tous les résultats des tâches fournies dans le même ordre, telles qu’elles ont été fournies (par exemple, si l’entrée des tâches tableau contenu t1, t2, t3, la tâche de sortie <xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=nameWithType> propriété retournera un `TResult[]` où `arr[0] == t1.Result, arr[1] == t2.Result, and arr[2] == t3.Result)`.</span><span class="sxs-lookup"><span data-stu-id="371e8-1108">The <xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=nameWithType> property of the returned task will be set to an array containing all of the results of the supplied tasks in the same order as they were provided (e.g. if the input tasks array contained t1, t2, t3, the output task's <xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=nameWithType> property will return an `TResult[]` where `arr[0] == t1.Result, arr[1] == t2.Result, and arr[2] == t3.Result)`.</span></span>  
  
 <span data-ttu-id="371e8-1109">Si le `tasks` argument ne contient pas de tâches, la tâche retournée passe immédiatement à un <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> état avant d’être retournée à l’appelant.</span><span class="sxs-lookup"><span data-stu-id="371e8-1109">If the `tasks` argument contains no tasks, the returned task will immediately transition to a <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state before it's returned to the caller.</span></span> <span data-ttu-id="371e8-1110">Retourné `TResult[]` sera un tableau d’éléments de 0.</span><span class="sxs-lookup"><span data-stu-id="371e8-1110">The returned `TResult[]` will be an array of 0 elements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="371e8-1111">L’exemple suivant crée dix tâches, chacune d’elles instancie un générateur de nombres aléatoires qui crée les 1 000 nombres aléatoires compris entre 1 et 1 000 et calcule leur moyenne.</span><span class="sxs-lookup"><span data-stu-id="371e8-1111">The following example creates ten tasks, each of which instantiates a random number generator that creates 1,000 random numbers between 1 and 1,000 and computes their mean.</span></span> <span data-ttu-id="371e8-1112">Le <xref:System.Threading.Tasks.Task.Delay%28System.Int32%29> méthode permet de retarder l’instanciation de générateurs de nombres aléatoires afin qu’ils ne sont pas créés avec les mêmes valeurs initiales.</span><span class="sxs-lookup"><span data-stu-id="371e8-1112">The <xref:System.Threading.Tasks.Task.Delay%28System.Int32%29> method is used to delay instantiation of the random number generators so that they are not created with identical seed values.</span></span> <span data-ttu-id="371e8-1113">L’appel à la <xref:System.Threading.Tasks.Task.WhenAll%2A> méthode retourne ensuite un <xref:System.Int64> tableau qui contient la moyenne calculée par chaque tâche.</span><span class="sxs-lookup"><span data-stu-id="371e8-1113">The call to the <xref:System.Threading.Tasks.Task.WhenAll%2A> method then returns an <xref:System.Int64> array that contains the mean computed by each task.</span></span> <span data-ttu-id="371e8-1114">Ceux-ci sont ensuite utilisées pour calculer la moyenne globale.</span><span class="sxs-lookup"><span data-stu-id="371e8-1114">These are then used to calculate the overall mean.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.WhenAll#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.whenall/cs/whenall1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.WhenAll#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.whenall/vb/whenall1.vb#1)]  
  
 <span data-ttu-id="371e8-1115">Dans ce cas, les dix tâches individuelles sont stockés dans un <xref:System.Collections.Generic.List%601> objet.</span><span class="sxs-lookup"><span data-stu-id="371e8-1115">In this case, the ten individual tasks are stored in a <xref:System.Collections.Generic.List%601> object.</span></span> <span data-ttu-id="371e8-1116"><xref:System.Collections.Generic.List%601> implémente l'interface <xref:System.Collections.Generic.IEnumerable%601>.</span><span class="sxs-lookup"><span data-stu-id="371e8-1116"><xref:System.Collections.Generic.List%601> implements the <xref:System.Collections.Generic.IEnumerable%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="371e8-1117">L'argument <paramref name="tasks" /> était <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1117">The <paramref name="tasks" /> argument was <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="371e8-1118">La collection de <paramref name="tasks" /> contenait une tâche <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1118">The <paramref name="tasks" /> collection contained a <see langword="null" /> task.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WhenAll&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult[]&gt; WhenAll&lt;TResult&gt; (params System.Threading.Tasks.Task&lt;TResult&gt;[] tasks);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult[]&gt; WhenAll&lt;TResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TResult&gt;[] tasks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WhenAll``1(System.Threading.Tasks.Task{``0}[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WhenAll(Of TResult) (ParamArray tasks As Task(Of TResult)()) As Task(Of TResult())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Threading::Tasks::Task&lt;cli::array &lt;TResult&gt; ^&gt; ^ WhenAll(... cli::array &lt;System::Threading::Tasks::Task&lt;TResult&gt; ^&gt; ^ tasks);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult[]&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TResult&gt;[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="371e8-1119">Type de la tâche terminée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1119">The type of the completed task.</span>
          </span>
        </typeparam>
        <param name="tasks">
          <span data-ttu-id="371e8-1120">Tâches restantes à exécuter avant la fin.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1120">The tasks to wait on for completion.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="371e8-1121">Crée une tâche qui s'achève quand tous les objets <see cref="T:System.Threading.Tasks.Task`1" /> d'un tableau sont terminés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1121">Creates a task that will complete when all of the <see cref="T:System.Threading.Tasks.Task`1" /> objects in an array have completed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="371e8-1122">Tâche qui représente l’achèvement de toutes les tâches fournies.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1122">A task that represents the completion of all of the supplied tasks.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="371e8-1123">L’appel à <xref:System.Threading.Tasks.Task.WhenAll%60%601%28System.Threading.Tasks.Task%7B%60%600%7D%5B%5D%29> méthode ne bloque pas le thread appelant.</span><span class="sxs-lookup"><span data-stu-id="371e8-1123">The call to <xref:System.Threading.Tasks.Task.WhenAll%60%601%28System.Threading.Tasks.Task%7B%60%600%7D%5B%5D%29> method does not block the calling thread.</span></span> <span data-ttu-id="371e8-1124">Toutefois, un appel à retourné <xref:System.Threading.Tasks.Task%601.Result%2A> propriété ne bloque le thread appelant.</span><span class="sxs-lookup"><span data-stu-id="371e8-1124">However, a call to the returned <xref:System.Threading.Tasks.Task%601.Result%2A> property does block the calling thread.</span></span>  
  
 <span data-ttu-id="371e8-1125">Si une des tâches fournies est terminée dans un état d’erreur, la tâche retournée également prendra un <xref:System.Threading.Tasks.TaskStatus.Faulted> état, où ses exceptions contiendra l’agrégation de l’ensemble des exceptions non encapsulées à partir de chacune des tâches fournies.</span><span class="sxs-lookup"><span data-stu-id="371e8-1125">If any of the supplied tasks completes in a faulted state, the returned task will also complete in a <xref:System.Threading.Tasks.TaskStatus.Faulted> state, where its exceptions will contain the aggregation of the set of unwrapped exceptions from each of the supplied tasks.</span></span>  
  
 <span data-ttu-id="371e8-1126">Si aucune des tâches fournies ayant renvoyé des erreurs, mais au moins un d’eux a été annulé, la tâche retournée se termine dans le <xref:System.Threading.Tasks.TaskStatus.Canceled> état.</span><span class="sxs-lookup"><span data-stu-id="371e8-1126">If none of the supplied tasks faulted but at least one of them was canceled, the returned task will end in the <xref:System.Threading.Tasks.TaskStatus.Canceled> state.</span></span>  
  
 <span data-ttu-id="371e8-1127">Si aucune des tâches ayant renvoyé des erreurs et aucune des tâches ont été annulées, la tâche obtenue se termine dans le <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> état.</span><span class="sxs-lookup"><span data-stu-id="371e8-1127">If none of the tasks faulted and none of the tasks were canceled, the resulting task will end in the <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state.</span></span>  <span data-ttu-id="371e8-1128">Le <xref:System.Threading.Tasks.Task%601.Result%2A> de la tâche retournée est défini sur un tableau contenant tous les résultats des tâches fournies dans le même ordre, telles qu’elles ont été fournies (par exemple, si l’entrée des tâches tableau contenu t1, t2, t3, la tâche de sortie <xref:System.Threading.Tasks.Task%601.Result%2A> retournera un `TResult[]` où `arr[0] == t1.Result, arr[1] == t2.Result, and arr[2] == t3.Result)`.</span><span class="sxs-lookup"><span data-stu-id="371e8-1128">The <xref:System.Threading.Tasks.Task%601.Result%2A> of the returned task will be set to an array containing all of the results of the supplied tasks in the same order as they were provided (e.g. if the input tasks array contained t1, t2, t3, the output   task's <xref:System.Threading.Tasks.Task%601.Result%2A> will return an `TResult[]` where `arr[0] == t1.Result, arr[1] == t2.Result, and arr[2] == t3.Result)`.</span></span>  
  
 <span data-ttu-id="371e8-1129">Si les fourni tableau/énumérables ne contient aucune tâche, la tâche retournée immédiatement adopte un <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> état avant d’être retournée à l’appelant.</span><span class="sxs-lookup"><span data-stu-id="371e8-1129">If the supplied array/enumerable contains no tasks, the returned task will immediately transition to a <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state before it's returned to the caller.</span></span>  <span data-ttu-id="371e8-1130">Retourné `TResult[]` sera un tableau d’éléments de 0.</span><span class="sxs-lookup"><span data-stu-id="371e8-1130">The returned `TResult[]` will be an array of 0 elements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="371e8-1131">L’exemple suivant crée dix tâches, chacune d’elles instancie un générateur de nombres aléatoires qui crée les 1 000 nombres aléatoires compris entre 1 et 1 000 et calcule leur moyenne.</span><span class="sxs-lookup"><span data-stu-id="371e8-1131">The following example creates ten tasks, each of which instantiates a random number generator that creates 1,000 random numbers between 1 and 1,000 and computes their mean.</span></span> <span data-ttu-id="371e8-1132">Dans ce cas, les dix tâches individuelles sont stockés dans un `Task<Int64>` tableau.</span><span class="sxs-lookup"><span data-stu-id="371e8-1132">In this case, the ten individual tasks are stored in a `Task<Int64>` array.</span></span>  <span data-ttu-id="371e8-1133">Le <xref:System.Threading.Tasks.Task.Delay%28System.Int32%29> méthode permet de retarder l’instanciation de générateurs de nombres aléatoires afin qu’ils ne sont pas créés avec les mêmes valeurs initiales.</span><span class="sxs-lookup"><span data-stu-id="371e8-1133">The <xref:System.Threading.Tasks.Task.Delay%28System.Int32%29> method is used to delay instantiation of the random number generators so that they are not created with identical seed values.</span></span> <span data-ttu-id="371e8-1134">L’appel à la <xref:System.Threading.Tasks.Task.WhenAll%2A> méthode retourne ensuite un <xref:System.Int64> tableau qui contient la moyenne calculée par chaque tâche.</span><span class="sxs-lookup"><span data-stu-id="371e8-1134">The call to the <xref:System.Threading.Tasks.Task.WhenAll%2A> method then returns an <xref:System.Int64> array that contains the mean computed by each task.</span></span> <span data-ttu-id="371e8-1135">Ceux-ci sont ensuite utilisées pour calculer la moyenne globale.</span><span class="sxs-lookup"><span data-stu-id="371e8-1135">These are then used to calculate the overall mean.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.WhenAll#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.whenall/cs/whenall2.cs#2)]
 [!code-vb[System.Threading.Tasks.Task.WhenAll#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.whenall/vb/whenall2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="371e8-1136">L'argument <paramref name="tasks" /> était <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1136">The <paramref name="tasks" /> argument was <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="371e8-1137">Le tableau de <paramref name="tasks" /> contenait une tâche <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1137">The <paramref name="tasks" /> array contained a <see langword="null" /> task.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WhenAny">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="371e8-1138">Crée une tâche qui s’achève quand l’une des tâches fournies est terminée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1138">Creates a task that will complete when any of the supplied tasks have completed.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WhenAny">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&gt; WhenAny (System.Collections.Generic.IEnumerable&lt;System.Threading.Tasks.Task&gt; tasks);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Threading.Tasks.Task&gt; WhenAny(class System.Collections.Generic.IEnumerable`1&lt;class System.Threading.Tasks.Task&gt; tasks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WhenAny(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WhenAny (tasks As IEnumerable(Of Task)) As Task(Of Task)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task&lt;System::Threading::Tasks::Task ^&gt; ^ WhenAny(System::Collections::Generic::IEnumerable&lt;System::Threading::Tasks::Task ^&gt; ^ tasks);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Collections.Generic.IEnumerable&lt;System.Threading.Tasks.Task&gt;" />
      </Parameters>
      <Docs>
        <param name="tasks">
          <span data-ttu-id="371e8-1139">Tâches restantes à exécuter avant la fin.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1139">The tasks to wait on for completion.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="371e8-1140">Crée une tâche qui s’achève quand l’une des tâches fournies est terminée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1140">Creates a task that will complete when any of the supplied tasks have completed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="371e8-1141">Tâche qui représente l’achèvement de l’une des tâches fournies.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1141">A task that represents the completion of one of the supplied tasks.</span>
          </span>
          <span data-ttu-id="371e8-1142">Le résultat de la tâche retour est la tâche qui s’est terminée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1142">The return task's Result is the task that completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="371e8-1143">La tâche retournée s’achève quand une des tâches fournies est terminée.</span><span class="sxs-lookup"><span data-stu-id="371e8-1143">The returned task will complete when any of the supplied tasks has completed.</span></span>  <span data-ttu-id="371e8-1144">La tâche retournée se terminera toujours dans le `RanToCompletion` état avec son jeu de résultats pour la première tâche à effectuer.</span><span class="sxs-lookup"><span data-stu-id="371e8-1144">The returned task will always end in the `RanToCompletion` state  with its Result set to the first task to complete.</span></span>  <span data-ttu-id="371e8-1145">Cela est vrai même si la première tâche se termine s’est terminée sur le `Canceled` ou `Faulted` état.</span><span class="sxs-lookup"><span data-stu-id="371e8-1145">This is true even if the first task to complete ended in the `Canceled` or `Faulted` state.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="371e8-1146">L'argument <paramref name="tasks" /> était <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1146">The <paramref name="tasks" /> argument was <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="371e8-1147">La matrice <paramref name="tasks" /> contenait une tâche null ou était vide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1147">The <paramref name="tasks" /> array contained a null task, or was empty.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WhenAny">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&gt; WhenAny (params System.Threading.Tasks.Task[] tasks);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Threading.Tasks.Task&gt; WhenAny(class System.Threading.Tasks.Task[] tasks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WhenAny(System.Threading.Tasks.Task[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WhenAny (ParamArray tasks As Task()) As Task(Of Task)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task&lt;System::Threading::Tasks::Task ^&gt; ^ WhenAny(... cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="tasks">
          <span data-ttu-id="371e8-1148">Tâches restantes à exécuter avant la fin.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1148">The tasks to wait on for completion.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="371e8-1149">Crée une tâche qui s’achève quand l’une des tâches fournies est terminée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1149">Creates a task that will complete when any of the supplied tasks have completed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="371e8-1150">Tâche qui représente l’achèvement de l’une des tâches fournies.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1150">A task that represents the completion of one of the supplied tasks.</span>
          </span>
          <span data-ttu-id="371e8-1151">Le résultat de la tâche retour est la tâche qui s’est terminée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1151">The return task's Result is the task that completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="371e8-1152">La tâche retournée s’achève quand une des tâches fournies est terminée.</span><span class="sxs-lookup"><span data-stu-id="371e8-1152">The returned task will complete when any of the supplied tasks has completed.</span></span>  <span data-ttu-id="371e8-1153">La tâche retournée se terminera toujours dans le `RanToCompletion` état avec son `Result` définie à la première tâche à effectuer.</span><span class="sxs-lookup"><span data-stu-id="371e8-1153">The returned task will always end in the `RanToCompletion` state   with its `Result` set to the first task to complete.</span></span>  <span data-ttu-id="371e8-1154">Cela est vrai même si la première tâche se termine s’est terminée sur le `Canceled` ou `Faulted` état.</span><span class="sxs-lookup"><span data-stu-id="371e8-1154">This is true even if the first task to complete ended in the `Canceled` or `Faulted` state.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="371e8-1155">L'argument <paramref name="tasks" /> avait la valeur null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1155">The <paramref name="tasks" /> argument was null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="371e8-1156">La matrice <paramref name="tasks" /> contenait une tâche null ou était vide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1156">The <paramref name="tasks" /> array contained a null task, or was empty.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WhenAny&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt; WhenAny&lt;TResult&gt; (System.Collections.Generic.IEnumerable&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt; tasks);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; WhenAny&lt;TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; tasks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WhenAny(Of TResult) (tasks As IEnumerable(Of Task(Of TResult))) As Task(Of Task(Of TResult))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Threading::Tasks::Task&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^&gt; ^ WhenAny(System::Collections::Generic::IEnumerable&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^&gt; ^ tasks);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Collections.Generic.IEnumerable&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="371e8-1157">Type de la tâche terminée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1157">The type of the completed task.</span>
          </span>
        </typeparam>
        <param name="tasks">
          <span data-ttu-id="371e8-1158">Tâches restantes à exécuter avant la fin.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1158">The tasks to wait on for completion.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="371e8-1159">Crée une tâche qui s’achève quand l’une des tâches fournies est terminée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1159">Creates a task that will complete when any of the supplied tasks have completed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="371e8-1160">Tâche qui représente l’achèvement de l’une des tâches fournies.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1160">A task that represents the completion of one of the supplied tasks.</span>
          </span>
          <span data-ttu-id="371e8-1161">Le résultat de la tâche retour est la tâche qui s’est terminée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1161">The return task's Result is the task that completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="371e8-1162">La tâche retournée s’achève quand une des tâches fournies est terminée.</span><span class="sxs-lookup"><span data-stu-id="371e8-1162">The returned task will complete when any of the supplied tasks has completed.</span></span>  <span data-ttu-id="371e8-1163">La tâche retournée se terminera toujours dans l’état RanToCompletion avec son jeu de résultats pour la première tâche à effectuer.</span><span class="sxs-lookup"><span data-stu-id="371e8-1163">The returned task will always end in the RanToCompletion state with its Result set to the first task to complete.</span></span> <span data-ttu-id="371e8-1164">Cela est vrai même si la fin de la première tâche à exécuter dans l’état annulé ou Faulted.</span><span class="sxs-lookup"><span data-stu-id="371e8-1164">This is true even if the first task to complete ended in the Canceled or Faulted state.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="371e8-1165">L'argument <paramref name="tasks" /> était <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1165">The <paramref name="tasks" /> argument was <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="371e8-1166">La matrice <paramref name="tasks" /> contenait une tâche null ou était vide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1166">The <paramref name="tasks" /> array contained a null task, or was empty.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WhenAny&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt; WhenAny&lt;TResult&gt; (params System.Threading.Tasks.Task&lt;TResult&gt;[] tasks);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; WhenAny&lt;TResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TResult&gt;[] tasks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WhenAny``1(System.Threading.Tasks.Task{``0}[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WhenAny(Of TResult) (ParamArray tasks As Task(Of TResult)()) As Task(Of Task(Of TResult))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Threading::Tasks::Task&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^&gt; ^ WhenAny(... cli::array &lt;System::Threading::Tasks::Task&lt;TResult&gt; ^&gt; ^ tasks);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TResult&gt;[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="371e8-1167">Type de la tâche terminée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1167">The type of the completed task.</span>
          </span>
        </typeparam>
        <param name="tasks">
          <span data-ttu-id="371e8-1168">Tâches restantes à exécuter avant la fin.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1168">The tasks to wait on for completion.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="371e8-1169">Crée une tâche qui s’achève quand l’une des tâches fournies est terminée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1169">Creates a task that will complete when any of the supplied tasks have completed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="371e8-1170">Tâche qui représente l’achèvement de l’une des tâches fournies.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1170">A task that represents the completion of one of the supplied tasks.</span>
          </span>
          <span data-ttu-id="371e8-1171">Le résultat de la tâche retour est la tâche qui s’est terminée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1171">The return task's Result is the task that completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="371e8-1172">La tâche retournée s’achève quand une des tâches fournies est terminée.</span><span class="sxs-lookup"><span data-stu-id="371e8-1172">The returned task will complete when any of the supplied tasks has completed.</span></span>  <span data-ttu-id="371e8-1173">La tâche retournée se terminera toujours dans l’état RanToCompletion avec son jeu de résultats pour la première tâche à effectuer.</span><span class="sxs-lookup"><span data-stu-id="371e8-1173">The returned task will always end in the RanToCompletion state with its Result set to the first task to complete.</span></span> <span data-ttu-id="371e8-1174">Cela est vrai même si la fin de la première tâche à exécuter dans l’état annulé ou Faulted.</span><span class="sxs-lookup"><span data-stu-id="371e8-1174">This is true even if the first task to complete ended in the Canceled or Faulted state.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="371e8-1175">L'argument <paramref name="tasks" /> avait la valeur null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1175">The <paramref name="tasks" /> argument was null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="371e8-1176">La matrice <paramref name="tasks" /> contenait une tâche null ou était vide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1176">The <paramref name="tasks" /> array contained a null task, or was empty.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Yield">
      <MemberSignature Language="C#" Value="public static System.Runtime.CompilerServices.YieldAwaitable Yield ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.CompilerServices.YieldAwaitable Yield() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Yield" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Yield () As YieldAwaitable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::CompilerServices::YieldAwaitable Yield();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.CompilerServices.YieldAwaitable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="371e8-1177">Crée une tâche pouvant être attendue qui se produit de manière asynchrone dans le contexte actuel pendant l’attente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1177">Creates an awaitable task that asynchronously yields back to the current context when awaited.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="371e8-1178">Contexte qui, quand il est attendu, reviendra de façon asynchrone au contexte qui était le sien au moment de l'attente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1178">A context that, when awaited, will asynchronously transition back into the current context at the time of the await.</span>
          </span>
          <span data-ttu-id="371e8-1179">Si le <see cref="T:System.Threading.SynchronizationContext" /> actuel n'a pas la valeur null, il est traité comme le contexte actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1179">If the current <see cref="T:System.Threading.SynchronizationContext" /> is non-null, it is treated as the current context.</span>
          </span>
          <span data-ttu-id="371e8-1180">Sinon, le Planificateur de tâches associé à la tâche en cours d’exécution est traité comme le contexte actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="371e8-1180">Otherwise, the task scheduler that is associated with the currently executing task is treated as the current context.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="371e8-1181">Vous pouvez utiliser `await Task.Yield();` dans une méthode asynchrone pour forcer la méthode se termine de façon asynchrone.</span><span class="sxs-lookup"><span data-stu-id="371e8-1181">You can use `await Task.Yield();` in an asynchronous method to force the method to complete asynchronously.</span></span> <span data-ttu-id="371e8-1182">S’il existe un contexte de synchronisation actuel (<xref:System.Threading.SynchronizationContext> objet), cela permet de valider le reste de reprendre l’exécution la méthode dans ce contexte.</span><span class="sxs-lookup"><span data-stu-id="371e8-1182">If there is a current synchronization context (<xref:System.Threading.SynchronizationContext> object), this will post the remainder of the method’s execution back to that context.</span></span> <span data-ttu-id="371e8-1183">Toutefois, le contexte décidera des priorités de ce travail par rapport à d’autres tâches qui peuvent être en attente.</span><span class="sxs-lookup"><span data-stu-id="371e8-1183">However, the context will decide how to prioritize this work relative to other work that may be pending.</span></span> <span data-ttu-id="371e8-1184">Le contexte de synchronisation qui est présent sur un thread d’interface utilisateur dans la plupart des environnements de l’interface utilisateur de priorité souvent travail validée dans le contexte supérieur de l’entrée et le travail de rendu.</span><span class="sxs-lookup"><span data-stu-id="371e8-1184">The synchronization context that is present on a UI thread in most UI environments will often prioritize work posted to the context higher than input and rendering work.</span></span> <span data-ttu-id="371e8-1185">Pour cette raison, ne comptez pas sur `await Task.Yield();` pour conserver une interface utilisateur réactive.</span><span class="sxs-lookup"><span data-stu-id="371e8-1185">For this reason, do not rely on `await Task.Yield();` to keep a UI responsive.</span></span>  <span data-ttu-id="371e8-1186">Pour plus d’informations, consultez l’entrée [utile Abstractions activée avec la méthode ContinueWith](http://blogs.msdn.com/b/pfxteam/archive/2008/07/23/8768673.aspx) dans le blog programmation parallèle avec .NET.</span><span class="sxs-lookup"><span data-stu-id="371e8-1186">For more information, see the entry [Useful Abstractions Enabled with ContinueWith](http://blogs.msdn.com/b/pfxteam/archive/2008/07/23/8768673.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>