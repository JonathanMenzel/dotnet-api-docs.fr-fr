<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Task`1.xml" source-language="en-US" target-language="fr-FR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5dfc5ddad31514a7b54c390de2444ed672b85bae7.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dfc5ddad31514a7b54c390de2444ed672b85bae7</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task`1">
          <source>The type of the result produced by this <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Type du résultat produit par ce <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Threading.Tasks.Task`1">
          <source>Represents an asynchronous operation that can return a value.</source>
          <target state="translated">Représente une opération asynchrone qui peut retourner une valeur.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task`1">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> class represents a single operation that returns a value and that usually executes asynchronously.</source>
          <target state="translated">La <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> classe représente une opération unique qui retourne une valeur et que de généralement exécute de façon asynchrone.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task`1">
          <source><ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> objects are one of the central components of the <bpt id="p1">[</bpt>task-based asynchronous pattern<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/task-based-asynchronous-pattern-tap.md)</ept> first introduced in the .NET Framework 4.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> les objets sont un des composants central de la <bpt id="p1">[</bpt>modèle asynchrone basé sur des tâches<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/task-based-asynchronous-pattern-tap.md)</ept> introduite dans .NET Framework 4.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task`1">
          <source>Because the work performed by a <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object typically executes asynchronously on a thread pool thread rather than synchronously on the main application thread, you can use the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> property, as well as the <ph id="ph3">&lt;xref:System.Threading.Tasks.Task.IsCanceled%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Threading.Tasks.Task.IsCompleted%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Threading.Tasks.Task.IsFaulted%2A&gt;</ph> properties, to determine the   state of a task.</source>
          <target state="translated">Étant donné que le travail effectué par un <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> objet généralement exécute de façon asynchrone sur un thread de pool de threads plutôt que de façon synchrone sur le thread d’application principal, vous pouvez utiliser la <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> propriété, ainsi que le <ph id="ph3">&lt;xref:System.Threading.Tasks.Task.IsCanceled%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Threading.Tasks.Task.IsCompleted%2A&gt;</ph>, et <ph id="ph5">&lt;xref:System.Threading.Tasks.Task.IsFaulted%2A&gt;</ph> propriétés, pour déterminer l’état d’une tâche.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task`1">
          <source>Most commonly, a lambda expression is used to specify the work that the task is to perform.</source>
          <target state="translated">En règle générale, une expression lambda est utilisée pour spécifier le travail à effectuer la tâche.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task`1">
          <source><ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> instances may be created in a variety of ways.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> instances peuvent être créées de plusieurs façons.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task`1">
          <source>The most common approach, which is available starting with the <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, is to call the static <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%29?displayProperty=nameWithType&gt;</ph> or <ph id="ph3">&lt;xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">L’approche la plus courante, qui est disponible à partir de la <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, consiste à appeler la méthode statique <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%29?displayProperty=nameWithType&gt;</ph> ou <ph id="ph3">&lt;xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task`1">
          <source>These methods provide a simple way to start a task by using default values and without acquiring additional parameters.</source>
          <target state="translated">Ces méthodes fournissent un moyen simple pour démarrer une tâche à l’aide des valeurs par défaut et sans l’acquisition des paramètres supplémentaires.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task`1">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%29?displayProperty=nameWithType&gt;</ph> method to start a task that loops and then displays the number of loop iterations:</source>
          <target state="translated">L’exemple suivant utilise la <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%29?displayProperty=nameWithType&gt;</ph> méthode pour lancer une tâche qui effectue une boucle, puis affiche le nombre d’itérations de boucle :</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task`1">
          <source>An alternative, and the most common way to start a task in the <ph id="ph1">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph>, is to call the static <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskFactory%601.StartNew%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Une alternative et la méthode la plus courante pour démarrer une tâche dans le <ph id="ph1">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph>, consiste à appeler la méthode statique <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType&gt;</ph> ou <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskFactory%601.StartNew%2A?displayProperty=nameWithType&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task`1">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Factory%2A?displayProperty=nameWithType&gt;</ph> property returns a <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory&gt;</ph> object, and the <ph id="ph3">&lt;xref:System.Threading.Tasks.Task%601.Factory%2A?displayProperty=nameWithType&gt;</ph> property returns a <ph id="ph4">&lt;xref:System.Threading.Tasks.TaskFactory%601&gt;</ph> object.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Factory%2A?displayProperty=nameWithType&gt;</ph> propriété retourne un <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory&gt;</ph> objet et le <ph id="ph3">&lt;xref:System.Threading.Tasks.Task%601.Factory%2A?displayProperty=nameWithType&gt;</ph> propriété retourne un <ph id="ph4">&lt;xref:System.Threading.Tasks.TaskFactory%601&gt;</ph> objet.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task`1">
          <source>Overloads of their <ph id="ph1">`StartNew`</ph> method let you pass arguments, define task creation options, and specify a task scheduler.</source>
          <target state="translated">Les surcharges de leur <ph id="ph1">`StartNew`</ph> méthode vous permettre de passer des arguments et options de création de tâche, et spécifiez un planificateur de tâches.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task`1">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7B%600%7D%29?displayProperty=nameWithType&gt;</ph> method to start a task.</source>
          <target state="translated">L’exemple suivant utilise la <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7B%600%7D%29?displayProperty=nameWithType&gt;</ph> méthode pour lancer une tâche.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task`1">
          <source>It is functionally equivalent to the code in the previous example.</source>
          <target state="translated">Il est fonctionnellement équivalent au code dans l’exemple précédent.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task`1">
          <source>For more complete examples, see <bpt id="p1">[</bpt>Task-based Asynchronous Programming<ept id="p1">](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md)</ept>.</source>
          <target state="translated">Pour obtenir des exemples plus complètes, consultez <bpt id="p1">[</bpt>basé sur des tâches de programmation asynchrone<ept id="p1">](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md)</ept>.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task`1">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> class also provides constructors that initialize the task but that do not schedule it for execution.</source>
          <target state="translated">La <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> classe fournit également des constructeurs qui initialisent la tâche mais qui ne la planifient pas pour l’exécution.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task`1">
          <source>For performance reasons, the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">`Task.Factory.StartNew`</ph> methods are the preferred mechanisms for creating and scheduling computational tasks, but for scenarios where task creation and scheduling must be separated, the constructors may be used, and the task's <ph id="ph3">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> method may then be used to schedule the task for execution at a later time.</source>
          <target state="translated">Pour des raisons de performances, le <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType&gt;</ph> et <ph id="ph2">`Task.Factory.StartNew`</ph> méthodes sont les mécanismes préférés pour la création et la planification des tâches de calculs, mais pour les scénarios où la création de tâches et la planification doivent être séparés, les constructeurs peuvent être utilisés et la tâche <ph id="ph3">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> méthode peut ensuite être utilisée pour planifier la tâche pour l’exécution à une date ultérieure.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task`1">
          <source>Starting with desktop apps that target the <ph id="ph1">[!INCLUDE[net_v46](~/includes/net-v46-md.md)]</ph>, the culture of the thread that creates and invokes a task becomes part of the thread's context.</source>
          <target state="translated">Depuis les applications de bureau qui ciblent le <ph id="ph1">[!INCLUDE[net_v46](~/includes/net-v46-md.md)]</ph>, la culture du thread qui crée et appelle une tâche devient partie intégrante le contexte du thread.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task`1">
          <source>That is, regardless of the current culture of the thread on which the task executes, the current culture of the task is the culture of the calling thread.</source>
          <target state="translated">Autrement dit, indépendamment de la culture actuelle du thread sur lequel la tâche s’exécute, la culture en cours de la tâche est la culture du thread appelant.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task`1">
          <source>For apps that target versions of the .NET Framework prior to the <ph id="ph1">[!INCLUDE[net_v46](~/includes/net-v46-md.md)]</ph>, the culture of the task is the culture of the thread on which the task executes.</source>
          <target state="translated">Pour les applications qui ciblent des versions du .NET Framework antérieures à la <ph id="ph1">[!INCLUDE[net_v46](~/includes/net-v46-md.md)]</ph>, la culture de la tâche est la culture du thread sur lequel la tâche s’exécute.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task`1">
          <source>For more information, see the "Culture and task-based asynchronous operations" section in the <ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph> topic.</source>
          <target state="translated">Pour plus d’informations, consultez la section « Culture et opérations asynchrones basées sur une tâche » dans la <ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph> rubrique.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task`1">
          <source>Note that Store apps follow the Windows Runtime in setting and getting the default culture.</source>
          <target state="translated">Notez que les applications du Windows Store suivent le Windows Runtime dans la définition et l’obtention de la culture par défaut.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task`1">
          <source>For operations that do not return a value, you use the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> class.</source>
          <target state="translated">Pour les opérations qui ne retournent pas de valeur, vous utilisez la <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task`1">
          <source>If you're developing with C# 7, for a more lightweight task that is a value type rather than a reference type, use the <ph id="ph1">&lt;xref:System.Threading.Tasks.ValueTask%601?displayProperty=nameWithType&gt;</ph> structure; it is supported starting with C# 7.</source>
          <target state="translated">Si vous développez avec c# 7, pour une tâche plus léger qui est un type valeur plutôt qu’un type référence, utilisez le <ph id="ph1">&lt;xref:System.Threading.Tasks.ValueTask%601?displayProperty=nameWithType&gt;</ph> structure ; il est pris en charge à partir de C# 7.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Task`1">
          <source>All members of <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>, except for <ph id="ph2">&lt;see cref="M:System.Threading.Tasks.Task.Dispose" /&gt;</ph>, are thread-safe and may be used from multiple threads concurrently.</source>
          <target state="translated">Tous les membres de <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>, à l’exception de <ph id="ph2">&lt;see cref="M:System.Threading.Tasks.Task.Dispose" /&gt;</ph>, sont thread-safe et peuvent être utilisés à partir de plusieurs threads simultanément.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="T:System.Threading.Tasks.Task`1">
          <source>Initializes a new <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> object.</source>
          <target state="translated">Initialise un nouvel objet <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0})">
          <source>The delegate that represents the code to execute in the task.</source>
          <target state="translated">Délégué qui représente le code à exécuter dans la tâche.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0})">
          <source>When the function has completed, the task's <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task`1.Result" /&gt;</ph> property will be set to return the result value of the function.</source>
          <target state="translated">Quand cette fonction aura terminé, la propriété <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task`1.Result" /&gt;</ph> de la tâche sera configurée pour retourner la valeur de résultat de la fonction.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0})">
          <source>Initializes a new <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> with the specified function.</source>
          <target state="translated">Initialise une nouvelle <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> avec la fonction spécifiée.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0})">
          <source>Rather than calling this constructor, the most common way to instantiate a <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object and launch a task is by calling the static <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%29?displayProperty=nameWithType&gt;</ph> and <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7B%600%7D%29?displayProperty=nameWithType&gt;</ph> methods.</source>
          <target state="translated">Au lieu d’appeler ce constructeur, la méthode la plus courante pour instancier un <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> objet et lancer une tâche est en appelant la méthode statique <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%29?displayProperty=nameWithType&gt;</ph> et <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7B%600%7D%29?displayProperty=nameWithType&gt;</ph> méthodes.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0})">
          <source>The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</source>
          <target state="translated">Le seul avantage offert par ce constructeur est qu’il permet l’instanciation d’objet d’être séparé de l’invocation de la tâche.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0})">
          <source>The following example counts the approximate number of words in text files that represent published books.</source>
          <target state="translated">L’exemple suivant compte le nombre approximatif de mots dans des fichiers texte qui représentent des livres publiés.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0})">
          <source>Each task is responsible for opening a file, reading its entire contents asynchronously, and calculating the word count by using a regular expression.</source>
          <target state="translated">Chaque tâche est responsable de l’ouverture d’un fichier, lire tout son contenu de manière asynchrone et calculer le nombre de mots à l’aide d’une expression régulière.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.WaitAll%28System.Threading.Tasks.Task%5B%5D%29?displayProperty=nameWithType&gt;</ph> method is called to ensure that all tasks have completed before displaying the word count of each book to the console.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.WaitAll%28System.Threading.Tasks.Task%5B%5D%29?displayProperty=nameWithType&gt;</ph> méthode est appelée pour vous assurer que toutes les tâches terminées avant d’afficher le nombre de mots de chaque ouvrage sur la console.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0})">
          <source>Object instantiation is separated from object execution in this example so that the example can ensure that each file exists.</source>
          <target state="translated">Instanciation d’objet est séparée de l’exécution d’objet dans cet exemple afin que l’exemple peut vous assurer que chaque fichier existe.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0})">
          <source>If they do not,  it displays the name of the missing file.</source>
          <target state="translated">Si ce n’est pas le cas, il affiche le nom du fichier manquant.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0})">
          <source>Otherwise, it calls the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Start%2A?displayProperty=nameWithType&gt;</ph> method to launch each task.</source>
          <target state="translated">Sinon, elle appelle la <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Start%2A?displayProperty=nameWithType&gt;</ph> méthode pour lancer chaque tâche.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0})">
          <source>The regular expression pattern <ph id="ph1">`\p{P}*\s+`</ph> matches zero, one, or more punctuation characters followed by one or more whitespace characters.</source>
          <target state="translated">Le modèle d’expression régulière <ph id="ph1">`\p{P}*\s+`</ph> correspond à zéro, un ou plusieurs caractères de ponctuation suivis d’un ou plusieurs caractères d’espace blanc.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0})">
          <source>It assumes that the total number of matches equals the approximate word count.</source>
          <target state="translated">Il suppose que le nombre total de correspondances est égale au nombre de word approximative.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0})">
          <source>The <ph id="ph1">&lt;paramref name="function" /&gt;</ph> argument is null.</source>
          <target state="translated">L’argument <ph id="ph1">&lt;paramref name="function" /&gt;</ph> a la valeur null.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object)">
          <source>The delegate that represents the code to execute in the task.</source>
          <target state="translated">Délégué qui représente le code à exécuter dans la tâche.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object)">
          <source>When the function has completed, the task's <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task`1.Result" /&gt;</ph> property will be set to return the result value of the function.</source>
          <target state="translated">Quand cette fonction aura terminé, la propriété <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task`1.Result" /&gt;</ph> de la tâche sera configurée pour retourner la valeur de résultat de la fonction.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object)">
          <source>An object representing data to be used by the action.</source>
          <target state="translated">Objet représentant les données que l'action doit utiliser.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object)">
          <source>Initializes a new <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> with the specified function and state.</source>
          <target state="translated">Initialise un nouveau <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> avec la fonction et l'état spécifiés.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object)">
          <source>Rather than calling this constructor, the most common way to instantiate a <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object and launch a task is by calling the static <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7BSystem.Object%2C%600%7D%2CSystem.Object%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Au lieu d’appeler ce constructeur, la méthode la plus courante pour instancier un <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> objet et lancer une tâche est en appelant la méthode statique <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7BSystem.Object%2C%600%7D%2CSystem.Object%29?displayProperty=nameWithType&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object)">
          <source>The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</source>
          <target state="translated">Le seul avantage offert par ce constructeur est qu’il permet l’instanciation d’objet d’être séparé de l’invocation de la tâche.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="function" /&gt;</ph> argument is null.</source>
          <target state="translated">L’argument <ph id="ph1">&lt;paramref name="function" /&gt;</ph> a la valeur null.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.CancellationToken)">
          <source>The delegate that represents the code to execute in the task.</source>
          <target state="translated">Délégué qui représente le code à exécuter dans la tâche.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.CancellationToken)">
          <source>When the function has completed, the task's <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task`1.Result" /&gt;</ph> property will be set to return the result value of the function.</source>
          <target state="translated">Quand cette fonction aura terminé, la propriété <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task`1.Result" /&gt;</ph> de la tâche sera configurée pour retourner la valeur de résultat de la fonction.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> to be assigned to this task.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> à assigner à cette tâche.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.CancellationToken)">
          <source>Initializes a new <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> with the specified function.</source>
          <target state="translated">Initialise une nouvelle <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> avec la fonction spécifiée.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.CancellationToken)">
          <source>Rather than calling this constructor, the most common way to instantiate a <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object and launch a task is by calling the static <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType&gt;</ph> and <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7B%600%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType&gt;</ph> methods.</source>
          <target state="translated">Au lieu d’appeler ce constructeur, la méthode la plus courante pour instancier un <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> objet et lancer une tâche est en appelant la méthode statique <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType&gt;</ph> et <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7B%600%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType&gt;</ph> méthodes.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.CancellationToken)">
          <source>The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</source>
          <target state="translated">Le seul avantage offert par ce constructeur est qu’il permet l’instanciation d’objet d’être séparé de l’invocation de la tâche.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> that created <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> has already been disposed.</source>
          <target state="translated">Le <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> qui a créé <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> a déjà été supprimé.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;paramref name="function" /&gt;</ph> argument is null.</source>
          <target state="translated">L’argument <ph id="ph1">&lt;paramref name="function" /&gt;</ph> a la valeur null.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)">
          <source>The delegate that represents the code to execute in the task.</source>
          <target state="translated">Délégué qui représente le code à exécuter dans la tâche.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)">
          <source>When the function has completed, the task's <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task`1.Result" /&gt;</ph> property will be set to return the result value of the function.</source>
          <target state="translated">Quand cette fonction aura terminé, la propriété <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task`1.Result" /&gt;</ph> de la tâche sera configurée pour retourner la valeur de résultat de la fonction.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskCreationOptions" /&gt;</ph> used to customize the task's behavior.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskCreationOptions" /&gt;</ph> utilisé pour personnaliser le comportement de la tâche.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)">
          <source>Initializes a new <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> with the specified function and creation options.</source>
          <target state="translated">Initialise une nouvelle <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> avec la fonction et les options de création spécifiées.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)">
          <source>Rather than calling this constructor, the most common way to instantiate a <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object and launch a task is by calling the static <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7B%600%7D%2CSystem.Threading.Tasks.TaskCreationOptions%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Au lieu d’appeler ce constructeur, la méthode la plus courante pour instancier un <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> objet et lancer une tâche est en appelant la méthode statique <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7B%600%7D%2CSystem.Threading.Tasks.TaskCreationOptions%29?displayProperty=nameWithType&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)">
          <source>The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</source>
          <target state="translated">Le seul avantage offert par ce constructeur est qu’il permet l’instanciation d’objet d’être séparé de l’invocation de la tâche.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> argument specifies an invalid value for <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskCreationOptions" /&gt;</ph>.</source>
          <target state="translated">L'argument <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> spécifie une valeur non valide pour <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskCreationOptions" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="function" /&gt;</ph> argument is null.</source>
          <target state="translated">L’argument <ph id="ph1">&lt;paramref name="function" /&gt;</ph> a la valeur null.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)">
          <source>The delegate that represents the code to execute in the task.</source>
          <target state="translated">Délégué qui représente le code à exécuter dans la tâche.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)">
          <source>When the function has completed, the task's <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task`1.Result" /&gt;</ph> property will be set to return the result value of the function.</source>
          <target state="translated">Quand cette fonction aura terminé, la propriété <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task`1.Result" /&gt;</ph> de la tâche sera configurée pour retourner la valeur de résultat de la fonction.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)">
          <source>An object representing data to be used by the function.</source>
          <target state="translated">Objet représentant les données que la fonction doit utiliser.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> to be assigned to the new task.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> à assigner à la nouvelle tâche.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)">
          <source>Initializes a new <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> with the specified action, state, and options.</source>
          <target state="translated">Initialise une nouvelle <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> avec l'action, l'état et les options spécifiés.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)">
          <source>Rather than calling this constructor, the most common way to instantiate a <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object and launch a task is by calling the static <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7BSystem.Object%2C%600%7D%2CSystem.Object%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Au lieu d’appeler ce constructeur, la méthode la plus courante pour instancier un <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> objet et lancer une tâche est en appelant la méthode statique <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7BSystem.Object%2C%600%7D%2CSystem.Object%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)">
          <source>The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</source>
          <target state="translated">Le seul avantage offert par ce constructeur est qu’il permet l’instanciation d’objet d’être séparé de l’invocation de la tâche.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> that created <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> has already been disposed.</source>
          <target state="translated">Le <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> qui a créé <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> a déjà été supprimé.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;paramref name="function" /&gt;</ph> argument is null.</source>
          <target state="translated">L’argument <ph id="ph1">&lt;paramref name="function" /&gt;</ph> a la valeur null.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The delegate that represents the code to execute in the task.</source>
          <target state="translated">Délégué qui représente le code à exécuter dans la tâche.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>When the function has completed, the task's <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task`1.Result" /&gt;</ph> property will be set to return the result value of the function.</source>
          <target state="translated">Quand cette fonction aura terminé, la propriété <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task`1.Result" /&gt;</ph> de la tâche sera configurée pour retourner la valeur de résultat de la fonction.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>An object representing data to be used by the function.</source>
          <target state="translated">Objet représentant les données que la fonction doit utiliser.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskCreationOptions" /&gt;</ph> used to customize the task's behavior.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskCreationOptions" /&gt;</ph> utilisé pour personnaliser le comportement de la tâche.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>Initializes a new <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> with the specified action, state, and options.</source>
          <target state="translated">Initialise une nouvelle <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> avec l'action, l'état et les options spécifiés.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>Rather than calling this constructor, the most common way to instantiate a <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object and launch a task is by calling the static <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7BSystem.Object%2C%600%7D%2CSystem.Object%2CSystem.Threading.Tasks.TaskCreationOptions%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Au lieu d’appeler ce constructeur, la méthode la plus courante pour instancier un <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> objet et lancer une tâche est en appelant la méthode statique <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7BSystem.Object%2C%600%7D%2CSystem.Object%2CSystem.Threading.Tasks.TaskCreationOptions%29?displayProperty=nameWithType&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</source>
          <target state="translated">Le seul avantage offert par ce constructeur est qu’il permet l’instanciation d’objet d’être séparé de l’invocation de la tâche.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> argument specifies an invalid value for <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskCreationOptions" /&gt;</ph>.</source>
          <target state="translated">L'argument <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> spécifie une valeur non valide pour <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskCreationOptions" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="function" /&gt;</ph> argument is null.</source>
          <target state="translated">L’argument <ph id="ph1">&lt;paramref name="function" /&gt;</ph> a la valeur null.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
          <source>The delegate that represents the code to execute in the task.</source>
          <target state="translated">Délégué qui représente le code à exécuter dans la tâche.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
          <source>When the function has completed, the task's <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task`1.Result" /&gt;</ph> property will be set to return the result value of the function.</source>
          <target state="translated">Quand cette fonction aura terminé, la propriété <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task`1.Result" /&gt;</ph> de la tâche sera configurée pour retourner la valeur de résultat de la fonction.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> that will be assigned to the new task.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> qui sera assigné à la nouvelle tâche.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskCreationOptions" /&gt;</ph> used to customize the task's behavior.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskCreationOptions" /&gt;</ph> utilisé pour personnaliser le comportement de la tâche.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
          <source>Initializes a new <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> with the specified function and creation options.</source>
          <target state="translated">Initialise une nouvelle <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> avec la fonction et les options de création spécifiées.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
          <source>Rather than calling this constructor, the most common way to instantiate a <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object and launch a task is by calling the static <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%2CSystem.Threading.Tasks.TaskCreationOptions%2CSystem.Threading.Tasks.TaskScheduler%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Au lieu d’appeler ce constructeur, la méthode la plus courante pour instancier un <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> objet et lancer une tâche est en appelant la méthode statique <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%2CSystem.Threading.Tasks.TaskCreationOptions%2CSystem.Threading.Tasks.TaskScheduler%29?displayProperty=nameWithType&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
          <source>The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</source>
          <target state="translated">Le seul avantage offert par ce constructeur est qu’il permet l’instanciation d’objet d’être séparé de l’invocation de la tâche.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> that created <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> has already been disposed.</source>
          <target state="translated">Le <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> qui a créé <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> a déjà été supprimé.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> argument specifies an invalid value for <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskCreationOptions" /&gt;</ph>.</source>
          <target state="translated">L'argument <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> spécifie une valeur non valide pour <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskCreationOptions" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="function" /&gt;</ph> argument is null.</source>
          <target state="translated">L’argument <ph id="ph1">&lt;paramref name="function" /&gt;</ph> a la valeur null.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
          <source>The delegate that represents the code to execute in the task.</source>
          <target state="translated">Délégué qui représente le code à exécuter dans la tâche.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
          <source>When the function has completed, the task's <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task`1.Result" /&gt;</ph> property will be set to return the result value of the function.</source>
          <target state="translated">Quand cette fonction aura terminé, la propriété <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task`1.Result" /&gt;</ph> de la tâche sera configurée pour retourner la valeur de résultat de la fonction.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
          <source>An object representing data to be used by the function.</source>
          <target state="translated">Objet représentant les données que la fonction doit utiliser.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> to be assigned to the new task.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> à assigner à la nouvelle tâche.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskCreationOptions" /&gt;</ph> used to customize the task's behavior.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskCreationOptions" /&gt;</ph> utilisé pour personnaliser le comportement de la tâche.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
          <source>Initializes a new <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> with the specified action, state, and options.</source>
          <target state="translated">Initialise une nouvelle <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> avec l'action, l'état et les options spécifiés.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
          <source>Rather than calling this constructor, the most common way to instantiate a <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object and launch a task is by calling the static <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7BSystem.Object%2C%600%7D%2CSystem.Object%2CSystem.Threading.CancellationToken%2CSystem.Threading.Tasks.TaskCreationOptions%2CSystem.Threading.Tasks.TaskScheduler%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Au lieu d’appeler ce constructeur, la méthode la plus courante pour instancier un <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> objet et lancer une tâche est en appelant la méthode statique <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7BSystem.Object%2C%600%7D%2CSystem.Object%2CSystem.Threading.CancellationToken%2CSystem.Threading.Tasks.TaskCreationOptions%2CSystem.Threading.Tasks.TaskScheduler%29?displayProperty=nameWithType&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
          <source>The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</source>
          <target state="translated">Le seul avantage offert par ce constructeur est qu’il permet l’instanciation d’objet d’être séparé de l’invocation de la tâche.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> that created <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> has already been disposed.</source>
          <target state="translated">Le <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> qui a créé <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> a déjà été supprimé.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> argument specifies an invalid value for <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskCreationOptions" /&gt;</ph>.</source>
          <target state="translated">L'argument <ph id="ph1">&lt;paramref name="creationOptions" /&gt;</ph> spécifie une valeur non valide pour <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskCreationOptions" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="function" /&gt;</ph> argument is null.</source>
          <target state="translated">L’argument <ph id="ph1">&lt;paramref name="function" /&gt;</ph> a la valeur null.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ConfigureAwait(System.Boolean)">
          <source>true to attempt to marshal the continuation back to the original context captured; otherwise, false.</source>
          <target state="translated">True en cas de tentative de marshaling de la continuation vers le contexte d'origine capturé ; sinon, false.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ConfigureAwait(System.Boolean)">
          <source>Configures an awaiter used to await this <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Configure un élément awaiter utilisé pour attendre cette <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ConfigureAwait(System.Boolean)">
          <source>An object used to await this task.</source>
          <target state="translated">Objet utilisé pour attendre cette tâche.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="T:System.Threading.Tasks.Task`1">
          <source>Creates a continuation task that executes when another task completes.</source>
          <target state="translated">Crée une tâche de continuation qui s’exécute lorsqu’une autre tâche se termine.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}})">
          <source>An action to run when the antecedent <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> completes.</source>
          <target state="translated">Action à exécuter quand la <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> antécédente se termine.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}})">
          <source>When run, the delegate will be passed the completed task as an argument.</source>
          <target state="translated">Quand elle est exécutée, la tâche achevée est passée au délégué en tant qu'argument.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}})">
          <source>Creates a continuation that executes asynchronously when the target task completes.</source>
          <target state="translated">Crée une continuation qui s’exécute de façon asynchrone quand la tâche cible se termine.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}})">
          <source>A new continuation task.</source>
          <target state="translated">Nouvelle tâche de continuation.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}})">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting early due to being canceled.</source>
          <target state="translated">Retourné <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> n’est plus planifié pour l’exécution jusqu'à ce que la tâche en cours est terminée, si elle se termine en raison fonctionne correctement jusqu'à son achèvement, défaillant en raison d’une exception non gérée ou en cours de fermeture au début en raison de l’annulation.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}})">
          <source>The following example creates an antecedent task that uses the Sieve of Eratosthenes to calculate the prime numbers between 1 and a value entered by the user.</source>
          <target state="translated">L’exemple suivant crée une tâche d’antécédent qui utilise le crible d’Ératosthène pour calculer les nombres premiers entre 1 et une valeur entrée par l’utilisateur.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}})">
          <source>An array is used to hold information about the prime numbers.</source>
          <target state="translated">Un tableau est utilisé pour contenir des informations sur les nombres premiers.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}})">
          <source>The array index represents the number, and the element's value indicates whether that number is composite (its value is <ph id="ph1">`true`</ph>) or prime (its value is <ph id="ph2">`false`</ph>).</source>
          <target state="translated">L’index du tableau représente le nombre et la valeur de l’élément indique si ce nombre est composite (sa valeur est <ph id="ph1">`true`</ph>) ou de la prime (sa valeur est <ph id="ph2">`false`</ph>).</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}})">
          <source>This task is then passed to a continuation task, which is responsible for extracting the prime numbers from the integer array and displaying them.</source>
          <target state="translated">Cette tâche est ensuite transmise à une tâche de continuation, qui est chargée pour extraire les nombres premiers à partir du tableau entier et pour les afficher.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> has been disposed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> a été supprimé.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}})">
          <source>The <ph id="ph1">&lt;paramref name="continuationAction" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">L'argument <ph id="ph1">&lt;paramref name="continuationAction" /&gt;</ph> a la valeur <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object)">
          <source>An action to run when the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> completes.</source>
          <target state="translated">Action à exécuter quand <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> se termine.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object)">
          <source>When run, the delegate is   passed the completed task and the caller-supplied state object as arguments.</source>
          <target state="translated">Lors de l’exécution, la tâche achevée et l’objet d’état fourni par l’appelant sont passés comme arguments au délégué.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object)">
          <source>An object representing data to be used by the continuation action.</source>
          <target state="translated">Objet représentant les données que l'action de continuation doit utiliser.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object)">
          <source>Creates a continuation that that is passed state information and that executes when the target <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> completes.</source>
          <target state="translated">Crée une continuation à laquelle sont passées des informations d'état et qui s'exécute quand le <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> cible se termine.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object)">
          <source>A new continuation <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</source>
          <target state="translated">Nouvelle <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> de continuation.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object)">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</source>
          <target state="translated">Retourné <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> n’est plus planifié pour l’exécution jusqu'à ce que la tâche en cours est terminée, si elle se termine en raison de fonctionne correctement jusqu'à son achèvement, provoquer une erreur en raison d’une exception non gérée ou sortir tôt en raison de l’annulation.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object)">
          <source>The following example creates a task that is passed an integer between 2 and 20 and returns an array that contains the first ten exponents (from n<bpt id="p1">&lt;sup&gt;</bpt>1<ept id="p1">&lt;/sup&gt;</ept> to n<bpt id="p2">&lt;sup&gt;</bpt>10<ept id="p2">&lt;/sup&gt;</ept>) of that number.</source>
          <target state="translated">L’exemple suivant crée une tâche qui est passée un nombre entier compris entre 2 et 20 et retourne un tableau qui contient les dix premiers exposants (à partir de n<bpt id="p1">&lt;sup&gt;</bpt>1<ept id="p1">&lt;/sup&gt;</ept> à n<bpt id="p2">&lt;sup&gt;</bpt>10<ept id="p2">&lt;/sup&gt;</ept>) de ce nombre.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object)">
          <source>A continuation task is then responsible for displaying the exponents.</source>
          <target state="translated">Une tâche de continuation est ensuite chargée d’afficher les exposants.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object)">
          <source>It is passed both the antecedent and the original number whose exponents the antecedent generates.</source>
          <target state="translated">Il est passé de l’antécédent et le numéro d’origine dont l’antécédent génère des exposants.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="continuationAction" /&gt;</ph> argument is null.</source>
          <target state="translated">L’argument <ph id="ph1">&lt;paramref name="continuationAction" /&gt;</ph> a la valeur null.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken)">
          <source>An action to run when the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> completes.</source>
          <target state="translated">Action à exécuter quand <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> se termine.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken)">
          <source>When run, the delegate is passed the completed task as an argument.</source>
          <target state="translated">Quand elle est exécutée, la tâche achevée est passée au délégué en tant qu’argument.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken)">
          <source>The cancellation token that is passed to the new continuation task.</source>
          <target state="translated">Jeton d’annulation passé à la nouvelle tâche de continuation.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken)">
          <source>Creates a cancelable continuation that executes asynchronously when the target <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> completes.</source>
          <target state="translated">Crée une continuation pouvant être annulée qui s'exécute de façon asynchrone quand la <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> cible se termine.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken)">
          <source>A new continuation task.</source>
          <target state="translated">Nouvelle tâche de continuation.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken)">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</source>
          <target state="translated">Retourné <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> n’est plus planifié pour l’exécution jusqu'à ce que la tâche en cours est terminée, si elle se termine en raison de fonctionne correctement jusqu'à son achèvement, provoquer une erreur en raison d’une exception non gérée ou sortir tôt en raison de l’annulation.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken)">
          <source>The following example creates an antecedent task that uses the Sieve of Eratosthenes to calculate the prime numbers between 1 and a value entered by the user.</source>
          <target state="translated">L’exemple suivant crée une tâche d’antécédent qui utilise le crible d’Ératosthène pour calculer les nombres premiers entre 1 et une valeur entrée par l’utilisateur.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken)">
          <source>An array is used to hold information about the prime numbers.</source>
          <target state="translated">Un tableau est utilisé pour contenir des informations sur les nombres premiers.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken)">
          <source>The array index represents the number, and the element's value indicates whether that number is composite (its value is <ph id="ph1">`true`</ph>) or prime (its value is <ph id="ph2">`false`</ph>).</source>
          <target state="translated">L’index du tableau représente le nombre et la valeur de l’élément indique si ce nombre est composite (sa valeur est <ph id="ph1">`true`</ph>) ou de la prime (sa valeur est <ph id="ph2">`false`</ph>).</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken)">
          <source>This task is then passed to a continuation task, which is responsible for extracting the prime numbers from the integer array and displaying them.</source>
          <target state="translated">Cette tâche est ensuite transmise à une tâche de continuation, qui est chargée pour extraire les nombres premiers à partir du tableau entier et pour les afficher.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken)">
          <source>A cancellation token is passed to both the antecedent and the continuation task.</source>
          <target state="translated">Un jeton d’annulation est passé à l’antécédent et la tâche de continuation.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken)">
          <source>A <ph id="ph1">&lt;xref:System.Timers.Timer?displayProperty=nameWithType&gt;</ph> object is used to define a timeout value of 100 milliseconds.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Timers.Timer?displayProperty=nameWithType&gt;</ph> objet est utilisé pour définir une valeur de délai d’attente de 100 millisecondes.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken)">
          <source>If the event fires, the <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType&gt;</ph> method is called, and the cancellation token is used to request cancellation of the tasks.</source>
          <target state="translated">Si l’événement se déclenche, le <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType&gt;</ph> méthode est appelée, et le jeton d’annulation est utilisé pour demander l’annulation des tâches.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken)">
          <source>Typically, supplying a value of about 100,000 causes the timeout interval to expire and the <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType&gt;</ph> event to fire, and the cancellation request to be set.</source>
          <target state="translated">En fournissant une valeur d’environ 100 000 provoque généralement, l’intervalle de délai d’attente expire et le <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType&gt;</ph> de l’événement et la demande d’annulation à définir.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> has been disposed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> a été supprimé.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> that created <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> has been disposed.</source>
          <target state="translated">Le <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> qui a créé <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> a été supprimé.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;paramref name="continuationAction" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">L'argument <ph id="ph1">&lt;paramref name="continuationAction" /&gt;</ph> a la valeur <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskContinuationOptions)">
          <source>An action to according the condition specified in <bpt id="p1">&lt;c&gt;</bpt>continuationOptions<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Action à exécuter selon la condition spécifiée dans <bpt id="p1">&lt;c&gt;</bpt>continuationOptions<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskContinuationOptions)">
          <source>When run, the delegate will be passed the completed task as an argument.</source>
          <target state="translated">Quand elle est exécutée, la tâche achevée est passée au délégué en tant qu'argument.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskContinuationOptions)">
          <source>Options for when the continuation is scheduled and how it behaves.</source>
          <target state="translated">Options applicables quand la continuation est planifiée et qui en régissent le comportement.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskContinuationOptions)">
          <source>This includes criteria, such as <ph id="ph1">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" /&gt;</ph>, as well as execution options, such as <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" /&gt;</ph>.</source>
          <target state="translated">Cela inclut des critères, tels que <ph id="ph1">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" /&gt;</ph>, ainsi que des options d'exécution, telles que <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskContinuationOptions)">
          <source>Creates a continuation that executes according the condition specified in <ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph>.</source>
          <target state="translated">Crée une continuation qui s'exécute en fonction de la condition spécifiée dans <ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskContinuationOptions)">
          <source>A new continuation <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</source>
          <target state="translated">Nouvelle <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> de continuation.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> will not be scheduled for execution until the current task has completed.</source>
          <target state="translated">Retourné <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> ne sera pas planifié pour l’exécution jusqu'à ce que la tâche en cours est terminée.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskContinuationOptions)">
          <source>If the continuation criteria specified through the <ph id="ph1">`continuationOptions`</ph> parameter are not met, the continuation task will be canceled instead of scheduled.</source>
          <target state="translated">Si les critères de continuation spécifiés par le biais du <ph id="ph1">`continuationOptions`</ph> paramètre ne sont pas remplies, la tâche de continuation sera annulée au lieu d’être planifiée.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskContinuationOptions)">
          <source>For more information, see <bpt id="p1">[</bpt>Chaining Tasks by Using Continuation Tasks<ept id="p1">](~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md)</ept>.</source>
          <target state="translated">Pour plus d’informations, consultez <bpt id="p1">[</bpt>Chaînage des tâches à l’aide de tâches de continuation<ept id="p1">](~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md)</ept>.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> has been disposed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> a été supprimé.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="continuationAction" /&gt;</ph> argument is null.</source>
          <target state="translated">L’argument <ph id="ph1">&lt;paramref name="continuationAction" /&gt;</ph> a la valeur null.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph> argument specifies an invalid value for <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskContinuationOptions" /&gt;</ph>.</source>
          <target state="translated">L'argument <ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph> spécifie une valeur non valide pour <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskContinuationOptions" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskScheduler)">
          <source>An action to run when the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> completes.</source>
          <target state="translated">Action à exécuter quand <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> se termine.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskScheduler)">
          <source>When run, the delegate will be passed the completed task as an argument.</source>
          <target state="translated">Quand elle est exécutée, la tâche achevée est passée au délégué en tant qu'argument.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> to associate with the continuation task and to use for its execution.</source>
          <target state="translated">The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> à associer à la tâche de continuation et à utiliser pour son exécution.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskScheduler)">
          <source>Creates a continuation that executes asynchronously when the target <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> completes.</source>
          <target state="translated">Crée une continuation qui s'exécute de façon asynchrone quand la <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> cible se termine.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskScheduler)">
          <source>A new continuation <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</source>
          <target state="translated">Nouvelle <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> de continuation.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskScheduler)">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</source>
          <target state="translated">Retourné <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> n’est plus planifié pour l’exécution jusqu'à ce que la tâche en cours est terminée, si elle se termine en raison de fonctionne correctement jusqu'à son achèvement, provoquer une erreur en raison d’une exception non gérée ou sortir tôt en raison de l’annulation.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> has been disposed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> a été supprimé.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="continuationAction" /&gt;</ph> argument is null.</source>
          <target state="translated">L’argument <ph id="ph1">&lt;paramref name="continuationAction" /&gt;</ph> a la valeur null.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskScheduler)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> argument is null.</source>
          <target state="translated">L’argument <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> a la valeur null.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.CancellationToken)">
          <source>An action to run when the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> completes.</source>
          <target state="translated">Action à exécuter quand <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> se termine.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.CancellationToken)">
          <source>When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</source>
          <target state="translated">Lors de l'exécution, la tâche achevée et l'objet d'état fourni par l'appelant sont passés au délégué sous la forme d'arguments.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.CancellationToken)">
          <source>An object representing data to be used by the continuation action.</source>
          <target state="translated">Objet représentant les données que l'action de continuation doit utiliser.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> that will be assigned to the new continuation task.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> qui sera assigné à la nouvelle tâche de continuation.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.CancellationToken)">
          <source>Creates a continuation that executes when the target <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> completes.</source>
          <target state="translated">Crée une continuation qui s'exécute quand la <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> cible se termine.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.CancellationToken)">
          <source>A new continuation <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</source>
          <target state="translated">Nouvelle <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> de continuation.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.CancellationToken)">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.</source>
          <target state="translated">Retourné <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> n’est plus planifié pour l’exécution jusqu'à ce que la tâche en cours est terminée, si elle se termine en raison de fonctionne correctement jusqu'à son achèvement, provoquer une erreur en raison d’une exception non gérée ou sortir tôt en raison de l’annulation.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;paramref name="continuationAction" /&gt;</ph> argument is null.</source>
          <target state="translated">L’argument <ph id="ph1">&lt;paramref name="continuationAction" /&gt;</ph> a la valeur null.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.CancellationToken)">
          <source>The provided <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> has already been disposed.</source>
          <target state="translated">Le <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> fourni a déjà été supprimé.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)">
          <source>An action to run when the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> completes.</source>
          <target state="translated">Action à exécuter quand <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> se termine.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)">
          <source>When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</source>
          <target state="translated">Lors de l'exécution, la tâche achevée et l'objet d'état fourni par l'appelant sont passés au délégué sous la forme d'arguments.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)">
          <source>An object representing data to be used by the continuation action.</source>
          <target state="translated">Objet représentant les données que l'action de continuation doit utiliser.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)">
          <source>Options for when the continuation is scheduled and how it behaves.</source>
          <target state="translated">Options applicables quand la continuation est planifiée et qui en régissent le comportement.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)">
          <source>This includes criteria, such  as <ph id="ph1">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" /&gt;</ph>, as well as execution options, such as <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" /&gt;</ph>.</source>
          <target state="translated">Cela inclut des critères, tels que <ph id="ph1">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" /&gt;</ph>, ainsi que des options d'exécution, telles que <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)">
          <source>Creates a continuation that executes when the target <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> completes.</source>
          <target state="translated">Crée une continuation qui s'exécute quand la <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> cible se termine.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)">
          <source>A new continuation <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</source>
          <target state="translated">Nouvelle <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> de continuation.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> will not be scheduled for execution until the current task has completed.</source>
          <target state="translated">Retourné <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> ne sera pas planifié pour l’exécution jusqu'à ce que la tâche en cours est terminée.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)">
          <source>If the continuation criteria specified through the <ph id="ph1">`continuationOptions`</ph> parameter are not met, the continuation task will be canceled instead of scheduled.</source>
          <target state="translated">Si les critères de continuation spécifiés par le biais du <ph id="ph1">`continuationOptions`</ph> paramètre ne sont pas remplies, la tâche de continuation sera annulée au lieu d’être planifiée.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="continuationAction" /&gt;</ph> argument is null.</source>
          <target state="translated">L’argument <ph id="ph1">&lt;paramref name="continuationAction" /&gt;</ph> a la valeur null.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph> argument specifies an invalid value for <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskContinuationOptions" /&gt;</ph>.</source>
          <target state="translated">L'argument <ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph> spécifie une valeur non valide pour <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskContinuationOptions" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.Tasks.TaskScheduler)">
          <source>An action to run when the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> completes.</source>
          <target state="translated">Action à exécuter quand <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> se termine.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.Tasks.TaskScheduler)">
          <source>When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.</source>
          <target state="translated">Lors de l'exécution, la tâche achevée et l'objet d'état fourni par l'appelant sont passés au délégué sous la forme d'arguments.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.Tasks.TaskScheduler)">
          <source>An object representing data to be used by the continuation action.</source>
          <target state="translated">Objet représentant les données que l'action de continuation doit utiliser.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> to associate with the continuation task and to use for its execution.</source>
          <target state="translated">The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> à associer à la tâche de continuation et à utiliser pour son exécution.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.Tasks.TaskScheduler)">
          <source>Creates a continuation that executes when the target <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> completes.</source>
          <target state="translated">Crée une continuation qui s'exécute quand la <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> cible se termine.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.Tasks.TaskScheduler)">
          <source>A new continuation <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</source>
          <target state="translated">Nouvelle <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> de continuation.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.Tasks.TaskScheduler)">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</source>
          <target state="translated">Retourné <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> n’est plus planifié pour l’exécution jusqu'à ce que la tâche en cours est terminée, si elle se termine en raison de fonctionne correctement jusqu'à son achèvement, provoquer une erreur en raison d’une exception non gérée ou sortir tôt en raison de l’annulation.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> argument is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">L'argument <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> a la valeur <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>An action to run according the condition specified in <bpt id="p1">&lt;c&gt;</bpt>continuationOptions<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Action à exécuter selon la condition spécifiée dans <bpt id="p1">&lt;c&gt;</bpt>continuationOptions<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>When run, the delegate will be passed the completed task as an argument.</source>
          <target state="translated">Quand elle est exécutée, la tâche achevée est passée au délégué en tant qu'argument.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> that will be assigned to the new continuation task.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> qui sera assigné à la nouvelle tâche de continuation.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>Options for when the continuation is scheduled and how it behaves.</source>
          <target state="translated">Options applicables quand la continuation est planifiée et qui en régissent le comportement.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>This includes criteria, such as <ph id="ph1">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" /&gt;</ph>, as well as execution options, such as <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" /&gt;</ph>.</source>
          <target state="translated">Cela inclut des critères, tels que <ph id="ph1">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" /&gt;</ph>, ainsi que des options d'exécution, telles que <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> to associate with the continuation task and to use for its execution.</source>
          <target state="translated">The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> à associer à la tâche de continuation et à utiliser pour son exécution.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>Creates a continuation that executes according the condition specified in <ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph>.</source>
          <target state="translated">Crée une continuation qui s'exécute en fonction de la condition spécifiée dans <ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>A new continuation <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</source>
          <target state="translated">Nouvelle <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> de continuation.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> will not be scheduled for execution until the current task has completed.</source>
          <target state="translated">Retourné <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> ne sera pas planifié pour l’exécution jusqu'à ce que la tâche en cours est terminée.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>If the criteria specified through the <ph id="ph1">`continuationOptions`</ph> parameter are not met, the continuation task will be canceled instead of scheduled.</source>
          <target state="translated">Si les critères spécifiés par le biais du <ph id="ph1">`continuationOptions`</ph> paramètre ne sont pas remplies, la tâche de continuation sera annulée au lieu d’être planifiée.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>For more information, see <bpt id="p1">[</bpt>Chaining Tasks by Using Continuation Tasks<ept id="p1">](~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md)</ept>.</source>
          <target state="translated">Pour plus d’informations, consultez <bpt id="p1">[</bpt>Chaînage des tâches à l’aide de tâches de continuation<ept id="p1">](~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md)</ept>.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> has been disposed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> a été supprimé.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> that created <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> has already been disposed.</source>
          <target state="translated">Le <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> qui a créé <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> a déjà été supprimé.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="continuationAction" /&gt;</ph> argument is null.</source>
          <target state="translated">L’argument <ph id="ph1">&lt;paramref name="continuationAction" /&gt;</ph> a la valeur null.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> argument is null.</source>
          <target state="translated">L’argument <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> a la valeur null.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph> argument specifies an invalid value for <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskContinuationOptions" /&gt;</ph>.</source>
          <target state="translated">L'argument <ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph> spécifie une valeur non valide pour <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskContinuationOptions" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>An action to run when the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> completes.</source>
          <target state="translated">Action à exécuter quand <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> se termine.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</source>
          <target state="translated">Lors de l'exécution, la tâche achevée et l'objet d'état fourni par l'appelant sont passés au délégué sous la forme d'arguments.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>An object representing data to be used by the continuation action.</source>
          <target state="translated">Objet représentant les données que l'action de continuation doit utiliser.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> that will be assigned to the new continuation task.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> qui sera assigné à la nouvelle tâche de continuation.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>Options for when the continuation is scheduled and how it behaves.</source>
          <target state="translated">Options applicables quand la continuation est planifiée et qui en régissent le comportement.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>This includes criteria, such as <ph id="ph1">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" /&gt;</ph>, as  well as execution options, such as <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" /&gt;</ph>.</source>
          <target state="translated">Cela inclut des critères, tels que <ph id="ph1">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" /&gt;</ph>, ainsi que des options d'exécution, telles que <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> to associate with the continuation task and to use for its  execution.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> à associer à la tâche de continuation et à utiliser pour son exécution.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>Creates a continuation that executes when the target <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> completes.</source>
          <target state="translated">Crée une continuation qui s'exécute quand la <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> cible se termine.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>A new continuation <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</source>
          <target state="translated">Nouvelle <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> de continuation.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> will not be scheduled for execution until the current task has  completed.</source>
          <target state="translated">Retourné <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> ne sera pas planifié pour l’exécution jusqu'à ce que la tâche en cours est terminée.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>If the criteria specified through the <ph id="ph1">`continuationOptions`</ph> parameter  are not met, the continuation task will be canceled instead of scheduled.</source>
          <target state="translated">Si les critères spécifiés par le biais du <ph id="ph1">`continuationOptions`</ph> paramètre ne sont pas remplies, la tâche de continuation sera annulée au lieu d’être planifiée.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> argument is null.</source>
          <target state="translated">L’argument <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> a la valeur null.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph> argument specifies an invalid value for <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskContinuationOptions" /&gt;</ph>.</source>
          <target state="translated">L'argument <ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph> spécifie une valeur non valide pour <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskContinuationOptions" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The provided <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> has already been disposed.</source>
          <target state="translated">Le <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> fourni a déjà été supprimé.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0})">
          <source>The type of the result produced by the continuation.</source>
          <target state="translated">Type du résultat produit par la continuation.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0})">
          <source>A function to run when the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> completes.</source>
          <target state="translated">Fonction à exécuter quand <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> se termine.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0})">
          <source>When run, the delegate will be passed the completed task as an argument.</source>
          <target state="translated">Quand elle est exécutée, la tâche achevée est passée au délégué en tant qu'argument.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0})">
          <source>Creates a continuation that executes asynchronously when the target <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> completes.</source>
          <target state="translated">Crée une continuation qui s'exécute de façon asynchrone quand la <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> cible se termine.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0})">
          <source>A new continuation <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Nouvelle <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> de continuation.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0})">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</source>
          <target state="translated">Retourné <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> n’est plus planifié pour l’exécution jusqu'à ce que la tâche en cours est terminée, si elle se termine en raison de fonctionne correctement jusqu'à son achèvement, provoquer une erreur en raison d’une exception non gérée ou sortir tôt en raison de l’annulation.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> has been disposed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> a été supprimé.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0})">
          <source>The <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> argument is null.</source>
          <target state="translated">L’argument <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> a la valeur null.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object)">
          <source>The type of the result produced by the continuation.</source>
          <target state="translated">Type du résultat produit par la continuation.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object)">
          <source>A function to run when the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> completes.</source>
          <target state="translated">Fonction à exécuter quand <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> se termine.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object)">
          <source>When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.</source>
          <target state="translated">Lors de l'exécution, la tâche achevée et l'objet d'état fourni par l'appelant sont passés au délégué sous la forme d'arguments.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object)">
          <source>An object representing data to be used by the continuation function.</source>
          <target state="translated">Objet représentant les données que la fonction de continuation doit utiliser.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object)">
          <source>Creates a continuation that executes when the target <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> completes.</source>
          <target state="translated">Crée une continuation qui s'exécute quand la <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> cible se termine.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object)">
          <source>A new continuation <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Nouvelle <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> de continuation.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object)">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> will not be scheduled for execution until the current  task has completed, whether it completes due to running to completion successfully, faulting due  to an unhandled exception, or exiting out early due to being canceled.</source>
          <target state="translated">Retourné <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> n’est plus planifié pour l’exécution jusqu'à ce que la tâche en cours est terminée, si elle se termine en raison de fonctionne correctement jusqu'à son achèvement, provoquer une erreur en raison d’une exception non gérée ou sortir tôt en raison de l’annulation.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object)">
          <source>The following example creates a chain of continuation tasks.</source>
          <target state="translated">L’exemple suivant crée une chaîne de tâches de continuation.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object)">
          <source>Each task provides the current time, a <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> object, for the state argument of the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.ContinueWith%28System.Action%7BSystem.Threading.Tasks.Task%2CSystem.Object%7D%2CSystem.Object%29&gt;</ph> method.</source>
          <target state="translated">Chaque tâche fournit l’heure actuelle, un <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> objet, pour l’argument de l’état de la <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.ContinueWith%28System.Action%7BSystem.Threading.Tasks.Task%2CSystem.Object%7D%2CSystem.Object%29&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object)">
          <source>Each <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> value represents the time at which the continue task is created.</source>
          <target state="translated">Chaque <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> valeur représente l’heure de création de la tâche de continuer.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object)">
          <source>Each task produces as its result a second <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> value that represents the time at which the task finishes.</source>
          <target state="translated">Chaque tâche génère un deuxième <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> valeur qui représente l’heure à laquelle la tâche se termine.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object)">
          <source>After all tasks finish, the example displays the date and times at which each continuation task starts and finishes.</source>
          <target state="translated">Une fois que toutes les tâches terminées, l’exemple affiche les date et heure à laquelle chaque tâche de continuation commence et se termine.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> argument is null.</source>
          <target state="translated">L’argument <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> a la valeur null.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken)">
          <source>The type of the result produced by the continuation.</source>
          <target state="translated">Type du résultat produit par la continuation.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken)">
          <source>A function to run when the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> completes.</source>
          <target state="translated">Fonction à exécuter quand <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> se termine.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken)">
          <source>When run, the delegate will be passed the completed task as an argument.</source>
          <target state="translated">Quand elle est exécutée, la tâche achevée est passée au délégué en tant qu'argument.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> that will be assigned to the new task.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> qui sera assigné à la nouvelle tâche.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken)">
          <source>Creates a continuation that executes asynchronously when the target <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> completes.</source>
          <target state="translated">Crée une continuation qui s'exécute de façon asynchrone quand la <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> cible se termine.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken)">
          <source>A new continuation <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Nouvelle <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> de continuation.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken)">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</source>
          <target state="translated">Retourné <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> n’est plus planifié pour l’exécution jusqu'à ce que la tâche en cours est terminée, si elle se termine en raison de fonctionne correctement jusqu'à son achèvement, provoquer une erreur en raison d’une exception non gérée ou sortir tôt en raison de l’annulation.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> has been disposed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> a été supprimé.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> that created <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> has already been disposed.</source>
          <target state="translated">Le <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> qui a créé <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> a déjà été supprimé.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> argument is null.</source>
          <target state="translated">L’argument <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> a la valeur null.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The type of the result produced by the continuation.</source>
          <target state="translated">Type du résultat produit par la continuation.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>A function to run according the condition specified in <bpt id="p1">&lt;c&gt;</bpt>continuationOptions<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Fonction à exécuter selon la condition spécifiée dans <bpt id="p1">&lt;c&gt;</bpt>continuationOptions<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>When run, the delegate will be passed the completed task as an argument.</source>
          <target state="translated">Quand elle est exécutée, la tâche achevée est passée au délégué en tant qu'argument.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>Options for when the continuation is scheduled and how it behaves.</source>
          <target state="translated">Options applicables quand la continuation est planifiée et qui en régissent le comportement.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>This includes criteria, such as <ph id="ph1">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" /&gt;</ph>, as well as execution options, such as <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" /&gt;</ph>.</source>
          <target state="translated">Cela inclut des critères, tels que <ph id="ph1">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" /&gt;</ph>, ainsi que des options d'exécution, telles que <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>Creates a continuation that executes according the condition specified in <ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph>.</source>
          <target state="translated">Crée une continuation qui s'exécute en fonction de la condition spécifiée dans <ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>A new continuation <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Nouvelle <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> de continuation.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</source>
          <target state="translated">Retourné <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> n’est plus planifié pour l’exécution jusqu'à ce que la tâche en cours est terminée, si elle se termine en raison de fonctionne correctement jusqu'à son achèvement, provoquer une erreur en raison d’une exception non gérée ou sortir tôt en raison de l’annulation.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The <ph id="ph1">`continuationFunction`</ph>, when executed, should return a <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>..</source>
          <target state="translated">Le <ph id="ph1">`continuationFunction`</ph>est exécuté, doit retourner un <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>...</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> has been disposed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> a été supprimé.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> argument is null.</source>
          <target state="translated">L’argument <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> a la valeur null.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.Tasks.TaskContinuationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph> argument specifies an invalid value for <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskContinuationOptions" /&gt;</ph>.</source>
          <target state="translated">L'argument <ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph> spécifie une valeur non valide pour <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskContinuationOptions" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.Tasks.TaskScheduler)">
          <source>The type of the result produced by the continuation.</source>
          <target state="translated">Type du résultat produit par la continuation.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.Tasks.TaskScheduler)">
          <source>A function to run when the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> completes.</source>
          <target state="translated">Fonction à exécuter quand <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> se termine.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.Tasks.TaskScheduler)">
          <source>When run, the delegate will be passed the completed task as an argument.</source>
          <target state="translated">Quand elle est exécutée, la tâche achevée est passée au délégué en tant qu'argument.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> to associate with the continuation task and to use for its execution.</source>
          <target state="translated">The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> à associer à la tâche de continuation et à utiliser pour son exécution.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.Tasks.TaskScheduler)">
          <source>Creates a continuation that executes asynchronously when the target <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> completes.</source>
          <target state="translated">Crée une continuation qui s'exécute de façon asynchrone quand la <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> cible se termine.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.Tasks.TaskScheduler)">
          <source>A new continuation <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Nouvelle <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> de continuation.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.Tasks.TaskScheduler)">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</source>
          <target state="translated">Retourné <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> n’est plus planifié pour l’exécution jusqu'à ce que la tâche en cours est terminée, si elle se termine en raison de fonctionne correctement jusqu'à son achèvement, provoquer une erreur en raison d’une exception non gérée ou sortir tôt en raison de l’annulation.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> has been disposed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> a été supprimé.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> argument is null.</source>
          <target state="translated">L’argument <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> a la valeur null.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.Tasks.TaskScheduler)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> argument is null.</source>
          <target state="translated">L’argument <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> a la valeur null.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.CancellationToken)">
          <source>The type of the result produced by the continuation.</source>
          <target state="translated">Type du résultat produit par la continuation.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.CancellationToken)">
          <source>A function to run when the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> completes.</source>
          <target state="translated">Fonction à exécuter quand <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> se termine.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.CancellationToken)">
          <source>When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.</source>
          <target state="translated">Lors de l'exécution, la tâche achevée et l'objet d'état fourni par l'appelant sont passés au délégué sous la forme d'arguments.</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.CancellationToken)">
          <source>An object representing data to be used by the continuation function.</source>
          <target state="translated">Objet représentant les données que la fonction de continuation doit utiliser.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> that will be assigned to the new task.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> qui sera assigné à la nouvelle tâche.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.CancellationToken)">
          <source>Creates a continuation that executes when the target <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> completes.</source>
          <target state="translated">Crée une continuation qui s'exécute quand la <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> cible se termine.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.CancellationToken)">
          <source>A new continuation <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Nouvelle <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> de continuation.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.CancellationToken)">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> will not be scheduled for execution until the current  task has completed, whether it completes due to running to completion successfully, faulting due  to an unhandled exception, or exiting out early due to being canceled.</source>
          <target state="translated">Retourné <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> n’est plus planifié pour l’exécution jusqu'à ce que la tâche en cours est terminée, si elle se termine en raison de fonctionne correctement jusqu'à son achèvement, provoquer une erreur en raison d’une exception non gérée ou sortir tôt en raison de l’annulation.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> argument is null.</source>
          <target state="translated">L’argument <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> a la valeur null.</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.CancellationToken)">
          <source>The provided <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> has already been disposed.</source>
          <target state="translated">Le <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> fourni a déjà été supprimé.</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)">
          <source>The type of the result produced by the continuation.</source>
          <target state="translated">Type du résultat produit par la continuation.</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)">
          <source>A function to run when the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> completes.</source>
          <target state="translated">Fonction à exécuter quand <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> se termine.</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)">
          <source>When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</source>
          <target state="translated">Lors de l'exécution, la tâche achevée et l'objet d'état fourni par l'appelant sont passés au délégué sous la forme d'arguments.</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)">
          <source>An object representing data to be used by the continuation function.</source>
          <target state="translated">Objet représentant les données que la fonction de continuation doit utiliser.</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)">
          <source>Options for when the continuation is scheduled and how it behaves.</source>
          <target state="translated">Options applicables quand la continuation est planifiée et qui en régissent le comportement.</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)">
          <source>This includes criteria, such as <ph id="ph1">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" /&gt;</ph>, as well as execution options, such as <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" /&gt;</ph>.</source>
          <target state="translated">Cela inclut des critères, tels que <ph id="ph1">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" /&gt;</ph>, ainsi que des options d'exécution, telles que <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)">
          <source>Creates a continuation that executes when the target <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> completes.</source>
          <target state="translated">Crée une continuation qui s'exécute quand la <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> cible se termine.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)">
          <source>A new continuation <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Nouvelle <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> de continuation.</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> will not be scheduled for execution until the current  task has completed, whether it completes due to running to completion successfully, faulting due  to an unhandled exception, or exiting out early due to being canceled.</source>
          <target state="translated">Retourné <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> n’est plus planifié pour l’exécution jusqu'à ce que la tâche en cours est terminée, si elle se termine en raison de fonctionne correctement jusqu'à son achèvement, provoquer une erreur en raison d’une exception non gérée ou sortir tôt en raison de l’annulation.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)">
          <source>The <ph id="ph1">`continuationFunction`</ph>, when executed, should return a <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>.</source>
          <target state="translated">Le <ph id="ph1">`continuationFunction`</ph>est exécuté, doit retourner un <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)">
          <source>This task's completion state will be transferred to the task returned from the ContinueWith call.</source>
          <target state="translated">État d’achèvement de cette tâche est transférée à la tâche retournée à partir de l’appel de la méthode ContinueWith.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> argument is null.</source>
          <target state="translated">L’argument <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> a la valeur null.</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)">
          <source>The <ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph> argument specifies an invalid value for <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskContinuationOptions" /&gt;</ph>.</source>
          <target state="translated">L'argument <ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph> spécifie une valeur non valide pour <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskContinuationOptions" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)">
          <source>The type of the result produced by the continuation.</source>
          <target state="translated">Type du résultat produit par la continuation.</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)">
          <source>A function to run when the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> completes.</source>
          <target state="translated">Fonction à exécuter quand <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> se termine.</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)">
          <source>When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.</source>
          <target state="translated">Lors de l'exécution, la tâche achevée et l'objet d'état fourni par l'appelant sont passés au délégué sous la forme d'arguments.</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)">
          <source>An object representing data to be used by the continuation function.</source>
          <target state="translated">Objet représentant les données que la fonction de continuation doit utiliser.</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> to associate with the continuation task and to use for its execution.</source>
          <target state="translated">The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> à associer à la tâche de continuation et à utiliser pour son exécution.</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)">
          <source>Creates a continuation that executes when the target <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> completes.</source>
          <target state="translated">Crée une continuation qui s'exécute quand la <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> cible se termine.</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)">
          <source>A new continuation <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Nouvelle <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> de continuation.</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.</source>
          <target state="translated">Retourné <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> n’est plus planifié pour l’exécution jusqu'à ce que la tâche en cours est terminée, si elle se termine en raison de fonctionne correctement jusqu'à son achèvement, provoquer une erreur en raison d’une exception non gérée ou sortir tôt en raison de l’annulation.</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> argument is null.</source>
          <target state="translated">L’argument <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> a la valeur null.</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The type of the result produced by the continuation.</source>
          <target state="translated">Type du résultat produit par la continuation.</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>A function to run according the condition specified in <bpt id="p1">&lt;c&gt;</bpt>continuationOptions<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Fonction à exécuter selon la condition spécifiée dans <bpt id="p1">&lt;c&gt;</bpt>continuationOptions<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>When run, the delegate will be passed as an argument this completed task.</source>
          <target state="translated">Une fois exécuté, le délégué passera cette tâche achevée en tant qu’argument.</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> that will be assigned to the new task.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> qui sera assigné à la nouvelle tâche.</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>Options for when the continuation is scheduled and how it behaves.</source>
          <target state="translated">Options applicables quand la continuation est planifiée et qui en régissent le comportement.</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>This includes criteria, such as <ph id="ph1">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" /&gt;</ph>, as well as execution options, such as <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" /&gt;</ph>.</source>
          <target state="translated">Cela inclut des critères, tels que <ph id="ph1">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" /&gt;</ph>, ainsi que des options d'exécution, telles que <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> to associate with the continuation task and to use for its execution.</source>
          <target state="translated">The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> à associer à la tâche de continuation et à utiliser pour son exécution.</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>Creates a continuation that executes according the condition specified in <ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph>.</source>
          <target state="translated">Crée une continuation qui s'exécute en fonction de la condition spécifiée dans <ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>A new continuation <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Nouvelle <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> de continuation.</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</source>
          <target state="translated">Retourné <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> n’est plus planifié pour l’exécution jusqu'à ce que la tâche en cours est terminée, si elle se termine en raison de fonctionne correctement jusqu'à son achèvement, provoquer une erreur en raison d’une exception non gérée ou sortir tôt en raison de l’annulation.</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">`continuationFunction`</ph>, when executed, should return a <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>.</source>
          <target state="translated">Le <ph id="ph1">`continuationFunction`</ph>est exécuté, doit retourner un <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> has been disposed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> a été supprimé.</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> that created <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> has already been disposed.</source>
          <target state="translated">Le <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> qui a créé <ph id="ph2">&lt;paramref name="cancellationToken" /&gt;</ph> a déjà été supprimé.</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> argument is null.</source>
          <target state="translated">L’argument <ph id="ph1">&lt;paramref name="continuationFunction" /&gt;</ph> a la valeur null.</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> argument is null.</source>
          <target state="translated">L’argument <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> a la valeur null.</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph> argument specifies an invalid value for <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskContinuationOptions" /&gt;</ph>.</source>
          <target state="translated">L'argument <ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph> spécifie une valeur non valide pour <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskContinuationOptions" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The type of the result produced by the continuation.</source>
          <target state="translated">Type du résultat produit par la continuation.</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>A function to run when the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> completes.</source>
          <target state="translated">Fonction à exécuter quand <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> se termine.</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</source>
          <target state="translated">Lors de l'exécution, la tâche achevée et l'objet d'état fourni par l'appelant sont passés au délégué sous la forme d'arguments.</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>An object representing data to be used by the continuation function.</source>
          <target state="translated">Objet représentant les données que la fonction de continuation doit utiliser.</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> that will be assigned to the new task.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> qui sera assigné à la nouvelle tâche.</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>Options for when the continuation is scheduled and how it behaves.</source>
          <target state="translated">Options applicables quand la continuation est planifiée et qui en régissent le comportement.</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>This includes criteria, such as <ph id="ph1">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" /&gt;</ph>, as well as execution options, such as <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" /&gt;</ph>.</source>
          <target state="translated">Cela inclut des critères, tels que <ph id="ph1">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" /&gt;</ph>, ainsi que des options d'exécution, telles que <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> to associate with the continuation task and to use for its execution.</source>
          <target state="translated">The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> à associer à la tâche de continuation et à utiliser pour son exécution.</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>Creates a continuation that executes when the target <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> completes.</source>
          <target state="translated">Crée une continuation qui s'exécute quand la <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> cible se termine.</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>A new continuation <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Nouvelle <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> de continuation.</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.</source>
          <target state="translated">Retourné <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> n’est plus planifié pour l’exécution jusqu'à ce que la tâche en cours est terminée, si elle se termine en raison de fonctionne correctement jusqu'à son achèvement, provoquer une erreur en raison d’une exception non gérée ou sortir tôt en raison de l’annulation.</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">`continuationFunction`</ph>, when executed, should return a <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>.</source>
          <target state="translated">Le <ph id="ph1">`continuationFunction`</ph>est exécuté, doit retourner un <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>This task's completion state will be transferred to the task returned from the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601.ContinueWith%2A?displayProperty=nameWithType&gt;</ph> call.</source>
          <target state="translated">État d’achèvement de cette tâche n’est transférée à la tâche retournée à partir de la <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601.ContinueWith%2A?displayProperty=nameWithType&gt;</ph> appeler.</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> argument is null.</source>
          <target state="translated">L’argument <ph id="ph1">&lt;paramref name="scheduler" /&gt;</ph> a la valeur null.</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The  <ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph> argument specifies an invalid value for <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskContinuationOptions" /&gt;</ph>.</source>
          <target state="translated">L’argument <ph id="ph1">&lt;paramref name="continuationOptions" /&gt;</ph> spécifie une valeur non valide pour <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskContinuationOptions" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
          <source>The provided <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> has already been disposed.</source>
          <target state="translated">Le <ph id="ph1">&lt;see cref="T:System.Threading.CancellationToken" /&gt;</ph> fourni a déjà été supprimé.</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" uid="P:System.Threading.Tasks.Task`1.Factory">
          <source>Provides access to factory methods for creating and configuring <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> instances.</source>
          <target state="translated">Fournit l'accès aux méthodes de fabrique pour la création et la configuration d'instances de <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.Task`1.Factory">
          <source>A factory object that can create a variety of <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph> objects.</source>
          <target state="translated">Objet de fabrique pouvant créer une variété d'objets <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.Task`1.Factory">
          <source>This property returns a default instance of the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory%601&gt;</ph> class that is identical to the one created by calling the parameterless <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory%601.%23ctor?displayProperty=nameWithType&gt;</ph> constructor.</source>
          <target state="translated">Cette propriété retourne une instance par défaut de la <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory%601&gt;</ph> classe qui est identique à celui créé par l’appel sans paramètre <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory%601.%23ctor?displayProperty=nameWithType&gt;</ph> constructeur.</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.Task`1.Factory">
          <source>It has the following property values:</source>
          <target state="translated">Elle comporte des valeurs de propriété suivantes :</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.Task`1.Factory">
          <source>Property</source>
          <target state="translated">Property</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.Task`1.Factory">
          <source>Value</source>
          <target state="translated">Value</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.Task`1.Factory">
          <source><ph id="ph1">`null`</ph>, or <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskScheduler.Current%2A?displayProperty=nameWithType&gt;</ph></source>
          <target state="translated"><ph id="ph1">`null`</ph>, ou <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskScheduler.Current%2A?displayProperty=nameWithType&gt;</ph></target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.Task`1.Factory">
          <source>The most common use of this property is to create and start a new task in a single call to the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory%601.StartNew%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">L’utilisation la plus courante de cette propriété consiste à créer et démarrer une nouvelle tâche dans un seul appel à la <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory%601.StartNew%2A?displayProperty=nameWithType&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.Task`1.Factory">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType&gt;</ph> method provides the easiest way to create a <ph id="ph3">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object with default configuration values.</source>
          <target state="translated">En commençant par le <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, le <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType&gt;</ph> méthode fournit le moyen le plus simple pour créer un <ph id="ph3">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> objet avec les valeurs de configuration par défaut.</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.Task`1.Factory">
          <source>The following example uses the static <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601.Factory%2A&gt;</ph> property to make three calls to the <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory%601.StartNew%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">L’exemple suivant utilise la méthode statique <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601.Factory%2A&gt;</ph> propriété afin que les trois appels à la <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory%601.StartNew%2A?displayProperty=nameWithType&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.Task`1.Factory">
          <source>The first starts a <ph id="ph1">`Task&lt;Int32&gt;`</ph> object, which executes a lambda expression that returns 1.</source>
          <target state="translated">La première valeur démarre un <ph id="ph1">`Task&lt;Int32&gt;`</ph> objet, qui exécute une expression lambda qui retourne la valeur 1.</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.Task`1.Factory">
          <source>The second starts a <ph id="ph1">`Task&lt;Test&gt;`</ph> object, which executes a lambda expression that instantiates a new <ph id="ph2">`Test`</ph> instance.</source>
          <target state="translated">La deuxième démarre un <ph id="ph1">`Task&lt;Test&gt;`</ph> objet, qui exécute une expression lambda qui instancie une nouvelle <ph id="ph2">`Test`</ph> instance.</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.Task`1.Factory">
          <source>The third starts a <ph id="ph1">`Task&lt;String[]&gt;`</ph> object, which enumerates the files in the C:\Users\Public\Pictures\Sample Pictures\ directory.</source>
          <target state="translated">Le démarrage de la troisième un <ph id="ph1">`Task&lt;String[]&gt;`</ph> objet, qui énumère les fichiers dans le répertoire C:\Users\Public\Pictures\Sample Pictures\.</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.Task`1.Factory">
          <source>(Note that successful execution of the example requires that the directory exist and that it contain files.</source>
          <target state="translated">(Notez que l’exécution réussie de l’exemple requiert que le répertoire existe et qu’il contient de fichiers.</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.GetAwaiter">
          <source>Gets an awaiter used to await this <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Obtient un élément awaiter utilisé pour attendre cette <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Task`1.GetAwaiter">
          <source>An awaiter instance.</source>
          <target state="translated">Instance d'élément awaiter.</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Task`1.GetAwaiter">
          <source>This method is intended for compiler user rather than use directly in code.</source>
          <target state="translated">Cette méthode est conçue pour les utilisateurs du compilateur plutôt que d’utiliser directement dans le code.</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" uid="P:System.Threading.Tasks.Task`1.Result">
          <source>Gets the result value of this <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated">Obtient la valeur de résultat de cette <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.Task`1.Result">
          <source>The result value of this <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>, which is of the same type as the task's type parameter.</source>
          <target state="translated">La valeur de résultat de <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>, qui est de même type que le paramètre de type de la tâche.</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.Task`1.Result">
          <source>Accessing the property's get accessor blocks the calling thread until the asynchronous operation is complete; it is equivalent to calling the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Wait%2A&gt;</ph> method.</source>
          <target state="translated">L’accès à d’accesseur get de la propriété bloque le thread appelant jusqu'à ce que l’opération asynchrone est terminée ; Elle équivaut à appeler le <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Wait%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.Task`1.Result">
          <source>Once the result of an operation is available, it is stored and is returned immediately on subsequent calls to the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt;</ph> property.</source>
          <target state="translated">Une fois que le résultat d’une opération est disponible, il est stocké et est retourné immédiatement sur les appels suivants à la <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt;</ph> propriété.</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.Task`1.Result">
          <source>Note that, if an exception occurred during the operation of the task, or if the task has been cancelled, the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt;</ph> property does not return a value.</source>
          <target state="translated">Notez que, si une exception s’est produite lors de l’opération de la tâche, ou si la tâche a été annulée, le <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt;</ph> propriété ne retourne pas de valeur.</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.Task`1.Result">
          <source>Instead, attempting to access the property value throws an <ph id="ph1">&lt;xref:System.AggregateException&gt;</ph> exception.</source>
          <target state="translated">Au lieu de cela, essayez d’accéder à la propriété de valeur lève une <ph id="ph1">&lt;xref:System.AggregateException&gt;</ph> exception.</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.Task`1.Result">
          <source>The following example is a command-line utility that calculates the number of bytes in the files in each directory whose name is passed as a command-line argument.</source>
          <target state="translated">L’exemple suivant est un utilitaire de ligne de commande qui calcule le nombre d’octets dans les fichiers dans chaque annuaire dont le nom est passé comme argument de ligne de commande.</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.Task`1.Result">
          <source>If the directory contains files, it executes a lambda expression that instantiates a <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> object for each file in the directory and retrieves the value of its <ph id="ph2">&lt;xref:System.IO.FileStream.Length%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">Si le répertoire contienne des fichiers, il exécute une expression lambda qui instancie un <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> objet pour chaque fichier dans le répertoire et récupère la valeur de son <ph id="ph2">&lt;xref:System.IO.FileStream.Length%2A?displayProperty=nameWithType&gt;</ph> propriété.</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.Task`1.Result">
          <source>If a directory contains no files, it simply calls the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.FromResult%2A&gt;</ph> method to create a task whose <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=nameWithType&gt;</ph> property is zero (0).</source>
          <target state="translated">Si un répertoire ne contient aucun fichier, il appelle simplement la <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.FromResult%2A&gt;</ph> méthode pour créer une tâche dont <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=nameWithType&gt;</ph> propriété est zéro (0).</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.Task`1.Result">
          <source>When the tasks finish, the total number of bytes in all a directory's files is available from the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt;</ph> property.</source>
          <target state="translated">Lorsque les tâches sont terminées, le nombre total d’octets dans les fichiers de tous les un répertoire est disponible à partir de la <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt;</ph> propriété.</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" uid="P:System.Threading.Tasks.Task`1.Result">
          <source>The task was canceled.</source>
          <target state="translated">La tâche a été annulée.</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" uid="P:System.Threading.Tasks.Task`1.Result">
          <source>The <ph id="ph1">&lt;see cref="P:System.AggregateException.InnerExceptions" /&gt;</ph> collection contains a <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskCanceledException" /&gt;</ph> object.</source>
          <target state="translated">La collection <ph id="ph1">&lt;see cref="P:System.AggregateException.InnerExceptions" /&gt;</ph> contient un objet <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.TaskCanceledException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" uid="P:System.Threading.Tasks.Task`1.Result">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" uid="P:System.Threading.Tasks.Task`1.Result">
          <source>An exception was thrown during the execution of the task.</source>
          <target state="translated">Une exception a été levée pendant l’exécution de la tâche.</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" uid="P:System.Threading.Tasks.Task`1.Result">
          <source>The <ph id="ph1">&lt;see cref="P:System.AggregateException.InnerExceptions" /&gt;</ph> collection contains information about the exception or exceptions.</source>
          <target state="translated">La collection <ph id="ph1">&lt;see cref="P:System.AggregateException.InnerExceptions" /&gt;</ph> contient des informations sur l’exception ou les exceptions.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>