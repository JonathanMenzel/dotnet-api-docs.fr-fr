<Type Name="TaskCompletionSource&lt;TResult&gt;" FullName="System.Threading.Tasks.TaskCompletionSource&lt;TResult&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3f86f989e7f8a96007914795450754711b29a29e" /><Meta Name="ms.sourcegitcommit" Value="0d09f5af167c53ca4797424c362e6c2616a36009" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="02/05/2019" /><Meta Name="ms.locfileid" Value="55739771" /></Metadata><TypeSignature Language="C#" Value="public class TaskCompletionSource&lt;TResult&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TaskCompletionSource`1&lt;TResult&gt; extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.TaskCompletionSource`1" />
  <TypeSignature Language="VB.NET" Value="Public Class TaskCompletionSource(Of TResult)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TResult&gt;&#xA;public ref class TaskCompletionSource" />
  <TypeSignature Language="F#" Value="type TaskCompletionSource&lt;'Result&gt; = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TResult" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="TResult"><span data-ttu-id="5856e-101">Le type de la valeur de résultat associée à cet <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />.</span><span class="sxs-lookup"><span data-stu-id="5856e-101">The type of the result value associated with this <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />.</span></span></typeparam>
    <summary><span data-ttu-id="5856e-102">Représente le côté producteur d'un <see cref="T:System.Threading.Tasks.Task`1" /> indépendant d'un délégué, en fournissant l'accès au côté consommateur via la propriété <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" />.</span><span class="sxs-lookup"><span data-stu-id="5856e-102">Represents the producer side of a <see cref="T:System.Threading.Tasks.Task`1" /> unbound to a delegate, providing access to the consumer side through the <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> property.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5856e-103">Dans de nombreux scénarios, il est utile activer un <xref:System.Threading.Tasks.Task%601> pour représenter une opération asynchrone externe.</span><span class="sxs-lookup"><span data-stu-id="5856e-103">In many scenarios, it is useful to enable a <xref:System.Threading.Tasks.Task%601> to represent an external asynchronous operation.</span></span> <span data-ttu-id="5856e-104"><xref:System.Threading.Tasks.TaskCompletionSource%601> est fourni à cet effet.</span><span class="sxs-lookup"><span data-stu-id="5856e-104"><xref:System.Threading.Tasks.TaskCompletionSource%601> is provided for this purpose.</span></span> <span data-ttu-id="5856e-105">Il permet la création d’une tâche qui peut être fournie aux consommateurs.</span><span class="sxs-lookup"><span data-stu-id="5856e-105">It enables the creation of a task that can be handed out to consumers.</span></span> <span data-ttu-id="5856e-106">Les consommateurs peuvent utiliser les membres de la tâche de la même façon comme elles le feraient dans tout autre scénario de gestion des variables de membre de tâches.</span><span class="sxs-lookup"><span data-stu-id="5856e-106">The consumers can use the members of the task the same way as they would in any other scenario handling task member variables.</span></span> <span data-ttu-id="5856e-107">Toutefois, contrairement à la plupart des tâches, l’état d’une tâche créée par un TaskCompletionSource est contrôlé explicitement par les méthodes sur TaskCompletionSource.</span><span class="sxs-lookup"><span data-stu-id="5856e-107">However, unlike most tasks, the state of a task created by a TaskCompletionSource is controlled explicitly by the methods on TaskCompletionSource.</span></span> <span data-ttu-id="5856e-108">Cela permet à l’achèvement de l’opération asynchrone externe d’être propagées à la tâche sous-jacente.</span><span class="sxs-lookup"><span data-stu-id="5856e-108">This enables the completion of the external asynchronous operation to be propagated to the underlying Task.</span></span> <span data-ttu-id="5856e-109">La séparation garantit également que les consommateurs ne sont pas en mesure de transition de l’état sans accès à TaskCompletionSource correspondant.</span><span class="sxs-lookup"><span data-stu-id="5856e-109">The separation also ensures that consumers are not able to transition the state without access to the corresponding TaskCompletionSource.</span></span> <span data-ttu-id="5856e-110">Pour plus d’informations, consultez l’entrée [la Nature de TaskCompletionSource\<TResult >](https://blogs.msdn.com/b/pfxteam/archive/2009/06/02/9685804.aspx) dans le blog programmation parallèle avec .NET.</span><span class="sxs-lookup"><span data-stu-id="5856e-110">For more information, see the entry [The Nature of TaskCompletionSource\<TResult>](https://blogs.msdn.com/b/pfxteam/archive/2009/06/02/9685804.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
 <span data-ttu-id="5856e-111">Le [exemples d’Extensions parallèles](https://go.microsoft.com/fwlink/?LinkID=165717) contiennent également des exemples montrant comment utiliser <xref:System.Threading.Tasks.TaskCompletionSource%601>.</span><span class="sxs-lookup"><span data-stu-id="5856e-111">The [Parallel Extensions samples](https://go.microsoft.com/fwlink/?LinkID=165717) also contain examples of how to use <xref:System.Threading.Tasks.TaskCompletionSource%601>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5856e-112">L’exemple suivant montre comment utiliser un <xref:System.Threading.Tasks.TaskCompletionSource%601>:</span><span class="sxs-lookup"><span data-stu-id="5856e-112">The following example shows how to use a <xref:System.Threading.Tasks.TaskCompletionSource%601>:</span></span>  
  
 [!code-csharp[System.Threading.Tasks.TaskCompletionSource#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.taskcompletionsource/cs/taskcompletionsource.cs#01)]
 [!code-vb[System.Threading.Tasks.TaskCompletionSource#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.taskcompletionsource/vb/taskcompletionsource.vb#01)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="5856e-113">Tous les membres de <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /> sont thread-safe et peuvent être utilisés à partir de plusieurs threads simultanément.</span><span class="sxs-lookup"><span data-stu-id="5856e-113">All members of <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /> are thread-safe and may be used from multiple threads concurrently.</span></span></threadsafe>
    <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="5856e-114">Utilisation de la bibliothèque parallèle de tâches (TPL) avec d’autres modèles asynchrones</span><span class="sxs-lookup"><span data-stu-id="5856e-114">Using TPL with Other Asynchronous Patterns</span></span></related>
    <related type="Article" href="~/docs/standard/parallel-programming/how-to-wrap-eap-patterns-in-a-task.md"><span data-ttu-id="5856e-115">Comment : exposer des modèles EAP à l’aide d’une tâche</span><span class="sxs-lookup"><span data-stu-id="5856e-115">How to: Wrap EAP Patterns in a Task</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="5856e-116">Crée un objet <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />.</span><span class="sxs-lookup"><span data-stu-id="5856e-116">Creates a <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TaskCompletionSource ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskCompletionSource`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TaskCompletionSource();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5856e-117">Crée un <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />.</span><span class="sxs-lookup"><span data-stu-id="5856e-117">Creates a <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="5856e-118">Utilisation de la bibliothèque parallèle de tâches (TPL) avec d’autres modèles asynchrones</span><span class="sxs-lookup"><span data-stu-id="5856e-118">Using TPL with Other Asynchronous Patterns</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/how-to-wrap-eap-patterns-in-a-task.md"><span data-ttu-id="5856e-119">Comment : exposer des modèles EAP à l’aide d’une tâche</span><span class="sxs-lookup"><span data-stu-id="5856e-119">How to: Wrap EAP Patterns in a Task</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TaskCompletionSource (object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskCompletionSource`1.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (state As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TaskCompletionSource(System::Object ^ state);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.TaskCompletionSource&lt;'Result&gt; : obj -&gt; System.Threading.Tasks.TaskCompletionSource&lt;'Result&gt;" Usage="new System.Threading.Tasks.TaskCompletionSource&lt;'Result&gt; state" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="state"><span data-ttu-id="5856e-120">État à utiliser comme AsyncState du <see cref="T:System.Threading.Tasks.Task`1" /> sous-jacent.</span><span class="sxs-lookup"><span data-stu-id="5856e-120">The state to use as the underlying <see cref="T:System.Threading.Tasks.Task`1" />'s AsyncState.</span></span></param>
        <summary><span data-ttu-id="5856e-121">Crée un <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /> avec l'état spécifié.</span><span class="sxs-lookup"><span data-stu-id="5856e-121">Creates a <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /> with the specified state.</span></span></summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="5856e-122">Utilisation de la bibliothèque parallèle de tâches (TPL) avec d’autres modèles asynchrones</span><span class="sxs-lookup"><span data-stu-id="5856e-122">Using TPL with Other Asynchronous Patterns</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/how-to-wrap-eap-patterns-in-a-task.md"><span data-ttu-id="5856e-123">Comment : exposer des modèles EAP à l’aide d’une tâche</span><span class="sxs-lookup"><span data-stu-id="5856e-123">How to: Wrap EAP Patterns in a Task</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TaskCompletionSource (System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskCompletionSource`1.#ctor(System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (creationOptions As TaskCreationOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TaskCompletionSource(System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.TaskCompletionSource&lt;'Result&gt; : System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.TaskCompletionSource&lt;'Result&gt;" Usage="new System.Threading.Tasks.TaskCompletionSource&lt;'Result&gt; creationOptions" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <param name="creationOptions"><span data-ttu-id="5856e-124">Options à utiliser lors de la création du <see cref="T:System.Threading.Tasks.Task`1" /> sous-jacent.</span><span class="sxs-lookup"><span data-stu-id="5856e-124">The options to use when creating the underlying <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <summary><span data-ttu-id="5856e-125">Crée un <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /> avec les options spécifiées.</span><span class="sxs-lookup"><span data-stu-id="5856e-125">Creates a <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /> with the specified options.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5856e-126">Le <xref:System.Threading.Tasks.Task%601> créé par cette instance et accessible via son <xref:System.Threading.Tasks.TaskCompletionSource%601.Task%2A> propriété est instanciée à l’aide de la `creationOptions`.</span><span class="sxs-lookup"><span data-stu-id="5856e-126">The <xref:System.Threading.Tasks.Task%601> created by this instance and accessible through its <xref:System.Threading.Tasks.TaskCompletionSource%601.Task%2A> property will be instantiated using the specified `creationOptions`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="5856e-127">Les <paramref name="creationOptions" /> représentent des options non valides pour une utilisation avec un <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />.</span><span class="sxs-lookup"><span data-stu-id="5856e-127">The <paramref name="creationOptions" /> represent options invalid for use with a <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="5856e-128">Utilisation de la bibliothèque parallèle de tâches (TPL) avec d’autres modèles asynchrones</span><span class="sxs-lookup"><span data-stu-id="5856e-128">Using TPL with Other Asynchronous Patterns</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/how-to-wrap-eap-patterns-in-a-task.md"><span data-ttu-id="5856e-129">Comment : exposer des modèles EAP à l’aide d’une tâche</span><span class="sxs-lookup"><span data-stu-id="5856e-129">How to: Wrap EAP Patterns in a Task</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TaskCompletionSource (object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskCompletionSource`1.#ctor(System.Object,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (state As Object, creationOptions As TaskCreationOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TaskCompletionSource(System::Object ^ state, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.TaskCompletionSource&lt;'Result&gt; : obj * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.TaskCompletionSource&lt;'Result&gt;" Usage="new System.Threading.Tasks.TaskCompletionSource&lt;'Result&gt; (state, creationOptions)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <param name="state"><span data-ttu-id="5856e-130">État à utiliser comme AsyncState du <see cref="T:System.Threading.Tasks.Task`1" /> sous-jacent.</span><span class="sxs-lookup"><span data-stu-id="5856e-130">The state to use as the underlying <see cref="T:System.Threading.Tasks.Task`1" />'s AsyncState.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="5856e-131">Options à utiliser lors de la création du <see cref="T:System.Threading.Tasks.Task`1" /> sous-jacent.</span><span class="sxs-lookup"><span data-stu-id="5856e-131">The options to use when creating the underlying <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <summary><span data-ttu-id="5856e-132">Crée un <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /> avec l'état et les options spécifiés.</span><span class="sxs-lookup"><span data-stu-id="5856e-132">Creates a <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /> with the specified state and options.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="5856e-133">Les <paramref name="creationOptions" /> représentent des options non valides pour une utilisation avec un <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />.</span><span class="sxs-lookup"><span data-stu-id="5856e-133">The <paramref name="creationOptions" /> represent options invalid for use with a <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="5856e-134">Utilisation de la bibliothèque parallèle de tâches (TPL) avec d’autres modèles asynchrones</span><span class="sxs-lookup"><span data-stu-id="5856e-134">Using TPL with Other Asynchronous Patterns</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/how-to-wrap-eap-patterns-in-a-task.md"><span data-ttu-id="5856e-135">Comment : exposer des modèles EAP à l’aide d’une tâche</span><span class="sxs-lookup"><span data-stu-id="5856e-135">How to: Wrap EAP Patterns in a Task</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SetCanceled">
      <MemberSignature Language="C#" Value="public void SetCanceled ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCanceled() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskCompletionSource`1.SetCanceled" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetCanceled ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetCanceled();" />
      <MemberSignature Language="F#" Value="member this.SetCanceled : unit -&gt; unit" Usage="taskCompletionSource.SetCanceled " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5856e-136">Fait passer le <see cref="T:System.Threading.Tasks.Task`1" /> sous-jacent à l'état <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />.</span><span class="sxs-lookup"><span data-stu-id="5856e-136">Transitions the underlying <see cref="T:System.Threading.Tasks.Task`1" /> into the <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /> state.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5856e-137">Le <see cref="T:System.Threading.Tasks.Task`1" /> sous-jacent est déjà dans l'un des trois états définitifs : <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />, <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> ou <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />, ou si le <see cref="T:System.Threading.Tasks.Task`1" /> sous-jacent a déjà été supprimé.</span><span class="sxs-lookup"><span data-stu-id="5856e-137">The underlying <see cref="T:System.Threading.Tasks.Task`1" /> is already in one of the three final states: <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />, <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />, or <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />, or if the underlying <see cref="T:System.Threading.Tasks.Task`1" /> has already been disposed.</span></span></exception>
        <altmember cref="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetCanceled" />
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="5856e-138">Utilisation de la bibliothèque parallèle de tâches (TPL) avec d’autres modèles asynchrones</span><span class="sxs-lookup"><span data-stu-id="5856e-138">Using TPL with Other Asynchronous Patterns</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/how-to-wrap-eap-patterns-in-a-task.md"><span data-ttu-id="5856e-139">Comment : exposer des modèles EAP à l’aide d’une tâche</span><span class="sxs-lookup"><span data-stu-id="5856e-139">How to: Wrap EAP Patterns in a Task</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="5856e-140">Annulation de tâches</span><span class="sxs-lookup"><span data-stu-id="5856e-140">Task Cancellation</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetException">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="5856e-141">Fait passer l’objet <see cref="T:System.Threading.Tasks.Task`1" /> sous-jacent à l'état <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />.</span><span class="sxs-lookup"><span data-stu-id="5856e-141">Transitions the underlying <see cref="T:System.Threading.Tasks.Task`1" /> object into the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> state.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetException">
      <MemberSignature Language="C#" Value="public void SetException (System.Collections.Generic.IEnumerable&lt;Exception&gt; exceptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetException(class System.Collections.Generic.IEnumerable`1&lt;class System.Exception&gt; exceptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskCompletionSource`1.SetException(System.Collections.Generic.IEnumerable{System.Exception})" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetException (exceptions As IEnumerable(Of Exception))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetException(System::Collections::Generic::IEnumerable&lt;Exception ^&gt; ^ exceptions);" />
      <MemberSignature Language="F#" Value="member this.SetException : seq&lt;Exception&gt; -&gt; unit" Usage="taskCompletionSource.SetException exceptions" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exceptions" Type="System.Collections.Generic.IEnumerable&lt;System.Exception&gt;" />
      </Parameters>
      <Docs>
        <param name="exceptions"><span data-ttu-id="5856e-142">Collection d'exceptions à lier à ce <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="5856e-142">The collection of exceptions to bind to this <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <summary><span data-ttu-id="5856e-143">Transfère le <see cref="T:System.Threading.Tasks.Task`1" /> sous-jacent en état <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> et lui associe une collection d’objets d’exception.</span><span class="sxs-lookup"><span data-stu-id="5856e-143">Transitions the underlying <see cref="T:System.Threading.Tasks.Task`1" /> into the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> state and binds a collection of exception objects to it.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="5856e-144"><see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> a été supprimé.</span><span class="sxs-lookup"><span data-stu-id="5856e-144">The <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> was disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5856e-145">L’argument <paramref name="exceptions" /> a la valeur null.</span><span class="sxs-lookup"><span data-stu-id="5856e-145">The <paramref name="exceptions" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5856e-146">Il existe un ou plusieurs éléments null dans <paramref name="exceptions" />.</span><span class="sxs-lookup"><span data-stu-id="5856e-146">There are one or more null elements in <paramref name="exceptions" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5856e-147"><see cref="T:System.Threading.Tasks.Task`1" /> sous-jacent est déjà dans l’un des trois états finaux : <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />, <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> ou <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />.</span><span class="sxs-lookup"><span data-stu-id="5856e-147">The underlying <see cref="T:System.Threading.Tasks.Task`1" /> is already in one of the three final states: <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />, <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />, or <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="5856e-148">Utilisation de la bibliothèque parallèle de tâches (TPL) avec d’autres modèles asynchrones</span><span class="sxs-lookup"><span data-stu-id="5856e-148">Using TPL with Other Asynchronous Patterns</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/how-to-wrap-eap-patterns-in-a-task.md"><span data-ttu-id="5856e-149">Comment : exposer des modèles EAP à l’aide d’une tâche</span><span class="sxs-lookup"><span data-stu-id="5856e-149">How to: Wrap EAP Patterns in a Task</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SetException">
      <MemberSignature Language="C#" Value="public void SetException (Exception exception);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetException(class System.Exception exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskCompletionSource`1.SetException(System.Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetException(Exception ^ exception);" />
      <MemberSignature Language="F#" Value="member this.SetException : Exception -&gt; unit" Usage="taskCompletionSource.SetException exception" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exception" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="exception"><span data-ttu-id="5856e-150">Exception à lier à ce <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="5856e-150">The exception to bind to this <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <summary><span data-ttu-id="5856e-151">Transfère le <see cref="T:System.Threading.Tasks.Task`1" /> sous-jacent en état <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> et le lie à une exception spécifiée.</span><span class="sxs-lookup"><span data-stu-id="5856e-151">Transitions the underlying <see cref="T:System.Threading.Tasks.Task`1" /> into the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> state and binds it to a specified exception.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="5856e-152"><see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> a été supprimé.</span><span class="sxs-lookup"><span data-stu-id="5856e-152">The <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> was disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5856e-153">L’argument <paramref name="exception" /> a la valeur null.</span><span class="sxs-lookup"><span data-stu-id="5856e-153">The <paramref name="exception" /> argument is null.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5856e-154"><see cref="T:System.Threading.Tasks.Task`1" /> sous-jacent est déjà dans l’un des trois états finaux : <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />, <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> ou <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />.</span><span class="sxs-lookup"><span data-stu-id="5856e-154">The underlying <see cref="T:System.Threading.Tasks.Task`1" /> is already in one of the three final states: <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />, <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />, or <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="5856e-155">Utilisation de la bibliothèque parallèle de tâches (TPL) avec d’autres modèles asynchrones</span><span class="sxs-lookup"><span data-stu-id="5856e-155">Using TPL with Other Asynchronous Patterns</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/how-to-wrap-eap-patterns-in-a-task.md"><span data-ttu-id="5856e-156">Comment : exposer des modèles EAP à l’aide d’une tâche</span><span class="sxs-lookup"><span data-stu-id="5856e-156">How to: Wrap EAP Patterns in a Task</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SetResult">
      <MemberSignature Language="C#" Value="public void SetResult (TResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetResult(!TResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskCompletionSource`1.SetResult(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetResult (result As TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetResult(TResult result);" />
      <MemberSignature Language="F#" Value="member this.SetResult : 'Result -&gt; unit" Usage="taskCompletionSource.SetResult result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="TResult" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="5856e-157">Valeur de résultat à lier à ce <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="5856e-157">The result value to bind to this <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <summary><span data-ttu-id="5856e-158">Fait passer le <see cref="T:System.Threading.Tasks.Task`1" /> sous-jacent à l'état <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />.</span><span class="sxs-lookup"><span data-stu-id="5856e-158">Transitions the underlying <see cref="T:System.Threading.Tasks.Task`1" /> into the <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" /> state.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="5856e-159"><see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> a été supprimé.</span><span class="sxs-lookup"><span data-stu-id="5856e-159">The <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> was disposed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5856e-160"><see cref="T:System.Threading.Tasks.Task`1" /> sous-jacent est déjà dans l’un des trois états finaux : <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />, <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> ou <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />.</span><span class="sxs-lookup"><span data-stu-id="5856e-160">The underlying <see cref="T:System.Threading.Tasks.Task`1" /> is already in one of the three final states: <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />, <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />, or <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="5856e-161">Utilisation de la bibliothèque parallèle de tâches (TPL) avec d’autres modèles asynchrones</span><span class="sxs-lookup"><span data-stu-id="5856e-161">Using TPL with Other Asynchronous Patterns</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/how-to-wrap-eap-patterns-in-a-task.md"><span data-ttu-id="5856e-162">Comment : exposer des modèles EAP à l’aide d’une tâche</span><span class="sxs-lookup"><span data-stu-id="5856e-162">How to: Wrap EAP Patterns in a Task</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Task">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; Task { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; Task" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.TaskCompletionSource`1.Task" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Task As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::Tasks::Task&lt;TResult&gt; ^ Task { System::Threading::Tasks::Task&lt;TResult&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Task : System.Threading.Tasks.Task&lt;'Result&gt;" Usage="System.Threading.Tasks.TaskCompletionSource&lt;'Result&gt;.Task" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5856e-163">Obtient le <see cref="T:System.Threading.Tasks.Task`1" /> créé par ce <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />.</span><span class="sxs-lookup"><span data-stu-id="5856e-163">Gets the <see cref="T:System.Threading.Tasks.Task`1" /> created by this <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />.</span></span></summary>
        <value><span data-ttu-id="5856e-164">Renvoie le <see cref="T:System.Threading.Tasks.Task`1" /> créé par ce <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />.</span><span class="sxs-lookup"><span data-stu-id="5856e-164">Returns the <see cref="T:System.Threading.Tasks.Task`1" /> created by this <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5856e-165">Cette propriété permet à un consommateur pour accéder à la <xref:System.Threading.Tasks.Task%601> qui est contrôlé par cette instance.</span><span class="sxs-lookup"><span data-stu-id="5856e-165">This property enables a consumer to access the <xref:System.Threading.Tasks.Task%601> that is controlled by this instance.</span></span> <span data-ttu-id="5856e-166">Lorsque vous créez un <xref:System.Threading.Tasks.TaskCompletionSource%601> objet, le <xref:System.Threading.Tasks.Task.Status%2A> propriété de ce <xref:System.Threading.Tasks.Task%601> retourne l’objet <xref:System.Threading.Tasks.TaskStatus.WaitingForActivation></span><span class="sxs-lookup"><span data-stu-id="5856e-166">When you create a <xref:System.Threading.Tasks.TaskCompletionSource%601> object, the <xref:System.Threading.Tasks.Task.Status%2A> property of this <xref:System.Threading.Tasks.Task%601> object returns <xref:System.Threading.Tasks.TaskStatus.WaitingForActivation></span></span>  
  
 <span data-ttu-id="5856e-167">Le <xref:System.Threading.Tasks.TaskCompletionSource%601.SetResult%2A>, <xref:System.Threading.Tasks.TaskCompletionSource%601.SetException%2A>, <xref:System.Threading.Tasks.TaskCompletionSource%601.SetException%2A>, et <xref:System.Threading.Tasks.TaskCompletionSource%601.SetCanceled%2A> méthodes (et leurs variantes de « Try ») sur cette instance tous les résultats dans les transitions d’état pertinentes sur cette tâche sous-jacente.</span><span class="sxs-lookup"><span data-stu-id="5856e-167">The <xref:System.Threading.Tasks.TaskCompletionSource%601.SetResult%2A>, <xref:System.Threading.Tasks.TaskCompletionSource%601.SetException%2A>, <xref:System.Threading.Tasks.TaskCompletionSource%601.SetException%2A>, and <xref:System.Threading.Tasks.TaskCompletionSource%601.SetCanceled%2A> methods (and their "Try" variants) on this instance all result in the relevant state transitions on this underlying Task.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="5856e-168">Utilisation de la bibliothèque parallèle de tâches (TPL) avec d’autres modèles asynchrones</span><span class="sxs-lookup"><span data-stu-id="5856e-168">Using TPL with Other Asynchronous Patterns</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/how-to-wrap-eap-patterns-in-a-task.md"><span data-ttu-id="5856e-169">Comment : exposer des modèles EAP à l’aide d’une tâche</span><span class="sxs-lookup"><span data-stu-id="5856e-169">How to: Wrap EAP Patterns in a Task</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-based-asynchronous-programming.md"><span data-ttu-id="5856e-170">Programmation asynchrone basée sur les tâches</span><span class="sxs-lookup"><span data-stu-id="5856e-170">Task-based Asynchronous Programming</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="TrySetCanceled">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="5856e-171">Tente de faire passer le <see cref="T:System.Threading.Tasks.Task`1" /> sous-jacent à l'état <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />.</span><span class="sxs-lookup"><span data-stu-id="5856e-171">Attempts to transition the underlying <see cref="T:System.Threading.Tasks.Task`1" /> into the <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /> state.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TrySetCanceled">
      <MemberSignature Language="C#" Value="public bool TrySetCanceled ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TrySetCanceled() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetCanceled" />
      <MemberSignature Language="VB.NET" Value="Public Function TrySetCanceled () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TrySetCanceled();" />
      <MemberSignature Language="F#" Value="member this.TrySetCanceled : unit -&gt; bool" Usage="taskCompletionSource.TrySetCanceled " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5856e-172">Tente de faire passer le <see cref="T:System.Threading.Tasks.Task`1" /> sous-jacent à l'état <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />.</span><span class="sxs-lookup"><span data-stu-id="5856e-172">Attempts to transition the underlying <see cref="T:System.Threading.Tasks.Task`1" /> into the <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /> state.</span></span></summary>
        <returns><span data-ttu-id="5856e-173">True si l'opération a réussi ; false si l'opération a échoué ou si l'objet a déjà été supprimé.</span><span class="sxs-lookup"><span data-stu-id="5856e-173">True if the operation was successful; false if the operation was unsuccessful or the object has already been disposed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5856e-174">Cette opération renvoie la valeur false si le <xref:System.Threading.Tasks.Task%601> est déjà dans un des trois états définitifs : <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, ou <xref:System.Threading.Tasks.TaskStatus.Canceled>.</span><span class="sxs-lookup"><span data-stu-id="5856e-174">This operation will return false if the <xref:System.Threading.Tasks.Task%601> is already in one of the three final states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled>.</span></span>  
  
 <span data-ttu-id="5856e-175">Cette méthode retourne également false si sous-jacent <xref:System.Threading.Tasks.Task%601> a déjà été supprimé.</span><span class="sxs-lookup"><span data-stu-id="5856e-175">This method also returns false if the underlying <xref:System.Threading.Tasks.Task%601> has already been disposed.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="5856e-176">Utilisation de la bibliothèque parallèle de tâches (TPL) avec d’autres modèles asynchrones</span><span class="sxs-lookup"><span data-stu-id="5856e-176">Using TPL with Other Asynchronous Patterns</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/how-to-wrap-eap-patterns-in-a-task.md"><span data-ttu-id="5856e-177">Comment : exposer des modèles EAP à l’aide d’une tâche</span><span class="sxs-lookup"><span data-stu-id="5856e-177">How to: Wrap EAP Patterns in a Task</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TrySetCanceled">
      <MemberSignature Language="C#" Value="public bool TrySetCanceled (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TrySetCanceled(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetCanceled(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TrySetCanceled(System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.TrySetCanceled : System.Threading.CancellationToken -&gt; bool" Usage="taskCompletionSource.TrySetCanceled cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"><span data-ttu-id="5856e-178">Jeton d'annulation.</span><span class="sxs-lookup"><span data-stu-id="5856e-178">A cancellation token.</span></span></param>
        <summary><span data-ttu-id="5856e-179">Tente de faire passer le <see cref="T:System.Threading.Tasks.Task`1" /> sous-jacent à l’état <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /> et permet le stockage d’un jeton d’annulation dans la tâche annulée.</span><span class="sxs-lookup"><span data-stu-id="5856e-179">Attempts to transition the underlying <see cref="T:System.Threading.Tasks.Task`1" /> into the <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /> state and enables a cancellation token to be stored in the canceled task.</span></span></summary>
        <returns><span data-ttu-id="5856e-180"><see langword="true" /> si l'opération réussit ; sinon <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="5856e-180"><see langword="true" /> if the operation is successful; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5856e-181">La méthode retourne false si sous-jacent <xref:System.Threading.Tasks.Task%601> objet est déjà dans un des trois états définitifs.</span><span class="sxs-lookup"><span data-stu-id="5856e-181">The method returns false if the underlying <xref:System.Threading.Tasks.Task%601> object is already in one of the following three final states.</span></span>  
  
-   <xref:System.Threading.Tasks.TaskStatus.Canceled?displayProperty=nameWithType>  
  
-   <xref:System.Threading.Tasks.TaskStatus.Faulted?displayProperty=nameWithType>  
  
-   <xref:System.Threading.Tasks.TaskStatus.RanToCompletion?displayProperty=nameWithType>  
  
 <span data-ttu-id="5856e-182">Cette méthode retourne également `false` si sous-jacent <xref:System.Threading.Tasks.Task%601> objet a déjà été supprimé.</span><span class="sxs-lookup"><span data-stu-id="5856e-182">This method also returns `false` if the underlying <xref:System.Threading.Tasks.Task%601> object has already been disposed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TrySetException">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="5856e-183">Tente de faire passer l’objet <see cref="T:System.Threading.Tasks.Task`1" /> sous-jacent à l’état <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />.</span><span class="sxs-lookup"><span data-stu-id="5856e-183">Attempts to transition the underlying <see cref="T:System.Threading.Tasks.Task`1" /> object into the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> state.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TrySetException">
      <MemberSignature Language="C#" Value="public bool TrySetException (System.Collections.Generic.IEnumerable&lt;Exception&gt; exceptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TrySetException(class System.Collections.Generic.IEnumerable`1&lt;class System.Exception&gt; exceptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetException(System.Collections.Generic.IEnumerable{System.Exception})" />
      <MemberSignature Language="VB.NET" Value="Public Function TrySetException (exceptions As IEnumerable(Of Exception)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TrySetException(System::Collections::Generic::IEnumerable&lt;Exception ^&gt; ^ exceptions);" />
      <MemberSignature Language="F#" Value="member this.TrySetException : seq&lt;Exception&gt; -&gt; bool" Usage="taskCompletionSource.TrySetException exceptions" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exceptions" Type="System.Collections.Generic.IEnumerable&lt;System.Exception&gt;" />
      </Parameters>
      <Docs>
        <param name="exceptions"><span data-ttu-id="5856e-184">Collection d'exceptions à lier à ce <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="5856e-184">The collection of exceptions to bind to this <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <summary><span data-ttu-id="5856e-185">Tente de faire passer le <see cref="T:System.Threading.Tasks.Task`1" /> sous-jacent en état <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> et lui associe une collection d’objets d’exception.</span><span class="sxs-lookup"><span data-stu-id="5856e-185">Attempts to transition the underlying <see cref="T:System.Threading.Tasks.Task`1" /> into the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> state and binds a collection of exception objects to it.</span></span></summary>
        <returns><span data-ttu-id="5856e-186">True si l'opération a réussi ; sinon, false.</span><span class="sxs-lookup"><span data-stu-id="5856e-186">True if the operation was successful; otherwise, false.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5856e-187">Cette opération renvoie la valeur false si le <xref:System.Threading.Tasks.Task%601> est déjà dans un des trois états définitifs : <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, ou <xref:System.Threading.Tasks.TaskStatus.Canceled>.</span><span class="sxs-lookup"><span data-stu-id="5856e-187">This operation will return false if the <xref:System.Threading.Tasks.Task%601> is already in one of the three final states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="5856e-188"><see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> a été supprimé.</span><span class="sxs-lookup"><span data-stu-id="5856e-188">The <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> was disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5856e-189">L’argument <paramref name="exceptions" /> a la valeur null.</span><span class="sxs-lookup"><span data-stu-id="5856e-189">The <paramref name="exceptions" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5856e-190">Il existe un ou plusieurs éléments null dans <paramref name="exceptions" />.</span><span class="sxs-lookup"><span data-stu-id="5856e-190">There are one or more null elements in <paramref name="exceptions" />.</span></span>  
  
<span data-ttu-id="5856e-191">ou</span><span class="sxs-lookup"><span data-stu-id="5856e-191">-or-</span></span> 
<span data-ttu-id="5856e-192">La collection <paramref name="exceptions" /> est vide.</span><span class="sxs-lookup"><span data-stu-id="5856e-192">The <paramref name="exceptions" /> collection is empty.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="5856e-193">Utilisation de la bibliothèque parallèle de tâches (TPL) avec d’autres modèles asynchrones</span><span class="sxs-lookup"><span data-stu-id="5856e-193">Using TPL with Other Asynchronous Patterns</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/how-to-wrap-eap-patterns-in-a-task.md"><span data-ttu-id="5856e-194">Comment : exposer des modèles EAP à l’aide d’une tâche</span><span class="sxs-lookup"><span data-stu-id="5856e-194">How to: Wrap EAP Patterns in a Task</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TrySetException">
      <MemberSignature Language="C#" Value="public bool TrySetException (Exception exception);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TrySetException(class System.Exception exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetException(System.Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TrySetException(Exception ^ exception);" />
      <MemberSignature Language="F#" Value="member this.TrySetException : Exception -&gt; bool" Usage="taskCompletionSource.TrySetException exception" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exception" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="exception"><span data-ttu-id="5856e-195">Exception à lier à ce <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="5856e-195">The exception to bind to this <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <summary><span data-ttu-id="5856e-196">Tente de faire passer le <see cref="T:System.Threading.Tasks.Task`1" /> sous-jacent en état <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> et le lie à une exception spécifiée.</span><span class="sxs-lookup"><span data-stu-id="5856e-196">Attempts to transition the underlying <see cref="T:System.Threading.Tasks.Task`1" /> into the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> state and binds it to a specified exception.</span></span></summary>
        <returns><span data-ttu-id="5856e-197">True si l'opération a réussi ; sinon, false.</span><span class="sxs-lookup"><span data-stu-id="5856e-197">True if the operation was successful; otherwise, false.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5856e-198">Cette opération renvoie la valeur false si le <xref:System.Threading.Tasks.Task%601> est déjà dans un des trois états définitifs : <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, ou <xref:System.Threading.Tasks.TaskStatus.Canceled>.</span><span class="sxs-lookup"><span data-stu-id="5856e-198">This operation will return false if the <xref:System.Threading.Tasks.Task%601> is already in one of the three final states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="5856e-199"><see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> a été supprimé.</span><span class="sxs-lookup"><span data-stu-id="5856e-199">The <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> was disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5856e-200">L’argument <paramref name="exception" /> a la valeur null.</span><span class="sxs-lookup"><span data-stu-id="5856e-200">The <paramref name="exception" /> argument is null.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="5856e-201">Utilisation de la bibliothèque parallèle de tâches (TPL) avec d’autres modèles asynchrones</span><span class="sxs-lookup"><span data-stu-id="5856e-201">Using TPL with Other Asynchronous Patterns</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/how-to-wrap-eap-patterns-in-a-task.md"><span data-ttu-id="5856e-202">Comment : exposer des modèles EAP à l’aide d’une tâche</span><span class="sxs-lookup"><span data-stu-id="5856e-202">How to: Wrap EAP Patterns in a Task</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TrySetResult">
      <MemberSignature Language="C#" Value="public bool TrySetResult (TResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TrySetResult(!TResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetResult(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function TrySetResult (result As TResult) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TrySetResult(TResult result);" />
      <MemberSignature Language="F#" Value="member this.TrySetResult : 'Result -&gt; bool" Usage="taskCompletionSource.TrySetResult result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="TResult" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="5856e-203">Valeur de résultat à lier à ce <see cref="T:System.Threading.Tasks.Task`1" />.</span><span class="sxs-lookup"><span data-stu-id="5856e-203">The result value to bind to this <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></param>
        <summary><span data-ttu-id="5856e-204">Tente de faire passer le <see cref="T:System.Threading.Tasks.Task`1" /> sous-jacent à l'état <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />.</span><span class="sxs-lookup"><span data-stu-id="5856e-204">Attempts to transition the underlying <see cref="T:System.Threading.Tasks.Task`1" /> into the <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" /> state.</span></span></summary>
        <returns><span data-ttu-id="5856e-205">True si l'opération a réussi ; sinon, false.</span><span class="sxs-lookup"><span data-stu-id="5856e-205">True if the operation was successful; otherwise, false.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5856e-206">Cette opération renvoie la valeur false si le <xref:System.Threading.Tasks.Task%601> est déjà dans un des trois états définitifs : <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, ou <xref:System.Threading.Tasks.TaskStatus.Canceled>.</span><span class="sxs-lookup"><span data-stu-id="5856e-206">This operation will return false if the <xref:System.Threading.Tasks.Task%601> is already in one of the three final states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled>.</span></span>  
  
 <span data-ttu-id="5856e-207">Cette méthode retourne également false si sous-jacent <xref:System.Threading.Tasks.Task%601> a déjà été supprimé.</span><span class="sxs-lookup"><span data-stu-id="5856e-207">This method also returns false if the underlying <xref:System.Threading.Tasks.Task%601> has already been disposed.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md"><span data-ttu-id="5856e-208">Utilisation de la bibliothèque parallèle de tâches (TPL) avec d’autres modèles asynchrones</span><span class="sxs-lookup"><span data-stu-id="5856e-208">Using TPL with Other Asynchronous Patterns</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/how-to-wrap-eap-patterns-in-a-task.md"><span data-ttu-id="5856e-209">Comment : exposer des modèles EAP à l’aide d’une tâche</span><span class="sxs-lookup"><span data-stu-id="5856e-209">How to: Wrap EAP Patterns in a Task</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
