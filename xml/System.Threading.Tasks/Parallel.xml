<Type Name="Parallel" FullName="System.Threading.Tasks.Parallel">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0ccd8e8796d91623d453ef299472d90582525e77" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36407709" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class Parallel" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Parallel extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.Parallel" />
  <TypeSignature Language="VB.NET" Value="Public Class Parallel" />
  <TypeSignature Language="C++ CLI" Value="public ref class Parallel abstract sealed" />
  <TypeSignature Language="F#" Value="type Parallel = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="61b7b-101">Prend en charge les boucles et les régions parallèles.</span>
      <span class="sxs-lookup">
        <span data-stu-id="61b7b-101">Provides support for parallel loops and regions.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61b7b-102">La <xref:System.Threading.Tasks.Parallel> classe fournit des remplacements parallèles de données basées sur la bibliothèque pour les opérations courantes telles que les boucles, pour chaque boucle et l’exécution d’un ensemble d’instructions.</span><span class="sxs-lookup"><span data-stu-id="61b7b-102">The <xref:System.Threading.Tasks.Parallel> class provides library-based data parallel replacements for common operations such as for loops, for each loops, and execution of a set of statements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61b7b-103">Cet exemple illustre plusieurs approches pour implémenter une boucle parallèle à l’aide de plusieurs constructions de langage.</span><span class="sxs-lookup"><span data-stu-id="61b7b-103">This example demonstrates several approaches to implementing a parallel loop using multiple language constructs.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel#07](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/parallelintro.cs#07)]
 [!code-vb[System.Threading.Tasks.Parallel#07](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/parallelintro.vb#07)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="61b7b-104">Tous les membres publics et protégés de <see cref="T:System.Threading.Tasks.Parallel" /> sont thread-safe et peuvent être utilisés simultanément à partir de plusieurs threads.</span>
      <span class="sxs-lookup">
        <span data-stu-id="61b7b-104">All public and protected members of <see cref="T:System.Threading.Tasks.Parallel" /> are thread-safe and may be used concurrently from multiple threads.</span>
      </span>
    </threadsafe>
  </Docs>
  <Members>
    <MemberGroup MemberName="For">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="61b7b-105">Exécute une boucle <see langword="for" /> (<see langword="For" /> en Visual Basic) dans laquelle des itérations peuvent s'exécuter en parallèle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-105">Executes a <see langword="for" /> (<see langword="For" /> in Visual Basic) loop in which iterations may run in parallel.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (int fromInclusive, int toExclusive, Action&lt;int,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int32 fromInclusive, int32 toExclusive, class System.Action`2&lt;int32, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function For (fromInclusive As Integer, toExclusive As Integer, body As Action(Of Integer, ParallelLoopState)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(int fromInclusive, int toExclusive, Action&lt;int, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int * int * Action&lt;int, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int32" />
        <Parameter Name="toExclusive" Type="System.Int32" />
        <Parameter Name="body" Type="System.Action&lt;System.Int32,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive">
          <span data-ttu-id="61b7b-106">Index de début, inclus.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-106">The start index, inclusive.</span>
          </span>
        </param>
        <param name="toExclusive">
          <span data-ttu-id="61b7b-107">Index de fin, exclusif.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-107">The end index, exclusive.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="61b7b-108">Délégué appelé une fois par itération.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-108">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61b7b-109">Exécute une boucle <see langword="for" /> (<see langword="For" /> en Visual Basic) dans laquelle les itérations peuvent s'exécuter en parallèle et l'état de la boucle peut être surveillé et manipulé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-109">Executes a <see langword="for" /> (<see langword="For" /> in Visual Basic) loop in which iterations may run in parallel and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61b7b-110">Structure qui contient des informations sur la partie de la boucle terminée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-110">A  structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61b7b-111">Le `body` délégué est appelé une fois pour chaque valeur dans la plage d’itérations (`fromInclusive`, `toExclusive`).</span><span class="sxs-lookup"><span data-stu-id="61b7b-111">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="61b7b-112">Il est fourni avec deux arguments :</span><span class="sxs-lookup"><span data-stu-id="61b7b-112">It is provided with two arguments:</span></span>  
  
-   <span data-ttu-id="61b7b-113">Un <xref:System.Int32> valeur qui représente le nombre d’itérations.</span><span class="sxs-lookup"><span data-stu-id="61b7b-113">An <xref:System.Int32> value that represents the iteration count.</span></span>  
  
-   <span data-ttu-id="61b7b-114">A <xref:System.Threading.Tasks.ParallelLoopState> instance qui peut être utilisé pour quitter la boucle prématurément.</span><span class="sxs-lookup"><span data-stu-id="61b7b-114">A <xref:System.Threading.Tasks.ParallelLoopState> instance that can be used to break out of the loop prematurely.</span></span> <span data-ttu-id="61b7b-115">Le <xref:System.Threading.Tasks.ParallelLoopState> objet est créé par le compilateur ; il ne peut pas être instancié dans le code utilisateur.</span><span class="sxs-lookup"><span data-stu-id="61b7b-115">The <xref:System.Threading.Tasks.ParallelLoopState> object is created by the compiler; it cannot be instantiated in user code.</span></span>  
  
 <span data-ttu-id="61b7b-116">Appel de la <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> méthode informe le `for` opération qui n’ont pas itérations après l’objet actuel à exécuter.</span><span class="sxs-lookup"><span data-stu-id="61b7b-116">Calling the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method informs the `for` operation that iterations after the current one don't have to execute.</span></span> <span data-ttu-id="61b7b-117">Toutefois, toutes les itérations avant actuel une sera toujours doivent être exécutées si elles n’ont pas déjà.</span><span class="sxs-lookup"><span data-stu-id="61b7b-117">However, all iterations before the current one will still have to be executed if they haven't already.</span></span>  
  
 <span data-ttu-id="61b7b-118">Par conséquent, l’appel <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> est similaire à celle d’une opération d’arrêt au sein d’une manière conventionnelle `for` boucle dans un langage comme c#, mais il n’est pas un substitut parfait : par exemple, il n’existe aucune garantie que les itérations après l’objet actuel ne seront absolument pas Exécutez.</span><span class="sxs-lookup"><span data-stu-id="61b7b-118">Therefore, calling <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> is similar to using a break operation within a conventional `for` loop in a language like C#, but it is not a perfect substitute: For example, there is no guarantee that iterations after the current one will definitely not execute.</span></span>  
  
 <span data-ttu-id="61b7b-119">Si l’exécution de toutes les itérations avant que l’objet actuel n’est pas nécessaire, utilisez le <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> méthode au lieu d’utiliser <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>.</span><span class="sxs-lookup"><span data-stu-id="61b7b-119">If executing all iterations before the current one is not necessary, use the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method instead of using <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>.</span></span> <span data-ttu-id="61b7b-120">Appel de <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> informe le `for` boucle qu’elle peut abandonner toutes les autres itérations, qu’ils soient avant ou après l’itération actuelle, car tous les requis de travail sera ont déjà été effectué.</span><span class="sxs-lookup"><span data-stu-id="61b7b-120">Calling <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> informs the `for` loop that it may abandon all remaining iterations, regardless of whether they're before or after the current iteration, because all required work will have already been completed.</span></span> <span data-ttu-id="61b7b-121">Toutefois, comme avec <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, il n’existe aucune garantie sur les autres itérations n’exécutera pas.</span><span class="sxs-lookup"><span data-stu-id="61b7b-121">However, as with <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, there are no guarantees regarding which other iterations will not execute.</span></span>  
  
 <span data-ttu-id="61b7b-122">Si une boucle se termine prématurément, le <xref:System.Threading.Tasks.ParallelLoopResult> structure retournée contient les informations pertinentes sur l’achèvement de la boucle.</span><span class="sxs-lookup"><span data-stu-id="61b7b-122">If a loop is ended prematurely, the <xref:System.Threading.Tasks.ParallelLoopResult> structure that is returned will contain relevant information about the loop's completion.</span></span>  
  
 <span data-ttu-id="61b7b-123">Si `fromInclusive` est supérieur ou égal à `toExclusive`, la méthode est retournée immédiatement sans exécuter d’itérations.</span><span class="sxs-lookup"><span data-stu-id="61b7b-123">If `fromInclusive` is greater than or equal to `toExclusive`, the method returns immediately without performing any iterations.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61b7b-124">L’exemple suivant exécute jusqu'à 100 itérations d’une boucle en parallèle.</span><span class="sxs-lookup"><span data-stu-id="61b7b-124">The following example executes up to 100 iterations of a loop in parallel.</span></span> <span data-ttu-id="61b7b-125">Chaque itération s’arrête pour un intervalle aléatoire compris entre 1 et 1 000 millisecondes.</span><span class="sxs-lookup"><span data-stu-id="61b7b-125">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="61b7b-126">Une valeur générée de manière aléatoire détermine sur quelle itération de la boucle la <xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=nameWithType> méthode est appelée.</span><span class="sxs-lookup"><span data-stu-id="61b7b-126">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=nameWithType> method is called.</span></span> <span data-ttu-id="61b7b-127">Comme la sortie de l’exemple, aucune itération dont l’index est supérieur à la <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A?displayProperty=nameWithType> début de valeur de propriété après l’appel à la <xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="61b7b-127">As the output from the example shows, no iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A?displayProperty=nameWithType> property value start after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 <span data-ttu-id="61b7b-128">Étant donné que les itérations de la boucle sont encore susceptibles de s’exécuter lorsque le <xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=nameWithType> méthode est appelée, les appels de chaque itération le <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A?displayProperty=nameWithType> propriété pour vérifier si une autre itération a appelé le <xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="61b7b-128">Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=nameWithType> method is called, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A?displayProperty=nameWithType> property to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="61b7b-129">Si la valeur de propriété est `true`, l’itération vérifie la valeur de la <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A?displayProperty=nameWithType> propriété et, si elle est supérieure à la valeur d’index de l’itération actuelle, retourne immédiatement.</span><span class="sxs-lookup"><span data-stu-id="61b7b-129">If  the property value is `true`, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A?displayProperty=nameWithType> property and, if it is greater than the current iteration's index value, returns immediately.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="61b7b-130">L'argument <paramref name="body" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-130">The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="61b7b-131">Exception qui contient toutes les exceptions individuelles levées sur tous les threads.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-131">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Tasks.ParallelLoopState" />
      </Docs>
    </Member>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (int fromInclusive, int toExclusive, Action&lt;int&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int32 fromInclusive, int32 toExclusive, class System.Action`1&lt;int32&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function For (fromInclusive As Integer, toExclusive As Integer, body As Action(Of Integer)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(int fromInclusive, int toExclusive, Action&lt;int&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int * int * Action&lt;int&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int32" />
        <Parameter Name="toExclusive" Type="System.Int32" />
        <Parameter Name="body" Type="System.Action&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive">
          <span data-ttu-id="61b7b-132">Index de début, inclus.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-132">The start index, inclusive.</span>
          </span>
        </param>
        <param name="toExclusive">
          <span data-ttu-id="61b7b-133">Index de fin, exclusif.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-133">The end index, exclusive.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="61b7b-134">Délégué appelé une fois par itération.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-134">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61b7b-135">Exécute une boucle <see langword="for" /> (<see langword="For" /> en Visual Basic) dans laquelle des itérations peuvent s'exécuter en parallèle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-135">Executes a <see langword="for" /> (<see langword="For" /> in Visual Basic) loop in which iterations may run in parallel.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61b7b-136">Structure qui contient des informations sur la partie de la boucle terminée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-136">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61b7b-137">Le `body` délégué est appelé une fois pour chaque valeur dans la plage d’itérations (`fromInclusive`, `toExclusive`).</span><span class="sxs-lookup"><span data-stu-id="61b7b-137">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="61b7b-138">Il est fourni avec le nombre d’itérations (<xref:System.Int32>) en tant que paramètre.</span><span class="sxs-lookup"><span data-stu-id="61b7b-138">It is provided with the iteration count (<xref:System.Int32>) as a parameter.</span></span>  
  
 <span data-ttu-id="61b7b-139">Si `fromInclusive` est supérieur ou égal à `toExclusive`, la méthode est retournée immédiatement sans exécuter d’itérations.</span><span class="sxs-lookup"><span data-stu-id="61b7b-139">If `fromInclusive` is greater than or equal to `toExclusive`, the method returns immediately without performing any iterations.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61b7b-140">L’exemple suivant utilise la <xref:System.Threading.Tasks.Parallel.For%2A> méthode pour les appels d’un délégué qui génère les octets aléatoires de 100 valeurs et calcule leur somme.</span><span class="sxs-lookup"><span data-stu-id="61b7b-140">The following example uses the <xref:System.Threading.Tasks.Parallel.For%2A> method for 100 invocations of a delegate that generates random byte values and computes their sum.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel.For#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel.for/cs/for1.cs#1)]
 [!code-vb[System.Threading.Tasks.Parallel.For#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel.for/vb/for1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="61b7b-141">L'argument <paramref name="body" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-141">The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="61b7b-142">Exception qui contient toutes les exceptions individuelles levées sur tous les threads.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-142">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (long fromInclusive, long toExclusive, Action&lt;long,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int64 fromInclusive, int64 toExclusive, class System.Action`2&lt;int64, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function For (fromInclusive As Long, toExclusive As Long, body As Action(Of Long, ParallelLoopState)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(long fromInclusive, long toExclusive, Action&lt;long, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int64 * int64 * Action&lt;int64, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int64" />
        <Parameter Name="toExclusive" Type="System.Int64" />
        <Parameter Name="body" Type="System.Action&lt;System.Int64,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive">
          <span data-ttu-id="61b7b-143">Index de début, inclus.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-143">The start index, inclusive.</span>
          </span>
        </param>
        <param name="toExclusive">
          <span data-ttu-id="61b7b-144">Index de fin, exclusif.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-144">The end index, exclusive.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="61b7b-145">Délégué appelé une fois par itération.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-145">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61b7b-146">Exécute une boucle <see langword="for" /> (<see langword="For" /> en Visual Basic) avec des index 64 bits dans laquelle les itérations peuvent s'exécuter en parallèle et l'état de la boucle peut être surveillé et manipulé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-146">Executes a <see langword="for" /> (<see langword="For" /> in Visual Basic) loop with 64-bit indexes in which iterations may run in parallel and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61b7b-147">Structure <see cref="T:System.Threading.Tasks.ParallelLoopResult" /> qui contient des informations indiquant quelle partie de la boucle est terminée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-147">A <see cref="T:System.Threading.Tasks.ParallelLoopResult" /> structure that contains information on what portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61b7b-148">Le `body` délégué est appelé une fois pour chaque valeur dans la plage d’itérations (`fromInclusive`, `toExclusive`).</span><span class="sxs-lookup"><span data-stu-id="61b7b-148">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="61b7b-149">Il est fourni avec les paramètres suivants : le nombre d’itérations (<xref:System.Int64>) et un <xref:System.Threading.Tasks.ParallelLoopState> instance qui peut être utilisé pour quitter la boucle prématurément.</span><span class="sxs-lookup"><span data-stu-id="61b7b-149">It is provided with the following parameters: the iteration count (<xref:System.Int64>), and a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely.</span></span>  
  
 <span data-ttu-id="61b7b-150">Appel de la <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> méthode informe le `for` opération itérations après celui en cours ne doivent être exécutées, mais toutes les itérations avant de l’objet actuel.</span><span class="sxs-lookup"><span data-stu-id="61b7b-150">Calling the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method informs the `for` operation that iterations after the current one don’t have to be executed, but all iterations before the current one do.</span></span>  
  
 <span data-ttu-id="61b7b-151">Par conséquent, l’appel de Break est semblable à l’utilisation d’une opération d’arrêt au sein d’une manière conventionnelle `for` boucle dans un langage comme c#, mais il n’est pas un substitut parfait : par exemple, il n’est aucune garantie que les itérations après celui en cours ne s’exécuteront pas.</span><span class="sxs-lookup"><span data-stu-id="61b7b-151">Therefore, calling Break is similar to using a break operation within a conventional `for` loop in a language like C#, but it is not a perfect substitute: For example, there is no guarantee that iterations after the current one will definitely not execute.</span></span>  
  
 <span data-ttu-id="61b7b-152">Si l’exécution de toutes les itérations avant que l’objet actuel n’est pas nécessaire, utilisez le <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> méthode au lieu d’utiliser <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>.</span><span class="sxs-lookup"><span data-stu-id="61b7b-152">If executing all iterations before the current one is not necessary, use the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method instead of using <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>.</span></span> <span data-ttu-id="61b7b-153">Appel de <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> informe le `for` boucle qu’elle peut abandonner toutes les autres itérations, qu’ils soient avant ou après l’itération actuelle, car tous les requis de travail sera ont déjà été effectué.</span><span class="sxs-lookup"><span data-stu-id="61b7b-153">Calling <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> informs the `for` loop that it may abandon all remaining iterations, regardless of whether they're before or after the current iteration, because all required work will have already been completed.</span></span> <span data-ttu-id="61b7b-154">Toutefois, comme avec <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, il n’existe aucune garantie sur les autres itérations n’exécutera pas.</span><span class="sxs-lookup"><span data-stu-id="61b7b-154">However, as with <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, there are no guarantees regarding which other iterations will not execute.</span></span>  
  
 <span data-ttu-id="61b7b-155">Si une boucle se termine prématurément, le <xref:System.Threading.Tasks.ParallelLoopResult> structure retournée contient les informations pertinentes sur l’achèvement de la boucle.</span><span class="sxs-lookup"><span data-stu-id="61b7b-155">If a loop is ended prematurely, the <xref:System.Threading.Tasks.ParallelLoopResult> structure that is returned will contain relevant information about the loop's completion.</span></span>  
  
 <span data-ttu-id="61b7b-156">Si `fromInclusive` est supérieur ou égal à `toExclusive`, la méthode retourne immédiatement sans exécuter d’itérations.</span><span class="sxs-lookup"><span data-stu-id="61b7b-156">If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="61b7b-157">L'argument <paramref name="body" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-157">The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="61b7b-158">Exception qui contient toutes les exceptions individuelles levées sur tous les threads.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-158">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (long fromInclusive, long toExclusive, Action&lt;long&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int64 fromInclusive, int64 toExclusive, class System.Action`1&lt;int64&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function For (fromInclusive As Long, toExclusive As Long, body As Action(Of Long)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(long fromInclusive, long toExclusive, Action&lt;long&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int64 * int64 * Action&lt;int64&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int64" />
        <Parameter Name="toExclusive" Type="System.Int64" />
        <Parameter Name="body" Type="System.Action&lt;System.Int64&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive">
          <span data-ttu-id="61b7b-159">Index de début, inclus.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-159">The start index, inclusive.</span>
          </span>
        </param>
        <param name="toExclusive">
          <span data-ttu-id="61b7b-160">Index de fin, exclusif.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-160">The end index, exclusive.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="61b7b-161">Délégué appelé une fois par itération.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-161">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61b7b-162">Exécute une boucle <see langword="for" /> (<see langword="For" /> en Visual Basic) avec des index 64 bits dans laquelle les itérations peuvent s'exécuter en parallèle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-162">Executes a <see langword="for" /> (<see langword="For" /> in Visual Basic) loop with 64-bit indexes in which iterations may run in parallel.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61b7b-163">Structure qui contient des informations sur la partie de la boucle terminée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-163">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61b7b-164">Le `body` délégué est appelé une fois pour chaque valeur dans la plage d’itérations (`fromInclusive`, `toExclusive`).</span><span class="sxs-lookup"><span data-stu-id="61b7b-164">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="61b7b-165">Il est fourni avec le nombre d’itérations (<xref:System.Int64>) en tant que paramètre.</span><span class="sxs-lookup"><span data-stu-id="61b7b-165">It is provided with the iteration count (<xref:System.Int64>) as a parameter.</span></span>  
  
 <span data-ttu-id="61b7b-166">Si `fromInclusive` est supérieur ou égal à `toExclusive`, la méthode est retournée immédiatement sans exécuter d’itérations.</span><span class="sxs-lookup"><span data-stu-id="61b7b-166">If `fromInclusive` is greater than or equal to `toExclusive`, the method returns immediately without performing any iterations.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="61b7b-167">L'argument <paramref name="body" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-167">The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="61b7b-168">Exception qui contient toutes les exceptions individuelles levées sur tous les threads.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-168">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (int fromInclusive, int toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;int,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int32 fromInclusive, int32 toExclusive, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`2&lt;int32, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(int fromInclusive, int toExclusive, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;int, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int * int * System.Threading.Tasks.ParallelOptions * Action&lt;int, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int32" />
        <Parameter Name="toExclusive" Type="System.Int32" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;System.Int32,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive">
          <span data-ttu-id="61b7b-169">Index de début, inclus.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-169">The start index, inclusive.</span>
          </span>
        </param>
        <param name="toExclusive">
          <span data-ttu-id="61b7b-170">Index de fin, exclusif.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-170">The end index, exclusive.</span>
          </span>
        </param>
        <param name="parallelOptions">
          <span data-ttu-id="61b7b-171">Objet qui configure le comportement de cette opération.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-171">An object that configures the behavior of this operation.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="61b7b-172">Délégué appelé une fois par itération.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-172">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61b7b-173">Exécute une boucle <see langword="for" /> (<see langword="For" /> en Visual Basic) dans laquelle les itérations peuvent s'exécuter en parallèle, les options de la boucle peuvent être configurées et l'état de la boucle peut être surveillé et manipulé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-173">Executes a <see langword="for" /> (<see langword="For" /> in Visual Basic) loop in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61b7b-174">Structure qui contient des informations sur la partie de la boucle terminée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-174">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61b7b-175">Le `body` délégué est appelé une fois pour chaque valeur dans la plage d’itérations (`fromInclusive`, `toExclusive`).</span><span class="sxs-lookup"><span data-stu-id="61b7b-175">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="61b7b-176">Il est fourni avec les paramètres suivants : le nombre d’itérations (<xref:System.Int32>) et un <xref:System.Threading.Tasks.ParallelLoopState> instance qui peut être utilisé pour quitter la boucle prématurément.</span><span class="sxs-lookup"><span data-stu-id="61b7b-176">It is provided with the following parameters: the iteration count (<xref:System.Int32>), and a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely.</span></span>  
  
 <span data-ttu-id="61b7b-177">Si `fromInclusive` est supérieur ou égal à `toExclusive`, la méthode est retournée immédiatement sans exécuter d’itérations.</span><span class="sxs-lookup"><span data-stu-id="61b7b-177">If `fromInclusive` is greater than or equal to `toExclusive`, the method returns immediately without performing any iterations.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="61b7b-178">
            <see cref="T:System.Threading.CancellationToken" /> dans l'argument <paramref name="parallelOptions" /> est annulé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-178">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="61b7b-179">L'argument <paramref name="body" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-179">The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="61b7b-180">- ou - L’argument <paramref name="parallelOptions" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-180">-or-  The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="61b7b-181">Exception qui contient toutes les exceptions individuelles levées sur tous les threads.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-181">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="61b7b-182">Objet <see cref="T:System.Threading.CancellationTokenSource" /> associé à <see cref="T:System.Threading.CancellationToken" /> dans l'objet <paramref name="parallelOptions" /> a été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-182">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (int fromInclusive, int toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;int&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int32 fromInclusive, int32 toExclusive, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`1&lt;int32&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(int fromInclusive, int toExclusive, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;int&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int * int * System.Threading.Tasks.ParallelOptions * Action&lt;int&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int32" />
        <Parameter Name="toExclusive" Type="System.Int32" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive">
          <span data-ttu-id="61b7b-183">Index de début, inclus.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-183">The start index, inclusive.</span>
          </span>
        </param>
        <param name="toExclusive">
          <span data-ttu-id="61b7b-184">Index de fin, exclusif.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-184">The end index, exclusive.</span>
          </span>
        </param>
        <param name="parallelOptions">
          <span data-ttu-id="61b7b-185">Objet qui configure le comportement de cette opération.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-185">An object that configures the behavior of this operation.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="61b7b-186">Délégué appelé une fois par itération.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-186">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61b7b-187">Exécute une boucle <see langword="for" /> (<see langword="For" /> en Visual Basic) dans laquelle les itérations peuvent s'exécuter en parallèle et les options de la boucle peuvent être configurées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-187">Executes a <see langword="for" /> (<see langword="For" /> in Visual Basic) loop in which iterations may run in parallel and loop options can be configured.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61b7b-188">Structure qui contient des informations sur la partie de la boucle terminée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-188">A  structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61b7b-189">Le `body` délégué est appelé une fois pour chaque valeur dans la plage d’itérations (`fromInclusive`, `toExclusive`).</span><span class="sxs-lookup"><span data-stu-id="61b7b-189">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="61b7b-190">Il est fourni avec le nombre d’itérations (<xref:System.Int32>) en tant que paramètre.</span><span class="sxs-lookup"><span data-stu-id="61b7b-190">It is provided with the iteration count (<xref:System.Int32>) as a parameter.</span></span>  
  
 <span data-ttu-id="61b7b-191">Si `fromInclusive` est supérieur ou égal à `toExclusive`, la méthode retourne immédiatement sans exécuter d’itérations.</span><span class="sxs-lookup"><span data-stu-id="61b7b-191">If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61b7b-192">L’exemple suivant montre comment annuler une boucle parallèle :</span><span class="sxs-lookup"><span data-stu-id="61b7b-192">The following example shows how to cancel a parallel loop:</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel#05](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/parallelforcancel.cs#05)]
 [!code-vb[System.Threading.Tasks.Parallel#05](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/parallelforcancel.vb#05)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="61b7b-193">
            <see cref="T:System.Threading.CancellationToken" /> dans l'argument <paramref name="parallelOptions" /> est annulé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-193">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="61b7b-194">L'argument <paramref name="body" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-194">The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="61b7b-195">- ou - L’argument <paramref name="parallelOptions" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-195">-or-  The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="61b7b-196">Exception qui contient toutes les exceptions individuelles levées sur tous les threads.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-196">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="61b7b-197">Objet <see cref="T:System.Threading.CancellationTokenSource" /> associé à <see cref="T:System.Threading.CancellationToken" /> dans l'objet <paramref name="parallelOptions" /> a été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-197">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (long fromInclusive, long toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;long,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int64 fromInclusive, int64 toExclusive, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`2&lt;int64, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(long fromInclusive, long toExclusive, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;long, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int64 * int64 * System.Threading.Tasks.ParallelOptions * Action&lt;int64, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int64" />
        <Parameter Name="toExclusive" Type="System.Int64" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;System.Int64,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive">
          <span data-ttu-id="61b7b-198">Index de début, inclus.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-198">The start index, inclusive.</span>
          </span>
        </param>
        <param name="toExclusive">
          <span data-ttu-id="61b7b-199">Index de fin, exclusif.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-199">The end index, exclusive.</span>
          </span>
        </param>
        <param name="parallelOptions">
          <span data-ttu-id="61b7b-200">Objet qui configure le comportement de cette opération.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-200">An object that configures the behavior of this operation.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="61b7b-201">Délégué appelé une fois par itération.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-201">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61b7b-202">Exécute une boucle <see langword="for" /> (<see langword="For" /> en Visual Basic) avec des index 64 bits dans laquelle les itérations peuvent s'exécuter en parallèle, les options de la boucle peuvent être configurées et l'état de la boucle peut être surveillé et manipulé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-202">Executes a <see langword="for" /> (<see langword="For" /> in Visual Basic)  loop with 64-bit indexes in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61b7b-203">Structure qui contient des informations sur la partie de la boucle terminée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-203">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61b7b-204">Le `body` délégué est appelé une fois pour chaque valeur dans la plage d’itérations (`fromInclusive`, `toExclusive`).</span><span class="sxs-lookup"><span data-stu-id="61b7b-204">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="61b7b-205">Il est fourni avec les paramètres suivants : le nombre d’itérations (<xref:System.Int64>) et un <xref:System.Threading.Tasks.ParallelLoopState> instance qui peut être utilisé pour quitter la boucle prématurément.</span><span class="sxs-lookup"><span data-stu-id="61b7b-205">It is provided with the following parameters: the iteration count (<xref:System.Int64>), and a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely.</span></span>  
  
 <span data-ttu-id="61b7b-206">Si `fromInclusive` est supérieur ou égal à `toExclusive`, la méthode est retournée immédiatement sans exécuter d’itérations.</span><span class="sxs-lookup"><span data-stu-id="61b7b-206">If `fromInclusive` is greater than or equal to `toExclusive`, the method returns immediately without performing any iterations.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61b7b-207">L’exemple suivant montre comment utiliser le <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> méthode avec un <xref:System.Threading.Tasks.ParallelOptions> objet :</span><span class="sxs-lookup"><span data-stu-id="61b7b-207">The following example shows how to use the <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> method with a <xref:System.Threading.Tasks.ParallelOptions> object:</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel#03](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/parallelfor.cs#03)]
 [!code-vb[System.Threading.Tasks.Parallel#03](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/parallelfor.vb#03)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="61b7b-208">
            <see cref="T:System.Threading.CancellationToken" /> dans l'argument <paramref name="parallelOptions" /> est annulé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-208">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="61b7b-209">L'argument <paramref name="body" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-209">The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="61b7b-210">- ou - L’argument <paramref name="parallelOptions" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-210">-or-  The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="61b7b-211">Exception qui contient toutes les exceptions individuelles levées sur tous les threads.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-211">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="61b7b-212">Objet <see cref="T:System.Threading.CancellationTokenSource" /> associé à <see cref="T:System.Threading.CancellationToken" /> dans l'objet <paramref name="parallelOptions" /> a été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-212">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (long fromInclusive, long toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;long&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int64 fromInclusive, int64 toExclusive, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`1&lt;int64&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(long fromInclusive, long toExclusive, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;long&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int64 * int64 * System.Threading.Tasks.ParallelOptions * Action&lt;int64&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int64" />
        <Parameter Name="toExclusive" Type="System.Int64" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;System.Int64&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive">
          <span data-ttu-id="61b7b-213">Index de début, inclus.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-213">The start index, inclusive.</span>
          </span>
        </param>
        <param name="toExclusive">
          <span data-ttu-id="61b7b-214">Index de fin, exclusif.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-214">The end index, exclusive.</span>
          </span>
        </param>
        <param name="parallelOptions">
          <span data-ttu-id="61b7b-215">Objet qui configure le comportement de cette opération.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-215">An object that configures the behavior of this operation.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="61b7b-216">Délégué appelé une fois par itération.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-216">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61b7b-217">Exécute une boucle <see langword="for" /> (<see langword="For" /> en Visual Basic) avec des index 64 bits dans laquelle les itérations peuvent s’exécuter en parallèle et les options de la boucle peuvent être configurées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-217">Executes a <see langword="for" /> (<see langword="For" /> in Visual Basic) loop with 64-bit indexes in which iterations may run in parallel and loop options can be configured.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61b7b-218">Structure qui contient des informations sur la partie de la boucle terminée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-218">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61b7b-219">Prend en charge des index 64 bits.</span><span class="sxs-lookup"><span data-stu-id="61b7b-219">Supports 64-bit indexes.</span></span> <span data-ttu-id="61b7b-220">Le `body` délégué est appelé une fois pour chaque valeur dans la plage d’itérations (`fromInclusive`, `toExclusive`).</span><span class="sxs-lookup"><span data-stu-id="61b7b-220">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="61b7b-221">Il est fourni avec le nombre d’itérations (<xref:System.Int64>) en tant que paramètre.</span><span class="sxs-lookup"><span data-stu-id="61b7b-221">It is provided with the iteration count (<xref:System.Int64>) as a parameter.</span></span>  
  
 <span data-ttu-id="61b7b-222">Si `fromInclusive` est supérieur ou égal à `toExclusive`, la méthode retourne immédiatement sans exécuter d’itérations.</span><span class="sxs-lookup"><span data-stu-id="61b7b-222">If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61b7b-223">L’exemple suivant montre comment utiliser <xref:System.Threading.Tasks.ParallelOptions> pour spécifier un planificateur de tâches personnalisé :</span><span class="sxs-lookup"><span data-stu-id="61b7b-223">The following example shows how to use <xref:System.Threading.Tasks.ParallelOptions> to specify a custom task scheduler:</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel#06](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/parallelforwithscheduler.cs#06)]
 [!code-vb[System.Threading.Tasks.Parallel#06](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/parallelforwithscheduler.vb#06)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="61b7b-224">
            <see cref="T:System.Threading.CancellationToken" /> dans l'argument <paramref name="parallelOptions" /> est annulé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-224">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="61b7b-225">L'argument <paramref name="body" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-225">The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="61b7b-226">- ou - L’argument <paramref name="parallelOptions" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-226">-or-  The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="61b7b-227">Exception qui contient toutes les exceptions individuelles levées sur tous les threads.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-227">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="61b7b-228">Objet <see cref="T:System.Threading.CancellationTokenSource" /> associé à <see cref="T:System.Threading.CancellationToken" /> dans l'objet <paramref name="parallelOptions" /> a été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-228">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="For&lt;TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt; (int fromInclusive, int toExclusive, Func&lt;TLocal&gt; localInit, Func&lt;int,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt;(int32 fromInclusive, int32 toExclusive, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;int32, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function For(Of TLocal) (fromInclusive As Integer, toExclusive As Integer, localInit As Func(Of TLocal), body As Func(Of Integer, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult For(int fromInclusive, int toExclusive, Func&lt;TLocal&gt; ^ localInit, Func&lt;int, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member For : int * int * Func&lt;'Local&gt; * Func&lt;int, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int32" />
        <Parameter Name="toExclusive" Type="System.Int32" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;System.Int32,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TLocal">
          <span data-ttu-id="61b7b-229">Type des données locales de thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-229">The type of the thread-local data.</span>
          </span>
        </typeparam>
        <param name="fromInclusive">
          <span data-ttu-id="61b7b-230">Index de début, inclus.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-230">The start index, inclusive.</span>
          </span>
        </param>
        <param name="toExclusive">
          <span data-ttu-id="61b7b-231">Index de fin, exclusif.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-231">The end index, exclusive.</span>
          </span>
        </param>
        <param name="localInit">
          <span data-ttu-id="61b7b-232">Délégué de fonction qui retourne l’état initial des données locales pour chaque tâche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-232">The function delegate that returns the initial state of the local data for each task.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="61b7b-233">Délégué appelé une fois par itération.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-233">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <param name="localFinally">
          <span data-ttu-id="61b7b-234">Délégué qui exécute une dernière action sur l’état local de chaque tâche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-234">The delegate that performs a final action on the local state of each task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61b7b-235">Exécute une boucle <see langword="for" /> (<see langword="For" /> en Visual Basic) avec des données locales de thread dans laquelle les itérations peuvent s'exécuter en parallèle et l'état de la boucle peut être surveillé et manipulé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-235">Executes a <see langword="for" /> (<see langword="For" /> in Visual Basic) loop with thread-local data in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61b7b-236">Structure qui contient des informations sur la partie de la boucle terminée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-236">A  structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61b7b-237">Le `body` délégué est appelé une fois pour chaque valeur dans la plage d’itérations (`fromInclusive`, `toExclusive`).</span><span class="sxs-lookup"><span data-stu-id="61b7b-237">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="61b7b-238">Il est fourni avec les paramètres suivants : le nombre d’itérations (<xref:System.Int32>), un <xref:System.Threading.Tasks.ParallelLoopState> instance qui peut être utilisé pour quitter la boucle prématurément et un état local qui peut être partagé parmi les itérations qui s’exécutent sur le même thread.</span><span class="sxs-lookup"><span data-stu-id="61b7b-238">It is provided with the following parameters: the iteration count (<xref:System.Int32>), a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same thread.</span></span>  
  
 <span data-ttu-id="61b7b-239">Le `localInit` délégué est appelé une fois pour chaque tâche qui participe à l’exécution de la boucle et retourne l’état local initial pour chacun de ces tâches.</span><span class="sxs-lookup"><span data-stu-id="61b7b-239">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="61b7b-240">Ces états initiaux sont passés à la première `body` appels sur chaque tâche.</span><span class="sxs-lookup"><span data-stu-id="61b7b-240">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="61b7b-241">Ensuite, chaque appel de corps suivant retourne une valeur d’état éventuellement modifiée qui est passée à l’appel de corps suivant.</span><span class="sxs-lookup"><span data-stu-id="61b7b-241">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="61b7b-242">Enfin, le dernier appel du corps sur chaque tâche retourne une valeur d’état est passée à la `localFinally` déléguer.</span><span class="sxs-lookup"><span data-stu-id="61b7b-242">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="61b7b-243">Le `localFinally` délégué est appelé une fois par la tâche à effectuer une dernière action sur l’état local de chaque tâche.</span><span class="sxs-lookup"><span data-stu-id="61b7b-243">The `localFinally` delegate is invoked once per task to perform a final action on each task's local state.</span></span> <span data-ttu-id="61b7b-244">Ce délégué peut être appelé simultanément sur plusieurs tâches ; Par conséquent, vous devez synchroniser l’accès à toutes les variables partagées.</span><span class="sxs-lookup"><span data-stu-id="61b7b-244">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="61b7b-245">Le <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> méthode peuvent utiliser davantage de tâches que les threads sur la durée de vie de son exécution, en tant que tâches existantes terminées et sont remplacées par nouvelles tâches.</span><span class="sxs-lookup"><span data-stu-id="61b7b-245">The <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="61b7b-246">Cela donne sous-jacent <xref:System.Threading.Tasks.TaskScheduler> objet la possibilité d’ajouter, modifier ou supprimer des threads qui gèrent la boucle.</span><span class="sxs-lookup"><span data-stu-id="61b7b-246">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 <span data-ttu-id="61b7b-247">Si `fromInclusive` est supérieur ou égal à `toExclusive`, la méthode retourne immédiatement sans exécuter d’itérations.</span><span class="sxs-lookup"><span data-stu-id="61b7b-247">If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations.</span></span>  
  
 <span data-ttu-id="61b7b-248">Pour obtenir un exemple qui utilise cette méthode, consultez [Comment : écrire une boucle Parallel.For avec des Variables locales de Thread](~/docs/standard/parallel-programming/how-to-write-a-parallel-for-loop-with-thread-local-variables.md).</span><span class="sxs-lookup"><span data-stu-id="61b7b-248">For an example that uses this method, see [How to: Write a Parallel.For Loop with Thread-Local Variables](~/docs/standard/parallel-programming/how-to-write-a-parallel-for-loop-with-thread-local-variables.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="61b7b-249">L'argument <paramref name="body" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-249">The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="61b7b-250">- ou - L’argument <paramref name="localInit" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-250">-or-  The <paramref name="localInit" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="61b7b-251">- ou - L’argument <paramref name="localFinally" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-251">-or-  The <paramref name="localFinally" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="61b7b-252">Exception qui contient toutes les exceptions individuelles levées sur tous les threads.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-252">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="For&lt;TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt; (long fromInclusive, long toExclusive, Func&lt;TLocal&gt; localInit, Func&lt;long,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt;(int64 fromInclusive, int64 toExclusive, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;int64, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function For(Of TLocal) (fromInclusive As Long, toExclusive As Long, localInit As Func(Of TLocal), body As Func(Of Long, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult For(long fromInclusive, long toExclusive, Func&lt;TLocal&gt; ^ localInit, Func&lt;long, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member For : int64 * int64 * Func&lt;'Local&gt; * Func&lt;int64, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int64" />
        <Parameter Name="toExclusive" Type="System.Int64" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;System.Int64,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TLocal">
          <span data-ttu-id="61b7b-253">Type des données locales de thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-253">The type of the thread-local data.</span>
          </span>
        </typeparam>
        <param name="fromInclusive">
          <span data-ttu-id="61b7b-254">Index de début, inclus.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-254">The start index, inclusive.</span>
          </span>
        </param>
        <param name="toExclusive">
          <span data-ttu-id="61b7b-255">Index de fin, exclusif.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-255">The end index, exclusive.</span>
          </span>
        </param>
        <param name="localInit">
          <span data-ttu-id="61b7b-256">Délégué de fonction qui retourne l’état initial des données locales pour chaque tâche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-256">The function delegate that returns the initial state of the local data for each task.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="61b7b-257">Délégué appelé une fois par itération.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-257">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <param name="localFinally">
          <span data-ttu-id="61b7b-258">Délégué qui exécute une dernière action sur l’état local de chaque tâche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-258">The delegate that performs a final action on the local state of each task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61b7b-259">Exécute une boucle <see langword="for" /> (<see langword="For" /> en Visual Basic) avec des index 64 bits et des données locales de thread dans laquelle les itérations peuvent s'exécuter en parallèle et l'état de la boucle peut être surveillé et manipulé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-259">Executes a <see langword="for" /> (<see langword="For" /> in Visual Basic)  loop with 64-bit indexes and thread-local data in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61b7b-260">Structure qui contient des informations sur la partie de la boucle terminée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-260">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61b7b-261">Le `body` délégué est appelé une fois pour chaque valeur dans la plage d’itérations (`fromInclusive`, `toExclusive`).</span><span class="sxs-lookup"><span data-stu-id="61b7b-261">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="61b7b-262">Il est fourni avec les paramètres suivants : le nombre d’itérations (<xref:System.Int64>), un <xref:System.Threading.Tasks.ParallelLoopState> instance qui peut être utilisé pour quitter la boucle prématurément et un état local qui peut être partagé parmi les itérations qui s’exécutent sur la même tâche.</span><span class="sxs-lookup"><span data-stu-id="61b7b-262">It is provided with the following parameters: the iteration count (<xref:System.Int64>), a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same task.</span></span>  
  
 <span data-ttu-id="61b7b-263">Le `localInit` délégué est appelé une fois pour chaque tâche qui participe à l’exécution de la boucle et retourne l’état local initial pour chacun de ces tâches.</span><span class="sxs-lookup"><span data-stu-id="61b7b-263">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="61b7b-264">Ces états initiaux sont passés à la première `body` appels sur chaque tâche.</span><span class="sxs-lookup"><span data-stu-id="61b7b-264">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="61b7b-265">Ensuite, chaque appel de corps suivant retourne une valeur d’état éventuellement modifiée qui est passée à l’appel de corps suivant.</span><span class="sxs-lookup"><span data-stu-id="61b7b-265">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="61b7b-266">Enfin, le dernier appel du corps sur chaque tâche retourne une valeur d’état est passée à la `localFinally` déléguer.</span><span class="sxs-lookup"><span data-stu-id="61b7b-266">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="61b7b-267">Le `localFinally` délégué est appelé une fois par la tâche à effectuer une dernière action sur l’état local de chaque tâche.</span><span class="sxs-lookup"><span data-stu-id="61b7b-267">The `localFinally` delegate is invoked once per task to perform a final action on each task's local state.</span></span> <span data-ttu-id="61b7b-268">Ce délégué peut être appelé simultanément sur plusieurs tâches ; Par conséquent, vous devez synchroniser l’accès à toutes les variables partagées.</span><span class="sxs-lookup"><span data-stu-id="61b7b-268">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="61b7b-269">Le <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> méthode peuvent utiliser davantage de tâches que les threads sur la durée de vie de son exécution, en tant que tâches existantes terminées et sont remplacées par nouvelles tâches.</span><span class="sxs-lookup"><span data-stu-id="61b7b-269">The <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="61b7b-270">Cela donne sous-jacent <xref:System.Threading.Tasks.TaskScheduler> objet la possibilité d’ajouter, modifier ou supprimer des threads qui gèrent la boucle.</span><span class="sxs-lookup"><span data-stu-id="61b7b-270">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 <span data-ttu-id="61b7b-271">Si `fromInclusive` est supérieur ou égal à `toExclusive`, la méthode retourne immédiatement sans exécuter d’itérations.</span><span class="sxs-lookup"><span data-stu-id="61b7b-271">If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations.</span></span>  
  
 <span data-ttu-id="61b7b-272">Pour obtenir un exemple qui utilise cette méthode, consultez [Comment : écrire une boucle Parallel.For avec des Variables locales de Thread](~/docs/standard/parallel-programming/how-to-write-a-parallel-for-loop-with-thread-local-variables.md).</span><span class="sxs-lookup"><span data-stu-id="61b7b-272">For an example that uses this method, see [How to: Write a Parallel.For Loop with Thread-Local Variables](~/docs/standard/parallel-programming/how-to-write-a-parallel-for-loop-with-thread-local-variables.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="61b7b-273">L'argument <paramref name="body" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-273">The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="61b7b-274">- ou - L’argument <paramref name="localInit" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-274">-or-  The <paramref name="localInit" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="61b7b-275">- ou - L’argument <paramref name="localFinally" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-275">-or-  The <paramref name="localFinally" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="61b7b-276">Exception qui contient toutes les exceptions individuelles levées sur tous les threads.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-276">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="For&lt;TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt; (int fromInclusive, int toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Func&lt;TLocal&gt; localInit, Func&lt;int,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt;(int32 fromInclusive, int32 toExclusive, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;int32, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult For(int fromInclusive, int toExclusive, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Func&lt;TLocal&gt; ^ localInit, Func&lt;int, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member For : int * int * System.Threading.Tasks.ParallelOptions * Func&lt;'Local&gt; * Func&lt;int, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, parallelOptions, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int32" />
        <Parameter Name="toExclusive" Type="System.Int32" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;System.Int32,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TLocal">
          <span data-ttu-id="61b7b-277">Type des données locales de thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-277">The type of the thread-local data.</span>
          </span>
        </typeparam>
        <param name="fromInclusive">
          <span data-ttu-id="61b7b-278">Index de début, inclus.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-278">The start index, inclusive.</span>
          </span>
        </param>
        <param name="toExclusive">
          <span data-ttu-id="61b7b-279">Index de fin, exclusif.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-279">The end index, exclusive.</span>
          </span>
        </param>
        <param name="parallelOptions">
          <span data-ttu-id="61b7b-280">Objet qui configure le comportement de cette opération.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-280">An object that configures the behavior of this operation.</span>
          </span>
        </param>
        <param name="localInit">
          <span data-ttu-id="61b7b-281">Délégué de fonction qui retourne l’état initial des données locales pour chaque tâche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-281">The function delegate that returns the initial state of the local data for each task.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="61b7b-282">Délégué appelé une fois par itération.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-282">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <param name="localFinally">
          <span data-ttu-id="61b7b-283">Délégué qui exécute une dernière action sur l’état local de chaque tâche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-283">The delegate that performs a final action on the local state of each task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61b7b-284">Exécute une boucle <see langword="for" /> (<see langword="For" /> en Visual Basic) avec des données locales de thread dans laquelle les itérations peuvent s'exécuter en parallèle, les options de la boucle peuvent être configurées et l'état de la boucle peut être surveillé et manipulé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-284">Executes a <see langword="for" /> (<see langword="For" /> in Visual Basic)  loop with thread-local data in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61b7b-285">Structure qui contient des informations sur la partie de la boucle terminée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-285">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61b7b-286">Le `body` délégué est appelé une fois pour chaque valeur dans la plage d’itérations (`fromInclusive`, `toExclusive`).</span><span class="sxs-lookup"><span data-stu-id="61b7b-286">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="61b7b-287">Il est fourni avec les paramètres suivants : le nombre d’itérations (<xref:System.Int32>), un <xref:System.Threading.Tasks.ParallelLoopState> instance qui peut être utilisé pour quitter la boucle prématurément et un état local qui peut être partagé parmi les itérations qui s’exécutent sur la même tâche.</span><span class="sxs-lookup"><span data-stu-id="61b7b-287">It is provided with the following parameters: the iteration count (<xref:System.Int32>), a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same task.</span></span>  
  
 <span data-ttu-id="61b7b-288">Le `localInit` délégué est appelé une fois pour chaque tâche qui participe à l’exécution de la boucle et retourne l’état local initial pour chacun de ces tâches.</span><span class="sxs-lookup"><span data-stu-id="61b7b-288">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="61b7b-289">Ces états initiaux sont passés à la première `body` appels sur chaque tâche.</span><span class="sxs-lookup"><span data-stu-id="61b7b-289">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="61b7b-290">Ensuite, chaque appel de corps suivant retourne une valeur d’état éventuellement modifiée qui est passée à l’appel de corps suivant.</span><span class="sxs-lookup"><span data-stu-id="61b7b-290">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="61b7b-291">Enfin, le dernier appel du corps sur chaque tâche retourne une valeur d’état est passée à la `localFinally` déléguer.</span><span class="sxs-lookup"><span data-stu-id="61b7b-291">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="61b7b-292">Le `localFinally` délégué est appelé une fois par la tâche à effectuer une dernière action sur l’état local de chaque tâche.</span><span class="sxs-lookup"><span data-stu-id="61b7b-292">The `localFinally` delegate is invoked once per task to perform a final action on each task's local state.</span></span> <span data-ttu-id="61b7b-293">Ce délégué peut être appelé simultanément sur plusieurs threads ; Par conséquent, vous devez synchroniser l’accès à toutes les variables partagées.</span><span class="sxs-lookup"><span data-stu-id="61b7b-293">This delegate might be invoked concurrently on multiple threads; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="61b7b-294">Le <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> méthode peuvent utiliser davantage de tâches que les threads sur la durée de vie de son exécution, en tant que tâches existantes terminées et sont remplacées par nouvelles tâches.</span><span class="sxs-lookup"><span data-stu-id="61b7b-294">The <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="61b7b-295">Cela donne sous-jacent <xref:System.Threading.Tasks.TaskScheduler> objet la possibilité d’ajouter, modifier ou supprimer des threads qui gèrent la boucle.</span><span class="sxs-lookup"><span data-stu-id="61b7b-295">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 <span data-ttu-id="61b7b-296">Si `fromInclusive` est supérieur ou égal à `toExclusive`, la méthode retourne immédiatement sans exécuter d’itérations.</span><span class="sxs-lookup"><span data-stu-id="61b7b-296">If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61b7b-297">L’exemple suivant utilise des variables locales de thread pour calculer la somme des résultats de nombreuses opérations de longue durée.</span><span class="sxs-lookup"><span data-stu-id="61b7b-297">The following example uses thread-local variables to compute the sum of the results of many lengthy operations.</span></span> <span data-ttu-id="61b7b-298">Cet exemple limite le degré de parallélisme à quatre.</span><span class="sxs-lookup"><span data-stu-id="61b7b-298">This example limits the degree of parallelism to four.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel#04](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/threadlocalforwithoptions.cs#04)]
 [!code-vb[System.Threading.Tasks.Parallel#04](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/threadlocalforwithoptions.vb#04)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="61b7b-299">L'argument <paramref name="body" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-299">The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="61b7b-300">- ou - L’argument <paramref name="localInit" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-300">-or-  The <paramref name="localInit" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="61b7b-301">- ou - L’argument <paramref name="localFinally" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-301">-or-  The <paramref name="localFinally" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="61b7b-302">- ou - L’argument <paramref name="parallelOptions" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-302">-or-  The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="61b7b-303">
            <see cref="T:System.Threading.CancellationToken" /> dans l'argument <paramref name="parallelOptions" /> est annulé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-303">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="61b7b-304">Objet <see cref="T:System.Threading.CancellationTokenSource" /> associé à <see cref="T:System.Threading.CancellationToken" /> dans l'objet <paramref name="parallelOptions" /> a été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-304">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="61b7b-305">Exception qui contient toutes les exceptions individuelles levées sur tous les threads.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-305">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="For&lt;TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt; (long fromInclusive, long toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Func&lt;TLocal&gt; localInit, Func&lt;long,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt;(int64 fromInclusive, int64 toExclusive, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;int64, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult For(long fromInclusive, long toExclusive, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Func&lt;TLocal&gt; ^ localInit, Func&lt;long, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member For : int64 * int64 * System.Threading.Tasks.ParallelOptions * Func&lt;'Local&gt; * Func&lt;int64, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, parallelOptions, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int64" />
        <Parameter Name="toExclusive" Type="System.Int64" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;System.Int64,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TLocal">
          <span data-ttu-id="61b7b-306">Type des données locales de thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-306">The type of the thread-local data.</span>
          </span>
        </typeparam>
        <param name="fromInclusive">
          <span data-ttu-id="61b7b-307">Index de début, inclus.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-307">The start index, inclusive.</span>
          </span>
        </param>
        <param name="toExclusive">
          <span data-ttu-id="61b7b-308">Index de fin, exclusif.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-308">The end index, exclusive.</span>
          </span>
        </param>
        <param name="parallelOptions">
          <span data-ttu-id="61b7b-309">Objet qui configure le comportement de cette opération.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-309">An object that configures the behavior of this operation.</span>
          </span>
        </param>
        <param name="localInit">
          <span data-ttu-id="61b7b-310">Délégué de fonction qui retourne l'état initial des données locales pour chaque thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-310">The function delegate that returns the initial state of the local data for each thread.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="61b7b-311">Délégué appelé une fois par itération.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-311">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <param name="localFinally">
          <span data-ttu-id="61b7b-312">Délégué qui exécute une dernière action sur l'état local de chaque thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-312">The delegate that performs a final action on the local state of each thread.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61b7b-313">Exécute une boucle <see langword="for" /> (<see langword="For" /> en Visual Basic) avec des index 64 bits et des données locales de thread dans laquelle les itérations peuvent s'exécuter en parallèle, les options de la boucle peuvent être configurées et l'état de la boucle peut être surveillé et manipulé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-313">Executes a <see langword="for" /> (<see langword="For" /> in Visual Basic) loop with 64-bit indexes and thread-local data in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61b7b-314">Structure qui contient des informations sur la partie de la boucle terminée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-314">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61b7b-315">Le `body` délégué est appelé une fois pour chaque valeur dans la plage d’itérations (`fromInclusive`, `toExclusive`).</span><span class="sxs-lookup"><span data-stu-id="61b7b-315">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="61b7b-316">Il est fourni avec les paramètres suivants : le nombre d’itérations (<xref:System.Int64>), un <xref:System.Threading.Tasks.ParallelLoopState> instance qui peut être utilisé pour quitter la boucle prématurément et un état local qui peut être partagé parmi les itérations qui s’exécutent sur le même thread.</span><span class="sxs-lookup"><span data-stu-id="61b7b-316">It is provided with the following parameters: the iteration count (<xref:System.Int64>), a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same thread.</span></span>  
  
 <span data-ttu-id="61b7b-317">Le `localInit` délégué est appelé une fois pour chaque thread qui participe à l’exécution de la boucle et retourne l’état local initial pour chacun de ces threads.</span><span class="sxs-lookup"><span data-stu-id="61b7b-317">The `localInit` delegate is invoked once for each thread that participates in the loop's execution and returns the initial local state for each of those threads.</span></span> <span data-ttu-id="61b7b-318">Ces états initiaux sont passés à la première `body` appels sur chaque thread.</span><span class="sxs-lookup"><span data-stu-id="61b7b-318">These initial states are passed to the first `body` invocations on each thread.</span></span> <span data-ttu-id="61b7b-319">Ensuite, chaque appel de corps suivant retourne une valeur d’état éventuellement modifiée qui est passée à l’appel de corps suivant.</span><span class="sxs-lookup"><span data-stu-id="61b7b-319">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="61b7b-320">Enfin, le dernier appel du corps sur chaque thread renvoie une valeur d’état est passée à la `localFinally` déléguer.</span><span class="sxs-lookup"><span data-stu-id="61b7b-320">Finally, the last body invocation on each thread returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="61b7b-321">Le `localFinally` délégué est appelé une fois par thread pour exécuter une dernière action sur l’état local de chaque thread.</span><span class="sxs-lookup"><span data-stu-id="61b7b-321">The `localFinally` delegate is invoked once per thread to perform a final action on each thread's local state.</span></span> <span data-ttu-id="61b7b-322">Ce délégué peut être appelé simultanément sur plusieurs threads ; Par conséquent, vous devez synchroniser l’accès à toutes les variables partagées.</span><span class="sxs-lookup"><span data-stu-id="61b7b-322">This delegate might be invoked concurrently on multiple threads; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="61b7b-323">Le <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> méthode peuvent utiliser davantage de tâches que les threads sur la durée de vie de son exécution, en tant que tâches existantes terminées et sont remplacées par nouvelles tâches.</span><span class="sxs-lookup"><span data-stu-id="61b7b-323">The <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="61b7b-324">Cela donne sous-jacent <xref:System.Threading.Tasks.TaskScheduler> objet la possibilité d’ajouter, modifier ou supprimer des threads qui gèrent la boucle.</span><span class="sxs-lookup"><span data-stu-id="61b7b-324">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 <span data-ttu-id="61b7b-325">Si `fromInclusive` est supérieur ou égal à `toExclusive`, la méthode retourne immédiatement sans exécuter d’itérations.</span><span class="sxs-lookup"><span data-stu-id="61b7b-325">If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="61b7b-326">L'argument <paramref name="body" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-326">The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="61b7b-327">- ou - L’argument <paramref name="localInit" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-327">-or-  The <paramref name="localInit" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="61b7b-328">- ou - L’argument <paramref name="localFinally" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-328">-or-  The <paramref name="localFinally" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="61b7b-329">- ou - L’argument <paramref name="parallelOptions" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-329">-or-  The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="61b7b-330">
            <see cref="T:System.Threading.CancellationToken" /> dans l'argument <paramref name="parallelOptions" /> est annulé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-330">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="61b7b-331">Objet <see cref="T:System.Threading.CancellationTokenSource" /> associé à <see cref="T:System.Threading.CancellationToken" /> dans l'objet <paramref name="parallelOptions" /> a été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-331">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="61b7b-332">Exception qui contient toutes les exceptions individuelles levées sur tous les threads.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-332">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ForEach&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="61b7b-333">Exécute une opération <see langword="foreach" /> (<see langword="For Each " /> en Visual Basic) dans laquelle les itérations peuvent s'exécuter en parallèle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-333">Executes a <see langword="foreach" /> (<see langword="For Each " /> in Visual Basic) operation in which iterations may run in parallel.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt; source, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,long&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Concurrent.OrderablePartitioner`1&lt;!!TSource&gt; source, class System.Action`3&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource) (source As OrderablePartitioner(Of TSource), body As Action(Of TSource, ParallelLoopState, Long)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::OrderablePartitioner&lt;TSource&gt; ^ source, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.OrderablePartitioner&lt;'Source&gt; * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt;" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="61b7b-334">Le type des éléments de <c>source</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-334">The type of the elements in <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="61b7b-335">Partitionneur classable qui contient la source de données d'origine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-335">The orderable partitioner that contains the original data source.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="61b7b-336">Délégué appelé une fois par itération.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-336">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61b7b-337">Exécute une opération <see langword="foreach" /> (<see langword="For Each" /> en Visual Basic) sur <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> dans laquelle les itérations peuvent s'exécuter en parallèle et l'état de la boucle peut être surveillé et manipulé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-337">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on a <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> in which iterations may run in parallel and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61b7b-338">Structure qui contient des informations sur la partie de la boucle terminée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-338">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61b7b-339">Cette surcharge est fournie pour les scénarios où vous souhaitez remplacer la valeur par défaut de schéma de partitionnement.</span><span class="sxs-lookup"><span data-stu-id="61b7b-339">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="61b7b-340">Par exemple, corps de petites boucles susceptibles de tirer de la plage de partition.</span><span class="sxs-lookup"><span data-stu-id="61b7b-340">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="61b7b-341">Le <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> méthode attend les partitionneurs personnalisés pour prendre en charge le partitionnement dynamique.</span><span class="sxs-lookup"><span data-stu-id="61b7b-341">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="61b7b-342">Pour plus d’informations, consultez [Partitionneurs personnalisés pour PLINQ et la bibliothèque parallèle de tâches](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) et [Comment : implémenter des Partitions dynamiques](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span><span class="sxs-lookup"><span data-stu-id="61b7b-342">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="61b7b-343">L'argument <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-343">The <paramref name="source" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="61b7b-344">- ou - L’argument <paramref name="body" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-344">-or-  The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="61b7b-345">La propriété <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> dans le partitionneur classable <paramref name="source" /> retourne la valeur <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-345">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /> orderable partitioner returns <see langword="false" />.</span>
          </span>
          <span data-ttu-id="61b7b-346">- ou - La propriété <see cref="P:System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized" /> dans le partitionneur classable source retourne <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-346">-or-  The <see cref="P:System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized" /> property in the source orderable partitioner returns <see langword="false" />.</span>
          </span>
          <span data-ttu-id="61b7b-347">- ou - Toutes les méthodes dans le partitionneur classable source retournent <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-347">-or-  Any methods in the source orderable partitioner return <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Concurrent.Partitioner&lt;TSource&gt; source, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Concurrent.Partitioner`1&lt;!!TSource&gt; source, class System.Action`2&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource) (source As Partitioner(Of TSource), body As Action(Of TSource, ParallelLoopState)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::Partitioner&lt;TSource&gt; ^ source, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.Partitioner&lt;'Source&gt; * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.Partitioner&lt;TSource&gt;" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="61b7b-348">Le type des éléments de <c>source</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-348">The type of the elements in <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="61b7b-349">Partitionneur qui contient la source de données d'origine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-349">The partitioner that contains the original data source.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="61b7b-350">Délégué appelé une fois par itération.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-350">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61b7b-351">Exécute une opération <see langword="foreach" /> (<see langword="For Each" /> en Visual Basic) sur <see cref="T:System.Collections.Concurrent.Partitioner" /> dans laquelle les itérations peuvent s'exécuter en parallèle et l'état de la boucle peut être surveillé et manipulé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-351">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on a <see cref="T:System.Collections.Concurrent.Partitioner" /> in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61b7b-352">Structure qui contient des informations sur la partie de la boucle terminée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-352">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61b7b-353">Cette surcharge est fournie pour les scénarios où vous souhaitez remplacer la valeur par défaut de schéma de partitionnement.</span><span class="sxs-lookup"><span data-stu-id="61b7b-353">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="61b7b-354">Par exemple, corps de petites boucles susceptibles de tirer de la plage de partition.</span><span class="sxs-lookup"><span data-stu-id="61b7b-354">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="61b7b-355">Le <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> méthode attend les partitionneurs personnalisés pour prendre en charge le partitionnement dynamique.</span><span class="sxs-lookup"><span data-stu-id="61b7b-355">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="61b7b-356">Pour plus d’informations, consultez [Partitionneurs personnalisés pour PLINQ et la bibliothèque parallèle de tâches](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) et [Comment : implémenter des Partitions dynamiques](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span><span class="sxs-lookup"><span data-stu-id="61b7b-356">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="61b7b-357">L'argument <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-357">The <paramref name="source" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="61b7b-358">- ou - L’argument <paramref name="body" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-358">-or-  The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="61b7b-359">La propriété <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> du partitionneur <paramref name="source" /> retourne <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-359">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /> partitioner returns <see langword="false" />.</span>
          </span>
          <span data-ttu-id="61b7b-360">- ou - Une méthode du partitionneur <paramref name="source" /> retourne <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-360">-or-  A method in the <paramref name="source" /> partitioner returns <see langword="null" />.</span>
          </span>
          <span data-ttu-id="61b7b-361">- ou - La méthode <see cref="M:System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)" /> dans le partitionneur <paramref name="source" /> ne retourne pas le nombre correct de partitions.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-361">-or-  The <see cref="M:System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)" /> method in the <paramref name="source" /> partitioner does not return the correct number of partitions.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Concurrent.Partitioner&lt;TSource&gt; source, Action&lt;TSource&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Concurrent.Partitioner`1&lt;!!TSource&gt; source, class System.Action`1&lt;!!TSource&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource) (source As Partitioner(Of TSource), body As Action(Of TSource)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::Partitioner&lt;TSource&gt; ^ source, Action&lt;TSource&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.Partitioner&lt;'Source&gt; * Action&lt;'Source&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.Partitioner&lt;TSource&gt;" />
        <Parameter Name="body" Type="System.Action&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="61b7b-362">Le type des éléments de <c>source</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-362">The type of the elements in <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="61b7b-363">Partitionneur qui contient la source de données d'origine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-363">The partitioner that contains the original data source.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="61b7b-364">Délégué appelé une fois par itération.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-364">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61b7b-365">Exécute une opération <see langword="foreach" /> (<see langword="For Each" /> en Visual Basic) sur <see cref="T:System.Collections.Concurrent.Partitioner" /> dans laquelle les itérations peuvent s'exécuter en parallèle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-365">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on a <see cref="T:System.Collections.Concurrent.Partitioner" /> in which iterations may run in parallel.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61b7b-366">Structure qui contient des informations sur la partie de la boucle terminée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-366">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61b7b-367">Cette surcharge est fournie pour les scénarios où vous souhaitez remplacer la valeur par défaut de schéma de partitionnement.</span><span class="sxs-lookup"><span data-stu-id="61b7b-367">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="61b7b-368">Par exemple, corps de petites boucles susceptibles de tirer de la plage de partition.</span><span class="sxs-lookup"><span data-stu-id="61b7b-368">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="61b7b-369">Le <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> méthode attend les partitionneurs personnalisés pour prendre en charge le partitionnement dynamique.</span><span class="sxs-lookup"><span data-stu-id="61b7b-369">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="61b7b-370">Pour plus d’informations, consultez [Partitionneurs personnalisés pour PLINQ et la bibliothèque parallèle de tâches](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) et [Comment : implémenter des Partitions dynamiques](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span><span class="sxs-lookup"><span data-stu-id="61b7b-370">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61b7b-371">L’exemple suivant montre comment implémenter un partitionneur de plage pour une utilisation avec <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>:</span><span class="sxs-lookup"><span data-stu-id="61b7b-371">The following example shows how to implement a range partitioner for use with <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>:</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel_RangePartitioners#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel_rangepartitioners/cs/rangepartitioner.cs#01)]
 [!code-vb[System.Threading.Tasks.Parallel_RangePartitioners#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel_rangepartitioners/vb/rangepart.vb#01)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="61b7b-372">L’argument <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-372">The <paramref name="source" /> argument is  <see langword="null" />.</span>
          </span>
          <span data-ttu-id="61b7b-373">- ou - L’argument <paramref name="body" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-373">-or-  The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="61b7b-374">La propriété <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> du partitionneur <paramref name="source" /> retourne <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-374">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /> partitioner returns <see langword="false" />.</span>
          </span>
          <span data-ttu-id="61b7b-375">- ou - Exception levée quand toutes les méthodes dans le partitionneur <paramref name="source" /> retournent la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-375">-or-  The exception that is thrown when any methods in the <paramref name="source" /> partitioner return <see langword="null" />.</span>
          </span>
          <span data-ttu-id="61b7b-376">- ou - La méthode <see cref="M:System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)" /> dans le partitionneur <paramref name="source" /> ne retourne pas le nombre correct de partitions.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-376">-or-  The <see cref="M:System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)" /> method in the <paramref name="source" /> partitioner does not return the correct number of partitions.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,long&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Action`3&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource) (source As IEnumerable(Of TSource), body As Action(Of TSource, ParallelLoopState, Long)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="61b7b-377">Type des données contenues dans la source.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-377">The type of the data in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="61b7b-378">Source de données énumérable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-378">An enumerable data source.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="61b7b-379">Délégué appelé une fois par itération.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-379">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61b7b-380">Exécute une opération <see langword="foreach" /> (<see langword="For Each" /> en Visual Basic) avec des index 64 bits sur <see cref="T:System.Collections.IEnumerable" /> dans laquelle les itérations peuvent s'exécuter en parallèle et l'état de la boucle peut être surveillé et manipulé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-380">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with 64-bit indexes on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61b7b-381">Structure qui contient des informations sur la partie de la boucle terminée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-381">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61b7b-382">Le `body` délégué est appelé une fois pour chaque élément dans le `source` énumérable.</span><span class="sxs-lookup"><span data-stu-id="61b7b-382">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="61b7b-383">Il est fourni avec les paramètres suivants : l’élément actuel, un <xref:System.Threading.Tasks.ParallelLoopState> instance qui peut être utilisé pour quitter la boucle prématurément et des index de l’élément actuel (<xref:System.Int64>).</span><span class="sxs-lookup"><span data-stu-id="61b7b-383">It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and the current element's index (<xref:System.Int64>).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="61b7b-384">L'argument <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-384">The <paramref name="source" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="61b7b-385">- ou - L’argument <paramref name="body" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-385">-or-  The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="61b7b-386">Exception qui contient toutes les exceptions individuelles levées sur tous les threads.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-386">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Action`2&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource) (source As IEnumerable(Of TSource), body As Action(Of TSource, ParallelLoopState)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="61b7b-387">Type des données contenues dans la source.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-387">The type of the data in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="61b7b-388">Source de données énumérable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-388">An enumerable data source.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="61b7b-389">Délégué appelé une fois par itération.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-389">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61b7b-390">Exécute une opération <see langword="foreach" /> (<see langword="For Each" /> en Visual Basic) sur <see cref="T:System.Collections.IEnumerable" /> dans laquelle les itérations peuvent s'exécuter en parallèle et l'état de la boucle peut être surveillé et manipulé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-390">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61b7b-391">Structure qui contient des informations sur la partie de la boucle terminée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-391">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61b7b-392">Le `body` délégué est appelé une fois pour chaque élément dans le `source` énumérable.</span><span class="sxs-lookup"><span data-stu-id="61b7b-392">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="61b7b-393">Il est fourni avec les paramètres suivants : l’élément actuel et un <xref:System.Threading.Tasks.ParallelLoopState> instance qui peut être utilisé pour quitter la boucle prématurément.</span><span class="sxs-lookup"><span data-stu-id="61b7b-393">It is provided with the following parameters: the current element, and a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="61b7b-394">L'argument <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-394">The <paramref name="source" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="61b7b-395">- ou - L’argument <paramref name="body" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-395">-or-  The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="61b7b-396">Exception qui contient toutes les exceptions individuelles levées sur tous les threads.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-396">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Action&lt;TSource&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Action`1&lt;!!TSource&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource) (source As IEnumerable(Of TSource), body As Action(Of TSource)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Action&lt;TSource&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * Action&lt;'Source&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="body" Type="System.Action&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="61b7b-397">Type des données contenues dans la source.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-397">The type of the data in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="61b7b-398">Source de données énumérable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-398">An enumerable data source.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="61b7b-399">Délégué appelé une fois par itération.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-399">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61b7b-400">Exécute une opération <see langword="foreach" /> (<see langword="For Each" /> en Visual Basic) sur <see cref="T:System.Collections.IEnumerable" /> dans laquelle les itérations peuvent s'exécuter en parallèle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-400">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61b7b-401">Structure qui contient des informations sur la partie de la boucle terminée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-401">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61b7b-402">Le `body` délégué est appelé une fois pour chaque élément dans le `source` énumérable.</span><span class="sxs-lookup"><span data-stu-id="61b7b-402">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="61b7b-403">Il est fourni avec l’élément actuel en tant que paramètre.</span><span class="sxs-lookup"><span data-stu-id="61b7b-403">It is provided with the current element as a parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61b7b-404">L’exemple suivant utilise la <xref:System.Threading.Tasks.Parallel.ForEach%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Action%7B%60%600%7D%29> méthode pour compter le nombre de caractères sans espaces dans un fichier texte et les voyelles.</span><span class="sxs-lookup"><span data-stu-id="61b7b-404">The following example uses the <xref:System.Threading.Tasks.Parallel.ForEach%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Action%7B%60%600%7D%29> method to count the number of vowels and non-whitespace characters in a text file.</span></span> <span data-ttu-id="61b7b-405">Dans ce cas, le <xref:System.Threading.Tasks.ParallelLoopResult> valeur retournée par la méthode est ignoré.</span><span class="sxs-lookup"><span data-stu-id="61b7b-405">In this case, the <xref:System.Threading.Tasks.ParallelLoopResult> value returned by the method is ignored.</span></span> <span data-ttu-id="61b7b-406">Notez que, étant donné que les opérations peuvent s’exécuter en parallèle, vous devez vous assurer que les variables de compteur à incrémentation est une opération atomique, et que plusieurs threads n’essaient pas d’accéder simultanément aux variables de compteur.</span><span class="sxs-lookup"><span data-stu-id="61b7b-406">Note that, because operations can run in parallel, you must ensure that incrementing the counter variables is an atomic operation, and that multiple threads do not attempt to access the counter variables simultaneously.</span></span> <span data-ttu-id="61b7b-407">Pour cela, l’exemple utilise le `lock` instruction (c#) et la `SyncLock` instruction (en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="61b7b-407">For this purpose, the example uses the `lock` statement (in C#) and the `SyncLock` statement (in Visual Basic).</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel.ForEach#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel.foreach/cs/foreach1.cs#1)]
 [!code-vb[System.Threading.Tasks.Parallel.ForEach#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel.foreach/vb/foreach1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="61b7b-408">L'argument <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-408">The <paramref name="source" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="61b7b-409">- ou - L’argument <paramref name="body" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-409">-or-  The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="61b7b-410">Exception qui contient toutes les exceptions individuelles levées sur tous les threads.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-410">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,long&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Concurrent.OrderablePartitioner`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`3&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::OrderablePartitioner&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.OrderablePartitioner&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="61b7b-411">Le type des éléments de <c>source</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-411">The type of the elements in <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="61b7b-412">Partitionneur classable qui contient la source de données d'origine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-412">The orderable partitioner that contains the original data source.</span>
          </span>
        </param>
        <param name="parallelOptions">
          <span data-ttu-id="61b7b-413">Objet qui configure le comportement de cette opération.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-413">An object that configures the behavior of this operation.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="61b7b-414">Délégué appelé une fois par itération.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-414">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61b7b-415">Exécute une opération <see langword="foreach" /> (<see langword="For Each" /> en Visual Basic) sur <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> dans laquelle les itérations peuvent s'exécuter en parallèle, les options de la boucle peuvent être configurées et l'état de la boucle peut être surveillé et manipulé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-415">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on a <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61b7b-416">Structure qui contient des informations sur la partie de la boucle terminée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-416">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61b7b-417">Cette surcharge est fournie pour les scénarios où vous souhaitez remplacer la valeur par défaut de schéma de partitionnement.</span><span class="sxs-lookup"><span data-stu-id="61b7b-417">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="61b7b-418">Par exemple, corps de petites boucles susceptibles de tirer de la plage de partition.</span><span class="sxs-lookup"><span data-stu-id="61b7b-418">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="61b7b-419">Le <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> méthode attend les partitionneurs personnalisés pour prendre en charge le partitionnement dynamique.</span><span class="sxs-lookup"><span data-stu-id="61b7b-419">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="61b7b-420">Pour plus d’informations, consultez [Partitionneurs personnalisés pour PLINQ et la bibliothèque parallèle de tâches](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) et [Comment : implémenter des Partitions dynamiques](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span><span class="sxs-lookup"><span data-stu-id="61b7b-420">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="61b7b-421">
            <see cref="T:System.Threading.CancellationToken" /> dans l'argument <paramref name="parallelOptions" /> est annulé</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-421">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="61b7b-422">L’argument <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-422">The <paramref name="source" /> argument is  <see langword="null" />.</span>
          </span>
          <span data-ttu-id="61b7b-423">- ou - L’argument <paramref name="parallelOptions" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-423">-or-  The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="61b7b-424">- ou - L’argument <paramref name="body" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-424">-or-  The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="61b7b-425">Objet <see cref="T:System.Threading.CancellationTokenSource" /> associé à <see cref="T:System.Threading.CancellationToken" /> dans l'objet <paramref name="parallelOptions" /> a été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-425">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="61b7b-426">La propriété <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> dans le partitionneur classable <paramref name="source" /> retourne la valeur <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-426">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /> orderable partitioner returns <see langword="false" />.</span>
          </span>
          <span data-ttu-id="61b7b-427">- ou - La propriété <see cref="P:System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized" /> dans le partitionneur classable <paramref name="source" /> retourne <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-427">-or-  The <see cref="P:System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized" /> property in the <paramref name="source" /> orderable partitioner returns <see langword="false" />.</span>
          </span>
          <span data-ttu-id="61b7b-428">- ou - L’exception levée quand toutes les méthodes dans le partitionneur classable <paramref name="source" /> retournent <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-428">-or-  The exception that is thrown when any methods in the <paramref name="source" /> orderable partitioner return <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Concurrent.Partitioner&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Concurrent.Partitioner`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`2&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::Partitioner&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.Partitioner&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.Partitioner&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="61b7b-429">Le type des éléments de <c>source</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-429">The type of the elements in <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="61b7b-430">Partitionneur qui contient la source de données d'origine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-430">The partitioner that contains the original data source.</span>
          </span>
        </param>
        <param name="parallelOptions">
          <span data-ttu-id="61b7b-431">Objet qui configure le comportement de cette opération.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-431">An object that configures the behavior of this operation.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="61b7b-432">Délégué appelé une fois par itération.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-432">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61b7b-433">Exécute une opération <see langword="foreach" /> (<see langword="For Each" /> en Visual Basic) sur <see cref="T:System.Collections.Concurrent.Partitioner" /> dans laquelle les itérations peuvent s'exécuter en parallèle, les options de la boucle peuvent être configurées et l'état de la boucle peut être surveillé et manipulé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-433">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on a <see cref="T:System.Collections.Concurrent.Partitioner" /> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61b7b-434">Structure qui contient des informations sur la partie de la boucle terminée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-434">A  structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61b7b-435">Cette surcharge est fournie pour les scénarios où vous souhaitez remplacer la valeur par défaut de schéma de partitionnement.</span><span class="sxs-lookup"><span data-stu-id="61b7b-435">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="61b7b-436">Par exemple, corps de petites boucles susceptibles de tirer de la plage de partition.</span><span class="sxs-lookup"><span data-stu-id="61b7b-436">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="61b7b-437">Le <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> méthode attend les partitionneurs personnalisés pour prendre en charge le partitionnement dynamique.</span><span class="sxs-lookup"><span data-stu-id="61b7b-437">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="61b7b-438">Pour plus d’informations, consultez [Partitionneurs personnalisés pour PLINQ et la bibliothèque parallèle de tâches](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) et [Comment : implémenter des Partitions dynamiques](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span><span class="sxs-lookup"><span data-stu-id="61b7b-438">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="61b7b-439">
            <see cref="T:System.Threading.CancellationToken" /> dans l'argument <paramref name="parallelOptions" /> est annulé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-439">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="61b7b-440">Objet <see cref="T:System.Threading.CancellationTokenSource" /> associé à <see cref="T:System.Threading.CancellationToken" /> dans l'objet <paramref name="parallelOptions" /> a été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-440">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="61b7b-441">L'argument <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-441">The <paramref name="source" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="61b7b-442">- ou - L’argument <paramref name="parallelOptions" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-442">-or-  The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="61b7b-443">- ou - L’argument <paramref name="body" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-443">-or-  The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="61b7b-444">La propriété <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> du partitionneur <paramref name="source" /> retourne <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-444">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /> partitioner returns <see langword="false" />.</span>
          </span>
          <span data-ttu-id="61b7b-445">- ou - Exception levée quand toutes les méthodes dans le partitionneur <paramref name="source" /> retournent la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-445">-or-  The exception that is thrown when any methods in the <paramref name="source" /> partitioner return <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Concurrent.Partitioner&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;TSource&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Concurrent.Partitioner`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`1&lt;!!TSource&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::Partitioner&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;TSource&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.Partitioner&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Action&lt;'Source&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.Partitioner&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="61b7b-446">Le type des éléments de <c>source</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-446">The type of the elements in <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="61b7b-447">Partitionneur qui contient la source de données d'origine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-447">The partitioner that contains the original data source.</span>
          </span>
        </param>
        <param name="parallelOptions">
          <span data-ttu-id="61b7b-448">Objet qui configure le comportement de cette opération.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-448">An object that configures the behavior of this operation.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="61b7b-449">Délégué appelé une fois par itération.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-449">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61b7b-450">Exécute une opération <see langword="foreach" /> (<see langword="For Each" /> en Visual Basic) sur <see cref="T:System.Collections.Concurrent.Partitioner" /> dans laquelle les itérations peuvent s'exécuter en parallèle et les options de la boucle peuvent être configurées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-450">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on a <see cref="T:System.Collections.Concurrent.Partitioner" /> in which iterations may run in parallel and loop options can be configured.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61b7b-451">Structure qui contient des informations sur la partie de la boucle terminée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-451">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61b7b-452">Cette surcharge est fournie pour les scénarios où vous souhaitez remplacer la valeur par défaut de schéma de partitionnement.</span><span class="sxs-lookup"><span data-stu-id="61b7b-452">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="61b7b-453">Par exemple, corps de petites boucles susceptibles de tirer de la plage de partition.</span><span class="sxs-lookup"><span data-stu-id="61b7b-453">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="61b7b-454">Le <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> méthode attend les partitionneurs personnalisés pour prendre en charge le partitionnement dynamique.</span><span class="sxs-lookup"><span data-stu-id="61b7b-454">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="61b7b-455">Pour plus d’informations, consultez [Partitionneurs personnalisés pour PLINQ et la bibliothèque parallèle de tâches](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) et [Comment : implémenter des Partitions dynamiques](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span><span class="sxs-lookup"><span data-stu-id="61b7b-455">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="61b7b-456">
            <see cref="T:System.Threading.CancellationToken" /> dans l'argument <paramref name="parallelOptions" /> est annulé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-456">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="61b7b-457">Objet <see cref="T:System.Threading.CancellationTokenSource" /> associé à <see cref="T:System.Threading.CancellationToken" /> dans l'objet <paramref name="parallelOptions" /> a été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-457">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="61b7b-458">L'argument <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-458">The <paramref name="source" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="61b7b-459">- ou - L’argument <paramref name="parallelOptions" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-459">-or-  The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="61b7b-460">- ou - L’argument <paramref name="body" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-460">-or-  The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="61b7b-461">La propriété <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> du partitionneur <paramref name="source" /> retourne <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-461">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /> partitioner returns <see langword="false" />.</span>
          </span>
          <span data-ttu-id="61b7b-462">- ou - Exception levée quand toutes les méthodes dans le partitionneur <paramref name="source" /> retournent la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-462">-or-  The exception that is thrown when any methods in the <paramref name="source" /> partitioner return <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,long&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`3&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="61b7b-463">Type des données contenues dans la source.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-463">The type of the data in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="61b7b-464">Source de données énumérable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-464">An enumerable data source.</span>
          </span>
        </param>
        <param name="parallelOptions">
          <span data-ttu-id="61b7b-465">Objet qui configure le comportement de cette opération.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-465">An object that configures the behavior of this operation.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="61b7b-466">Délégué appelé une fois par itération.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-466">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61b7b-467">Exécute une opération <see langword="foreach" /> (<see langword="For Each" /> en Visual Basic) avec des index 64 bits sur <see cref="T:System.Collections.IEnumerable" /> dans laquelle les itérations peuvent s'exécuter en parallèle, les options de boucle peuvent être configurées et l'état de la boucle peut être surveillé et manipulé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-467">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with 64-bit indexes on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61b7b-468">Structure qui contient des informations sur la partie de la boucle terminée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-468">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61b7b-469">Le `body` délégué est appelé une fois pour chaque élément dans le `source` énumérable.</span><span class="sxs-lookup"><span data-stu-id="61b7b-469">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="61b7b-470">Il est fourni avec les paramètres suivants : l’élément actuel, un <xref:System.Threading.Tasks.ParallelLoopState> instance qui peut être utilisé pour quitter la boucle prématurément et des index de l’élément actuel (<xref:System.Int64>).</span><span class="sxs-lookup"><span data-stu-id="61b7b-470">It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and the current element's index (<xref:System.Int64>).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="61b7b-471">
            <see cref="T:System.Threading.CancellationToken" /> dans l'argument <paramref name="parallelOptions" /> est annulé</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-471">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="61b7b-472">L'argument <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-472">The <paramref name="source" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="61b7b-473">- ou - L’argument <paramref name="parallelOptions" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-473">-or-  The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="61b7b-474">- ou - L’argument <paramref name="body" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-474">-or-  The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="61b7b-475">Exception qui contient toutes les exceptions individuelles levées sur tous les threads.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-475">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="61b7b-476">Objet <see cref="T:System.Threading.CancellationTokenSource" /> associé à <see cref="T:System.Threading.CancellationToken" /> dans l'objet <paramref name="parallelOptions" /> a été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-476">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`2&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="61b7b-477">Type des données contenues dans la source.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-477">The type of the data in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="61b7b-478">Source de données énumérable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-478">An enumerable data source.</span>
          </span>
        </param>
        <param name="parallelOptions">
          <span data-ttu-id="61b7b-479">Objet qui configure le comportement de cette opération.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-479">An object that configures the behavior of this operation.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="61b7b-480">Délégué appelé une fois par itération.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-480">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61b7b-481">Exécute une opération <see langword="foreach" /> (<see langword="For Each" /> en Visual Basic) sur <see cref="T:System.Collections.IEnumerable" /> dans laquelle les itérations peuvent s'exécuter en parallèle, les options de la boucle peuvent être configurées et l'état de la boucle peut être surveillé et manipulé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-481">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61b7b-482">Structure qui contient des informations sur la partie de la boucle terminée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-482">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61b7b-483">Le `body` délégué est appelé une fois pour chaque élément dans le `source` énumérable.</span><span class="sxs-lookup"><span data-stu-id="61b7b-483">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="61b7b-484">Il est fourni avec les paramètres suivants : l’élément actuel et un <xref:System.Threading.Tasks.ParallelLoopState> instance qui peut être utilisé pour quitter la boucle prématurément.</span><span class="sxs-lookup"><span data-stu-id="61b7b-484">It is provided with the following parameters: the current element, and a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="61b7b-485">
            <see cref="T:System.Threading.CancellationToken" /> dans l'argument <paramref name="parallelOptions" /> est annulé</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-485">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="61b7b-486">L'argument <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-486">The <paramref name="source" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="61b7b-487">- ou - L’argument <paramref name="parallelOptions" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-487">-or-  The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="61b7b-488">- ou - L’argument <paramref name="body" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-488">-or-  The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="61b7b-489">Exception qui contient toutes les exceptions individuelles levées sur tous les threads.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-489">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="61b7b-490">Objet <see cref="T:System.Threading.CancellationTokenSource" /> associé à <see cref="T:System.Threading.CancellationToken" /> dans l'objet <paramref name="parallelOptions" /> a été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-490">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;TSource&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`1&lt;!!TSource&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;TSource&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Action&lt;'Source&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="61b7b-491">Type des données contenues dans la source.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-491">The type of the data in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="61b7b-492">Source de données énumérable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-492">An enumerable data source.</span>
          </span>
        </param>
        <param name="parallelOptions">
          <span data-ttu-id="61b7b-493">Objet qui configure le comportement de cette opération.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-493">An object that configures the behavior of this operation.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="61b7b-494">Délégué appelé une fois par itération.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-494">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61b7b-495">Exécute une opération <see langword="foreach" /> (<see langword="For Each" /> en Visual Basic) sur <see cref="T:System.Collections.IEnumerable" /> dans laquelle les itérations peuvent s'exécuter en parallèle et les options de la boucle peuvent être configurées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-495">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel and loop options can be configured.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61b7b-496">Structure qui contient des informations sur la partie de la boucle terminée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-496">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61b7b-497">Le `body` délégué est appelé une fois pour chaque élément dans le `source` énumérable.</span><span class="sxs-lookup"><span data-stu-id="61b7b-497">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="61b7b-498">Il est fourni avec l’élément actuel en tant que paramètre.</span><span class="sxs-lookup"><span data-stu-id="61b7b-498">It is provided with the current element as a parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="61b7b-499">
            <see cref="T:System.Threading.CancellationToken" /> dans l'argument <paramref name="parallelOptions" /> est annulé</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-499">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="61b7b-500">L'argument <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-500">The <paramref name="source" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="61b7b-501">- ou - L’argument <paramref name="parallelOptions" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-501">-or-  The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="61b7b-502">- ou - L’argument <paramref name="body" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-502">-or-  The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="61b7b-503">Exception qui contient toutes les exceptions individuelles levées sur tous les threads.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-503">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="61b7b-504">Objet <see cref="T:System.Threading.CancellationTokenSource" /> associé à <see cref="T:System.Threading.CancellationToken" /> dans l'objet <paramref name="parallelOptions" /> a été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-504">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt; source, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,long,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Concurrent.OrderablePartitioner`1&lt;!!TSource&gt; source, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`5&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource, TLocal) (source As OrderablePartitioner(Of TSource), localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, Long, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::OrderablePartitioner&lt;TSource&gt; ^ source, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.OrderablePartitioner&lt;'Source&gt; * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt;" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="61b7b-505">Le type des éléments de <c>source</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-505">The type of the elements in <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TLocal">
          <span data-ttu-id="61b7b-506">Type des données locales de thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-506">The type of the thread-local data.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="61b7b-507">Partitionneur classable qui contient la source de données d'origine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-507">The orderable partitioner that contains the original data source.</span>
          </span>
        </param>
        <param name="localInit">
          <span data-ttu-id="61b7b-508">Délégué de fonction qui retourne l’état initial des données locales pour chaque tâche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-508">The function delegate that returns the initial state of the local data for each task.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="61b7b-509">Délégué appelé une fois par itération.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-509">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <param name="localFinally">
          <span data-ttu-id="61b7b-510">Délégué qui exécute une dernière action sur l’état local de chaque tâche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-510">The delegate that performs a final action on the local state of each task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61b7b-511">Exécute une opération <see langword="foreach" /> (<see langword="For Each" /> en Visual Basic) avec des données locales de thread sur <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> dans laquelle les itérations peuvent s'exécuter en parallèle, les options de la boucle peuvent être configurées et l'état de la boucle peut être surveillé et manipulé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-511">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with thread-local data on a <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61b7b-512">Structure qui contient des informations sur la partie de la boucle terminée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-512">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61b7b-513">Cette surcharge est fournie pour les scénarios où vous souhaitez remplacer la valeur par défaut de schéma de partitionnement.</span><span class="sxs-lookup"><span data-stu-id="61b7b-513">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="61b7b-514">Par exemple, corps de petites boucles susceptibles de tirer de la plage de partition.</span><span class="sxs-lookup"><span data-stu-id="61b7b-514">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="61b7b-515">Le <xref:System.Threading.Tasks.Parallel.ForEach%2A> méthode attend les partitionneurs personnalisés pour prendre en charge le partitionnement dynamique.</span><span class="sxs-lookup"><span data-stu-id="61b7b-515">The <xref:System.Threading.Tasks.Parallel.ForEach%2A> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="61b7b-516">Pour plus d’informations, consultez [Partitionneurs personnalisés pour PLINQ et la bibliothèque parallèle de tâches](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) et [Comment : implémenter des Partitions dynamiques](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span><span class="sxs-lookup"><span data-stu-id="61b7b-516">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
 <span data-ttu-id="61b7b-517">Le `localInit` délégué est appelé une fois pour chaque tâche qui participe à l’exécution de la boucle et retourne l’état local initial pour chacun de ces tâches.</span><span class="sxs-lookup"><span data-stu-id="61b7b-517">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="61b7b-518">Ces états initiaux sont passés à la première `body` appels sur chaque tâche.</span><span class="sxs-lookup"><span data-stu-id="61b7b-518">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="61b7b-519">Ensuite, chaque appel de corps suivant retourne une valeur d’état éventuellement modifiée qui est passée à l’appel de corps suivant.</span><span class="sxs-lookup"><span data-stu-id="61b7b-519">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="61b7b-520">Enfin, le dernier appel du corps sur chaque tâche retourne une valeur d’état est passée à la `localFinally` déléguer.</span><span class="sxs-lookup"><span data-stu-id="61b7b-520">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="61b7b-521">Le `localFinally` délégué est appelé une fois par la tâche à effectuer une dernière action sur l’état local de chaque tâche.</span><span class="sxs-lookup"><span data-stu-id="61b7b-521">The `localFinally` delegate is invoked once per task to perform a final action on each task's local state.</span></span> <span data-ttu-id="61b7b-522">Ce délégué peut être appelé simultanément sur plusieurs tâches ; Par conséquent, vous devez synchroniser l’accès à toutes les variables partagées.</span><span class="sxs-lookup"><span data-stu-id="61b7b-522">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="61b7b-523">Le <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> méthode peuvent utiliser davantage de tâches que les threads sur la durée de vie de son exécution, en tant que tâches existantes terminées et sont remplacées par nouvelles tâches.</span><span class="sxs-lookup"><span data-stu-id="61b7b-523">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="61b7b-524">Cela donne sous-jacent <xref:System.Threading.Tasks.TaskScheduler> objet la possibilité d’ajouter, modifier ou supprimer des threads qui gèrent la boucle.</span><span class="sxs-lookup"><span data-stu-id="61b7b-524">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="61b7b-525">L'argument <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-525">The <paramref name="source" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="61b7b-526">- ou - L’argument <paramref name="body" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-526">-or-  The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="61b7b-527">- ou - L’argument <paramref name="localInit" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-527">-or-  The <paramref name="localInit" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="61b7b-528">- ou - L’argument <paramref name="localFinally" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-528">-or-  The <paramref name="localFinally" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="61b7b-529">La propriété <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> dans <paramref name="source" /><see cref="T:System.Collections.Concurrent.Partitioner" /> retourne <see langword="false" /> ou le partitionneur retourne des partitions <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-529">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /><see cref="T:System.Collections.Concurrent.Partitioner" /> returns <see langword="false" /> or the partitioner returns <see langword="null" /> partitions.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="61b7b-530">Exception qui contient toutes les exceptions individuelles levées sur tous les threads.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-530">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Concurrent.Partitioner&lt;TSource&gt; source, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Concurrent.Partitioner`1&lt;!!TSource&gt; source, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource, TLocal) (source As Partitioner(Of TSource), localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::Partitioner&lt;TSource&gt; ^ source, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.Partitioner&lt;'Source&gt; * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.Partitioner&lt;TSource&gt;" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="61b7b-531">Le type des éléments de <c>source</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-531">The type of the elements in <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TLocal">
          <span data-ttu-id="61b7b-532">Type des données locales de thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-532">The type of the thread-local data.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="61b7b-533">Partitionneur qui contient la source de données d'origine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-533">The partitioner that contains the original data source.</span>
          </span>
        </param>
        <param name="localInit">
          <span data-ttu-id="61b7b-534">Délégué de fonction qui retourne l’état initial des données locales pour chaque tâche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-534">The function delegate that returns the initial state of the local data for each task.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="61b7b-535">Délégué appelé une fois par itération.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-535">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <param name="localFinally">
          <span data-ttu-id="61b7b-536">Délégué qui exécute une dernière action sur l’état local de chaque tâche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-536">The delegate that performs a final action on the local state of each task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61b7b-537">Exécute une opération <see langword="foreach" /> (<see langword="For Each" /> en Visual Basic) avec des données locales de thread sur <see cref="T:System.Collections.Concurrent.Partitioner" /> dans laquelle les itérations peuvent s'exécuter en parallèle et l'état de la boucle peut être surveillé et manipulé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-537">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with thread-local data on a <see cref="T:System.Collections.Concurrent.Partitioner" /> in which iterations may run in parallel and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61b7b-538">Structure qui contient des informations sur la partie de la boucle terminée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-538">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61b7b-539">Cette surcharge est fournie pour les scénarios où vous souhaitez remplacer la valeur par défaut de schéma de partitionnement.</span><span class="sxs-lookup"><span data-stu-id="61b7b-539">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="61b7b-540">Par exemple, corps de petites boucles susceptibles de tirer de la plage de partition.</span><span class="sxs-lookup"><span data-stu-id="61b7b-540">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="61b7b-541">Le <xref:System.Threading.Tasks.Parallel.ForEach%2A> méthode attend les partitionneurs personnalisés pour prendre en charge le partitionnement dynamique.</span><span class="sxs-lookup"><span data-stu-id="61b7b-541">The <xref:System.Threading.Tasks.Parallel.ForEach%2A> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="61b7b-542">Pour plus d’informations, consultez [Partitionneurs personnalisés pour PLINQ et la bibliothèque parallèle de tâches](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) et [Comment : implémenter des Partitions dynamiques](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span><span class="sxs-lookup"><span data-stu-id="61b7b-542">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
 <span data-ttu-id="61b7b-543">Le `localInit` délégué est appelé une fois pour chaque thread qui participe à l’exécution de la boucle et retourne l’état local initial pour chacun de ces tâches.</span><span class="sxs-lookup"><span data-stu-id="61b7b-543">The `localInit` delegate is invoked once for each thread that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="61b7b-544">Ces états initiaux sont passés à la première `body` appels sur chaque tâche.</span><span class="sxs-lookup"><span data-stu-id="61b7b-544">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="61b7b-545">Ensuite, chaque appel de corps suivant retourne une valeur d’état éventuellement modifiée qui est passée à l’appel de corps suivant.</span><span class="sxs-lookup"><span data-stu-id="61b7b-545">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="61b7b-546">Enfin, le dernier appel du corps sur chaque tâche retourne une valeur d’état est passée à la `localFinally` déléguer.</span><span class="sxs-lookup"><span data-stu-id="61b7b-546">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="61b7b-547">Le `localFinally` délégué est appelé une fois par la tâche à effectuer une dernière action sur l’état local de chaque tâche.</span><span class="sxs-lookup"><span data-stu-id="61b7b-547">The `localFinally` delegate is invoked once per task to perform a final action on each task's local state.</span></span> <span data-ttu-id="61b7b-548">Ce délégué peut être appelé simultanément sur plusieurs tâches ; Par conséquent, vous devez synchroniser l’accès à toutes les variables partagées.</span><span class="sxs-lookup"><span data-stu-id="61b7b-548">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="61b7b-549">Le <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> méthode peuvent utiliser davantage de tâches que les threads sur la durée de vie de son exécution, en tant que tâches existantes terminées et sont remplacées par nouvelles tâches.</span><span class="sxs-lookup"><span data-stu-id="61b7b-549">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="61b7b-550">Cela donne sous-jacent <xref:System.Threading.Tasks.TaskScheduler> objet la possibilité d’ajouter, modifier ou supprimer des threads qui gèrent la boucle.</span><span class="sxs-lookup"><span data-stu-id="61b7b-550">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="61b7b-551">L'argument <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-551">The <paramref name="source" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="61b7b-552">- ou - L’argument <paramref name="body" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-552">-or-  The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="61b7b-553">- ou - L’argument <paramref name="localInit" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-553">-or-  The <paramref name="localInit" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="61b7b-554">- ou - L’argument <paramref name="localFinally" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-554">-or-  The <paramref name="localFinally" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="61b7b-555">La propriété <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> dans <paramref name="source" /><see cref="T:System.Collections.Concurrent.Partitioner" /> retourne <see langword="false" /> ou le partitionneur retourne des partitions <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-555">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /><see cref="T:System.Collections.Concurrent.Partitioner" /> returns <see langword="false" /> or the partitioner returns <see langword="null" /> partitions.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="61b7b-556">Exception qui contient toutes les exceptions individuelles levées sur tous les threads.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-556">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,long,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`5&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource, TLocal) (source As IEnumerable(Of TSource), localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, Long, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="61b7b-557">Type des données contenues dans la source.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-557">The type of the data in the source.</span>
          </span>
        </typeparam>
        <typeparam name="TLocal">
          <span data-ttu-id="61b7b-558">Type des données locales de thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-558">The type of the thread-local data.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="61b7b-559">Source de données énumérable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-559">An enumerable data source.</span>
          </span>
        </param>
        <param name="localInit">
          <span data-ttu-id="61b7b-560">Délégué de fonction qui retourne l’état initial des données locales pour chaque tâche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-560">The function delegate that returns the initial state of the local data for each task.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="61b7b-561">Délégué appelé une fois par itération.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-561">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <param name="localFinally">
          <span data-ttu-id="61b7b-562">Délégué qui exécute une dernière action sur l’état local de chaque tâche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-562">The delegate that performs a final action on the local state of each task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61b7b-563">Exécute une opération <see langword="foreach" /> (<see langword="For Each" /> en Visual Basic) avec des données locales de thread sur <see cref="T:System.Collections.IEnumerable" /> dans laquelle les itérations peuvent s'exécuter en parallèle et l'état de la boucle peut être surveillé et manipulé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-563">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with thread-local data on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61b7b-564">Structure qui contient des informations sur la partie de la boucle terminée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-564">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61b7b-565">Le `body` délégué est appelé une fois pour chaque élément dans le `source` énumérable.</span><span class="sxs-lookup"><span data-stu-id="61b7b-565">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="61b7b-566">Il est fourni avec les paramètres suivants : l’élément actuel, un <xref:System.Threading.Tasks.ParallelLoopState> instance qui peut être utilisé pour quitter la boucle prématurément, les index de l’élément actuel (<xref:System.Int64>) et un état local qui peut être partagé parmi les itérations qui s’exécutent sur le même thread.</span><span class="sxs-lookup"><span data-stu-id="61b7b-566">It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, the current element's index (<xref:System.Int64>), and some local state that may be shared amongst iterations that execute on the same thread.</span></span>  
  
 <span data-ttu-id="61b7b-567">Le `localInit` délégué est appelé une fois pour chaque tâche qui participe à l’exécution de la boucle et retourne l’état local initial pour chacun de ces tâches.</span><span class="sxs-lookup"><span data-stu-id="61b7b-567">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="61b7b-568">Ces états initiaux sont passés à la première `body` appels sur chaque tâche.</span><span class="sxs-lookup"><span data-stu-id="61b7b-568">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="61b7b-569">Ensuite, chaque appel de corps suivant retourne une valeur d’état éventuellement modifiée qui est passée à l’appel de corps suivant.</span><span class="sxs-lookup"><span data-stu-id="61b7b-569">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="61b7b-570">Enfin, le dernier appel du corps sur chaque tâche retourne une valeur d’état est passée à la `localFinally` déléguer.</span><span class="sxs-lookup"><span data-stu-id="61b7b-570">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="61b7b-571">Le `localFinally` délégué est appelé une fois par la tâche à effectuer une dernière action sur l’état local de chaque tâche.</span><span class="sxs-lookup"><span data-stu-id="61b7b-571">The `localFinally` delegate is invoked once per task to perform a final action on each task’s local state.</span></span> <span data-ttu-id="61b7b-572">Ce délégué peut être appelé simultanément sur plusieurs tâches ; Par conséquent, vous devez synchroniser l’accès à toutes les variables partagées.</span><span class="sxs-lookup"><span data-stu-id="61b7b-572">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="61b7b-573">Le <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> méthode peuvent utiliser davantage de tâches que les threads sur la durée de vie de son exécution, en tant que tâches existantes terminées et sont remplacées par nouvelles tâches.</span><span class="sxs-lookup"><span data-stu-id="61b7b-573">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="61b7b-574">Cela donne sous-jacent <xref:System.Threading.Tasks.TaskScheduler> objet la possibilité d’ajouter, modifier ou supprimer des threads qui gèrent la boucle.</span><span class="sxs-lookup"><span data-stu-id="61b7b-574">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="61b7b-575">L'argument <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-575">The <paramref name="source" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="61b7b-576">- ou - L’argument <paramref name="body" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-576">-or-  The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="61b7b-577">- ou - L’argument <paramref name="localInit" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-577">-or-  The <paramref name="localInit" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="61b7b-578">- ou - L’argument <paramref name="localFinally" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-578">-or-  The <paramref name="localFinally" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="61b7b-579">Exception qui contient toutes les exceptions individuelles levées sur tous les threads.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-579">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource, TLocal) (source As IEnumerable(Of TSource), localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="61b7b-580">Type des données contenues dans la source.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-580">The type of the data in the source.</span>
          </span>
        </typeparam>
        <typeparam name="TLocal">
          <span data-ttu-id="61b7b-581">Type des données locales de thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-581">The type of the thread-local data.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="61b7b-582">Source de données énumérable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-582">An enumerable data source.</span>
          </span>
        </param>
        <param name="localInit">
          <span data-ttu-id="61b7b-583">Délégué de fonction qui retourne l’état initial des données locales pour chaque tâche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-583">The function delegate that returns the initial state of the local data for each task.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="61b7b-584">Délégué appelé une fois par itération.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-584">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <param name="localFinally">
          <span data-ttu-id="61b7b-585">Délégué qui exécute une dernière action sur l’état local de chaque tâche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-585">The delegate that performs a final action on the local state of each task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61b7b-586">Exécute une opération <see langword="foreach" /> (<see langword="For Each" /> en Visual Basic) avec des données locales de thread sur <see cref="T:System.Collections.IEnumerable" /> dans laquelle les itérations peuvent s'exécuter en parallèle et l'état de la boucle peut être surveillé et manipulé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-586">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with thread-local data on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61b7b-587">Structure qui contient des informations sur la partie de la boucle terminée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-587">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61b7b-588">Le `body` délégué est appelé une fois pour chaque élément dans le `source` énumérable.</span><span class="sxs-lookup"><span data-stu-id="61b7b-588">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="61b7b-589">Il est fourni avec les paramètres suivants : l’élément actuel, un <xref:System.Threading.Tasks.ParallelLoopState> instance qui peut être utilisé pour quitter la boucle prématurément et un état local qui peut être partagé parmi les itérations qui s’exécutent sur le même thread.</span><span class="sxs-lookup"><span data-stu-id="61b7b-589">It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same thread.</span></span>  
  
 <span data-ttu-id="61b7b-590">Le `localInit` délégué est appelé une fois pour chaque tâche qui participe à l’exécution de la boucle et retourne l’état local initial pour chacun de ces tâches.</span><span class="sxs-lookup"><span data-stu-id="61b7b-590">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="61b7b-591">Ces états initiaux sont passés à la première `body` appels sur chaque tâche.</span><span class="sxs-lookup"><span data-stu-id="61b7b-591">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="61b7b-592">Ensuite, chaque appel de corps suivant retourne une valeur d’état éventuellement modifiée qui est passée à l’appel de corps suivant.</span><span class="sxs-lookup"><span data-stu-id="61b7b-592">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="61b7b-593">Enfin, le dernier appel du corps sur chaque tâche retourne une valeur d’état est passée à la `localFinally` déléguer.</span><span class="sxs-lookup"><span data-stu-id="61b7b-593">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="61b7b-594">Le `localFinally` délégué est appelé une fois par thread pour exécuter une dernière action sur l’état local de chaque tâche.</span><span class="sxs-lookup"><span data-stu-id="61b7b-594">The `localFinally` delegate is invoked once per thread to perform a final action on each task’s local state.</span></span> <span data-ttu-id="61b7b-595">Ce délégué peut être appelé simultanément sur plusieurs tâches ; Par conséquent, vous devez synchroniser l’accès à toutes les variables partagées.</span><span class="sxs-lookup"><span data-stu-id="61b7b-595">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="61b7b-596">Le <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> méthode peuvent utiliser davantage de tâches que les threads sur la durée de vie de son exécution, en tant que tâches existantes terminées et sont remplacées par nouvelles tâches.</span><span class="sxs-lookup"><span data-stu-id="61b7b-596">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="61b7b-597">Cela donne sous-jacent <xref:System.Threading.Tasks.TaskScheduler> objet la possibilité d’ajouter, modifier ou supprimer des threads qui gèrent la boucle.</span><span class="sxs-lookup"><span data-stu-id="61b7b-597">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61b7b-598">L’exemple suivant montre comment utiliser un <xref:System.Threading.Tasks.Parallel.ForEach%2A> méthode avec l’état local :</span><span class="sxs-lookup"><span data-stu-id="61b7b-598">The following example shows how to use a <xref:System.Threading.Tasks.Parallel.ForEach%2A> method with local state:</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel#02](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/parallelforeach.cs#02)]
 [!code-vb[System.Threading.Tasks.Parallel#02](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/parallelforeach.vb#02)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="61b7b-599">L'argument <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-599">The <paramref name="source" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="61b7b-600">- ou - L’argument <paramref name="body" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-600">-or-  The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="61b7b-601">- ou - L’argument <paramref name="localInit" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-601">-or-  The <paramref name="localInit" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="61b7b-602">- ou - L’argument <paramref name="localFinally" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-602">-or-  The <paramref name="localFinally" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="61b7b-603">Exception qui contient toutes les exceptions individuelles levées sur tous les threads.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-603">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,long,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Concurrent.OrderablePartitioner`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`5&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::OrderablePartitioner&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.OrderablePartitioner&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="61b7b-604">Le type des éléments de <c>source</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-604">The type of the elements in <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TLocal">
          <span data-ttu-id="61b7b-605">Type des données locales de thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-605">The type of the thread-local data.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="61b7b-606">Partitionneur classable qui contient la source de données d'origine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-606">The orderable partitioner that contains the original data source.</span>
          </span>
        </param>
        <param name="parallelOptions">
          <span data-ttu-id="61b7b-607">Objet qui configure le comportement de cette opération.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-607">An object that configures the behavior of this operation.</span>
          </span>
        </param>
        <param name="localInit">
          <span data-ttu-id="61b7b-608">Délégué de fonction qui retourne l’état initial des données locales pour chaque tâche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-608">The function delegate that returns the initial state of the local data for each task.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="61b7b-609">Délégué appelé une fois par itération.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-609">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <param name="localFinally">
          <span data-ttu-id="61b7b-610">Délégué qui exécute une dernière action sur l’état local de chaque tâche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-610">The delegate that performs a final action on the local state of each task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61b7b-611">Exécute une opération <see langword="foreach" /> (<see langword="For Each" /> en Visual Basic) avec des index 64 bits et des données locales de thread sur <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> dans laquelle les itérations peuvent s'exécuter en parallèle, les options de la boucle peuvent être configurées et l'état de la boucle peut être surveillé et manipulé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-611">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with 64-bit indexes and  with thread-local data on a <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> in which iterations may run in parallel , loop options can be configured, and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61b7b-612">Structure qui contient des informations sur la partie de la boucle terminée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-612">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61b7b-613">Cette surcharge est fournie pour les scénarios où vous souhaitez remplacer la valeur par défaut de schéma de partitionnement.</span><span class="sxs-lookup"><span data-stu-id="61b7b-613">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="61b7b-614">Par exemple, corps de petites boucles susceptibles de tirer de la plage de partition.</span><span class="sxs-lookup"><span data-stu-id="61b7b-614">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="61b7b-615">Le <xref:System.Threading.Tasks.Parallel.ForEach%2A> méthode attend les partitionneurs personnalisés pour prendre en charge le partitionnement dynamique.</span><span class="sxs-lookup"><span data-stu-id="61b7b-615">The <xref:System.Threading.Tasks.Parallel.ForEach%2A> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="61b7b-616">Pour plus d’informations, consultez [Partitionneurs personnalisés pour PLINQ et la bibliothèque parallèle de tâches](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) et [Comment : implémenter des Partitions dynamiques](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span><span class="sxs-lookup"><span data-stu-id="61b7b-616">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
 <span data-ttu-id="61b7b-617">Le `localInit` délégué est appelé une fois pour chaque tâche qui participe à l’exécution de la boucle et retourne l’état local initial pour chacun de ces tâches.</span><span class="sxs-lookup"><span data-stu-id="61b7b-617">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="61b7b-618">Ces états initiaux sont passés à la première `body` appels sur chaque tâche.</span><span class="sxs-lookup"><span data-stu-id="61b7b-618">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="61b7b-619">Ensuite, chaque appel de corps suivant retourne une valeur d’état éventuellement modifiée qui est passée à l’appel de corps suivant.</span><span class="sxs-lookup"><span data-stu-id="61b7b-619">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="61b7b-620">Enfin, le dernier appel du corps sur chaque thread renvoie une valeur d’état est passée à la `localFinally` déléguer.</span><span class="sxs-lookup"><span data-stu-id="61b7b-620">Finally, the last body invocation on each thread returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="61b7b-621">Le `localFinally` délégué est appelé une fois par la tâche à effectuer une dernière action sur l’état local de chaque tâche.</span><span class="sxs-lookup"><span data-stu-id="61b7b-621">The `localFinally` delegate is invoked once per task to perform a final action on each task’s local state.</span></span> <span data-ttu-id="61b7b-622">Ce délégué peut être appelé simultanément sur plusieurs tâches ; Par conséquent, vous devez synchroniser l’accès à toutes les variables partagées.</span><span class="sxs-lookup"><span data-stu-id="61b7b-622">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="61b7b-623">Le <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> méthode peuvent utiliser davantage de tâches que les threads sur la durée de vie de son exécution, en tant que tâches existantes terminées et sont remplacées par nouvelles tâches.</span><span class="sxs-lookup"><span data-stu-id="61b7b-623">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="61b7b-624">Cela donne sous-jacent <xref:System.Threading.Tasks.TaskScheduler> objet la possibilité d’ajouter, modifier ou supprimer des threads qui gèrent la boucle.</span><span class="sxs-lookup"><span data-stu-id="61b7b-624">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="61b7b-625">L'argument <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-625">The <paramref name="source" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="61b7b-626">- ou - L’argument <paramref name="parallelOptions" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-626">-or-  The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="61b7b-627">- ou - L’argument <paramref name="body" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-627">-or-  The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="61b7b-628">- ou - L’argument <paramref name="localInit" /> ou <paramref name="localFinally" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-628">-or-  The <paramref name="localInit" /> or <paramref name="localFinally" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="61b7b-629">La propriété <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> dans <paramref name="source" /><see cref="T:System.Collections.Concurrent.Partitioner" /> retourne <see langword="false" /> ou le partitionneur retourne des partitions <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-629">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /><see cref="T:System.Collections.Concurrent.Partitioner" /> returns <see langword="false" /> or the partitioner returns <see langword="null" /> partitions.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="61b7b-630">Exception qui contient toutes les exceptions individuelles levées sur tous les threads.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-630">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="61b7b-631">
            <see cref="T:System.Threading.CancellationToken" /> dans l'argument <paramref name="parallelOptions" /> est annulé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-631">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="61b7b-632">Objet <see cref="T:System.Threading.CancellationTokenSource" /> associé à <see cref="T:System.Threading.CancellationToken" /> dans l'objet <paramref name="parallelOptions" /> a été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-632">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Concurrent.Partitioner&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Concurrent.Partitioner`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::Partitioner&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.Partitioner&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.Partitioner&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="61b7b-633">Le type des éléments de <c>source</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-633">The type of the elements in <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TLocal">
          <span data-ttu-id="61b7b-634">Type des données locales de thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-634">The type of the thread-local data.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="61b7b-635">Partitionneur qui contient la source de données d'origine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-635">The partitioner that contains the original data source.</span>
          </span>
        </param>
        <param name="parallelOptions">
          <span data-ttu-id="61b7b-636">Objet qui configure le comportement de cette opération.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-636">An object that configures the behavior of this operation.</span>
          </span>
        </param>
        <param name="localInit">
          <span data-ttu-id="61b7b-637">Délégué de fonction qui retourne l’état initial des données locales pour chaque tâche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-637">The function delegate that returns the initial state of the local data for each task.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="61b7b-638">Délégué appelé une fois par itération.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-638">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <param name="localFinally">
          <span data-ttu-id="61b7b-639">Délégué qui exécute une dernière action sur l’état local de chaque tâche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-639">The delegate that performs a final action on the local state of each task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61b7b-640">Exécute une opération <see langword="foreach" /> (<see langword="For Each" /> en Visual Basic) avec des données locales de thread sur <see cref="T:System.Collections.Concurrent.Partitioner" /> dans laquelle les itérations peuvent s'exécuter en parallèle, les options de la boucle peuvent être configurées et l'état de la boucle peut être surveillé et manipulé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-640">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation  with thread-local data on a <see cref="T:System.Collections.Concurrent.Partitioner" /> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61b7b-641">Structure qui contient des informations sur la partie de la boucle terminée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-641">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61b7b-642">Cette surcharge est fournie pour les scénarios où vous souhaitez remplacer la valeur par défaut de schéma de partitionnement.</span><span class="sxs-lookup"><span data-stu-id="61b7b-642">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="61b7b-643">Par exemple, corps de petites boucles susceptibles de tirer de la plage de partition.</span><span class="sxs-lookup"><span data-stu-id="61b7b-643">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="61b7b-644">Le <xref:System.Threading.Tasks.Parallel.ForEach%2A> méthode attend les partitionneurs personnalisés pour prendre en charge le partitionnement dynamique.</span><span class="sxs-lookup"><span data-stu-id="61b7b-644">The <xref:System.Threading.Tasks.Parallel.ForEach%2A> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="61b7b-645">Cette surcharge est fournie pour les scénarios avec des corps de petites boucles susceptibles de tirer parti de partitionnement par plage statique.</span><span class="sxs-lookup"><span data-stu-id="61b7b-645">This overload is provided for scenarios with small loop bodies that might benefit from static range partitioning.</span></span> <span data-ttu-id="61b7b-646">Partitionneurs doivent prendre en charge des partitions dynamiques.</span><span class="sxs-lookup"><span data-stu-id="61b7b-646">Partitioners must support dynamic partitions.</span></span>  <span data-ttu-id="61b7b-647">Pour plus d’informations, consultez [Partitionneurs personnalisés pour PLINQ et la bibliothèque parallèle de tâches](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) et [Comment : implémenter des Partitions dynamiques](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span><span class="sxs-lookup"><span data-stu-id="61b7b-647">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
 <span data-ttu-id="61b7b-648">Le `localInit` délégué est appelé une fois pour chaque tâche qui participe à l’exécution de la boucle et retourne l’état local initial pour chacun de ces tâches.</span><span class="sxs-lookup"><span data-stu-id="61b7b-648">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="61b7b-649">Ces états initiaux sont passés à la première `body` appels sur chaque tâche.</span><span class="sxs-lookup"><span data-stu-id="61b7b-649">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="61b7b-650">Ensuite, chaque appel de corps suivant retourne une valeur d’état éventuellement modifiée qui est passée à l’appel de corps suivant.</span><span class="sxs-lookup"><span data-stu-id="61b7b-650">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="61b7b-651">Enfin, le dernier appel du corps sur chaque tâche retourne une valeur d’état est passée à la `localFinally` déléguer.</span><span class="sxs-lookup"><span data-stu-id="61b7b-651">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="61b7b-652">Le `localFinally` délégué est appelé une fois par la tâche à effectuer une dernière action sur l’état local de chaque tâche.</span><span class="sxs-lookup"><span data-stu-id="61b7b-652">The `localFinally` delegate is invoked once per task to perform a final action on each task's local state.</span></span> <span data-ttu-id="61b7b-653">Ce délégué peut être appelé simultanément sur plusieurs tâches ; Par conséquent, vous devez synchroniser l’accès à toutes les variables partagées.</span><span class="sxs-lookup"><span data-stu-id="61b7b-653">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="61b7b-654">Le <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> méthode peuvent utiliser davantage de tâches que les threads sur la durée de vie de son exécution, en tant que tâches existantes terminées et sont remplacées par nouvelles tâches.</span><span class="sxs-lookup"><span data-stu-id="61b7b-654">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="61b7b-655">Cela donne sous-jacent <xref:System.Threading.Tasks.TaskScheduler> objet la possibilité d’ajouter, modifier ou supprimer des threads qui gèrent la boucle.</span><span class="sxs-lookup"><span data-stu-id="61b7b-655">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="61b7b-656">L'argument <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-656">The <paramref name="source" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="61b7b-657">- ou - L’argument <paramref name="parallelOptions" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-657">-or-  The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="61b7b-658">- ou - L’argument <paramref name="body" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-658">-or-  The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="61b7b-659">- ou - L’argument <paramref name="localInit" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-659">-or-  The <paramref name="localInit" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="61b7b-660">- ou - L’argument <paramref name="localFinally" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-660">-or-  The <paramref name="localFinally" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="61b7b-661">La propriété <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> dans <paramref name="source" /><see cref="T:System.Collections.Concurrent.Partitioner" /> retourne <see langword="false" /> ou le partitionneur retourne des partitions <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-661">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /><see cref="T:System.Collections.Concurrent.Partitioner" /> returns <see langword="false" /> or the partitioner returns <see langword="null" /> partitions.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="61b7b-662">Exception qui contient toutes les exceptions individuelles levées sur tous les threads.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-662">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="61b7b-663">
            <see cref="T:System.Threading.CancellationToken" /> dans l'argument <paramref name="parallelOptions" /> est annulé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-663">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="61b7b-664">Objet <see cref="T:System.Threading.CancellationTokenSource" /> associé à <see cref="T:System.Threading.CancellationToken" /> dans l'objet <paramref name="parallelOptions" /> a été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-664">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,long,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`5&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="61b7b-665">Type des données contenues dans la source.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-665">The type of the data in the source.</span>
          </span>
        </typeparam>
        <typeparam name="TLocal">
          <span data-ttu-id="61b7b-666">Type des données locales de thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-666">The type of the thread-local data.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="61b7b-667">Source de données énumérable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-667">An enumerable data source.</span>
          </span>
        </param>
        <param name="parallelOptions">
          <span data-ttu-id="61b7b-668">Objet qui configure le comportement de cette opération.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-668">An object that configures the behavior of this operation.</span>
          </span>
        </param>
        <param name="localInit">
          <span data-ttu-id="61b7b-669">Délégué de fonction qui retourne l’état initial des données locales pour chaque tâche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-669">The function delegate that returns the initial state of the local data for each task.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="61b7b-670">Délégué appelé une fois par itération.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-670">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <param name="localFinally">
          <span data-ttu-id="61b7b-671">Délégué qui exécute une dernière action sur l’état local de chaque tâche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-671">The delegate that performs a final action on the local state of each task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61b7b-672">Exécute une opération <see langword="foreach" /> (<see langword="For Each" /> en Visual Basic) avec des données locales de thread et des index 64 bits sur <see cref="T:System.Collections.IEnumerable" /> dans laquelle les itérations peuvent s'exécuter en parallèle, les options de la boucle peuvent être configurées et l'état de la boucle peut être surveillé et manipulé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-672">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with thread-local data and 64-bit indexes on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61b7b-673">Structure qui contient des informations sur la partie de la boucle terminée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-673">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61b7b-674">Le `body` délégué est appelé une fois pour chaque élément dans le `source` énumérable.</span><span class="sxs-lookup"><span data-stu-id="61b7b-674">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="61b7b-675">Il est fourni avec les paramètres suivants : l’élément actuel, un <xref:System.Threading.Tasks.ParallelLoopState> instance qui peut être utilisé pour quitter la boucle prématurément, les index de l’élément actuel (<xref:System.Int64>) et un état local qui peut être partagé parmi les itérations qui s’exécutent sur le même thread.</span><span class="sxs-lookup"><span data-stu-id="61b7b-675">It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, the current element's index (<xref:System.Int64>), and some local state that may be shared amongst iterations that execute on the same thread.</span></span>  
  
 <span data-ttu-id="61b7b-676">Le `localInit` délégué est appelé une fois pour chaque tâche qui participe à l’exécution de la boucle et retourne l’état local initial pour chacun de ces tâches.</span><span class="sxs-lookup"><span data-stu-id="61b7b-676">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="61b7b-677">Ces états initiaux sont passés à la première `body` appels sur chaque tâche.</span><span class="sxs-lookup"><span data-stu-id="61b7b-677">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="61b7b-678">Ensuite, chaque appel de corps suivant retourne une valeur d’état éventuellement modifiée qui est passée à l’appel de corps suivant.</span><span class="sxs-lookup"><span data-stu-id="61b7b-678">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="61b7b-679">Enfin, le dernier appel du corps sur chaque tâche retourne une valeur d’état est passée à la `localFinally` déléguer.</span><span class="sxs-lookup"><span data-stu-id="61b7b-679">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="61b7b-680">Le `localFinally` délégué est appelé une fois par thread pour exécuter une dernière action sur l’état local de chaque tâche.</span><span class="sxs-lookup"><span data-stu-id="61b7b-680">The `localFinally` delegate is invoked once per thread to perform a final action on each task’s local state.</span></span> <span data-ttu-id="61b7b-681">Ce délégué peut être appelé simultanément sur plusieurs tâches ; Par conséquent, vous devez synchroniser l’accès à toutes les variables partagées.</span><span class="sxs-lookup"><span data-stu-id="61b7b-681">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="61b7b-682">Le <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> méthode peuvent utiliser davantage de tâches que les threads sur la durée de vie de son exécution, en tant que tâches existantes terminées et sont remplacées par nouvelles tâches.</span><span class="sxs-lookup"><span data-stu-id="61b7b-682">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="61b7b-683">Cela donne sous-jacent <xref:System.Threading.Tasks.TaskScheduler> objet la possibilité d’ajouter, modifier ou supprimer des threads qui gèrent la boucle.</span><span class="sxs-lookup"><span data-stu-id="61b7b-683">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="61b7b-684">L'argument <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-684">The <paramref name="source" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="61b7b-685">- ou - L’argument <paramref name="parallelOptions" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-685">-or-  The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="61b7b-686">- ou - L’argument <paramref name="body" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-686">-or-  The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="61b7b-687">- ou - L’argument <paramref name="localInit" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-687">-or-  The <paramref name="localInit" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="61b7b-688">- ou - L’argument <paramref name="localFinally" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-688">-or-  The <paramref name="localFinally" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="61b7b-689">
            <see cref="T:System.Threading.CancellationToken" /> dans l'argument <paramref name="parallelOptions" /> est annulé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-689">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="61b7b-690">Objet <see cref="T:System.Threading.CancellationTokenSource" /> associé à <see cref="T:System.Threading.CancellationToken" /> dans l'objet <paramref name="parallelOptions" /> a été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-690">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="61b7b-691">Exception qui contient toutes les exceptions individuelles levées sur tous les threads.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-691">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="61b7b-692">Type des données contenues dans la source.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-692">The type of the data in the source.</span>
          </span>
        </typeparam>
        <typeparam name="TLocal">
          <span data-ttu-id="61b7b-693">Type des données locales de thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-693">The type of the thread-local data.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="61b7b-694">Source de données énumérable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-694">An enumerable data source.</span>
          </span>
        </param>
        <param name="parallelOptions">
          <span data-ttu-id="61b7b-695">Objet qui configure le comportement de cette opération.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-695">An object that configures the behavior of this operation.</span>
          </span>
        </param>
        <param name="localInit">
          <span data-ttu-id="61b7b-696">Délégué de fonction qui retourne l’état initial des données locales pour chaque tâche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-696">The function delegate that returns the initial state of the local data for each task.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="61b7b-697">Délégué appelé une fois par itération.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-697">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <param name="localFinally">
          <span data-ttu-id="61b7b-698">Délégué qui exécute une dernière action sur l’état local de chaque tâche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-698">The delegate that performs a final action on the local state of each task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61b7b-699">Exécute une opération <see langword="foreach" /> (<see langword="For Each" /> en Visual Basic) avec des données locales de thread sur <see cref="T:System.Collections.IEnumerable" /> dans laquelle les itérations peuvent s'exécuter en parallèle, les options de la boucle peuvent être configurées et l'état de la boucle peut être surveillé et manipulé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-699">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with thread-local data on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated..</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61b7b-700">Structure qui contient des informations sur la partie de la boucle terminée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-700">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61b7b-701">Le `body` délégué est appelé une fois pour chaque élément dans le `source` énumérable.</span><span class="sxs-lookup"><span data-stu-id="61b7b-701">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="61b7b-702">Il est fourni avec les paramètres suivants : l’élément actuel, un <xref:System.Threading.Tasks.ParallelLoopState> instance qui peut être utilisé pour quitter la boucle prématurément et un état local qui peut être partagé parmi les itérations qui s’exécutent sur le même thread.</span><span class="sxs-lookup"><span data-stu-id="61b7b-702">It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same thread.</span></span>  
  
 <span data-ttu-id="61b7b-703">Le `localInit` délégué est appelé une fois pour chaque tâche qui participe à l’exécution de la boucle et retourne l’état local initial pour chacun de ces tâches.</span><span class="sxs-lookup"><span data-stu-id="61b7b-703">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="61b7b-704">Ces états initiaux sont passés à la première `body` appels sur chaque tâche.</span><span class="sxs-lookup"><span data-stu-id="61b7b-704">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="61b7b-705">Ensuite, chaque appel de corps suivant retourne une valeur d’état éventuellement modifiée qui est passée à l’appel de corps suivant.</span><span class="sxs-lookup"><span data-stu-id="61b7b-705">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="61b7b-706">Enfin, le dernier appel du corps sur chaque tâche retourne une valeur d’état est passée à la `localFinally` déléguer.</span><span class="sxs-lookup"><span data-stu-id="61b7b-706">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="61b7b-707">Le `localFinally` délégué est appelé une fois par thread pour exécuter une dernière action sur l’état local de chaque tâche.</span><span class="sxs-lookup"><span data-stu-id="61b7b-707">The `localFinally` delegate is invoked once per thread to perform a final action on each task’s local state.</span></span> <span data-ttu-id="61b7b-708">Ce délégué peut être appelé simultanément sur plusieurs tâches ; Par conséquent, vous devez synchroniser l’accès à toutes les variables partagées.</span><span class="sxs-lookup"><span data-stu-id="61b7b-708">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="61b7b-709">Le <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> méthode peuvent utiliser davantage de tâches que les threads sur la durée de vie de son exécution, en tant que tâches existantes terminées et sont remplacées par nouvelles tâches.</span><span class="sxs-lookup"><span data-stu-id="61b7b-709">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="61b7b-710">Cela donne sous-jacent <xref:System.Threading.Tasks.TaskScheduler> objet la possibilité d’ajouter, modifier ou supprimer des threads qui gèrent la boucle.</span><span class="sxs-lookup"><span data-stu-id="61b7b-710">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="61b7b-711">L'argument <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-711">The <paramref name="source" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="61b7b-712">- ou - L’argument <paramref name="parallelOptions" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-712">-or-  The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="61b7b-713">- ou - L’argument <paramref name="body" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-713">-or-  The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="61b7b-714">- ou - L’argument <paramref name="localInit" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-714">-or-  The <paramref name="localInit" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="61b7b-715">- ou - L’argument <paramref name="localFinally" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-715">-or-  The <paramref name="localFinally" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="61b7b-716">
            <see cref="T:System.Threading.CancellationToken" /> dans l'argument <paramref name="parallelOptions" /> est annulé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-716">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="61b7b-717">Objet <see cref="T:System.Threading.CancellationTokenSource" /> associé à <see cref="T:System.Threading.CancellationToken" /> dans l'objet <paramref name="parallelOptions" /> a été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-717">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="61b7b-718">Exception qui contient toutes les exceptions individuelles levées sur tous les threads.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-718">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Invoke">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="61b7b-719">Exécute chacune des actions fournies, éventuellement en parallèle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-719">Executes each of the provided actions, possibly in parallel.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static void Invoke (params Action[] actions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Invoke(class System.Action[] actions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.Invoke(System.Action[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Invoke (ParamArray actions As Action())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Invoke(... cli::array &lt;Action ^&gt; ^ actions);" />
      <MemberSignature Language="F#" Value="static member Invoke : Action[] -&gt; unit" Usage="System.Threading.Tasks.Parallel.Invoke actions" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="actions" Type="System.Action[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="actions">
          <span data-ttu-id="61b7b-720">Tableau de <see cref="T:System.Action" /> à exécuter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-720">An array of <see cref="T:System.Action" /> to execute.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61b7b-721">Exécute chacune des actions fournies, éventuellement en parallèle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-721">Executes each of the provided actions, possibly in parallel.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61b7b-722">Cette méthode peut être utilisée pour exécuter un ensemble d’opérations, potentiellement en parallèle.</span><span class="sxs-lookup"><span data-stu-id="61b7b-722">This method can be used to execute a set of operations, potentially in parallel.</span></span>  
  
 <span data-ttu-id="61b7b-723">Aucune garantie sur l’ordre dans lequel les opérations s’exécutent, ou si elles s’exécutent en parallèle.</span><span class="sxs-lookup"><span data-stu-id="61b7b-723">No guarantees are made about the order in which the operations execute or whether they execute in parallel.</span></span> <span data-ttu-id="61b7b-724">Cette méthode ne retourne pas jusqu'à ce que chacune des opérations fournies est terminée, indépendamment de si la saisie semi-automatique se produit en raison de l’arrêt normal ou exceptionnel.</span><span class="sxs-lookup"><span data-stu-id="61b7b-724">This method does not return until each of the provided operations has completed, regardless of whether completion occurs due to normal or exceptional termination.</span></span>  
  
 <span data-ttu-id="61b7b-725">Pour plus d’informations, consultez [Comment : utiliser parallel_invoke pour exécuter des opérations parallèles](~/docs/standard/parallel-programming/how-to-use-parallel-invoke-to-execute-parallel-operations.md).</span><span class="sxs-lookup"><span data-stu-id="61b7b-725">For more information, see [How to: Use Parallel.Invoke to Execute Parallel Operations](~/docs/standard/parallel-programming/how-to-use-parallel-invoke-to-execute-parallel-operations.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="61b7b-726">Cet exemple montre comment utiliser la <xref:System.Threading.Tasks.Parallel.Invoke%2A> méthode avec d’autres méthodes, les délégués anonymes et les expressions lambda.</span><span class="sxs-lookup"><span data-stu-id="61b7b-726">This example demonstrates how to use the <xref:System.Threading.Tasks.Parallel.Invoke%2A> method with other methods, anonymous delegates, and lambda expressions.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/parallelinvoke.cs#01)]
 [!code-vb[System.Threading.Tasks.Parallel#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/parallelinvoke.vb#01)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="61b7b-727">L'argument <paramref name="actions" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-727">The <paramref name="actions" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="61b7b-728">L'exception levée lorsque toute action dans le tableau <paramref name="actions" /> lève une exception.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-728">The exception that is thrown when any action in the <paramref name="actions" /> array throws an exception.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="61b7b-729">Le tableau <paramref name="actions" /> contient un élément <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-729">The <paramref name="actions" /> array contains a <see langword="null" /> element.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static void Invoke (System.Threading.Tasks.ParallelOptions parallelOptions, params Action[] actions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Invoke(class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action[] actions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.Invoke(System.Threading.Tasks.ParallelOptions,System.Action[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Invoke(System::Threading::Tasks::ParallelOptions ^ parallelOptions, ... cli::array &lt;Action ^&gt; ^ actions);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Threading.Tasks.ParallelOptions * Action[] -&gt; unit" Usage="System.Threading.Tasks.Parallel.Invoke (parallelOptions, actions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="actions" Type="System.Action[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="parallelOptions">
          <span data-ttu-id="61b7b-730">Objet qui configure le comportement de cette opération.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-730">An object that configures the behavior of this operation.</span>
          </span>
        </param>
        <param name="actions">
          <span data-ttu-id="61b7b-731">Tableau d'actions à exécuter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-731">An array of actions to execute.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61b7b-732">Exécute chacune des actions fournies, éventuellement en parallèle, sauf si l'opération est annulée par l'utilisateur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-732">Executes each of the provided actions, possibly in parallel, unless the operation is cancelled by the user.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="61b7b-733">Cette méthode peut être utilisée pour exécuter un ensemble d’opérations, potentiellement en parallèle.</span><span class="sxs-lookup"><span data-stu-id="61b7b-733">This method can be used to execute a set of operations, potentially in parallel.</span></span> <span data-ttu-id="61b7b-734">Le jeton d’annulation passé avec la <xref:System.Threading.Tasks.ParallelOptions> structure permet à l’appelant d’annuler l’opération entière.</span><span class="sxs-lookup"><span data-stu-id="61b7b-734">The cancellation token passed in with the <xref:System.Threading.Tasks.ParallelOptions> structure enables the caller to cancel the entire operation.</span></span> <span data-ttu-id="61b7b-735">Pour plus d’informations, consultez [Annulation dans les threads managés](~/docs/standard/threading/cancellation-in-managed-threads.md).</span><span class="sxs-lookup"><span data-stu-id="61b7b-735">For more information, see [Cancellation in Managed Threads](~/docs/standard/threading/cancellation-in-managed-threads.md).</span></span>  
  
 <span data-ttu-id="61b7b-736">Aucune garantie sur l’ordre dans lequel les opérations s’exécutent, ou si elles s’exécutent en parallèle.</span><span class="sxs-lookup"><span data-stu-id="61b7b-736">No guarantees are made about the order in which the operations execute or whether they execute in parallel.</span></span> <span data-ttu-id="61b7b-737">Cette méthode ne retourne pas jusqu'à ce que chacune des opérations fournies est terminée, indépendamment de si la saisie semi-automatique se produit en raison de l’arrêt normal ou exceptionnel.</span><span class="sxs-lookup"><span data-stu-id="61b7b-737">This method does not return until each of the provided operations has completed, regardless of whether completion occurs due to normal or exceptional termination.</span></span>  
  
 <span data-ttu-id="61b7b-738">Pour plus d’informations, consultez [Comment : utiliser parallel_invoke pour exécuter des opérations parallèles](~/docs/standard/parallel-programming/how-to-use-parallel-invoke-to-execute-parallel-operations.md).</span><span class="sxs-lookup"><span data-stu-id="61b7b-738">For more information, see [How to: Use Parallel.Invoke to Execute Parallel Operations](~/docs/standard/parallel-programming/how-to-use-parallel-invoke-to-execute-parallel-operations.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="61b7b-739">Objet <see cref="T:System.Threading.CancellationToken" /> dans <paramref name="parallelOptions" /> est défini.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-739">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> is set.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="61b7b-740">L'argument <paramref name="actions" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-740">The <paramref name="actions" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="61b7b-741">- ou - L’argument <paramref name="parallelOptions" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-741">-or-  The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="61b7b-742">L'exception levée lorsque toute action dans le tableau <paramref name="actions" /> lève une exception.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-742">The exception that is thrown when any action in the <paramref name="actions" /> array throws an exception.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="61b7b-743">Le tableau <paramref name="actions" /> contient un élément <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-743">The <paramref name="actions" /> array contains a <see langword="null" /> element.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="61b7b-744">Objet <see cref="T:System.Threading.CancellationTokenSource" /> associé à <see cref="T:System.Threading.CancellationToken" /> dans l'objet <paramref name="parallelOptions" /> a été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61b7b-744">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>