<Type Name="TaskFactory" FullName="System.Threading.Tasks.TaskFactory">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0840b5646b82fa6e7833718724b56dd16676c685" />
    <Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="11/20/2018" />
    <Meta Name="ms.locfileid" Value="52232234" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class TaskFactory" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TaskFactory extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.TaskFactory" />
  <TypeSignature Language="VB.NET" Value="Public Class TaskFactory" />
  <TypeSignature Language="C++ CLI" Value="public ref class TaskFactory" />
  <TypeSignature Language="F#" Value="type TaskFactory = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="b2054-101">Prend en charge la création et la planification d'objets <see cref="T:System.Threading.Tasks.Task" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="b2054-101">Provides support for creating and scheduling <see cref="T:System.Threading.Tasks.Task" /> objects.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2054-102">Le .NET Framework fournit deux fabriques pour la création et la planification des tâches :</span><span class="sxs-lookup"><span data-stu-id="b2054-102">The .NET Framework provides two factories for creating and scheduling tasks:</span></span>  
  
-   <span data-ttu-id="b2054-103">Le <xref:System.Threading.Tasks.TaskFactory> (classe), ce qui crée <xref:System.Threading.Tasks.Task> et <xref:System.Threading.Tasks.Task%601> objets.</span><span class="sxs-lookup"><span data-stu-id="b2054-103">The <xref:System.Threading.Tasks.TaskFactory> class, which creates <xref:System.Threading.Tasks.Task> and <xref:System.Threading.Tasks.Task%601> objects.</span></span> <span data-ttu-id="b2054-104">Vous pouvez appeler des surcharges de cette méthode pour créer et exécuter une tâche qui nécessite des arguments personnalisés.</span><span class="sxs-lookup"><span data-stu-id="b2054-104">You can call the overloads of this method to create and execute a task that requires non-default arguments.</span></span>  
  
    > [!WARNING]
    >  <span data-ttu-id="b2054-105">En commençant par le [!INCLUDE[net_v45](~/includes/net-v45-md.md)], le <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> méthode fournit le moyen le plus simple pour créer une tâche avec la valeur par défaut des valeurs de configuration et la démarrer immédiatement.</span><span class="sxs-lookup"><span data-stu-id="b2054-105">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> method provides the easiest way to create a task with default configuration values and start it immediately.</span></span>  
  
-   <span data-ttu-id="b2054-106">Le <xref:System.Threading.Tasks.TaskFactory%601> (classe), ce qui crée <xref:System.Threading.Tasks.Task%601> objets.</span><span class="sxs-lookup"><span data-stu-id="b2054-106">The <xref:System.Threading.Tasks.TaskFactory%601> class, which creates <xref:System.Threading.Tasks.Task%601> objects.</span></span>  
  
 <span data-ttu-id="b2054-107">Le <xref:System.Threading.Tasks.TaskFactory> classe permet d’effectuer les opérations suivantes :</span><span class="sxs-lookup"><span data-stu-id="b2054-107">The <xref:System.Threading.Tasks.TaskFactory> class allows you to do the following:</span></span>  
  
-   <span data-ttu-id="b2054-108">Créer une tâche et démarrer immédiatement en appelant le <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="b2054-108">Create a task and start it immediately by calling the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> method.</span></span>  
  
    > [!WARNING]
    >  <span data-ttu-id="b2054-109">En commençant par le [!INCLUDE[net_v45](~/includes/net-v45-md.md)], le <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> méthode fournit le moyen le plus simple pour créer une tâche avec la valeur par défaut des valeurs de configuration et la démarrer immédiatement.</span><span class="sxs-lookup"><span data-stu-id="b2054-109">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> method provides the easiest way to create a task with default configuration values and start it immediately.</span></span>  
  
-   <span data-ttu-id="b2054-110">Créer une tâche qui démarre lorsque l’une des tâches dans un tableau est terminée en appelant le <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAny%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="b2054-110">Create a task that starts when any one of the tasks in an array has completed by calling the <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAny%2A> method.</span></span>  
  
-   <span data-ttu-id="b2054-111">Créer une tâche qui démarre lorsque toutes les tâches dans un tableau s’est terminé en appelant le <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="b2054-111">Create a task that starts when all the tasks in an array have completed by calling the <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A> method.</span></span>  
  
 <span data-ttu-id="b2054-112">La méthode statique <xref:System.Threading.Tasks.Task%601.Factory%2A?displayProperty=nameWithType> propriété retourne une valeur par défaut <xref:System.Threading.Tasks.TaskFactory%601> objet.</span><span class="sxs-lookup"><span data-stu-id="b2054-112">The static <xref:System.Threading.Tasks.Task%601.Factory%2A?displayProperty=nameWithType> property returns a default <xref:System.Threading.Tasks.TaskFactory%601> object.</span></span> <span data-ttu-id="b2054-113">Vous pouvez également appeler une de la <xref:System.Threading.Tasks.TaskFactory> classe constructeurs pour configurer le <xref:System.Threading.Tasks.Task> objets qui la <xref:System.Threading.Tasks.TaskFactory> classe crée.</span><span class="sxs-lookup"><span data-stu-id="b2054-113">You can also call one of the <xref:System.Threading.Tasks.TaskFactory> class constructors to configure the <xref:System.Threading.Tasks.Task> objects that  the <xref:System.Threading.Tasks.TaskFactory> class creates.</span></span> <span data-ttu-id="b2054-114">L’exemple suivant configure un nouveau <xref:System.Threading.Tasks.TaskFactory> objet pour créer des tâches qui ont un jeton d’annulation spécifié, les options de création de tâche, les options de continuation et un planificateur de tâches personnalisé.</span><span class="sxs-lookup"><span data-stu-id="b2054-114">The following example configures a new <xref:System.Threading.Tasks.TaskFactory> object to create tasks that have a specified cancellation token, task creation options, continuation options, and a customized task scheduler.</span></span>  
  
 [!code-csharp[TPL_Factories#1](~/samples/snippets/csharp/VS_Snippets_Misc/tpl_factories/cs/program.cs#1)]
 [!code-vb[TPL_Factories#1](~/samples/snippets/visualbasic/VS_Snippets_Misc/tpl_factories/vb/factories_vb.vb#1)]  
  
 <span data-ttu-id="b2054-115">Dans la plupart des cas, vous n’avez pas instancier un nouvel <xref:System.Threading.Tasks.TaskFactory> instance.</span><span class="sxs-lookup"><span data-stu-id="b2054-115">In most cases, you do not have to instantiate a new <xref:System.Threading.Tasks.TaskFactory> instance.</span></span> <span data-ttu-id="b2054-116">Au lieu de cela, vous pouvez utiliser le <xref:System.Threading.Tasks.Task.Factory%2A?displayProperty=nameWithType> propriété, qui retourne un objet de fabrique qui utilise les valeurs par défaut.</span><span class="sxs-lookup"><span data-stu-id="b2054-116">Instead, you can use the <xref:System.Threading.Tasks.Task.Factory%2A?displayProperty=nameWithType> property, which returns a factory object that uses default values.</span></span> <span data-ttu-id="b2054-117">Vous pouvez ensuite appeler ses méthodes pour démarrer de nouvelles tâches ou définir les continuations de tâches.</span><span class="sxs-lookup"><span data-stu-id="b2054-117">You can then call its methods to start new tasks or define task continuations.</span></span> <span data-ttu-id="b2054-118">Pour obtenir une illustration, consultez l’exemple.</span><span class="sxs-lookup"><span data-stu-id="b2054-118">For an illustration, see the example.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2054-119">L’exemple suivant utilise la méthode statique <xref:System.Threading.Tasks.Task.Factory%2A> propriété afin que les deux appels à la <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="b2054-119">The following example uses the static <xref:System.Threading.Tasks.Task.Factory%2A> property to make two calls to the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="b2054-120">La première remplit un tableau avec les noms des fichiers dans le répertoire Mes documents, tandis que la seconde remplit un tableau avec les noms des sous-répertoires du répertoire Mes documents de l’utilisateur.</span><span class="sxs-lookup"><span data-stu-id="b2054-120">The first populates an array with the names of files in the user's MyDocuments directory, while the second populates an array with the names of subdirectories of the user's MyDocuments directory.</span></span> <span data-ttu-id="b2054-121">Il appelle ensuite la <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%28System.Threading.Tasks.Task%5B%5D%2CSystem.Action%7BSystem.Threading.Tasks.Task%5B%5D%7D%29?displayProperty=nameWithType> (méthode), qui affiche des informations sur le nombre de fichiers et des répertoires dans les deux tableaux après les deux premières tâches terminées à l’exécution.</span><span class="sxs-lookup"><span data-stu-id="b2054-121">It then calls the <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%28System.Threading.Tasks.Task%5B%5D%2CSystem.Action%7BSystem.Threading.Tasks.Task%5B%5D%7D%29?displayProperty=nameWithType> method, which displays information about the number of files and directories in the two arrays after the first two tasks have completed execution.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Factory#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.factory/cs/factory1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.Factory#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.factory/vb/factory1.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="b2054-122">Tous les membres publics et protégés de <see cref="T:System.Threading.Tasks.TaskFactory" /> sont thread-safe et peuvent être utilisés simultanément par plusieurs threads.</span>
      <span class="sxs-lookup">
        <span data-stu-id="b2054-122">All public and protected members of <see cref="T:System.Threading.Tasks.TaskFactory" /> are thread-safe and may be used concurrently from multiple threads.</span>
      </span>
    </threadsafe>
    <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
      <span data-ttu-id="b2054-123">Bibliothèque parallèle de tâches</span>
      <span class="sxs-lookup">
        <span data-stu-id="b2054-123">Task Parallel Library (TPL)</span>
      </span>
    </related>
    <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/Samples-for-Parallel-b4b76364">
      <span data-ttu-id="b2054-124">Exemples de programmation parallèle avec .NET Framework</span>
      <span class="sxs-lookup">
        <span data-stu-id="b2054-124">Samples for Parallel Programming with the .NET Framework</span>
      </span>
    </related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="b2054-125">Initialise une nouvelle instance de la classe <see cref="T:System.Threading.Tasks.TaskFactory" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-125">Initializes a new instance of the <see cref="T:System.Threading.Tasks.TaskFactory" /> class.</span>
          </span>
        </summary>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="b2054-126">Bibliothèque parallèle de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-126">Task Parallel Library (TPL)</span>
          </span>
        </related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TaskFactory ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TaskFactory();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b2054-127">Initialise une instance de <see cref="T:System.Threading.Tasks.TaskFactory" /> avec la configuration par défaut.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-127">Initializes a <see cref="T:System.Threading.Tasks.TaskFactory" /> instance with the default configuration.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2054-128">Ce constructeur crée un <xref:System.Threading.Tasks.TaskFactory> instance avec une configuration par défaut.</span><span class="sxs-lookup"><span data-stu-id="b2054-128">This constructor creates a <xref:System.Threading.Tasks.TaskFactory> instance with a default configuration.</span></span> <span data-ttu-id="b2054-129">Le <xref:System.Threading.Tasks.TaskCreationOptions> propriété est initialisée avec <xref:System.Threading.Tasks.TaskCreationOptions.None>, le <xref:System.Threading.Tasks.TaskContinuationOptions> propriété est initialisée avec <xref:System.Threading.Tasks.TaskContinuationOptions.None>et le <xref:System.Threading.Tasks.TaskScheduler> propriété est initialisée au planificateur actuel (consultez <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).</span><span class="sxs-lookup"><span data-stu-id="b2054-129">The <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to <xref:System.Threading.Tasks.TaskCreationOptions.None>, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to <xref:System.Threading.Tasks.TaskContinuationOptions.None>, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="b2054-130">Bibliothèque parallèle de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-130">Task Parallel Library (TPL)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TaskFactory (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TaskFactory(System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.TaskFactory : System.Threading.CancellationToken -&gt; System.Threading.Tasks.TaskFactory" Usage="new System.Threading.Tasks.TaskFactory cancellationToken" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">
          <span data-ttu-id="b2054-131">
            <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> qui sera assigné aux tâches créées par ce <see cref="T:System.Threading.Tasks.TaskFactory" />, sauf si un autre CancellationToken est explicitement spécifié lors de l'appel de méthodes de fabrique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-131">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to tasks created by this <see cref="T:System.Threading.Tasks.TaskFactory" /> unless another CancellationToken is explicitly specified while calling the factory methods.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b2054-132">Initialise une instance de <see cref="T:System.Threading.Tasks.TaskFactory" /> avec la configuration spécifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-132">Initializes a <see cref="T:System.Threading.Tasks.TaskFactory" /> instance with the specified configuration.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2054-133">Ce constructeur crée un <xref:System.Threading.Tasks.TaskFactory> instance avec une configuration par défaut.</span><span class="sxs-lookup"><span data-stu-id="b2054-133">This constructor creates a <xref:System.Threading.Tasks.TaskFactory> instance with a default configuration.</span></span> <span data-ttu-id="b2054-134">Le <xref:System.Threading.Tasks.TaskCreationOptions> propriété est initialisée avec <xref:System.Threading.Tasks.TaskCreationOptions.None>, le <xref:System.Threading.Tasks.TaskContinuationOptions> propriété est initialisée avec <xref:System.Threading.Tasks.TaskContinuationOptions.None>et le <xref:System.Threading.Tasks.TaskScheduler> propriété est initialisée au planificateur actuel (consultez <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).</span><span class="sxs-lookup"><span data-stu-id="b2054-134">The <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to <xref:System.Threading.Tasks.TaskCreationOptions.None>, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to <xref:System.Threading.Tasks.TaskContinuationOptions.None>, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="b2054-135">Bibliothèque parallèle de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-135">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md">
          <span data-ttu-id="b2054-136">Annulation</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-136">Cancellation</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TaskFactory (System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (scheduler As TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TaskFactory(System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.TaskFactory : System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.TaskFactory" Usage="new System.Threading.Tasks.TaskFactory scheduler" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="scheduler">
          <span data-ttu-id="b2054-137">
            <see cref="T:System.Threading.Tasks.TaskScheduler" /> à utiliser pour planifier des tâches créées avec ce TaskFactory.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-137">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to use to schedule any tasks created with this TaskFactory.</span>
          </span>
          <span data-ttu-id="b2054-138">Une valeur Null indique que le TaskScheduler actif doit être utilisé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-138">A null value indicates that the current TaskScheduler should be used.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b2054-139">Initialise une instance de <see cref="T:System.Threading.Tasks.TaskFactory" /> avec la configuration spécifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-139">Initializes a <see cref="T:System.Threading.Tasks.TaskFactory" /> instance with the specified configuration.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2054-140">Avec ce constructeur, le <xref:System.Threading.Tasks.TaskCreationOptions> propriété est initialisée avec <xref:System.Threading.Tasks.TaskCreationOptions.None>, le <xref:System.Threading.Tasks.TaskContinuationOptions> propriété est initialisée avec <xref:System.Threading.Tasks.TaskContinuationOptions.None>et le <xref:System.Threading.Tasks.TaskScheduler> propriété est initialisée avec `scheduler`, sauf si elle a la valeur null, auquel cas le la propriété est initialisée au planificateur actuel (consultez <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).</span><span class="sxs-lookup"><span data-stu-id="b2054-140">With this constructor, the <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to <xref:System.Threading.Tasks.TaskCreationOptions.None>, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to <xref:System.Threading.Tasks.TaskContinuationOptions.None>, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to `scheduler`, unless it's null, in which case the property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.Tasks.TaskScheduler" />
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="b2054-141">Bibliothèque parallèle de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-141">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="b2054-142">Chaînage des tâches à l’aide de tâches de continuation</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-142">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TaskFactory (System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Threading.Tasks.TaskCreationOptions creationOptions, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (creationOptions As TaskCreationOptions, continuationOptions As TaskContinuationOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TaskFactory(System::Threading::Tasks::TaskCreationOptions creationOptions, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.TaskFactory : System.Threading.Tasks.TaskCreationOptions * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.TaskFactory" Usage="new System.Threading.Tasks.TaskFactory (creationOptions, continuationOptions)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <param name="creationOptions">
          <span data-ttu-id="b2054-143">
            <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> par défaut à utiliser lors de la création de tâches avec ce TaskFactory.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-143">The default <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> to use when creating tasks with this TaskFactory.</span>
          </span>
        </param>
        <param name="continuationOptions">
          <span data-ttu-id="b2054-144">
            <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> par défaut à utiliser lors de la création de tâches de continuation avec ce TaskFactory.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-144">The default <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> to use when creating continuation tasks with this TaskFactory.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b2054-145">Initialise une instance de <see cref="T:System.Threading.Tasks.TaskFactory" /> avec la configuration spécifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-145">Initializes a <see cref="T:System.Threading.Tasks.TaskFactory" /> instance with the specified configuration.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2054-146">Avec ce constructeur, le <xref:System.Threading.Tasks.TaskCreationOptions> propriété est initialisée avec `creationOptions`, le <xref:System.Threading.Tasks.TaskContinuationOptions> propriété est initialisée avec `continuationOptions`et le <xref:System.Threading.Tasks.TaskScheduler> propriété est initialisée au planificateur actuel (consultez <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).</span><span class="sxs-lookup"><span data-stu-id="b2054-146">With this constructor, the <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to `creationOptions`, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to `continuationOptions`, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b2054-147">L'argument <paramref name="creationOptions" /> spécifie une valeur <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> non valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-147">The <paramref name="creationOptions" /> argument specifies an invalid <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> value.</span>
          </span>
          <span data-ttu-id="b2054-148">Pour plus d’informations, consultez les Notes relatives à <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-148">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</span>
          </span>
          <span data-ttu-id="b2054-149">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-149">-or-</span>
          </span>
          <span data-ttu-id="b2054-150">L'argument <paramref name="continuationOptions" /> spécifie une valeur non valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-150">The <paramref name="continuationOptions" /> argument specifies an invalid value.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="b2054-151">Bibliothèque parallèle de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-151">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="b2054-152">Chaînage des tâches à l’aide de tâches de continuation</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-152">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TaskFactory (System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TaskFactory(System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskCreationOptions creationOptions, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.TaskFactory : System.Threading.CancellationToken * System.Threading.Tasks.TaskCreationOptions * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.TaskFactory" Usage="new System.Threading.Tasks.TaskFactory (cancellationToken, creationOptions, continuationOptions, scheduler)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">
          <span data-ttu-id="b2054-153">
            <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> par défaut qui sera assigné aux tâches créées par ce <see cref="T:System.Threading.Tasks.TaskFactory" />, sauf si un autre CancellationToken est explicitement spécifié lors de l'appel de méthodes de fabrique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-153">The default <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to tasks created by this <see cref="T:System.Threading.Tasks.TaskFactory" /> unless another CancellationToken is explicitly specified while calling the factory methods.</span>
          </span>
        </param>
        <param name="creationOptions">
          <span data-ttu-id="b2054-154">
            <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> par défaut à utiliser lors de la création de tâches avec ce TaskFactory.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-154">The default <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> to use when creating tasks with this TaskFactory.</span>
          </span>
        </param>
        <param name="continuationOptions">
          <span data-ttu-id="b2054-155">
            <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> par défaut à utiliser lors de la création de tâches de continuation avec ce TaskFactory.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-155">The default <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> to use when creating continuation tasks with this TaskFactory.</span>
          </span>
        </param>
        <param name="scheduler">
          <span data-ttu-id="b2054-156">
            <see cref="T:System.Threading.Tasks.TaskScheduler" /> par défaut à utiliser pour planifier des tâches créées avec ce TaskFactory.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-156">The default <see cref="T:System.Threading.Tasks.TaskScheduler" /> to use to schedule any Tasks created with this TaskFactory.</span>
          </span>
          <span data-ttu-id="b2054-157">Une valeur Null indique que TaskScheduler.Current doit être utilisé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-157">A null value indicates that TaskScheduler.Current should be used.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b2054-158">Initialise une instance de <see cref="T:System.Threading.Tasks.TaskFactory" /> avec la configuration spécifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-158">Initializes a <see cref="T:System.Threading.Tasks.TaskFactory" /> instance with the specified configuration.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2054-159">Avec ce constructeur, le <xref:System.Threading.Tasks.TaskCreationOptions> propriété est initialisée avec `creationOptions`, le <xref:System.Threading.Tasks.TaskContinuationOptions> propriété est initialisée avec `continuationOptions`et le <xref:System.Threading.Tasks.TaskScheduler> propriété est initialisée avec `scheduler`, sauf si elle a la valeur null, auquel cas le la propriété est initialisée au planificateur actuel (consultez <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).</span><span class="sxs-lookup"><span data-stu-id="b2054-159">With this constructor, the <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to `creationOptions`, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to `continuationOptions`, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to `scheduler`, unless it's null, in which case the property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b2054-160">L'argument <paramref name="creationOptions" /> spécifie une valeur <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> non valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-160">The <paramref name="creationOptions" /> argument specifies an invalid <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> value.</span>
          </span>
          <span data-ttu-id="b2054-161">Pour plus d’informations, consultez les Notes relatives à <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-161">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</span>
          </span>
          <span data-ttu-id="b2054-162">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-162">-or-</span>
          </span>
          <span data-ttu-id="b2054-163">L'argument <paramref name="continuationOptions" /> spécifie une valeur non valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-163">The <paramref name="continuationOptions" /> argument specifies an invalid value.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="b2054-164">Bibliothèque parallèle de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-164">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="b2054-165">Chaînage des tâches à l’aide de tâches de continuation</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-165">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="CancellationToken">
      <MemberSignature Language="C#" Value="public System.Threading.CancellationToken CancellationToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Threading.CancellationToken CancellationToken" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.TaskFactory.CancellationToken" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CancellationToken As CancellationToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::CancellationToken CancellationToken { System::Threading::CancellationToken get(); };" />
      <MemberSignature Language="F#" Value="member this.CancellationToken : System.Threading.CancellationToken" Usage="System.Threading.Tasks.TaskFactory.CancellationToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationToken</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b2054-166">Obtient le jeton d’annulation par défaut pour cette fabrique de tâches.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-166">Gets the default cancellation token for this task factory.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b2054-167">Jeton d’annulation de tâches par défaut pour cette fabrique de tâches.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-167">The default task cancellation token for this task factory.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2054-168">Cette propriété retourne la valeur par défaut <xref:System.Threading.CancellationToken> qui sera assigné à toutes les tâches créées par cette fabrique, sauf si un autre <xref:System.Threading.CancellationToken> valeur est explicitement spécifiée pendant l’appel de méthodes de fabrique.</span><span class="sxs-lookup"><span data-stu-id="b2054-168">This property returns the default <xref:System.Threading.CancellationToken> that will be assigned to all tasks created by this factory, unless another <xref:System.Threading.CancellationToken> value is explicitly specified during the call to the factory methods.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="b2054-169">Bibliothèque parallèle de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-169">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="b2054-170">Chaînage des tâches à l’aide de tâches de continuation</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-170">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md">
          <span data-ttu-id="b2054-171">Annulation de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-171">Task Cancellation</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ContinuationOptions">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.TaskContinuationOptions ContinuationOptions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Threading.Tasks.TaskContinuationOptions ContinuationOptions" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.TaskFactory.ContinuationOptions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ContinuationOptions As TaskContinuationOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::Tasks::TaskContinuationOptions ContinuationOptions { System::Threading::Tasks::TaskContinuationOptions get(); };" />
      <MemberSignature Language="F#" Value="member this.ContinuationOptions : System.Threading.Tasks.TaskContinuationOptions" Usage="System.Threading.Tasks.TaskFactory.ContinuationOptions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.TaskContinuationOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b2054-172">Obtient les options de continuation de tâches par défaut pour cette fabrique de tâches.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-172">Gets the default task continuation options for this task factory.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b2054-173">Options de continuation de tâches par défaut pour cette fabrique de tâches.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-173">The default task continuation options for this task factory.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2054-174">La valeur de propriété est utilisée pour créer toutes les tâches de continuation, à moins que les autres options sont spécifiées explicitement pendant les appels aux méthodes de cette fabrique.</span><span class="sxs-lookup"><span data-stu-id="b2054-174">The property value is used to create all continuation tasks, unless other options are explicitly specified during calls to this factory's methods.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="b2054-175">Bibliothèque parallèle de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-175">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="b2054-176">Chaînage des tâches à l’aide de tâches de continuation</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-176">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ContinueWhenAll">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="b2054-177">Crée une tâche de continuation qui démarre lorsqu'un ensemble de tâches spécifiées est terminé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-177">Creates a continuation task that starts when a set of specified tasks has completed.</span>
          </span>
        </summary>
        <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/Samples-for-Parallel-b4b76364">
          <span data-ttu-id="b2054-178">Exemples de programmation parallèle avec .NET Framework</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-178">Samples for Parallel Programming with the .NET Framework</span>
          </span>
        </related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ContinueWhenAll">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAll (System.Threading.Tasks.Task[] tasks, Action&lt;System.Threading.Tasks.Task[]&gt; continuationAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAll(class System.Threading.Tasks.Task[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task[]&gt; continuationAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]})" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAll (tasks As Task(), continuationAction As Action(Of Task())) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Action&lt;cli::array &lt;System::Threading::Tasks::Task ^&gt; ^&gt; ^ continuationAction);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task[] * Action&lt;System.Threading.Tasks.Task[]&gt; -&gt; System.Threading.Tasks.Task" Usage="taskFactory.ContinueWhenAll (tasks, continuationAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task[]&gt;" />
      </Parameters>
      <Docs>
        <param name="tasks">
          <span data-ttu-id="b2054-179">Tableau de tâches à partir duquel continuer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-179">The array of tasks from which to continue.</span>
          </span>
        </param>
        <param name="continuationAction">
          <span data-ttu-id="b2054-180">Délégué d’action à exécuter quand toutes les tâches du tableau <paramref name="tasks" /> sont terminées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-180">The action delegate to execute when all tasks in the <paramref name="tasks" /> array have completed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b2054-181">Crée une tâche de continuation qui démarre lorsqu'un ensemble de tâches spécifiées est terminé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-181">Creates a continuation task that starts when a set of specified tasks has completed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b2054-182">Nouvelle tâche de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-182">The new continuation task.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2054-183">Le <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A> méthode s’exécute le `continuationAction` délégué lorsque toutes les tâches dans le `tasks` tableau terminées, quelle que soit leur état d’achèvement.</span><span class="sxs-lookup"><span data-stu-id="b2054-183">The <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A> method executes the `continuationAction` delegate when all tasks in the `tasks` array have completed, regardless of their completion status.</span></span>  
  
 <span data-ttu-id="b2054-184">Les exceptions levées par des tâches dans le `tasks` tableau ne sont pas disponibles pour la tâche de continuation via la gestion structurée des exceptions.</span><span class="sxs-lookup"><span data-stu-id="b2054-184">Exceptions thrown by tasks in the `tasks` array are not available to the continuation task through structured exception handling.</span></span> <span data-ttu-id="b2054-185">Vous pouvez déterminer les exceptions levées en examinant le <xref:System.Threading.Tasks.Task.Exception%2A?displayProperty=nameWithType> propriété de chaque tâche dans le `tasks` tableau.</span><span class="sxs-lookup"><span data-stu-id="b2054-185">You can determine which exceptions were thrown by examining the <xref:System.Threading.Tasks.Task.Exception%2A?displayProperty=nameWithType> property of each task in the `tasks` array.</span></span> <span data-ttu-id="b2054-186">Pour utiliser structurée des exceptions pour gérer les exceptions levées par des tâches dans le `tasks` de tableau, appelez le <xref:System.Threading.Tasks.Task.WaitAll%28System.Threading.Tasks.Task%5B%5D%29?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="b2054-186">To use structured exception handling to handle exceptions thrown by tasks in the `tasks` array, call the <xref:System.Threading.Tasks.Task.WaitAll%28System.Threading.Tasks.Task%5B%5D%29?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2054-187">L’exemple suivant lance des tâches distinctes qui utilisent une expression régulière pour compter le nombre de mots dans un ensemble de fichiers texte.</span><span class="sxs-lookup"><span data-stu-id="b2054-187">The following example launches separate tasks that use a regular expression to count the number of words in a set of text files.</span></span> <span data-ttu-id="b2054-188">Le <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A> méthode est utilisée pour lancer une tâche qui affiche le nombre total de mots lorsque toutes les tâches d’antécédent s’est terminé.</span><span class="sxs-lookup"><span data-stu-id="b2054-188">The <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A> method is used to launch a task that displays the total word count when all the antecedent tasks have completed.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.ContinueWhenAll#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.continuewhenall/cs/continuewhenall1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.ContinueWhenAll#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.continuewhenall/vb/continuewhenall1.vb#1)]  
  
 <span data-ttu-id="b2054-189">L’appel à la tâche de continuation <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType> méthode ne permet pas à gérer les exceptions levées par les tâches d’antécédent, donc l’exemple examine la <xref:System.Threading.Tasks.Task.Status%2A?displayProperty=nameWithType> propriété de chaque tâche antécédente pour déterminer si la tâche a réussi.</span><span class="sxs-lookup"><span data-stu-id="b2054-189">The call to the continuation task's <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType> method does not allow it to handle exceptions thrown by the antecedent tasks, so the example examines the <xref:System.Threading.Tasks.Task.Status%2A?displayProperty=nameWithType> property of each antecedent task to determine whether the task succeeded.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b2054-190">Un élément du tableau <paramref name="tasks" /> a été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-190">An element in the <paramref name="tasks" /> array has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b2054-191">Le tableau <paramref name="tasks" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-191">The <paramref name="tasks" /> array is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="b2054-192">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-192">-or-</span>
          </span>
          <span data-ttu-id="b2054-193">L'argument <paramref name="continuationAction" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-193">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b2054-194">Le tableau <paramref name="tasks" /> est vide ou contient une valeur null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-194">The <paramref name="tasks" /> array is empty or contains a null value.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="b2054-195">Bibliothèque parallèle de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-195">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="b2054-196">Chaînage des tâches à l’aide de tâches de continuation</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-196">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAll (System.Threading.Tasks.Task[] tasks, Action&lt;System.Threading.Tasks.Task[]&gt; continuationAction, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAll(class System.Threading.Tasks.Task[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task[]&gt; continuationAction, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Action&lt;cli::array &lt;System::Threading::Tasks::Task ^&gt; ^&gt; ^ continuationAction, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task[] * Action&lt;System.Threading.Tasks.Task[]&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="taskFactory.ContinueWhenAll (tasks, continuationAction, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task[]&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tasks">
          <span data-ttu-id="b2054-197">Tableau de tâches à partir duquel continuer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-197">The array of tasks from which to continue.</span>
          </span>
        </param>
        <param name="continuationAction">
          <span data-ttu-id="b2054-198">Délégué d'action à exécuter quand toutes les tâches du tableau <paramref name="tasks" /> sont terminées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-198">The action delegate to execute when all tasks in the <paramref name="tasks" /> array have completed.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="b2054-199">Jeton d’annulation à associer à la nouvelle tâche de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-199">The cancellation token to assign to the new continuation task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b2054-200">Crée une tâche de continuation qui démarre lorsqu'un ensemble de tâches spécifiées est terminé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-200">Creates a continuation task that starts when a set of specified tasks has completed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b2054-201">Nouvelle tâche de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-201">The new continuation task.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2054-202">Le [\], Action (tâche\<xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%28System.Threading.Tasks.Task%5B%5D%2CSystem.Action%7BSystem.Threading.Tasks.Task%5B%5D%7D% 2CSystem.Threading.CancellationToken%29 > méthode exécute le `continuationAction` délégué lorsque toutes les tâches dans le `tasks` tableau terminées, quelle que soit leur état d’achèvement.</span><span class="sxs-lookup"><span data-stu-id="b2054-202">The [\], Action(Task\<xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%28System.Threading.Tasks.Task%5B%5D%2CSystem.Action%7BSystem.Threading.Tasks.Task%5B%5D%7D%2CSystem.Threading.CancellationToken%29> method executes the `continuationAction` delegate when all tasks in the `tasks` array have completed, regardless of their completion status.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2054-203">L’exemple suivant crée un jeton d’annulation, qu’il passe à séparer les tâches qui utilisent une expression régulière pour compter le nombre de mots dans un ensemble de fichiers texte.</span><span class="sxs-lookup"><span data-stu-id="b2054-203">The following example creates a cancellation token, which it passes to separate tasks that use a regular expression to count the number of words in a set of text files.</span></span> <span data-ttu-id="b2054-204">Le jeton d’annulation est défini si un fichier est introuvable.</span><span class="sxs-lookup"><span data-stu-id="b2054-204">The cancellation token is set if a file cannot be found.</span></span> <span data-ttu-id="b2054-205">Le [\], Action (tâche\<xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A > méthode est utilisée pour lancer une tâche qui affiche le nombre total de mots lorsque toutes les tâches d’antécédent s’est terminé.</span><span class="sxs-lookup"><span data-stu-id="b2054-205">The [\], Action(Task\<xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A> method is used to launch a task that displays the total word count when all the antecedent tasks have completed.</span></span> <span data-ttu-id="b2054-206">Si le jeton d’annulation est défini, ce qui indique qu’une ou plusieurs tâches ont été annulées, il gère la <xref:System.AggregateException> exception et affiche un message d’erreur.</span><span class="sxs-lookup"><span data-stu-id="b2054-206">If the cancellation token is set, which indicates that one or more tasks have been cancelled, it handles the <xref:System.AggregateException> exception and displays an error message.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.ContinueWhenAll#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.continuewhenall/cs/continuewhenall2.cs#2)]
 [!code-vb[System.Threading.Tasks.Task.ContinueWhenAll#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.continuewhenall/vb/continuewhenall2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b2054-207">Un élément du tableau <paramref name="tasks" /> a été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-207">An element in the <paramref name="tasks" /> array has been disposed.</span>
          </span>
          <span data-ttu-id="b2054-208">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-208">-or-</span>
          </span>
          <span data-ttu-id="b2054-209">Le <see cref="T:System.Threading.CancellationTokenSource" /> qui a créé <paramref name="cancellationToken" /> a déjà été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-209">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b2054-210">Le tableau <paramref name="tasks" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-210">The <paramref name="tasks" /> array is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="b2054-211">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-211">-or-</span>
          </span>
          <span data-ttu-id="b2054-212">L'argument <paramref name="continuationAction" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-212">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b2054-213">Le tableau <paramref name="tasks" /> est vide ou contient une valeur null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-213">The <paramref name="tasks" /> array is empty or contains a null value.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="b2054-214">Bibliothèque parallèle de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-214">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="b2054-215">Chaînage des tâches à l’aide de tâches de continuation</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-215">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAll (System.Threading.Tasks.Task[] tasks, Action&lt;System.Threading.Tasks.Task[]&gt; continuationAction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAll(class System.Threading.Tasks.Task[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task[]&gt; continuationAction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAll (tasks As Task(), continuationAction As Action(Of Task()), continuationOptions As TaskContinuationOptions) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Action&lt;cli::array &lt;System::Threading::Tasks::Task ^&gt; ^&gt; ^ continuationAction, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task[] * Action&lt;System.Threading.Tasks.Task[]&gt; * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.Task" Usage="taskFactory.ContinueWhenAll (tasks, continuationAction, continuationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task[]&gt;" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <param name="tasks">
          <span data-ttu-id="b2054-216">Tableau de tâches à partir duquel continuer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-216">The array of tasks from which to continue.</span>
          </span>
        </param>
        <param name="continuationAction">
          <span data-ttu-id="b2054-217">Délégué d’action à exécuter quand toutes les tâches du tableau <paramref name="tasks" /> sont terminées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-217">The action delegate to execute when all tasks in the <paramref name="tasks" /> array have completed.</span>
          </span>
        </param>
        <param name="continuationOptions">
          <span data-ttu-id="b2054-218">Combinaison d’opérations de bits des valeurs d’énumération qui contrôlent le comportement de la nouvelle tâche de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-218">A bitwise combination of the enumeration values that control the behavior of the new continuation task.</span>
          </span>
          <span data-ttu-id="b2054-219">Les membres NotOn\* et OnlyOn\* ne sont pas pris en charge.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-219">The NotOn\* and OnlyOn\* members are not supported.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b2054-220">Crée une tâche de continuation qui démarre lorsqu'un ensemble de tâches spécifiées est terminé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-220">Creates a continuation task that starts when a set of specified tasks has completed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b2054-221">Nouvelle tâche de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-221">The new continuation task.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b2054-222">Un élément du tableau <paramref name="tasks" /> a été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-222">An element in the <paramref name="tasks" /> array has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b2054-223">Le tableau <paramref name="tasks" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-223">The <paramref name="tasks" /> array is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="b2054-224">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-224">-or-</span>
          </span>
          <span data-ttu-id="b2054-225">L'argument <paramref name="continuationAction" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-225">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b2054-226">L'argument <paramref name="continuationOptions" /> spécifie une valeur non valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-226">The <paramref name="continuationOptions" /> argument specifies an invalid value.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b2054-227">Le tableau <paramref name="tasks" /> est vide ou contient une valeur null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-227">The <paramref name="tasks" /> array is empty or contains a null value.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="b2054-228">Bibliothèque parallèle de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-228">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="b2054-229">Chaînage des tâches à l’aide de tâches de continuation</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-229">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAll (System.Threading.Tasks.Task[] tasks, Action&lt;System.Threading.Tasks.Task[]&gt; continuationAction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAll(class System.Threading.Tasks.Task[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task[]&gt; continuationAction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Action&lt;cli::array &lt;System::Threading::Tasks::Task ^&gt; ^&gt; ^ continuationAction, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task[] * Action&lt;System.Threading.Tasks.Task[]&gt; * System.Threading.CancellationToken * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task" Usage="taskFactory.ContinueWhenAll (tasks, continuationAction, cancellationToken, continuationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task[]&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="tasks">
          <span data-ttu-id="b2054-230">Tableau de tâches à partir duquel continuer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-230">The array of tasks from which to continue.</span>
          </span>
        </param>
        <param name="continuationAction">
          <span data-ttu-id="b2054-231">Délégué d'action à exécuter quand toutes les tâches du tableau <paramref name="tasks" /> sont terminées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-231">The action delegate to execute when all tasks in the <paramref name="tasks" /> array have completed.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="b2054-232">Jeton d’annulation à associer à la nouvelle tâche de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-232">The cancellation token to assign to the new continuation task.</span>
          </span>
        </param>
        <param name="continuationOptions">
          <span data-ttu-id="b2054-233">Combinaison d’opérations de bits des valeurs d’énumération qui contrôlent le comportement de la nouvelle tâche de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-233">A bitwise combination of the enumeration values that control the behavior of the new continuation task.</span>
          </span>
        </param>
        <param name="scheduler">
          <span data-ttu-id="b2054-234">Objet utilisé pour planifier la nouvelle tâche de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-234">The object that is used to schedule the new continuation task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b2054-235">Crée une tâche de continuation qui démarre lorsqu'un ensemble de tâches spécifiées est terminé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-235">Creates a continuation task that starts when a set of specified tasks has completed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b2054-236">Nouvelle tâche de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-236">The new continuation task.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b2054-237">Le tableau <paramref name="tasks" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-237">The <paramref name="tasks" /> array is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="b2054-238">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-238">-or-</span>
          </span>
          <span data-ttu-id="b2054-239">L'argument <paramref name="continuationAction" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-239">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="b2054-240">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-240">-or-</span>
          </span>
          <span data-ttu-id="b2054-241">L'argument <paramref name="scheduler" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-241">The <paramref name="scheduler" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b2054-242">Le tableau <paramref name="tasks" /> est vide ou contient une valeur null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-242">The <paramref name="tasks" /> array is empty or contains a null value.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="b2054-243">Bibliothèque parallèle de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-243">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="b2054-244">Chaînage des tâches à l’aide de tâches de continuation</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-244">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TAntecedentResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAll&lt;TAntecedentResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]&gt; continuationAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAll&lt;TAntecedentResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[]&gt; continuationAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]})" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAll(Of TAntecedentResult) (tasks As Task(Of TAntecedentResult)(), continuationAction As Action(Of Task(Of TAntecedentResult)())) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult&gt;&#xA; System::Threading::Tasks::Task ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Action&lt;cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^&gt; ^ continuationAction);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Action&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[]&gt; -&gt; System.Threading.Tasks.Task" Usage="taskFactory.ContinueWhenAll (tasks, continuationAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult">
          <span data-ttu-id="b2054-245">Type du résultat du <paramref name="tasks" /> antécédent.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-245">The type of the result of the antecedent <paramref name="tasks" />.</span>
          </span>
        </typeparam>
        <param name="tasks">
          <span data-ttu-id="b2054-246">Tableau de tâches à partir duquel continuer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-246">The array of tasks from which to continue.</span>
          </span>
        </param>
        <param name="continuationAction">
          <span data-ttu-id="b2054-247">Délégué d’action à exécuter quand toutes les tâches du tableau <paramref name="tasks" /> sont terminées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-247">The action delegate to execute when all tasks in the <paramref name="tasks" /> array have completed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b2054-248">Crée une tâche de continuation qui démarre lorsqu'un ensemble de tâches spécifiées est terminé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-248">Creates a continuation task that starts when a set of specified tasks has completed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b2054-249">Nouvelle tâche de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-249">The new continuation task.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b2054-250">Un élément du tableau <paramref name="tasks" /> a été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-250">An element in the <paramref name="tasks" /> array has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b2054-251">Le tableau <paramref name="tasks" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-251">The <paramref name="tasks" /> array is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="b2054-252">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-252">-or-</span>
          </span>
          <span data-ttu-id="b2054-253">L'argument <paramref name="continuationAction" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-253">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b2054-254">Le tableau <paramref name="tasks" /> est vide ou contient une valeur null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-254">The <paramref name="tasks" /> array is empty or contains a null value.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="b2054-255">Bibliothèque parallèle de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-255">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="b2054-256">Chaînage des tâches à l’aide de tâches de continuation</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-256">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md">
          <span data-ttu-id="b2054-257">Annulation de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-257">Task Cancellation</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TAntecedentResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAll&lt;TAntecedentResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]&gt; continuationAction, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAll&lt;TAntecedentResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[]&gt; continuationAction, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult&gt;&#xA; System::Threading::Tasks::Task ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Action&lt;cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^&gt; ^ continuationAction, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Action&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[]&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="taskFactory.ContinueWhenAll (tasks, continuationAction, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult">
          <span data-ttu-id="b2054-258">Type du résultat du <paramref name="tasks" /> antécédent.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-258">The type of the result of the antecedent <paramref name="tasks" />.</span>
          </span>
        </typeparam>
        <param name="tasks">
          <span data-ttu-id="b2054-259">Tableau de tâches à partir duquel continuer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-259">The array of tasks from which to continue.</span>
          </span>
        </param>
        <param name="continuationAction">
          <span data-ttu-id="b2054-260">Délégué d'action à exécuter quand toutes les tâches du tableau <paramref name="tasks" /> sont terminées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-260">The action delegate to execute when all tasks in the <paramref name="tasks" /> array have completed.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="b2054-261">Jeton d’annulation à associer à la nouvelle tâche de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-261">The cancellation token to assign to the new continuation task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b2054-262">Crée une tâche de continuation qui démarre lorsqu'un ensemble de tâches spécifiées est terminé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-262">Creates a continuation task that starts when a set of specified tasks has completed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b2054-263">Nouvelle tâche de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-263">The new continuation task.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b2054-264">Un élément du tableau <paramref name="tasks" /> a été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-264">An element in the <paramref name="tasks" /> array has been disposed.</span>
          </span>
          <span data-ttu-id="b2054-265">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-265">-or-</span>
          </span>
          <span data-ttu-id="b2054-266">Le <see cref="T:System.Threading.CancellationTokenSource" /> qui a créé <paramref name="cancellationToken" /> a déjà été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-266">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b2054-267">Le tableau <paramref name="tasks" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-267">The <paramref name="tasks" /> array is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="b2054-268">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-268">-or-</span>
          </span>
          <span data-ttu-id="b2054-269">L'argument <paramref name="continuationAction" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-269">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b2054-270">Le tableau <paramref name="tasks" /> est vide ou contient une valeur null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-270">The <paramref name="tasks" /> array is empty or contains a null value.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="b2054-271">Bibliothèque parallèle de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-271">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="b2054-272">Chaînage des tâches à l’aide de tâches de continuation</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-272">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md">
          <span data-ttu-id="b2054-273">Annulation de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-273">Task Cancellation</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TAntecedentResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAll&lt;TAntecedentResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]&gt; continuationAction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAll&lt;TAntecedentResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[]&gt; continuationAction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAll(Of TAntecedentResult) (tasks As Task(Of TAntecedentResult)(), continuationAction As Action(Of Task(Of TAntecedentResult)()), continuationOptions As TaskContinuationOptions) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult&gt;&#xA; System::Threading::Tasks::Task ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Action&lt;cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^&gt; ^ continuationAction, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Action&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[]&gt; * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.Task" Usage="taskFactory.ContinueWhenAll (tasks, continuationAction, continuationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]&gt;" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult">
          <span data-ttu-id="b2054-274">Type du résultat du <paramref name="tasks" /> antécédent.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-274">The type of the result of the antecedent <paramref name="tasks" />.</span>
          </span>
        </typeparam>
        <param name="tasks">
          <span data-ttu-id="b2054-275">Tableau de tâches à partir duquel continuer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-275">The array of tasks from which to continue.</span>
          </span>
        </param>
        <param name="continuationAction">
          <span data-ttu-id="b2054-276">Délégué d’action à exécuter quand toutes les tâches du tableau <paramref name="tasks" /> sont terminées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-276">The action delegate to execute when all tasks in the <paramref name="tasks" /> array have completed.</span>
          </span>
        </param>
        <param name="continuationOptions">
          <span data-ttu-id="b2054-277">Combinaison d’opérations de bits des valeurs d’énumération qui contrôlent le comportement de la nouvelle tâche de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-277">A bitwise combination of the enumeration values that control the behavior of the new continuation task.</span>
          </span>
          <span data-ttu-id="b2054-278">Les membres NotOn\* et OnlyOn\* ne sont pas pris en charge.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-278">The NotOn\* and OnlyOn\* members are not supported.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b2054-279">Crée une tâche de continuation qui démarre lorsqu'un ensemble de tâches spécifiées est terminé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-279">Creates a continuation task that starts when a set of specified tasks has completed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b2054-280">Nouvelle tâche de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-280">The new continuation task.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b2054-281">Un élément du tableau <paramref name="tasks" /> a été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-281">An element in the <paramref name="tasks" /> array has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b2054-282">Le tableau <paramref name="tasks" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-282">The <paramref name="tasks" /> array is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="b2054-283">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-283">-or-</span>
          </span>
          <span data-ttu-id="b2054-284">L'argument <paramref name="continuationAction" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-284">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b2054-285">L'argument <paramref name="continuationOptions" /> spécifie une valeur non valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-285">The <paramref name="continuationOptions" /> argument specifies an invalid value.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b2054-286">Le tableau <paramref name="tasks" /> est vide ou contient une valeur null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-286">The <paramref name="tasks" /> array is empty or contains a null value.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="b2054-287">Bibliothèque parallèle de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-287">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="b2054-288">Chaînage des tâches à l’aide de tâches de continuation</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-288">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md">
          <span data-ttu-id="b2054-289">Annulation de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-289">Task Cancellation</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TAntecedentResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAll&lt;TAntecedentResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]&gt; continuationAction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAll&lt;TAntecedentResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[]&gt; continuationAction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult&gt;&#xA; System::Threading::Tasks::Task ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Action&lt;cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^&gt; ^ continuationAction, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Action&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[]&gt; * System.Threading.CancellationToken * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task" Usage="taskFactory.ContinueWhenAll (tasks, continuationAction, cancellationToken, continuationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult">
          <span data-ttu-id="b2054-290">Type du résultat du <paramref name="tasks" /> antécédent.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-290">The type of the result of the antecedent <paramref name="tasks" />.</span>
          </span>
        </typeparam>
        <param name="tasks">
          <span data-ttu-id="b2054-291">Tableau de tâches à partir duquel continuer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-291">The array of tasks from which to continue.</span>
          </span>
        </param>
        <param name="continuationAction">
          <span data-ttu-id="b2054-292">Délégué d'action à exécuter quand toutes les tâches du tableau <paramref name="tasks" /> sont terminées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-292">The action delegate to execute when all tasks in the <paramref name="tasks" /> array have completed.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="b2054-293">Jeton d’annulation à associer à la nouvelle tâche de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-293">The cancellation token to assign to the new continuation task.</span>
          </span>
        </param>
        <param name="continuationOptions">
          <span data-ttu-id="b2054-294">Combinaison d’opérations de bits des valeurs d’énumération qui contrôlent le comportement de la nouvelle tâche de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-294">A bitwise combination of the enumeration values that control the behavior of the new continuation task.</span>
          </span>
          <span data-ttu-id="b2054-295">Les membres NotOn\* et OnlyOn\* ne sont pas pris en charge.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-295">The NotOn\* and OnlyOn\* members are not supported.</span>
          </span>
        </param>
        <param name="scheduler">
          <span data-ttu-id="b2054-296">Objet utilisé pour planifier la nouvelle tâche de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-296">The object that is used to schedule the new continuation task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b2054-297">Crée une tâche de continuation qui démarre lorsqu'un ensemble de tâches spécifiées est terminé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-297">Creates a continuation task that starts when a set of specified tasks has completed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b2054-298">Nouvelle tâche de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-298">The new continuation task.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b2054-299">Le tableau <paramref name="tasks" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-299">The <paramref name="tasks" /> array is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="b2054-300">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-300">-or-</span>
          </span>
          <span data-ttu-id="b2054-301">L'argument <paramref name="continuationAction" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-301">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="b2054-302">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-302">-or-</span>
          </span>
          <span data-ttu-id="b2054-303">L'argument <paramref name="scheduler" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-303">The <paramref name="scheduler" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b2054-304">Le tableau <paramref name="tasks" /> est vide ou contient une valeur null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-304">The <paramref name="tasks" /> array is empty or contains a null value.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="b2054-305">Bibliothèque parallèle de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-305">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="b2054-306">Chaînage des tâches à l’aide de tâches de continuation</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-306">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md">
          <span data-ttu-id="b2054-307">Annulation de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-307">Task Cancellation</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAll&lt;TResult&gt; (System.Threading.Tasks.Task[] tasks, Func&lt;System.Threading.Tasks.Task[],TResult&gt; continuationFunction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAll&lt;TResult&gt;(class System.Threading.Tasks.Task[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task[], !!TResult&gt; continuationFunction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAll(Of TResult) (tasks As Task(), continuationFunction As Func(Of Task(), TResult)) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Func&lt;cli::array &lt;System::Threading::Tasks::Task ^&gt; ^, TResult&gt; ^ continuationFunction);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task[] * Func&lt;System.Threading.Tasks.Task[], 'Result&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAll (tasks, continuationFunction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task[],TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="b2054-308">Type du résultat retourné par le délégué <paramref name="continuationFunction" /> et associé à la tâche créée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-308">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created task.</span>
          </span>
        </typeparam>
        <param name="tasks">
          <span data-ttu-id="b2054-309">Tableau de tâches à partir duquel continuer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-309">The array of tasks from which to continue.</span>
          </span>
        </param>
        <param name="continuationFunction">
          <span data-ttu-id="b2054-310">Délégué de fonction à exécuter en mode asynchrone quand toutes les tâches du tableau <paramref name="tasks" /> sont terminées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-310">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b2054-311">Crée une tâche de continuation qui démarre lorsqu'un ensemble de tâches spécifiées est terminé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-311">Creates a continuation task that starts when a set of specified tasks has completed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b2054-312">Nouvelle tâche de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-312">The new continuation task.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b2054-313">Un élément du tableau <paramref name="tasks" /> a été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-313">An element in the <paramref name="tasks" /> array has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b2054-314">Le tableau <paramref name="tasks" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-314">The <paramref name="tasks" /> array is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="b2054-315">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-315">-or-</span>
          </span>
          <span data-ttu-id="b2054-316">L'argument <paramref name="continuationFunction" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-316">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b2054-317">Le tableau <paramref name="tasks" /> est vide ou contient une valeur null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-317">The <paramref name="tasks" /> array is empty or contains a null value.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="b2054-318">Bibliothèque parallèle de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-318">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="b2054-319">Chaînage des tâches à l’aide de tâches de continuation</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-319">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAll&lt;TResult&gt; (System.Threading.Tasks.Task[] tasks, Func&lt;System.Threading.Tasks.Task[],TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAll&lt;TResult&gt;(class System.Threading.Tasks.Task[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task[], !!TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Func&lt;cli::array &lt;System::Threading::Tasks::Task ^&gt; ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task[] * Func&lt;System.Threading.Tasks.Task[], 'Result&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAll (tasks, continuationFunction, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task[],TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="b2054-320">Type du résultat retourné par le délégué <paramref name="continuationFunction" /> et associé à la tâche créée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-320">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created task.</span>
          </span>
        </typeparam>
        <param name="tasks">
          <span data-ttu-id="b2054-321">Tableau de tâches à partir duquel continuer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-321">The array of tasks from which to continue.</span>
          </span>
        </param>
        <param name="continuationFunction">
          <span data-ttu-id="b2054-322">Délégué de fonction à exécuter en mode asynchrone quand toutes les tâches du tableau <paramref name="tasks" /> sont terminées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-322">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="b2054-323">Jeton d’annulation à associer à la nouvelle tâche de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-323">The cancellation token to assign to the new continuation task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b2054-324">Crée une tâche de continuation qui démarre lorsqu'un ensemble de tâches spécifiées est terminé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-324">Creates a continuation task that starts when a set of specified tasks has completed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b2054-325">Nouvelle tâche de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-325">The new continuation task.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b2054-326">Un élément du tableau <paramref name="tasks" /> a été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-326">An element in the <paramref name="tasks" /> array has been disposed.</span>
          </span>
          <span data-ttu-id="b2054-327">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-327">-or-</span>
          </span>
          <span data-ttu-id="b2054-328">Le <see cref="T:System.Threading.CancellationTokenSource" /> qui a créé <paramref name="cancellationToken" /> a déjà été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-328">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b2054-329">Le tableau <paramref name="tasks" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-329">The <paramref name="tasks" /> array is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="b2054-330">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-330">-or-</span>
          </span>
          <span data-ttu-id="b2054-331">L'argument <paramref name="continuationFunction" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-331">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b2054-332">Le tableau <paramref name="tasks" /> est vide ou contient une valeur null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-332">The <paramref name="tasks" /> array is empty or contains a null value.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="b2054-333">Bibliothèque parallèle de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-333">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="b2054-334">Chaînage des tâches à l’aide de tâches de continuation</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-334">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md">
          <span data-ttu-id="b2054-335">Annulation de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-335">Task Cancellation</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAll&lt;TResult&gt; (System.Threading.Tasks.Task[] tasks, Func&lt;System.Threading.Tasks.Task[],TResult&gt; continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAll&lt;TResult&gt;(class System.Threading.Tasks.Task[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task[], !!TResult&gt; continuationFunction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAll(Of TResult) (tasks As Task(), continuationFunction As Func(Of Task(), TResult), continuationOptions As TaskContinuationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Func&lt;cli::array &lt;System::Threading::Tasks::Task ^&gt; ^, TResult&gt; ^ continuationFunction, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task[] * Func&lt;System.Threading.Tasks.Task[], 'Result&gt; * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAll (tasks, continuationFunction, continuationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task[],TResult&gt;" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="b2054-336">Type du résultat retourné par le délégué <paramref name="continuationFunction" /> et associé à la tâche créée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-336">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created task.</span>
          </span>
        </typeparam>
        <param name="tasks">
          <span data-ttu-id="b2054-337">Tableau de tâches à partir duquel continuer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-337">The array of tasks from which to continue.</span>
          </span>
        </param>
        <param name="continuationFunction">
          <span data-ttu-id="b2054-338">Délégué de fonction à exécuter en mode asynchrone quand toutes les tâches du tableau <paramref name="tasks" /> sont terminées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-338">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</span>
          </span>
        </param>
        <param name="continuationOptions">
          <span data-ttu-id="b2054-339">Combinaison d’opérations de bits des valeurs d’énumération qui contrôlent le comportement de la nouvelle tâche de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-339">A bitwise combination of the enumeration values that control the behavior of the new continuation task.</span>
          </span>
          <span data-ttu-id="b2054-340">Les membres NotOn\* et OnlyOn\* ne sont pas pris en charge.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-340">The NotOn\* and OnlyOn\* members are not supported.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b2054-341">Crée une tâche de continuation qui démarre lorsqu'un ensemble de tâches spécifiées est terminé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-341">Creates a continuation task that starts when a set of specified tasks has completed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b2054-342">Nouvelle tâche de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-342">The new continuation task.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b2054-343">Un élément du tableau <paramref name="tasks" /> a été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-343">An element in the <paramref name="tasks" /> array has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b2054-344">Le tableau <paramref name="tasks" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-344">The <paramref name="tasks" /> array is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="b2054-345">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-345">-or-</span>
          </span>
          <span data-ttu-id="b2054-346">L'argument <paramref name="continuationFunction" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-346">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b2054-347">L'argument <paramref name="continuationOptions" /> spécifie une valeur non valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-347">The <paramref name="continuationOptions" /> argument specifies an invalid value.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b2054-348">Le tableau <paramref name="tasks" /> est vide ou contient une valeur null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-348">The <paramref name="tasks" /> array is empty or contains a null value.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="b2054-349">Bibliothèque parallèle de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-349">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="b2054-350">Chaînage des tâches à l’aide de tâches de continuation</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-350">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md">
          <span data-ttu-id="b2054-351">Annulation de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-351">Task Cancellation</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAll&lt;TResult&gt; (System.Threading.Tasks.Task[] tasks, Func&lt;System.Threading.Tasks.Task[],TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAll&lt;TResult&gt;(class System.Threading.Tasks.Task[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task[], !!TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Func&lt;cli::array &lt;System::Threading::Tasks::Task ^&gt; ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task[] * Func&lt;System.Threading.Tasks.Task[], 'Result&gt; * System.Threading.CancellationToken * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAll (tasks, continuationFunction, cancellationToken, continuationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task[],TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="b2054-352">Type du résultat retourné par le délégué <paramref name="continuationFunction" /> et associé à la tâche créée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-352">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created task.</span>
          </span>
        </typeparam>
        <param name="tasks">
          <span data-ttu-id="b2054-353">Tableau de tâches à partir duquel continuer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-353">The array of tasks from which to continue.</span>
          </span>
        </param>
        <param name="continuationFunction">
          <span data-ttu-id="b2054-354">Délégué de fonction à exécuter en mode asynchrone quand toutes les tâches du tableau <paramref name="tasks" /> sont terminées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-354">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="b2054-355">Jeton d’annulation à associer à la nouvelle tâche de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-355">The cancellation token to assign to the new continuation task.</span>
          </span>
        </param>
        <param name="continuationOptions">
          <span data-ttu-id="b2054-356">Combinaison d’opérations de bits des valeurs d’énumération qui contrôlent le comportement de la nouvelle tâche de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-356">A bitwise combination of the enumeration values that control the behavior of the new continuation task.</span>
          </span>
          <span data-ttu-id="b2054-357">Les membres NotOn\* et OnlyOn\* ne sont pas pris en charge.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-357">The NotOn\* and OnlyOn\* members are not supported.</span>
          </span>
        </param>
        <param name="scheduler">
          <span data-ttu-id="b2054-358">Objet utilisé pour planifier la nouvelle tâche de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-358">The object that is used to schedule the new continuation task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b2054-359">Crée une tâche de continuation qui démarre lorsqu'un ensemble de tâches spécifiées est terminé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-359">Creates a continuation task that starts when a set of specified tasks has completed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b2054-360">Nouvelle tâche de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-360">The new continuation task.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b2054-361">Le tableau <paramref name="tasks" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-361">The <paramref name="tasks" /> array is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="b2054-362">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-362">-or-</span>
          </span>
          <span data-ttu-id="b2054-363">L'argument <paramref name="continuationFunction" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-363">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="b2054-364">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-364">-or-</span>
          </span>
          <span data-ttu-id="b2054-365">L'argument <paramref name="scheduler" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-365">The <paramref name="scheduler" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b2054-366">Le tableau <paramref name="tasks" /> est vide ou contient une valeur null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-366">The <paramref name="tasks" /> array is empty or contains a null value.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="b2054-367">Bibliothèque parallèle de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-367">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="b2054-368">Chaînage des tâches à l’aide de tâches de continuation</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-368">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md">
          <span data-ttu-id="b2054-369">Annulation de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-369">Task Cancellation</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TAntecedentResult,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAll&lt;TAntecedentResult,TResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[],TResult&gt; continuationFunction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAll&lt;TAntecedentResult, TResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[], !!TResult&gt; continuationFunction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1})" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAll(Of TAntecedentResult, TResult) (tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult)(), TResult)) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult, typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Func&lt;cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^, TResult&gt; ^ continuationFunction);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Func&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[], 'Result&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAll (tasks, continuationFunction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[],TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult">
          <span data-ttu-id="b2054-370">Type du résultat du <paramref name="tasks" /> antécédent.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-370">The type of the result of the antecedent <paramref name="tasks" />.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="b2054-371">Type du résultat retourné par le délégué <paramref name="continuationFunction" /> et associé à la tâche créée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-371">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created task.</span>
          </span>
        </typeparam>
        <param name="tasks">
          <span data-ttu-id="b2054-372">Tableau de tâches à partir duquel continuer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-372">The array of tasks from which to continue.</span>
          </span>
        </param>
        <param name="continuationFunction">
          <span data-ttu-id="b2054-373">Délégué de fonction à exécuter en mode asynchrone quand toutes les tâches du tableau <paramref name="tasks" /> sont terminées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-373">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b2054-374">Crée une tâche de continuation qui démarre lorsqu'un ensemble de tâches spécifiées est terminé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-374">Creates a continuation task that starts when a set of specified tasks has completed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b2054-375">Nouvelle tâche de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-375">The new continuation task.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b2054-376">Un élément du tableau <paramref name="tasks" /> a été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-376">An element in the <paramref name="tasks" /> array has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b2054-377">Le tableau <paramref name="tasks" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-377">The <paramref name="tasks" /> array is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="b2054-378">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-378">-or-</span>
          </span>
          <span data-ttu-id="b2054-379">L'argument <paramref name="continuationFunction" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-379">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b2054-380">Le tableau <paramref name="tasks" /> est vide ou contient une valeur null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-380">The <paramref name="tasks" /> array is empty or contains a null value.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="b2054-381">Bibliothèque parallèle de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-381">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="b2054-382">Chaînage des tâches à l’aide de tâches de continuation</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-382">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md">
          <span data-ttu-id="b2054-383">Annulation de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-383">Task Cancellation</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TAntecedentResult,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAll&lt;TAntecedentResult,TResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[],TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAll&lt;TAntecedentResult, TResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[], !!TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult, typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Func&lt;cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Func&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[], 'Result&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAll (tasks, continuationFunction, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[],TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult">
          <span data-ttu-id="b2054-384">Type du résultat du <paramref name="tasks" /> antécédent.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-384">The type of the result of the antecedent <paramref name="tasks" />.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="b2054-385">Type du résultat retourné par le délégué <paramref name="continuationFunction" /> et associé à la tâche créée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-385">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created task.</span>
          </span>
        </typeparam>
        <param name="tasks">
          <span data-ttu-id="b2054-386">Tableau de tâches à partir duquel continuer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-386">The array of tasks from which to continue.</span>
          </span>
        </param>
        <param name="continuationFunction">
          <span data-ttu-id="b2054-387">Délégué de fonction à exécuter en mode asynchrone quand toutes les tâches du tableau <paramref name="tasks" /> sont terminées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-387">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="b2054-388">Jeton d’annulation à associer à la nouvelle tâche de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-388">The cancellation token to assign to the new continuation task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b2054-389">Crée une tâche de continuation qui démarre lorsqu'un ensemble de tâches spécifiées est terminé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-389">Creates a continuation task that starts when a set of specified tasks has completed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b2054-390">Nouvelle tâche de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-390">The new continuation task.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b2054-391">Un élément du tableau <paramref name="tasks" /> a été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-391">An element in the <paramref name="tasks" /> array has been disposed.</span>
          </span>
          <span data-ttu-id="b2054-392">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-392">-or-</span>
          </span>
          <span data-ttu-id="b2054-393">Le <see cref="T:System.Threading.CancellationTokenSource" /> qui a créé <paramref name="cancellationToken" /> a déjà été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-393">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b2054-394">Le tableau <paramref name="tasks" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-394">The <paramref name="tasks" /> array is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="b2054-395">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-395">-or-</span>
          </span>
          <span data-ttu-id="b2054-396">L'argument <paramref name="continuationFunction" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-396">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b2054-397">Le tableau <paramref name="tasks" /> est vide ou contient une valeur null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-397">The <paramref name="tasks" /> array is empty or contains a null value.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="b2054-398">Bibliothèque parallèle de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-398">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="b2054-399">Chaînage des tâches à l’aide de tâches de continuation</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-399">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md">
          <span data-ttu-id="b2054-400">Annulation de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-400">Task Cancellation</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TAntecedentResult,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAll&lt;TAntecedentResult,TResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[],TResult&gt; continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAll&lt;TAntecedentResult, TResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[], !!TResult&gt; continuationFunction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAll(Of TAntecedentResult, TResult) (tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult)(), TResult), continuationOptions As TaskContinuationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult, typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Func&lt;cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^, TResult&gt; ^ continuationFunction, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Func&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[], 'Result&gt; * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAll (tasks, continuationFunction, continuationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[],TResult&gt;" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult">
          <span data-ttu-id="b2054-401">Type du résultat du <paramref name="tasks" /> antécédent.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-401">The type of the result of the antecedent <paramref name="tasks" />.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="b2054-402">Type du résultat retourné par le délégué <paramref name="continuationFunction" /> et associé à la tâche créée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-402">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created task.</span>
          </span>
        </typeparam>
        <param name="tasks">
          <span data-ttu-id="b2054-403">Tableau de tâches à partir duquel continuer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-403">The array of tasks from which to continue.</span>
          </span>
        </param>
        <param name="continuationFunction">
          <span data-ttu-id="b2054-404">Délégué de fonction à exécuter en mode asynchrone quand toutes les tâches du tableau <paramref name="tasks" /> sont terminées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-404">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</span>
          </span>
        </param>
        <param name="continuationOptions">
          <span data-ttu-id="b2054-405">Combinaison d’opérations de bits des valeurs d’énumération qui contrôlent le comportement de la nouvelle tâche de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-405">A bitwise combination of the enumeration values that control the behavior of the new continuation task.</span>
          </span>
          <span data-ttu-id="b2054-406">Les membres NotOn\* et OnlyOn\* ne sont pas pris en charge.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-406">The NotOn\* and OnlyOn\* members are not supported.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b2054-407">Crée une tâche de continuation qui démarre lorsqu'un ensemble de tâches spécifiées est terminé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-407">Creates a continuation task that starts when a set of specified tasks has completed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b2054-408">Nouvelle tâche de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-408">The new continuation task.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b2054-409">Un élément du tableau <paramref name="tasks" /> a été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-409">An element in the <paramref name="tasks" /> array has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b2054-410">Le tableau <paramref name="tasks" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-410">The <paramref name="tasks" /> array is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="b2054-411">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-411">-or-</span>
          </span>
          <span data-ttu-id="b2054-412">L'argument <paramref name="continuationFunction" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-412">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b2054-413">L'argument <paramref name="continuationOptions" /> spécifie une valeur non valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-413">The <paramref name="continuationOptions" /> argument specifies an invalid value.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b2054-414">Le tableau <paramref name="tasks" /> est vide ou contient une valeur null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-414">The <paramref name="tasks" /> array is empty or contains a null value.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="b2054-415">Bibliothèque parallèle de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-415">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="b2054-416">Chaînage des tâches à l’aide de tâches de continuation</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-416">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md">
          <span data-ttu-id="b2054-417">Annulation de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-417">Task Cancellation</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll&lt;TAntecedentResult,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAll&lt;TAntecedentResult,TResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[],TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAll&lt;TAntecedentResult, TResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[], !!TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult, typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAll(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Func&lt;cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAll : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Func&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[], 'Result&gt; * System.Threading.CancellationToken * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAll (tasks, continuationFunction, cancellationToken, continuationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[],TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult">
          <span data-ttu-id="b2054-418">Type du résultat du <paramref name="tasks" /> antécédent.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-418">The type of the result of the antecedent <paramref name="tasks" />.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="b2054-419">Type du résultat retourné par le délégué <paramref name="continuationFunction" /> et associé à la tâche créée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-419">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created task.</span>
          </span>
        </typeparam>
        <param name="tasks">
          <span data-ttu-id="b2054-420">Tableau de tâches à partir duquel continuer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-420">The array of tasks from which to continue.</span>
          </span>
        </param>
        <param name="continuationFunction">
          <span data-ttu-id="b2054-421">Délégué de fonction à exécuter en mode asynchrone quand toutes les tâches du tableau <paramref name="tasks" /> sont terminées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-421">The function delegate to execute asynchronously when all tasks in the <paramref name="tasks" /> array have completed.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="b2054-422">Jeton d’annulation à associer à la nouvelle tâche de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-422">The cancellation token to assign to the new continuation task.</span>
          </span>
        </param>
        <param name="continuationOptions">
          <span data-ttu-id="b2054-423">Combinaison d’opérations de bits des valeurs d’énumération qui contrôlent le comportement de la nouvelle tâche de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-423">A bitwise combination of the enumeration values that control the behavior of the new continuation task.</span>
          </span>
          <span data-ttu-id="b2054-424">Les membres NotOn\* et OnlyOn\* ne sont pas pris en charge.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-424">The NotOn\* and OnlyOn\* members are not supported.</span>
          </span>
        </param>
        <param name="scheduler">
          <span data-ttu-id="b2054-425">Objet utilisé pour planifier la nouvelle tâche de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-425">The object that is used to schedule the new continuation task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b2054-426">Crée une tâche de continuation qui démarre lorsqu'un ensemble de tâches spécifiées est terminé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-426">Creates a continuation task that starts when a set of specified tasks has completed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b2054-427">Nouvelle tâche de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-427">The new continuation task.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b2054-428">Le tableau <paramref name="tasks" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-428">The <paramref name="tasks" /> array is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="b2054-429">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-429">-or-</span>
          </span>
          <span data-ttu-id="b2054-430">L'argument <paramref name="continuationFunction" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-430">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="b2054-431">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-431">-or-</span>
          </span>
          <span data-ttu-id="b2054-432">L'argument <paramref name="scheduler" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-432">The <paramref name="scheduler" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b2054-433">Le tableau <paramref name="tasks" /> est vide ou contient une valeur null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-433">The <paramref name="tasks" /> array is empty or contains a null value.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b2054-434">L'argument <paramref name="continuationOptions" /> spécifie une valeur non valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-434">The <paramref name="continuationOptions" /> argument specifies an invalid value.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b2054-435">Un élément du tableau <paramref name="tasks" /> a été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-435">An element in the <paramref name="tasks" /> array has been disposed.</span>
          </span>
          <span data-ttu-id="b2054-436">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-436">-or-</span>
          </span>
          <span data-ttu-id="b2054-437">Le <see cref="T:System.Threading.CancellationTokenSource" /> qui a créé <paramref name="cancellationToken" /> a déjà été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-437">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="b2054-438">Bibliothèque parallèle de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-438">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="b2054-439">Chaînage des tâches à l’aide de tâches de continuation</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-439">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md">
          <span data-ttu-id="b2054-440">Annulation de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-440">Task Cancellation</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ContinueWhenAny">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="b2054-441">Crée une <see cref="T:System.Threading.Tasks.Task" /> de continuation qui démarrera quand l'une des tâches de l'ensemble fourni se terminera.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-441">Creates a continuation <see cref="T:System.Threading.Tasks.Task" /> that will be started upon the completion of any Task in the provided set.</span>
          </span>
        </summary>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="b2054-442">Bibliothèque parallèle de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-442">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="b2054-443">Chaînage des tâches à l’aide de tâches de continuation</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-443">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md">
          <span data-ttu-id="b2054-444">Annulation de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-444">Task Cancellation</span>
          </span>
        </related>
        <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/Samples-for-Parallel-b4b76364">
          <span data-ttu-id="b2054-445">Exemples de programmation parallèle avec .NET Framework</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-445">Samples for Parallel Programming with the .NET Framework</span>
          </span>
        </related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ContinueWhenAny">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAny (System.Threading.Tasks.Task[] tasks, Action&lt;System.Threading.Tasks.Task&gt; continuationAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAny(class System.Threading.Tasks.Task[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task&gt; continuationAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task})" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAny (tasks As Task(), continuationAction As Action(Of Task)) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Action&lt;System::Threading::Tasks::Task ^&gt; ^ continuationAction);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task[] * Action&lt;System.Threading.Tasks.Task&gt; -&gt; System.Threading.Tasks.Task" Usage="taskFactory.ContinueWhenAny (tasks, continuationAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&gt;" />
      </Parameters>
      <Docs>
        <param name="tasks">
          <span data-ttu-id="b2054-446">Tableau de tâches à partir duquel continuer lorsqu'une tâche se termine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-446">The array of tasks from which to continue when one task completes.</span>
          </span>
        </param>
        <param name="continuationAction">
          <span data-ttu-id="b2054-447">Délégué d'action à exécuter quand une tâche du tableau <paramref name="tasks" /> est terminée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-447">The action delegate to execute when one task in the <paramref name="tasks" /> array completes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b2054-448">Crée une <see cref="T:System.Threading.Tasks.Task" /> de continuation qui démarrera quand l'une des tâches de l'ensemble fourni se terminera.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-448">Creates a continuation <see cref="T:System.Threading.Tasks.Task" /> that will be started upon the completion of any Task in the provided set.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b2054-449">Nouvelle <see cref="T:System.Threading.Tasks.Task" /> de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-449">The new continuation <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b2054-450">L’exemple suivant montre comment utiliser `ContinueWhenAny` et `ContinueWhenAll`:</span><span class="sxs-lookup"><span data-stu-id="b2054-450">The following example shows how to use `ContinueWhenAny` and `ContinueWhenAll`:</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task#05](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/continuewhenmulti.cs#05)]
 [!code-vb[System.Threading.Tasks.Task#05](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/continuewhenmulti.vb#05)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b2054-451">L’un des éléments du tableau <paramref name="tasks" /> a été éliminé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-451">One of the elements in the <paramref name="tasks" /> array has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b2054-452">Le tableau <paramref name="tasks" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-452">The <paramref name="tasks" /> array is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="b2054-453">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-453">-or-</span>
          </span>
          <span data-ttu-id="b2054-454">L'argument <paramref name="continuationAction" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-454">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b2054-455">Le tableau <paramref name="tasks" /> contient une valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-455">The <paramref name="tasks" /> array contains a <see langword="null" /> value.</span>
          </span>
          <span data-ttu-id="b2054-456">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-456">-or-</span>
          </span>
          <span data-ttu-id="b2054-457">Le tableau <paramref name="tasks" /> est vide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-457">The <paramref name="tasks" /> array is empty.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="b2054-458">Bibliothèque parallèle de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-458">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="b2054-459">Chaînage des tâches à l’aide de tâches de continuation</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-459">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md">
          <span data-ttu-id="b2054-460">Annulation de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-460">Task Cancellation</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAny (System.Threading.Tasks.Task[] tasks, Action&lt;System.Threading.Tasks.Task&gt; continuationAction, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAny(class System.Threading.Tasks.Task[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task&gt; continuationAction, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Action&lt;System::Threading::Tasks::Task ^&gt; ^ continuationAction, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task[] * Action&lt;System.Threading.Tasks.Task&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="taskFactory.ContinueWhenAny (tasks, continuationAction, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tasks">
          <span data-ttu-id="b2054-461">Tableau de tâches à partir duquel continuer lorsqu'une tâche se termine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-461">The array of tasks from which to continue when one task completes.</span>
          </span>
        </param>
        <param name="continuationAction">
          <span data-ttu-id="b2054-462">Délégué d'action à exécuter quand une tâche du tableau <paramref name="tasks" /> est terminée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-462">The action delegate to execute when one task in the <paramref name="tasks" /> array completes.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="b2054-463">
            <see cref="T:System.Threading.CancellationToken" /> qui sera assigné à la nouvelle tâche de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-463">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b2054-464">Crée une <see cref="T:System.Threading.Tasks.Task" /> de continuation qui démarrera quand l'une des tâches de l'ensemble fourni se terminera.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-464">Creates a continuation <see cref="T:System.Threading.Tasks.Task" /> that will be started upon the completion of any Task in the provided set.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b2054-465">Nouvelle <see cref="T:System.Threading.Tasks.Task" /> de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-465">The new continuation <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b2054-466">L’un des éléments du tableau <paramref name="tasks" /> a été éliminé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-466">One of the elements in the <paramref name="tasks" /> array has been disposed.</span>
          </span>
          <span data-ttu-id="b2054-467">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-467">-or-</span>
          </span>
          <span data-ttu-id="b2054-468">
            <paramref name="cancellationToken" /> a déjà été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-468">
              <paramref name="cancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b2054-469">Le tableau <paramref name="tasks" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-469">The <paramref name="tasks" /> array is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="b2054-470">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-470">-or-</span>
          </span>
          <span data-ttu-id="b2054-471">L'argument <paramref name="continuationAction" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-471">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b2054-472">Le tableau <paramref name="tasks" /> contient une valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-472">The <paramref name="tasks" /> array contains a <see langword="null" /> value.</span>
          </span>
          <span data-ttu-id="b2054-473">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-473">-or-</span>
          </span>
          <span data-ttu-id="b2054-474">Le tableau <paramref name="tasks" /> est vide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-474">The <paramref name="tasks" /> array is empty .</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="b2054-475">Bibliothèque parallèle de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-475">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="b2054-476">Chaînage des tâches à l’aide de tâches de continuation</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-476">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md">
          <span data-ttu-id="b2054-477">Annulation de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-477">Task Cancellation</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAny (System.Threading.Tasks.Task[] tasks, Action&lt;System.Threading.Tasks.Task&gt; continuationAction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAny(class System.Threading.Tasks.Task[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task&gt; continuationAction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAny (tasks As Task(), continuationAction As Action(Of Task), continuationOptions As TaskContinuationOptions) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Action&lt;System::Threading::Tasks::Task ^&gt; ^ continuationAction, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task[] * Action&lt;System.Threading.Tasks.Task&gt; * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.Task" Usage="taskFactory.ContinueWhenAny (tasks, continuationAction, continuationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&gt;" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <param name="tasks">
          <span data-ttu-id="b2054-478">Tableau de tâches à partir duquel continuer lorsqu'une tâche se termine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-478">The array of tasks from which to continue when one task completes.</span>
          </span>
        </param>
        <param name="continuationAction">
          <span data-ttu-id="b2054-479">Délégué d'action à exécuter quand une tâche du tableau <paramref name="tasks" /> est terminée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-479">The action delegate to execute when one task in the <paramref name="tasks" /> array completes.</span>
          </span>
        </param>
        <param name="continuationOptions">
          <span data-ttu-id="b2054-480">Valeur <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> qui contrôle le comportement de la <see cref="T:System.Threading.Tasks.Task" /> de continuation créée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-480">The <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b2054-481">Crée une <see cref="T:System.Threading.Tasks.Task" /> de continuation qui démarrera quand l'une des tâches de l'ensemble fourni se terminera.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-481">Creates a continuation <see cref="T:System.Threading.Tasks.Task" /> that will be started upon the completion of any Task in the provided set.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b2054-482">Nouvelle <see cref="T:System.Threading.Tasks.Task" /> de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-482">The new continuation <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2054-483">NotOn \* et OnlyOn \* <xref:System.Threading.Tasks.TaskContinuationOptions>, qui contraignent pour lequel <xref:System.Threading.Tasks.TaskStatus> une continuation doit être exécutée, les États ne sont pas conformes avec ContinueWhenAny.</span><span class="sxs-lookup"><span data-stu-id="b2054-483">The NotOn\* and OnlyOn\* <xref:System.Threading.Tasks.TaskContinuationOptions>, which constrain for which <xref:System.Threading.Tasks.TaskStatus> states a continuation will be executed, are illegal with ContinueWhenAny.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b2054-484">Exception levée lorsque l'un des éléments dans le tableau <paramref name="tasks" /> a été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-484">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b2054-485">Exception levée lorsque le tableau <paramref name="tasks" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-485">The exception that is thrown when the <paramref name="tasks" /> array is null.</span>
          </span>
          <span data-ttu-id="b2054-486">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-486">-or-</span>
          </span>
          <span data-ttu-id="b2054-487">Exception levée quand l’argument <paramref name="continuationAction" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-487">The exception that is thrown when the <paramref name="continuationAction" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b2054-488">Exception levée lorsque l'argument <paramref name="continuationOptions" /> spécifie une valeur TaskContinuationOptions non valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-488">The exception that is thrown when the <paramref name="continuationOptions" /> argument specifies an invalid TaskContinuationOptions value.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b2054-489">Exception levée lorsque le tableau <paramref name="tasks" /> contient une valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-489">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.</span>
          </span>
          <span data-ttu-id="b2054-490">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-490">-or-</span>
          </span>
          <span data-ttu-id="b2054-491">Exception levée lorsque le tableau <paramref name="tasks" /> est vide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-491">The exception that is thrown when the <paramref name="tasks" /> array is empty.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="b2054-492">Bibliothèque parallèle de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-492">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="b2054-493">Chaînage des tâches à l’aide de tâches de continuation</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-493">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md">
          <span data-ttu-id="b2054-494">Annulation de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-494">Task Cancellation</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAny (System.Threading.Tasks.Task[] tasks, Action&lt;System.Threading.Tasks.Task&gt; continuationAction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAny(class System.Threading.Tasks.Task[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task&gt; continuationAction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Action&lt;System::Threading::Tasks::Task ^&gt; ^ continuationAction, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task[] * Action&lt;System.Threading.Tasks.Task&gt; * System.Threading.CancellationToken * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task" Usage="taskFactory.ContinueWhenAny (tasks, continuationAction, cancellationToken, continuationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="tasks">
          <span data-ttu-id="b2054-495">Tableau de tâches à partir duquel continuer lorsqu'une tâche se termine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-495">The array of tasks from which to continue when one task completes.</span>
          </span>
        </param>
        <param name="continuationAction">
          <span data-ttu-id="b2054-496">Délégué d'action à exécuter quand une tâche du tableau <paramref name="tasks" /> est terminée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-496">The action delegate to execute when one task in the <paramref name="tasks" /> array completes.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="b2054-497">
            <see cref="T:System.Threading.CancellationToken" /> qui sera assigné à la nouvelle tâche de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-497">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</span>
          </span>
        </param>
        <param name="continuationOptions">
          <span data-ttu-id="b2054-498">Valeur <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> qui contrôle le comportement de la <see cref="T:System.Threading.Tasks.Task" /> de continuation créée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-498">The <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </param>
        <param name="scheduler">
          <span data-ttu-id="b2054-499">
            <see cref="T:System.Threading.Tasks.TaskScheduler" /> utilisé pour planifier la <see cref="T:System.Threading.Tasks.Task" /> de continuation créée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-499">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the created continuation <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b2054-500">Crée une <see cref="T:System.Threading.Tasks.Task" /> de continuation qui démarrera quand l'une des tâches de l'ensemble fourni se terminera.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-500">Creates a continuation <see cref="T:System.Threading.Tasks.Task" /> that will be started upon the completion of any Task in the provided set.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b2054-501">Nouvelle <see cref="T:System.Threading.Tasks.Task" /> de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-501">The new continuation <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b2054-502">Exception levée lorsque le tableau <paramref name="tasks" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-502">The exception that is thrown when the <paramref name="tasks" /> array is null.</span>
          </span>
          <span data-ttu-id="b2054-503">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-503">-or-</span>
          </span>
          <span data-ttu-id="b2054-504">Exception levée quand l’argument <paramref name="continuationAction" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-504">The exception that is thrown when the <paramref name="continuationAction" /> argument is null.</span>
          </span>
          <span data-ttu-id="b2054-505">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-505">-or-</span>
          </span>
          <span data-ttu-id="b2054-506">Exception levée quand l’argument <paramref name="scheduler" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-506">The exception that is thrown when the <paramref name="scheduler" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b2054-507">Exception levée lorsque le tableau <paramref name="tasks" /> contient une valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-507">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.</span>
          </span>
          <span data-ttu-id="b2054-508">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-508">-or-</span>
          </span>
          <span data-ttu-id="b2054-509">Exception levée lorsque le tableau <paramref name="tasks" /> est vide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-509">The exception that is thrown when the <paramref name="tasks" /> array is empty.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="b2054-510">Bibliothèque parallèle de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-510">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="b2054-511">Chaînage des tâches à l’aide de tâches de continuation</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-511">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md">
          <span data-ttu-id="b2054-512">Annulation de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-512">Task Cancellation</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TAntecedentResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAny&lt;TAntecedentResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;&gt; continuationAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAny&lt;TAntecedentResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;&gt; continuationAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAny(Of TAntecedentResult) (tasks As Task(Of TAntecedentResult)(), continuationAction As Action(Of Task(Of TAntecedentResult))) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult&gt;&#xA; System::Threading::Tasks::Task ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Action&lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ continuationAction);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Action&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;&gt; -&gt; System.Threading.Tasks.Task" Usage="taskFactory.ContinueWhenAny (tasks, continuationAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult">
          <span data-ttu-id="b2054-513">Type du résultat du <paramref name="tasks" /> antécédent.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-513">The type of the result of the antecedent <paramref name="tasks" />.</span>
          </span>
        </typeparam>
        <param name="tasks">
          <span data-ttu-id="b2054-514">Tableau de tâches à partir duquel continuer lorsqu'une tâche se termine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-514">The array of tasks from which to continue when one task completes.</span>
          </span>
        </param>
        <param name="continuationAction">
          <span data-ttu-id="b2054-515">Délégué d'action à exécuter quand une tâche du tableau <paramref name="tasks" /> est terminée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-515">The action delegate to execute when one task in the <paramref name="tasks" /> array completes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b2054-516">Crée une <see cref="T:System.Threading.Tasks.Task" /> de continuation qui démarrera quand l'une des tâches de l'ensemble fourni se terminera.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-516">Creates a continuation <see cref="T:System.Threading.Tasks.Task" /> that will be started upon the completion of any Task in the provided set.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b2054-517">Nouvelle <see cref="T:System.Threading.Tasks.Task" /> de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-517">The new continuation <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b2054-518">Exception levée lorsque l'un des éléments dans le tableau <paramref name="tasks" /> a été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-518">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b2054-519">Exception levée lorsque le tableau <paramref name="tasks" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-519">The exception that is thrown when the <paramref name="tasks" /> array is null.</span>
          </span>
          <span data-ttu-id="b2054-520">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-520">-or-</span>
          </span>
          <span data-ttu-id="b2054-521">Exception levée quand l’argument <paramref name="continuationAction" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-521">The exception that is thrown when the <paramref name="continuationAction" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b2054-522">Exception levée lorsque le tableau <paramref name="tasks" /> contient une valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-522">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.</span>
          </span>
          <span data-ttu-id="b2054-523">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-523">-or-</span>
          </span>
          <span data-ttu-id="b2054-524">Exception levée lorsque le tableau <paramref name="tasks" /> est vide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-524">The exception that is thrown when the <paramref name="tasks" /> array is empty.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="b2054-525">Bibliothèque parallèle de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-525">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="b2054-526">Chaînage des tâches à l’aide de tâches de continuation</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-526">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md">
          <span data-ttu-id="b2054-527">Annulation de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-527">Task Cancellation</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TAntecedentResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAny&lt;TAntecedentResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;&gt; continuationAction, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAny&lt;TAntecedentResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;&gt; continuationAction, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult&gt;&#xA; System::Threading::Tasks::Task ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Action&lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ continuationAction, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Action&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="taskFactory.ContinueWhenAny (tasks, continuationAction, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult">
          <span data-ttu-id="b2054-528">Type du résultat du <paramref name="tasks" /> antécédent.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-528">The type of the result of the antecedent <paramref name="tasks" />.</span>
          </span>
        </typeparam>
        <param name="tasks">
          <span data-ttu-id="b2054-529">Tableau de tâches à partir duquel continuer lorsqu'une tâche se termine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-529">The array of tasks from which to continue when one task completes.</span>
          </span>
        </param>
        <param name="continuationAction">
          <span data-ttu-id="b2054-530">Délégué d'action à exécuter quand une tâche du tableau <paramref name="tasks" /> est terminée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-530">The action delegate to execute when one task in the <paramref name="tasks" /> array completes.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="b2054-531">
            <see cref="T:System.Threading.CancellationToken" /> qui sera assigné à la nouvelle tâche de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-531">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b2054-532">Crée une <see cref="T:System.Threading.Tasks.Task" /> de continuation qui démarrera quand l'une des tâches de l'ensemble fourni se terminera.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-532">Creates a continuation <see cref="T:System.Threading.Tasks.Task" /> that will be started upon the completion of any Task in the provided set.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b2054-533">Nouvelle <see cref="T:System.Threading.Tasks.Task" /> de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-533">The new continuation <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b2054-534">Exception levée lorsque l'un des éléments dans le tableau <paramref name="tasks" /> a été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-534">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.</span>
          </span>
          <span data-ttu-id="b2054-535">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-535">-or-</span>
          </span>
          <span data-ttu-id="b2054-536">Le <see cref="T:System.Threading.CancellationToken" /> fourni a déjà été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-536">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b2054-537">Exception levée lorsque le tableau <paramref name="tasks" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-537">The exception that is thrown when the <paramref name="tasks" /> array is null.</span>
          </span>
          <span data-ttu-id="b2054-538">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-538">-or-</span>
          </span>
          <span data-ttu-id="b2054-539">Exception levée quand l’argument <paramref name="continuationAction" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-539">The exception that is thrown when the <paramref name="continuationAction" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b2054-540">Exception levée lorsque le tableau <paramref name="tasks" /> contient une valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-540">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.</span>
          </span>
          <span data-ttu-id="b2054-541">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-541">-or-</span>
          </span>
          <span data-ttu-id="b2054-542">Exception levée lorsque le tableau <paramref name="tasks" /> est vide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-542">The exception that is thrown when the <paramref name="tasks" /> array is empty.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="b2054-543">Bibliothèque parallèle de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-543">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="b2054-544">Chaînage des tâches à l’aide de tâches de continuation</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-544">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md">
          <span data-ttu-id="b2054-545">Annulation de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-545">Task Cancellation</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TAntecedentResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAny&lt;TAntecedentResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;&gt; continuationAction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAny&lt;TAntecedentResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;&gt; continuationAction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAny(Of TAntecedentResult) (tasks As Task(Of TAntecedentResult)(), continuationAction As Action(Of Task(Of TAntecedentResult)), continuationOptions As TaskContinuationOptions) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult&gt;&#xA; System::Threading::Tasks::Task ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Action&lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ continuationAction, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Action&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;&gt; * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.Task" Usage="taskFactory.ContinueWhenAny (tasks, continuationAction, continuationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;&gt;" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult">
          <span data-ttu-id="b2054-546">Type du résultat du <paramref name="tasks" /> antécédent.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-546">The type of the result of the antecedent <paramref name="tasks" />.</span>
          </span>
        </typeparam>
        <param name="tasks">
          <span data-ttu-id="b2054-547">Tableau de tâches à partir duquel continuer lorsqu'une tâche se termine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-547">The array of tasks from which to continue when one task completes.</span>
          </span>
        </param>
        <param name="continuationAction">
          <span data-ttu-id="b2054-548">Délégué d'action à exécuter quand une tâche du tableau <paramref name="tasks" /> est terminée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-548">The action delegate to execute when one task in the <paramref name="tasks" /> array completes.</span>
          </span>
        </param>
        <param name="continuationOptions">
          <span data-ttu-id="b2054-549">Valeur <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> qui contrôle le comportement de la <see cref="T:System.Threading.Tasks.Task" /> de continuation créée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-549">The <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b2054-550">Crée une <see cref="T:System.Threading.Tasks.Task" /> de continuation qui démarrera quand l'une des tâches de l'ensemble fourni se terminera.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-550">Creates a continuation <see cref="T:System.Threading.Tasks.Task" /> that will be started upon the completion of any Task in the provided set.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b2054-551">Nouvelle <see cref="T:System.Threading.Tasks.Task" /> de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-551">The new continuation <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2054-552">NotOn \* et OnlyOn \* <xref:System.Threading.Tasks.TaskContinuationOptions>, qui contraignent pour lequel <xref:System.Threading.Tasks.TaskStatus> une continuation doit être exécutée, les États ne sont pas conformes avec ContinueWhenAny.</span><span class="sxs-lookup"><span data-stu-id="b2054-552">The NotOn\* and OnlyOn\* <xref:System.Threading.Tasks.TaskContinuationOptions>, which constrain for which <xref:System.Threading.Tasks.TaskStatus> states a continuation will be executed, are illegal with ContinueWhenAny.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b2054-553">Exception levée lorsque l'un des éléments dans le tableau <paramref name="tasks" /> a été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-553">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b2054-554">Exception levée lorsque le tableau <paramref name="tasks" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-554">The exception that is thrown when the <paramref name="tasks" /> array is null.</span>
          </span>
          <span data-ttu-id="b2054-555">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-555">-or-</span>
          </span>
          <span data-ttu-id="b2054-556">Exception levée quand l’argument <paramref name="continuationAction" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-556">The exception that is thrown when the <paramref name="continuationAction" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b2054-557">Exception levée lorsque l'argument <paramref name="continuationOptions" /> spécifie une valeur TaskContinuationOptions non valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-557">The exception that is thrown when the <paramref name="continuationOptions" /> argument specifies an invalid TaskContinuationOptions value.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b2054-558">Exception levée lorsque le tableau <paramref name="tasks" /> contient une valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-558">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.</span>
          </span>
          <span data-ttu-id="b2054-559">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-559">-or-</span>
          </span>
          <span data-ttu-id="b2054-560">Exception levée lorsque le tableau <paramref name="tasks" /> est vide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-560">The exception that is thrown when the <paramref name="tasks" /> array is empty.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="b2054-561">Bibliothèque parallèle de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-561">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="b2054-562">Chaînage des tâches à l’aide de tâches de continuation</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-562">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md">
          <span data-ttu-id="b2054-563">Annulation de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-563">Task Cancellation</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TAntecedentResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWhenAny&lt;TAntecedentResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;&gt; continuationAction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAny&lt;TAntecedentResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Action`1&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;&gt; continuationAction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult&gt;&#xA; System::Threading::Tasks::Task ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Action&lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ continuationAction, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Action&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;&gt; * System.Threading.CancellationToken * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task" Usage="taskFactory.ContinueWhenAny (tasks, continuationAction, cancellationToken, continuationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult">
          <span data-ttu-id="b2054-564">Type du résultat du <paramref name="tasks" /> antécédent.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-564">The type of the result of the antecedent <paramref name="tasks" />.</span>
          </span>
        </typeparam>
        <param name="tasks">
          <span data-ttu-id="b2054-565">Tableau de tâches à partir duquel continuer lorsqu'une tâche se termine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-565">The array of tasks from which to continue when one task completes.</span>
          </span>
        </param>
        <param name="continuationAction">
          <span data-ttu-id="b2054-566">Délégué d'action à exécuter quand une tâche du tableau <paramref name="tasks" /> est terminée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-566">The action delegate to execute when one task in the <paramref name="tasks" /> array completes.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="b2054-567">
            <see cref="T:System.Threading.CancellationToken" /> qui sera assigné à la nouvelle tâche de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-567">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</span>
          </span>
        </param>
        <param name="continuationOptions">
          <span data-ttu-id="b2054-568">Valeur <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> qui contrôle le comportement de la <see cref="T:System.Threading.Tasks.Task" /> de continuation créée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-568">The <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </param>
        <param name="scheduler">
          <span data-ttu-id="b2054-569">
            <see cref="T:System.Threading.Tasks.TaskScheduler" /> utilisé pour planifier la <see cref="T:System.Threading.Tasks.Task`1" /> de continuation créée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-569">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the created continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b2054-570">Crée une <see cref="T:System.Threading.Tasks.Task" /> de continuation qui démarrera quand l'une des tâches de l'ensemble fourni se terminera.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-570">Creates a continuation <see cref="T:System.Threading.Tasks.Task" /> that will be started upon the completion of any Task in the provided set.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b2054-571">Nouvelle <see cref="T:System.Threading.Tasks.Task" /> de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-571">The new continuation <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2054-572">NotOn \* et OnlyOn \* <xref:System.Threading.Tasks.TaskContinuationOptions>, qui contraignent pour lequel <xref:System.Threading.Tasks.TaskStatus> une continuation doit être exécutée, les États ne sont pas conformes avec ContinueWhenAny.</span><span class="sxs-lookup"><span data-stu-id="b2054-572">The NotOn\* and OnlyOn\* <xref:System.Threading.Tasks.TaskContinuationOptions>, which constrain for which <xref:System.Threading.Tasks.TaskStatus> states a continuation will be executed, are illegal with ContinueWhenAny.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b2054-573">Exception levée lorsque le tableau <paramref name="tasks" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-573">The exception that is thrown when the <paramref name="tasks" /> array is null.</span>
          </span>
          <span data-ttu-id="b2054-574">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-574">-or-</span>
          </span>
          <span data-ttu-id="b2054-575">Exception levée quand l’argument <paramref name="continuationAction" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-575">The exception that is thrown when the <paramref name="continuationAction" /> argument is null.</span>
          </span>
          <span data-ttu-id="b2054-576">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-576">-or-</span>
          </span>
          <span data-ttu-id="b2054-577">Exception levée quand l’argument <paramref name="scheduler" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-577">The exception that is thrown when the <paramref name="scheduler" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b2054-578">Exception levée lorsque le tableau <paramref name="tasks" /> contient une valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-578">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.</span>
          </span>
          <span data-ttu-id="b2054-579">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-579">-or-</span>
          </span>
          <span data-ttu-id="b2054-580">Exception levée lorsque le tableau <paramref name="tasks" /> est vide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-580">The exception that is thrown when the <paramref name="tasks" /> array is empty.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="b2054-581">Bibliothèque parallèle de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-581">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="b2054-582">Chaînage des tâches à l’aide de tâches de continuation</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-582">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md">
          <span data-ttu-id="b2054-583">Annulation de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-583">Task Cancellation</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAny&lt;TResult&gt; (System.Threading.Tasks.Task[] tasks, Func&lt;System.Threading.Tasks.Task,TResult&gt; continuationFunction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAny&lt;TResult&gt;(class System.Threading.Tasks.Task[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task, !!TResult&gt; continuationFunction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAny(Of TResult) (tasks As Task(), continuationFunction As Func(Of Task, TResult)) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Func&lt;System::Threading::Tasks::Task ^, TResult&gt; ^ continuationFunction);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task[] * Func&lt;System.Threading.Tasks.Task, 'Result&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAny (tasks, continuationFunction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="b2054-584">Type du résultat retourné par le délégué <paramref name="continuationFunction" /> et associé au <see cref="T:System.Threading.Tasks.Task`1" /> créé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-584">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </typeparam>
        <param name="tasks">
          <span data-ttu-id="b2054-585">Tableau de tâches à partir duquel continuer lorsqu'une tâche se termine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-585">The array of tasks from which to continue when one task completes.</span>
          </span>
        </param>
        <param name="continuationFunction">
          <span data-ttu-id="b2054-586">Délégué de fonction à exécuter en mode asynchrone quand une tâche du tableau <paramref name="tasks" /> est terminée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-586">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b2054-587">Crée une <see cref="T:System.Threading.Tasks.Task`1" /> de continuation qui démarrera quand l'une des tâches de l'ensemble fourni se terminera.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-587">Creates a continuation <see cref="T:System.Threading.Tasks.Task`1" /> that will be started upon the completion of any Task in the provided set.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b2054-588">Nouvelle <see cref="T:System.Threading.Tasks.Task`1" /> de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-588">The new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b2054-589">Exception levée lorsque l'un des éléments dans le tableau <paramref name="tasks" /> a été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-589">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b2054-590">Exception levée lorsque le tableau <paramref name="tasks" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-590">The exception that is thrown when the <paramref name="tasks" /> array is null.</span>
          </span>
          <span data-ttu-id="b2054-591">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-591">-or-</span>
          </span>
          <span data-ttu-id="b2054-592">Exception levée quand l’argument <paramref name="continuationFunction" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-592">The exception that is thrown when the <paramref name="continuationFunction" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b2054-593">Exception levée lorsque le tableau <paramref name="tasks" /> contient une valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-593">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.</span>
          </span>
          <span data-ttu-id="b2054-594">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-594">-or-</span>
          </span>
          <span data-ttu-id="b2054-595">Exception levée lorsque le tableau <paramref name="tasks" /> est vide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-595">The exception that is thrown when the <paramref name="tasks" /> array is empty.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="b2054-596">Bibliothèque parallèle de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-596">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="b2054-597">Chaînage des tâches à l’aide de tâches de continuation</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-597">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md">
          <span data-ttu-id="b2054-598">Annulation de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-598">Task Cancellation</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAny&lt;TResult&gt; (System.Threading.Tasks.Task[] tasks, Func&lt;System.Threading.Tasks.Task,TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAny&lt;TResult&gt;(class System.Threading.Tasks.Task[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task, !!TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Func&lt;System::Threading::Tasks::Task ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task[] * Func&lt;System.Threading.Tasks.Task, 'Result&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAny (tasks, continuationFunction, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="b2054-599">Type du résultat retourné par le délégué <paramref name="continuationFunction" /> et associé au <see cref="T:System.Threading.Tasks.Task`1" /> créé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-599">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </typeparam>
        <param name="tasks">
          <span data-ttu-id="b2054-600">Tableau de tâches à partir duquel continuer lorsqu'une tâche se termine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-600">The array of tasks from which to continue when one task completes.</span>
          </span>
        </param>
        <param name="continuationFunction">
          <span data-ttu-id="b2054-601">Délégué de fonction à exécuter en mode asynchrone quand une tâche du tableau <paramref name="tasks" /> est terminée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-601">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="b2054-602">
            <see cref="T:System.Threading.CancellationToken" /> qui sera assigné à la nouvelle tâche de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-602">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b2054-603">Crée une <see cref="T:System.Threading.Tasks.Task`1" /> de continuation qui démarrera quand l'une des tâches de l'ensemble fourni se terminera.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-603">Creates a continuation <see cref="T:System.Threading.Tasks.Task`1" /> that will be started upon the completion of any Task in the provided set.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b2054-604">Nouvelle <see cref="T:System.Threading.Tasks.Task`1" /> de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-604">The new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b2054-605">Exception levée lorsque l'un des éléments dans le tableau <paramref name="tasks" /> a été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-605">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.</span>
          </span>
          <span data-ttu-id="b2054-606">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-606">-or-</span>
          </span>
          <span data-ttu-id="b2054-607">Le <see cref="T:System.Threading.CancellationToken" /> fourni a déjà été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-607">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b2054-608">Exception levée lorsque le tableau <paramref name="tasks" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-608">The exception that is thrown when the <paramref name="tasks" /> array is null.</span>
          </span>
          <span data-ttu-id="b2054-609">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-609">-or-</span>
          </span>
          <span data-ttu-id="b2054-610">Exception levée quand l’argument <paramref name="continuationFunction" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-610">The exception that is thrown when the <paramref name="continuationFunction" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b2054-611">Exception levée lorsque le tableau <paramref name="tasks" /> contient une valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-611">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.</span>
          </span>
          <span data-ttu-id="b2054-612">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-612">-or-</span>
          </span>
          <span data-ttu-id="b2054-613">Exception levée lorsque le tableau <paramref name="tasks" /> est vide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-613">The exception that is thrown when the <paramref name="tasks" /> array is empty.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="b2054-614">Bibliothèque parallèle de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-614">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="b2054-615">Chaînage des tâches à l’aide de tâches de continuation</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-615">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md">
          <span data-ttu-id="b2054-616">Annulation de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-616">Task Cancellation</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAny&lt;TResult&gt; (System.Threading.Tasks.Task[] tasks, Func&lt;System.Threading.Tasks.Task,TResult&gt; continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAny&lt;TResult&gt;(class System.Threading.Tasks.Task[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task, !!TResult&gt; continuationFunction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAny(Of TResult) (tasks As Task(), continuationFunction As Func(Of Task, TResult), continuationOptions As TaskContinuationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Func&lt;System::Threading::Tasks::Task ^, TResult&gt; ^ continuationFunction, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task[] * Func&lt;System.Threading.Tasks.Task, 'Result&gt; * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAny (tasks, continuationFunction, continuationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,TResult&gt;" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="b2054-617">Type du résultat retourné par le délégué <paramref name="continuationFunction" /> et associé au <see cref="T:System.Threading.Tasks.Task`1" /> créé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-617">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </typeparam>
        <param name="tasks">
          <span data-ttu-id="b2054-618">Tableau de tâches à partir duquel continuer lorsqu'une tâche se termine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-618">The array of tasks from which to continue when one task completes.</span>
          </span>
        </param>
        <param name="continuationFunction">
          <span data-ttu-id="b2054-619">Délégué de fonction à exécuter en mode asynchrone quand une tâche du tableau <paramref name="tasks" /> est terminée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-619">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</span>
          </span>
        </param>
        <param name="continuationOptions">
          <span data-ttu-id="b2054-620">Valeur <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> qui contrôle le comportement de la <see cref="T:System.Threading.Tasks.Task`1" /> de continuation créée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-620">The <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b2054-621">Crée une <see cref="T:System.Threading.Tasks.Task`1" /> de continuation qui démarrera quand l'une des tâches de l'ensemble fourni se terminera.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-621">Creates a continuation <see cref="T:System.Threading.Tasks.Task`1" /> that will be started upon the completion of any Task in the provided set.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b2054-622">Nouvelle <see cref="T:System.Threading.Tasks.Task`1" /> de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-622">The new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2054-623">NotOn \* et OnlyOn \* <xref:System.Threading.Tasks.TaskContinuationOptions>, qui contraignent pour lequel <xref:System.Threading.Tasks.TaskStatus> une continuation doit être exécutée, les États ne sont pas conformes avec ContinueWhenAny.</span><span class="sxs-lookup"><span data-stu-id="b2054-623">The NotOn\* and OnlyOn\* <xref:System.Threading.Tasks.TaskContinuationOptions>, which constrain for which <xref:System.Threading.Tasks.TaskStatus> states a continuation will be executed, are illegal with ContinueWhenAny.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b2054-624">Exception levée lorsque l'un des éléments dans le tableau <paramref name="tasks" /> a été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-624">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b2054-625">Exception levée lorsque le tableau <paramref name="tasks" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-625">The exception that is thrown when the <paramref name="tasks" /> array is null.</span>
          </span>
          <span data-ttu-id="b2054-626">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-626">-or-</span>
          </span>
          <span data-ttu-id="b2054-627">Exception levée quand l’argument <paramref name="continuationFunction" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-627">The exception that is thrown when the <paramref name="continuationFunction" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b2054-628">Exception levée lorsque l'argument <paramref name="continuationOptions" /> spécifie une valeur TaskContinuationOptions non valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-628">The exception that is thrown when the <paramref name="continuationOptions" /> argument specifies an invalid TaskContinuationOptions value.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b2054-629">Exception levée lorsque le tableau <paramref name="tasks" /> contient une valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-629">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.</span>
          </span>
          <span data-ttu-id="b2054-630">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-630">-or-</span>
          </span>
          <span data-ttu-id="b2054-631">Exception levée lorsque le tableau <paramref name="tasks" /> est vide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-631">The exception that is thrown when the <paramref name="tasks" /> array is empty.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="b2054-632">Bibliothèque parallèle de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-632">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="b2054-633">Chaînage des tâches à l’aide de tâches de continuation</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-633">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md">
          <span data-ttu-id="b2054-634">Annulation de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-634">Task Cancellation</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAny&lt;TResult&gt; (System.Threading.Tasks.Task[] tasks, Func&lt;System.Threading.Tasks.Task,TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAny&lt;TResult&gt;(class System.Threading.Tasks.Task[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task, !!TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, Func&lt;System::Threading::Tasks::Task ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task[] * Func&lt;System.Threading.Tasks.Task, 'Result&gt; * System.Threading.CancellationToken * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAny (tasks, continuationFunction, cancellationToken, continuationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="b2054-635">Type du résultat retourné par le délégué <paramref name="continuationFunction" /> et associé au <see cref="T:System.Threading.Tasks.Task`1" /> créé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-635">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </typeparam>
        <param name="tasks">
          <span data-ttu-id="b2054-636">Tableau de tâches à partir duquel continuer lorsqu'une tâche se termine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-636">The array of tasks from which to continue when one task completes.</span>
          </span>
        </param>
        <param name="continuationFunction">
          <span data-ttu-id="b2054-637">Délégué de fonction à exécuter en mode asynchrone quand une tâche du tableau <paramref name="tasks" /> est terminée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-637">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="b2054-638">
            <see cref="T:System.Threading.CancellationToken" /> qui sera assigné à la nouvelle tâche de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-638">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</span>
          </span>
        </param>
        <param name="continuationOptions">
          <span data-ttu-id="b2054-639">Valeur <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> qui contrôle le comportement de la <see cref="T:System.Threading.Tasks.Task`1" /> de continuation créée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-639">The <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </param>
        <param name="scheduler">
          <span data-ttu-id="b2054-640">
            <see cref="T:System.Threading.Tasks.TaskScheduler" /> utilisé pour planifier la <see cref="T:System.Threading.Tasks.Task`1" /> de continuation créée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-640">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the created continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b2054-641">Crée une <see cref="T:System.Threading.Tasks.Task`1" /> de continuation qui démarrera quand l'une des tâches de l'ensemble fourni se terminera.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-641">Creates a continuation <see cref="T:System.Threading.Tasks.Task`1" /> that will be started upon the completion of any Task in the provided set.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b2054-642">Nouvelle <see cref="T:System.Threading.Tasks.Task`1" /> de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-642">The new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2054-643">NotOn \* et OnlyOn \* <xref:System.Threading.Tasks.TaskContinuationOptions>, qui contraignent pour lequel <xref:System.Threading.Tasks.TaskStatus> une continuation doit être exécutée, les États ne sont pas conformes avec ContinueWhenAny.</span><span class="sxs-lookup"><span data-stu-id="b2054-643">The NotOn\* and OnlyOn\* <xref:System.Threading.Tasks.TaskContinuationOptions>, which constrain for which <xref:System.Threading.Tasks.TaskStatus> states a continuation will be executed, are illegal with ContinueWhenAny.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b2054-644">Exception levée lorsque le tableau <paramref name="tasks" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-644">The exception that is thrown when the <paramref name="tasks" /> array is null.</span>
          </span>
          <span data-ttu-id="b2054-645">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-645">-or-</span>
          </span>
          <span data-ttu-id="b2054-646">Exception levée quand l’argument <paramref name="continuationFunction" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-646">The exception that is thrown when the <paramref name="continuationFunction" /> argument is null.</span>
          </span>
          <span data-ttu-id="b2054-647">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-647">-or-</span>
          </span>
          <span data-ttu-id="b2054-648">Exception levée quand l’argument <paramref name="scheduler" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-648">The exception that is thrown when the <paramref name="scheduler" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b2054-649">Exception levée lorsque le tableau <paramref name="tasks" /> contient une valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-649">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.</span>
          </span>
          <span data-ttu-id="b2054-650">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-650">-or-</span>
          </span>
          <span data-ttu-id="b2054-651">Exception levée lorsque le tableau <paramref name="tasks" /> est vide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-651">The exception that is thrown when the <paramref name="tasks" /> array is empty.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="b2054-652">Bibliothèque parallèle de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-652">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="b2054-653">Chaînage des tâches à l’aide de tâches de continuation</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-653">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md">
          <span data-ttu-id="b2054-654">Annulation de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-654">Task Cancellation</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TAntecedentResult,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAny&lt;TAntecedentResult,TResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;,TResult&gt; continuationFunction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAny&lt;TAntecedentResult, TResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;, !!TResult&gt; continuationFunction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1})" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAny(Of TAntecedentResult, TResult) (tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult), TResult)) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult, typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Func&lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^, TResult&gt; ^ continuationFunction);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Func&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;, 'Result&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAny (tasks, continuationFunction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult">
          <span data-ttu-id="b2054-655">Type du résultat du <paramref name="tasks" /> antécédent.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-655">The type of the result of the antecedent <paramref name="tasks" />.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="b2054-656">Type du résultat retourné par le délégué <paramref name="continuationFunction" /> et associé au <see cref="T:System.Threading.Tasks.Task`1" /> créé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-656">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </typeparam>
        <param name="tasks">
          <span data-ttu-id="b2054-657">Tableau de tâches à partir duquel continuer lorsqu'une tâche se termine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-657">The array of tasks from which to continue when one task completes.</span>
          </span>
        </param>
        <param name="continuationFunction">
          <span data-ttu-id="b2054-658">Délégué de fonction à exécuter en mode asynchrone quand une tâche du tableau <paramref name="tasks" /> est terminée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-658">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b2054-659">Crée une <see cref="T:System.Threading.Tasks.Task`1" /> de continuation qui démarrera quand l'une des tâches de l'ensemble fourni se terminera.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-659">Creates a continuation <see cref="T:System.Threading.Tasks.Task`1" /> that will be started upon the completion of any Task in the provided set.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b2054-660">Nouvelle <see cref="T:System.Threading.Tasks.Task`1" /> de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-660">The new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b2054-661">Exception levée lorsque l'un des éléments dans le tableau <paramref name="tasks" /> a été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-661">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b2054-662">Exception levée lorsque le tableau <paramref name="tasks" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-662">The exception that is thrown when the <paramref name="tasks" /> array is null.</span>
          </span>
          <span data-ttu-id="b2054-663">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-663">-or-</span>
          </span>
          <span data-ttu-id="b2054-664">Exception levée quand l’argument <paramref name="continuationFunction" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-664">The exception that is thrown when the <paramref name="continuationFunction" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b2054-665">Exception levée lorsque le tableau <paramref name="tasks" /> contient une valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-665">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.</span>
          </span>
          <span data-ttu-id="b2054-666">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-666">-or-</span>
          </span>
          <span data-ttu-id="b2054-667">Exception levée lorsque le tableau <paramref name="tasks" /> est vide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-667">The exception that is thrown when the <paramref name="tasks" /> array is empty.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="b2054-668">Bibliothèque parallèle de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-668">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="b2054-669">Chaînage des tâches à l’aide de tâches de continuation</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-669">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md">
          <span data-ttu-id="b2054-670">Annulation de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-670">Task Cancellation</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TAntecedentResult,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAny&lt;TAntecedentResult,TResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;,TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAny&lt;TAntecedentResult, TResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;, !!TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult, typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Func&lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Func&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;, 'Result&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAny (tasks, continuationFunction, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;,TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult">
          <span data-ttu-id="b2054-671">Type du résultat du <paramref name="tasks" /> antécédent.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-671">The type of the result of the antecedent <paramref name="tasks" />.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="b2054-672">Type du résultat retourné par le délégué <paramref name="continuationFunction" /> et associé au <see cref="T:System.Threading.Tasks.Task`1" /> créé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-672">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </typeparam>
        <param name="tasks">
          <span data-ttu-id="b2054-673">Tableau de tâches à partir duquel continuer lorsqu'une tâche se termine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-673">The array of tasks from which to continue when one task completes.</span>
          </span>
        </param>
        <param name="continuationFunction">
          <span data-ttu-id="b2054-674">Délégué de fonction à exécuter en mode asynchrone quand une tâche du tableau <paramref name="tasks" /> est terminée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-674">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="b2054-675">
            <see cref="T:System.Threading.CancellationToken" /> qui sera assigné à la nouvelle tâche de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-675">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b2054-676">Crée une <see cref="T:System.Threading.Tasks.Task`1" /> de continuation qui démarrera quand l'une des tâches de l'ensemble fourni se terminera.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-676">Creates a continuation <see cref="T:System.Threading.Tasks.Task`1" /> that will be started upon the completion of any Task in the provided set.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b2054-677">Nouvelle <see cref="T:System.Threading.Tasks.Task`1" /> de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-677">The new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b2054-678">Exception levée lorsque l'un des éléments dans le tableau <paramref name="tasks" /> a été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-678">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.</span>
          </span>
          <span data-ttu-id="b2054-679">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-679">-or-</span>
          </span>
          <span data-ttu-id="b2054-680">Le <see cref="T:System.Threading.CancellationToken" /> fourni a déjà été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-680">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b2054-681">Exception levée lorsque le tableau <paramref name="tasks" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-681">The exception that is thrown when the <paramref name="tasks" /> array is null.</span>
          </span>
          <span data-ttu-id="b2054-682">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-682">-or-</span>
          </span>
          <span data-ttu-id="b2054-683">Exception levée quand l’argument <paramref name="continuationFunction" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-683">The exception that is thrown when the <paramref name="continuationFunction" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b2054-684">Exception levée lorsque le tableau <paramref name="tasks" /> contient une valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-684">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.</span>
          </span>
          <span data-ttu-id="b2054-685">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-685">-or-</span>
          </span>
          <span data-ttu-id="b2054-686">Exception levée lorsque le tableau <paramref name="tasks" /> est vide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-686">The exception that is thrown when the <paramref name="tasks" /> array is empty.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="b2054-687">Bibliothèque parallèle de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-687">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="b2054-688">Chaînage des tâches à l’aide de tâches de continuation</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-688">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md">
          <span data-ttu-id="b2054-689">Annulation de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-689">Task Cancellation</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TAntecedentResult,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAny&lt;TAntecedentResult,TResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;,TResult&gt; continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAny&lt;TAntecedentResult, TResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;, !!TResult&gt; continuationFunction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWhenAny(Of TAntecedentResult, TResult) (tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult), TResult), continuationOptions As TaskContinuationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult, typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Func&lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^, TResult&gt; ^ continuationFunction, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Func&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;, 'Result&gt; * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAny (tasks, continuationFunction, continuationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;,TResult&gt;" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult">
          <span data-ttu-id="b2054-690">Type du résultat du <paramref name="tasks" /> antécédent.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-690">The type of the result of the antecedent <paramref name="tasks" />.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="b2054-691">Type du résultat retourné par le délégué <paramref name="continuationFunction" /> et associé au <see cref="T:System.Threading.Tasks.Task`1" /> créé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-691">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </typeparam>
        <param name="tasks">
          <span data-ttu-id="b2054-692">Tableau de tâches à partir duquel continuer lorsqu'une tâche se termine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-692">The array of tasks from which to continue when one task completes.</span>
          </span>
        </param>
        <param name="continuationFunction">
          <span data-ttu-id="b2054-693">Délégué de fonction à exécuter en mode asynchrone quand une tâche du tableau <paramref name="tasks" /> est terminée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-693">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</span>
          </span>
        </param>
        <param name="continuationOptions">
          <span data-ttu-id="b2054-694">Valeur <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> qui contrôle le comportement de la <see cref="T:System.Threading.Tasks.Task`1" /> de continuation créée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-694">The <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b2054-695">Crée une <see cref="T:System.Threading.Tasks.Task`1" /> de continuation qui démarrera quand l'une des tâches de l'ensemble fourni se terminera.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-695">Creates a continuation <see cref="T:System.Threading.Tasks.Task`1" /> that will be started upon the completion of any Task in the provided set.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b2054-696">Nouvelle <see cref="T:System.Threading.Tasks.Task`1" /> de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-696">The new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2054-697">NotOn \* et OnlyOn \* <xref:System.Threading.Tasks.TaskContinuationOptions>, qui contraignent pour lequel <xref:System.Threading.Tasks.TaskStatus> une continuation doit être exécutée, les États ne sont pas conformes avec ContinueWhenAny.</span><span class="sxs-lookup"><span data-stu-id="b2054-697">The NotOn\* and OnlyOn\* <xref:System.Threading.Tasks.TaskContinuationOptions>, which constrain for which <xref:System.Threading.Tasks.TaskStatus> states a continuation will be executed, are illegal with ContinueWhenAny.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b2054-698">Exception levée lorsque l'un des éléments dans le tableau <paramref name="tasks" /> a été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-698">The exception that is thrown when one of the elements in the <paramref name="tasks" /> array has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b2054-699">Exception levée lorsque le tableau <paramref name="tasks" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-699">The exception that is thrown when the <paramref name="tasks" /> array is null.</span>
          </span>
          <span data-ttu-id="b2054-700">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-700">-or-</span>
          </span>
          <span data-ttu-id="b2054-701">Exception levée quand l’argument <paramref name="continuationFunction" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-701">The exception that is thrown when the <paramref name="continuationFunction" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b2054-702">Exception levée lorsque l'argument <paramref name="continuationOptions" /> spécifie une valeur TaskContinuationOptions non valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-702">The exception that is thrown when the <paramref name="continuationOptions" /> argument specifies an invalid TaskContinuationOptions value.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b2054-703">Exception levée lorsque le tableau <paramref name="tasks" /> contient une valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-703">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.</span>
          </span>
          <span data-ttu-id="b2054-704">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-704">-or-</span>
          </span>
          <span data-ttu-id="b2054-705">Exception levée lorsque le tableau <paramref name="tasks" /> est vide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-705">The exception that is thrown when the <paramref name="tasks" /> array is empty.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="b2054-706">Bibliothèque parallèle de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-706">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="b2054-707">Chaînage des tâches à l’aide de tâches de continuation</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-707">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md">
          <span data-ttu-id="b2054-708">Annulation de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-708">Task Cancellation</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny&lt;TAntecedentResult,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWhenAny&lt;TAntecedentResult,TResult&gt; (System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[] tasks, Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;,TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWhenAny&lt;TAntecedentResult, TResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;[] tasks, class System.Func`2&lt;class System.Threading.Tasks.Task`1&lt;!!TAntecedentResult&gt;, !!TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TAntecedentResult, typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWhenAny(cli::array &lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^&gt; ^ tasks, Func&lt;System::Threading::Tasks::Task&lt;TAntecedentResult&gt; ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWhenAny : System.Threading.Tasks.Task&lt;'AntecedentResult&gt;[] * Func&lt;System.Threading.Tasks.Task&lt;'AntecedentResult&gt;, 'Result&gt; * System.Threading.CancellationToken * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.ContinueWhenAny (tasks, continuationFunction, cancellationToken, continuationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TAntecedentResult&gt;[]" />
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TAntecedentResult&gt;,TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TAntecedentResult">
          <span data-ttu-id="b2054-709">Type du résultat du <paramref name="tasks" /> antécédent.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-709">The type of the result of the antecedent <paramref name="tasks" />.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="b2054-710">Type du résultat retourné par le délégué <paramref name="continuationFunction" /> et associé au <see cref="T:System.Threading.Tasks.Task`1" /> créé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-710">The type of the result that is returned by the <paramref name="continuationFunction" /> delegate and associated with the created <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </typeparam>
        <param name="tasks">
          <span data-ttu-id="b2054-711">Tableau de tâches à partir duquel continuer lorsqu'une tâche se termine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-711">The array of tasks from which to continue when one task completes.</span>
          </span>
        </param>
        <param name="continuationFunction">
          <span data-ttu-id="b2054-712">Délégué de fonction à exécuter en mode asynchrone quand une tâche du tableau <paramref name="tasks" /> est terminée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-712">The function delegate to execute asynchronously when one task in the <paramref name="tasks" /> array completes.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="b2054-713">
            <see cref="T:System.Threading.CancellationToken" /> qui sera assigné à la nouvelle tâche de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-713">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</span>
          </span>
        </param>
        <param name="continuationOptions">
          <span data-ttu-id="b2054-714">Valeur <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> qui contrôle le comportement de la <see cref="T:System.Threading.Tasks.Task`1" /> de continuation créée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-714">The <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> value that controls the behavior of the created continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </param>
        <param name="scheduler">
          <span data-ttu-id="b2054-715">
            <see cref="T:System.Threading.Tasks.TaskScheduler" /> utilisé pour planifier la <see cref="T:System.Threading.Tasks.Task`1" /> de continuation créée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-715">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the created continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b2054-716">Crée une <see cref="T:System.Threading.Tasks.Task`1" /> de continuation qui démarrera quand l'une des tâches de l'ensemble fourni se terminera.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-716">Creates a continuation <see cref="T:System.Threading.Tasks.Task`1" /> that will be started upon the completion of any Task in the provided set.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b2054-717">Nouvelle <see cref="T:System.Threading.Tasks.Task`1" /> de continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-717">The new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2054-718">NotOn \* et OnlyOn \* <xref:System.Threading.Tasks.TaskContinuationOptions>, qui contraignent pour lequel <xref:System.Threading.Tasks.TaskStatus> une continuation doit être exécutée, les États ne sont pas conformes avec ContinueWhenAny.</span><span class="sxs-lookup"><span data-stu-id="b2054-718">The NotOn\* and OnlyOn\* <xref:System.Threading.Tasks.TaskContinuationOptions>, which constrain for which <xref:System.Threading.Tasks.TaskStatus> states a continuation will be executed, are illegal with ContinueWhenAny.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b2054-719">Exception levée lorsque le tableau <paramref name="tasks" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-719">The exception that is thrown when the <paramref name="tasks" /> array is null.</span>
          </span>
          <span data-ttu-id="b2054-720">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-720">-or-</span>
          </span>
          <span data-ttu-id="b2054-721">Exception levée quand l’argument <paramref name="continuationFunction" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-721">The exception that is thrown when the <paramref name="continuationFunction" /> argument is null.</span>
          </span>
          <span data-ttu-id="b2054-722">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-722">-or-</span>
          </span>
          <span data-ttu-id="b2054-723">Exception levée quand l’argument <paramref name="scheduler" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-723">The exception that is thrown when the <paramref name="scheduler" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b2054-724">Exception levée lorsque le tableau <paramref name="tasks" /> contient une valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-724">The exception that is thrown when the <paramref name="tasks" /> array contains a null value.</span>
          </span>
          <span data-ttu-id="b2054-725">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-725">-or-</span>
          </span>
          <span data-ttu-id="b2054-726">Exception levée lorsque le tableau <paramref name="tasks" /> est vide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-726">The exception that is thrown when the <paramref name="tasks" /> array is empty.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="b2054-727">Bibliothèque parallèle de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-727">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="b2054-728">Chaînage des tâches à l’aide de tâches de continuation</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-728">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md">
          <span data-ttu-id="b2054-729">Annulation de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-729">Task Cancellation</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="CreationOptions">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.TaskCreationOptions CreationOptions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Threading.Tasks.TaskCreationOptions CreationOptions" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.TaskFactory.CreationOptions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CreationOptions As TaskCreationOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::Tasks::TaskCreationOptions CreationOptions { System::Threading::Tasks::TaskCreationOptions get(); };" />
      <MemberSignature Language="F#" Value="member this.CreationOptions : System.Threading.Tasks.TaskCreationOptions" Usage="System.Threading.Tasks.TaskFactory.CreationOptions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.TaskCreationOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b2054-730">Obtient les options de création de tâches par défaut pour cette fabrique de tâches.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-730">Gets the default task creation options for this task factory.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b2054-731">Options de création de tâches par défaut pour cette fabrique de tâches.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-731">The default task creation options for this task factory.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2054-732">La valeur de propriété est utilisée pour créer toutes les tâches, à moins que les autres options sont spécifiées explicitement pendant les appels aux méthodes de cette fabrique.</span><span class="sxs-lookup"><span data-stu-id="b2054-732">The property value is used to create all tasks, unless other options are explicitly specified during calls to this factory's methods.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="b2054-733">Bibliothèque parallèle de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-733">Task Parallel Library (TPL)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="FromAsync">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="b2054-734">Crée un <see cref="T:System.Threading.Tasks.Task" /> qui représente une paire de méthodes Begin et End conformes au modèle de programmation asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-734">Creates a <see cref="T:System.Threading.Tasks.Task" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span>
          </span>
        </summary>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="b2054-735">Bibliothèque parallèle de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-735">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md">
          <span data-ttu-id="b2054-736">Utilisation de la bibliothèque parallèle de tâches (TPL) avec d’autres modèles asynchrones</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-736">Using TPL with Other Asynchronous Patterns</span>
          </span>
        </related>
      </Docs>
    </MemberGroup>
    <Member MemberName="FromAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task FromAsync (IAsyncResult asyncResult, Action&lt;IAsyncResult&gt; endMethod);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task FromAsync(class System.IAsyncResult asyncResult, class System.Action`1&lt;class System.IAsyncResult&gt; endMethod) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult})" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync (asyncResult As IAsyncResult, endMethod As Action(Of IAsyncResult)) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ FromAsync(IAsyncResult ^ asyncResult, Action&lt;IAsyncResult ^&gt; ^ endMethod);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : IAsyncResult * Action&lt;IAsyncResult&gt; -&gt; System.Threading.Tasks.Task" Usage="taskFactory.FromAsync (asyncResult, endMethod)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
        <Parameter Name="endMethod" Type="System.Action&lt;System.IAsyncResult&gt;" />
      </Parameters>
      <Docs>
        <param name="asyncResult">
          <span data-ttu-id="b2054-737">IAsyncResult dont l'achèvement doit déclencher le traitement du <paramref name="endMethod" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-737">The IAsyncResult whose completion should trigger the processing of the <paramref name="endMethod" />.</span>
          </span>
        </param>
        <param name="endMethod">
          <span data-ttu-id="b2054-738">Délégué d'action qui traite le <paramref name="asyncResult" /> terminé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-738">The action delegate that processes the completed <paramref name="asyncResult" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b2054-739">Crée une <see cref="T:System.Threading.Tasks.Task" /> qui exécute une action de la méthode End quand un <see cref="T:System.IAsyncResult" /> spécifié se termine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-739">Creates a <see cref="T:System.Threading.Tasks.Task" /> that executes an end method action when a specified <see cref="T:System.IAsyncResult" /> completes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b2054-740">
            <see cref="T:System.Threading.Tasks.Task" /> qui représente l'opération asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-740">A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!TIP]
>  <span data-ttu-id="b2054-741">Le <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> surcharges qui prennent un `asyncResult` paramètre ne sont pas aussi efficace que les surcharges qui prennent un `beginMethod` paramètre.</span><span class="sxs-lookup"><span data-stu-id="b2054-741">The <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> overloads that take an `asyncResult` parameter are not as efficient as the overloads that take a `beginMethod` parameter.</span></span> <span data-ttu-id="b2054-742">Si les performances sont un problème, utilisez les surcharges qui fournissent le `beginMethod` / `endMethod` modèle.</span><span class="sxs-lookup"><span data-stu-id="b2054-742">If performance is an issue, use the overloads that provide the `beginMethod`/`endMethod` pattern.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b2054-743">Exception levée quand l’argument <paramref name="asyncResult" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-743">The exception that is thrown when the <paramref name="asyncResult" /> argument is null.</span>
          </span>
          <span data-ttu-id="b2054-744">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-744">-or-</span>
          </span>
          <span data-ttu-id="b2054-745">Exception levée quand l’argument <paramref name="endMethod" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-745">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="b2054-746">Bibliothèque parallèle de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-746">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md">
          <span data-ttu-id="b2054-747">Utilisation de la bibliothèque parallèle de tâches (TPL) avec d’autres modèles asynchrones</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-747">Using TPL with Other Asynchronous Patterns</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task FromAsync (Func&lt;AsyncCallback,object,IAsyncResult&gt; beginMethod, Action&lt;IAsyncResult&gt; endMethod, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task FromAsync(class System.Func`3&lt;class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Action`1&lt;class System.IAsyncResult&gt; endMethod, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync (beginMethod As Func(Of AsyncCallback, Object, IAsyncResult), endMethod As Action(Of IAsyncResult), state As Object) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ FromAsync(Func&lt;AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Action&lt;IAsyncResult ^&gt; ^ endMethod, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;AsyncCallback, obj, IAsyncResult&gt; * Action&lt;IAsyncResult&gt; * obj -&gt; System.Threading.Tasks.Task" Usage="taskFactory.FromAsync (beginMethod, endMethod, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Action&lt;System.IAsyncResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="beginMethod">
          <span data-ttu-id="b2054-748">Délégué qui commence l'opération asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-748">The delegate that begins the asynchronous operation.</span>
          </span>
        </param>
        <param name="endMethod">
          <span data-ttu-id="b2054-749">Délégué qui termine l'opération asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-749">The delegate that ends the asynchronous operation.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="b2054-750">Objet contenant des données que le délégué <paramref name="beginMethod" /> doit utiliser.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-750">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b2054-751">Crée un <see cref="T:System.Threading.Tasks.Task" /> qui représente une paire de méthodes Begin et End conformes au modèle de programmation asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-751">Creates a <see cref="T:System.Threading.Tasks.Task" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b2054-752">
            <see cref="T:System.Threading.Tasks.Task" /> créée qui représente l'opération asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-752">The created <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2054-753">Le `beginMethod` délégué est démarré sur le thread qui <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> s’exécute sur.</span><span class="sxs-lookup"><span data-stu-id="b2054-753">The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on.</span></span>  <span data-ttu-id="b2054-754">Cette méthode lève les exceptions levées par le `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="b2054-754">This method throws any exceptions thrown by the `beginMethod`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b2054-755">Exception levée quand l’argument <paramref name="beginMethod" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-755">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.</span>
          </span>
          <span data-ttu-id="b2054-756">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-756">-or-</span>
          </span>
          <span data-ttu-id="b2054-757">Exception levée quand l’argument <paramref name="endMethod" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-757">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="b2054-758">Bibliothèque parallèle de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-758">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md">
          <span data-ttu-id="b2054-759">Utilisation de la bibliothèque parallèle de tâches (TPL) avec d’autres modèles asynchrones</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-759">Using TPL with Other Asynchronous Patterns</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task FromAsync (IAsyncResult asyncResult, Action&lt;IAsyncResult&gt; endMethod, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task FromAsync(class System.IAsyncResult asyncResult, class System.Action`1&lt;class System.IAsyncResult&gt; endMethod, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync (asyncResult As IAsyncResult, endMethod As Action(Of IAsyncResult), creationOptions As TaskCreationOptions) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ FromAsync(IAsyncResult ^ asyncResult, Action&lt;IAsyncResult ^&gt; ^ endMethod, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : IAsyncResult * Action&lt;IAsyncResult&gt; * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task" Usage="taskFactory.FromAsync (asyncResult, endMethod, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
        <Parameter Name="endMethod" Type="System.Action&lt;System.IAsyncResult&gt;" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <param name="asyncResult">
          <span data-ttu-id="b2054-760">IAsyncResult dont l'achèvement doit déclencher le traitement du <paramref name="endMethod" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-760">The IAsyncResult whose completion should trigger the processing of the <paramref name="endMethod" />.</span>
          </span>
        </param>
        <param name="endMethod">
          <span data-ttu-id="b2054-761">Délégué d'action qui traite le <paramref name="asyncResult" /> terminé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-761">The action delegate that processes the completed <paramref name="asyncResult" />.</span>
          </span>
        </param>
        <param name="creationOptions">
          <span data-ttu-id="b2054-762">Valeur TaskCreationOptions qui contrôle le comportement de la <see cref="T:System.Threading.Tasks.Task" /> créée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-762">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b2054-763">Crée une <see cref="T:System.Threading.Tasks.Task" /> qui exécute une action de la méthode End quand un <see cref="T:System.IAsyncResult" /> spécifié se termine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-763">Creates a <see cref="T:System.Threading.Tasks.Task" /> that executes an end method action when a specified <see cref="T:System.IAsyncResult" /> completes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b2054-764">
            <see cref="T:System.Threading.Tasks.Task" /> qui représente l'opération asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-764">A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!TIP]
>  <span data-ttu-id="b2054-765">Le <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> surcharges qui prennent un `asyncResult` paramètre ne sont pas aussi efficace que les surcharges qui prennent un `beginMethod` paramètre.</span><span class="sxs-lookup"><span data-stu-id="b2054-765">The <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> overloads that take an `asyncResult` parameter are not as efficient as the overloads that take a `beginMethod` parameter.</span></span> <span data-ttu-id="b2054-766">Si les performances sont un problème, utilisez les surcharges qui fournissent le `beginMethod` / `endMethod` modèle.</span><span class="sxs-lookup"><span data-stu-id="b2054-766">If performance is an issue, use the overloads that provide the `beginMethod`/`endMethod` pattern.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b2054-767">Exception levée quand l’argument <paramref name="asyncResult" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-767">The exception that is thrown when the <paramref name="asyncResult" /> argument is null.</span>
          </span>
          <span data-ttu-id="b2054-768">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-768">-or-</span>
          </span>
          <span data-ttu-id="b2054-769">Exception levée quand l’argument <paramref name="endMethod" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-769">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b2054-770">Exception levée lorsque l'argument <paramref name="creationOptions" /> spécifie une valeur TaskCreationOptions non valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-770">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span>
          </span>
          <span data-ttu-id="b2054-771">Pour plus d'informations, consultez la section Notes de la rubrique <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-771">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="b2054-772">Bibliothèque parallèle de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-772">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md">
          <span data-ttu-id="b2054-773">Utilisation de la bibliothèque parallèle de tâches (TPL) avec d’autres modèles asynchrones</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-773">Using TPL with Other Asynchronous Patterns</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task FromAsync (Func&lt;AsyncCallback,object,IAsyncResult&gt; beginMethod, Action&lt;IAsyncResult&gt; endMethod, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task FromAsync(class System.Func`3&lt;class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Action`1&lt;class System.IAsyncResult&gt; endMethod, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync (beginMethod As Func(Of AsyncCallback, Object, IAsyncResult), endMethod As Action(Of IAsyncResult), state As Object, creationOptions As TaskCreationOptions) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ FromAsync(Func&lt;AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Action&lt;IAsyncResult ^&gt; ^ endMethod, System::Object ^ state, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;AsyncCallback, obj, IAsyncResult&gt; * Action&lt;IAsyncResult&gt; * obj * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task" Usage="taskFactory.FromAsync (beginMethod, endMethod, state, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Action&lt;System.IAsyncResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <param name="beginMethod">
          <span data-ttu-id="b2054-774">Délégué qui commence l'opération asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-774">The delegate that begins the asynchronous operation.</span>
          </span>
        </param>
        <param name="endMethod">
          <span data-ttu-id="b2054-775">Délégué qui termine l'opération asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-775">The delegate that ends the asynchronous operation.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="b2054-776">Objet contenant des données que le délégué <paramref name="beginMethod" /> doit utiliser.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-776">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span>
          </span>
        </param>
        <param name="creationOptions">
          <span data-ttu-id="b2054-777">Valeur TaskCreationOptions qui contrôle le comportement de la <see cref="T:System.Threading.Tasks.Task" /> créée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-777">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b2054-778">Crée un <see cref="T:System.Threading.Tasks.Task" /> qui représente une paire de méthodes Begin et End conformes au modèle de programmation asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-778">Creates a <see cref="T:System.Threading.Tasks.Task" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b2054-779">
            <see cref="T:System.Threading.Tasks.Task" /> créée qui représente l'opération asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-779">The created <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2054-780">Le `beginMethod` délégué est démarré sur le thread qui <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> s’exécute sur.</span><span class="sxs-lookup"><span data-stu-id="b2054-780">The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on.</span></span> <span data-ttu-id="b2054-781">Cette méthode lève les exceptions levées par le `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="b2054-781">This method throws any exceptions thrown by the `beginMethod`.</span></span> <span data-ttu-id="b2054-782">Le <xref:System.Threading.Tasks.TaskCreationOptions> valeurs <xref:System.Threading.Tasks.TaskCreationOptions.PreferFairness>, <xref:System.Threading.Tasks.TaskCreationOptions.LongRunning> et <xref:System.Threading.Tasks.TaskCreationOptions.AttachedToParent> sont tous mutuellement.</span><span class="sxs-lookup"><span data-stu-id="b2054-782">The <xref:System.Threading.Tasks.TaskCreationOptions> values <xref:System.Threading.Tasks.TaskCreationOptions.PreferFairness>, <xref:System.Threading.Tasks.TaskCreationOptions.LongRunning> and <xref:System.Threading.Tasks.TaskCreationOptions.AttachedToParent> are all mutually exclusive.</span></span> <span data-ttu-id="b2054-783">Dans les méthodes FromAsync, soit `LongRunning` ou `AttachedToParent` lèvera une <xref:System.ArgumentOutOfRangeException> levée.</span><span class="sxs-lookup"><span data-stu-id="b2054-783">In the FromAsync methods, either `LongRunning` or `AttachedToParent` by themselves will cause an <xref:System.ArgumentOutOfRangeException> to be thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b2054-784">Exception levée quand l’argument <paramref name="beginMethod" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-784">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.</span>
          </span>
          <span data-ttu-id="b2054-785">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-785">-or-</span>
          </span>
          <span data-ttu-id="b2054-786">Exception levée quand l’argument <paramref name="endMethod" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-786">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b2054-787">Exception levée lorsque l'argument <paramref name="creationOptions" /> spécifie une valeur TaskCreationOptions non valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-787">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="b2054-788">Bibliothèque parallèle de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-788">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md">
          <span data-ttu-id="b2054-789">Utilisation de la bibliothèque parallèle de tâches (TPL) avec d’autres modèles asynchrones</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-789">Using TPL with Other Asynchronous Patterns</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task FromAsync (IAsyncResult asyncResult, Action&lt;IAsyncResult&gt; endMethod, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task FromAsync(class System.IAsyncResult asyncResult, class System.Action`1&lt;class System.IAsyncResult&gt; endMethod, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync (asyncResult As IAsyncResult, endMethod As Action(Of IAsyncResult), creationOptions As TaskCreationOptions, scheduler As TaskScheduler) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ FromAsync(IAsyncResult ^ asyncResult, Action&lt;IAsyncResult ^&gt; ^ endMethod, System::Threading::Tasks::TaskCreationOptions creationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : IAsyncResult * Action&lt;IAsyncResult&gt; * System.Threading.Tasks.TaskCreationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task" Usage="taskFactory.FromAsync (asyncResult, endMethod, creationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
        <Parameter Name="endMethod" Type="System.Action&lt;System.IAsyncResult&gt;" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="asyncResult">
          <span data-ttu-id="b2054-790">IAsyncResult dont l'achèvement doit déclencher le traitement du <paramref name="endMethod" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-790">The IAsyncResult whose completion should trigger the processing of the <paramref name="endMethod" />.</span>
          </span>
        </param>
        <param name="endMethod">
          <span data-ttu-id="b2054-791">Délégué d'action qui traite le <paramref name="asyncResult" /> terminé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-791">The action delegate that processes the completed <paramref name="asyncResult" />.</span>
          </span>
        </param>
        <param name="creationOptions">
          <span data-ttu-id="b2054-792">Valeur TaskCreationOptions qui contrôle le comportement de la <see cref="T:System.Threading.Tasks.Task" /> créée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-792">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </param>
        <param name="scheduler">
          <span data-ttu-id="b2054-793">
            <see cref="T:System.Threading.Tasks.TaskScheduler" /> utilisé pour planifier la tâche qui exécute la méthode End.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-793">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the task that executes the end method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b2054-794">Crée une <see cref="T:System.Threading.Tasks.Task" /> qui exécute une action de la méthode End quand un <see cref="T:System.IAsyncResult" /> spécifié se termine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-794">Creates a <see cref="T:System.Threading.Tasks.Task" /> that executes an end method action when a specified <see cref="T:System.IAsyncResult" /> completes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b2054-795">
            <see cref="T:System.Threading.Tasks.Task" /> créée qui représente l'opération asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-795">The created <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!TIP]
>  <span data-ttu-id="b2054-796">Le <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> surcharges qui prennent un `asyncResult` paramètre ne sont pas aussi efficace que les surcharges qui prennent un `beginMethod` paramètre.</span><span class="sxs-lookup"><span data-stu-id="b2054-796">The <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> overloads that take an `asyncResult` parameter are not as efficient as the overloads that take a `beginMethod` parameter.</span></span> <span data-ttu-id="b2054-797">Si les performances sont un problème, utilisez les surcharges qui fournissent le `beginMethod` / `endMethod` modèle.</span><span class="sxs-lookup"><span data-stu-id="b2054-797">If performance is an issue, use the overloads that provide the `beginMethod`/`endMethod` pattern.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b2054-798">Exception levée quand l’argument <paramref name="asyncResult" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-798">The exception that is thrown when the <paramref name="asyncResult" /> argument is null.</span>
          </span>
          <span data-ttu-id="b2054-799">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-799">-or-</span>
          </span>
          <span data-ttu-id="b2054-800">Exception levée quand l’argument <paramref name="endMethod" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-800">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span>
          </span>
          <span data-ttu-id="b2054-801">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-801">-or-</span>
          </span>
          <span data-ttu-id="b2054-802">Exception levée quand l’argument <paramref name="scheduler" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-802">The exception that is thrown when the <paramref name="scheduler" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b2054-803">Exception levée lorsque l'argument <paramref name="creationOptions" /> spécifie une valeur TaskCreationOptions non valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-803">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span>
          </span>
          <span data-ttu-id="b2054-804">Exception levée lorsque l'argument <paramref name="creationOptions" /> spécifie une valeur TaskCreationOptions non valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-804">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span>
          </span>
          <span data-ttu-id="b2054-805">Pour plus d'informations, consultez la section Notes de la rubrique <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-805">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="b2054-806">Bibliothèque parallèle de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-806">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md">
          <span data-ttu-id="b2054-807">Utilisation de la bibliothèque parallèle de tâches (TPL) avec d’autres modèles asynchrones</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-807">Using TPL with Other Asynchronous Patterns</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task FromAsync&lt;TArg1&gt; (Func&lt;TArg1,AsyncCallback,object,IAsyncResult&gt; beginMethod, Action&lt;IAsyncResult&gt; endMethod, TArg1 arg1, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task FromAsync&lt;TArg1&gt;(class System.Func`4&lt;!!TArg1, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Action`1&lt;class System.IAsyncResult&gt; endMethod, !!TArg1 arg1, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1) (beginMethod As Func(Of TArg1, AsyncCallback, Object, IAsyncResult), endMethod As Action(Of IAsyncResult), arg1 As TArg1, state As Object) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1&gt;&#xA; System::Threading::Tasks::Task ^ FromAsync(Func&lt;TArg1, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Action&lt;IAsyncResult ^&gt; ^ endMethod, TArg1 arg1, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, AsyncCallback, obj, IAsyncResult&gt; * Action&lt;IAsyncResult&gt; * 'TArg1 * obj -&gt; System.Threading.Tasks.Task" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Action&lt;System.IAsyncResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1">
          <span data-ttu-id="b2054-808">Type du premier argument passé au délégué de <paramref name="beginMethod" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-808">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span>
          </span>
        </typeparam>
        <param name="beginMethod">
          <span data-ttu-id="b2054-809">Délégué qui commence l'opération asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-809">The delegate that begins the asynchronous operation.</span>
          </span>
        </param>
        <param name="endMethod">
          <span data-ttu-id="b2054-810">Délégué qui termine l'opération asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-810">The delegate that ends the asynchronous operation.</span>
          </span>
        </param>
        <param name="arg1">
          <span data-ttu-id="b2054-811">Premier argument passé au délégué de <paramref name="beginMethod" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-811">The first argument passed to the <paramref name="beginMethod" /> delegate.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="b2054-812">Objet contenant des données que le délégué <paramref name="beginMethod" /> doit utiliser.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-812">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b2054-813">Crée un <see cref="T:System.Threading.Tasks.Task" /> qui représente une paire de méthodes Begin et End conformes au modèle de programmation asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-813">Creates a <see cref="T:System.Threading.Tasks.Task" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b2054-814">
            <see cref="T:System.Threading.Tasks.Task" /> créée qui représente l'opération asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-814">The created <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2054-815">Le `beginMethod` délégué est démarré sur le thread qui <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> s’exécute sur.</span><span class="sxs-lookup"><span data-stu-id="b2054-815">The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on.</span></span> <span data-ttu-id="b2054-816">Cette méthode lève les exceptions levées par le `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="b2054-816">This method throws any exceptions thrown by the `beginMethod`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b2054-817">Exception levée quand l’argument <paramref name="beginMethod" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-817">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.</span>
          </span>
          <span data-ttu-id="b2054-818">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-818">-or-</span>
          </span>
          <span data-ttu-id="b2054-819">Exception levée quand l’argument <paramref name="endMethod" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-819">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="b2054-820">Bibliothèque parallèle de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-820">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md">
          <span data-ttu-id="b2054-821">Utilisation de la bibliothèque parallèle de tâches (TPL) avec d’autres modèles asynchrones</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-821">Using TPL with Other Asynchronous Patterns</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task FromAsync&lt;TArg1&gt; (Func&lt;TArg1,AsyncCallback,object,IAsyncResult&gt; beginMethod, Action&lt;IAsyncResult&gt; endMethod, TArg1 arg1, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task FromAsync&lt;TArg1&gt;(class System.Func`4&lt;!!TArg1, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Action`1&lt;class System.IAsyncResult&gt; endMethod, !!TArg1 arg1, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1) (beginMethod As Func(Of TArg1, AsyncCallback, Object, IAsyncResult), endMethod As Action(Of IAsyncResult), arg1 As TArg1, state As Object, creationOptions As TaskCreationOptions) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1&gt;&#xA; System::Threading::Tasks::Task ^ FromAsync(Func&lt;TArg1, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Action&lt;IAsyncResult ^&gt; ^ endMethod, TArg1 arg1, System::Object ^ state, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, AsyncCallback, obj, IAsyncResult&gt; * Action&lt;IAsyncResult&gt; * 'TArg1 * obj * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, state, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Action&lt;System.IAsyncResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1">
          <span data-ttu-id="b2054-822">Type du premier argument passé au délégué de <paramref name="beginMethod" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-822">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span>
          </span>
        </typeparam>
        <param name="beginMethod">
          <span data-ttu-id="b2054-823">Délégué qui commence l'opération asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-823">The delegate that begins the asynchronous operation.</span>
          </span>
        </param>
        <param name="endMethod">
          <span data-ttu-id="b2054-824">Délégué qui termine l'opération asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-824">The delegate that ends the asynchronous operation.</span>
          </span>
        </param>
        <param name="arg1">
          <span data-ttu-id="b2054-825">Premier argument passé au délégué de <paramref name="beginMethod" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-825">The first argument passed to the <paramref name="beginMethod" /> delegate.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="b2054-826">Objet contenant des données que le délégué <paramref name="beginMethod" /> doit utiliser.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-826">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span>
          </span>
        </param>
        <param name="creationOptions">
          <span data-ttu-id="b2054-827">Valeur TaskCreationOptions qui contrôle le comportement de la <see cref="T:System.Threading.Tasks.Task" /> créée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-827">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b2054-828">Crée un <see cref="T:System.Threading.Tasks.Task" /> qui représente une paire de méthodes Begin et End conformes au modèle de programmation asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-828">Creates a <see cref="T:System.Threading.Tasks.Task" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b2054-829">
            <see cref="T:System.Threading.Tasks.Task" /> créée qui représente l'opération asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-829">The created <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2054-830">Le `beginMethod` délégué est démarré sur le thread qui <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> s’exécute sur.</span><span class="sxs-lookup"><span data-stu-id="b2054-830">The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on.</span></span> <span data-ttu-id="b2054-831">Cette méthode lève les exceptions levées par le `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="b2054-831">This method throws any exceptions thrown by the `beginMethod`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b2054-832">Exception levée quand l’argument <paramref name="beginMethod" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-832">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.</span>
          </span>
          <span data-ttu-id="b2054-833">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-833">-or-</span>
          </span>
          <span data-ttu-id="b2054-834">Exception levée quand l’argument <paramref name="endMethod" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-834">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b2054-835">Exception levée lorsque l'argument <paramref name="creationOptions" /> spécifie une valeur TaskCreationOptions non valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-835">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span>
          </span>
          <span data-ttu-id="b2054-836">Exception levée lorsque l'argument <paramref name="creationOptions" /> spécifie une valeur TaskCreationOptions non valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-836">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span>
          </span>
          <span data-ttu-id="b2054-837">Pour plus d'informations, consultez la section Notes de la rubrique <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-837">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="b2054-838">Bibliothèque parallèle de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-838">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md">
          <span data-ttu-id="b2054-839">Utilisation de la bibliothèque parallèle de tâches (TPL) avec d’autres modèles asynchrones</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-839">Using TPL with Other Asynchronous Patterns</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TResult&gt; (IAsyncResult asyncResult, Func&lt;IAsyncResult,TResult&gt; endMethod);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromAsync&lt;TResult&gt;(class System.IAsyncResult asyncResult, class System.Func`2&lt;class System.IAsyncResult, !!TResult&gt; endMethod) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TResult) (asyncResult As IAsyncResult, endMethod As Func(Of IAsyncResult, TResult)) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(IAsyncResult ^ asyncResult, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : IAsyncResult * Func&lt;IAsyncResult, 'Result&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (asyncResult, endMethod)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="b2054-840">Type du résultat disponible via le <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-840">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </typeparam>
        <param name="asyncResult">
          <span data-ttu-id="b2054-841">IAsyncResult dont l'achèvement doit déclencher le traitement du <paramref name="endMethod" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-841">The IAsyncResult whose completion should trigger the processing of the <paramref name="endMethod" />.</span>
          </span>
        </param>
        <param name="endMethod">
          <span data-ttu-id="b2054-842">Délégué de fonction qui traite l'<paramref name="asyncResult" /> terminé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-842">The function delegate that processes the completed <paramref name="asyncResult" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b2054-843">Crée un <see cref="T:System.Threading.Tasks.Task`1" /> qui exécute une fonction de méthode End quand un <see cref="T:System.IAsyncResult" /> spécifié se termine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-843">Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that executes an end method function when a specified <see cref="T:System.IAsyncResult" /> completes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b2054-844">
            <see cref="T:System.Threading.Tasks.Task`1" /> qui représente l'opération asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-844">A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!TIP]
>  <span data-ttu-id="b2054-845">Le <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> surcharges qui prennent un `asyncResult` paramètre ne sont pas aussi efficace que les surcharges qui prennent un `beginMethod` paramètre.</span><span class="sxs-lookup"><span data-stu-id="b2054-845">The <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> overloads that take an `asyncResult` parameter are not as efficient as the overloads that take a `beginMethod` parameter.</span></span> <span data-ttu-id="b2054-846">Si les performances sont un problème, utilisez les surcharges qui fournissent le `beginMethod` / `endMethod` modèle.</span><span class="sxs-lookup"><span data-stu-id="b2054-846">If performance is an issue, use the overloads that provide the `beginMethod`/`endMethod` pattern.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b2054-847">Exception levée quand l’argument <paramref name="asyncResult" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-847">The exception that is thrown when the <paramref name="asyncResult" /> argument is null.</span>
          </span>
          <span data-ttu-id="b2054-848">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-848">-or-</span>
          </span>
          <span data-ttu-id="b2054-849">Exception levée quand l’argument <paramref name="endMethod" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-849">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="b2054-850">Bibliothèque parallèle de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-850">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="b2054-851">Chaînage des tâches à l’aide de tâches de continuation</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-851">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md">
          <span data-ttu-id="b2054-852">Annulation de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-852">Task Cancellation</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TResult&gt; (Func&lt;AsyncCallback,object,IAsyncResult&gt; beginMethod, Func&lt;IAsyncResult,TResult&gt; endMethod, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromAsync&lt;TResult&gt;(class System.Func`3&lt;class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Func`2&lt;class System.IAsyncResult, !!TResult&gt; endMethod, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TResult) (beginMethod As Func(Of AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), state As Object) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(Func&lt;AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;AsyncCallback, obj, IAsyncResult&gt; * Func&lt;IAsyncResult, 'Result&gt; * obj -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (beginMethod, endMethod, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="b2054-853">Type du résultat disponible via le <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-853">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </typeparam>
        <param name="beginMethod">
          <span data-ttu-id="b2054-854">Délégué qui commence l'opération asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-854">The delegate that begins the asynchronous operation.</span>
          </span>
        </param>
        <param name="endMethod">
          <span data-ttu-id="b2054-855">Délégué qui termine l'opération asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-855">The delegate that ends the asynchronous operation.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="b2054-856">Objet contenant des données que le délégué <paramref name="beginMethod" /> doit utiliser.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-856">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b2054-857">Crée un <see cref="T:System.Threading.Tasks.Task`1" /> qui représente une paire de méthodes Begin et End conformes au modèle de programmation asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-857">Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b2054-858">
            <see cref="T:System.Threading.Tasks.Task`1" /> créée qui représente l'opération asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-858">The created <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2054-859">Cette méthode lève les exceptions levées par le `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="b2054-859">This method throws any exceptions thrown by the `beginMethod`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b2054-860">Exception levée quand l’argument <paramref name="beginMethod" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-860">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.</span>
          </span>
          <span data-ttu-id="b2054-861">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-861">-or-</span>
          </span>
          <span data-ttu-id="b2054-862">Exception levée quand l’argument <paramref name="endMethod" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-862">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="b2054-863">Bibliothèque parallèle de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-863">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md">
          <span data-ttu-id="b2054-864">Utilisation de la bibliothèque parallèle de tâches (TPL) avec d’autres modèles asynchrones</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-864">Using TPL with Other Asynchronous Patterns</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TResult&gt; (IAsyncResult asyncResult, Func&lt;IAsyncResult,TResult&gt; endMethod, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromAsync&lt;TResult&gt;(class System.IAsyncResult asyncResult, class System.Func`2&lt;class System.IAsyncResult, !!TResult&gt; endMethod, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TResult) (asyncResult As IAsyncResult, endMethod As Func(Of IAsyncResult, TResult), creationOptions As TaskCreationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(IAsyncResult ^ asyncResult, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : IAsyncResult * Func&lt;IAsyncResult, 'Result&gt; * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (asyncResult, endMethod, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="b2054-865">Type du résultat disponible via le <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-865">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </typeparam>
        <param name="asyncResult">
          <span data-ttu-id="b2054-866">IAsyncResult dont l'achèvement doit déclencher le traitement du <paramref name="endMethod" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-866">The IAsyncResult whose completion should trigger the processing of the <paramref name="endMethod" />.</span>
          </span>
        </param>
        <param name="endMethod">
          <span data-ttu-id="b2054-867">Délégué de fonction qui traite l'<paramref name="asyncResult" /> terminé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-867">The function delegate that processes the completed <paramref name="asyncResult" />.</span>
          </span>
        </param>
        <param name="creationOptions">
          <span data-ttu-id="b2054-868">Valeur TaskCreationOptions qui contrôle le comportement de la <see cref="T:System.Threading.Tasks.Task`1" /> créée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-868">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b2054-869">Crée un <see cref="T:System.Threading.Tasks.Task`1" /> qui exécute une fonction de méthode End quand un <see cref="T:System.IAsyncResult" /> spécifié se termine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-869">Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that executes an end method function when a specified <see cref="T:System.IAsyncResult" /> completes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b2054-870">
            <see cref="T:System.Threading.Tasks.Task`1" /> qui représente l'opération asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-870">A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!TIP]
>  <span data-ttu-id="b2054-871">Le <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> surcharges qui prennent un `asyncResult` paramètre ne sont pas aussi efficace que les surcharges qui prennent un `beginMethod` paramètre.</span><span class="sxs-lookup"><span data-stu-id="b2054-871">The <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> overloads that take an `asyncResult` parameter are not as efficient as the overloads that take a `beginMethod` parameter.</span></span> <span data-ttu-id="b2054-872">Si les performances sont un problème, utilisez les surcharges qui fournissent le `beginMethod` / `endMethod` modèle.</span><span class="sxs-lookup"><span data-stu-id="b2054-872">If performance is an issue, use the overloads that provide the `beginMethod`/`endMethod` pattern.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b2054-873">Exception levée quand l’argument <paramref name="asyncResult" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-873">The exception that is thrown when the <paramref name="asyncResult" /> argument is null.</span>
          </span>
          <span data-ttu-id="b2054-874">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-874">-or-</span>
          </span>
          <span data-ttu-id="b2054-875">Exception levée quand l’argument <paramref name="endMethod" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-875">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b2054-876">Exception levée lorsque l'argument <paramref name="creationOptions" /> spécifie une valeur TaskCreationOptions non valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-876">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span>
          </span>
          <span data-ttu-id="b2054-877">Exception levée lorsque l'argument <paramref name="creationOptions" /> spécifie une valeur TaskCreationOptions non valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-877">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span>
          </span>
          <span data-ttu-id="b2054-878">Pour plus d'informations, consultez la section Notes de la rubrique <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-878">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="b2054-879">Bibliothèque parallèle de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-879">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md">
          <span data-ttu-id="b2054-880">Utilisation de la bibliothèque parallèle de tâches (TPL) avec d’autres modèles asynchrones</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-880">Using TPL with Other Asynchronous Patterns</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TResult&gt; (Func&lt;AsyncCallback,object,IAsyncResult&gt; beginMethod, Func&lt;IAsyncResult,TResult&gt; endMethod, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromAsync&lt;TResult&gt;(class System.Func`3&lt;class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Func`2&lt;class System.IAsyncResult, !!TResult&gt; endMethod, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TResult) (beginMethod As Func(Of AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(Func&lt;AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, System::Object ^ state, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;AsyncCallback, obj, IAsyncResult&gt; * Func&lt;IAsyncResult, 'Result&gt; * obj * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (beginMethod, endMethod, state, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="b2054-881">Type du résultat disponible via le <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-881">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </typeparam>
        <param name="beginMethod">
          <span data-ttu-id="b2054-882">Délégué qui commence l'opération asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-882">The delegate that begins the asynchronous operation.</span>
          </span>
        </param>
        <param name="endMethod">
          <span data-ttu-id="b2054-883">Délégué qui termine l'opération asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-883">The delegate that ends the asynchronous operation.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="b2054-884">Objet contenant des données que le délégué <paramref name="beginMethod" /> doit utiliser.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-884">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span>
          </span>
        </param>
        <param name="creationOptions">
          <span data-ttu-id="b2054-885">Valeur TaskCreationOptions qui contrôle le comportement de la <see cref="T:System.Threading.Tasks.Task`1" /> créée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-885">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b2054-886">Crée un <see cref="T:System.Threading.Tasks.Task`1" /> qui représente une paire de méthodes Begin et End conformes au modèle de programmation asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-886">Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b2054-887">
            <see cref="T:System.Threading.Tasks.Task`1" /> créée qui représente l'opération asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-887">The created <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2054-888">Cette méthode lève les exceptions levées par le `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="b2054-888">This method throws any exceptions thrown by the `beginMethod`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b2054-889">Exception levée quand l’argument <paramref name="beginMethod" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-889">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.</span>
          </span>
          <span data-ttu-id="b2054-890">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-890">-or-</span>
          </span>
          <span data-ttu-id="b2054-891">Exception levée quand l’argument <paramref name="endMethod" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-891">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b2054-892">Exception levée lorsque l'argument <paramref name="creationOptions" /> spécifie une valeur TaskCreationOptions non valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-892">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span>
          </span>
          <span data-ttu-id="b2054-893">Exception levée lorsque l'argument <paramref name="creationOptions" /> spécifie une valeur TaskCreationOptions non valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-893">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span>
          </span>
          <span data-ttu-id="b2054-894">Pour plus d'informations, consultez la section Notes de la rubrique <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-894">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="b2054-895">Bibliothèque parallèle de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-895">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md">
          <span data-ttu-id="b2054-896">Utilisation de la bibliothèque parallèle de tâches (TPL) avec d’autres modèles asynchrones</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-896">Using TPL with Other Asynchronous Patterns</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TResult&gt; (IAsyncResult asyncResult, Func&lt;IAsyncResult,TResult&gt; endMethod, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromAsync&lt;TResult&gt;(class System.IAsyncResult asyncResult, class System.Func`2&lt;class System.IAsyncResult, !!TResult&gt; endMethod, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TResult) (asyncResult As IAsyncResult, endMethod As Func(Of IAsyncResult, TResult), creationOptions As TaskCreationOptions, scheduler As TaskScheduler) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(IAsyncResult ^ asyncResult, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, System::Threading::Tasks::TaskCreationOptions creationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : IAsyncResult * Func&lt;IAsyncResult, 'Result&gt; * System.Threading.Tasks.TaskCreationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (asyncResult, endMethod, creationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="b2054-897">Type du résultat disponible via le <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-897">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </typeparam>
        <param name="asyncResult">
          <span data-ttu-id="b2054-898">IAsyncResult dont l'achèvement doit déclencher le traitement du <paramref name="endMethod" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-898">The IAsyncResult whose completion should trigger the processing of the <paramref name="endMethod" />.</span>
          </span>
        </param>
        <param name="endMethod">
          <span data-ttu-id="b2054-899">Délégué de fonction qui traite l'<paramref name="asyncResult" /> terminé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-899">The function delegate that processes the completed <paramref name="asyncResult" />.</span>
          </span>
        </param>
        <param name="creationOptions">
          <span data-ttu-id="b2054-900">Valeur TaskCreationOptions qui contrôle le comportement de la <see cref="T:System.Threading.Tasks.Task`1" /> créée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-900">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </param>
        <param name="scheduler">
          <span data-ttu-id="b2054-901">
            <see cref="T:System.Threading.Tasks.TaskScheduler" /> utilisé pour planifier la tâche qui exécute la méthode End.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-901">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the task that executes the end method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b2054-902">Crée un <see cref="T:System.Threading.Tasks.Task`1" /> qui exécute une fonction de méthode End quand un <see cref="T:System.IAsyncResult" /> spécifié se termine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-902">Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that executes an end method function when a specified <see cref="T:System.IAsyncResult" /> completes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b2054-903">
            <see cref="T:System.Threading.Tasks.Task`1" /> qui représente l'opération asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-903">A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!TIP]
>  <span data-ttu-id="b2054-904">Le <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> surcharges qui prennent un `asyncResult` paramètre ne sont pas aussi efficace que les surcharges qui prennent un `beginMethod` paramètre.</span><span class="sxs-lookup"><span data-stu-id="b2054-904">The <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> overloads that take an `asyncResult` parameter are not as efficient as the overloads that take a `beginMethod` parameter.</span></span> <span data-ttu-id="b2054-905">Si les performances sont un problème, utilisez les surcharges qui fournissent le `beginMethod` / `endMethod` modèle.</span><span class="sxs-lookup"><span data-stu-id="b2054-905">If performance is an issue, use the overloads that provide the `beginMethod`/`endMethod` pattern.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b2054-906">Exception levée quand l’argument <paramref name="asyncResult" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-906">The exception that is thrown when the <paramref name="asyncResult" /> argument is null.</span>
          </span>
          <span data-ttu-id="b2054-907">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-907">-or-</span>
          </span>
          <span data-ttu-id="b2054-908">Exception levée quand l’argument <paramref name="endMethod" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-908">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span>
          </span>
          <span data-ttu-id="b2054-909">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-909">-or-</span>
          </span>
          <span data-ttu-id="b2054-910">Exception levée quand l’argument <paramref name="scheduler" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-910">The exception that is thrown when the <paramref name="scheduler" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b2054-911">Exception levée lorsque l'argument <paramref name="creationOptions" /> spécifie une valeur TaskCreationOptions non valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-911">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span>
          </span>
          <span data-ttu-id="b2054-912">Exception levée lorsque l'argument <paramref name="creationOptions" /> spécifie une valeur TaskCreationOptions non valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-912">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span>
          </span>
          <span data-ttu-id="b2054-913">Pour plus d'informations, consultez la section Notes de la rubrique <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-913">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="b2054-914">Bibliothèque parallèle de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-914">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md">
          <span data-ttu-id="b2054-915">Utilisation de la bibliothèque parallèle de tâches (TPL) avec d’autres modèles asynchrones</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-915">Using TPL with Other Asynchronous Patterns</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1,TArg2&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task FromAsync&lt;TArg1,TArg2&gt; (Func&lt;TArg1,TArg2,AsyncCallback,object,IAsyncResult&gt; beginMethod, Action&lt;IAsyncResult&gt; endMethod, TArg1 arg1, TArg2 arg2, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task FromAsync&lt;TArg1, TArg2&gt;(class System.Func`5&lt;!!TArg1, !!TArg2, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Action`1&lt;class System.IAsyncResult&gt; endMethod, !!TArg1 arg1, !!TArg2 arg2, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1, TArg2) (beginMethod As Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), endMethod As Action(Of IAsyncResult), arg1 As TArg1, arg2 As TArg2, state As Object) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1, typename TArg2&gt;&#xA; System::Threading::Tasks::Task ^ FromAsync(Func&lt;TArg1, TArg2, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Action&lt;IAsyncResult ^&gt; ^ endMethod, TArg1 arg1, TArg2 arg2, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, 'TArg2, AsyncCallback, obj, IAsyncResult&gt; * Action&lt;IAsyncResult&gt; * 'TArg1 * 'TArg2 * obj -&gt; System.Threading.Tasks.Task" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, arg2, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,TArg2,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Action&lt;System.IAsyncResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="arg2" Type="TArg2" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1">
          <span data-ttu-id="b2054-916">Type du deuxième argument passé au délégué de <paramref name="beginMethod" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-916">The type of the second argument passed to <paramref name="beginMethod" /> delegate.</span>
          </span>
        </typeparam>
        <typeparam name="TArg2">
          <span data-ttu-id="b2054-917">Type du premier argument passé au délégué de <paramref name="beginMethod" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-917">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span>
          </span>
        </typeparam>
        <param name="beginMethod">
          <span data-ttu-id="b2054-918">Délégué qui commence l'opération asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-918">The delegate that begins the asynchronous operation.</span>
          </span>
        </param>
        <param name="endMethod">
          <span data-ttu-id="b2054-919">Délégué qui termine l'opération asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-919">The delegate that ends the asynchronous operation.</span>
          </span>
        </param>
        <param name="arg1">
          <span data-ttu-id="b2054-920">Premier argument passé au délégué de <paramref name="beginMethod" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-920">The first argument passed to the <paramref name="beginMethod" /> delegate.</span>
          </span>
        </param>
        <param name="arg2">
          <span data-ttu-id="b2054-921">Deuxième argument passé au délégué de <paramref name="beginMethod" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-921">The second argument passed to the <paramref name="beginMethod" /> delegate.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="b2054-922">Objet contenant des données que le délégué <paramref name="beginMethod" /> doit utiliser.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-922">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b2054-923">Crée un <see cref="T:System.Threading.Tasks.Task" /> qui représente une paire de méthodes Begin et End conformes au modèle de programmation asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-923">Creates a <see cref="T:System.Threading.Tasks.Task" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b2054-924">
            <see cref="T:System.Threading.Tasks.Task" /> créée qui représente l'opération asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-924">The created <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2054-925">Le `beginMethod` délégué est démarré sur le thread qui <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> s’exécute sur.</span><span class="sxs-lookup"><span data-stu-id="b2054-925">The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on.</span></span> <span data-ttu-id="b2054-926">Cette méthode lève les exceptions levées par le `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="b2054-926">This method throws any exceptions thrown by the `beginMethod`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b2054-927">Exception levée quand l’argument <paramref name="beginMethod" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-927">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.</span>
          </span>
          <span data-ttu-id="b2054-928">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-928">-or-</span>
          </span>
          <span data-ttu-id="b2054-929">Exception levée quand l’argument <paramref name="endMethod" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-929">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="b2054-930">Bibliothèque parallèle de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-930">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md">
          <span data-ttu-id="b2054-931">Utilisation de la bibliothèque parallèle de tâches (TPL) avec d’autres modèles asynchrones</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-931">Using TPL with Other Asynchronous Patterns</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1,TArg2&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task FromAsync&lt;TArg1,TArg2&gt; (Func&lt;TArg1,TArg2,AsyncCallback,object,IAsyncResult&gt; beginMethod, Action&lt;IAsyncResult&gt; endMethod, TArg1 arg1, TArg2 arg2, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task FromAsync&lt;TArg1, TArg2&gt;(class System.Func`5&lt;!!TArg1, !!TArg2, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Action`1&lt;class System.IAsyncResult&gt; endMethod, !!TArg1 arg1, !!TArg2 arg2, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1, TArg2) (beginMethod As Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), endMethod As Action(Of IAsyncResult), arg1 As TArg1, arg2 As TArg2, state As Object, creationOptions As TaskCreationOptions) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1, typename TArg2&gt;&#xA; System::Threading::Tasks::Task ^ FromAsync(Func&lt;TArg1, TArg2, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Action&lt;IAsyncResult ^&gt; ^ endMethod, TArg1 arg1, TArg2 arg2, System::Object ^ state, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, 'TArg2, AsyncCallback, obj, IAsyncResult&gt; * Action&lt;IAsyncResult&gt; * 'TArg1 * 'TArg2 * obj * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, arg2, state, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,TArg2,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Action&lt;System.IAsyncResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="arg2" Type="TArg2" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1">
          <span data-ttu-id="b2054-932">Type du deuxième argument passé au délégué de <paramref name="beginMethod" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-932">The type of the second argument passed to <paramref name="beginMethod" /> delegate.</span>
          </span>
        </typeparam>
        <typeparam name="TArg2">
          <span data-ttu-id="b2054-933">Type du premier argument passé au délégué de <paramref name="beginMethod" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-933">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span>
          </span>
        </typeparam>
        <param name="beginMethod">
          <span data-ttu-id="b2054-934">Délégué qui commence l'opération asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-934">The delegate that begins the asynchronous operation.</span>
          </span>
        </param>
        <param name="endMethod">
          <span data-ttu-id="b2054-935">Délégué qui termine l'opération asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-935">The delegate that ends the asynchronous operation.</span>
          </span>
        </param>
        <param name="arg1">
          <span data-ttu-id="b2054-936">Premier argument passé au délégué de <paramref name="beginMethod" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-936">The first argument passed to the <paramref name="beginMethod" /> delegate.</span>
          </span>
        </param>
        <param name="arg2">
          <span data-ttu-id="b2054-937">Deuxième argument passé au délégué de <paramref name="beginMethod" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-937">The second argument passed to the <paramref name="beginMethod" /> delegate.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="b2054-938">Objet contenant des données que le délégué <paramref name="beginMethod" /> doit utiliser.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-938">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span>
          </span>
        </param>
        <param name="creationOptions">
          <span data-ttu-id="b2054-939">Valeur TaskCreationOptions qui contrôle le comportement de la <see cref="T:System.Threading.Tasks.Task" /> créée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-939">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b2054-940">Crée un <see cref="T:System.Threading.Tasks.Task" /> qui représente une paire de méthodes Begin et End conformes au modèle de programmation asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-940">Creates a <see cref="T:System.Threading.Tasks.Task" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b2054-941">
            <see cref="T:System.Threading.Tasks.Task" /> créée qui représente l'opération asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-941">The created <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2054-942">Le `beginMethod` délégué est démarré sur le thread qui <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> s’exécute sur.</span><span class="sxs-lookup"><span data-stu-id="b2054-942">The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on.</span></span> <span data-ttu-id="b2054-943">Cette méthode lève les exceptions levées par le `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="b2054-943">This method throws any exceptions thrown by the `beginMethod`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b2054-944">Exception levée quand l’argument <paramref name="beginMethod" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-944">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.</span>
          </span>
          <span data-ttu-id="b2054-945">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-945">-or-</span>
          </span>
          <span data-ttu-id="b2054-946">Exception levée quand l’argument <paramref name="endMethod" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-946">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b2054-947">Exception levée lorsque l'argument <paramref name="creationOptions" /> spécifie une valeur TaskCreationOptions non valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-947">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span>
          </span>
          <span data-ttu-id="b2054-948">Exception levée lorsque l'argument <paramref name="creationOptions" /> spécifie une valeur TaskCreationOptions non valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-948">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span>
          </span>
          <span data-ttu-id="b2054-949">Pour plus d'informations, consultez la section Notes de la rubrique <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-949">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="b2054-950">Bibliothèque parallèle de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-950">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md">
          <span data-ttu-id="b2054-951">Utilisation de la bibliothèque parallèle de tâches (TPL) avec d’autres modèles asynchrones</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-951">Using TPL with Other Asynchronous Patterns</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TArg1,TResult&gt; (Func&lt;TArg1,AsyncCallback,object,IAsyncResult&gt; beginMethod, Func&lt;IAsyncResult,TResult&gt; endMethod, TArg1 arg1, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromAsync&lt;TArg1, TResult&gt;(class System.Func`4&lt;!!TArg1, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Func`2&lt;class System.IAsyncResult, !!TResult&gt; endMethod, !!TArg1 arg1, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1, TResult) (beginMethod As Func(Of TArg1, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, state As Object) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1, typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(Func&lt;TArg1, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, TArg1 arg1, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, AsyncCallback, obj, IAsyncResult&gt; * Func&lt;IAsyncResult, 'Result&gt; * 'TArg1 * obj -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1">
          <span data-ttu-id="b2054-952">Type du premier argument passé au délégué de <paramref name="beginMethod" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-952">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="b2054-953">Type du résultat disponible via le <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-953">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </typeparam>
        <param name="beginMethod">
          <span data-ttu-id="b2054-954">Délégué qui commence l'opération asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-954">The delegate that begins the asynchronous operation.</span>
          </span>
        </param>
        <param name="endMethod">
          <span data-ttu-id="b2054-955">Délégué qui termine l'opération asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-955">The delegate that ends the asynchronous operation.</span>
          </span>
        </param>
        <param name="arg1">
          <span data-ttu-id="b2054-956">Premier argument passé au délégué de <paramref name="beginMethod" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-956">The first argument passed to the <paramref name="beginMethod" /> delegate.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="b2054-957">Objet contenant des données que le délégué <paramref name="beginMethod" /> doit utiliser.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-957">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b2054-958">Crée un <see cref="T:System.Threading.Tasks.Task`1" /> qui représente une paire de méthodes Begin et End conformes au modèle de programmation asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-958">Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b2054-959">
            <see cref="T:System.Threading.Tasks.Task`1" /> créée qui représente l'opération asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-959">The created <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2054-960">Le `beginMethod` délégué est démarré sur le thread qui <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> s’exécute sur.</span><span class="sxs-lookup"><span data-stu-id="b2054-960">The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on.</span></span> <span data-ttu-id="b2054-961">Cette méthode lève les exceptions levées par le `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="b2054-961">This method throws any exceptions thrown by the `beginMethod`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b2054-962">Exception levée quand l’argument <paramref name="beginMethod" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-962">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.</span>
          </span>
          <span data-ttu-id="b2054-963">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-963">-or-</span>
          </span>
          <span data-ttu-id="b2054-964">Exception levée quand l’argument <paramref name="endMethod" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-964">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="b2054-965">Bibliothèque parallèle de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-965">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md">
          <span data-ttu-id="b2054-966">Utilisation de la bibliothèque parallèle de tâches (TPL) avec d’autres modèles asynchrones</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-966">Using TPL with Other Asynchronous Patterns</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TArg1,TResult&gt; (Func&lt;TArg1,AsyncCallback,object,IAsyncResult&gt; beginMethod, Func&lt;IAsyncResult,TResult&gt; endMethod, TArg1 arg1, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromAsync&lt;TArg1, TResult&gt;(class System.Func`4&lt;!!TArg1, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Func`2&lt;class System.IAsyncResult, !!TResult&gt; endMethod, !!TArg1 arg1, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1, TResult) (beginMethod As Func(Of TArg1, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1, typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(Func&lt;TArg1, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, TArg1 arg1, System::Object ^ state, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, AsyncCallback, obj, IAsyncResult&gt; * Func&lt;IAsyncResult, 'Result&gt; * 'TArg1 * obj * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, state, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1">
          <span data-ttu-id="b2054-967">Type du premier argument passé au délégué de <paramref name="beginMethod" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-967">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="b2054-968">Type du résultat disponible via le <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-968">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </typeparam>
        <param name="beginMethod">
          <span data-ttu-id="b2054-969">Délégué qui commence l'opération asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-969">The delegate that begins the asynchronous operation.</span>
          </span>
        </param>
        <param name="endMethod">
          <span data-ttu-id="b2054-970">Délégué qui termine l'opération asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-970">The delegate that ends the asynchronous operation.</span>
          </span>
        </param>
        <param name="arg1">
          <span data-ttu-id="b2054-971">Premier argument passé au délégué de <paramref name="beginMethod" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-971">The first argument passed to the <paramref name="beginMethod" /> delegate.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="b2054-972">Objet contenant des données que le délégué <paramref name="beginMethod" /> doit utiliser.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-972">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span>
          </span>
        </param>
        <param name="creationOptions">
          <span data-ttu-id="b2054-973">Valeur TaskCreationOptions qui contrôle le comportement de la <see cref="T:System.Threading.Tasks.Task`1" /> créée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-973">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b2054-974">Crée un <see cref="T:System.Threading.Tasks.Task`1" /> qui représente une paire de méthodes Begin et End conformes au modèle de programmation asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-974">Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b2054-975">
            <see cref="T:System.Threading.Tasks.Task`1" /> créée qui représente l'opération asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-975">The created <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2054-976">Le `beginMethod` délégué est démarré sur le thread qui <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> s’exécute sur.</span><span class="sxs-lookup"><span data-stu-id="b2054-976">The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on.</span></span> <span data-ttu-id="b2054-977">Cette méthode lève les exceptions levées par le `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="b2054-977">This method throws any exceptions thrown by the `beginMethod`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b2054-978">Exception levée quand l’argument <paramref name="beginMethod" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-978">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.</span>
          </span>
          <span data-ttu-id="b2054-979">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-979">-or-</span>
          </span>
          <span data-ttu-id="b2054-980">Exception levée quand l’argument <paramref name="endMethod" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-980">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b2054-981">Exception levée lorsque l'argument <paramref name="creationOptions" /> spécifie une valeur TaskCreationOptions non valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-981">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span>
          </span>
          <span data-ttu-id="b2054-982">Exception levée lorsque l'argument <paramref name="creationOptions" /> spécifie une valeur TaskCreationOptions non valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-982">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span>
          </span>
          <span data-ttu-id="b2054-983">Pour plus d'informations, consultez la section Notes de la rubrique <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-983">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="b2054-984">Bibliothèque parallèle de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-984">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md">
          <span data-ttu-id="b2054-985">Utilisation de la bibliothèque parallèle de tâches (TPL) avec d’autres modèles asynchrones</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-985">Using TPL with Other Asynchronous Patterns</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1,TArg2,TArg3&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task FromAsync&lt;TArg1,TArg2,TArg3&gt; (Func&lt;TArg1,TArg2,TArg3,AsyncCallback,object,IAsyncResult&gt; beginMethod, Action&lt;IAsyncResult&gt; endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task FromAsync&lt;TArg1, TArg2, TArg3&gt;(class System.Func`6&lt;!!TArg1, !!TArg2, !!TArg3, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Action`1&lt;class System.IAsyncResult&gt; endMethod, !!TArg1 arg1, !!TArg2 arg2, !!TArg3 arg3, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1, TArg2, TArg3) (beginMethod As Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), endMethod As Action(Of IAsyncResult), arg1 As TArg1, arg2 As TArg2, arg3 As TArg3, state As Object) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1, typename TArg2, typename TArg3&gt;&#xA; System::Threading::Tasks::Task ^ FromAsync(Func&lt;TArg1, TArg2, TArg3, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Action&lt;IAsyncResult ^&gt; ^ endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, 'TArg2, 'TArg3, AsyncCallback, obj, IAsyncResult&gt; * Action&lt;IAsyncResult&gt; * 'TArg1 * 'TArg2 * 'TArg3 * obj -&gt; System.Threading.Tasks.Task" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, arg2, arg3, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
        <TypeParameter Name="TArg3" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,TArg2,TArg3,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Action&lt;System.IAsyncResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="arg2" Type="TArg2" />
        <Parameter Name="arg3" Type="TArg3" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1">
          <span data-ttu-id="b2054-986">Type du deuxième argument passé au délégué de <paramref name="beginMethod" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-986">The type of the second argument passed to <paramref name="beginMethod" /> delegate.</span>
          </span>
        </typeparam>
        <typeparam name="TArg2">
          <span data-ttu-id="b2054-987">Type du troisième argument passé au délégué de <paramref name="beginMethod" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-987">The type of the third argument passed to <paramref name="beginMethod" /> delegate.</span>
          </span>
        </typeparam>
        <typeparam name="TArg3">
          <span data-ttu-id="b2054-988">Type du premier argument passé au délégué de <paramref name="beginMethod" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-988">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span>
          </span>
        </typeparam>
        <param name="beginMethod">
          <span data-ttu-id="b2054-989">Délégué qui commence l'opération asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-989">The delegate that begins the asynchronous operation.</span>
          </span>
        </param>
        <param name="endMethod">
          <span data-ttu-id="b2054-990">Délégué qui termine l'opération asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-990">The delegate that ends the asynchronous operation.</span>
          </span>
        </param>
        <param name="arg1">
          <span data-ttu-id="b2054-991">Premier argument passé au délégué de <paramref name="beginMethod" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-991">The first argument passed to the <paramref name="beginMethod" /> delegate.</span>
          </span>
        </param>
        <param name="arg2">
          <span data-ttu-id="b2054-992">Deuxième argument passé au délégué de <paramref name="beginMethod" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-992">The second argument passed to the <paramref name="beginMethod" /> delegate.</span>
          </span>
        </param>
        <param name="arg3">
          <span data-ttu-id="b2054-993">Troisième argument passé au délégué de <paramref name="beginMethod" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-993">The third argument passed to the <paramref name="beginMethod" /> delegate.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="b2054-994">Objet contenant des données que le délégué <paramref name="beginMethod" /> doit utiliser.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-994">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b2054-995">Crée un <see cref="T:System.Threading.Tasks.Task" /> qui représente une paire de méthodes Begin et End conformes au modèle de programmation asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-995">Creates a <see cref="T:System.Threading.Tasks.Task" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b2054-996">
            <see cref="T:System.Threading.Tasks.Task" /> créée qui représente l'opération asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-996">The created <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2054-997">Le `beginMethod` délégué est démarré sur le thread qui <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> s’exécute sur.</span><span class="sxs-lookup"><span data-stu-id="b2054-997">The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on.</span></span> <span data-ttu-id="b2054-998">Cette méthode lève les exceptions levées par le `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="b2054-998">This method throws any exceptions thrown by the `beginMethod`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b2054-999">Exception levée quand l’argument <paramref name="beginMethod" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-999">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.</span>
          </span>
          <span data-ttu-id="b2054-1000">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1000">-or-</span>
          </span>
          <span data-ttu-id="b2054-1001">Exception levée quand l’argument <paramref name="endMethod" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1001">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="b2054-1002">Bibliothèque parallèle de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1002">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md">
          <span data-ttu-id="b2054-1003">Utilisation de la bibliothèque parallèle de tâches (TPL) avec d’autres modèles asynchrones</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1003">Using TPL with Other Asynchronous Patterns</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1,TArg2,TArg3&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task FromAsync&lt;TArg1,TArg2,TArg3&gt; (Func&lt;TArg1,TArg2,TArg3,AsyncCallback,object,IAsyncResult&gt; beginMethod, Action&lt;IAsyncResult&gt; endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task FromAsync&lt;TArg1, TArg2, TArg3&gt;(class System.Func`6&lt;!!TArg1, !!TArg2, !!TArg3, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Action`1&lt;class System.IAsyncResult&gt; endMethod, !!TArg1 arg1, !!TArg2 arg2, !!TArg3 arg3, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1, TArg2, TArg3) (beginMethod As Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), endMethod As Action(Of IAsyncResult), arg1 As TArg1, arg2 As TArg2, arg3 As TArg3, state As Object, creationOptions As TaskCreationOptions) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1, typename TArg2, typename TArg3&gt;&#xA; System::Threading::Tasks::Task ^ FromAsync(Func&lt;TArg1, TArg2, TArg3, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Action&lt;IAsyncResult ^&gt; ^ endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, System::Object ^ state, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, 'TArg2, 'TArg3, AsyncCallback, obj, IAsyncResult&gt; * Action&lt;IAsyncResult&gt; * 'TArg1 * 'TArg2 * 'TArg3 * obj * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, arg2, arg3, state, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
        <TypeParameter Name="TArg3" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,TArg2,TArg3,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Action&lt;System.IAsyncResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="arg2" Type="TArg2" />
        <Parameter Name="arg3" Type="TArg3" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1">
          <span data-ttu-id="b2054-1004">Type du deuxième argument passé au délégué de <paramref name="beginMethod" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1004">The type of the second argument passed to <paramref name="beginMethod" /> delegate.</span>
          </span>
        </typeparam>
        <typeparam name="TArg2">
          <span data-ttu-id="b2054-1005">Type du troisième argument passé au délégué de <paramref name="beginMethod" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1005">The type of the third argument passed to <paramref name="beginMethod" /> delegate.</span>
          </span>
        </typeparam>
        <typeparam name="TArg3">
          <span data-ttu-id="b2054-1006">Type du premier argument passé au délégué de <paramref name="beginMethod" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1006">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span>
          </span>
        </typeparam>
        <param name="beginMethod">
          <span data-ttu-id="b2054-1007">Délégué qui commence l'opération asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1007">The delegate that begins the asynchronous operation.</span>
          </span>
        </param>
        <param name="endMethod">
          <span data-ttu-id="b2054-1008">Délégué qui termine l'opération asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1008">The delegate that ends the asynchronous operation.</span>
          </span>
        </param>
        <param name="arg1">
          <span data-ttu-id="b2054-1009">Premier argument passé au délégué de <paramref name="beginMethod" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1009">The first argument passed to the <paramref name="beginMethod" /> delegate.</span>
          </span>
        </param>
        <param name="arg2">
          <span data-ttu-id="b2054-1010">Deuxième argument passé au délégué de <paramref name="beginMethod" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1010">The second argument passed to the <paramref name="beginMethod" /> delegate.</span>
          </span>
        </param>
        <param name="arg3">
          <span data-ttu-id="b2054-1011">Troisième argument passé au délégué de <paramref name="beginMethod" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1011">The third argument passed to the <paramref name="beginMethod" /> delegate.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="b2054-1012">Objet contenant des données que le délégué <paramref name="beginMethod" /> doit utiliser.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1012">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span>
          </span>
        </param>
        <param name="creationOptions">
          <span data-ttu-id="b2054-1013">Valeur TaskCreationOptions qui contrôle le comportement de la <see cref="T:System.Threading.Tasks.Task" /> créée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1013">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b2054-1014">Crée un <see cref="T:System.Threading.Tasks.Task" /> qui représente une paire de méthodes Begin et End conformes au modèle de programmation asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1014">Creates a <see cref="T:System.Threading.Tasks.Task" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b2054-1015">
            <see cref="T:System.Threading.Tasks.Task" /> créée qui représente l'opération asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1015">The created <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2054-1016">Le `beginMethod` délégué est démarré sur le thread qui <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> s’exécute sur.</span><span class="sxs-lookup"><span data-stu-id="b2054-1016">The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on.</span></span> <span data-ttu-id="b2054-1017">Cette méthode lève les exceptions levées par le `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="b2054-1017">This method throws any exceptions thrown by the `beginMethod`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b2054-1018">Exception levée quand l’argument <paramref name="beginMethod" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1018">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.</span>
          </span>
          <span data-ttu-id="b2054-1019">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1019">-or-</span>
          </span>
          <span data-ttu-id="b2054-1020">Exception levée quand l’argument <paramref name="endMethod" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1020">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b2054-1021">Exception levée lorsque l'argument <paramref name="creationOptions" /> spécifie une valeur TaskCreationOptions non valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1021">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span>
          </span>
          <span data-ttu-id="b2054-1022">Exception levée lorsque l'argument <paramref name="creationOptions" /> spécifie une valeur TaskCreationOptions non valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1022">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span>
          </span>
          <span data-ttu-id="b2054-1023">Pour plus d'informations, consultez la section Notes de la rubrique <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1023">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="b2054-1024">Bibliothèque parallèle de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1024">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md">
          <span data-ttu-id="b2054-1025">Utilisation de la bibliothèque parallèle de tâches (TPL) avec d’autres modèles asynchrones</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1025">Using TPL with Other Asynchronous Patterns</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1,TArg2,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TArg1,TArg2,TResult&gt; (Func&lt;TArg1,TArg2,AsyncCallback,object,IAsyncResult&gt; beginMethod, Func&lt;IAsyncResult,TResult&gt; endMethod, TArg1 arg1, TArg2 arg2, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromAsync&lt;TArg1, TArg2, TResult&gt;(class System.Func`5&lt;!!TArg1, !!TArg2, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Func`2&lt;class System.IAsyncResult, !!TResult&gt; endMethod, !!TArg1 arg1, !!TArg2 arg2, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1, TArg2, TResult) (beginMethod As Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, arg2 As TArg2, state As Object) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1, typename TArg2, typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(Func&lt;TArg1, TArg2, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, TArg1 arg1, TArg2 arg2, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, 'TArg2, AsyncCallback, obj, IAsyncResult&gt; * Func&lt;IAsyncResult, 'Result&gt; * 'TArg1 * 'TArg2 * obj -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, arg2, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,TArg2,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="arg2" Type="TArg2" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1">
          <span data-ttu-id="b2054-1026">Type du deuxième argument passé au délégué de <paramref name="beginMethod" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1026">The type of the second argument passed to <paramref name="beginMethod" /> delegate.</span>
          </span>
        </typeparam>
        <typeparam name="TArg2">
          <span data-ttu-id="b2054-1027">Type du premier argument passé au délégué de <paramref name="beginMethod" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1027">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="b2054-1028">Type du résultat disponible via le <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1028">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </typeparam>
        <param name="beginMethod">
          <span data-ttu-id="b2054-1029">Délégué qui commence l'opération asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1029">The delegate that begins the asynchronous operation.</span>
          </span>
        </param>
        <param name="endMethod">
          <span data-ttu-id="b2054-1030">Délégué qui termine l'opération asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1030">The delegate that ends the asynchronous operation.</span>
          </span>
        </param>
        <param name="arg1">
          <span data-ttu-id="b2054-1031">Premier argument passé au délégué de <paramref name="beginMethod" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1031">The first argument passed to the <paramref name="beginMethod" /> delegate.</span>
          </span>
        </param>
        <param name="arg2">
          <span data-ttu-id="b2054-1032">Deuxième argument passé au délégué de <paramref name="beginMethod" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1032">The second argument passed to the <paramref name="beginMethod" /> delegate.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="b2054-1033">Objet contenant des données que le délégué <paramref name="beginMethod" /> doit utiliser.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1033">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b2054-1034">Crée un <see cref="T:System.Threading.Tasks.Task`1" /> qui représente une paire de méthodes Begin et End conformes au modèle de programmation asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1034">Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b2054-1035">
            <see cref="T:System.Threading.Tasks.Task`1" /> créée qui représente l'opération asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1035">The created <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2054-1036">Le `beginMethod` délégué est démarré sur le thread qui <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> s’exécute sur.</span><span class="sxs-lookup"><span data-stu-id="b2054-1036">The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on.</span></span> <span data-ttu-id="b2054-1037">Cette méthode lève les exceptions levées par le `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="b2054-1037">This method throws any exceptions thrown by the `beginMethod`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b2054-1038">Exception levée quand l’argument <paramref name="beginMethod" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1038">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.</span>
          </span>
          <span data-ttu-id="b2054-1039">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1039">-or-</span>
          </span>
          <span data-ttu-id="b2054-1040">Exception levée quand l’argument <paramref name="endMethod" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1040">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="b2054-1041">Bibliothèque parallèle de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1041">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md">
          <span data-ttu-id="b2054-1042">Utilisation de la bibliothèque parallèle de tâches (TPL) avec d’autres modèles asynchrones</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1042">Using TPL with Other Asynchronous Patterns</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1,TArg2,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TArg1,TArg2,TResult&gt; (Func&lt;TArg1,TArg2,AsyncCallback,object,IAsyncResult&gt; beginMethod, Func&lt;IAsyncResult,TResult&gt; endMethod, TArg1 arg1, TArg2 arg2, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromAsync&lt;TArg1, TArg2, TResult&gt;(class System.Func`5&lt;!!TArg1, !!TArg2, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Func`2&lt;class System.IAsyncResult, !!TResult&gt; endMethod, !!TArg1 arg1, !!TArg2 arg2, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1, TArg2, TResult) (beginMethod As Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, arg2 As TArg2, state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1, typename TArg2, typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(Func&lt;TArg1, TArg2, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, TArg1 arg1, TArg2 arg2, System::Object ^ state, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, 'TArg2, AsyncCallback, obj, IAsyncResult&gt; * Func&lt;IAsyncResult, 'Result&gt; * 'TArg1 * 'TArg2 * obj * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, arg2, state, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,TArg2,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="arg2" Type="TArg2" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1">
          <span data-ttu-id="b2054-1043">Type du deuxième argument passé au délégué de <paramref name="beginMethod" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1043">The type of the second argument passed to <paramref name="beginMethod" /> delegate.</span>
          </span>
        </typeparam>
        <typeparam name="TArg2">
          <span data-ttu-id="b2054-1044">Type du premier argument passé au délégué de <paramref name="beginMethod" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1044">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="b2054-1045">Type du résultat disponible via le <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1045">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </typeparam>
        <param name="beginMethod">
          <span data-ttu-id="b2054-1046">Délégué qui commence l'opération asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1046">The delegate that begins the asynchronous operation.</span>
          </span>
        </param>
        <param name="endMethod">
          <span data-ttu-id="b2054-1047">Délégué qui termine l'opération asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1047">The delegate that ends the asynchronous operation.</span>
          </span>
        </param>
        <param name="arg1">
          <span data-ttu-id="b2054-1048">Premier argument passé au délégué de <paramref name="beginMethod" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1048">The first argument passed to the <paramref name="beginMethod" /> delegate.</span>
          </span>
        </param>
        <param name="arg2">
          <span data-ttu-id="b2054-1049">Deuxième argument passé au délégué de <paramref name="beginMethod" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1049">The second argument passed to the <paramref name="beginMethod" /> delegate.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="b2054-1050">Objet contenant des données que le délégué <paramref name="beginMethod" /> doit utiliser.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1050">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span>
          </span>
        </param>
        <param name="creationOptions">
          <span data-ttu-id="b2054-1051">Valeur TaskCreationOptions qui contrôle le comportement de la <see cref="T:System.Threading.Tasks.Task`1" /> créée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1051">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b2054-1052">Crée un <see cref="T:System.Threading.Tasks.Task`1" /> qui représente une paire de méthodes Begin et End conformes au modèle de programmation asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1052">Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b2054-1053">
            <see cref="T:System.Threading.Tasks.Task`1" /> créée qui représente l'opération asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1053">The created <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2054-1054">Le `beginMethod` délégué est démarré sur le thread qui <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> s’exécute sur.</span><span class="sxs-lookup"><span data-stu-id="b2054-1054">The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on.</span></span> <span data-ttu-id="b2054-1055">Cette méthode lève les exceptions levées par le `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="b2054-1055">This method throws any exceptions thrown by the `beginMethod`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b2054-1056">Exception levée quand l’argument <paramref name="beginMethod" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1056">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.</span>
          </span>
          <span data-ttu-id="b2054-1057">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1057">-or-</span>
          </span>
          <span data-ttu-id="b2054-1058">Exception levée quand l’argument <paramref name="endMethod" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1058">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b2054-1059">Exception levée lorsque l'argument <paramref name="creationOptions" /> spécifie une valeur TaskCreationOptions non valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1059">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span>
          </span>
          <span data-ttu-id="b2054-1060">Exception levée lorsque l'argument <paramref name="creationOptions" /> spécifie une valeur TaskCreationOptions non valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1060">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span>
          </span>
          <span data-ttu-id="b2054-1061">Pour plus d'informations, consultez la section Notes de la rubrique <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1061">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="b2054-1062">Bibliothèque parallèle de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1062">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md">
          <span data-ttu-id="b2054-1063">Utilisation de la bibliothèque parallèle de tâches (TPL) avec d’autres modèles asynchrones</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1063">Using TPL with Other Asynchronous Patterns</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1,TArg2,TArg3,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TArg1,TArg2,TArg3,TResult&gt; (Func&lt;TArg1,TArg2,TArg3,AsyncCallback,object,IAsyncResult&gt; beginMethod, Func&lt;IAsyncResult,TResult&gt; endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromAsync&lt;TArg1, TArg2, TArg3, TResult&gt;(class System.Func`6&lt;!!TArg1, !!TArg2, !!TArg3, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Func`2&lt;class System.IAsyncResult, !!TResult&gt; endMethod, !!TArg1 arg1, !!TArg2 arg2, !!TArg3 arg3, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1, TArg2, TArg3, TResult) (beginMethod As Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, arg2 As TArg2, arg3 As TArg3, state As Object) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1, typename TArg2, typename TArg3, typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(Func&lt;TArg1, TArg2, TArg3, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, 'TArg2, 'TArg3, AsyncCallback, obj, IAsyncResult&gt; * Func&lt;IAsyncResult, 'Result&gt; * 'TArg1 * 'TArg2 * 'TArg3 * obj -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, arg2, arg3, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
        <TypeParameter Name="TArg3" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,TArg2,TArg3,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="arg2" Type="TArg2" />
        <Parameter Name="arg3" Type="TArg3" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1">
          <span data-ttu-id="b2054-1064">Type du deuxième argument passé au délégué de <paramref name="beginMethod" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1064">The type of the second argument passed to <paramref name="beginMethod" /> delegate.</span>
          </span>
        </typeparam>
        <typeparam name="TArg2">
          <span data-ttu-id="b2054-1065">Type du troisième argument passé au délégué de <paramref name="beginMethod" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1065">The type of the third argument passed to <paramref name="beginMethod" /> delegate.</span>
          </span>
        </typeparam>
        <typeparam name="TArg3">
          <span data-ttu-id="b2054-1066">Type du premier argument passé au délégué de <paramref name="beginMethod" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1066">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="b2054-1067">Type du résultat disponible via le <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1067">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </typeparam>
        <param name="beginMethod">
          <span data-ttu-id="b2054-1068">Délégué qui commence l'opération asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1068">The delegate that begins the asynchronous operation.</span>
          </span>
        </param>
        <param name="endMethod">
          <span data-ttu-id="b2054-1069">Délégué qui termine l'opération asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1069">The delegate that ends the asynchronous operation.</span>
          </span>
        </param>
        <param name="arg1">
          <span data-ttu-id="b2054-1070">Premier argument passé au délégué de <paramref name="beginMethod" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1070">The first argument passed to the <paramref name="beginMethod" /> delegate.</span>
          </span>
        </param>
        <param name="arg2">
          <span data-ttu-id="b2054-1071">Deuxième argument passé au délégué de <paramref name="beginMethod" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1071">The second argument passed to the <paramref name="beginMethod" /> delegate.</span>
          </span>
        </param>
        <param name="arg3">
          <span data-ttu-id="b2054-1072">Troisième argument passé au délégué de <paramref name="beginMethod" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1072">The third argument passed to the <paramref name="beginMethod" /> delegate.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="b2054-1073">Objet contenant des données que le délégué <paramref name="beginMethod" /> doit utiliser.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1073">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b2054-1074">Crée un <see cref="T:System.Threading.Tasks.Task`1" /> qui représente une paire de méthodes Begin et End conformes au modèle de programmation asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1074">Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b2054-1075">
            <see cref="T:System.Threading.Tasks.Task`1" /> créée qui représente l'opération asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1075">The created <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2054-1076">Le `beginMethod` délégué est démarré sur le thread qui <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> s’exécute sur.</span><span class="sxs-lookup"><span data-stu-id="b2054-1076">The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on.</span></span> <span data-ttu-id="b2054-1077">Cette méthode lève les exceptions levées par le `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="b2054-1077">This method throws any exceptions thrown by the `beginMethod`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b2054-1078">Exception levée quand l’argument <paramref name="beginMethod" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1078">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.</span>
          </span>
          <span data-ttu-id="b2054-1079">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1079">-or-</span>
          </span>
          <span data-ttu-id="b2054-1080">Exception levée quand l’argument <paramref name="endMethod" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1080">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="b2054-1081">Bibliothèque parallèle de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1081">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md">
          <span data-ttu-id="b2054-1082">Utilisation de la bibliothèque parallèle de tâches (TPL) avec d’autres modèles asynchrones</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1082">Using TPL with Other Asynchronous Patterns</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FromAsync&lt;TArg1,TArg2,TArg3,TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; FromAsync&lt;TArg1,TArg2,TArg3,TResult&gt; (Func&lt;TArg1,TArg2,TArg3,AsyncCallback,object,IAsyncResult&gt; beginMethod, Func&lt;IAsyncResult,TResult&gt; endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromAsync&lt;TArg1, TArg2, TArg3, TResult&gt;(class System.Func`6&lt;!!TArg1, !!TArg2, !!TArg3, class System.AsyncCallback, object, class System.IAsyncResult&gt; beginMethod, class System.Func`2&lt;class System.IAsyncResult, !!TResult&gt; endMethod, !!TArg1 arg1, !!TArg2 arg2, !!TArg3 arg3, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function FromAsync(Of TArg1, TArg2, TArg3, TResult) (beginMethod As Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, arg2 As TArg2, arg3 As TArg3, state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TArg1, typename TArg2, typename TArg3, typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ FromAsync(Func&lt;TArg1, TArg2, TArg3, AsyncCallback ^, System::Object ^, IAsyncResult ^&gt; ^ beginMethod, Func&lt;IAsyncResult ^, TResult&gt; ^ endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, System::Object ^ state, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.FromAsync : Func&lt;'TArg1, 'TArg2, 'TArg3, AsyncCallback, obj, IAsyncResult&gt; * Func&lt;IAsyncResult, 'Result&gt; * 'TArg1 * 'TArg2 * 'TArg3 * obj * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.FromAsync (beginMethod, endMethod, arg1, arg2, arg3, state, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
        <TypeParameter Name="TArg3" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="beginMethod" Type="System.Func&lt;TArg1,TArg2,TArg3,System.AsyncCallback,System.Object,System.IAsyncResult&gt;" />
        <Parameter Name="endMethod" Type="System.Func&lt;System.IAsyncResult,TResult&gt;" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="arg2" Type="TArg2" />
        <Parameter Name="arg3" Type="TArg3" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TArg1">
          <span data-ttu-id="b2054-1083">Type du deuxième argument passé au délégué de <paramref name="beginMethod" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1083">The type of the second argument passed to <paramref name="beginMethod" /> delegate.</span>
          </span>
        </typeparam>
        <typeparam name="TArg2">
          <span data-ttu-id="b2054-1084">Type du troisième argument passé au délégué de <paramref name="beginMethod" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1084">The type of the third argument passed to <paramref name="beginMethod" /> delegate.</span>
          </span>
        </typeparam>
        <typeparam name="TArg3">
          <span data-ttu-id="b2054-1085">Type du premier argument passé au délégué de <paramref name="beginMethod" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1085">The type of the first argument passed to the <paramref name="beginMethod" /> delegate.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="b2054-1086">Type du résultat disponible via le <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1086">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </typeparam>
        <param name="beginMethod">
          <span data-ttu-id="b2054-1087">Délégué qui commence l'opération asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1087">The delegate that begins the asynchronous operation.</span>
          </span>
        </param>
        <param name="endMethod">
          <span data-ttu-id="b2054-1088">Délégué qui termine l'opération asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1088">The delegate that ends the asynchronous operation.</span>
          </span>
        </param>
        <param name="arg1">
          <span data-ttu-id="b2054-1089">Premier argument passé au délégué de <paramref name="beginMethod" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1089">The first argument passed to the <paramref name="beginMethod" /> delegate.</span>
          </span>
        </param>
        <param name="arg2">
          <span data-ttu-id="b2054-1090">Deuxième argument passé au délégué de <paramref name="beginMethod" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1090">The second argument passed to the <paramref name="beginMethod" /> delegate.</span>
          </span>
        </param>
        <param name="arg3">
          <span data-ttu-id="b2054-1091">Troisième argument passé au délégué de <paramref name="beginMethod" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1091">The third argument passed to the <paramref name="beginMethod" /> delegate.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="b2054-1092">Objet contenant des données que le délégué <paramref name="beginMethod" /> doit utiliser.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1092">An object containing data to be used by the <paramref name="beginMethod" /> delegate.</span>
          </span>
        </param>
        <param name="creationOptions">
          <span data-ttu-id="b2054-1093">Valeur TaskCreationOptions qui contrôle le comportement de la <see cref="T:System.Threading.Tasks.Task`1" /> créée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1093">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b2054-1094">Crée un <see cref="T:System.Threading.Tasks.Task`1" /> qui représente une paire de méthodes Begin et End conformes au modèle de programmation asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1094">Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b2054-1095">
            <see cref="T:System.Threading.Tasks.Task`1" /> créée qui représente l'opération asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1095">The created <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2054-1096">Le `beginMethod` délégué est démarré sur le thread qui <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> s’exécute sur.</span><span class="sxs-lookup"><span data-stu-id="b2054-1096">The `beginMethod` delegate is started on the thread that <xref:System.Threading.Tasks.TaskFactory.FromAsync%2A> is running on.</span></span> <span data-ttu-id="b2054-1097">Cette méthode lève les exceptions levées par le `beginMethod`.</span><span class="sxs-lookup"><span data-stu-id="b2054-1097">This method throws any exceptions thrown by the `beginMethod`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b2054-1098">Exception levée quand l’argument <paramref name="beginMethod" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1098">The exception that is thrown when the <paramref name="beginMethod" /> argument is null.</span>
          </span>
          <span data-ttu-id="b2054-1099">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1099">-or-</span>
          </span>
          <span data-ttu-id="b2054-1100">Exception levée quand l’argument <paramref name="endMethod" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1100">The exception that is thrown when the <paramref name="endMethod" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b2054-1101">Exception levée lorsque l'argument <paramref name="creationOptions" /> spécifie une valeur TaskCreationOptions non valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1101">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span>
          </span>
          <span data-ttu-id="b2054-1102">Exception levée lorsque l'argument <paramref name="creationOptions" /> spécifie une valeur TaskCreationOptions non valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1102">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span>
          </span>
          <span data-ttu-id="b2054-1103">Pour plus d'informations, consultez la section Notes de la rubrique <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1103">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="b2054-1104">Bibliothèque parallèle de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1104">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md">
          <span data-ttu-id="b2054-1105">Utilisation de la bibliothèque parallèle de tâches (TPL) avec d’autres modèles asynchrones</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1105">Using TPL with Other Asynchronous Patterns</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Scheduler">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.TaskScheduler Scheduler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.Tasks.TaskScheduler Scheduler" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.TaskFactory.Scheduler" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Scheduler As TaskScheduler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::Tasks::TaskScheduler ^ Scheduler { System::Threading::Tasks::TaskScheduler ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Scheduler : System.Threading.Tasks.TaskScheduler" Usage="System.Threading.Tasks.TaskFactory.Scheduler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.TaskScheduler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b2054-1106">Obtient le Planificateur de tâches par défaut pour cette fabrique de tâches.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1106">Gets the default task scheduler for this task factory.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b2054-1107">Planificateur de tâches par défaut pour cette fabrique de tâches.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1107">The default task scheduler for this task factory.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2054-1108">La valeur de propriété utilisée pour planifier toutes les tâches, sauf si un autre planificateur est explicitement spécifié pendant les appels aux méthodes de cette fabrique.</span><span class="sxs-lookup"><span data-stu-id="b2054-1108">The property value is used to schedule all tasks, unless another scheduler is explicitly specified during calls to this factory's methods.</span></span>  
  
 <span data-ttu-id="b2054-1109">Si cette valeur de propriété est `null`, la valeur de la <xref:System.Threading.Tasks.TaskScheduler.Current%2A> propriété est utilisée.</span><span class="sxs-lookup"><span data-stu-id="b2054-1109">If this property value is `null`, the value of the <xref:System.Threading.Tasks.TaskScheduler.Current%2A> property is used.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.Tasks.TaskScheduler" />
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="b2054-1110">Bibliothèque parallèle de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1110">Task Parallel Library (TPL)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="StartNew">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="b2054-1111">Crée et lance un <see cref="T:System.Threading.Tasks.Task" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1111">Creates and starts a <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2054-1112">En commençant par le [!INCLUDE[net_v45](~/includes/net-v45-md.md)], le <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> méthode est la méthode recommandée pour lancer une tâche liée aux calculs.</span><span class="sxs-lookup"><span data-stu-id="b2054-1112">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> method is the recommended way to launch a compute-bound task.</span></span> <span data-ttu-id="b2054-1113">Utilisez le <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> méthode uniquement lorsque vous avez besoin d’un contrôle précis pour une tâche de longue durée, liés au calcul.</span><span class="sxs-lookup"><span data-stu-id="b2054-1113">Use the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> method only when you require fine-grained control for a long-running, compute-bound task.</span></span> <span data-ttu-id="b2054-1114">Cela inclut des scénarios dans lesquels vous souhaitez contrôler les éléments suivants :</span><span class="sxs-lookup"><span data-stu-id="b2054-1114">This includes scenarios in which you want to control the following:</span></span>  
  
-   <span data-ttu-id="b2054-1115">Options de création de tâches.</span><span class="sxs-lookup"><span data-stu-id="b2054-1115">Task creation options.</span></span> <span data-ttu-id="b2054-1116">Les tâches créées par le <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> méthode par défaut sont créés avec la <xref:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach?displayProperty=nameWithType> option.</span><span class="sxs-lookup"><span data-stu-id="b2054-1116">Tasks created by the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> method by default are created with the <xref:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach?displayProperty=nameWithType> option.</span></span> <span data-ttu-id="b2054-1117">Pour remplacer ce comportement, ou pour fournir d’autres <xref:System.Threading.Tasks.TaskCreationOptions> options, appeler un <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> de surcharge.</span><span class="sxs-lookup"><span data-stu-id="b2054-1117">To override this behavior, or to provide other <xref:System.Threading.Tasks.TaskCreationOptions> options, call a <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> overload.</span></span>  
  
-   <span data-ttu-id="b2054-1118">Passage de paramètres.</span><span class="sxs-lookup"><span data-stu-id="b2054-1118">Parameter passing.</span></span> <span data-ttu-id="b2054-1119">Les surcharges de la <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> méthode ne vous permettent pas de passer un paramètre au délégué de tâche.</span><span class="sxs-lookup"><span data-stu-id="b2054-1119">The overloads of the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> method do not allow you to pass a parameter to the task delegate.</span></span> <span data-ttu-id="b2054-1120">Les surcharges de la <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> méthode effectue.</span><span class="sxs-lookup"><span data-stu-id="b2054-1120">Overloads of the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> method do.</span></span>  
  
-   <span data-ttu-id="b2054-1121">Planificateur de tâches.</span><span class="sxs-lookup"><span data-stu-id="b2054-1121">The task scheduler.</span></span> <span data-ttu-id="b2054-1122">Les surcharges de la <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> méthode utiliser le Planificateur de tâches par défaut.</span><span class="sxs-lookup"><span data-stu-id="b2054-1122">The overloads of the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> method use the default task scheduler.</span></span> <span data-ttu-id="b2054-1123">Pour contrôler le Planificateur de tâches, appeler un <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> surcharge avec un `scheduler` paramètre.</span><span class="sxs-lookup"><span data-stu-id="b2054-1123">To control the task scheduler, call a <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> overload with a `scheduler` parameter.</span></span> <span data-ttu-id="b2054-1124">Pour plus d'informations, consultez <xref:System.Threading.Tasks.TaskScheduler>.</span><span class="sxs-lookup"><span data-stu-id="b2054-1124">For more information, see <xref:System.Threading.Tasks.TaskScheduler>.</span></span>
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/Samples-for-Parallel-b4b76364">
          <span data-ttu-id="b2054-1125">Exemples de programmation parallèle avec .NET Framework</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1125">Samples for Parallel Programming with the .NET Framework</span>
          </span>
        </related>
      </Docs>
    </MemberGroup>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StartNew (Action action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task StartNew(class System.Action action) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ StartNew(Action ^ action);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Action -&gt; System.Threading.Tasks.Task" Usage="taskFactory.StartNew action" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="action">
          <span data-ttu-id="b2054-1126">Délégué d'action à exécuter de façon asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1126">The action delegate to execute asynchronously.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b2054-1127">Crée et lance une tâche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1127">Creates and starts a task.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b2054-1128">Tâche démarrée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1128">The started task.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2054-1129">Appel <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> est fonctionnellement équivalent à la création d’une tâche en utilisant un de ses constructeurs, puis en appelant le <xref:System.Threading.Tasks.Task.Start%2A?displayProperty=nameWithType> méthode pour planifier la tâche pour l’exécution.</span><span class="sxs-lookup"><span data-stu-id="b2054-1129">Calling <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> is functionally equivalent to creating a task by using one of its constructors, and then calling the <xref:System.Threading.Tasks.Task.Start%2A?displayProperty=nameWithType> method to schedule the task for execution.</span></span>  
  
 <span data-ttu-id="b2054-1130">En commençant par le [!INCLUDE[net_v45](~/includes/net-v45-md.md)], vous pouvez utiliser la <xref:System.Threading.Tasks.Task.Run%28System.Action%29?displayProperty=nameWithType> un moyen rapide d’appeler la méthode <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29> avec les paramètres par défaut.</span><span class="sxs-lookup"><span data-stu-id="b2054-1130">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%28System.Action%29?displayProperty=nameWithType> method as  a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29> with default parameters.</span></span> <span data-ttu-id="b2054-1131">Notez, toutefois, qu’il existe une différence de comportement entre les deux méthodes concernant : <xref:System.Threading.Tasks.Task.Run%28System.Action%29?displayProperty=nameWithType> par défaut n’autorise pas les enfants tâches démarrées avec le <xref:System.Threading.Tasks.TaskCreationOptions.AttachedToParent?displayProperty=nameWithType> option d’attachement de l’actuelle <xref:System.Threading.Tasks.Task> de l’instance, tandis que <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29> est.</span><span class="sxs-lookup"><span data-stu-id="b2054-1131">Note, however, that there is a difference in behavior between the two methods regarding : <xref:System.Threading.Tasks.Task.Run%28System.Action%29?displayProperty=nameWithType> by default does not allow child tasks started with the <xref:System.Threading.Tasks.TaskCreationOptions.AttachedToParent?displayProperty=nameWithType> option to attach to the current <xref:System.Threading.Tasks.Task> instance, whereas <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29> does.</span></span> <span data-ttu-id="b2054-1132">Pour plus d’informations et des exemples de code, consultez [Task.Run vs Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) dans le blog programmation parallèle avec .NET.</span><span class="sxs-lookup"><span data-stu-id="b2054-1132">For more information and code examples, see [Task.Run vs Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2054-1133">L’exemple suivant utilise le <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29> méthode à appeler à plusieurs reprises un <xref:System.Action> délégué qui génère un nombre aléatoire, il interprète comme un point de code Unicode, le convertit en une unité de code UTF16 encodé et affiche des informations sur le résultat ou les caractères.</span><span class="sxs-lookup"><span data-stu-id="b2054-1133">The following example uses the <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29> method to repeatedly invoke an <xref:System.Action> delegate that generates a random number, interprets it as a Unicode code point, converts it to a UTF16-encoded code unit, and displays information about the resulting character or characters.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.TaskFactory.StartNew#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.taskfactory.startnew/cs/startnew1.cs#1)]
 [!code-vb[System.Threading.Tasks.TaskFactory.StartNew#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.taskfactory.startnew/vb/startnew1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b2054-1134">L’argument <paramref name="action" /> a la valeur null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1134">The <paramref name="action" /> argument is null.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="b2054-1135">Bibliothèque parallèle de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1135">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="b2054-1136">Chaînage des tâches à l’aide de tâches de continuation</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1136">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md">
          <span data-ttu-id="b2054-1137">Annulation de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1137">Task Cancellation</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StartNew (Action action, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task StartNew(class System.Action action, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ StartNew(Action ^ action, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Action * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="taskFactory.StartNew (action, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="action">
          <span data-ttu-id="b2054-1138">Délégué d'action à exécuter de façon asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1138">The action delegate to execute asynchronously.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="b2054-1139">
            <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> qui sera assigné à la nouvelle tâche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1139">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b2054-1140">Crée et lance un <see cref="T:System.Threading.Tasks.Task" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1140">Creates and starts a <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b2054-1141">
            <see cref="T:System.Threading.Tasks.Task" /> démarrée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1141">The started <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2054-1142">Appel `StartNew` est fonctionnellement équivalent à la création d’une tâche à l’aide d’un de ses constructeurs et les appeler ensuite <xref:System.Threading.Tasks.Task.Start%2A> à planifier son exécution.</span><span class="sxs-lookup"><span data-stu-id="b2054-1142">Calling `StartNew` is functionally equivalent to creating a Task using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.</span></span>  
  
 <span data-ttu-id="b2054-1143">En commençant par le [!INCLUDE[net_v45](~/includes/net-v45-md.md)], vous pouvez utiliser la <xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> un moyen rapide d’appeler la méthode <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29> avec les paramètres par défaut.</span><span class="sxs-lookup"><span data-stu-id="b2054-1143">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> method as  a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29> with default parameters.</span></span> <span data-ttu-id="b2054-1144">Notez, toutefois, qu’il existe une différence de comportement entre les deux méthodes concernant : <xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> par défaut n’autorise pas les enfants tâches démarrées avec le <xref:System.Threading.Tasks.TaskCreationOptions.AttachedToParent?displayProperty=nameWithType> option d’attachement de l’actuelle <xref:System.Threading.Tasks.Task> de l’instance, tandis que <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29> est.</span><span class="sxs-lookup"><span data-stu-id="b2054-1144">Note, however, that there is a difference in behavior between the two methods regarding : <xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> by default does not allow child tasks started with the <xref:System.Threading.Tasks.TaskCreationOptions.AttachedToParent?displayProperty=nameWithType> option to attach to the current <xref:System.Threading.Tasks.Task> instance, whereas <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29> does.</span></span> <span data-ttu-id="b2054-1145">Pour plus d’informations et des exemples de code, consultez [Task.Run vs Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) dans le blog programmation parallèle avec .NET.</span><span class="sxs-lookup"><span data-stu-id="b2054-1145">For more information and code examples, see [Task.Run vs Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2054-1146">L’exemple suivant appelle la <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29> méthode pour créer une tâche qui effectue une itération de fichiers dans le répertoire C:\Windows\System32.</span><span class="sxs-lookup"><span data-stu-id="b2054-1146">The following example calls the <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29> method to create a task that iterates the files in the C:\Windows\System32 directory.</span></span> <span data-ttu-id="b2054-1147">L’expression lambda appelle la <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> méthode pour ajouter des informations sur chaque fichier à un <xref:System.Collections.Generic.List%601> objet.</span><span class="sxs-lookup"><span data-stu-id="b2054-1147">The lambda expression calls the <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method to add information about each  file to a <xref:System.Collections.Generic.List%601> object.</span></span> <span data-ttu-id="b2054-1148">Chaque détachée tâche imbriquée appelée par le <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> boucle vérifie l’état du jeton d’annulation et, si l’annulation est demandée, appelle le <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="b2054-1148">Each detached nested task invoked by the <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> loop checks the state of the cancellation token and, if cancellation is requested, calls the <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="b2054-1149">Le <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType> méthode lève une exception une <xref:System.OperationCanceledException> exception est gérée dans un `catch` bloquer lorsque le thread appelant appelle la <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="b2054-1149">The <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType> method throws an <xref:System.OperationCanceledException> exception that is handled in a `catch` block when the calling thread calls the <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.TaskFactory.StartNew#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.taskfactory.startnew/cs/startnew2.cs#2)]
 [!code-vb[System.Threading.Tasks.TaskFactory.StartNew#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.taskfactory.startnew/vb/startnew2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b2054-1150">Le <see cref="T:System.Threading.CancellationToken" /> fourni a déjà été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1150">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b2054-1151">Exception levée quand l’argument <paramref name="action" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1151">The exception that is thrown when the <paramref name="action" /> argument is null.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="b2054-1152">Bibliothèque parallèle de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1152">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="b2054-1153">Chaînage des tâches à l’aide de tâches de continuation</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1153">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md">
          <span data-ttu-id="b2054-1154">Annulation de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1154">Task Cancellation</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StartNew (Action action, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task StartNew(class System.Action action, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ StartNew(Action ^ action, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Action * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task" Usage="taskFactory.StartNew (action, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <param name="action">
          <span data-ttu-id="b2054-1155">Délégué d'action à exécuter de façon asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1155">The action delegate to execute asynchronously.</span>
          </span>
        </param>
        <param name="creationOptions">
          <span data-ttu-id="b2054-1156">Valeur TaskCreationOptions qui contrôle le comportement du <see cref="T:System.Threading.Tasks.Task" /> créé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1156">A TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task" /></span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b2054-1157">Crée et lance un <see cref="T:System.Threading.Tasks.Task" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1157">Creates and starts a <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b2054-1158">
            <see cref="T:System.Threading.Tasks.Task" /> démarrée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1158">The started <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2054-1159">Appel de StartNew est fonctionnellement équivalent à la création d’une tâche à l’aide d’un de ses constructeurs et les appeler ensuite <xref:System.Threading.Tasks.Task.Start%2A> à planifier son exécution.</span><span class="sxs-lookup"><span data-stu-id="b2054-1159">Calling StartNew is functionally equivalent to creating a Task using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.</span></span>  
  
 <span data-ttu-id="b2054-1160">En commençant par le [!INCLUDE[net_v45](~/includes/net-v45-md.md)], vous pouvez utiliser la <xref:System.Threading.Tasks.Task.Run%2A> méthode avec un <xref:System.Action> objet comme un moyen rapide d’appeler <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> avec les paramètres par défaut.</span><span class="sxs-lookup"><span data-stu-id="b2054-1160">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as  a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters.</span></span> <span data-ttu-id="b2054-1161">Pour plus d’informations et des exemples de code, consultez [Task.Run vs Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) dans le blog programmation parallèle avec .NET.</span><span class="sxs-lookup"><span data-stu-id="b2054-1161">For more information and code examples, see [Task.Run vs Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b2054-1162">Exception levée quand l’argument <paramref name="action" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1162">The exception that is thrown when the <paramref name="action" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b2054-1163">Exception levée lorsque l'argument <paramref name="creationOptions" /> spécifie une valeur TaskCreationOptions non valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1163">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="b2054-1164">Bibliothèque parallèle de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1164">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="b2054-1165">Chaînage des tâches à l’aide de tâches de continuation</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1165">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md">
          <span data-ttu-id="b2054-1166">Annulation de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1166">Task Cancellation</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StartNew (Action&lt;object&gt; action, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task StartNew(class System.Action`1&lt;object&gt; action, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StartNew (action As Action(Of Object), state As Object) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ StartNew(Action&lt;System::Object ^&gt; ^ action, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Action&lt;obj&gt; * obj -&gt; System.Threading.Tasks.Task" Usage="taskFactory.StartNew (action, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action&lt;System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="action">
          <span data-ttu-id="b2054-1167">Délégué d'action à exécuter de façon asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1167">The action delegate to execute asynchronously.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="b2054-1168">Objet contenant des données que le délégué <paramref name="action" /> doit utiliser.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1168">An object containing data to be used by the <paramref name="action" /> delegate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b2054-1169">Crée et lance un <see cref="T:System.Threading.Tasks.Task" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1169">Creates and starts a <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b2054-1170">
            <see cref="T:System.Threading.Tasks.Task" /> démarrée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1170">The started <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2054-1171">Appel <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> est fonctionnellement équivalent à la création d’un <xref:System.Threading.Tasks.Task> à l’aide d’un de ses constructeurs, puis en appelant le <xref:System.Threading.Tasks.Task.Start%2A> méthode à planifier son exécution.</span><span class="sxs-lookup"><span data-stu-id="b2054-1171">Calling <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> is functionally equivalent to creating a <xref:System.Threading.Tasks.Task> using one of its constructors and then calling the <xref:System.Threading.Tasks.Task.Start%2A> method to schedule it for execution.</span></span>  
  
 <span data-ttu-id="b2054-1172">En commençant par le [!INCLUDE[net_v45](~/includes/net-v45-md.md)], vous pouvez utiliser la <xref:System.Threading.Tasks.Task.Run%2A> méthode avec un <xref:System.Action> objet comme un moyen rapide d’appeler <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> avec les paramètres par défaut.</span><span class="sxs-lookup"><span data-stu-id="b2054-1172">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as  a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters.</span></span> <span data-ttu-id="b2054-1173">Pour plus d’informations et des exemples de code, consultez [Task.Run vs Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) dans le blog programmation parallèle avec .NET.</span><span class="sxs-lookup"><span data-stu-id="b2054-1173">For more information and code examples, see [Task.Run vs Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2054-1174">L’exemple suivant définit un tableau de mots de la lettre de 6.</span><span class="sxs-lookup"><span data-stu-id="b2054-1174">The following example defines an array of 6-letter words.</span></span> <span data-ttu-id="b2054-1175">Chaque mot est ensuite transmise à un <xref:System.Action%601> délégué, qui brouille le mot et affiche le mot d’origine et sa version brouillée.</span><span class="sxs-lookup"><span data-stu-id="b2054-1175">Each word is then passed to an <xref:System.Action%601> delegate, which scrambles the word and displays the original word and its scrambled version.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.TaskFactory.StartNew#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.taskfactory.startnew/cs/startnew3.cs#3)]
 [!code-vb[System.Threading.Tasks.TaskFactory.StartNew#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.taskfactory.startnew/vb/startnew3.vb#3)]  
  
 <span data-ttu-id="b2054-1176">Notez que l’exemple initialise un seul générateur de nombres aléatoires, ce qui est protégé par un verrou.</span><span class="sxs-lookup"><span data-stu-id="b2054-1176">Note that the example initializes a single random number generator, which is protected by a lock.</span></span> <span data-ttu-id="b2054-1177">Pour la nécessité d’un verrou, consultez « La sécurité thread et de la classe System.Random » dans le <xref:System.Random> rubrique de la classe.</span><span class="sxs-lookup"><span data-stu-id="b2054-1177">For the need of a lock, see "The System.Random class and thread safety" in the <xref:System.Random> class topic.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b2054-1178">L'argument <paramref name="action" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1178">The <paramref name="action" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="b2054-1179">Bibliothèque parallèle de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1179">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="b2054-1180">Chaînage des tâches à l’aide de tâches de continuation</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1180">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md">
          <span data-ttu-id="b2054-1181">Annulation de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1181">Task Cancellation</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StartNew (Action&lt;object&gt; action, object state, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task StartNew(class System.Action`1&lt;object&gt; action, object state, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ StartNew(Action&lt;System::Object ^&gt; ^ action, System::Object ^ state, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Action&lt;obj&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="taskFactory.StartNew (action, state, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action&lt;System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="action">
          <span data-ttu-id="b2054-1182">Délégué d'action à exécuter de façon asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1182">The action delegate to execute asynchronously.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="b2054-1183">Objet contenant des données que le délégué <paramref name="action" /> doit utiliser.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1183">An object containing data to be used by the <paramref name="action" /> delegate.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="b2054-1184">
            <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> qui sera assigné au nouveau <see cref="T:System.Threading.Tasks.Task" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1184">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new <see cref="T:System.Threading.Tasks.Task" /></span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b2054-1185">Crée et lance un <see cref="T:System.Threading.Tasks.Task" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1185">Creates and starts a <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b2054-1186">
            <see cref="T:System.Threading.Tasks.Task" /> démarrée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1186">The started <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2054-1187">Appel de StartNew est fonctionnellement équivalent à la création d’une tâche à l’aide d’un de ses constructeurs et les appeler ensuite <xref:System.Threading.Tasks.Task.Start%2A> à planifier son exécution.</span><span class="sxs-lookup"><span data-stu-id="b2054-1187">Calling StartNew is functionally equivalent to creating a Task using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.</span></span>  
  
 <span data-ttu-id="b2054-1188">En commençant par le [!INCLUDE[net_v45](~/includes/net-v45-md.md)], vous pouvez utiliser la <xref:System.Threading.Tasks.Task.Run%2A> méthode avec un <xref:System.Action> objet comme un moyen rapide d’appeler <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> avec les paramètres par défaut.</span><span class="sxs-lookup"><span data-stu-id="b2054-1188">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as  a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters.</span></span> <span data-ttu-id="b2054-1189">Pour plus d’informations et des exemples de code, consultez [Task.Run vs Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) dans le blog programmation parallèle avec .NET.</span><span class="sxs-lookup"><span data-stu-id="b2054-1189">For more information and code examples, see [Task.Run vs Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2054-1190">L’exemple suivant définit un tableau de mots de la lettre de 6.</span><span class="sxs-lookup"><span data-stu-id="b2054-1190">The following example defines an array of 6-letter words.</span></span> <span data-ttu-id="b2054-1191">Chaque mot est ensuite transmise à un <xref:System.Action%601> délégué, qui brouille le mot et affiche le mot d’origine et sa version brouillée.</span><span class="sxs-lookup"><span data-stu-id="b2054-1191">Each word is then passed to an <xref:System.Action%601> delegate, which scrambles the word and displays the original word and its scrambled version.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.TaskFactory.StartNew#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.taskfactory.startnew/cs/startnew4.cs#4)]
 [!code-vb[System.Threading.Tasks.TaskFactory.StartNew#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.taskfactory.startnew/vb/startnew4.vb#4)]  
  
 <span data-ttu-id="b2054-1192">Notez que l’exemple initialise un seul générateur de nombres aléatoires, ce qui est protégé par un verrou.</span><span class="sxs-lookup"><span data-stu-id="b2054-1192">Note that the example initializes a single random number generator, which is protected by a lock.</span></span> <span data-ttu-id="b2054-1193">Pour la nécessité d’un verrou, consultez « La sécurité thread et de la classe System.Random » dans le <xref:System.Random> rubrique de la classe.</span><span class="sxs-lookup"><span data-stu-id="b2054-1193">For the need of a lock, see "The System.Random class and thread safety" in the <xref:System.Random> class topic.</span></span> <span data-ttu-id="b2054-1194">Pour gérer la possibilité d’une corruption du Générateur de nombres aléatoires, un jeton d’annulation est passé à la tâche.</span><span class="sxs-lookup"><span data-stu-id="b2054-1194">To handle the possibility of corruption of the random number generator, a cancellation token is passed to task.</span></span> <span data-ttu-id="b2054-1195">Si deux nombres aléatoires est égale à zéro, la méthode suppose que le Générateur de nombres aléatoires est endommagé et qu’il définit le jeton d’annulation.</span><span class="sxs-lookup"><span data-stu-id="b2054-1195">If two random numbers equal zero, the method assumes that the random number generator is corrupted and sets the cancellation token.</span></span> <span data-ttu-id="b2054-1196">Avant de trier les `chars` tableau qui contient les six caractères dans un mot, les appels de méthode le <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType> méthode lève un <xref:System.OperationCanceledException> si le jeton a été annulé.</span><span class="sxs-lookup"><span data-stu-id="b2054-1196">Before sorting the `chars` array that contains the six characters in a word, the method calls the <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType> method to throw an <xref:System.OperationCanceledException> if the token has been canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b2054-1197">Le <see cref="T:System.Threading.CancellationToken" /> fourni a déjà été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1197">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b2054-1198">Exception levée quand l’argument <paramref name="action" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1198">The exception that is thrown when the <paramref name="action" /> argument is null.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="b2054-1199">Bibliothèque parallèle de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1199">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="b2054-1200">Chaînage des tâches à l’aide de tâches de continuation</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1200">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md">
          <span data-ttu-id="b2054-1201">Annulation de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1201">Task Cancellation</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StartNew (Action&lt;object&gt; action, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task StartNew(class System.Action`1&lt;object&gt; action, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function StartNew (action As Action(Of Object), state As Object, creationOptions As TaskCreationOptions) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ StartNew(Action&lt;System::Object ^&gt; ^ action, System::Object ^ state, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Action&lt;obj&gt; * obj * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task" Usage="taskFactory.StartNew (action, state, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action&lt;System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <param name="action">
          <span data-ttu-id="b2054-1202">Délégué d'action à exécuter de façon asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1202">The action delegate to execute asynchronously.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="b2054-1203">Objet contenant des données que le délégué <paramref name="action" /> doit utiliser.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1203">An object containing data to be used by the <paramref name="action" /> delegate.</span>
          </span>
        </param>
        <param name="creationOptions">
          <span data-ttu-id="b2054-1204">Valeur TaskCreationOptions qui contrôle le comportement du <see cref="T:System.Threading.Tasks.Task" /> créé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1204">A TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task" /></span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b2054-1205">Crée et lance un <see cref="T:System.Threading.Tasks.Task" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1205">Creates and starts a <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b2054-1206">
            <see cref="T:System.Threading.Tasks.Task" /> démarrée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1206">The started <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2054-1207">Appel de StartNew est fonctionnellement équivalent à la création d’une tâche à l’aide d’un de ses constructeurs et les appeler ensuite <xref:System.Threading.Tasks.Task.Start%2A> à planifier son exécution.</span><span class="sxs-lookup"><span data-stu-id="b2054-1207">Calling StartNew is functionally equivalent to creating a Task using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.</span></span>  
  
 <span data-ttu-id="b2054-1208">En commençant par le [!INCLUDE[net_v45](~/includes/net-v45-md.md)], vous pouvez utiliser la <xref:System.Threading.Tasks.Task.Run%2A> méthode avec un <xref:System.Action> objet comme un moyen rapide d’appeler <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> avec les paramètres par défaut.</span><span class="sxs-lookup"><span data-stu-id="b2054-1208">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as  a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters.</span></span> <span data-ttu-id="b2054-1209">Pour plus d’informations et des exemples de code, consultez [Task.Run vs Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) dans le blog programmation parallèle avec .NET.</span><span class="sxs-lookup"><span data-stu-id="b2054-1209">For more information and code examples, see [Task.Run vs Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b2054-1210">Exception levée quand l’argument <paramref name="action" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1210">The exception that is thrown when the <paramref name="action" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b2054-1211">Exception levée lorsque l'argument <paramref name="creationOptions" /> spécifie une valeur TaskCreationOptions non valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1211">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="b2054-1212">Bibliothèque parallèle de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1212">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="b2054-1213">Chaînage des tâches à l’aide de tâches de continuation</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1213">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md">
          <span data-ttu-id="b2054-1214">Annulation de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1214">Task Cancellation</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StartNew (Action action, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task StartNew(class System.Action action, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ StartNew(Action ^ action, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskCreationOptions creationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Action * System.Threading.CancellationToken * System.Threading.Tasks.TaskCreationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task" Usage="taskFactory.StartNew (action, cancellationToken, creationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="action">
          <span data-ttu-id="b2054-1215">Délégué d'action à exécuter de façon asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1215">The action delegate to execute asynchronously.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="b2054-1216">
            <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> qui sera assigné au nouveau <see cref="T:System.Threading.Tasks.Task" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1216">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new <see cref="T:System.Threading.Tasks.Task" /></span>
          </span>
        </param>
        <param name="creationOptions">
          <span data-ttu-id="b2054-1217">Valeur TaskCreationOptions qui contrôle le comportement du <see cref="T:System.Threading.Tasks.Task" /> créé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1217">A TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task" /></span>
          </span>
        </param>
        <param name="scheduler">
          <span data-ttu-id="b2054-1218">
            <see cref="T:System.Threading.Tasks.TaskScheduler" /> utilisé pour planifier la <see cref="T:System.Threading.Tasks.Task" /> créée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1218">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the created <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b2054-1219">Crée et lance un <see cref="T:System.Threading.Tasks.Task" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1219">Creates and starts a <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b2054-1220">
            <see cref="T:System.Threading.Tasks.Task" /> démarrée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1220">The started <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2054-1221">Appel de StartNew est fonctionnellement équivalent à la création d’une tâche à l’aide d’un de ses constructeurs et les appeler ensuite <xref:System.Threading.Tasks.Task.Start%2A> à planifier son exécution.</span><span class="sxs-lookup"><span data-stu-id="b2054-1221">Calling StartNew is functionally equivalent to creating a Task using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.</span></span>  
  
 <span data-ttu-id="b2054-1222">En commençant par le [!INCLUDE[net_v45](~/includes/net-v45-md.md)], vous pouvez utiliser la <xref:System.Threading.Tasks.Task.Run%2A> méthode avec un <xref:System.Action> objet comme un moyen rapide d’appeler <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> avec les paramètres par défaut.</span><span class="sxs-lookup"><span data-stu-id="b2054-1222">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as  a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters.</span></span> <span data-ttu-id="b2054-1223">Pour plus d’informations et des exemples de code, consultez [Task.Run vs Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) dans le blog programmation parallèle avec .NET.</span><span class="sxs-lookup"><span data-stu-id="b2054-1223">For more information and code examples, see [Task.Run vs Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b2054-1224">Le <see cref="T:System.Threading.CancellationToken" /> fourni a déjà été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1224">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b2054-1225">Exception levée quand l’argument <paramref name="action" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1225">The exception that is thrown when the <paramref name="action" /> argument is null.</span>
          </span>
          <span data-ttu-id="b2054-1226">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1226">-or-</span>
          </span>
          <span data-ttu-id="b2054-1227">Exception levée quand l’argument <paramref name="scheduler" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1227">The exception that is thrown when the <paramref name="scheduler" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b2054-1228">Exception levée lorsque l'argument <paramref name="creationOptions" /> spécifie une valeur TaskCreationOptions non valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1228">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span>
          </span>
          <span data-ttu-id="b2054-1229">Exception levée lorsque l'argument <paramref name="creationOptions" /> spécifie une valeur TaskCreationOptions non valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1229">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span>
          </span>
          <span data-ttu-id="b2054-1230">Pour plus d'informations, consultez la section Notes de la rubrique <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1230">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="b2054-1231">Bibliothèque parallèle de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1231">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="b2054-1232">Chaînage des tâches à l’aide de tâches de continuation</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1232">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md">
          <span data-ttu-id="b2054-1233">Annulation de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1233">Task Cancellation</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StartNew (Action&lt;object&gt; action, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task StartNew(class System.Action`1&lt;object&gt; action, object state, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ StartNew(Action&lt;System::Object ^&gt; ^ action, System::Object ^ state, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskCreationOptions creationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Action&lt;obj&gt; * obj * System.Threading.CancellationToken * System.Threading.Tasks.TaskCreationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task" Usage="taskFactory.StartNew (action, state, cancellationToken, creationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action&lt;System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="action">
          <span data-ttu-id="b2054-1234">Délégué d'action à exécuter de façon asynchrone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1234">The action delegate to execute asynchronously.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="b2054-1235">Objet contenant des données que le délégué <paramref name="action" /> doit utiliser.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1235">An object containing data to be used by the <paramref name="action" /> delegate.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="b2054-1236">
            <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> qui sera assigné à la nouvelle tâche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1236">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new task.</span>
          </span>
        </param>
        <param name="creationOptions">
          <span data-ttu-id="b2054-1237">Valeur TaskCreationOptions qui contrôle le comportement du <see cref="T:System.Threading.Tasks.Task" /> créé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1237">A TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task" /></span>
          </span>
        </param>
        <param name="scheduler">
          <span data-ttu-id="b2054-1238">
            <see cref="T:System.Threading.Tasks.TaskScheduler" /> utilisé pour planifier la <see cref="T:System.Threading.Tasks.Task" /> créée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1238">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the created <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b2054-1239">Crée et lance un <see cref="T:System.Threading.Tasks.Task" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1239">Creates and starts a <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b2054-1240">
            <see cref="T:System.Threading.Tasks.Task" /> démarrée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1240">The started <see cref="T:System.Threading.Tasks.Task" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2054-1241">Appel de StartNew est fonctionnellement équivalent à la création d’une tâche à l’aide d’un de ses constructeurs et les appeler ensuite <xref:System.Threading.Tasks.Task.Start%2A> à planifier son exécution.</span><span class="sxs-lookup"><span data-stu-id="b2054-1241">Calling StartNew is functionally equivalent to creating a Task using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.</span></span>  
  
 <span data-ttu-id="b2054-1242">En commençant par le [!INCLUDE[net_v45](~/includes/net-v45-md.md)], vous pouvez utiliser la <xref:System.Threading.Tasks.Task.Run%2A> méthode avec un <xref:System.Action> objet comme un moyen rapide d’appeler <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> avec les paramètres par défaut.</span><span class="sxs-lookup"><span data-stu-id="b2054-1242">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as  a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters.</span></span> <span data-ttu-id="b2054-1243">Pour plus d’informations et des exemples de code, consultez [Task.Run vs Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) dans le blog programmation parallèle avec .NET.</span><span class="sxs-lookup"><span data-stu-id="b2054-1243">For more information and code examples, see [Task.Run vs Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b2054-1244">Le <see cref="T:System.Threading.CancellationToken" /> fourni a déjà été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1244">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b2054-1245">Exception levée quand l’argument <paramref name="action" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1245">The exception that is thrown when the <paramref name="action" /> argument is null.</span>
          </span>
          <span data-ttu-id="b2054-1246">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1246">-or-</span>
          </span>
          <span data-ttu-id="b2054-1247">Exception levée quand l’argument <paramref name="scheduler" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1247">The exception that is thrown when the <paramref name="scheduler" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b2054-1248">Exception levée lorsque l'argument <paramref name="creationOptions" /> spécifie une valeur TaskCreationOptions non valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1248">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span>
          </span>
          <span data-ttu-id="b2054-1249">Exception levée lorsque l'argument <paramref name="creationOptions" /> spécifie une valeur TaskCreationOptions non valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1249">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span>
          </span>
          <span data-ttu-id="b2054-1250">Pour plus d'informations, consultez la section Notes de la rubrique <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1250">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="b2054-1251">Bibliothèque parallèle de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1251">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="b2054-1252">Chaînage des tâches à l’aide de tâches de continuation</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1252">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md">
          <span data-ttu-id="b2054-1253">Annulation de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1253">Task Cancellation</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="StartNew&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; StartNew&lt;TResult&gt; (Func&lt;TResult&gt; function);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; StartNew&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; function) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function StartNew(Of TResult) (function As Func(Of TResult)) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ StartNew(Func&lt;TResult&gt; ^ function);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Func&lt;'Result&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.StartNew function" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="b2054-1254">Type du résultat disponible via le <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1254">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </typeparam>
        <param name="function">
          <span data-ttu-id="b2054-1255">Délégué de fonction qui retourne le résultat à venir qui sera mis à disposition via <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1255">A function delegate that returns the future result to be available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b2054-1256">Crée et lance un <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1256">Creates and starts a <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b2054-1257">
            <see cref="T:System.Threading.Tasks.Task`1" /> démarrée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1257">The started <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2054-1258">Appel <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> est fonctionnellement équivalent à la création d’un <xref:System.Threading.Tasks.Task%601> à l’aide d’un de ses constructeurs, puis en appelant <xref:System.Threading.Tasks.Task.Start%2A> à planifier son exécution.</span><span class="sxs-lookup"><span data-stu-id="b2054-1258">Calling <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> is functionally equivalent to creating a <xref:System.Threading.Tasks.Task%601> using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.</span></span>  
  
 <span data-ttu-id="b2054-1259">En commençant par le [!INCLUDE[net_v45](~/includes/net-v45-md.md)], vous pouvez appeler la <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%29?displayProperty=nameWithType> un moyen rapide d’appeler la méthode <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> avec les paramètres par défaut.</span><span class="sxs-lookup"><span data-stu-id="b2054-1259">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can call the <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%29?displayProperty=nameWithType> method as a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters.</span></span> <span data-ttu-id="b2054-1260">Notez, toutefois, qu’il existe une différence de comportement entre les deux méthodes concernant : <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%29?displayProperty=nameWithType> par défaut n’autorise pas les enfants tâches démarrées avec le <xref:System.Threading.Tasks.TaskCreationOptions.AttachedToParent?displayProperty=nameWithType> option d’attachement de l’actuelle <xref:System.Threading.Tasks.Task%601> de l’instance, tandis que <xref:System.Threading.Tasks.TaskFactory.StartNew%60%601%28System.Func%7B%60%600%7D%29> est.</span><span class="sxs-lookup"><span data-stu-id="b2054-1260">Note, however, that there is a difference in behavior between the two methods regarding : <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%29?displayProperty=nameWithType> by default does not allow child tasks started with the <xref:System.Threading.Tasks.TaskCreationOptions.AttachedToParent?displayProperty=nameWithType> option to attach to the current <xref:System.Threading.Tasks.Task%601> instance, whereas <xref:System.Threading.Tasks.TaskFactory.StartNew%60%601%28System.Func%7B%60%600%7D%29> does.</span></span> <span data-ttu-id="b2054-1261">Pour plus d’informations et des exemples de code, consultez l’entrée [Task.Run vs. Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) dans le blog programmation parallèle avec .NET.</span><span class="sxs-lookup"><span data-stu-id="b2054-1261">For more information and code examples, see the entry [Task.Run vs. Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2054-1262">L’exemple suivant est une application d’addition simple qui génère deux nombres aléatoires et invite l’utilisateur à entrer leur somme.</span><span class="sxs-lookup"><span data-stu-id="b2054-1262">The following example is a simple addition app that generates two random numbers and prompts the user to enter their sum.</span></span> <span data-ttu-id="b2054-1263">Ensuite, il indique que la réponse est correcte ou, si la réponse de l’utilisateur n’est pas un nombre valid, invite l’utilisateur à entrer à nouveau un nombre valide.</span><span class="sxs-lookup"><span data-stu-id="b2054-1263">It then indicates whether the answer is correct or, if the user's response is not a valid number, prompts the user to re-enter a valid number.</span></span> <span data-ttu-id="b2054-1264">Le <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> est utilisé pour créer le <xref:System.Threading.Tasks.Task%601> les objets qui retournent les nombres aléatoires à ajouter.</span><span class="sxs-lookup"><span data-stu-id="b2054-1264">The <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> is used to create the <xref:System.Threading.Tasks.Task%601> objects that return the random numbers to add.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Run#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/run5.cs#5)]
 [!code-vb[System.Threading.Tasks.Task.Run#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/run5.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b2054-1265">L'argument <paramref name="function" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1265">The <paramref name="function" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="b2054-1266">Bibliothèque parallèle de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1266">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="b2054-1267">Chaînage des tâches à l’aide de tâches de continuation</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1267">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md">
          <span data-ttu-id="b2054-1268">Annulation de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1268">Task Cancellation</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="StartNew&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; StartNew&lt;TResult&gt; (Func&lt;object,TResult&gt; function, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; StartNew&lt;TResult&gt;(class System.Func`2&lt;object, !!TResult&gt; function, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StartNew(Of TResult) (function As Func(Of Object, TResult), state As Object) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ StartNew(Func&lt;System::Object ^, TResult&gt; ^ function, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Func&lt;obj, 'Result&gt; * obj -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.StartNew (function, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Object,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="b2054-1269">Type du résultat disponible via le <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1269">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </typeparam>
        <param name="function">
          <span data-ttu-id="b2054-1270">Délégué de fonction qui retourne le résultat à venir qui sera mis à disposition via <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1270">A function delegate that returns the future result to be available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="b2054-1271">Objet contenant des données que le délégué <paramref name="function" /> doit utiliser.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1271">An object containing data to be used by the <paramref name="function" /> delegate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b2054-1272">Crée et lance un <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1272">Creates and starts a <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b2054-1273">
            <see cref="T:System.Threading.Tasks.Task`1" /> démarrée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1273">The started <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2054-1274">Appel de StartNew est fonctionnellement équivalent à la création d’un <xref:System.Threading.Tasks.Task%601> à l’aide d’un de ses constructeurs, puis en appelant <xref:System.Threading.Tasks.Task.Start%2A> à planifier son exécution.</span><span class="sxs-lookup"><span data-stu-id="b2054-1274">Calling StartNew is functionally equivalent to creating a <xref:System.Threading.Tasks.Task%601> using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.</span></span>  
  
 <span data-ttu-id="b2054-1275">En commençant par le [!INCLUDE[net_v45](~/includes/net-v45-md.md)], vous pouvez utiliser la <xref:System.Threading.Tasks.Task.Run%2A> méthode avec un <xref:System.Action> objet comme un moyen rapide d’appeler <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> avec les paramètres par défaut.</span><span class="sxs-lookup"><span data-stu-id="b2054-1275">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters.</span></span> <span data-ttu-id="b2054-1276">Pour plus d’informations et des exemples de code, consultez l’entrée [Task.Run vs. Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) dans le blog programmation parallèle avec .NET.</span><span class="sxs-lookup"><span data-stu-id="b2054-1276">For more information and code examples, see the entry [Task.Run vs. Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b2054-1277">Exception levée quand l’argument <paramref name="function" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1277">The exception that is thrown when the <paramref name="function" /> argument is null.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="b2054-1278">Bibliothèque parallèle de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1278">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="b2054-1279">Chaînage des tâches à l’aide de tâches de continuation</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1279">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md">
          <span data-ttu-id="b2054-1280">Annulation de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1280">Task Cancellation</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="StartNew&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; StartNew&lt;TResult&gt; (Func&lt;TResult&gt; function, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; StartNew&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; function, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ StartNew(Func&lt;TResult&gt; ^ function, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Func&lt;'Result&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.StartNew (function, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="b2054-1281">Type du résultat disponible via le <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1281">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </typeparam>
        <param name="function">
          <span data-ttu-id="b2054-1282">Délégué de fonction qui retourne le résultat à venir qui sera mis à disposition via <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1282">A function delegate that returns the future result to be available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="b2054-1283">
            <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> qui sera assigné au nouveau <see cref="T:System.Threading.Tasks.Task" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1283">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new <see cref="T:System.Threading.Tasks.Task" /></span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b2054-1284">Crée et lance un <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1284">Creates and starts a <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b2054-1285">
            <see cref="T:System.Threading.Tasks.Task`1" /> démarrée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1285">The started <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2054-1286">Appel <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> est fonctionnellement équivalent à la création d’un <xref:System.Threading.Tasks.Task%601> à l’aide d’un de ses constructeurs, puis en appelant <xref:System.Threading.Tasks.Task.Start%2A> à planifier son exécution.</span><span class="sxs-lookup"><span data-stu-id="b2054-1286">Calling <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> is functionally equivalent to creating a <xref:System.Threading.Tasks.Task%601> using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.</span></span>  
  
 <span data-ttu-id="b2054-1287">En commençant par le [!INCLUDE[net_v45](~/includes/net-v45-md.md)], vous pouvez utiliser la <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> un moyen rapide d’appeler la méthode <xref:System.Threading.Tasks.TaskFactory.StartNew%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29> avec les paramètres par défaut.</span><span class="sxs-lookup"><span data-stu-id="b2054-1287">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> method as a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29> with default parameters.</span></span> <span data-ttu-id="b2054-1288">Notez, toutefois, qu’il existe une différence de comportement entre les deux méthodes concernant : <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> par défaut n’autorise pas les enfants tâches démarrées avec le <xref:System.Threading.Tasks.TaskCreationOptions.AttachedToParent?displayProperty=nameWithType> option d’attachement de l’actuelle <xref:System.Threading.Tasks.Task%601> de l’instance, tandis que <xref:System.Threading.Tasks.TaskFactory.StartNew%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29> est.</span><span class="sxs-lookup"><span data-stu-id="b2054-1288">Note, however, that there is a difference in behavior between the two methods regarding : <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> by default does not allow child tasks started with the <xref:System.Threading.Tasks.TaskCreationOptions.AttachedToParent?displayProperty=nameWithType> option to attach to the current <xref:System.Threading.Tasks.Task%601> instance, whereas <xref:System.Threading.Tasks.TaskFactory.StartNew%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29> does.</span></span> <span data-ttu-id="b2054-1289">Pour plus d’informations et des exemples de code, consultez l’entrée [Task.Run vs. Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) dans le blog programmation parallèle avec .NET.</span><span class="sxs-lookup"><span data-stu-id="b2054-1289">For more information and code examples, see the entry [Task.Run vs. Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2054-1290">L’exemple suivant utilise deux tâches pour calculer la séquence de Fibonacci se terminant par F100 = F100-1 + F100-2 avec des valeurs de départ F1 = 1, F2 = 1 et F1 = 0, F2 = 1.</span><span class="sxs-lookup"><span data-stu-id="b2054-1290">The following example uses two tasks to compute the Fibonacci sequence ending in F100 = F100-1 + F100-2 with seed values F1= 1, F2 = 1 and F1 = 0, F2= 1.</span></span> <span data-ttu-id="b2054-1291">Environ la moitié du temps, un jeton d’annulation est défini comme les opérations s’exécutent.</span><span class="sxs-lookup"><span data-stu-id="b2054-1291">Approximately half of the time, a cancellation token is set as the operations execute.</span></span> <span data-ttu-id="b2054-1292">La sortie de l’exemple montre le résultat si les deux tâches se terminent avec succès et si le jeton est annulé.</span><span class="sxs-lookup"><span data-stu-id="b2054-1292">The output from the example shows the result if the two tasks complete successfully and if the token is cancelled.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Run#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/Run9.cs#9)]
 [!code-vb[System.Threading.Tasks.Task.Run#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/Run9.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b2054-1293">Le <see cref="T:System.Threading.CancellationToken" /> fourni a déjà été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1293">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b2054-1294">Exception levée quand l’argument <paramref name="function" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1294">The exception that is thrown when the <paramref name="function" /> argument is null.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="b2054-1295">Bibliothèque parallèle de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1295">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="b2054-1296">Chaînage des tâches à l’aide de tâches de continuation</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1296">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md">
          <span data-ttu-id="b2054-1297">Annulation de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1297">Task Cancellation</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="StartNew&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; StartNew&lt;TResult&gt; (Func&lt;TResult&gt; function, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; StartNew&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; function, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function StartNew(Of TResult) (function As Func(Of TResult), creationOptions As TaskCreationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ StartNew(Func&lt;TResult&gt; ^ function, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Func&lt;'Result&gt; * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.StartNew (function, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="b2054-1298">Type du résultat disponible via le <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1298">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </typeparam>
        <param name="function">
          <span data-ttu-id="b2054-1299">Délégué de fonction qui retourne le résultat à venir qui sera mis à disposition via <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1299">A function delegate that returns the future result to be available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </param>
        <param name="creationOptions">
          <span data-ttu-id="b2054-1300">Valeur TaskCreationOptions qui contrôle le comportement du <see cref="T:System.Threading.Tasks.Task`1" /> créé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1300">A TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b2054-1301">Crée et lance un <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1301">Creates and starts a <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b2054-1302">
            <see cref="T:System.Threading.Tasks.Task`1" /> démarrée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1302">The started <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2054-1303">Appel de StartNew est fonctionnellement équivalent à la création d’un <xref:System.Threading.Tasks.Task%601> à l’aide d’un de ses constructeurs, puis en appelant <xref:System.Threading.Tasks.Task.Start%2A> à planifier son exécution.</span><span class="sxs-lookup"><span data-stu-id="b2054-1303">Calling StartNew is functionally equivalent to creating a <xref:System.Threading.Tasks.Task%601> using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.</span></span>  
  
 <span data-ttu-id="b2054-1304">En commençant par le [!INCLUDE[net_v45](~/includes/net-v45-md.md)], vous pouvez utiliser la <xref:System.Threading.Tasks.Task.Run%2A> méthode avec un <xref:System.Action> objet comme un moyen rapide d’appeler <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> avec les paramètres par défaut.</span><span class="sxs-lookup"><span data-stu-id="b2054-1304">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters.</span></span> <span data-ttu-id="b2054-1305">Pour plus d’informations et des exemples de code, consultez l’entrée [Task.Run vs. Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) dans le blog programmation parallèle avec .NET.</span><span class="sxs-lookup"><span data-stu-id="b2054-1305">For more information and code examples, see the entry [Task.Run vs. Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b2054-1306">Exception levée quand l’argument <paramref name="function" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1306">The exception that is thrown when the <paramref name="function" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b2054-1307">Exception levée lorsque l'argument <paramref name="creationOptions" /> spécifie une valeur TaskCreationOptions non valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1307">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span>
          </span>
          <span data-ttu-id="b2054-1308">Exception levée lorsque l'argument <paramref name="creationOptions" /> spécifie une valeur TaskCreationOptions non valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1308">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span>
          </span>
          <span data-ttu-id="b2054-1309">Pour plus d'informations, consultez la section Notes de la rubrique <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1309">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="b2054-1310">Bibliothèque parallèle de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1310">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="b2054-1311">Chaînage des tâches à l’aide de tâches de continuation</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1311">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md">
          <span data-ttu-id="b2054-1312">Annulation de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1312">Task Cancellation</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="StartNew&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; StartNew&lt;TResult&gt; (Func&lt;object,TResult&gt; function, object state, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; StartNew&lt;TResult&gt;(class System.Func`2&lt;object, !!TResult&gt; function, object state, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ StartNew(Func&lt;System::Object ^, TResult&gt; ^ function, System::Object ^ state, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Func&lt;obj, 'Result&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.StartNew (function, state, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Object,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="b2054-1313">Type du résultat disponible via le <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1313">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </typeparam>
        <param name="function">
          <span data-ttu-id="b2054-1314">Délégué de fonction qui retourne le résultat à venir qui sera mis à disposition via <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1314">A function delegate that returns the future result to be available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="b2054-1315">Objet contenant des données que le délégué <paramref name="function" /> doit utiliser.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1315">An object containing data to be used by the <paramref name="function" /> delegate.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="b2054-1316">
            <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> qui sera assigné au nouveau <see cref="T:System.Threading.Tasks.Task" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1316">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new <see cref="T:System.Threading.Tasks.Task" /></span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b2054-1317">Crée et lance un <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1317">Creates and starts a <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b2054-1318">
            <see cref="T:System.Threading.Tasks.Task`1" /> démarrée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1318">The started <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2054-1319">Appel de StartNew est fonctionnellement équivalent à la création d’un <xref:System.Threading.Tasks.Task%601> à l’aide d’un de ses constructeurs, puis en appelant <xref:System.Threading.Tasks.Task.Start%2A> à planifier son exécution.</span><span class="sxs-lookup"><span data-stu-id="b2054-1319">Calling StartNew is functionally equivalent to creating a <xref:System.Threading.Tasks.Task%601> using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.</span></span>  
  
 <span data-ttu-id="b2054-1320">En commençant par le [!INCLUDE[net_v45](~/includes/net-v45-md.md)], vous pouvez utiliser la <xref:System.Threading.Tasks.Task.Run%2A> méthode avec un <xref:System.Action> objet comme un moyen rapide d’appeler <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> avec les paramètres par défaut.</span><span class="sxs-lookup"><span data-stu-id="b2054-1320">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters.</span></span> <span data-ttu-id="b2054-1321">Pour plus d’informations et des exemples de code, consultez l’entrée [Task.Run vs. Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) dans le blog programmation parallèle avec .NET.</span><span class="sxs-lookup"><span data-stu-id="b2054-1321">For more information and code examples, see the entry [Task.Run vs. Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b2054-1322">Le <see cref="T:System.Threading.CancellationToken" /> fourni a déjà été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1322">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b2054-1323">Exception levée quand l’argument <paramref name="function" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1323">The exception that is thrown when the <paramref name="function" /> argument is null.</span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="b2054-1324">Bibliothèque parallèle de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1324">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="b2054-1325">Chaînage des tâches à l’aide de tâches de continuation</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1325">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md">
          <span data-ttu-id="b2054-1326">Annulation de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1326">Task Cancellation</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="StartNew&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; StartNew&lt;TResult&gt; (Func&lt;object,TResult&gt; function, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; StartNew&lt;TResult&gt;(class System.Func`2&lt;object, !!TResult&gt; function, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function StartNew(Of TResult) (function As Func(Of Object, TResult), state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ StartNew(Func&lt;System::Object ^, TResult&gt; ^ function, System::Object ^ state, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Func&lt;obj, 'Result&gt; * obj * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.StartNew (function, state, creationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Object,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="b2054-1327">Type du résultat disponible via le <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1327">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </typeparam>
        <param name="function">
          <span data-ttu-id="b2054-1328">Délégué de fonction qui retourne le résultat à venir qui sera mis à disposition via <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1328">A function delegate that returns the future result to be available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="b2054-1329">Objet contenant des données que le délégué <paramref name="function" /> doit utiliser.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1329">An object containing data to be used by the <paramref name="function" /> delegate.</span>
          </span>
        </param>
        <param name="creationOptions">
          <span data-ttu-id="b2054-1330">Valeur TaskCreationOptions qui contrôle le comportement du <see cref="T:System.Threading.Tasks.Task`1" /> créé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1330">A TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b2054-1331">Crée et lance un <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1331">Creates and starts a <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b2054-1332">
            <see cref="T:System.Threading.Tasks.Task`1" /> démarrée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1332">The started <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2054-1333">Appel de StartNew est fonctionnellement équivalent à la création d’un <xref:System.Threading.Tasks.Task%601> à l’aide d’un de ses constructeurs, puis en appelant <xref:System.Threading.Tasks.Task.Start%2A> à planifier son exécution.</span><span class="sxs-lookup"><span data-stu-id="b2054-1333">Calling StartNew is functionally equivalent to creating a <xref:System.Threading.Tasks.Task%601> using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.</span></span>  
  
 <span data-ttu-id="b2054-1334">En commençant par le [!INCLUDE[net_v45](~/includes/net-v45-md.md)], vous pouvez utiliser la <xref:System.Threading.Tasks.Task.Run%2A> méthode avec un <xref:System.Action> objet comme un moyen rapide d’appeler <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> avec les paramètres par défaut.</span><span class="sxs-lookup"><span data-stu-id="b2054-1334">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters.</span></span> <span data-ttu-id="b2054-1335">Pour plus d’informations et des exemples de code, consultez l’entrée [Task.Run vs. Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) dans le blog programmation parallèle avec .NET.</span><span class="sxs-lookup"><span data-stu-id="b2054-1335">For more information and code examples, see the entry [Task.Run vs. Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b2054-1336">Exception levée quand l’argument <paramref name="function" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1336">The exception that is thrown when the <paramref name="function" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b2054-1337">Exception levée lorsque l'argument <paramref name="creationOptions" /> spécifie une valeur TaskCreationOptions non valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1337">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span>
          </span>
          <span data-ttu-id="b2054-1338">Exception levée lorsque l'argument <paramref name="creationOptions" /> spécifie une valeur TaskCreationOptions non valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1338">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span>
          </span>
          <span data-ttu-id="b2054-1339">Pour plus d'informations, consultez la section Notes de la rubrique <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1339">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="b2054-1340">Bibliothèque parallèle de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1340">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="b2054-1341">Chaînage des tâches à l’aide de tâches de continuation</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1341">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md">
          <span data-ttu-id="b2054-1342">Annulation de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1342">Task Cancellation</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="StartNew&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; StartNew&lt;TResult&gt; (Func&lt;TResult&gt; function, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; StartNew&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; function, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ StartNew(Func&lt;TResult&gt; ^ function, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskCreationOptions creationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Func&lt;'Result&gt; * System.Threading.CancellationToken * System.Threading.Tasks.TaskCreationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.StartNew (function, cancellationToken, creationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="b2054-1343">Type du résultat disponible via le <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1343">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </typeparam>
        <param name="function">
          <span data-ttu-id="b2054-1344">Délégué de fonction qui retourne le résultat à venir qui sera mis à disposition via <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1344">A function delegate that returns the future result to be available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="b2054-1345">
            <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> qui sera assigné à la nouvelle tâche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1345">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new task.</span>
          </span>
        </param>
        <param name="creationOptions">
          <span data-ttu-id="b2054-1346">Valeur TaskCreationOptions qui contrôle le comportement du <see cref="T:System.Threading.Tasks.Task`1" /> créé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1346">A TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </param>
        <param name="scheduler">
          <span data-ttu-id="b2054-1347">
            <see cref="T:System.Threading.Tasks.TaskScheduler" /> utilisé pour planifier la <see cref="T:System.Threading.Tasks.Task`1" /> créée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1347">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the created <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b2054-1348">Crée et lance un <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1348">Creates and starts a <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b2054-1349">
            <see cref="T:System.Threading.Tasks.Task`1" /> démarrée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1349">The started <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2054-1350">Appel de StartNew est fonctionnellement équivalent à la création d’un <xref:System.Threading.Tasks.Task%601> à l’aide d’un de ses constructeurs, puis en appelant <xref:System.Threading.Tasks.Task.Start%2A> à planifier son exécution.</span><span class="sxs-lookup"><span data-stu-id="b2054-1350">Calling StartNew is functionally equivalent to creating a <xref:System.Threading.Tasks.Task%601> using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.</span></span>  
  
 <span data-ttu-id="b2054-1351">En commençant par le [!INCLUDE[net_v45](~/includes/net-v45-md.md)], vous pouvez utiliser la <xref:System.Threading.Tasks.Task.Run%2A> méthode avec un <xref:System.Action> objet comme un moyen rapide d’appeler <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> avec les paramètres par défaut.</span><span class="sxs-lookup"><span data-stu-id="b2054-1351">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters.</span></span> <span data-ttu-id="b2054-1352">Pour plus d’informations et des exemples de code, consultez l’entrée [Task.Run vs. Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) dans le blog programmation parallèle avec .NET.</span><span class="sxs-lookup"><span data-stu-id="b2054-1352">For more information and code examples, see the entry [Task.Run vs. Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b2054-1353">Le <see cref="T:System.Threading.CancellationToken" /> fourni a déjà été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1353">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b2054-1354">Exception levée quand l’argument <paramref name="function" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1354">The exception that is thrown when the <paramref name="function" /> argument is null.</span>
          </span>
          <span data-ttu-id="b2054-1355">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1355">-or-</span>
          </span>
          <span data-ttu-id="b2054-1356">Exception levée quand l’argument <paramref name="scheduler" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1356">The exception that is thrown when the <paramref name="scheduler" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b2054-1357">Exception levée lorsque l'argument <paramref name="creationOptions" /> spécifie une valeur TaskCreationOptions non valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1357">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span>
          </span>
          <span data-ttu-id="b2054-1358">Exception levée lorsque l'argument <paramref name="creationOptions" /> spécifie une valeur TaskCreationOptions non valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1358">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span>
          </span>
          <span data-ttu-id="b2054-1359">Pour plus d'informations, consultez la section Notes de la rubrique <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1359">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span>
          </span>
        </exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="b2054-1360">Bibliothèque parallèle de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1360">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="b2054-1361">Chaînage des tâches à l’aide de tâches de continuation</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1361">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md">
          <span data-ttu-id="b2054-1362">Annulation de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1362">Task Cancellation</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="StartNew&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; StartNew&lt;TResult&gt; (Func&lt;object,TResult&gt; function, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; StartNew&lt;TResult&gt;(class System.Func`2&lt;object, !!TResult&gt; function, object state, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ StartNew(Func&lt;System::Object ^, TResult&gt; ^ function, System::Object ^ state, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskCreationOptions creationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.StartNew : Func&lt;obj, 'Result&gt; * obj * System.Threading.CancellationToken * System.Threading.Tasks.TaskCreationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="taskFactory.StartNew (function, state, cancellationToken, creationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Object,TResult&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="b2054-1363">Type du résultat disponible via le <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1363">The type of the result available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </typeparam>
        <param name="function">
          <span data-ttu-id="b2054-1364">Délégué de fonction qui retourne le résultat à venir qui sera mis à disposition via <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1364">A function delegate that returns the future result to be available through the <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="b2054-1365">Objet contenant des données que le délégué <paramref name="function" /> doit utiliser.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1365">An object containing data to be used by the <paramref name="function" /> delegate.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="b2054-1366">
            <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> qui sera assigné à la nouvelle tâche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1366">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new task.</span>
          </span>
        </param>
        <param name="creationOptions">
          <span data-ttu-id="b2054-1367">Valeur TaskCreationOptions qui contrôle le comportement du <see cref="T:System.Threading.Tasks.Task`1" /> créé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1367">A TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </param>
        <param name="scheduler">
          <span data-ttu-id="b2054-1368">
            <see cref="T:System.Threading.Tasks.TaskScheduler" /> utilisé pour planifier la <see cref="T:System.Threading.Tasks.Task`1" /> créée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1368">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> that is used to schedule the created <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b2054-1369">Crée et lance un <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1369">Creates and starts a <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b2054-1370">
            <see cref="T:System.Threading.Tasks.Task`1" /> démarrée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1370">The started <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2054-1371">Appel de StartNew est fonctionnellement équivalent à la création d’un <xref:System.Threading.Tasks.Task%601> à l’aide d’un de ses constructeurs, puis en appelant <xref:System.Threading.Tasks.Task.Start%2A> à planifier son exécution.</span><span class="sxs-lookup"><span data-stu-id="b2054-1371">Calling StartNew is functionally equivalent to creating a <xref:System.Threading.Tasks.Task%601> using one of its constructors and then calling <xref:System.Threading.Tasks.Task.Start%2A> to schedule it for execution.</span></span>  
  
 <span data-ttu-id="b2054-1372">En commençant par le [!INCLUDE[net_v45](~/includes/net-v45-md.md)], vous pouvez utiliser la <xref:System.Threading.Tasks.Task.Run%2A> méthode avec un <xref:System.Action> objet comme un moyen rapide d’appeler <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> avec les paramètres par défaut.</span><span class="sxs-lookup"><span data-stu-id="b2054-1372">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can use the <xref:System.Threading.Tasks.Task.Run%2A> method with an <xref:System.Action> object as a quick way to call <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> with default parameters.</span></span> <span data-ttu-id="b2054-1373">Pour plus d’informations et des exemples de code, consultez l’entrée [Task.Run vs. Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) dans le blog programmation parallèle avec .NET.</span><span class="sxs-lookup"><span data-stu-id="b2054-1373">For more information and code examples, see the entry [Task.Run vs. Task.Factory.StartNew](https://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx) in the Parallel Programming with .NET blog.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b2054-1374">Le <see cref="T:System.Threading.CancellationToken" /> fourni a déjà été supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1374">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b2054-1375">Exception levée quand l’argument <paramref name="function" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1375">The exception that is thrown when the <paramref name="function" /> argument is null.</span>
          </span>
          <span data-ttu-id="b2054-1376">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1376">-or-</span>
          </span>
          <span data-ttu-id="b2054-1377">Exception levée quand l’argument <paramref name="scheduler" /> a la valeur Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1377">The exception that is thrown when the <paramref name="scheduler" /> argument is null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b2054-1378">Exception levée lorsque l'argument <paramref name="creationOptions" /> spécifie une valeur TaskCreationOptions non valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1378">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span>
          </span>
          <span data-ttu-id="b2054-1379">Exception levée lorsque l'argument <paramref name="creationOptions" /> spécifie une valeur TaskCreationOptions non valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1379">The exception that is thrown when the <paramref name="creationOptions" /> argument specifies an invalid TaskCreationOptions value.</span>
          </span>
          <span data-ttu-id="b2054-1380">Pour plus d'informations, consultez la section Notes de la rubrique <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1380">For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /></span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Tasks.TaskScheduler" />
        <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md">
          <span data-ttu-id="b2054-1381">Bibliothèque parallèle de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1381">Task Parallel Library (TPL)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md">
          <span data-ttu-id="b2054-1382">Chaînage des tâches à l’aide de tâches de continuation</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1382">Chaining Tasks by Using Continuation Tasks</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md">
          <span data-ttu-id="b2054-1383">Annulation de tâches</span>
          <span class="sxs-lookup">
            <span data-stu-id="b2054-1383">Task Cancellation</span>
          </span>
        </related>
      </Docs>
    </Member>
  </Members>
</Type>