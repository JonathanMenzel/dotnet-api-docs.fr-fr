<Type Name="InvokePattern" FullName="System.Windows.Automation.InvokePattern">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e6159d647660e3bb63f3227880e80fcd4efcfbc8" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30615983" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class InvokePattern : System.Windows.Automation.BasePattern" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit InvokePattern extends System.Windows.Automation.BasePattern" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Automation.InvokePattern" />
  <TypeSignature Language="VB.NET" Value="Public Class InvokePattern&#xA;Inherits BasePattern" />
  <TypeSignature Language="C++ CLI" Value="public ref class InvokePattern : System::Windows::Automation::BasePattern" />
  <AssemblyInfo>
    <AssemblyName>UIAutomationClient</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Automation.BasePattern</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Représente des contrôles qui initialisent ou exécutent une action unique et non équivoque, et qui ne conservent pas l’état quand ils sont activés.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Contrôle la prise en charge <xref:System.Windows.Automation.InvokePattern> si le même comportement n’est pas exposé via un autre modèle de contrôle. Par exemple, si le <xref:System.Windows.Automation.InvokePattern.Invoke%2A> méthode sur un contrôle exécute la même action que le <xref:System.Windows.Automation.ExpandCollapsePattern.Expand%2A> ou <xref:System.Windows.Automation.ExpandCollapsePattern.Collapse%2A> (méthode), le contrôle ne prendra pas en charge <xref:System.Windows.Automation.InvokePattern>.  
  
 [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] au lieu de cela prend en charge les éléments qui représentent des contrôles tels que les cases à cocher et des cases d’option, qui gèrent un état, <xref:System.Windows.Automation.TogglePattern> ou <xref:System.Windows.Automation.SelectionItemPattern>.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Automation.Provider.IInvokeProvider" />
  </Docs>
  <Members>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.InvokePattern.Invoke" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invoke ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Envoie une requête pour activer un contrôle et initier son action unique et non équivoque.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les appels à <xref:System.Windows.Automation.InvokePattern.Invoke%2A> doit retourner immédiatement sans blocage. Toutefois, ce comportement est entièrement dépendant de la [!INCLUDE[TLA#tla_uiautomation](~/includes/tlasharptla-uiautomation-md.md)] implémentation du fournisseur. Dans les scénarios où l’appel <xref:System.Windows.Automation.InvokePattern.Invoke%2A> provoque un problème de blocage (par exemple, une boîte de dialogue modale) distinct thread d’assistance peut être nécessaire d’appeler la méthode.  
  
   
  
## Examples  
 Dans l’exemple suivant un <xref:System.Windows.Automation.InvokePattern> modèle de contrôle est obtenu à partir d’un contrôle et le <xref:System.Windows.Automation.InvokePattern.Invoke%2A> méthode est appelée.  
  
 [!code-csharp[UIAInvokePattern_snip#101](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAInvokePattern_snip/CSharp/UIAInvokePattern_snippets.cs#101)]
 [!code-vb[UIAInvokePattern_snip#101](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAInvokePattern_snip/VisualBasic/UIAInvokePattern_snippets.vb#101)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">L’élément ne prend pas en charge le modèle de contrôle <see cref="T:System.Windows.Automation.InvokePattern" />, ou est masqué ou bloqué.</exception>
        <exception cref="T:System.Windows.Automation.ElementNotEnabledException">L'élément n'est pas activé. Peut être déclenché quand un fournisseur UI Automation a implémenté sa propre gestion de la propriété <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsEnabled" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="InvokedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.AutomationEvent InvokedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.AutomationEvent InvokedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.InvokePattern.InvokedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly InvokedEvent As AutomationEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::Automation::AutomationEvent ^ InvokedEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.AutomationEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l’événement déclenché quand un contrôle est appelé ou activé.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cet identificateur est utilisé par les applications clientes UI Automation. Les fournisseurs UI Automation doivent utiliser le champ équivalent dans <xref:System.Windows.Automation.InvokePatternIdentifiers>.  
  
 Le <xref:System.Windows.Automation.InvokePattern.InvokedEvent> identificateur est passé en tant que paramètre à <xref:System.Windows.Automation.Automation.AddAutomationEventHandler%2A>.  
  
   
  
## Examples  
 Dans l’exemple suivant, le Gestionnaire d’événements identifie l’événement en tant qu’événement Invoked en comparant le <xref:System.Windows.Automation.AutomationEventArgs.EventId%2A> dans les arguments d’événement avec le <xref:System.Windows.Automation.InvokePattern.InvokedEvent> champ d’identificateur.  
  
 [!code-csharp[UIAClient_snip#101](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#101)]
 [!code-vb[UIAClient_snip#101](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#101)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pattern">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.AutomationPattern Pattern;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.AutomationPattern Pattern" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.InvokePattern.Pattern" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Pattern As AutomationPattern " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::Automation::AutomationPattern ^ Pattern;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.AutomationPattern</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie le modèle de contrôle <see cref="T:System.Windows.Automation.InvokePattern" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cet identificateur est utilisé par les applications clientes UI Automation. Les fournisseurs UI Automation doivent utiliser le champ équivalent dans <xref:System.Windows.Automation.InvokePatternIdentifiers>.  
  
 L’identificateur de modèle est passé aux méthodes telles que <xref:System.Windows.Automation.AutomationElement.GetCurrentPattern%2A> pour récupérer le modèle de contrôle d’intérêt à partir du spécifié <xref:System.Windows.Automation.AutomationElement>.  
  
   
  
## Examples  
 Dans l’exemple suivant un <xref:System.Windows.Automation.InvokePattern> modèle de contrôle est obtenu à partir d’un contrôle et le <xref:System.Windows.Automation.InvokePattern.Invoke%2A> méthode est appelée.  
  
 [!code-csharp[UIAInvokePattern_snip#101](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAInvokePattern_snip/CSharp/UIAInvokePattern_snippets.cs#101)]
 [!code-vb[UIAInvokePattern_snip#101](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAInvokePattern_snip/VisualBasic/UIAInvokePattern_snippets.vb#101)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>