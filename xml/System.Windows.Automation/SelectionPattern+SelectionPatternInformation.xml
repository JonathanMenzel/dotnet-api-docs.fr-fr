<Type Name="SelectionPattern+SelectionPatternInformation" FullName="System.Windows.Automation.SelectionPattern+SelectionPatternInformation">
  <TypeSignature Language="C#" Value="public struct SelectionPattern.SelectionPatternInformation" />
  <TypeSignature Language="ILAsm" Value=".class nested public sequential ansi sealed beforefieldinit SelectionPattern/SelectionPatternInformation extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Automation.SelectionPattern.SelectionPatternInformation" />
  <TypeSignature Language="VB.NET" Value="Public Structure SelectionPattern.SelectionPatternInformation" />
  <TypeSignature Language="C++ CLI" Value="public: value class SelectionPattern::SelectionPatternInformation" />
  <AssemblyInfo>
    <AssemblyName>UIAutomationClient</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="ce186-101">Permet d'accéder aux valeurs de propriétés d'un objet <see cref="T:System.Windows.Automation.SelectionPattern" /> en utilisant ses accesseurs <see cref="P:System.Windows.Automation.SelectionPattern.Current" /> ou <see cref="P:System.Windows.Automation.SelectionPattern.Cached" />.</span><span class="sxs-lookup"><span data-stu-id="ce186-101">Provides access to the property values of a <see cref="T:System.Windows.Automation.SelectionPattern" /> object using its <see cref="P:System.Windows.Automation.SelectionPattern.Current" /> or <see cref="P:System.Windows.Automation.SelectionPattern.Cached" /> accessors.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="CanSelectMultiple">
      <MemberSignature Language="C#" Value="public bool CanSelectMultiple { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanSelectMultiple" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.SelectionPattern.SelectionPatternInformation.CanSelectMultiple" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanSelectMultiple As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanSelectMultiple { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ce186-102">Obtient une valeur qui indique si le conteneur autorise la sélection simultanée de plusieurs éléments enfants.</span><span class="sxs-lookup"><span data-stu-id="ce186-102">Gets a value that specifies whether the container allows more than one child element to be selected concurrently.</span></span></summary>
        <value>
          <span data-ttu-id="ce186-103"><see langword="true" /> si le contrôle prend en charge la sélection multiple ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="ce186-103"><see langword="true" /> if the control supports multiple selection; otherwise <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ce186-104">Cette propriété peut être dynamique, par exemple, dans de rares cas, un contrôle peut autoriser plusieurs éléments lors de l’initialisation, mais n’autoriser par la suite que des sélections uniques doit être effectuée.</span><span class="sxs-lookup"><span data-stu-id="ce186-104">This property can be dynamic For example, in rare cases, a control might allow multiple items to be selected on initialization, but subsequently allow only single selections to be made.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ce186-105">Dans l’exemple suivant, un <xref:System.Windows.Automation.SelectionPattern> modèle de contrôle est obtenu à partir d’un <xref:System.Windows.Automation.AutomationElement> et est ensuite utilisé pour récupérer les valeurs de propriété.</span><span class="sxs-lookup"><span data-stu-id="ce186-105">In the following example, a <xref:System.Windows.Automation.SelectionPattern> control pattern is obtained from an <xref:System.Windows.Automation.AutomationElement> and subsequently used to retrieve property values.</span></span>  
  
 [!code-csharp[UIASelectionPattern_snip#101](~/samples/snippets/csharp/VS_Snippets_Wpf/UIASelectionPattern_snip/CSharp/UIASelectionPattern_snippets.cs#101)]
 [!code-vb[UIASelectionPattern_snip#101](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIASelectionPattern_snip/VisualBasic/UIASelectionPattern_snippets.vb#101)]  
[!code-csharp[UIASelectionPattern_snip#104](~/samples/snippets/csharp/VS_Snippets_Wpf/UIASelectionPattern_snip/CSharp/UIASelectionPattern_snippets.cs#104)]
[!code-vb[UIASelectionPattern_snip#104](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIASelectionPattern_snip/VisualBasic/UIASelectionPattern_snippets.vb#104)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSelection">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.AutomationElement[] GetSelection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Automation.AutomationElement[] GetSelection() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.SelectionPattern.SelectionPatternInformation.GetSelection" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSelection () As AutomationElement()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Windows::Automation::AutomationElement ^&gt; ^ GetSelection();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.AutomationElement[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ce186-106">Récupère tous les éléments du conteneur de sélection qui sont sélectionnés.</span><span class="sxs-lookup"><span data-stu-id="ce186-106">Retrieves all items in the selection container that are selected.</span></span></summary>
        <returns><span data-ttu-id="ce186-107">Collection d'éléments sélectionnés.</span><span class="sxs-lookup"><span data-stu-id="ce186-107">The collection of selected items.</span></span> <span data-ttu-id="ce186-108">La valeur par défaut est un tableau vide.</span><span class="sxs-lookup"><span data-stu-id="ce186-108">The default is an empty array.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="ce186-109">Dans l’exemple suivant, une collection de <xref:System.Windows.Automation.AutomationElement>représentant les éléments sélectionnés dans un conteneur de sélection est obtenue.</span><span class="sxs-lookup"><span data-stu-id="ce186-109">In the following example, a collection of <xref:System.Windows.Automation.AutomationElement>s representing the selected items in a selection container is obtained.</span></span>  
  
 [!code-csharp[UIASelectionPattern_snip#1025](~/samples/snippets/csharp/VS_Snippets_Wpf/UIASelectionPattern_snip/CSharp/UIASelectionPattern_snippets.cs#1025)]
 [!code-vb[UIASelectionPattern_snip#1025](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIASelectionPattern_snip/VisualBasic/UIASelectionPattern_snippets.vb#1025)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSelectionRequired">
      <MemberSignature Language="C#" Value="public bool IsSelectionRequired { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSelectionRequired" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.SelectionPattern.SelectionPatternInformation.IsSelectionRequired" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSelectionRequired As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSelectionRequired { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ce186-110">Obtient une valeur qui indique si le conteneur impose la sélection d’au moins un élément enfant.</span><span class="sxs-lookup"><span data-stu-id="ce186-110">Gets a value that specifies whether the container requires at least one child item to be selected.</span></span></summary>
        <value>
          <span data-ttu-id="ce186-111"><see langword="true" /> si le contrôle requiert qu'au moins un élément soit sélectionné ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="ce186-111"><see langword="true" /> if the control requires at least one item to be selected; otherwise <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ce186-112">Cette propriété peut être dynamique.</span><span class="sxs-lookup"><span data-stu-id="ce186-112">This property can be dynamic.</span></span> <span data-ttu-id="ce186-113">Par exemple, l’état initial d’un contrôle peut ne présenter aucun élément sélectionné par défaut, indiquant que <xref:System.Windows.Automation.Provider.ISelectionProvider.IsSelectionRequired%2A> a la valeur `false`.</span><span class="sxs-lookup"><span data-stu-id="ce186-113">For example, the initial state of a control might not have any items selected by default, indicating that <xref:System.Windows.Automation.Provider.ISelectionProvider.IsSelectionRequired%2A> is `false`.</span></span> <span data-ttu-id="ce186-114">Toutefois, une fois qu’un élément a été sélectionné, le contrôle doit toujours avoir au moins un élément sélectionné.</span><span class="sxs-lookup"><span data-stu-id="ce186-114">However, after an item is selected, the control must always have at least one item selected.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ce186-115">Dans l’exemple suivant, un <xref:System.Windows.Automation.SelectionPattern> modèle de contrôle est obtenu à partir d’un <xref:System.Windows.Automation.AutomationElement> et est ensuite utilisé pour récupérer les valeurs de propriété.</span><span class="sxs-lookup"><span data-stu-id="ce186-115">In the following example, a <xref:System.Windows.Automation.SelectionPattern> control pattern is obtained from an <xref:System.Windows.Automation.AutomationElement> and subsequently used to retrieve property values.</span></span>  
  
 [!code-csharp[UIASelectionPattern_snip#101](~/samples/snippets/csharp/VS_Snippets_Wpf/UIASelectionPattern_snip/CSharp/UIASelectionPattern_snippets.cs#101)]
 [!code-vb[UIASelectionPattern_snip#101](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIASelectionPattern_snip/VisualBasic/UIASelectionPattern_snippets.vb#101)]  
[!code-csharp[UIASelectionPattern_snip#104](~/samples/snippets/csharp/VS_Snippets_Wpf/UIASelectionPattern_snip/CSharp/UIASelectionPattern_snippets.cs#104)]
[!code-vb[UIASelectionPattern_snip#104](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIASelectionPattern_snip/VisualBasic/UIASelectionPattern_snippets.vb#104)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>