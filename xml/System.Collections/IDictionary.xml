<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IDictionary.xml" source-language="en-US" target-language="fr-FR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5f8a8884f6a8528c2d85903a16fd7de0aba47df8f.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f8a8884f6a8528c2d85903a16fd7de0aba47df8f</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Collections.IDictionary">
          <source>Represents a nongeneric collection of key/value pairs.</source>
          <target state="translated">Représente une collection non générique de paires clé/valeur.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.IDictionary">
          <source>The <ph id="ph1">&lt;xref:System.Collections.IDictionary&gt;</ph> interface is the base interface for nongeneric collections of key/value pairs.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Collections.IDictionary&gt;</ph> interface est l’interface de base pour les collections non génériques de paires clé/valeur.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.IDictionary">
          <source>For the generic version of this interface, see <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Pour la version générique de cette interface, consultez <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.IDictionary">
          <source>Each element is a key/value pair stored in a <ph id="ph1">&lt;xref:System.Collections.DictionaryEntry&gt;</ph> object.</source>
          <target state="translated">Chaque élément est une paire clé/valeur stockée dans un <ph id="ph1">&lt;xref:System.Collections.DictionaryEntry&gt;</ph> objet.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.IDictionary">
          <source>Each pair must have a unique key.</source>
          <target state="translated">Chaque paire doit avoir une clé unique.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.IDictionary">
          <source>Implementations can vary in whether they allow the key to be null.</source>
          <target state="translated">Les implémentations peuvent varier selon que la clé est null ou non.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.IDictionary">
          <source>The value can be null and does not have to be unique.</source>
          <target state="translated">La valeur peut être null et ne dispose pas être uniques.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.IDictionary">
          <source>The <ph id="ph1">&lt;xref:System.Collections.IDictionary&gt;</ph> interface allows the contained keys and values to be enumerated, but it does not imply any particular sort order.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Collections.IDictionary&gt;</ph> interface permet les clés et les valeurs à énumérer, mais elle n’implique pas de n’importe quel ordre de tri particulier.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.IDictionary">
          <source><ph id="ph1">&lt;xref:System.Collections.IDictionary&gt;</ph> implementations fall into three categories: read-only, fixed-size, variable-size.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IDictionary&gt;</ph> implémentations peuvent être classées en trois catégories : lecture seule, taille fixe, taille de la variable.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.IDictionary">
          <source>A read-only <ph id="ph1">&lt;xref:System.Collections.IDictionary&gt;</ph> object cannot be modified.</source>
          <target state="translated">En lecture seule <ph id="ph1">&lt;xref:System.Collections.IDictionary&gt;</ph> objet ne peut pas être modifié.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.IDictionary">
          <source>A fixed-size <ph id="ph1">&lt;xref:System.Collections.IDictionary&gt;</ph> object does not allow the addition or removal of elements, but does allow the modification of existing elements.</source>
          <target state="translated">Une taille fixe <ph id="ph1">&lt;xref:System.Collections.IDictionary&gt;</ph> objet n’autorise pas l’ajout ou la suppression d’éléments, mais permet la modification des éléments existants.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.IDictionary">
          <source>A variable-size <ph id="ph1">&lt;xref:System.Collections.IDictionary&gt;</ph> object allows the addition, removal, and modification of elements.</source>
          <target state="translated">Une taille variable <ph id="ph1">&lt;xref:System.Collections.IDictionary&gt;</ph> objet permet l’ajout, la suppression et la modification d’éléments.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.IDictionary">
          <source>The <ph id="ph1">`foreach`</ph> statement of the C# language (<ph id="ph2">`For Each`</ph> in Visual Basic) returns an object of the type of the elements in the collection.</source>
          <target state="translated">Le <ph id="ph1">`foreach`</ph> instruction du langage c# (<ph id="ph2">`For Each`</ph> en Visual Basic) retourne un objet du type des éléments dans la collection.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.IDictionary">
          <source>Since each element of the <ph id="ph1">&lt;xref:System.Collections.IDictionary&gt;</ph> object is a key/value pair, the element type is not the type of the key or the type of the value.</source>
          <target state="translated">Étant donné que chaque élément de la <ph id="ph1">&lt;xref:System.Collections.IDictionary&gt;</ph> objet est une paire clé/valeur, le type d’élément n’est pas le type de la clé ou le type de la valeur.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.IDictionary">
          <source>Instead, the element type is <ph id="ph1">&lt;xref:System.Collections.DictionaryEntry&gt;</ph>.</source>
          <target state="translated">Au lieu de cela, le type d’élément est <ph id="ph1">&lt;xref:System.Collections.DictionaryEntry&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.IDictionary">
          <source>For example:</source>
          <target state="translated">Exemple :</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.IDictionary">
          <source>The <ph id="ph1">`foreach`</ph> statement is a wrapper around the enumerator, which allows only reading from but not writing to the collection.</source>
          <target state="translated">La <ph id="ph1">`foreach`</ph> instruction est un wrapper autour de l’énumérateur, qui permet uniquement la lecture à partir de, mais n’écrit ne pas à la collection.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.IDictionary">
          <source>The following code example demonstrates how to define a simple dictionary class that implements the <ph id="ph1">&lt;xref:System.Collections.IDictionary&gt;</ph> interface.</source>
          <target state="translated">L’exemple de code suivant montre comment définir une classe de dictionnaire simple qui implémente le <ph id="ph1">&lt;xref:System.Collections.IDictionary&gt;</ph> interface.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.IDictionary">
          <source>The implementing class must have a means to compare keys.</source>
          <target state="translated">La classe d’implémentation doit avoir un moyen de comparer des clés.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Collections.IDictionary.Add(System.Object,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to use as the key of the element to add.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> à utiliser comme clé de l'élément à ajouter.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Collections.IDictionary.Add(System.Object,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to use as the value of the element to add.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> à utiliser comme valeur de l'élément à ajouter.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Collections.IDictionary.Add(System.Object,System.Object)">
          <source>Adds an element with the provided key and value to the <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> object.</source>
          <target state="translated">Ajoute un élément avec la clé et la valeur fournies à l'objet <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IDictionary.Add(System.Object,System.Object)">
          <source>You can also use the <ph id="ph1">&lt;xref:System.Collections.IDictionary.Item%2A&gt;</ph> property to add new elements by setting the value of a key that does not exist in the dictionary (for example, <ph id="ph2">`myCollection["myNonexistentKey"] = myValue`</ph>).</source>
          <target state="translated">Vous pouvez également utiliser le <ph id="ph1">&lt;xref:System.Collections.IDictionary.Item%2A&gt;</ph> propriété à ajouter de nouveaux éléments en définissant la valeur d’une clé qui n’existe pas dans le dictionnaire (par exemple, <ph id="ph2">`myCollection["myNonexistentKey"] = myValue`</ph>).</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IDictionary.Add(System.Object,System.Object)">
          <source>However, if the specified key already exists in the dictionary, setting the <ph id="ph1">&lt;xref:System.Collections.IDictionary.Item%2A&gt;</ph> property overwrites the old value.</source>
          <target state="translated">Toutefois, si la clé spécifiée existe déjà dans le dictionnaire, l’affectation du <ph id="ph1">&lt;xref:System.Collections.IDictionary.Item%2A&gt;</ph> propriété remplace l’ancienne valeur.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IDictionary.Add(System.Object,System.Object)">
          <source>In contrast, the <ph id="ph1">&lt;xref:System.Collections.IDictionary.Add%2A&gt;</ph> method does not modify existing elements.</source>
          <target state="translated">En revanche, le <ph id="ph1">&lt;xref:System.Collections.IDictionary.Add%2A&gt;</ph> méthode ne modifie pas les éléments existants.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IDictionary.Add(System.Object,System.Object)">
          <source>Implementations can vary in whether they allow the key to be <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Les implémentations peuvent varier selon que la clé est ou non <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IDictionary.Add(System.Object,System.Object)">
          <source>The following code example demonstrates how to implement the <ph id="ph1">&lt;xref:System.Collections.IDictionary.Add%2A&gt;</ph> method.</source>
          <target state="translated">L’exemple de code suivant montre comment implémenter la <ph id="ph1">&lt;xref:System.Collections.IDictionary.Add%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IDictionary.Add(System.Object,System.Object)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Collections.IDictionary&gt;</ph> class.</source>
          <target state="translated">Cet exemple de code fait partie d’un exemple plus complet fourni pour la <ph id="ph1">&lt;xref:System.Collections.IDictionary&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Collections.IDictionary.Add(System.Object,System.Object)">
          <source><ph id="ph1">&lt;paramref name="key" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="key" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Collections.IDictionary.Add(System.Object,System.Object)">
          <source>An element with the same key already exists in the <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> object.</source>
          <target state="translated">Un élément avec la même clé existe déjà dans l'objet <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Collections.IDictionary.Add(System.Object,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> is read-only.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> est en lecture seule.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Collections.IDictionary.Add(System.Object,System.Object)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Collections.IDictionary.Add(System.Object,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> has a fixed size.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> est de taille fixe.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Collections.IDictionary.Clear">
          <source>Removes all elements from the <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> object.</source>
          <target state="translated">Supprime tous les éléments de l'objet <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IDictionary.Clear">
          <source>The following code example demonstrates how to implement the <ph id="ph1">&lt;xref:System.Collections.IDictionary.Clear%2A&gt;</ph> method.</source>
          <target state="translated">L’exemple de code suivant montre comment implémenter la <ph id="ph1">&lt;xref:System.Collections.IDictionary.Clear%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IDictionary.Clear">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Collections.IDictionary&gt;</ph> class.</source>
          <target state="translated">Cet exemple de code fait partie d’un exemple plus complet fourni pour la <ph id="ph1">&lt;xref:System.Collections.IDictionary&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Collections.IDictionary.Clear">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> object is read-only.</source>
          <target state="translated">L'objet <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> est en lecture seule.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Collections.IDictionary.Contains(System.Object)">
          <source>The key to locate in the <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> object.</source>
          <target state="translated">Clé à rechercher dans l'objet <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Collections.IDictionary.Contains(System.Object)">
          <source>Determines whether the <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> object contains an element with the specified key.</source>
          <target state="translated">Détermine si l'objet <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> contient un élément avec la clé spécifiée.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Collections.IDictionary.Contains(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> contains an element with the key; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> contient un élément avec la clé ; sinon, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IDictionary.Contains(System.Object)">
          <source>Implementations can vary in whether they allow the key to be <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Les implémentations peuvent varier selon que la clé est ou non <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IDictionary.Contains(System.Object)">
          <source>Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <ph id="ph1">&lt;xref:System.Object.Equals%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IComparable.CompareTo%2A&gt;</ph> methods on <ph id="ph3">`item`</ph> to determine whether <ph id="ph4">`item`</ph> exists.</source>
          <target state="translated">À compter de .NET Framework 2.0, cette méthode utilise les objets de la collection <ph id="ph1">&lt;xref:System.Object.Equals%2A&gt;</ph> et <ph id="ph2">&lt;xref:System.IComparable.CompareTo%2A&gt;</ph> méthodes sur <ph id="ph3">`item`</ph> pour déterminer si <ph id="ph4">`item`</ph> existe.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IDictionary.Contains(System.Object)">
          <source>In the earlier versions of the .NET Framework, this determination was made by using the <ph id="ph1">&lt;xref:System.Object.Equals%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IComparable.CompareTo%2A&gt;</ph> methods of the <ph id="ph3">`item`</ph> parameter on the objects in the collection.</source>
          <target state="translated">Dans les versions antérieures du .NET Framework, cette détermination était effectuée à l’aide de la <ph id="ph1">&lt;xref:System.Object.Equals%2A&gt;</ph> et <ph id="ph2">&lt;xref:System.IComparable.CompareTo%2A&gt;</ph> méthodes de la <ph id="ph3">`item`</ph> paramètre sur les objets dans la collection.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IDictionary.Contains(System.Object)">
          <source>The following code example demonstrates how to implement the <ph id="ph1">&lt;xref:System.Collections.IDictionary.Contains%2A&gt;</ph> method.</source>
          <target state="translated">L’exemple de code suivant montre comment implémenter la <ph id="ph1">&lt;xref:System.Collections.IDictionary.Contains%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IDictionary.Contains(System.Object)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Collections.IDictionary&gt;</ph> class.</source>
          <target state="translated">Cet exemple de code fait partie d’un exemple plus complet fourni pour la <ph id="ph1">&lt;xref:System.Collections.IDictionary&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Collections.IDictionary.Contains(System.Object)">
          <source><ph id="ph1">&lt;paramref name="key" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="key" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Collections.IDictionary.GetEnumerator">
          <source>Returns an <ph id="ph1">&lt;see cref="T:System.Collections.IDictionaryEnumerator" /&gt;</ph> object for the <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> object.</source>
          <target state="translated">Retourne un objet <ph id="ph1">&lt;see cref="T:System.Collections.IDictionaryEnumerator" /&gt;</ph> pour l'objet <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Collections.IDictionary.GetEnumerator">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.IDictionaryEnumerator" /&gt;</ph> object for the <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> object.</source>
          <target state="translated">Objet <ph id="ph1">&lt;see cref="T:System.Collections.IDictionaryEnumerator" /&gt;</ph> de l'objet <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IDictionary.GetEnumerator">
          <source>[Visual Basic, C#]</source>
          <target state="translated">(Visual Basic, c#)</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IDictionary.GetEnumerator">
          <source>The <ph id="ph1">`foreach`</ph> statement of the C# language (<ph id="ph2">`for each`</ph> in Visual Basic) hides the complexity of the enumerators.</source>
          <target state="translated">L'instruction <ph id="ph1">`foreach`</ph> du langage C# (<ph id="ph2">`for each`</ph> en Visual Basic) se charge de la complexité des énumérateurs.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IDictionary.GetEnumerator">
          <source>Therefore, using <ph id="ph1">`foreach`</ph> is recommended instead of directly manipulating the enumerator.</source>
          <target state="translated">Par conséquent, à l’aide de <ph id="ph1">`foreach`</ph> est recommandé plutôt que de manipuler l’énumérateur directement.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IDictionary.GetEnumerator">
          <source>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</source>
          <target state="translated">Les énumérateurs peuvent être utilisés pour lire les données de la collection, mais ils ne permettent pas de modifier la collection sous-jacente.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IDictionary.GetEnumerator">
          <source>Initially, the enumerator is positioned before the first element in the collection.</source>
          <target state="translated">Au départ, l’énumérateur est positionné avant le premier élément de la collection.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IDictionary.GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> also brings the enumerator back to this position.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> replace également l'énumérateur à cette position.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IDictionary.GetEnumerator">
          <source>At this position, the <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> property is undefined.</source>
          <target state="translated">À cette position, la <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> propriété n’est pas définie.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IDictionary.GetEnumerator">
          <source>Therefore, you must call <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> to advance the enumerator to the first element of the collection before reading the value of <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>.</source>
          <target state="translated">Par conséquent, vous devez appeler <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> pour avancer l'énumérateur jusqu'au premier élément de la collection avant de lire la valeur de <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IDictionary.GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> returns the same object until either <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> is called.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> retourne le même objet tant que <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> ou <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> n'est pas appelé.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IDictionary.GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> sets <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the next element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> affecte l'élément suivant à <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IDictionary.GetEnumerator">
          <source>If <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> passes the end of the collection, the enumerator is positioned after the last element in the collection and <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returns <ph id="ph3">`false`</ph>.</source>
          <target state="translated">Si <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> dépasse la fin de la collection, l’énumérateur est placée après le dernier élément dans la collection et <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> retourne <ph id="ph3">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IDictionary.GetEnumerator">
          <source>When the enumerator is at this position, subsequent calls to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> also return <ph id="ph2">`false`</ph>.</source>
          <target state="translated">Lorsque l’énumérateur est à cette position, les appels suivants à <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> également retourner <ph id="ph2">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IDictionary.GetEnumerator">
          <source>If the last call to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returned <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">Si le dernier appel à <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> retourné <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> n’est pas défini.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IDictionary.GetEnumerator">
          <source>To set <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the first element of the collection again, you can call <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> followed by <ph id="ph3">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>.</source>
          <target state="translated">Pour attribuer une nouvelle fois <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> au premier élément de la collection, vous pouvez appeler <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> suivi de <ph id="ph3">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IDictionary.GetEnumerator">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">Un énumérateur est valide tant que la collection demeure inchangée.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IDictionary.GetEnumerator">
          <source>If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</source>
          <target state="translated">Si des modifications sont apportées à la collection, telles que l'ajout, la modification ou la suppression d'éléments, l'énumérateur est définitivement invalidé et son comportement n'est pas défini.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IDictionary.GetEnumerator">
          <source>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">Comme l’énumérateur ne dispose pas d’un accès exclusif à la collection, l’énumération d’une collection n’est pas intrinsèquement une procédure thread-safe.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IDictionary.GetEnumerator">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">Pour garantir la sécurité des threads pendant l’énumération, vous pouvez verrouiller la collection tout au long de cette opération.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IDictionary.GetEnumerator">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">Pour permettre à plusieurs threads d’accéder en lecture et en écriture à la collection, vous devez implémenter votre propre synchronisation.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="P:System.Collections.IDictionary.IsFixedSize">
          <source>Gets a value indicating whether the <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> object has a fixed size.</source>
          <target state="translated">Obtient une valeur indiquant si l'objet <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> est de taille fixe.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.IDictionary.IsFixedSize">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> object has a fixed size; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si l'objet <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> est de taille fixe ; sinon, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.IDictionary.IsFixedSize">
          <source>A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but does allow the modification of existing elements.</source>
          <target state="translated">Une collection de taille fixe ne permet pas l’ajout ou la suppression d’éléments une fois que la collection est créée, mais permet la modification des éléments existants.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.IDictionary.IsFixedSize">
          <source>A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.</source>
          <target state="translated">Une collection de taille fixe est simplement une collection avec un wrapper qui empêche l’ajout et suppression d’éléments. Par conséquent, si des modifications sont apportées à la collection sous-jacente, y compris l’ajout ou la suppression d’éléments, la collection de taille fixe reflète ces modifications.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.IDictionary.IsFixedSize">
          <source>The following code example demonstrates how to implement the <ph id="ph1">&lt;xref:System.Collections.IDictionary.IsFixedSize%2A&gt;</ph> property.</source>
          <target state="translated">L’exemple de code suivant montre comment implémenter la <ph id="ph1">&lt;xref:System.Collections.IDictionary.IsFixedSize%2A&gt;</ph> propriété.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.IDictionary.IsFixedSize">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Collections.IDictionary&gt;</ph> class.</source>
          <target state="translated">Cet exemple de code fait partie d’un exemple plus complet fourni pour la <ph id="ph1">&lt;xref:System.Collections.IDictionary&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="P:System.Collections.IDictionary.IsReadOnly">
          <source>Gets a value indicating whether the <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> object is read-only.</source>
          <target state="translated">Obtient une valeur indiquant si l’objet <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> est en lecture seule.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.IDictionary.IsReadOnly">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> object is read-only; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si l'objet <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> est en lecture seule ; sinon, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.IDictionary.IsReadOnly">
          <source>A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</source>
          <target state="translated">Une collection en lecture seule n’autorise pas l’ajout, la suppression ou la modification d’éléments après sa création.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.IDictionary.IsReadOnly">
          <source>The following code example demonstrates how to implement the <ph id="ph1">&lt;xref:System.Collections.IDictionary.IsReadOnly%2A&gt;</ph> property.</source>
          <target state="translated">L’exemple de code suivant montre comment implémenter la <ph id="ph1">&lt;xref:System.Collections.IDictionary.IsReadOnly%2A&gt;</ph> propriété.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.IDictionary.IsReadOnly">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Collections.IDictionary&gt;</ph> class.</source>
          <target state="translated">Cet exemple de code fait partie d’un exemple plus complet fourni pour la <ph id="ph1">&lt;xref:System.Collections.IDictionary&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="P:System.Collections.IDictionary.Item(System.Object)">
          <source>The key of the element to get or set.</source>
          <target state="translated">Clé de l'élément à obtenir ou définir.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="P:System.Collections.IDictionary.Item(System.Object)">
          <source>Gets or sets the element with the specified key.</source>
          <target state="translated">Obtient ou définit l'élément à l'aide de la clé spécifiée.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.IDictionary.Item(System.Object)">
          <source>The element with the specified key, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if the key does not exist.</source>
          <target state="translated">L’élément avec la clé spécifiée, ou <ph id="ph1">&lt;see langword="null" /&gt;</ph> si la clé n’existe pas.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.IDictionary.Item(System.Object)">
          <source>This property provides the ability to access a specific element in the collection by using the following syntax: <ph id="ph1">`myCollection[key]`</ph>.</source>
          <target state="translated">Cette propriété permet d'accéder à un élément spécifique de la collection à l'aide de la syntaxe suivante : <ph id="ph1">`myCollection[key]`</ph>.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.IDictionary.Item(System.Object)">
          <source>You can also use the <ph id="ph1">&lt;xref:System.Collections.IDictionary.Item%2A&gt;</ph> property to add new elements by setting the value of a key that does not exist in the dictionary (for example, <ph id="ph2">`myCollection["myNonexistentKey"] = myValue`</ph>).</source>
          <target state="translated">Vous pouvez également utiliser le <ph id="ph1">&lt;xref:System.Collections.IDictionary.Item%2A&gt;</ph> propriété à ajouter de nouveaux éléments en définissant la valeur d’une clé qui n’existe pas dans le dictionnaire (par exemple, <ph id="ph2">`myCollection["myNonexistentKey"] = myValue`</ph>).</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.IDictionary.Item(System.Object)">
          <source>However, if the specified key already exists in the dictionary, setting the <ph id="ph1">&lt;xref:System.Collections.IDictionary.Item%2A&gt;</ph> property overwrites the old value.</source>
          <target state="translated">Toutefois, si la clé spécifiée existe déjà dans le dictionnaire, l’affectation du <ph id="ph1">&lt;xref:System.Collections.IDictionary.Item%2A&gt;</ph> propriété remplace l’ancienne valeur.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.IDictionary.Item(System.Object)">
          <source>In contrast, the <ph id="ph1">&lt;xref:System.Collections.IDictionary.Add%2A&gt;</ph> method does not modify existing elements.</source>
          <target state="translated">En revanche, le <ph id="ph1">&lt;xref:System.Collections.IDictionary.Add%2A&gt;</ph> méthode ne modifie pas les éléments existants.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.IDictionary.Item(System.Object)">
          <source>Implementations can vary in whether they allow the key to be <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Les implémentations peuvent varier selon que la clé est ou non <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.IDictionary.Item(System.Object)">
          <source>The C# language uses the <ph id="ph1">`this`</ph><bpt id="p1">[</bpt>this<ept id="p1">](~/docs/csharp/language-reference/keywords/this.md)</ept> keyword to define the indexers instead of implementing the <ph id="ph2">&lt;xref:System.Collections.IDictionary.Item%2A&gt;</ph> property.</source>
          <target state="translated">Le langage c# utilise le <ph id="ph1">`this`</ph> <bpt id="p1">[</bpt>cela<ept id="p1">](~/docs/csharp/language-reference/keywords/this.md)</ept> (mot clé) pour définir les indexeurs au lieu d’implémenter la <ph id="ph2">&lt;xref:System.Collections.IDictionary.Item%2A&gt;</ph> propriété.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.IDictionary.Item(System.Object)">
          <source>Visual Basic implements <ph id="ph1">&lt;xref:System.Collections.IDictionary.Item%2A&gt;</ph> as a default property, which provides the same indexing functionality.</source>
          <target state="translated">Visual Basic implémente <ph id="ph1">&lt;xref:System.Collections.IDictionary.Item%2A&gt;</ph> comme propriété par défaut, ce qui fournit les mêmes fonctionnalités d'indexation.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.IDictionary.Item(System.Object)">
          <source>The following code example demonstrates how to implement the <ph id="ph1">&lt;xref:System.Collections.IDictionary.Item%2A&gt;</ph> property.</source>
          <target state="translated">L’exemple de code suivant montre comment implémenter la <ph id="ph1">&lt;xref:System.Collections.IDictionary.Item%2A&gt;</ph> propriété.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.IDictionary.Item(System.Object)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Collections.IDictionary&gt;</ph> class.</source>
          <target state="translated">Cet exemple de code fait partie d’un exemple plus complet fourni pour la <ph id="ph1">&lt;xref:System.Collections.IDictionary&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="P:System.Collections.IDictionary.Item(System.Object)">
          <source><ph id="ph1">&lt;paramref name="key" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="key" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="P:System.Collections.IDictionary.Item(System.Object)">
          <source>The property is set and the <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> object is read-only.</source>
          <target state="translated">La propriété est définie et l'objet <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> est en lecture seule.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="P:System.Collections.IDictionary.Item(System.Object)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="P:System.Collections.IDictionary.Item(System.Object)">
          <source>The property is set, <ph id="ph1">&lt;paramref name="key" /&gt;</ph> does not exist in the collection, and the <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> has a fixed size.</source>
          <target state="translated">La propriété est définie, <ph id="ph1">&lt;paramref name="key" /&gt;</ph> n'existe pas dans la collection et <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> est de taille fixe.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="P:System.Collections.IDictionary.Keys">
          <source>Gets an <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> object containing the keys of the <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> object.</source>
          <target state="translated">Obtient un objet <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> contenant les clés de l'objet <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.IDictionary.Keys">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> object containing the keys of the <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> object.</source>
          <target state="translated">Objet <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> contenant les clés de l'objet <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.IDictionary.Keys">
          <source>The order of the keys in the returned <ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph> object is unspecified, but is guaranteed to be the same order as the corresponding values in the <ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph> returned by the <ph id="ph3">&lt;xref:System.Collections.IDictionary.Values%2A&gt;</ph> property.</source>
          <target state="translated">L’ordre des clés dans retourné <ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph> objet n’est pas spécifié, mais il est garanti être le même ordre que les valeurs correspondantes dans le <ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph> retournée par le <ph id="ph3">&lt;xref:System.Collections.IDictionary.Values%2A&gt;</ph> propriété.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.IDictionary.Keys">
          <source>The following code example demonstrates how to implement the <ph id="ph1">&lt;xref:System.Collections.IDictionary.Keys%2A&gt;</ph> property.</source>
          <target state="translated">L’exemple de code suivant montre comment implémenter la <ph id="ph1">&lt;xref:System.Collections.IDictionary.Keys%2A&gt;</ph> propriété.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.IDictionary.Keys">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Collections.IDictionary&gt;</ph> class.</source>
          <target state="translated">Cet exemple de code fait partie d’un exemple plus complet fourni pour la <ph id="ph1">&lt;xref:System.Collections.IDictionary&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Collections.IDictionary.Remove(System.Object)">
          <source>The key of the element to remove.</source>
          <target state="translated">Clé de l'élément à supprimer.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Collections.IDictionary.Remove(System.Object)">
          <source>Removes the element with the specified key from the <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> object.</source>
          <target state="translated">Supprime de l'objet <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> l'élément ayant la clé spécifiée.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IDictionary.Remove(System.Object)">
          <source>If the <ph id="ph1">&lt;xref:System.Collections.IDictionary&gt;</ph> object does not contain an element with the specified key, the <ph id="ph2">&lt;xref:System.Collections.IDictionary&gt;</ph> remains unchanged.</source>
          <target state="translated">Si l'objet <ph id="ph1">&lt;xref:System.Collections.IDictionary&gt;</ph> ne contient pas d'élément avec la clé spécifiée, <ph id="ph2">&lt;xref:System.Collections.IDictionary&gt;</ph> reste inchangé.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IDictionary.Remove(System.Object)">
          <source>No exception is thrown.</source>
          <target state="translated">Aucune exception n'est levée.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IDictionary.Remove(System.Object)">
          <source>The following code example demonstrates how to implement the <ph id="ph1">&lt;xref:System.Collections.IDictionary.Remove%2A&gt;</ph> method.</source>
          <target state="translated">L’exemple de code suivant montre comment implémenter la <ph id="ph1">&lt;xref:System.Collections.IDictionary.Remove%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.IDictionary.Remove(System.Object)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Collections.IDictionary&gt;</ph> class.</source>
          <target state="translated">Cet exemple de code fait partie d’un exemple plus complet fourni pour la <ph id="ph1">&lt;xref:System.Collections.IDictionary&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Collections.IDictionary.Remove(System.Object)">
          <source><ph id="ph1">&lt;paramref name="key" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="key" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Collections.IDictionary.Remove(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> object is read-only.</source>
          <target state="translated">L'objet <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> est en lecture seule.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Collections.IDictionary.Remove(System.Object)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Collections.IDictionary.Remove(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> has a fixed size.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> est de taille fixe.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="P:System.Collections.IDictionary.Values">
          <source>Gets an <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> object containing the values in the <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> object.</source>
          <target state="translated">Obtient un objet <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> contenant les valeurs de l'objet <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.IDictionary.Values">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> object containing the values in the <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> object.</source>
          <target state="translated">Objet <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> contenant les valeurs de l'objet <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.IDictionary.Values">
          <source>The order of the values in the returned <ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph> object is unspecified, but is guaranteed to be the same order as the corresponding keys in the <ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph> returned by the <ph id="ph3">&lt;xref:System.Collections.IDictionary.Keys%2A&gt;</ph> property.</source>
          <target state="translated">L’ordre des valeurs dans la liste retournée <ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph> objet n’est pas spécifié, mais qu’il correspond systématiquement à l’ordre des clés correspondantes dans le <ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph> retournée par le <ph id="ph3">&lt;xref:System.Collections.IDictionary.Keys%2A&gt;</ph> propriété.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.IDictionary.Values">
          <source>The following code example demonstrates how to implement the <ph id="ph1">&lt;xref:System.Collections.IDictionary.Values%2A&gt;</ph> property.</source>
          <target state="translated">L’exemple de code suivant montre comment implémenter la <ph id="ph1">&lt;xref:System.Collections.IDictionary.Values%2A&gt;</ph> propriété.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.IDictionary.Values">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Collections.IDictionary&gt;</ph> class.</source>
          <target state="translated">Cet exemple de code fait partie d’un exemple plus complet fourni pour la <ph id="ph1">&lt;xref:System.Collections.IDictionary&gt;</ph> classe.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>