<Type Name="IStructuralEquatable" FullName="System.Collections.IStructuralEquatable">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="5b984d179b3cd1e666e2dbdd92fc92cc72cb6a55" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36644069" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IStructuralEquatable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IStructuralEquatable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.IStructuralEquatable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IStructuralEquatable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IStructuralEquatable" />
  <TypeSignature Language="F#" Value="type IStructuralEquatable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Définit des méthodes pour prendre en charge la comparaison de la structure d'objets.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’égalité structurelle signifie que deux objets sont égaux, car ils ont des valeurs égales. Il diffère de l’égalité de référence, ce qui indique que deux références d’objet sont égales, car ils référencent le même objet physique. Le <xref:System.Collections.IStructuralEquatable> interface vous permet d’implémenter des comparaisons personnalisées pour vérifier l’égalité structurelle d’objets de collection. Autrement dit, vous pouvez créer votre propre définition d’égalité structurelle et spécifier que cette définition soit utilisée avec un type de collection qui accepte le <xref:System.Collections.IStructuralEquatable> interface. L’interface a deux membres : <xref:System.Collections.IStructuralEquatable.Equals%2A>, qui teste l’égalité en utilisant un <xref:System.Collections.IEqualityComparer> implémentation, et <xref:System.Collections.IStructuralEquatable.GetHashCode%2A>, qui retourne des codes de hachage identiques pour les objets qui sont égaux.  
  
> [!NOTE]
>  Le <xref:System.Collections.IStructuralEquatable> interface prend en charge uniquement les comparaisons personnalisées pour l’égalité structurelle. Le <xref:System.Collections.IStructuralComparable> interface prend en charge des comparaisons structurelles personnalisées de tri.  
  
 Le .NET Framework fournit également par défaut des comparateurs d’égalité, qui sont retournées par la <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> et <xref:System.Collections.StructuralComparisons.StructuralEqualityComparer%2A?displayProperty=nameWithType> propriétés. Pour plus d’informations, consultez l’exemple.  
  
 Les classes de tuple génériques (<xref:System.Tuple%601>, <xref:System.Tuple%602>, <xref:System.Tuple%603>, et ainsi de suite) et le <xref:System.Array> classe fournissent des implémentations explicites de le <xref:System.Collections.IStructuralEquatable> interface. En effectuer un cast (en c#) ou en convertissant (en Visual Basic) de l’instance actuelle d’un tableau ou d’un tuple à un <xref:System.Collections.IStructuralEquatable> valeur de l’interface et en fournissant votre <xref:System.Collections.IEqualityComparer> mise en œuvre en tant qu’argument à la <xref:System.Collections.IStructuralEquatable.Equals%2A> (méthode), vous pouvez définir une égalité personnalisée comparaison de la matrice ou de la collection.  
  
   
  
## Examples  
 Le comparateur d’égalité par défaut, `EqualityComparer<Object>.Default.Equals`, considère deux `NaN` valeurs égales. Toutefois, dans certains cas, vous souhaiterez peut-être la comparaison de `NaN` égalité retourner des valeurs de `false`, ce qui signifie que les valeurs ne peuvent pas être comparées. L'exemple suivant définit une classe `NanComparer` qui implémente l'interface <xref:System.Collections.IStructuralEquatable>. Il compare deux <xref:System.Double> ou deux <xref:System.Single> valeurs à l’aide de l’opérateur d’égalité. Elle transmet des valeurs d’un autre type au comparateur d’égalité par défaut.  
  
 [!code-csharp[System.Collections.IStructuralEquatable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.istructuralequatable/cs/nanexample1.cs#1)]
 [!code-vb[System.Collections.IStructuralEquatable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.istructuralequatable/vb/nanexample1.vb#1)]  
  
 L’exemple suivant crée deux objets à 3 tuples identiques dont les composants se composent de trois <xref:System.Double> valeurs. La valeur du second composant est <xref:System.Double.NaN?displayProperty=nameWithType>. L’exemple appelle ensuite la <xref:System.Tuple%603.Equals%2A?displayProperty=nameWithType> (méthode) et il appelle la <xref:System.Collections.IStructuralEquatable.Equals%2A?displayProperty=nameWithType> méthode trois fois. La première fois, elle passe le comparateur d’égalité par défaut qui est retourné par la <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> propriété. La deuxième fois, elle passe le comparateur d’égalité par défaut qui est retourné par la <xref:System.Collections.StructuralComparisons.StructuralEqualityComparer%2A?displayProperty=nameWithType> propriété. La troisième fois, elle passe personnalisé `NanComparer` objet. Comme le montre la sortie de l’exemple, les trois premiers appels de méthodes renvoient `true`, alors que le quatrième appel retourne `false`.  
  
 [!code-csharp[System.Collections.IStructuralEquatable#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.istructuralequatable/cs/nanexample1.cs#2)]
 [!code-vb[System.Collections.IStructuralEquatable#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.istructuralequatable/vb/nanexample1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Collections.IEqualityComparer" />
    <altmember cref="T:System.Collections.IStructuralComparable" />
    <altmember cref="P:System.Collections.StructuralComparisons.StructuralEqualityComparer" />
  </Docs>
  <Members>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (object other, System.Collections.IEqualityComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(object other, class System.Collections.IEqualityComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As Object, comparer As IEqualityComparer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(System::Object ^ other, System::Collections::IEqualityComparer ^ comparer);" />
      <MemberSignature Language="F#" Value="abstract member Equals : obj * System.Collections.IEqualityComparer -&gt; bool" Usage="iStructuralEquatable.Equals (other, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
        <Parameter Name="comparer" Type="System.Collections.IEqualityComparer" />
      </Parameters>
      <Docs>
        <param name="other">Objet à comparer à l'instance actuelle.</param>
        <param name="comparer">Objet qui détermine si l’instance active et <c>other</c> sont égaux.</param>
        <summary>Détermine si un objet est structurellement identique à l'instance actuelle.</summary>
        <returns>
          <see langword="true" /> si les deux objets sont égaux ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Collections.IStructuralEquatable.Equals%2A> méthode prend en charge la comparaison structurelle personnalisée des objets tableau et tuple. Cette méthode appelle à son tour le `comparer` l’objet <xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType> méthode pour comparer des éléments de tableau individuels ou des composants tuple, en commençant par le premier élément ou d’un composant. Les appels individuels à <xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType> fin et le <xref:System.Collections.IStructuralEquatable.Equals%2A?displayProperty=nameWithType> méthode retourne une valeur lorsqu’un appel de méthode retourne `false` ou après tous les éléments de tableau ou composants tuple ont été comparés.  
  
   
  
## Examples  
 Le comparateur d’égalité par défaut, `EqualityComparer<Object>.Default.Equals`, considère deux `NaN` valeurs égales. Toutefois, dans certains cas, vous souhaiterez peut-être la comparaison de `NaN` égalité retourner des valeurs de `false`, ce qui signifie que les valeurs ne peuvent pas être comparées. L'exemple suivant définit une classe `NanComparer` qui implémente l'interface <xref:System.Collections.IStructuralEquatable>. Il compare deux <xref:System.Double> ou deux <xref:System.Single> valeurs à l’aide de l’opérateur d’égalité. Elle transmet des valeurs d’un autre type au comparateur d’égalité par défaut.  
  
 [!code-csharp[System.Collections.IStructuralEquatable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.istructuralequatable/cs/nanexample1.cs#1)]
 [!code-vb[System.Collections.IStructuralEquatable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.istructuralequatable/vb/nanexample1.vb#1)]  
  
 L’exemple suivant crée deux objets à 3 tuples identiques dont les composants se composent de trois <xref:System.Double> valeurs. La valeur du second composant est <xref:System.Double.NaN?displayProperty=nameWithType>. L’exemple appelle ensuite la <xref:System.Tuple%603.Equals%2A?displayProperty=nameWithType> (méthode) et il appelle la <xref:System.Collections.IStructuralEquatable.Equals%2A?displayProperty=nameWithType> méthode trois fois. La première fois, elle passe le comparateur d’égalité par défaut qui est retourné par la <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> propriété. La deuxième fois, elle passe le comparateur d’égalité par défaut qui est retourné par la <xref:System.Collections.StructuralComparisons.StructuralEqualityComparer%2A?displayProperty=nameWithType> propriété. La troisième fois, elle passe personnalisé `NanComparer` objet. Comme le montre la sortie de l’exemple, les trois premiers appels de méthodes renvoient `true`, alors que le quatrième appel retourne `false`.  
  
 [!code-csharp[System.Collections.IStructuralEquatable#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.istructuralequatable/cs/nanexample1.cs#2)]
 [!code-vb[System.Collections.IStructuralEquatable#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.istructuralequatable/vb/nanexample1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.StructuralComparisons.StructuralEqualityComparer" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public int GetHashCode (System.Collections.IEqualityComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetHashCode(class System.Collections.IEqualityComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetHashCode (comparer As IEqualityComparer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetHashCode(System::Collections::IEqualityComparer ^ comparer);" />
      <MemberSignature Language="F#" Value="abstract member GetHashCode : System.Collections.IEqualityComparer -&gt; int" Usage="iStructuralEquatable.GetHashCode comparer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.IEqualityComparer" />
      </Parameters>
      <Docs>
        <param name="comparer">Objet qui calcule le code de hachage de l'objet actif.</param>
        <summary>Retourne un code de hachage pour l'instance actuelle.</summary>
        <returns>Code de hachage de l'instance actuelle.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implémentez cette méthode pour retourner des codes de hachage personnalisés pour les objets de collection qui correspondent à la comparaison personnalisée pour l’égalité structurelle fournie par le <xref:System.Collections.IStructuralEquatable.Equals%2A> (méthode).  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Si le <see cref="M:System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)" /> méthode retourne <see langword="true" /> pour deux objets, les valeurs retournées par la <see cref="M:System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)" /> méthode pour les deux objets doit aussi être égale.</para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>