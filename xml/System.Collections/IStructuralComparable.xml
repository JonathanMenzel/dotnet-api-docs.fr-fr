<Type Name="IStructuralComparable" FullName="System.Collections.IStructuralComparable">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4eff52d60057e188207f6f05da94a8ae8b767298" /><Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="11/20/2018" /><Meta Name="ms.locfileid" Value="52206721" /></Metadata><TypeSignature Language="C#" Value="public interface IStructuralComparable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IStructuralComparable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.IStructuralComparable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IStructuralComparable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IStructuralComparable" />
  <TypeSignature Language="F#" Value="type IStructuralComparable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Prend en charge la comparaison structurelle d’objets de collection.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Collections.IStructuralComparable> interface vous permet d’implémenter des comparaisons personnalisées pour les membres de la collection. Autrement dit, vous pouvez définir précisément ce que cela signifie pour un objet collection de précéder, suivre ou se produisent dans la même position dans l’ordre de tri qu’un deuxième objet de collection. Vous pouvez ensuite spécifier que cette définition soit utilisée avec un type de collection qui accepte le <xref:System.Collections.IStructuralComparable> interface.  
  
 L’interface a un membre unique, <xref:System.Collections.IStructuralComparable.CompareTo%2A>, qui détermine si l’objet collection actuel est inférieur à, égal à ou supérieur à un deuxième objet dans l’ordre de tri. La comparaison réelle des membres ou éléments de l’instance actuelle avec ceux d’un deuxième objet est effectuée par un <xref:System.Collections.IComparer> implémentation d’interface, qui contient la définition de votre comparaison personnalisée.  
  
> [!NOTE]
>  Le <xref:System.Collections.IStructuralComparable> interface prend en charge uniquement les comparaisons structurelles de tri. Le <xref:System.Collections.IStructuralEquatable> interface prend en charge les comparaisons personnalisées pour l’égalité structurelle.  
  
 Le .NET Framework fournit deux comparateurs par défaut. Une est retournée par la <xref:System.Collections.StructuralComparisons.StructuralComparer%2A?displayProperty=nameWithType> propriété ; l’autre est retournée par la <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> propriété.  
  
 Les classes de tuple génériques (<xref:System.Tuple%601>, <xref:System.Tuple%602>, <xref:System.Tuple%603>, et ainsi de suite) et le <xref:System.Array> classe fournissent des implémentations explicites de le <xref:System.Collections.IStructuralComparable> interface. En castant (en c#) ou en convertissant (en Visual Basic) de l’instance actuelle d’un tableau ou un tuple à un <xref:System.Collections.IStructuralComparable> valeur de l’interface et en fournissant votre <xref:System.Collections.IComparer> mise en œuvre en tant qu’argument à la <xref:System.Collections.IStructuralComparable.CompareTo%2A> (méthode), vous pouvez définir un ordre de tri personnalisé pour le tableau ou collection. Toutefois, vous n’appelez pas la <xref:System.Collections.IStructuralComparable.CompareTo%2A> (méthode) directement dans la plupart des cas. Au lieu de cela, le <xref:System.Collections.IStructuralComparable.CompareTo%2A> méthode est appelée par les méthodes de tri comme <xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29>. Dans ce cas, vous définissez votre <xref:System.Collections.IComparer> implémentation et passez-le en tant qu’argument au constructeur de classe de tri (méthode) ou une collection d’un objet. Le <xref:System.Collections.IStructuralComparable.CompareTo%2A> méthode avec votre comparateur personnalisé est ensuite appelée automatiquement chaque fois que la collection est triée.  
  
   
  
## Examples  
 L’exemple suivant crée un tableau de <xref:System.Tuple%606> objets qui contient les données de la population pour trois des villes américaines de 1960 à 2000. Premier composant du sextuple est le nom de ville. Les cinq composants restants représentent la population à des intervalles de dix ans de 1960 à 2000.  
  
 Le `PopulationComparer` classe fournit un <xref:System.Collections.IComparer> implémentation qui autorise le tableau de sextuples à être trié par l’un de ses composants. Deux valeurs sont fournies à la `PopulationComparer` classe dans son constructeur : la position du composant qui définit l’ordre de tri et une valeur booléenne qui indique si les objets de tuple doivent être triés dans l’ordre croissant ou décroissant.  
  
 L’exemple puis affiche les éléments dans le tableau dans un ordre aléatoire, les trie par le troisième composant (population en 1970) et les affiche, puis les trie par le sixième composant (population en 2000) et les affiche. Notez que l’exemple n’appelle pas directement la <xref:System.Collections.IStructuralComparable.CompareTo%2A> (méthode). La méthode est appelée implicitement par la <xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29> méthode pour chaque objet tuple dans le tableau.  
  
 [!code-csharp[System.Tuple\`6.CompareTo#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`6.compareto/cs/compareto2.cs#2)]
 [!code-vb[System.Tuple\`6.CompareTo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`6.compareto/vb/compareto2.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IComparable" />
    <altmember cref="T:System.Collections.IStructuralEquatable" />
    <altmember cref="P:System.Collections.StructuralComparisons.StructuralComparer" />
  </Docs>
  <Members>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object other, System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object other, class System.Collections.IComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (other As Object, comparer As IComparer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int CompareTo(System::Object ^ other, System::Collections::IComparer ^ comparer);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : obj * System.Collections.IComparer -&gt; int" Usage="iStructuralComparable.CompareTo (other, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
        <Parameter Name="comparer" Type="System.Collections.IComparer" />
      </Parameters>
      <Docs>
        <param name="other">Objet à comparer à l'instance actuelle.</param>
        <param name="comparer">Objet qui compare des membres de l'objet de collection actuel avec les membres correspondants de <paramref name="other" />.</param>
        <summary>Détermine si l’objet collection actuel précède, se situe à la même position que, ou suit un autre objet dans l’ordre de tri.</summary>
        <returns>Entier signé qui indique la relation de l'objet collection actuel par rapport au paramètre <paramref name="other" /> dans l’ordre de tri :<br /> - Si inférieur à 0, l’instance active précède <paramref name="other" />.<br /> - Si égal à 0, l’instance active et <paramref name="other" /> sont égaux.<br /> - Si supérieur à 0, l’instance active suit <paramref name="other" />.  
  
 <list type="table"><listheader><term> Valeur de retour 
 </term><description> Description  
 </description></listheader><item><term> -1 
 </term><description> L'instance actuelle précède <paramref name="other" />.  
  
 </description></item><item><term> 0 
 </term><description> L'instance actuelle et <paramref name="other" /> sont égaux.  
  
 </description></item><item><term> 1 
 </term><description> L'instance actuelle suit <paramref name="other" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Collections.IStructuralComparable.CompareTo%2A> méthode prend en charge la comparaison structurelle personnalisée et le tri des objets tableau et tuple. Le <xref:System.Collections.IStructuralComparable.CompareTo%2A> les appels de méthode le `comparer` l’objet <xref:System.Collections.IComparer.Compare%2A?displayProperty=nameWithType> méthode pour comparer des éléments de tableau ou des composants de tuple, en commençant par le premier élément ou d’un composant. Les appels individuels à <xref:System.Collections.IComparer.Compare%2A?displayProperty=nameWithType> fin et le <xref:System.Collections.IStructuralComparable.CompareTo%2A> méthode retourne une valeur lorsqu’une des conditions suivantes est true :  
  
-   Le <xref:System.Collections.IComparer.Compare%2A?displayProperty=nameWithType> méthode retourne -1.  
  
-   Le <xref:System.Collections.IComparer.Compare%2A?displayProperty=nameWithType> méthode retourne 1.  
  
-   Le <xref:System.Collections.IComparer.Compare%2A?displayProperty=nameWithType> méthode est appelée pour le dernier élément ou composant dans l’objet de collection.  
  
   
  
## Examples  
 L’exemple suivant crée un tableau de <xref:System.Tuple%606> objets qui contient les données de la population pour trois des villes américaines de 1960 à 2000. Premier composant du sextuple est le nom de ville. Les cinq composants restants représentent la population à des intervalles de dix ans de 1960 à 2000.  
  
 Le `PopulationComparer` classe fournit un <xref:System.Collections.IComparer> implémentation qui autorise le tableau de sextuples à être trié par l’un de ses composants. Deux valeurs sont fournies à la `PopulationComparer` classe dans son constructeur : la position du composant qui définit l’ordre de tri, et un <xref:System.Boolean> valeur qui indique si les objets de tuple doivent être triés dans l’ordre croissant ou décroissant.  
  
 L’exemple puis affiche les éléments dans le tableau dans un ordre aléatoire, les trie par le troisième composant (population en 1970) et les affiche, puis les trie par le sixième composant (population en 2000) et les affiche. Notez que l’exemple n’appelle pas directement la <xref:System.Collections.IStructuralComparable.CompareTo%2A?displayProperty=nameWithType> implémentation. La méthode est appelée implicitement par la <xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29> méthode pour chaque objet tuple dans le tableau.  
  
 [!code-csharp[System.Tuple\`6.CompareTo#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`6.compareto/cs/compareto2.cs#2)]
 [!code-vb[System.Tuple\`6.CompareTo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`6.compareto/vb/compareto2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Cette instance et <paramref name="other" /> ne sont pas du même type.</exception>
        <altmember cref="T:System.Collections.IComparer" />
      </Docs>
    </Member>
  </Members>
</Type>