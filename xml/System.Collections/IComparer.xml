<Type Name="IComparer" FullName="System.Collections.IComparer">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b9d4a184f4f21a2763d4b36ee54743243522bf01" />
    <Meta Name="ms.sourcegitcommit" Value="850a55c780d5a95b534467969add0232fd3a6125" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="06/07/2018" />
    <Meta Name="ms.locfileid" Value="34828674" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IComparer" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IComparer" />
  <TypeSignature Language="DocId" Value="T:System.Collections.IComparer" />
  <TypeSignature Language="VB.NET" Value="Public Interface IComparer" />
  <TypeSignature Language="C++ CLI" Value="public interface class IComparer" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Expose une méthode qui compare deux objets.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette interface est utilisée conjointement avec la <xref:System.Array.Sort%2A?displayProperty=nameWithType> et <xref:System.Array.BinarySearch%2A?displayProperty=nameWithType> méthodes. Il fournit un moyen pour personnaliser l’ordre de tri d’une collection. Consultez le <xref:System.Collections.IComparer.Compare%2A> méthode des notes sur les paramètres et la valeur de retour.  
  
 L’implémentation par défaut de cette interface est la <xref:System.Collections.Comparer> classe. Pour la version générique de cette interface, consultez <xref:System.Collections.Generic.IComparer%601?displayProperty=nameWithType>.  
  
   
  
## Examples  

L’exemple suivant utilise le <xref:System.Collections.IComparer> interface pour trier un tableau de chaînes. Dans cet exemple, le <xref:System.Collections.IComparer.Compare%2A> méthode est implémentée à l’aide de la <xref:System.Collections.CaseInsensitiveComparer> classe pour inverser l’ordre du contenu du tableau.  
  
[!code-csharp[sorting-an-array](~/samples/snippets/csharp/api/system.collections/icomparer/reverse.cs)]
[!code-vb[sorting-an-array](~/samples/snippets/visualbasic/api/system.collections/icomparer/reverse.vb)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Collections.Comparer" />
    <altmember cref="T:System.Collections.Generic.IComparer`1" />
    <altmember cref="P:System.Threading.Thread.CurrentCulture" />
    <altmember cref="T:System.Globalization.CompareInfo" />
    <altmember cref="T:System.Globalization.CultureInfo" />
  </Docs>
  <Members>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public int Compare (object x, object y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(object x, object y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.IComparer.Compare(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Compare (x As Object, y As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Compare(System::Object ^ x, System::Object ^ y);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Object" />
        <Parameter Name="y" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="x">Premier objet à comparer.</param>
        <param name="y">Deuxième objet à comparer.</param>
        <summary>Compare deux objets et retourne une valeur indiquant si le premier est inférieur, égal ou supérieur au second.</summary>
        <returns>Entier signé indiquant les valeurs relatives de <paramref name="x" /> et <paramref name="y" /> :<br />   - S’il est inférieur à 0, <paramref name="x" /> est inférieur à <paramref name="y" />.<br />   - S’il est égal à 0, <paramref name="x" /> est égal à <paramref name="y" />.<br />   - S’il est supérieur à 0, <paramref name="x" /> est supérieur à <paramref name="y" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’implémentation par défaut consiste à utiliser le <xref:System.IComparable.CompareTo%2A> méthode de l’un des paramètres.  
  
 Comparaison `null` avec n’importe quel type est autorisée et ne génère pas d’exception lors de l’utilisation <xref:System.IComparable>. Lors du tri, `null` est considéré comme étant inférieure à n’importe quel autre objet.  
  
   
  
## Examples  

L’exemple suivant utilise le <xref:System.Collections.IComparer> interface pour trier un tableau de chaînes. Dans cet exemple, le <xref:System.Collections.IComparer.Compare%2A> méthode est implémentée à l’aide de la <xref:System.Collections.CaseInsensitiveComparer> classe pour inverser l’ordre du contenu du tableau.  
  
[!code-csharp[sorting-an-array](~/samples/snippets/csharp/api/system.collections/icomparer/reverse.cs)]
[!code-vb[sorting-an-array](~/samples/snippets/visualbasic/api/system.collections/icomparer/reverse.vb)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ni <paramref name="x" /> ni <paramref name="y" /> n'implémente l'interface <see cref="T:System.IComparable" />.  -ou- <paramref name="x" /> et <paramref name="y" /> sont de types différents et aucun des deux ne peut effectuer de comparaisons avec l’autre.</exception>
        <altmember cref="T:System.IComparable" />
        <altmember cref="P:System.Threading.Thread.CurrentCulture" />
        <altmember cref="T:System.Globalization.CompareInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
  </Members>
</Type>