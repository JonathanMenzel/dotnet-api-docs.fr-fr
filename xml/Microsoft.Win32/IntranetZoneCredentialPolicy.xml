<Type Name="IntranetZoneCredentialPolicy" FullName="Microsoft.Win32.IntranetZoneCredentialPolicy">
  <Metadata><Meta Name="ms.openlocfilehash" Value="cf9f57bdf65a6f26cf1e2965c02261fbb922b20d" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="37707523" /></Metadata><TypeSignature Language="C#" Value="public class IntranetZoneCredentialPolicy : System.Net.ICredentialPolicy" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit IntranetZoneCredentialPolicy extends System.Object implements class System.Net.ICredentialPolicy" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Win32.IntranetZoneCredentialPolicy" />
  <TypeSignature Language="VB.NET" Value="Public Class IntranetZoneCredentialPolicy&#xA;Implements ICredentialPolicy" />
  <TypeSignature Language="C++ CLI" Value="public ref class IntranetZoneCredentialPolicy : System::Net::ICredentialPolicy" />
  <TypeSignature Language="F#" Value="type IntranetZoneCredentialPolicy = class&#xA;    interface ICredentialPolicy" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Net.ICredentialPolicy</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Définit une stratégie d'informations d'identification à utiliser pour les demandes de ressources effectuées à l'aide de <see cref="T:System.Net.WebRequest" /> et de ses classes dérivées.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette stratégie permet des informations d’identification à envoyer uniquement si la ressource demandée est dans le même domaine que le client qui effectue la demande. Pour de nombreuses applications il s’agit de la stratégie optimale, car il empêche les informations d’identification réseau d’être envoyées avec les demandes pour les ressources qui ne sont pas sur l’intranet.  
  
> [!NOTE]
>  <xref:System.Net.ICredentialPolicy> les stratégies sont appelées uniquement si le <xref:System.Net.WebRequest> ou le <xref:System.Net.WebProxy> qui est associé à la demande possède les informations d’identification qui ne sont pas `null`. Définition de cette stratégie n’a aucun effet sur les demandes qui ne spécifient pas d’informations d’identification.  
  
 Utilisez le <xref:System.Net.AuthenticationManager.CredentialPolicy%2A?displayProperty=nameWithType> propriété à définir le <xref:Microsoft.Win32.IntranetZoneCredentialPolicy> stratégie. Le <xref:System.Net.IAuthenticationModule> qui gère l’authentification pour la demande appellera le <xref:Microsoft.Win32.IntranetZoneCredentialPolicy.ShouldSendCredential%2A> méthode avant d’effectuer l’authentification. Si la ressource demandée se trouve dans un autre domaine que le client, le <xref:Microsoft.Win32.IntranetZoneCredentialPolicy.ShouldSendCredential%2A> méthode retourne `false`, et l’authentification n’est pas effectuée.  
  
 Cette stratégie affecte toutes les instances de <xref:System.Net.WebRequest> avec informations d’identification non null dans le domaine d’application actuel. La stratégie ne peut pas être substituée sur des demandes individuelles.  
  
   
  
## Examples  
 L’exemple de code suivant illustre la création d’une instance de <xref:Microsoft.Win32.IntranetZoneCredentialPolicy> et l’utiliser pour définir la stratégie d’informations d’identification pour le domaine d’application.  
  
 [!code-cpp[NclCredPolicy#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCredPolicy/CPP/NCLCredPolicy.cpp#2)]
 [!code-csharp[NclCredPolicy#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCredPolicy/CS/websample.cs#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IntranetZoneCredentialPolicy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Win32.IntranetZoneCredentialPolicy.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IntranetZoneCredentialPolicy();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.Win32.IntranetZoneCredentialPolicy" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Applications utilisent ce constructeur pour créer des objets qui peuvent être utilisées pour définir le <xref:System.Net.AuthenticationManager.CredentialPolicy%2A> propriété.  
  
   
  
## Examples  
 L’exemple de code suivant illustre la création d’une instance de cette classe.  
  
 [!code-cpp[NclCredPolicy#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCredPolicy/CPP/NCLCredPolicy.cpp#2)]
 [!code-csharp[NclCredPolicy#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCredPolicy/CS/websample.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSendCredential">
      <MemberSignature Language="C#" Value="public virtual bool ShouldSendCredential (Uri challengeUri, System.Net.WebRequest request, System.Net.NetworkCredential credential, System.Net.IAuthenticationModule authModule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldSendCredential(class System.Uri challengeUri, class System.Net.WebRequest request, class System.Net.NetworkCredential credential, class System.Net.IAuthenticationModule authModule) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Win32.IntranetZoneCredentialPolicy.ShouldSendCredential(System.Uri,System.Net.WebRequest,System.Net.NetworkCredential,System.Net.IAuthenticationModule)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ShouldSendCredential (challengeUri As Uri, request As WebRequest, credential As NetworkCredential, authModule As IAuthenticationModule) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool ShouldSendCredential(Uri ^ challengeUri, System::Net::WebRequest ^ request, System::Net::NetworkCredential ^ credential, System::Net::IAuthenticationModule ^ authModule);" />
      <MemberSignature Language="F#" Value="abstract member ShouldSendCredential : Uri * System.Net.WebRequest * System.Net.NetworkCredential * System.Net.IAuthenticationModule -&gt; bool&#xA;override this.ShouldSendCredential : Uri * System.Net.WebRequest * System.Net.NetworkCredential * System.Net.IAuthenticationModule -&gt; bool" Usage="intranetZoneCredentialPolicy.ShouldSendCredential (challengeUri, request, credential, authModule)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Net.ICredentialPolicy.ShouldSendCredential(System.Uri,System.Net.WebRequest,System.Net.NetworkCredential,System.Net.IAuthenticationModule)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="challengeUri" Type="System.Uri" />
        <Parameter Name="request" Type="System.Net.WebRequest" />
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="authModule" Type="System.Net.IAuthenticationModule" />
      </Parameters>
      <Docs>
        <param name="challengeUri"><see cref="T:System.Uri" /> qui recevra la demande.</param>
        <param name="request"><see cref="T:System.Net.WebRequest" /> représentant la ressource demandée.</param>
        <param name="credential"><see cref="T:System.Net.NetworkCredential" /> qui sera envoyé avec la demande si cette méthode retourne <see langword="true" />.</param>
        <param name="authModule"><see cref="T:System.Net.IAuthenticationModule" /> qui exécutera l'authentification, si elle est requise.</param>
        <summary>Retourne un <see cref="T:System.Boolean" /> qui indique si les informations d'identification du client sont envoyées avec une demande de ressource effectuée à l'aide de <see cref="T:System.Net.WebRequest" />.</summary>
        <returns><see langword="true" /> si la ressource demandée se trouve dans le même domaine que le client effectuant la demande ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Applications n’appellent pas cette méthode directement. elle est appelée par le <xref:System.Net.IAuthenticationModule> qui est chargé d’effectuer l’authentification avec le serveur. Si cette méthode retourne `false`, le <xref:System.Net.IAuthenticationModule> ne s’authentifient pas le client auprès du serveur.  
  
 Cette méthode est appelée uniquement pour les demandes qui spécifient des informations d’identification ou utilisent un <xref:System.Net.WebProxy> objet qui spécifie les informations d’identification.  
  
   
  
## Examples  
 L’exemple de code suivant illustre la dérivation de <xref:Microsoft.Win32.IntranetZoneCredentialPolicy> pour autoriser les informations d’identification à envoyer des demandes qui utilisent Secure Hypertext Transfer Protocol (HTTPS) avec l’authentification de base. À l’aide de HTTPS et l’authentification de base, le mot de passe utilisateur est chiffrée avant d’être envoyés sur le réseau.  
  
 [!code-cpp[NclCredPolicy#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCredPolicy/CPP/NCLCredPolicy.cpp#4)]
 [!code-csharp[NclCredPolicy#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCredPolicy/CS/websample.cs#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>