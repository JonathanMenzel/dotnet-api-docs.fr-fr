<Type Name="InstallContext" FullName="System.Configuration.Install.InstallContext">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0866b9a8d8027df2cd3f53a8dc6b20d77983798f" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30379763" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class InstallContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit InstallContext extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Configuration.Install.InstallContext" />
  <TypeSignature Language="VB.NET" Value="Public Class InstallContext" />
  <TypeSignature Language="C++ CLI" Value="public ref class InstallContext" />
  <AssemblyInfo>
    <AssemblyName>System.Configuration.Install</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Contient des informations sur l'installation en cours.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En règle générale, un <xref:System.Configuration.Install.InstallContext> est créé par une installation exécutable, telles que InstallUtil.exe, qui installe des assemblys. Le programme d’installation appelle le <xref:System.Configuration.Install.InstallContext> constructeur, en lui passant le chemin d’accès du fichier journal par défaut et les paramètres de ligne de commande.  
  
 Avant d’appeler ses <xref:System.Configuration.Install.Installer.Install%2A>, <xref:System.Configuration.Install.Installer.Commit%2A>, <xref:System.Configuration.Install.Installer.Rollback%2A>, ou <xref:System.Configuration.Install.Installer.Uninstall%2A> définit de méthodes, le programme d’installation le <xref:System.Configuration.Install.Installer.Context%2A> propriété d’un <xref:System.Configuration.Install.Installer> à l’instance de <xref:System.Configuration.Install.InstallContext>. Avant d’appeler ces méthodes, une <xref:System.Configuration.Install.Installer> qui contient une collection de programme d’installation dans le <xref:System.Configuration.Install.Installer.Installers%2A> jeux de propriétés du <xref:System.Configuration.Install.Installer.Context%2A> la propriété de chaque programme d’installation.  
  
 Le <xref:System.Configuration.Install.InstallContext.Parameters%2A> propriété contient une version analysée de la ligne de commande entrée pour lancer l’exécutable d’installation. La propriété contient des informations telles que le chemin d’accès à un fichier journal, si vous souhaitez afficher les informations du journal sur la console et s’il faut afficher une interface utilisateur pendant l’installation. Appelez le <xref:System.Configuration.Install.InstallContext.IsParameterTrue%2A> méthode pour déterminer si un paramètre de ligne de commande est `true`.  
  
 Utilisez la <xref:System.Configuration.Install.InstallContext.LogMessage%2A> méthode pour écrire des messages d’état dans le fichier journal d’installation et de la console.  
  
   
  
## Examples  
 L’exemple suivant illustre la <xref:System.Configuration.Install.InstallContext.%23ctor%2A> constructeurs, les <xref:System.Configuration.Install.InstallContext.Parameters%2A> propriété et la <xref:System.Configuration.Install.InstallContext.LogMessage%2A> et <xref:System.Configuration.Install.InstallContext.IsParameterTrue%2A> méthodes de la <xref:System.Configuration.Install.InstallContext> classe.  
  
 Lorsque la <xref:System.Configuration.Install.Installer.Install%2A> méthode du programme d’installation est appelée, elle vérifie les paramètres de la ligne de commande. En fonction de cela, il affiche les messages de progression sur la console et enregistre également dans le fichier journal spécifié.  
  
 Lorsque le programme est appelé sans arguments, vide <xref:System.Configuration.Install.InstallContext> est créé. Lorsque « / LogFile » et « / LogtoConsole » sont spécifiés, la <xref:System.Configuration.Install.InstallContext> est créé en passant les arguments respectifs à <xref:System.Configuration.Install.InstallContext.%23ctor%2A>.  
  
 [!code-cpp[InstallContext_InstallContext#1](~/samples/snippets/cpp/VS_Snippets_CLR/InstallContext_InstallContext/CPP/installcontext_installcontext.cpp#1)]
 [!code-csharp[InstallContext_InstallContext#1](~/samples/snippets/csharp/VS_Snippets_CLR/InstallContext_InstallContext/CS/installcontext_installcontext.cs#1)]
 [!code-vb[InstallContext_InstallContext#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/InstallContext_InstallContext/VB/installcontext_installcontext.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Configuration.Install.Installer" />
    <altmember cref="T:System.Configuration.Install.TransactedInstaller" />
    <altmember cref="T:System.Configuration.Install.AssemblyInstaller" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Configuration.Install.InstallContext" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InstallContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.Install.InstallContext.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InstallContext();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Configuration.Install.InstallContext" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette surcharge ne crée pas un fichier journal pour l’installation.  
  
   
  
## Examples  
  
> [!NOTE]
>  Cet exemple montre comment utiliser une des versions surchargées de la <xref:System.Configuration.Install.InstallContext> constructeur. Pour obtenir des exemples qui peuvent être disponibles, consultez les rubriques de surcharge individuels.  
  
 Lorsque le programme est appelé sans arguments, vide <xref:System.Configuration.Install.InstallContext> est créé.  
  
 [!code-cpp[InstallContext_InstallContext#2](~/samples/snippets/cpp/VS_Snippets_CLR/InstallContext_InstallContext/CPP/installcontext_installcontext.cpp#2)]
 [!code-csharp[InstallContext_InstallContext#2](~/samples/snippets/csharp/VS_Snippets_CLR/InstallContext_InstallContext/CS/installcontext_installcontext.cs#2)]
 [!code-vb[InstallContext_InstallContext#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/InstallContext_InstallContext/VB/installcontext_installcontext.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InstallContext (string logFilePath, string[] commandLine);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string logFilePath, string[] commandLine) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.Install.InstallContext.#ctor(System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (logFilePath As String, commandLine As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InstallContext(System::String ^ logFilePath, cli::array &lt;System::String ^&gt; ^ commandLine);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="logFilePath" Type="System.String" />
        <Parameter Name="commandLine" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="logFilePath">Chemin d'accès du fichier journal pour cette installation, ou <see langword="null" /> si aucun fichier journal ne doit être créé.</param>
        <param name="commandLine">Paramètres de ligne de commande entrés lors de l'exécution du programme d'installation, ou <see langword="null" /> si aucun paramètre n'a été entré.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Configuration.Install.InstallContext" /> et crée un fichier journal pour l'installation.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si l’installation utilise [Installutil.exe (outil Installer)](~/docs/framework/tools/installutil-exe-installer-tool.md), ce constructeur crée un fichier journal dans le chemin d’accès spécifié et analyse le tableau de paramètres de ligne de commande dans le <xref:System.Configuration.Install.InstallContext.Parameters%2A> propriété. Si un chemin d’accès du fichier journal est spécifié dans les paramètres de ligne de commande, il est utilisé pour créer le fichier. Si l’argument du fichier journal n’est pas spécifié dans la ligne de commande, la valeur de le `logFilePath` paramètre est utilisé. Pour supprimer la création d’un fichier journal, passez le « / logfile = « paramètre de ligne de commande.  
  
   
  
## Examples  
 Cet exemple est un extrait de l’exemple de la vue d’ensemble de la classe de <xref:System.Configuration.Install.InstallContext> classe.  
  
 Lorsque « / LogFile » et « / LogtoConsole » sont spécifiés, la <xref:System.Configuration.Install.InstallContext> est créé en passant les arguments respectifs à <xref:System.Configuration.Install.InstallContext.%23ctor%2A>.  
  
 [!code-cpp[InstallContext_InstallContext#3](~/samples/snippets/cpp/VS_Snippets_CLR/InstallContext_InstallContext/CPP/installcontext_installcontext.cpp#3)]
 [!code-csharp[InstallContext_InstallContext#3](~/samples/snippets/csharp/VS_Snippets_CLR/InstallContext_InstallContext/CS/installcontext_installcontext.cs#3)]
 [!code-vb[InstallContext_InstallContext#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/InstallContext_InstallContext/VB/installcontext_installcontext.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>Passer votre chemin d’accès du fichier journal par défaut dans le <paramref name="logFilePath" /> paramètre lorsque vous appelez ce constructeur. Ceci est l’emplacement où le fichier journal est créé, sauf si le paramètre de ligne de commande /logfile est utilisé lors de l’exécution de l’exécutable d’installation.</para>
        </block>
        <altmember cref="P:System.Configuration.Install.InstallContext.Parameters" />
        <altmember cref="M:System.Configuration.Install.InstallContext.LogMessage(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="IsParameterTrue">
      <MemberSignature Language="C#" Value="public bool IsParameterTrue (string paramName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsParameterTrue(string paramName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.Install.InstallContext.IsParameterTrue(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsParameterTrue (paramName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsParameterTrue(System::String ^ paramName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="paramName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="paramName">Nom du paramètre de ligne de commande à vérifier.</param>
        <summary>Détermine si le paramètre de ligne de commande spécifié a la valeur <see langword="true" />.</summary>
        <returns>
          <see langword="true" /> si le paramètre spécifié a la valeur "yes", "true", "1" ou une chaîne vide ("") ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode accède à la <xref:System.Configuration.Install.InstallContext.Parameters%2A> propriété, qui contient une version analysée des paramètres de ligne de commande, pour déterminer si le paramètre spécifié est `true`.  
  
   
  
## Examples  
 Cet exemple est un extrait de l’exemple dans la vue d’ensemble de la classe de la <xref:System.Configuration.Install.InstallContext> classe.  
  
 Elle utilise le <xref:System.Configuration.Install.InstallContext.IsParameterTrue%2A> méthode pour déterminer si le `LogtoConsole` paramètre a été défini. Si `yes`, il utilise ensuite la <xref:System.Configuration.Install.InstallContext.LogMessage%2A> méthode pour écrire des messages d’état dans le fichier journal d’installation et de la console.  
  
 [!code-cpp[InstallContext_InstallContext#4](~/samples/snippets/cpp/VS_Snippets_CLR/InstallContext_InstallContext/CPP/installcontext_installcontext.cpp#4)]
 [!code-csharp[InstallContext_InstallContext#4](~/samples/snippets/csharp/VS_Snippets_CLR/InstallContext_InstallContext/CS/installcontext_installcontext.cs#4)]
 [!code-vb[InstallContext_InstallContext#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/InstallContext_InstallContext/VB/installcontext_installcontext.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Configuration.Install.InstallContext.Parameters" />
      </Docs>
    </Member>
    <Member MemberName="LogMessage">
      <MemberSignature Language="C#" Value="public void LogMessage (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LogMessage(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.Install.InstallContext.LogMessage(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub LogMessage (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LogMessage(System::String ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Message à écrire.</param>
        <summary>Affiche un message dans la console et l'enregistre dans le fichier journal de l'installation.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un programme d’installation peut appeler cette méthode pour écrire des cours ou autres informations d’état dans le fichier journal. Si les paramètres de ligne de commande spécifient qu’une interface utilisateur doit être affichée, le programme d’installation doit afficher des boîtes de message ou effectuer des requêtes, en plus de l’appel du <xref:System.Configuration.Install.InstallContext.LogMessage%2A> (méthode). Texte écrit dans le fichier journal n’est pas visibles par l’utilisateur, sauf si InstallUtil.exe est utilisé pour exécuter l’installation et « / LogToConsole = true » est spécifié dans la ligne de commande.  
  
   
  
## Examples  
 Cet exemple est un extrait de l’exemple de la vue d’ensemble de la classe de <xref:System.Configuration.Install.InstallContext> classe.  
  
 Elle utilise le <xref:System.Configuration.Install.InstallContext.IsParameterTrue%2A> méthode pour déterminer si le `LogtoConsole` paramètre a été défini. Si `yes`, il utilise ensuite la <xref:System.Configuration.Install.InstallContext.LogMessage%2A> méthode pour écrire des messages d’état dans le fichier journal d’installation et de la console.  
  
 [!code-cpp[InstallContext_InstallContext#4](~/samples/snippets/cpp/VS_Snippets_CLR/InstallContext_InstallContext/CPP/installcontext_installcontext.cpp#4)]
 [!code-csharp[InstallContext_InstallContext#4](~/samples/snippets/csharp/VS_Snippets_CLR/InstallContext_InstallContext/CS/installcontext_installcontext.cs#4)]
 [!code-vb[InstallContext_InstallContext#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/InstallContext_InstallContext/VB/installcontext_installcontext.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Configuration.Install.InstallContext.Parameters" />
      </Docs>
    </Member>
    <Member MemberName="Parameters">
      <MemberSignature Language="C#" Value="public System.Collections.Specialized.StringDictionary Parameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Specialized.StringDictionary Parameters" />
      <MemberSignature Language="DocId" Value="P:System.Configuration.Install.InstallContext.Parameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parameters As StringDictionary" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Specialized::StringDictionary ^ Parameters { System::Collections::Specialized::StringDictionary ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.StringDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient les paramètres de ligne de commande qui ont été entrés lors de l'exécution de InstallUtil.exe.</summary>
        <value>
          <see cref="T:System.Collections.Specialized.StringDictionary" /> représentant les paramètres de ligne de commande qui ont été entrés lors du lancement de l'exécutable d'installation.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsqu’un nouveau <xref:System.Configuration.Install.InstallContext> est créé, la ligne de commande paramètres sont analysées dans le <xref:System.Configuration.Install.InstallContext.Parameters%2A> propriété. Les clés et les valeurs des paramètres sont des chaînes.  
  
   
  
## Examples  
 Cet exemple est un extrait de l’exemple de la vue d’ensemble de la classe de <xref:System.Configuration.Install.InstallContext> classe.  
  
 L’exemple récupère le <xref:System.Configuration.Install.InstallContext.Parameters%2A> propriété pour voir si un argument de ligne de commande a été entré par l’utilisateur. Elle utilise également le <xref:System.Configuration.Install.InstallContext.IsParameterTrue%2A> méthode pour déterminer si le `LogtoConsole` paramètre a été défini. Si `yes`, il utilise ensuite la <xref:System.Configuration.Install.InstallContext.LogMessage%2A> méthode pour écrire des messages d’état dans le fichier journal d’installation et de la console.  
  
 [!code-cpp[InstallContext_InstallContext#6](~/samples/snippets/cpp/VS_Snippets_CLR/InstallContext_InstallContext/CPP/installcontext_installcontext.cpp#6)]
 [!code-csharp[InstallContext_InstallContext#6](~/samples/snippets/csharp/VS_Snippets_CLR/InstallContext_InstallContext/CS/installcontext_installcontext.cs#6)]
 [!code-vb[InstallContext_InstallContext#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/InstallContext_InstallContext/VB/installcontext_installcontext.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Specialized.StringDictionary" />
      </Docs>
    </Member>
    <Member MemberName="ParseCommandLine">
      <MemberSignature Language="C#" Value="protected static System.Collections.Specialized.StringDictionary ParseCommandLine (string[] args);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class System.Collections.Specialized.StringDictionary ParseCommandLine(string[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.Install.InstallContext.ParseCommandLine(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function ParseCommandLine (args As String()) As StringDictionary" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static System::Collections::Specialized::StringDictionary ^ ParseCommandLine(cli::array &lt;System::String ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.Install</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.StringDictionary</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="args">Tableau contenant les paramètres de ligne de commande.</param>
        <summary>Analyse les paramètres de ligne de commande dans un dictionnaire de chaînes.</summary>
        <returns>
          <see cref="T:System.Collections.Specialized.StringDictionary" /> contenant les paramètres de ligne de commande analysés.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Configuration.Install.InstallContext.Parameters" />
        <altmember cref="M:System.Configuration.Install.InstallContext.IsParameterTrue(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>