<Type Name="InstancePersistenceCommand" FullName="System.Runtime.DurableInstancing.InstancePersistenceCommand">
  <TypeSignature Language="C#" Value="public abstract class InstancePersistenceCommand" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit InstancePersistenceCommand extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.DurableInstancing.InstancePersistenceCommand" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class InstancePersistenceCommand" />
  <TypeSignature Language="C++ CLI" Value="public ref class InstancePersistenceCommand abstract" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="e8330-101">Classe de base pour toutes les commandes liées à la persistance.</span><span class="sxs-lookup"><span data-stu-id="e8330-101">Base class for all persistence related commands.</span></span> <span data-ttu-id="e8330-102">Vous pouvez distinguer les commandes par leur nom.</span><span class="sxs-lookup"><span data-stu-id="e8330-102">Commands are distinguished by their Name.</span></span> <span data-ttu-id="e8330-103">En général, vous pouvez également distinguer les commandes par leur type dérivé.</span><span class="sxs-lookup"><span data-stu-id="e8330-103">Usually commands can also be distinguished by their derived type.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected InstancePersistenceCommand (System.Xml.Linq.XName name);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Xml.Linq.XName name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstancePersistenceCommand.#ctor(System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (name As XName)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; InstancePersistenceCommand(System::Xml::Linq::XName ^ name);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="e8330-104">XName (combinaison de l'espace de noms et du nom) de la commande.</span><span class="sxs-lookup"><span data-stu-id="e8330-104">The XName (the combination of namespace and name) of the command.</span></span></param>
        <summary><span data-ttu-id="e8330-105">Initialise une instance de la classe <see cref="T:System.Runtime.DurableInstancing.InstancePersistenceCommand" />.</span><span class="sxs-lookup"><span data-stu-id="e8330-105">Initializes an instance of the <see cref="T:System.Runtime.DurableInstancing.InstancePersistenceCommand" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AutomaticallyAcquiringLock">
      <MemberSignature Language="C#" Value="protected internal virtual bool AutomaticallyAcquiringLock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutomaticallyAcquiringLock" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.DurableInstancing.InstancePersistenceCommand.AutomaticallyAcquiringLock" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable ReadOnly Property AutomaticallyAcquiringLock As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual property bool AutomaticallyAcquiringLock { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e8330-106">Indique si la commande peut essayer d'acquérir un verrou sur l'instance.</span><span class="sxs-lookup"><span data-stu-id="e8330-106">Indicates whether the command could attempt to acquire a lock on the instance.</span></span></summary>
        <value>
          <span data-ttu-id="e8330-107"><see langword="true" /> si la commande acquiert un verrou sur l'instance ; sinon <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="e8330-107"><see langword="true" /> if the command acquires a lock on the instance;, otherwise <see langword="false" />.</span></span> <span data-ttu-id="e8330-108">La valeur par défaut est <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="e8330-108">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8330-109">Les classes de commande qui dérivent de cette classe peuvent substituer cette propriété pour la définir à `true`.</span><span class="sxs-lookup"><span data-stu-id="e8330-109">The command classes that derive from this class can override this property to set it to `true`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTransactionEnlistmentOptional">
      <MemberSignature Language="C#" Value="protected internal virtual bool IsTransactionEnlistmentOptional { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTransactionEnlistmentOptional" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.DurableInstancing.InstancePersistenceCommand.IsTransactionEnlistmentOptional" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable ReadOnly Property IsTransactionEnlistmentOptional As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual property bool IsTransactionEnlistmentOptional { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e8330-110">Retourne une valeur qui indique si le fournisseur de persistance peut choisir de ne pas s’inscrire dans la transaction ambiante (Transaction.Currnet) lors de l’exécution de cette commande.</span><span class="sxs-lookup"><span data-stu-id="e8330-110">Returns a value that indicates whether the persistence provider may choose not to enlist in the ambient transaction (Transaction.Currnet) when executing this command.</span></span></summary>
        <value>
          <span data-ttu-id="e8330-111"><see langword="True" /> si l'inscription dans la transaction est facultative pour cette commande ; sinon <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="e8330-111"><see langword="True" /> if enlisting in the transaction is optional for this command, otherwise <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8330-112">Les classes de commande qui dérivent de cette classe peuvent substituer cette propriété pour la définir à `true`.</span><span class="sxs-lookup"><span data-stu-id="e8330-112">The command classes that derive from this class can override this property to set it to `true`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XName Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Linq.XName Name" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.DurableInstancing.InstancePersistenceCommand.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As XName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Linq::XName ^ Name { System::Xml::Linq::XName ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XName</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e8330-113">Obtient le nom de la commande de persistance.</span><span class="sxs-lookup"><span data-stu-id="e8330-113">Gets the name of the persistence command.</span></span></summary>
        <value><span data-ttu-id="e8330-114">XName (combinaison de l'espace de noms et du nom).</span><span class="sxs-lookup"><span data-stu-id="e8330-114">An XName (the combination of namespace and name).</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="protected internal virtual void Validate (System.Runtime.DurableInstancing.InstanceView view);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void Validate(class System.Runtime.DurableInstancing.InstanceView view) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstancePersistenceCommand.Validate(System.Runtime.DurableInstancing.InstanceView)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub Validate (view As InstanceView)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void Validate(System::Runtime::DurableInstancing::InstanceView ^ view);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="view" Type="System.Runtime.DurableInstancing.InstanceView" />
      </Parameters>
      <Docs>
        <param name="view"><span data-ttu-id="e8330-115">Objet <see cref="T:System.Runtime.DurableInstancing.InstanceView" /> représentant l'état actuel du handle d'instance.</span><span class="sxs-lookup"><span data-stu-id="e8330-115">An <see cref="T:System.Runtime.DurableInstancing.InstanceView" /> object representing the current state of the instance handle.</span></span></param>
        <summary><span data-ttu-id="e8330-116">Valide la commande.</span><span class="sxs-lookup"><span data-stu-id="e8330-116">Validates the command.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8330-117">Les commandes remplacent Validate pour vérifier qu'une commande est valide pour être exécutée à l'heure actuelle.</span><span class="sxs-lookup"><span data-stu-id="e8330-117">Commands override Validate to ensure that a command is valid to execute at the current time.</span></span> <span data-ttu-id="e8330-118">Les implémentations doivent lever InvalidOperationException si la commande n'est pas valide pour être exécutée sur l'InstanceView passé comme paramètre.</span><span class="sxs-lookup"><span data-stu-id="e8330-118">Implementations should throw an InvalidOperationException if the command is not valid to execute against the InstanceView passed as a parameter.</span></span>  <span data-ttu-id="e8330-119">La méthode Validate est appelée par InstanceStore avant que la commande ne soit passée à InstanceStore.TryCommand.</span><span class="sxs-lookup"><span data-stu-id="e8330-119">The Validate method is called by InstanceStore before the command is passed to InstanceStore.TryCommand.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>