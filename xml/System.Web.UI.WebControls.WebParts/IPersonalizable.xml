<Type Name="IPersonalizable" FullName="System.Web.UI.WebControls.WebParts.IPersonalizable">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9c234e1e63b44473d91af87545b888d2b3930a23" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30590043" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IPersonalizable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IPersonalizable" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.IPersonalizable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IPersonalizable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IPersonalizable" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Définit des fonctions de gestion supplémentaires pour l'application et l'extraction de l'état de personnalisation.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Outre l’utilisation de la `Personalizable` attribut sur les propriétés de contrôle, un contrôle peut également implémenter <xref:System.Web.UI.WebControls.WebParts.IPersonalizable> pour les fonctions de gestion supplémentaires pour l’application et l’extraction de l’état de personnalisation. Par exemple, les contrôles qui ont besoin de gérer les informations d’état privées doivent implémenter cette interface. Les contrôles qui accèdent aux données personnalisées par le biais des mécanismes complexes, tels que des solutions de cache personnalisées, la persistance des données pour les grands systèmes ou les services Web XML, doivent également implémenter cette interface.  
  
> [!IMPORTANT]
>  Vous ne devez pas ajouter de types basés sur les classes définies dans le répertoire App_Code et puis varient selon le mécanisme de sérialisation binaire par défaut. Artefacts basés sur App_Code ne sont pas toujours binaire sérialisable le fait qu’ils peuvent avoir leurs noms de l’assembly modifiés à des points aléatoires dans le temps.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Web.UI.WebControls.WebParts.IPersonalizable> interface. L’exemple se compose d’une page .aspx qui référence un contrôle WebPart nommé `UrlListWebPart`. Le code suivant est le fichier .aspx de l’exemple.  
  
 [!code-aspx-csharp[WebParts_IPersonalizable_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/CS/IPersonalizableCS.aspx#1)]
 [!code-aspx-vb[WebParts_IPersonalizable_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/VB/IPersonalizableVB.aspx#1)]  
  
 Le code suivant est la source personnalisée du <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôle. Ce fichier doit être placé dans le répertoire App_Code.  
  
 [!code-csharp[WebParts_IPersonalizable_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/CS/urllistwebpart.cs#2)]
 [!code-vb[WebParts_IPersonalizable_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/VB/urllistwebpart.vb#2)]  
  
 Charger la page dans un navigateur. Tapez un nom pour représenter une URL, puis ajoutez un URL réelle qui commence avec `http://`, puis cliquez sur le **ajouter** pour ajouter l’URL.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="IsDirty">
      <MemberSignature Language="C#" Value="public bool IsDirty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDirty" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDirty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDirty { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur indiquant si les données personnalisées gérées par un contrôle ont été modifiées.</summary>
        <value>
          <see langword="true" /> si les données personnalisées gérées avec l'interface <see cref="T:System.Web.UI.WebControls.WebParts.IPersonalizable" /> ont été modifiées ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsque les données gérées par un contrôle a changé, le contrôle est considéré comme « modifié ». Un contrôle doit retourner `true` si les données personnalisées qu’il gère via le <xref:System.Web.UI.WebControls.WebParts.IPersonalizable> interface a changé. Si un contrôle retourne `true` à partir de cette propriété, le contrôle <xref:System.Web.UI.WebControls.WebParts.IPersonalizable.Save%2A> implémentation de méthode d’interface est appelée pendant l’extraction de valeur de propriété.  
  
> [!NOTE]
>  Cette propriété est activée automatiquement par l’infrastructure de personnalisation pendant les dernières phases du traitement d’une demande POST. Toutefois, pour les demandes GET, la valeur retournée par la <xref:System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty%2A> propriété n’est pas vérifiée. Un autre événement doit avoir provoqué le contrôle soit considérée comme « modifiées » pour un état du contrôle--pas uniquement les données gérées par <xref:System.Web.UI.WebControls.WebParts.IPersonalizable>--doit être enregistré. Si un contrôle peut se marquer comme « dirty » pendant une demande GET, ou si l’infrastructure de personnalisation sous certaines conditions de limites très spécifiques considère comme un contrôle « modifiées » pendant une demande GET, puis <xref:System.Web.UI.WebControls.WebParts.IPersonalizable.Save%2A> est toujours appelée.  
  
 Un contrôle peut référencer qui lui est associée <xref:System.Web.UI.WebControls.WebParts.WebPartManager> contrôler et de vérifier le <xref:System.Web.UI.WebControls.WebParts.WebPartPersonalization.Scope%2A> propriété pour déterminer la portée actuelle. L’état « modifié » de données personnalisé d’un contrôle doit être adapté à la portée actuelle.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’utilisation de la <xref:System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty%2A> propriété. La première partie de l’exemple est la page Web qui héberge un <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôle.  
  
 [!code-aspx-csharp[WebParts_IPersonalizable_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/CS/IPersonalizableCS.aspx#1)]
 [!code-aspx-vb[WebParts_IPersonalizable_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/VB/IPersonalizableVB.aspx#1)]  
  
 La deuxième partie de l’exemple est le code personnalisé <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôle appelé `UrlListWebPart`. Ce fichier doit être placé dans le répertoire App_Code pour exécuter l’exemple. Notez que le code source implémente la <xref:System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty%2A> propriété.  
  
 [!code-csharp[WebParts_IPersonalizable_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/CS/urllistwebpart.cs#2)]
 [!code-vb[WebParts_IPersonalizable_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/VB/urllistwebpart.vb#2)]  
  
 Charger la page dans un navigateur. Tapez un nom pour représenter une URL, puis ajoutez un URL réelle qui commence avec `http://`, puis cliquez sur le **ajouter** pour ajouter l’URL.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Web.UI.WebControls.WebParts.PersonalizationDictionary state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Load(class System.Web.UI.WebControls.WebParts.PersonalizationDictionary state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.IPersonalizable.Load(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (state As PersonalizationDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Web::UI::WebControls::WebParts::PersonalizationDictionary ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Web.UI.WebControls.WebParts.PersonalizationDictionary" />
      </Parameters>
      <Docs>
        <param name="state">
          <see cref="T:System.Web.UI.WebControls.WebParts.PersonalizationDictionary" /> contenant des données à portée personnalisée qui ont été chargées à partir du magasin de données sous-jacent.</param>
        <summary>Charge des données personnalisées dans un contrôle.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode est appelée sur un contrôle pour lui permettre de charger des données personnalisées en lui-même. Elle peut également retourner une valeur qui indique si un état d’un contrôle personnalisé devant être réécrites dans le magasin de données sous-jacent, indépendamment de si toutes les autres données de personnalisation sur la page a été modifiée. Un contrôle peut définir ses propres propriétés personnalisées et exécuter une logique supplémentaire interne basée sur les valeurs contenues dans le dictionnaire de personnalisation. Cette méthode est appelée par le contrôle WebPart défini lors de l’application des données de personnalisation à un contrôle.  
  
 Vous devez également connaître le comportement de fusion de <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.User>-par rapport <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.Shared>-étendue de propriétés contenues dans le <xref:System.Web.UI.WebControls.WebParts.PersonalizationDictionary> objet. Le `state` paramètre contient une représentation fusionnée des données personnalisées qui a été chargées à partir du magasin de données sous-jacent. Dans <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.Shared> étendue, toutes les valeurs qui ont été précédemment ajoutés lors de la page elle-même dans <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.Shared> étendue serait disponible. Dans <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.User> étendue, si une valeur associée <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.User> portée de personnalisation avait une valeur ajoutée lorsque la page était dans <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.Shared> étendue et une valeur différente lorsque la page était dans <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.User> étendue, puis est de l’infrastructure de personnalisation inclure uniquement le <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.User>-valeur d’une étendue (par opposition à la <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.Shared> valeur de portée) dans le `state` paramètre.  
  
   
  
## Examples  
 L’exemple de code suivant illustre une implémentation de la <xref:System.Web.UI.WebControls.WebParts.IPersonalizable.Load%2A> méthode personnalisé <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôle. Pour obtenir le code complet requis pour exécuter cet exemple, consultez la section exemple de la <xref:System.Web.UI.WebControls.WebParts.IPersonalizable> vue d’ensemble de la classe.  
  
 [!code-csharp[WebParts_IPersonalizable_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/CS/urllistwebpart.cs#2)]
 [!code-vb[WebParts_IPersonalizable_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/VB/urllistwebpart.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (System.Web.UI.WebControls.WebParts.PersonalizationDictionary state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Save(class System.Web.UI.WebControls.WebParts.PersonalizationDictionary state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.IPersonalizable.Save(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Save (state As PersonalizationDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::Web::UI::WebControls::WebParts::PersonalizationDictionary ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Web.UI.WebControls.WebParts.PersonalizationDictionary" />
      </Parameters>
      <Docs>
        <param name="state">
          <see cref="T:System.Web.UI.WebControls.WebParts.PersonalizationDictionary" /> contenant des données à portée personnalisée qui ont été chargées à partir du magasin de données sous-jacent.</param>
        <summary>Enregistre les propriétés personnalisées et les informations d'état interne dans l'objet <see cref="T:System.Web.UI.WebControls.WebParts.PersonalizationDictionary" /> du contrôle.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un contrôle serveur peut stocker ses propres propriétés personnalisées et les informations d’état interne du <xref:System.Web.UI.WebControls.WebParts.PersonalizationDictionary> spécifié dans le `state` paramètre. Les informations sont stockées sous forme d’une série de paires nom/valeur. Il incombe au contrôle d’utiliser les paires nom/valeur qu’il peut reconnaître lors des appels suivants pour le contrôle via le <xref:System.Web.UI.WebControls.WebParts.IPersonalizable.Load%2A> (méthode).  
  
 Un contrôle peut référencer qui lui est associée <xref:System.Web.UI.WebControls.WebParts.WebPartManager> contrôler et vérifier les <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope> objet afin de déterminer la portée actuelle. Informations d’état personnalisées doivent être adaptées à la portée actuelle. Notez que chaque <xref:System.Web.UI.WebControls.WebParts.PersonalizationEntry> valeur qui est ajoutée à la <xref:System.Web.UI.WebControls.WebParts.PersonalizationDictionary> objet doit être associé à la valeur de la portée appropriée, car l’infrastructure de personnalisation dépend de celle-ci lors de la fusion <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.Shared> et <xref:System.Web.UI.WebControls.WebParts.PersonalizationScope.User>-données personnalisées à portée avant de passer à la <xref:System.Web.UI.WebControls.WebParts.IPersonalizable.Load%2A> (méthode).  
  
 Lorsque vous utilisez l’implémentation ASP.NET standard de composants WebPart, les contrôles doivent vérifier que les objets placés dans le dictionnaire d’état peuvent être sérialisés par ASP.NET <xref:System.Web.UI.ObjectStateFormatter> classe. Dans la pratique, cela signifie que les éléments suivants :  
  
-   Les types primitifs .NET Framework, les chaînes et orientée sur la collection de types .NET Framework tels que des tableaux, listes, tables de hachage et les dictionnaires hybrides, sont automatiquement sérialisables.  
  
-   Les types personnalisés qui fournissent leurs propres <xref:System.ComponentModel.TypeConverter> classes capables de sérialiser et désérialiser des chaînes sont considérées comme sérialisables.  
  
-   Les types personnalisés qui peuvent être sérialisés par la <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter> classe sont considérés comme sérialisables.  
  
> [!IMPORTANT]
>  Vous ne devez pas ajouter de types basés sur les classes définies dans le répertoire App_Code et puis varient selon le mécanisme de sérialisation binaire par défaut. Artefacts basés sur App_Code ne sont pas toujours binaire sérialisable le fait qu’ils peuvent avoir leurs noms de l’assembly modifiés à des points aléatoires dans le temps.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’implémentation du <xref:System.Web.UI.WebControls.WebParts.IPersonalizable.Save%2A> méthode personnalisé <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôle. Pour obtenir le code complet requis pour exécuter cet exemple, consultez la section exemple de la <xref:System.Web.UI.WebControls.WebParts.IPersonalizable> vue d’ensemble de la classe.  
  
 [!code-csharp[WebParts_IPersonalizable_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/CS/urllistwebpart.cs#2)]
 [!code-vb[WebParts_IPersonalizable_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_IPersonalizable_Overview/VB/urllistwebpart.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>