<Type Name="ConnectionPoint" FullName="System.Web.UI.WebControls.WebParts.ConnectionPoint">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1c9d88a6c241a950566c01496d5804d56c63813f" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30590823" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class ConnectionPoint" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ConnectionPoint extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ConnectionPoint" />
  <TypeSignature Language="C++ CLI" Value="public ref class ConnectionPoint abstract" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Sert de classe de base pour définir des objets de point de connexion qui permettent au contrôle consommateur et au contrôle fournisseur d'une connexion WebPart de partager des données.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chaque connexion WebPart se compose de deux contrôles serveur qui partage des données : un contrôle est le consommateur, l’autre est le fournisseur. Pour en savoir plus sur les composants essentiels d’une connexion de composants WebPart et l’objet de connexion lui-même, consultez le <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> vue d’ensemble de la classe. Chaque connexion WebPart requiert des points de connexion. Le fournisseur et le contrôle consommateur doivent avoir au moins un défini <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> objet (chacun d'entre eux peut éventuellement avoir plusieurs points de connexion) qui contient les détails de la façon dont un contrôle peut se connecter à un autre contrôle et le type de données qu’il peut partager. Dans une connexion réelle, le fournisseur a son propre type d’objet point de connexion (dérivé de la base de <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> classe), un <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> instance et que le consommateur a son propre objet, une <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> instance.  
  
 Pour créer un point de connexion du fournisseur, les développeurs doivent ajouter une méthode de rappel au fournisseur qui retourne une instance de l’interface implémentée à un consommateur. Ils doivent marquer la méthode de rappel dans le code source avec un `ConnectionProvider` attribut code (consultez la <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> classe). De même, pour créer un point de connexion consommateur, les développeurs doivent ajouter une méthode au consommateur qui reçoit une instance d’interface, et ils doivent marquer cette méthode avec un `ConnectionConsumer` attribut (consultez la <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> classe).  
  
 Lorsque les développeurs créent des connexions sur une page Web, ils peuvent être créés en tant que connexions statiques ou dynamiques. Connexions statiques sont déclarées dans le balisage d’une page Web. Lorsqu’une connexion statique est déclarée, les développeurs peuvent désigner les points de connexion sont utilisées pour le consommateur et le fournisseur en assignant des valeurs à la `ProviderConnectionPointID` et `ConsumerConnectionPointID` attributs au sein de la `<asp:webpartconnection>` balise d’élément. Cette approche est particulièrement utile s’il existe plusieurs points de connexion définies dans les contrôles consommateur et de fournisseur, car elle permet la connexion statique identifier les points de connexion à utiliser pour la connexion.  
  
 Les connexions dynamiques sont créées par programme, par du code du développeur ou par les utilisateurs via l’interface utilisateur (IU) fourni par le <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> contrôle. Pour créer une connexion dans le code, les développeurs doivent obtenir une instance d’un <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> objet en appelant le <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> méthode sur le <xref:System.Web.UI.WebControls.WebParts.WebPartManager> contrôle. Avant d’appeler cette méthode, les développeurs doivent avoir des références pour le consommateur et contrôles de serveur de fournisseur et leurs objets de point de connexion respectifs. Pour obtenir des références aux points de connexion pour un fournisseur et un contrôle consommateur, les développeurs d’abord appellent la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> et <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> méthodes sur le <xref:System.Web.UI.WebControls.WebParts.WebPartManager> contrôle. Ces méthodes retournent des objets point, qui à son tour, peuvent être passés à la méthode de création d’une connexion de la connexion appropriée.  
  
 Lorsque du fournisseur et du consommateur point d’objets de connexion qu'utilisent le même type d’interface, ils sont compatibles et peuvent former une connexion directe pour partager des données. Si elles ne fonctionnent pas avec le même type d’interface, un <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> objet doit être utilisé pour convertir l’instance de l’interface du fournisseur dans un type que le consommateur peut fonctionner avec.  
  
 Le résumé <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> classe fournit les détails de base des points de connexion qui sont partagés par les contrôles consommateur et fournisseur. Plusieurs propriétés contiennent ces détails. Le <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> propriété indique si un point de connexion peut participer à plusieurs connexions à la fois. Par défaut, les points de connexion fournisseur peuvent participer à plusieurs connexions et les points de connexion consommateur ne peut pas. Le <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType%2A> propriété indique le type du contrôle serveur associé à un point de connexion. Notez que non seulement <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôles peuvent établir des connexions ; n’importe quel contrôle serveur, un contrôle ASP.NET, un contrôle personnalisé ou un contrôle utilisateur, peut être activé pour participer aux connexions si placé dans un <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zone. Le <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> propriété fournit un nom convivial pour le point de connexion qui peut être affiché dans l’interface utilisateur pour aider les utilisateurs qui créent des connexions. Le <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> propriété sert d’identificateur de chaîne pour l’objet de point de connexion lui-même. Le <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> propriété indique le point de connexion de quel type d’instance d’interface comprend. Si un point de connexion donné fournit ou consomme, une instance de cette interface est déterminée par le fait qu’il est un <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> ou un <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objet.  
  
 La <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> classe dispose d’une méthode. Le <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled%2A> méthode retourne une valeur booléenne qui indique si un point de connexion est actuellement en mesure de participer aux connexions.  
  
 Le <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> classe a également un champ public, <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>. Ce champ contient une valeur utilisée pour identifier le point de connexion par défaut dans une connexion.  
  
> [!NOTE]
>  Les attributs pour la spécification du point de connexion de méthodes n'avoir qu’un seul paramètre obligatoire, `displayName`, il est possible de créer l’attribut de point de connexion par défaut sans spécifier un ID. Dans ce cas, le <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> champ fournit une valeur de base à utiliser.  
  
   
  
## Examples  
 L’exemple de code suivant illustre la création d’une connexion WebPart qui inclut le texte requis <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> objets. Étant donné que la <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> classe est une classe de base abstraite, les instances de ses classes enfants--<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> et <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>--correspondent aux objets réels utilisés pour former une connexion.  
  
 L’exemple de quatre parties :  
  
-   Mode d’affichage dans une page d’un contrôle utilisateur qui permet de modifier les composants WebPart.  
  
-   Code source pour une interface et deux <xref:System.Web.UI.WebControls.WebParts.WebPart> agissant en tant que le fournisseur et le consommateur d’une connexion de contrôle.  
  
-   Une page Web pour héberger tous les contrôles et exécuter l’exemple de code.  
  
-   Explication de l’exécution de l’exemple de page.  
  
 La première partie de cet exemple de code est le contrôle utilisateur qui permet aux utilisateurs de modifier les modes d’affichage sur une page Web. Enregistrer le code source suivant dans un fichier .ascx, en lui attribuant le nom de fichier qui est affecté à la `Src` attribut de la `Register` directive pour ce contrôle utilisateur, qui est en haut de la page Web d’hébergement. Pour plus d’informations sur les modes d’affichage et une description du code source dans ce contrôle, consultez [procédure pas à pas : modification des Modes d’affichage sur une Page WebPart](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/DisplayModeMenuVB.ascx#6)]  
  
 La deuxième partie de l’exemple de code est le code source pour les contrôles et l’interface. Le fichier source contient une interface simple nommée `IZipCode`. Il existe également un <xref:System.Web.UI.WebControls.WebParts.WebPart> classe nommée `ZipCodeWebPart` qui implémente l’interface et agit comme le contrôle de fournisseur. Son `ProvideIZipCode` méthode est la méthode de rappel qui implémente le membre d’interface. La méthode retourne simplement une instance de l’interface. Notez que la méthode est marquée avec un `ConnectionProvider` attribut dans ses métadonnées. Il s’agit du mécanisme d’identification de la méthode comme méthode de rappel pour le point de connexion fournisseur. L’autre <xref:System.Web.UI.WebControls.WebParts.WebPart> classe est nommée `WeatherWebPart`, et agit comme le consommateur de la connexion. Cette classe a une méthode nommée `GetZipCode` qui obtient une instance de la `IZipCode` interface à partir du contrôle de fournisseur. Notez que cette méthode est marquée comme méthode de point de connexion du consommateur avec un `ConnectionConsumer` attribut dans ses métadonnées. Il s’agit du mécanisme d’identification de la méthode de point de connexion dans le contrôle consommateur.  
  
 Pour l’exemple de code à exécuter, vous devez compiler ce code source. Vous pouvez compiler explicitement et placer l’assembly résultant dans le dossier Bin de votre site Web ou le global assembly cache. Vous pouvez également mettre le code source dans le dossier App_Code de votre site, où il sera compilé dynamiquement au moment de l’exécution. Cet exemple de code utilise la compilation dynamique. Pour une procédure pas à pas qui montre comment compiler, consultez [procédure pas à pas : développement et à l’aide d’un contrôle de serveur Web personnalisé](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/ZipCodeComponent.vb#2)]  
  
 La troisième partie de l’exemple de code est la page Web. Dans la partie supérieure sont `Register` directives pour enregistrer les contrôles personnalisés qui forment la connexion et le contrôle utilisateur qui permet aux utilisateurs de modifier les modes d’affichage sur la page. La connexion elle-même est créée de manière déclarative dans le `<staticconnections>` élément sur la page. Vous pouvez également créer la connexion par programme. le code qui est contenu dans le `Button1_Click` (méthode). Si la connexion est créée de manière déclarative ou par programme, les points de connexion doivent toujours être spécifiés pour le fournisseur et le consommateur. Le `Button2_Click` accède à la méthode le <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> les objets par le fournisseur et le consommateur et écrit certaines de leurs valeurs de propriété sur une étiquette dans la page.  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 Après le chargement de la page dans un navigateur, cliquez sur le **détails du Point de connexion** bouton. Plus d’informations sur les points de connexion fournisseur et de consommateur établis dans la connexion déclarative s’affiche. Ensuite, utilisez le **Mode d’affichage** contrôle de liste déroulante pour basculer la page en mode connexion. Dans le menu de verbes de l’un de le <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôles (représentés par une flèche vers le bas dans la barre de titre), cliquez sur le verbe connect. La connexion de l’interface utilisateur s’affiche, créé automatiquement par le `<asp:connectionszone>` contrôle déclaré dans la page. Cliquez sur le **déconnexion** bouton pour terminer la connexion existante. Utilisez le **Mode d’affichage** contrôle pour retourner la page en mode de navigation. Ensuite, cliquez sur le **connexion dynamique** bouton permettant de créer une connexion par programme. Cliquez sur le **détails du Point de connexion** bouton là encore, pour indiquer les détails sur les objets de point de connexion de deux.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />
  </Docs>
  <Members>
    <Member MemberName="AllowsMultipleConnections">
      <MemberSignature Language="C#" Value="public bool AllowsMultipleConnections { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowsMultipleConnections" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AllowsMultipleConnections As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowsMultipleConnections { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui indique si un point de connexion prend en charge plusieurs connexions simultanées.</summary>
        <value>
          <see langword="true" /> si le point de connexion prend en charge plusieurs connexions ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> objets ont leur <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> valeur de propriété `true` (par la <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> classe), car le contrôle WebPart défini par défaut permet aux points de connexion de fournisseur d’établir des connexions à plusieurs consommateurs.  
  
 En revanche, <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objets ont leur <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> valeur de propriété `false` (par la <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> classe), car le contrôle WebPart défini par défaut permet de connexion consommateur points pour établir une connexion à un seul fournisseur à un heure.  
  
 Vous pouvez modifier le comportement par défaut plusieurs connexions en assignant des valeurs différentes pour le <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute.AllowsMultipleConnections%2A?displayProperty=nameWithType> propriété (pour les fournisseurs) ou le <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute.AllowsMultipleConnections%2A?displayProperty=nameWithType> propriété (pour les consommateurs) sur les deux <xref:System.Attribute> classes utilisées pour les attributs de connexion. Si vous activez les points de connexion consommateur pour se connecter à plusieurs fournisseurs en même temps, votre code doit gérer les problèmes résultant de la synchronisation.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’utilisation de la <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> propriété sur les deux <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> et <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objets. Cet exemple de code montre uniquement la page Web qui contient le code pour accéder à la propriété ; Pour obtenir le code complet requis pour exécuter l’exemple, consultez la section exemple de la <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> vue d’ensemble de la classe.  
  
 Le code dans le `Button2_Click` méthode de la page Web accède à la <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> objets de propriété sur chaque point de connexion et écrit chaque valeur sur une étiquette. Exécutez le code en cliquant sur le **détails du Point de connexion** bouton une fois que la page est chargée dans un navigateur.  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute" />
      </Docs>
    </Member>
    <Member MemberName="ControlType">
      <MemberSignature Language="C#" Value="public Type ControlType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ControlType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ControlType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ ControlType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le <see cref="T:System.Type" /> du contrôle serveur associé à un point de connexion.</summary>
        <value>
          <see cref="T:System.Type" /> représentant le type de contrôle.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La valeur de la <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType%2A> propriété est souvent la <xref:System.Web.UI.WebControls.WebParts.WebPart> type. Toutefois, étant donné que n’importe quel type de contrôle utilisateur ou serveur peut participer aux connexions s’il est correctement activé et placé dans un <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zone, le <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType%2A> propriété peut retourner un de ces autres types de contrôle serveur.  
  
 Lorsque les contrôles serveur qui ne sont pas <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôles sont placés dans un <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zone, ils sont encapsulés dans un <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> objet au moment de l’exécution afin de fonctionner en tant que <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôle et de participer aux connexions. Mais lorsque ces contrôles sont impliqués dans les connexions, les <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType%2A> ne retourne pas de valeur de la propriété le <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> tapez ; elle retourne le type de la <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> contrôle enfant de l’objet, qui est le type du contrôle serveur ou utilisateur.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’utilisation de la <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType%2A> propriété sur les deux <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> et <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objets. Cet exemple de code montre uniquement la page Web qui contient le code pour accéder à la propriété ; Pour obtenir le code complet requis pour exécuter l’exemple, consultez la section exemple de la <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> vue d’ensemble de la classe.  
  
 Le code dans le `Button2_Click` méthode de la page Web accède à la <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType%2A> objets de propriété sur chaque point de connexion et écrit chaque valeur sur une étiquette. Exécutez le code en cliquant sur le **détails du Point de connexion** bouton une fois que la page est chargée dans un navigateur.  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Type" />
      </Docs>
    </Member>
    <Member MemberName="DefaultID">
      <MemberSignature Language="C#" Value="public static readonly string DefaultID;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly string DefaultID" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DefaultID As String " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::String ^ DefaultID;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Représente une chaîne utilisée pour identifier le point de connexion par défaut dans une collection de points de connexion associée à un contrôle serveur.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsqu’un point de connexion est créé, il est possible de spécifier un ID pour le point de connexion dans le code source d’un consommateur ou d’un fournisseur <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôler, à l’aide un <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> ou un <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> attribut. Toutefois, lorsqu’un attribut est ajouté à un point de connexion dans le code source, le `ID` paramètre est facultatif. Si l’ID n’est pas spécifié dans l’attribut, le <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> champ fournit une chaîne qui est utilisée pour identifier le point de connexion par défaut.  
  
 Si plusieurs points de connexion sont définis dans un contrôle consommateur ou fournisseur, il est nécessaire de spécifier un ID pour chaque point de connexion, afin que les points de connexion peuvent être distingués lors de la création de connexions.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute" />
      </Docs>
    </Member>
    <Member MemberName="DisplayName">
      <MemberSignature Language="C#" Value="public string DisplayName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DisplayName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DisplayName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une chaîne qui sert de nom complet convivial pour représenter un point de connexion dans l'interface utilisateur.</summary>
        <value>Chaîne qui contient un nom complet convivial pour un objet <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionPoint" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour créer une connexion de composants WebPart, les contrôles de fournisseur et le consommateur de la connexion doivent spécifier individuellement au moins un point de connexion, une méthode qui leur permet de communiquer et de partager des données. Pour identifier ces méthodes de point de connexion, un développeur spécifie un attribut sur les méthodes sélectionnées. Dans le fournisseur, un `ConnectionProvider` attribut est défini sur la méthode de rappel sélectionné et dans le consommateur, un `ConnectionConsumer` attribut est défini sur la méthode qui reçoit une instance d’une interface qui contient des données à partir du fournisseur. Pour ces deux attributs, le seul paramètre qui est toujours requis, quelle que soit la surcharge déclarée pour créer l’attribut, est le `displayName` paramètre. Le développeur doit assigner une chaîne à utiliser comme nom complet convivial pour le point de connexion et cette chaîne devient la valeur de la <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> propriété.  
  
 Le <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> valeur de propriété est affichée dans l’interface utilisateur d’une page Web lorsque les utilisateurs créent des connexions. Par exemple, lorsque la <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> contrôle est ajouté à la page, il crée une interface utilisateur pour créer des connexions entre les contrôles. Une fois un utilisateur bascule une page en mode d’affichage et clique sur un verbe connect sur un <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôler, la connexion de l’interface utilisateur s’affiche. Chaque contrôle qui peut participer à une connexion est répertorié dans l’interface utilisateur et en regard de chaque contrôle est un contrôle de liste déroulante qui affiche les noms conviviaux de ses points de connexion disponibles. Les utilisateurs doivent sélectionner au moins un point de connexion pour établir une connexion. Les valeurs qui s’affichent dans la liste des points de connexion sont obtenues à partir de la <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> propriété. Si les développeurs génèrent une interface utilisateur personnalisée pour créer des connexions, ils peuvent utiliser le <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> propriété de la même façon à fournir un nom convivial qui représente un point de connexion.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetEnabled">
      <MemberSignature Language="C#" Value="public virtual bool GetEnabled (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetEnabled(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool GetEnabled(System::Web::UI::Control ^ control);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">Contrôle <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> ou autre contrôle serveur associé à un point de connexion.</param>
        <summary>Retourne une valeur qui indique si un point de connexion peut participer aux connexions.</summary>
        <returns>
          <see langword="true" /> si le contrôle peut créer un point de connexion pour participer à une connexion ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled%2A> méthode dans la base de <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> classe toujours retourne `true`, mais les classes dérivées peuvent substituer la méthode pour retourner `true` ou `false` à des moments différents, selon l’état de `control`.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’utilisation de la <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled%2A> méthode sur les deux <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> et <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objets. Cet exemple de code montre uniquement la page Web qui contient le code pour accéder à la propriété ; Pour obtenir le code complet requis pour exécuter l’exemple, consultez la section exemple de la <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> vue d’ensemble de la classe.  
  
 Le code dans le `Button2_Click` méthode de la page Web accède à la <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled%2A> méthode sur chaque point de connexion des objets et écrit chaque valeur sur une étiquette. Exécutez le code en cliquant sur le **détails du Point de connexion** bouton une fois que la page est chargée dans un navigateur.  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ID">
      <MemberSignature Language="C#" Value="public string ID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ID { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une chaîne qui contient l'identificateur pour un point de connexion.</summary>
        <value>Chaîne qui contient l'identificateur pour un point de connexion.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsqu’un développeur déclare un <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> ou un <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> attribut sur une méthode dans le code source d’un contrôle, afin que la méthode peut être utilisée comme point de connexion, il n'est pas nécessaire de déclarer le `ID` paramètre pour l’attribut de point de connexion. Le seul attribut requis est le `displayName` paramètre. Un ID par défaut est attribué au point de connexion, à l’aide de la valeur à partir du <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> champ.  
  
 S’il existe une seule méthode dans un contrôle qui est utilisé comme point de connexion, il est inutile de spécifier un ID pour le point de connexion. S’il existe plusieurs méthodes spécifiés en tant que points de connexion, vous devez spécifier un ID pour chacun d’eux ; Sinon, une exception sera levée. En assignant un ID à chaque point de connexion, vous rendent possible de spécifier le point de connexion à utiliser pour déclarer des connexions dans les pages Web ou de les créer dans le code.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’utilisation de la <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> propriété sur les deux <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> et <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objets. Cet exemple de code montre uniquement la page Web qui contient le code pour accéder à la propriété ; Pour obtenir le code complet requis pour exécuter l’exemple, consultez la section exemple de la <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> vue d’ensemble de la classe.  
  
 Le code dans le `Button2_Click` méthode de la page Web accède à la <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> objets de propriété sur chaque point de connexion et écrit chaque valeur sur une étiquette. Exécutez le code en cliquant sur le **détails du Point de connexion** bouton une fois que la page est chargée dans un navigateur.  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID" />
      </Docs>
    </Member>
    <Member MemberName="InterfaceType">
      <MemberSignature Language="C#" Value="public Type InterfaceType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type InterfaceType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InterfaceType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ InterfaceType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le type de l'interface utilisée par un point de connexion.</summary>
        <value>
          <see cref="T:System.Type" /> qui correspond au type d'interface fourni ou consommé par un contrôle.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> propriété indique le type d’interface un point de connexion. Cela peut aider à déterminer si deux contrôles sont compatibles et en mesure d’établir une connexion. Si le point de connexion fournisseur <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> diffère de celui du point de connexion consommateur <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>, puis les deux contrôles ne sont pas compatibles (ce qui signifie qu’ils ne peuvent pas être connectés directement sans utiliser de transformateur) et un <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> doit l’objet être utilisé pour établir une connexion.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’utilisation de la <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> propriété sur les deux <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> et <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objets. Cet exemple de code montre uniquement la page Web qui contient le code pour accéder à la propriété ; Pour obtenir le code complet requis pour exécuter l’exemple, consultez la section exemple de la <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> vue d’ensemble de la classe.  
  
 Le code dans le `Button2_Click` méthode de la page Web accède à la <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> objets de propriété sur chaque point de connexion et écrit chaque valeur sur une étiquette. Exécutez le code en cliquant sur le **détails du Point de connexion** bouton une fois que la page est chargée dans un navigateur.  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Type" />
      </Docs>
    </Member>
  </Members>
</Type>