<Type Name="ImportCatalogPart" FullName="System.Web.UI.WebControls.WebParts.ImportCatalogPart">
  <Metadata><Meta Name="ms.openlocfilehash" Value="138ffda1aa735e92748c86113cfcda75fc5b451d" /><Meta Name="ms.sourcegitcommit" Value="2dd0eede6edd6dd3d2aa8f79010848658b967609" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="04/18/2019" /><Meta Name="ms.locfileid" Value="59353055" /></Metadata><TypeSignature Language="C#" Value="public sealed class ImportCatalogPart : System.Web.UI.WebControls.WebParts.CatalogPart" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ImportCatalogPart extends System.Web.UI.WebControls.WebParts.CatalogPart" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.ImportCatalogPart" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ImportCatalogPart&#xA;Inherits CatalogPart" />
  <TypeSignature Language="C++ CLI" Value="public ref class ImportCatalogPart sealed : System::Web::UI::WebControls::WebParts::CatalogPart" />
  <TypeSignature Language="F#" Value="type ImportCatalogPart = class&#xA;    inherit CatalogPart" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.WebParts.CatalogPart</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Importe un fichier de description pour un contrôle <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> (ou un autre contrôle serveur ASP.NET utilisé comme contrôle <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" />), afin que les utilisateurs puissent ajouter le contrôle à une page Web avec des paramètres prédéfinis. Cette classe ne peut pas être héritée.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> contrôle permet aux utilisateurs d’importer un fichier de description qui décrit les paramètres d’un <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôle ou contrôle serveur qu’un utilisateur souhaite ajouter à un <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zone.  
  
 Lorsqu’un utilisateur importe un fichier de description, le <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôle référencé dans le fichier apparaît dans le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> contrôle et qu’un utilisateur peuvent ajouter le contrôle à la page.  
  
 Le fichier de description n’est pas le même que le contrôle lui-même. C’est un fichier XML qui se termine par un. Extension du composant WebPart et contient des paires nom/valeur--principalement des valeurs de propriété--qui décrivent l’état du contrôle. Le fichier de description est créé en fonction d’un format XML spécifié, comme décrit dans la rubrique [fichiers de Description de contrôle WebPart](https://msdn.microsoft.com/library/480992e4-8fc7-43f8-bffc-ae97bbdfe5b8).  
  
 Comme pour le contrôle du fichier de description fait référence à, il peut être compilé dans un assembly, ou il peut être un contrôle utilisateur défini dans un fichier .ascx. Dans les deux cas, le contrôle référencé dans un fichier de description importé doit exister sur le serveur Web qui héberge la page qui essaie d’importer le contrôle. Le fichier de description fait référence le contrôle nom et l’assembly (ou fichier) qui contient le contrôle, et le fichier de description contient les paramètres qui affectent des valeurs de propriété, l’apparence et le comportement du contrôle.  
  
 Le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> contrôle permet aux utilisateurs de partager des paramètres sur les contrôles. Un contrôle complex peut avoir plusieurs propriétés et paramètres. Par exemple, dans un site intranet classique d’une grande entreprise, personnalisé <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôle peut contenir un nombre de propriétés qui contiennent des valeurs spécifiques à l’environnement des utilisateurs, telles que leurs connexions de base de données, informations de services et ainsi de suite. Le contrôle peut également contenir un nombre de propriétés qui affectent son apparence. Un utilisateur peut personnaliser le contrôle sur un site particulier et que cela fonctionne correctement, exporter un fichier de description pour le contrôle, puis partager le fichier de description avec d’autres utilisateurs, ce qui peuvent importer le fichier pour ajouter le contrôle entièrement configuré à l’autre intranet sites qu’ils sont autorisés à personnaliser. Tant que l’assembly compilé ou le fichier de contrôle utilisateur qui contient le contrôle existe sur le serveur Web qui héberge leur site, les utilisateurs peuvent ajouter le contrôle vers d’autres sites Web.  
  
 Le mécanisme par lequel les utilisateurs importer un fichier de description (et donc son contrôle serveur associé) dans une page Web est le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> contrôle qu’un développeur de pages doit ajouter à une page Web. Lorsqu’un utilisateur bascule la page en mode d’affichage, la <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> contrôle s’affiche et l’utilisateur peut utilisateur ce contrôle pour accéder à la. Fichier de description du composant WebPart correspondant au contrôle serveur qu’il souhaite importer. L’interface utilisateur et les instructions fournies par le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> contrôle, un utilisateur est en mesure d’ajouter le contrôle de serveur de votre choix dans la page Web, avec son apparence et les propriétés configurées comme spécifié dans le fichier de description importé.  
  
 Avant une <xref:System.Web.UI.WebControls.WebParts.WebPart> fichier de description du contrôle peut être importé, un utilisateur doit d’abord créer (exporter) le fichier basé sur un existant <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôle. Un fichier de description peut être exporté pour un contrôle si les conditions suivantes sont remplies :  
  
-   Le contrôle a les propriétés marquées avec le `Personalizable` attribut.  
  
-   Le fichier Web.config a la `enableExport` valeur la valeur de l’attribut `true` sur la `<webParts>` élément.  
  
-   Un développeur définit la valeur de la <xref:System.Web.UI.WebControls.WebParts.WebPart.ExportMode%2A> propriété sur le contrôle à une valeur autre que la valeur par défaut <xref:System.Web.UI.WebControls.WebParts.WebPartExportMode.None>, qui interdit l’exportation. Si le <xref:System.Web.UI.WebControls.WebParts.WebPart.ExportMode%2A> propriété a la valeur <xref:System.Web.UI.WebControls.WebParts.WebPartExportMode.NonSensitiveData>, n’importe quelle propriété qui contient un <xref:System.Web.UI.WebControls.WebParts.PersonalizableAttribute.IsSensitive%2A> paramètre avec un `Personalizable` attribut n’est pas exporté lorsqu’un utilisateur exporte un fichier de description. Ainsi, les développeurs de contrôles empêcher que des données sensibles, telles que des chaînes de connexion, en cours d’exportation dans certaines situations.  
  
 Un utilisateur peut exporter un contrôle qui a été activé pour l’exportation en cliquant sur le verbe d’exportation qui s’affiche dans le menu d’actions verbales du contrôle et en suivant les instructions pour enregistrer un. Fichier de description de composant WebPart pour le contrôle. Les autres utilisateurs peuvent ensuite importer ce fichier pour configurer leurs propres instances du contrôle.  
  
 Le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> classe contient plusieurs propriétés. Le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.BrowseHelpText%2A> propriété contient du texte avec des instructions aux utilisateurs qui naviguent dans pour localiser le fichier de description. Le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportedPartLabelText%2A> propriété contient le texte qui sert d’étiquette pour le contrôle importé tel qu’il apparaît dans le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> contrôle. Le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.PartImportErrorLabelText%2A> contient du texte qui s’affiche si une erreur se produit lors de la description d’un contrôle est en cours d’importation. Le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.Title%2A> propriété remplace la propriété de base pour assigner un titre par défaut pour un <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> contrôler si le développeur n’attribue pas d’un titre. Le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText%2A> propriété contient le texte de bouton sur lequel l’utilisateur clique pour télécharger le fichier de description, et le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText%2A> propriété contient des instructions pour le processus de téléchargement.  
  
 Le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> classe contient également plusieurs méthodes uniques. Le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions%2A> méthode récupère un <xref:System.Web.UI.WebControls.WebParts.WebPartDescription> pour chaque objet <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôle dans le catalogue, ce qui permet une <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> contrôle pour afficher des informations sur chaque contrôle serveur sans avoir à créer une instance de celle-ci. Le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart%2A> méthode obtient une instance d’un particulier <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôle, en fonction de la description passée à la méthode.  
  
 Il existe certains risques inhérents associés à l’aide de la <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> contrôle. Par exemple, la possibilité d’importer des données malveillantes dans votre application Web via les fichiers de description utilisés pour l’importation. Si quelqu'un a placé le code de script malveillant en tant que la valeur d’une propriété de chaîne dans le fichier de description, ce script pourrait potentiellement exécuté lorsqu’un utilisateur importe le fichier de description et ajoute le contrôle serveur référencé à une page Web. Pour réduire le risque d’importation de fichiers de description avec des données malveillantes, les contrôles serveur qui ont des propriétés de type chaîne doivent toujours encoder les données de propriété. Un autre risque implique l’importation de types dans les fichiers de description (consultez [fichiers de Description de contrôle WebPart](https://msdn.microsoft.com/library/480992e4-8fc7-43f8-bffc-ae97bbdfe5b8)). Un utilisateur malveillant pourrait envoyer des demandes pour charger plusieurs assemblys dans le <xref:System.AppDomain>, se traduisant par une quantité excessive de mémoire consommée.  
  
 Pour éviter les risques liés à l’importation, vous pouvez désactiver entièrement la fonctionnalité en n’utilisant ne pas la fonctionnalité d’importation ou la <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> contrôle. Ou vous pouvez limiter ce que les utilisateurs ont accès au contrôle. Vous pouvez procéder par programme, à l’aide de la gestion des rôles (consultez [la gestion des rôles d’autorisation à l’aide de](https://msdn.microsoft.com/library/01954ce4-39a2-487f-8153-a69f6f6f3195)). Par exemple, lorsque la page se charge, vous pouvez tester pour voir si un utilisateur est dans un certain rôle, tels que le rôle d’administrateur. Si l’utilisateur est dans le rôle, vous pouvez ajouter par programmation la <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> contrôle à la page pour cet utilisateur. Vous pouvez également utiliser une approche déclarative pour limiter l’ensemble d’utilisateurs qui peuvent utiliser le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> contrôle.  Au sein de votre page web qui contient un catalogue, vous pourriez placer deux <xref:System.Web.UI.WebControls.WebParts.CatalogZone> contrôles : un pour les utilisateurs autorisés à importer et l’autre pour ceux qui ne peuvent pas. La zone des utilisateurs autorisés à importer contiendrait la <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> contrôle. La zone elle-même peut être placée à l’intérieur d’un <xref:System.Web.UI.WebControls.LoginView> contrôle, ce qui vous permet de limiter l’utilisation du contrôle dans la zone pour uniquement les utilisateurs authentifiés ou aux rôles que vous spécifiez.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> contrôler de façon déclarative et par programme sur une page Web. L’exemple comprend quatre parties :  
  
-   Un contrôle utilisateur qui permet de modifier les modes d’affichage sur une page WebPart.  
  
-   Une page Web qui contient un <xref:System.Web.UI.WebControls.WebParts.CatalogZone> contrôle et un <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> contrôle.  
  
-   Un fichier de code source qui contient deux personnalisé <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôles.  
  
-   Explication du fonctionne de l’exemple lorsque vous chargez la page dans un navigateur.  
  
 La première partie de cet exemple de code est le contrôle utilisateur qui permet aux utilisateurs de modifier les modes d’affichage sur une page Web. Vous devez placer le code source suivant dans un fichier et nommez-le Displaymodemenucs.ascx ou Displaymodemenuvb.ascx (selon la langue que vous utilisez). Pour plus d’informations sur les modes d’affichage et une description du code source dans ce contrôle, consultez [procédure pas à pas : Page de parties de modification des Modes d’affichage sur un serveur Web](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_ImportCatalogPart_Overview#7](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/CS/DisplayModeMenuCS.ascx#7)]
 [!code-aspx-vb[WebParts_ImportCatalogPart_Overview#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/VB/DisplayModeMenuVB.ascx#7)]  
  
 La deuxième partie de l’exemple de code est la page Web. En haut de la page sont deux `register` directives, un pour le contrôle utilisateur et un pour le composant compilé qui contient deux personnalisé <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôles. Notez que la page contient une référence déclarative à le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> contrôle, est imbriquée dans la hiérarchie appropriée des éléments déclaratifs. Notez également que plusieurs valeurs de propriété sont assignées de façon déclarative sur le `<asp:importcatalogpart>` élément. En outre, le `Button1_Click` méthode met à jour un nombre de valeurs de propriété sur le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> contrôle.  
  
 Dans la page <xref:System.Web.UI.WebControls.WebParts.WebPartZone> (contrôle), les deux fonctions personnalisées <xref:System.Web.UI.WebControls.WebParts.WebPart> sont déclarés. Le `<aspSample:userinfowebpart>` contrôle a une `exportmode="all"` attribut dessus. Cet attribut est obligatoire pour permettre aux utilisateurs d’exporter un fichier de description pour le contrôle, qui peut ensuite être importé par d’autres utilisateurs qui souhaitent importer le contrôle à l’aide du fichier de description.  
  
> [!NOTE]
>  Pour permettre aux utilisateurs d’une application Web Parts pour exporter un fichier de description pour <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôles, vous devez également activer la fonctionnalité d’exportation dans l’application Web en ajoutant un `enableExport="true"` attribut le `<webParts>` élément (qui est un enfant de le `<system.web>`élément) dans le fichier Web.config. Exportation est désactivée par défaut, par conséquent, si vous n’avez pas encore activé exportation pour votre application, modifiez le fichier Web.config et le faire maintenant.  
  
 [!code-aspx-csharp[WebParts_ImportCatalogPart_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/CS/ImportCatalogPartOverviewCS.aspx#1)]
 [!code-aspx-vb[WebParts_ImportCatalogPart_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/VB/ImportCatalogPartOverviewVB.aspx#1)]  
  
 La troisième partie de l’exemple de code est le code source pour les deux <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôles. Notez que certaines propriétés de ces contrôles sont marquées avec le `WebBrowsable` attribut. Cela permet la <xref:System.Web.UI.WebControls.WebParts.PropertyGridEditorPart> contrôle pour générer dynamiquement l’interface utilisateur (IU) pour un utilisateur de modifier ces propriétés lorsque les contrôles sont en mode édition. Les propriétés sont également marquées avec un `WebDisplayName` attribut, pour spécifier le texte de l’étiquette qui apparaît en regard de chaque contrôle dans l’interface utilisateur de modification. Pour l’exemple de code à exécuter, vous devez compiler ce code source. Vous pouvez compiler explicitement et placer l’assembly résultant dans le dossier Bin de votre site Web ou le global assembly cache. Vous pouvez également mettre le code source dans le dossier App_Code de votre site, où il sera compilé dynamiquement au moment de l’exécution. Cet exemple de code utilise la compilation dynamique. Pour une procédure pas à pas qui illustre les deux méthodes de compilation, consultez [procédure pas à pas : Contrôle serveur Web de développement et à l’aide d’un](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 Le contrôle personnalisé appelé `TextDisplayWebPart` est référencé dans la page Web avec un `<aspSample:TextDisplayWebPart>` élément. L’autre contrôle, appelé `UserInfoWebPart`, est également déclaré dans la page Web au départ, mais vous supprimerez ultérieurement pour montrer la capacité d’importer un fichier de description pour un contrôle.  
  
 [!code-csharp[WebParts_ImportCatalogPart_Overview#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/CS/userinfowebpart.cs#6)]
 [!code-vb[WebParts_ImportCatalogPart_Overview#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/VB/userinfowebpart.vb#6)]  
  
 Exécutez maintenant l’exemple de code. Chargez la page Web dans un navigateur. La première étape consiste à modifier le `UserInfoWebPart` contrôle. Utilisez le **Mode d’affichage** le contrôle de liste déroulante et sélectionnez **modifier** pour basculer la page en mode édition. Cliquez sur le menu d’actions verbales de la `UserInfoWebPart` contrôle (la flèche vers le bas dans la barre de titre), puis cliquez sur **modifier**. Lorsque l’interface utilisateur de modification s’affiche, plusieurs contrôles d’édition s’affichent sous le `UserInfoWebPart` contrôle que vous pouvez utiliser pour modifier ses valeurs de champ. Modifiez certains champs, cliquez sur **OK**, puis utilisez le **Mode d’affichage** liste déroulante pour retourner la page en mode de navigation.  
  
 La deuxième étape consiste à exporter un. Fichier de description de composant WebPart pour le `UserInfoWebPart` contrôle. Cliquez sur le menu d’actions verbales sur le contrôle personnalisé (représenté par la flèche vers le bas dans la barre de titre), puis cliquez sur **exporter**. Suivez les instructions pour enregistrer un. Fichier de description de composant WebPart pour le contrôle. Maintenant fermer la page Web et modifiez la source de la page dans un éditeur. Supprimer le `<aspSample:userinfowebpart>` control, élément de déclaration, puis enregistrez et fermez le fichier. (Vous effectuez cette étape pour simuler un utilisateur qui n’a pas encore le `UserInfoWebPart` contrôler, afin de pouvoir importer le contrôle à la page).  
  
 Chargez la page Web dans un navigateur. Le `UserInfoWebPart` contrôle ne doit pas apparaître, car vous l’avez supprimé. Utilisez le **Mode d’affichage** le contrôle de liste déroulante et sélectionnez **catalogue** pour passer de la page en mode de catalogue. Dans le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> contrôler, cliquez sur le **Parcourir** bouton, puis accédez à la. Composant WebPart de fichier que vous avez créé, puis cliquez sur le **télécharger** bouton. Une référence au contrôle doit apparaître avec une case à cocher en regard de celle-ci. Sélectionnez la case à cocher, puis cliquez sur **ajouter** pour ajouter le contrôle à la page.  
  
 Lorsque vous vous trouvez dans cette vue de la page, cliquez sur le **mise à jour ImportCatalogPart** bouton vers le bas de la page pour voir l’effet de mise à jour par programmation d’un nombre de valeurs de propriété sur le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> contrôle. Après avoir cliqué sur le bouton, observez comment les différentes propriétés sont modifiées dans l’interface utilisateur.  
  
 Enfin, cliquez sur **fermer** pour quitter le mode de catalogue et de retourner la page en mode de navigation. Le `UserInfoWebPart` contrôle doit maintenant apparaître dans la page, contenant les valeurs qu’il avait lorsque vous l’avez exporté précédemment.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.PageCatalogPart" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.DeclarativeCatalogPart" />
    <related type="Article" href="https://msdn.microsoft.com/library/480992e4-8fc7-43f8-bffc-ae97bbdfe5b8">Fichiers de Description de contrôle WebPart</related>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Contrôles WebPart ASP.NET</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ImportCatalogPart ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ImportCatalogPart.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ImportCatalogPart();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.UI.WebControls.WebParts.ImportCatalogPart" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.%23ctor%2A> constructeur est une valeur par défaut ; aucun constructeur n’est déclarée dans la <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> classe et des tâches, par conséquent, ne spéciales sont effectuées lors de la création d’une nouvelle instance de la classe. Le .NET Framework utilise en interne le constructeur pour créer une instance de la classe.  
  
 Normalement vous ne devrez pas utiliser le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.%23ctor%2A> constructeur par programmation dans votre propre code. L’utilisation prévue du contrôle est destiné aux développeurs de page pour l’ajouter à une page de façon déclarative au moment du design.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Contrôles WebPart ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="BrowseHelpText">
      <MemberSignature Language="C#" Value="public string BrowseHelpText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string BrowseHelpText" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.ImportCatalogPart.BrowseHelpText" />
      <MemberSignature Language="VB.NET" Value="Public Property BrowseHelpText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ BrowseHelpText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BrowseHelpText : string with get, set" Usage="System.Web.UI.WebControls.WebParts.ImportCatalogPart.BrowseHelpText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit un message texte qui demande aux utilisateurs d'accéder à l'emplacement d'un fichier de description.</summary>
        <value>Chaîne qui contient le texte du message. La valeur par défaut est un message propre à la culture fourni par le .NET Framework.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.BrowseHelpText%2A> propriété offre aux utilisateurs une vue d’ensemble simple de la première chose qu’ils doivent faire en cours d’ajout d’un contrôle importé : fournir l’emplacement d’un fichier de description en tapant un chemin d’accès ou en accédant au fichier. Une raison classique pour fournir une valeur personnalisée pour cette propriété est si vous avez des instructions spéciales pour les utilisateurs, tel qu’un partage réseau spécifique auquel ils doivent accéder pour localiser un fichier de description.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.BrowseHelpText%2A> propriété de façon déclarative et par programme. Pour le code complet et les instructions nécessaires pour exécuter l’exemple, consultez la section exemple de la <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> vue d’ensemble de la classe.  
  
 Dans la section suivante de code, notez que le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.BrowseHelpText%2A> valeur de propriété est définie de manière déclarative pour le contrôle.  
  
 [!code-aspx-csharp[WebParts_ImportCatalogPart_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/CS/ImportCatalogPartOverviewCS.aspx#2)]
 [!code-aspx-vb[WebParts_ImportCatalogPart_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/VB/ImportCatalogPartOverviewVB.aspx#2)]  
  
 Dans cette section de code, le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.BrowseHelpText%2A> valeur de propriété est assignée par programme.  
  
 [!code-csharp[WebParts_ImportCatalogPart_Overview#3](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/CS/ImportCatalogPartOverviewCS.aspx#3)]
 [!code-vb[WebParts_ImportCatalogPart_Overview#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/VB/ImportCatalogPartOverviewVB.aspx#3)]  
  
 Lorsque vous chargez la page dans un navigateur, vous pouvez utiliser la **Mode d’affichage** contrôle de liste déroulante pour sélectionner **Mode catalogue** et passer à la page en mode catalogue. Avec la page en mode catalogue et le fichier de description transféré, notez les différentes chaînes de texte affichées dans l’interface utilisateur (IU) pour le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> contrôle. Si vous cliquez sur le **télécharger un fichier de Description** bouton, le texte de plusieurs des propriétés dans l’interface utilisateur est modifié, y compris le texte pour le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.BrowseHelpText%2A> propriété.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Contrôles WebPart ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="CreateChildControls">
      <MemberSignature Language="C#" Value="protected internal override void CreateChildControls ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void CreateChildControls() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ImportCatalogPart.CreateChildControls" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub CreateChildControls ()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void CreateChildControls();" />
      <MemberSignature Language="F#" Value="override this.CreateChildControls : unit -&gt; unit" Usage="importCatalogPart.CreateChildControls " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultButton">
      <MemberSignature Language="C#" Value="public override string DefaultButton { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DefaultButton" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.ImportCatalogPart.DefaultButton" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property DefaultButton As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ DefaultButton { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultButton : string with get, set" Usage="System.Web.UI.WebControls.WebParts.ImportCatalogPart.DefaultButton" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le bouton dans l'interface utilisateur qui est considéré comme le bouton par défaut qui reçoit le focus lorsque le formulaire contenant le bouton est restitué. Cette propriété n'est pas destinée à être appelée à partir du code du développeur de pages.</summary>
        <value>Chaîne qui contient l'ID du contrôle <see cref="T:System.Web.UI.WebControls.Button" /> qui reçoit le focus par défaut dans un contrôle <see cref="T:System.Web.UI.WebControls.Panel" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le code de cette propriété substitue la propriété de base héritée de la <xref:System.Web.UI.WebControls.Panel> classe pour masquer la propriété aux concepteurs et empêcher son affectation par des thèmes. S’il est public, cette propriété est utilisée en interne par le contrôle WebPart défini pour le rendu par défaut de ce contrôle et n’est pas destinée à être utilisée par les développeurs de pages.  
  
 Cette propriété ne peut pas être définie par les thèmes ou les thèmes de feuille de style. Pour plus d’informations, consultez <xref:System.Web.UI.ThemeableAttribute> et [thèmes ASP.NET et des apparences](https://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3).  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.Panel.DefaultButton" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Contrôles WebPart ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="GetAvailableWebPartDescriptions">
      <MemberSignature Language="C#" Value="public override System.Web.UI.WebControls.WebParts.WebPartDescriptionCollection GetAvailableWebPartDescriptions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Web.UI.WebControls.WebParts.WebPartDescriptionCollection GetAvailableWebPartDescriptions() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetAvailableWebPartDescriptions () As WebPartDescriptionCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Web::UI::WebControls::WebParts::WebPartDescriptionCollection ^ GetAvailableWebPartDescriptions();" />
      <MemberSignature Language="F#" Value="override this.GetAvailableWebPartDescriptions : unit -&gt; System.Web.UI.WebControls.WebParts.WebPartDescriptionCollection" Usage="importCatalogPart.GetAvailableWebPartDescriptions " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartDescriptionCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retourne une collection de descriptions des contrôles <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> disponibles dans un catalogue.</summary>
        <returns><see cref="T:System.Web.UI.WebControls.WebParts.WebPartDescriptionCollection" /> qui contient un <see cref="T:System.Web.UI.WebControls.WebParts.WebPartDescription" /> pour chaque contrôle présent dans un catalogue.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions%2A> méthode fournit une implémentation pour la méthode de base abstraite déclarée dans la <xref:System.Web.UI.WebControls.WebParts.CatalogPart> classe. Le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions%2A> méthode retourne des informations de description pour chaque contrôle dans un catalogue. Notez que dans le cas d’un <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> contrôler, il peut y avoir seulement un seul contrôle serveur dans le catalogue à la fois, même si la méthode fonctionne avec plusieurs contrôles.  
  
 Un <xref:System.Web.UI.WebControls.WebParts.WebPartDescription> objet est un objet qui contient des informations essentielles sur un <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôle, y compris son ID, une référence d’objet au contrôle et les valeurs de plusieurs propriétés importantes sont héritées de la <xref:System.Web.UI.WebControls.WebParts.Part> classe, telle que <xref:System.Web.UI.WebControls.WebParts.Part.Title%2A> et <xref:System.Web.UI.WebControls.WebParts.Part.Description%2A>.  
  
 Le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions%2A> méthode améliore les performances. Lorsqu’un catalogue est créé, il a besoin d’informations sur chaque contrôle qu’il contient, notamment un titre, une description, une icône (le cas échéant) et un ID. Au lieu de devoir créer une instance de chaque contrôle pour obtenir ces informations, un <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> zone qui crée un catalogue appelle le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions%2A> (méthode) et l’appel retourne uniquement les informations de description pour le contrôle plutôt qu’une instance de la contrôle.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions%2A> méthode sur une page Web. L’exemple comprend quatre parties :  
  
-   Un contrôle utilisateur qui permet de modifier les modes d’affichage sur une page WebPart.  
  
-   Une page Web qui contient un <xref:System.Web.UI.WebControls.WebParts.CatalogZone> contrôle et un <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> contrôle, ainsi que du code qui utilise le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions%2A> (méthode).  
  
-   Un fichier de code source qui contient deux personnalisé <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôles.  
  
-   Explication du fonctionne de l’exemple lorsque vous chargez la page dans un navigateur.  
  
 La première partie de cet exemple de code est le contrôle utilisateur qui permet aux utilisateurs de modifier les modes d’affichage sur une page Web. Vous devez placer le code source suivant dans un fichier et nommez-le Displaymodemenucs.ascx ou Displaymodemenuvb.ascx (selon la langue que vous utilisez). Pour plus d’informations sur les modes d’affichage et une description du code source dans ce contrôle, consultez [procédure pas à pas : Page de parties de modification des Modes d’affichage sur un serveur Web](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_ImportCatalogPart_Get#7](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Get/CS/DisplayModeMenuCS.ascx#7)]
 [!code-aspx-vb[WebParts_ImportCatalogPart_Get#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Get/VB/DisplayModeMenuVB.ascx#7)]  
  
 La deuxième partie de l’exemple de code est la page Web. En haut de la page sont deux `register` directives, un pour le contrôle utilisateur et un pour le composant compilé qui contient deux personnalisé <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôles. Ces deux contrôles sont référencés de façon déclarative dans le balisage de la page. Sur les références déclaratives pour le <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôles (les deux commencent par un `aspSample` préfixe), notez que chacune possède une `exportMode="all"` attribut ajouté à ce dernier. Cet attribut vous permet d’exporter un. Fichier de description de composant WebPart pour le contrôle, vous allez utiliser ultérieurement pour importer le contrôle à une page.  
  
> [!NOTE]
>  Pour permettre aux utilisateurs d’une application Web Parts pour exporter un fichier de description pour <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôles, vous devez également activer la fonctionnalité d’exportation dans l’application Web en ajoutant un `enableExport="true"` attribut le `<webParts>` élément (qui est un enfant de le `<system.web>`élément) dans le fichier Web.config. Exportation est désactivée par défaut, par conséquent, si vous n’avez pas encore activé exportation pour votre application, modifiez le fichier Web.config et le faire maintenant.  
  
 La page Web a également une référence déclarative à le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> contrôle, est imbriquée dans la hiérarchie appropriée des éléments déclaratifs. Le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions%2A> méthode est appelée dans le code pour le `Button1_Click` (méthode).  
  
 [!code-aspx-csharp[WebParts_ImportCatalogPart_Get#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Get/CS/ImportCatalogPart_GetCS.aspx#1)]
 [!code-aspx-vb[WebParts_ImportCatalogPart_Get#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Get/VB/ImportCatalogPart_GetVB.aspx#1)]  
  
 La troisième partie de l’exemple de code est le code source pour les deux <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôles. Pour l’exemple de code à exécuter, vous devez compiler ce code source. Vous pouvez compiler explicitement et placer l’assembly résultant dans le dossier Bin de votre site Web ou le global assembly cache. Vous pouvez également mettre le code source dans le dossier App_Code de votre site, où il sera compilé dynamiquement au moment de l’exécution. Cet exemple de code utilise la compilation dynamique. Pour une procédure pas à pas qui illustre les deux méthodes de compilation, consultez [procédure pas à pas : Contrôle serveur Web de développement et à l’aide d’un](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_ImportCatalogPart_Get#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Get/CS/userinfowebpart.cs#6)]
 [!code-vb[WebParts_ImportCatalogPart_Get#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Get/VB/userinfowebpart.vb#6)]  
  
 Exécutez maintenant l’exemple de code. Chargez la page Web dans un navigateur. La première étape consiste à exporter un. Fichier de description de composant WebPart pour chaque <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôle (pour le `TextDisplayWebPart` et pour le `UserInfoWebPart` contrôle). Pour chaque contrôle, cliquez sur le menu d’actions verbales sur le contrôle (représenté par la flèche vers le bas dans la barre de titre), puis cliquez sur **exporter**. Suivez les instructions pour enregistrer un. Fichier de description de composant WebPart pour le contrôle. Après avoir exporté un fichier de description pour chaque contrôle, fermez la page Web et modifier la page source dans un éditeur. Supprimer le `<aspSample:userinfowebpart>` et `<aspSample:textdisplaywebpart>` contrôler les éléments d’une déclaration, puis enregistrez et fermez le fichier. (Vous effectuez cette étape pour simuler un utilisateur qui n’a pas encore ces contrôles, qui vous pouvez d’importer les contrôles à la page).  
  
 Chargez la page Web dans un navigateur. Utilisez le **Mode d’affichage** le contrôle de liste déroulante et sélectionnez **catalogue** pour passer de la page en mode de catalogue. Dans le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> contrôler, cliquez sur le **Parcourir** bouton, accédez à la. WebPart que vous avez créé, sélectionnez une, puis cliquez sur le **télécharger** bouton. Une référence au contrôle doit apparaître avec une case à cocher en regard de celle-ci. Sélectionnez la case à cocher, puis cliquez sur **ajouter** pour ajouter le contrôle à la page. Répétez ce processus pour l’autre contrôle.  
  
 Lorsque vous vous trouvez dans cette vue de la page, cliquez sur le **obtenir la Description WebPart** bouton vers le bas de la page pour voir l’effet de l’accès par programme au <xref:System.Web.UI.WebControls.WebParts.WebPartDescription> de l’objet de la description de contrôle actuellement chargés dans le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> contrôle. La méthode permettant d’accéder aux détails de la description, trouvée dans le `Button1_Click` est la méthode de la source de la page, le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions%2A> (méthode). Une étiquette au-dessous du bouton affiche des informations détaillées sur le contrôle.  
  
 Après avoir ajouté le premier contrôle, répétez la procédure pour ajouter le deuxième contrôle à la page. Enfin, cliquez sur **fermer** pour quitter le mode de catalogue et de retourner la page en mode de navigation. Les deux contrôles personnalisés doivent maintenant apparaître dans la page, qui contient les valeurs qu’elles avaient lorsque vous avez exporté auparavant des fichiers de description.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart(System.Web.UI.WebControls.WebParts.WebPartDescription)" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Contrôles WebPart ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="GetWebPart">
      <MemberSignature Language="C#" Value="public override System.Web.UI.WebControls.WebParts.WebPart GetWebPart (System.Web.UI.WebControls.WebParts.WebPartDescription description);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Web.UI.WebControls.WebParts.WebPart GetWebPart(class System.Web.UI.WebControls.WebParts.WebPartDescription description) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart(System.Web.UI.WebControls.WebParts.WebPartDescription)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetWebPart (description As WebPartDescription) As WebPart" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Web::UI::WebControls::WebParts::WebPart ^ GetWebPart(System::Web::UI::WebControls::WebParts::WebPartDescription ^ description);" />
      <MemberSignature Language="F#" Value="override this.GetWebPart : System.Web.UI.WebControls.WebParts.WebPartDescription -&gt; System.Web.UI.WebControls.WebParts.WebPart" Usage="importCatalogPart.GetWebPart description" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPart</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="description" Type="System.Web.UI.WebControls.WebParts.WebPartDescription" />
      </Parameters>
      <Docs>
        <param name="description"><see cref="T:System.Web.UI.WebControls.WebParts.WebPartDescription" /> qui contient des détails sur le contrôle.</param>
        <summary>Retourne une référence à un contrôle <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> en fonction des valeurs de la description passée dans la méthode.</summary>
        <returns>Contrôle <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> dont la description correspond aux valeurs dans <paramref name="description" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart%2A> méthode retourne une référence à un <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôle dont les informations de description correspondent aux valeurs de la <xref:System.Web.UI.WebControls.WebParts.WebPartDescription> objet passé à la méthode. En règle générale, cette méthode est utilisée conjointement avec la <xref:System.Web.UI.WebControls.WebParts.DeclarativeCatalogPart.GetAvailableWebPartDescriptions%2A> (méthode), qui est utilisée pour récupérer les descriptions des contrôles dans le catalogue. Individuels <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôles peuvent être récupérées ou manipulées en fonction des besoins en passant des <xref:System.Web.UI.WebControls.WebParts.WebPartDescription> des objets sur le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart%2A> (méthode).  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart%2A> méthode sur une page Web. L’exemple comprend quatre parties :  
  
-   Un contrôle utilisateur qui permet de modifier les modes d’affichage sur une page WebPart.  
  
-   Une page Web qui contient un <xref:System.Web.UI.WebControls.WebParts.CatalogZone> contrôle et un <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> contrôle, ainsi que du code qui utilise le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart%2A> (méthode).  
  
-   Un fichier de code source qui contient deux personnalisé <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôles.  
  
-   Explication du fonctionne de l’exemple lorsque vous chargez la page dans un navigateur.  
  
 La première partie de cet exemple de code est le contrôle utilisateur qui permet aux utilisateurs de modifier les modes d’affichage sur une page Web. Vous devez placer le code source suivant dans un fichier et nommez-le Displaymodemenucs.ascx ou Displaymodemenuvb.ascx (selon la langue que vous utilisez). Pour plus d’informations sur les modes d’affichage et une description du code source dans ce contrôle, consultez [procédure pas à pas : Page de parties de modification des Modes d’affichage sur un serveur Web](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_ImportCatalogPart_Get#7](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Get/CS/DisplayModeMenuCS.ascx#7)]
 [!code-aspx-vb[WebParts_ImportCatalogPart_Get#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Get/VB/DisplayModeMenuVB.ascx#7)]  
  
 La deuxième partie de l’exemple de code est la page Web. En haut de la page sont deux `register` directives, un pour le contrôle utilisateur et un pour le composant compilé qui contient deux personnalisé <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôles. Ces deux contrôles sont référencés de façon déclarative dans le balisage de la page. Sur les références déclaratives pour le <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôles (les deux commencent par un `aspSample` préfixe), notez que chacune possède une `exportMode="all"` attribut ajouté à ce dernier. Cet attribut vous permet d’exporter un. Fichier de description de composant WebPart pour le contrôle, vous allez utiliser ultérieurement pour importer le contrôle à une page.  
  
> [!NOTE]
>  Pour permettre aux utilisateurs d’une application Web Parts pour exporter un fichier de description pour <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôles, vous devez également activer la fonctionnalité d’exportation dans l’application Web en ajoutant un `enableExport="true"` attribut le `<webParts>` élément (qui est un enfant de le `<system.web>`élément) dans le fichier Web.config. Exportation est désactivée par défaut, par conséquent, si vous n’avez pas encore activé exportation pour votre application, modifiez le fichier Web.config et le faire maintenant.  
  
 La page Web a également une référence déclarative à le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> contrôle, est imbriquée dans la hiérarchie appropriée des éléments déclaratifs. Le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart%2A> méthode est appelée dans le code pour le `Button2_Click` (méthode).  
  
 [!code-aspx-csharp[WebParts_ImportCatalogPart_Get#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Get/CS/ImportCatalogPart_GetCS.aspx#1)]
 [!code-aspx-vb[WebParts_ImportCatalogPart_Get#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Get/VB/ImportCatalogPart_GetVB.aspx#1)]  
  
 La troisième partie de l’exemple de code est le code source pour les deux <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôles. Pour l’exemple de code à exécuter, vous devez compiler ce code source. Vous pouvez compiler explicitement et placer l’assembly résultant dans le dossier Bin de votre site Web ou le global assembly cache. Vous pouvez également mettre le code source dans le dossier App_Code de votre site, où il sera compilé dynamiquement au moment de l’exécution. Cet exemple de code utilise la compilation dynamique. Pour une procédure pas à pas qui illustre les deux méthodes de compilation, consultez [procédure pas à pas : Contrôle serveur Web de développement et à l’aide d’un](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_ImportCatalogPart_Get#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Get/CS/userinfowebpart.cs#6)]
 [!code-vb[WebParts_ImportCatalogPart_Get#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Get/VB/userinfowebpart.vb#6)]  
  
 Exécutez maintenant l’exemple de code. Chargez la page Web dans un navigateur. La première étape consiste à exporter un. Fichier de description de composant WebPart pour chaque <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôle (pour le `TextDisplayWebPart` et pour le `UserInfoWebPart` contrôle). Pour chaque contrôle, cliquez sur le menu d’actions verbales sur le contrôle (représenté par la flèche vers le bas dans la barre de titre), puis cliquez sur **exporter**. Suivez les instructions pour enregistrer un. Fichier de description de composant WebPart pour le contrôle. Après avoir exporté un fichier de description pour chaque contrôle, fermez la page Web et modifier la page source dans un éditeur. Supprimer le `<aspSample:userinfowebpart>` et `<aspSample:textdisplaywebpart>` contrôler les éléments d’une déclaration, puis enregistrez et fermez le fichier. (Vous effectuez cette étape pour simuler un utilisateur qui n’a pas encore ces contrôles, qui vous pouvez d’importer les contrôles à la page).  
  
 Chargez la page Web dans un navigateur. Utilisez le **Mode d’affichage** le contrôle de liste déroulante et sélectionnez **catalogue** pour passer de la page en mode de catalogue. Dans le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> contrôler, cliquez sur le **Parcourir** bouton, accédez à la. WebPart que vous avez créé, sélectionnez une, puis cliquez sur le **télécharger** bouton. Une référence au contrôle doit apparaître avec une case à cocher en regard de celle-ci. Maintenant que la description du contrôle est chargée dans le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> contrôler, cliquez sur le **utiliser GetWebPart** bouton vers le bas de la page. Cette figure illustre le fait d’appeler le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart%2A> (méthode) et en lui passant la description de contrôle actuellement chargée dans le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> contrôle. Notez que le contrôle serveur associé est immédiatement ajouté à la page Web, sans que l’utilisateur ne doive cliquer sur le **ajouter** bouton. Le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart%2A> (méthode), qui est appelée dans le `Button2_Click` retourne de la méthode de la source de la page, le <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôle associé à la description actuelle qui est chargée dans le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> contrôle. Suivant le <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AddWebPart%2A> méthode est appelée et le <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôle est ajouté directement à la page. Cela montre comment ajouter un contrôle par programmation à partir du <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> contrôle sans intervention de l’utilisateur.  
  
 Après avoir ajouté le premier contrôle, répétez la procédure pour ajouter le deuxième contrôle à la page. Enfin, cliquez sur **fermer** pour quitter le mode de catalogue et de retourner la page en mode de navigation. Les deux contrôles personnalisés doivent maintenant apparaître dans la page, qui contient les valeurs qu’elles avaient lorsque vous avez exporté auparavant des fichiers de description.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="description" /> est <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="description" /> n'est pas une valeur <see cref="T:System.Web.UI.WebControls.WebParts.WebPartDescription" /> disponible.</exception>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Contrôles WebPart ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ImportedPartLabelText">
      <MemberSignature Language="C#" Value="public string ImportedPartLabelText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ImportedPartLabelText" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportedPartLabelText" />
      <MemberSignature Language="VB.NET" Value="Public Property ImportedPartLabelText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ImportedPartLabelText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ImportedPartLabelText : string with get, set" Usage="System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportedPartLabelText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le texte affiché lorsqu'un utilisateur importe un fichier de description pour représenter ou décrire le contrôle importé dans le catalogue de contrôles importés.</summary>
        <value>Chaîne qui contient le texte de l'étiquette. La valeur par défaut est un message propre à la culture fourni par le .NET Framework.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportedPartLabelText%2A> propriété est généralement utilisée pour contenir une étiquette courte et générale qui décrit le contrôle contenu dans le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> contrôle.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportedPartLabelText%2A> propriété de façon déclarative et par programme. Pour le code complet et les instructions nécessaires pour exécuter l’exemple, consultez la section exemple de la <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> vue d’ensemble de la classe.  
  
 Dans la section suivante de code, notez que le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportedPartLabelText%2A> valeur de propriété est définie de manière déclarative pour le contrôle.  
  
 [!code-aspx-csharp[WebParts_ImportCatalogPart_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/CS/ImportCatalogPartOverviewCS.aspx#2)]
 [!code-aspx-vb[WebParts_ImportCatalogPart_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/VB/ImportCatalogPartOverviewVB.aspx#2)]  
  
 Dans cette section de code, le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportedPartLabelText%2A> valeur de propriété est assignée par programme.  
  
 [!code-csharp[WebParts_ImportCatalogPart_Overview#3](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/CS/ImportCatalogPartOverviewCS.aspx#3)]
 [!code-vb[WebParts_ImportCatalogPart_Overview#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/VB/ImportCatalogPartOverviewVB.aspx#3)]  
  
 Lorsque vous chargez la page dans un navigateur, vous pouvez utiliser la **Mode d’affichage** contrôle de liste déroulante pour sélectionner **Mode catalogue** et passer à la page en mode catalogue. Avec la page en mode catalogue et le fichier de description transféré, notez les différentes chaînes de texte affichées dans l’interface utilisateur (IU) pour le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> contrôle. Si vous cliquez sur le **télécharger un fichier de Description** bouton, le texte de plusieurs des propriétés dans l’interface utilisateur est modifié, y compris le texte pour le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportedPartLabelText%2A> propriété.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Contrôles WebPart ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="LoadControlState">
      <MemberSignature Language="C#" Value="protected internal override void LoadControlState (object savedState);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void LoadControlState(object savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ImportCatalogPart.LoadControlState(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub LoadControlState (savedState As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void LoadControlState(System::Object ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.LoadControlState : obj -&gt; unit" Usage="importCatalogPart.LoadControlState savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="savedState">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected internal override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ImportCatalogPart.OnInit(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnInit (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnInit(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnInit : EventArgs -&gt; unit" Usage="importCatalogPart.OnInit e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PartImportErrorLabelText">
      <MemberSignature Language="C#" Value="public string PartImportErrorLabelText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PartImportErrorLabelText" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.ImportCatalogPart.PartImportErrorLabelText" />
      <MemberSignature Language="VB.NET" Value="Public Property PartImportErrorLabelText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PartImportErrorLabelText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PartImportErrorLabelText : string with get, set" Usage="System.Web.UI.WebControls.WebParts.ImportCatalogPart.PartImportErrorLabelText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit un message d'erreur qui s'affiche si une erreur se produit pendant le processus d'importation.</summary>
        <value>Chaîne qui contient le texte de l'étiquette. La valeur par défaut est un message propre à la culture fourni par le .NET Framework.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.PartImportErrorLabelText%2A> propriété est utile pour informer l’utilisateur si un problème ou une erreur se produit pendant que la page essaie d’importer un fichier de description.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.PartImportErrorLabelText%2A> propriété de façon déclarative et par programme. Pour le code complet et les instructions nécessaires pour exécuter l’exemple, consultez la section exemple de la <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> vue d’ensemble de la classe.  
  
 Dans la section suivante de code, notez que le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.PartImportErrorLabelText%2A> valeur de propriété est définie de manière déclarative pour le contrôle.  
  
 [!code-aspx-csharp[WebParts_ImportCatalogPart_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/CS/ImportCatalogPartOverviewCS.aspx#2)]
 [!code-aspx-vb[WebParts_ImportCatalogPart_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/VB/ImportCatalogPartOverviewVB.aspx#2)]  
  
 Dans cette section de code, le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.PartImportErrorLabelText%2A> valeur de propriété est assignée par programme.  
  
 [!code-csharp[WebParts_ImportCatalogPart_Overview#3](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/CS/ImportCatalogPartOverviewCS.aspx#3)]
 [!code-vb[WebParts_ImportCatalogPart_Overview#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/VB/ImportCatalogPartOverviewVB.aspx#3)]  
  
 Lorsque vous chargez la page dans un navigateur, vous pouvez utiliser la **Mode d’affichage** contrôle de liste déroulante pour sélectionner **Mode catalogue** et passer à la page en mode catalogue. Avec la page en mode catalogue et le fichier de description transféré, notez les différentes chaînes de texte affichées dans l’interface utilisateur (IU) pour le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> contrôle. Si vous cliquez sur le **télécharger un fichier de Description** bouton, le texte de plusieurs des propriétés dans l’interface utilisateur est modifié, y compris le texte pour le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.PartImportErrorLabelText%2A> propriété.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Contrôles WebPart ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="protected internal override void Render (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void Render(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ImportCatalogPart.Render(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub Render (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void Render(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="override this.Render : System.Web.UI.HtmlTextWriter -&gt; unit" Usage="importCatalogPart.Render writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RenderContents">
      <MemberSignature Language="C#" Value="protected internal override void RenderContents (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void RenderContents(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ImportCatalogPart.RenderContents(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub RenderContents (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void RenderContents(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="override this.RenderContents : System.Web.UI.HtmlTextWriter -&gt; unit" Usage="importCatalogPart.RenderContents writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveControlState">
      <MemberSignature Language="C#" Value="protected internal override object SaveControlState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance object SaveControlState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ImportCatalogPart.SaveControlState" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function SaveControlState () As Object" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override System::Object ^ SaveControlState();" />
      <MemberSignature Language="F#" Value="override this.SaveControlState : unit -&gt; obj" Usage="importCatalogPart.SaveControlState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Title">
      <MemberSignature Language="C#" Value="public override string Title { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Title" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.ImportCatalogPart.Title" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Title As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Title { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Title : string with get, set" Usage="System.Web.UI.WebControls.WebParts.ImportCatalogPart.Title" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le titre qui apparaît dans la barre de titre d'un contrôle <see cref="T:System.Web.UI.WebControls.WebParts.ImportCatalogPart" />.</summary>
        <value>Chaîne utilisée comme titre du contrôle. La valeur par défaut est un nom de contrôle calculé fourni par le jeu de contrôles WebPart.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.Title%2A> valeur de propriété est affichée dans la barre de titre d’une <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> contrôler quand le contrôle est visible en mode de catalogue. Lorsque le contrôle est déclaré dans une page, vous pouvez définir une valeur pour la propriété à l’aide de la `Title` attribut. Si vous ne fournissez pas une valeur pour le titre, une valeur par défaut spécifiques à la culture est utilisée pour décrire les types de propriétés de ce contrôle permet aux utilisateurs de modifier.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.Title%2A> propriété de façon déclarative et par programme. Pour le code complet et les instructions nécessaires pour exécuter l’exemple, consultez la section exemple de la <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> vue d’ensemble de la classe.  
  
 Dans la section suivante de code, notez que le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.Title%2A> valeur de propriété est définie de manière déclarative pour le contrôle.  
  
 [!code-aspx-csharp[WebParts_ImportCatalogPart_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/CS/ImportCatalogPartOverviewCS.aspx#2)]
 [!code-aspx-vb[WebParts_ImportCatalogPart_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/VB/ImportCatalogPartOverviewVB.aspx#2)]  
  
 Dans cette section de code, le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.Title%2A> valeur de propriété est assignée par programme.  
  
 [!code-csharp[WebParts_ImportCatalogPart_Overview#3](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/CS/ImportCatalogPartOverviewCS.aspx#3)]
 [!code-vb[WebParts_ImportCatalogPart_Overview#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/VB/ImportCatalogPartOverviewVB.aspx#3)]  
  
 Lorsque vous chargez la page dans un navigateur, vous pouvez utiliser la **Mode d’affichage** contrôle de liste déroulante pour sélectionner **Mode catalogue** et passer à la page en mode catalogue. Avec la page en mode catalogue et le fichier de description transféré, notez les différentes chaînes de texte affichées dans l’interface utilisateur (IU) pour le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> contrôle. Si vous cliquez sur le **télécharger un fichier de Description** bouton, le texte de plusieurs des propriétés dans l’interface utilisateur est modifié, y compris le texte pour le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.Title%2A> propriété.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Contrôles WebPart ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="UploadButtonText">
      <MemberSignature Language="C#" Value="public string UploadButtonText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UploadButtonText" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText" />
      <MemberSignature Language="VB.NET" Value="Public Property UploadButtonText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ UploadButtonText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.UploadButtonText : string with get, set" Usage="System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le texte pour le contrôle <see cref="T:System.Web.UI.WebControls.Button" /> qui initialise le transfert d'un fichier de description.</summary>
        <value>Chaîne utilisée comme texte pour <see cref="T:System.Web.UI.WebControls.Button" />. La valeur par défaut est une chaîne propre à la culture fournie par le jeu de contrôles WebPart.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText%2A> propriété fournit le texte pour le <xref:System.Web.UI.WebControls.Button> contrôle qui lance le processus de téléchargement. Si vous assignez du texte personnalisé à cette propriété, ou à la <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText%2A> propriété, le texte clairement que l’utilisateur transfère un fichier de description. Le texte ne doit pas dire ou implique que le processus de téléchargement est transfère le contrôle lui-même.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText%2A> propriété de façon déclarative et par programme. Pour le code complet et les instructions nécessaires pour exécuter l’exemple, consultez la section exemple de la <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> vue d’ensemble de la classe.  
  
 Dans la section suivante de code, notez que le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText%2A> valeur de propriété est définie de manière déclarative pour le contrôle.  
  
 [!code-aspx-csharp[WebParts_ImportCatalogPart_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/CS/ImportCatalogPartOverviewCS.aspx#2)]
 [!code-aspx-vb[WebParts_ImportCatalogPart_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/VB/ImportCatalogPartOverviewVB.aspx#2)]  
  
 Dans cette section de code, le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText%2A> valeur de propriété est assignée par programme.  
  
 [!code-csharp[WebParts_ImportCatalogPart_Overview#3](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/CS/ImportCatalogPartOverviewCS.aspx#3)]
 [!code-vb[WebParts_ImportCatalogPart_Overview#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/VB/ImportCatalogPartOverviewVB.aspx#3)]  
  
 Lorsque vous chargez la page dans un navigateur, vous pouvez utiliser la **Mode d’affichage** contrôle de liste déroulante pour sélectionner **Mode catalogue** et passer à la page en mode catalogue. Avec la page en mode catalogue et le fichier de description transféré, notez les différentes chaînes de texte affichées dans l’interface utilisateur (IU) pour le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> contrôle. Si vous cliquez sur le **télécharger un fichier de Description** bouton, le texte de plusieurs des propriétés dans l’interface utilisateur est modifié, y compris le texte pour le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText%2A> propriété.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Contrôles WebPart ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="UploadHelpText">
      <MemberSignature Language="C#" Value="public string UploadHelpText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UploadHelpText" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText" />
      <MemberSignature Language="VB.NET" Value="Public Property UploadHelpText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ UploadHelpText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.UploadHelpText : string with get, set" Usage="System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le texte du message qui explique à l'utilisateur comment transférer un fichier de description.</summary>
        <value>Chaîne utilisée comme instructions pour l'utilisateur pour transférer un fichier de description. La valeur par défaut est une chaîne propre à la culture fournie par le jeu de contrôles WebPart.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText%2A> propriété fournit une brève phrase d’instructions pour les utilisateurs, les invitant à cliquer sur un bouton pour charger le fichier de description. Si vous assignez du texte personnalisé à cette propriété, ou à la <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText%2A> propriété, le texte clairement que l’utilisateur transfère un fichier de description. Le texte ne doit pas dire ou implique que le processus de téléchargement est transfère le contrôle lui-même.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText%2A> propriété de façon déclarative et par programme. Pour le code complet et les instructions nécessaires pour exécuter l’exemple, consultez la section exemple de la <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> vue d’ensemble de la classe.  
  
 Dans la section suivante de code, notez que le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText%2A> valeur de propriété est définie de manière déclarative pour le contrôle.  
  
 [!code-aspx-csharp[WebParts_ImportCatalogPart_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/CS/ImportCatalogPartOverviewCS.aspx#2)]
 [!code-aspx-vb[WebParts_ImportCatalogPart_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/VB/ImportCatalogPartOverviewVB.aspx#2)]  
  
 Dans cette section de code, le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText%2A> valeur de propriété est assignée par programme.  
  
 [!code-csharp[WebParts_ImportCatalogPart_Overview#3](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/CS/ImportCatalogPartOverviewCS.aspx#3)]
 [!code-vb[WebParts_ImportCatalogPart_Overview#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ImportCatalogPart_Overview/VB/ImportCatalogPartOverviewVB.aspx#3)]  
  
 Lorsque vous chargez la page dans un navigateur, vous pouvez utiliser la **Mode d’affichage** contrôle de liste déroulante pour sélectionner **Mode catalogue** et passer à la page en mode catalogue. Avec la page en mode catalogue et le fichier de description transféré, notez les différentes chaînes de texte affichées dans l’interface utilisateur (IU) pour le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> contrôle. Si vous cliquez sur le **télécharger un fichier de Description** bouton, le texte de plusieurs des propriétés dans l’interface utilisateur est modifié, y compris le texte pour le <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText%2A> propriété.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Contrôles WebPart ASP.NET</related>
      </Docs>
    </Member>
  </Members>
</Type>