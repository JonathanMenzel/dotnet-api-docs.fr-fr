<Type Name="CatalogZone" FullName="System.Web.UI.WebControls.WebParts.CatalogZone">
  <Metadata><Meta Name="ms.openlocfilehash" Value="82ea67cd5bbce8b90c245a409bb529cb005363cd" /><Meta Name="ms.sourcegitcommit" Value="2982b8c4cce02c2542285fcaf172f7544d6b80bc" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="04/09/2019" /><Meta Name="ms.locfileid" Value="59352042" /></Metadata><TypeSignature Language="C#" Value="public class CatalogZone : System.Web.UI.WebControls.WebParts.CatalogZoneBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CatalogZone extends System.Web.UI.WebControls.WebParts.CatalogZoneBase" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.CatalogZone" />
  <TypeSignature Language="VB.NET" Value="Public Class CatalogZone&#xA;Inherits CatalogZoneBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class CatalogZone : System::Web::UI::WebControls::WebParts::CatalogZoneBase" />
  <TypeSignature Language="F#" Value="type CatalogZone = class&#xA;    inherit CatalogZoneBase" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.WebParts.CatalogZoneBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.WebParts.CatalogZoneDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.SupportsEventValidation</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.WebParts.CatalogZoneDesigner, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Sert de contrôle principal dans le jeu de contrôles WebPart pour l’hébergement de contrôles <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> sur une page web.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dans le jeu de composants WebPart, une zone est une région sur une page Web qui contient des contrôles WebPart. Une zone WebPart est créée par un contrôle de zone, qui est un type de <xref:System.Web.UI.WebControls.CompositeControl> conçu pour contenir d’autres contrôles. Les principales fonctions d’une zone sont pour disposer les contrôles qu’il contient et pour fournir une interface utilisateur commune (IU) pour ces contrôles. Pour obtenir des informations générales sur les zones et comment elles sont utilisées dans les applications WebPart, consultez la base de <xref:System.Web.UI.WebControls.WebParts.WebZone> (classe), et [Web Parts Control Set Overview](https://docs.microsoft.com/previous-versions/aspnet/k3w2y2tf(v=vs.100)).  
  
 Une fonctionnalité clé des contrôles WebPart est qu’ils permettent aux utilisateurs finaux de modifier (ou personnaliser) des pages Web en fonction de leurs préférences et enregistrement ses paramètres personnalisés pour les futures sessions de navigateur. Un aspect de la modification de pages Web Parts inclut la possibilité d’ajouter <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôles ou autres contrôles serveur à une page WebPart. Le <xref:System.Web.UI.WebControls.WebParts.CatalogZone> contrôle fournit une liste ou un catalogue de contrôles que les utilisateurs peuvent ajouter à une page.  
  
 Le <xref:System.Web.UI.WebControls.WebParts.CatalogZone> contrôle est un des contrôles fondamentaux dans le jeu de composants WebPart. Il dérive le <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> classe et la plupart de son comportement est hérité de cette classe. Le <xref:System.Web.UI.WebControls.WebParts.CatalogZone> classe ajoute essentiellement à la classe de base un modèle de zone, qui est une implémentation de la <xref:System.Web.UI.ITemplate> interface. Le modèle de zone permet aux développeurs d’ajouter de façon déclarative <xref:System.Web.UI.WebControls.WebParts.CatalogPart> contrôles à une zone dans le format de persistance de page.  
  
> [!IMPORTANT]
>  Un <xref:System.Web.UI.WebControls.WebParts.CatalogZone> zone peut uniquement contenir <xref:System.Web.UI.WebControls.WebParts.CatalogPart> contrôles et inversement, <xref:System.Web.UI.WebControls.WebParts.CatalogPart> contrôles peuvent résider que dans les zones qui dérivent de la <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> classe, telle que <xref:System.Web.UI.WebControls.WebParts.CatalogZone>.  
  
 Un <xref:System.Web.UI.WebControls.WebParts.CatalogZone> contrôle devient visible uniquement lorsqu’un utilisateur bascule une page Web en mode d’affichage (<xref:System.Web.UI.WebControls.WebParts.WebPartManager.CatalogDisplayMode>). Un catalogue peut contenir plusieurs types de <xref:System.Web.UI.WebControls.WebParts.CatalogPart> contrôles. Chaque <xref:System.Web.UI.WebControls.WebParts.CatalogPart> contrôle est un type de conteneur qui contient les contrôles de serveur que les utilisateurs peuvent ajouter à la page. Le <xref:System.Web.UI.WebControls.WebParts.CatalogPart> contrôles varient en fonction de la provenant des contrôles serveur qu’ils contiennent. Le tableau suivant récapitule les <xref:System.Web.UI.WebControls.WebParts.CatalogPart> contrôles fournis avec le jeu de composants WebPart et, pour chaque contrôle, quel type de serveur les contrôles qu’elle contient.  
  
|Contrôle|Description |  
|-------------|-----------------|  
|<xref:System.Web.UI.WebControls.WebParts.PageCatalogPart>|Gère les références aux contrôles qui ont été fermés sur une page. Ces contrôles peuvent être rouvertes (à nouveau ajoutés à la page) par les utilisateurs.|  
|<xref:System.Web.UI.WebControls.WebParts.DeclarativeCatalogPart>|Contient des références aux contrôles qui sont déclarés dans un catalogue de composants WebPart dans le balisage d’une page Web. Ces contrôles peuvent être ajoutés à une page Web par les utilisateurs.|  
|<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>|Fournit l’interface utilisateur pour un utilisateur de télécharger un fichier de définition (un fichier XML avec un. Extension du composant WebPart et un format spécifié qui contient des informations d’état) d’un contrôle à un catalogue, afin que le contrôle peut être ajouté à une page Web.|  
  
 Étant donné que la <xref:System.Web.UI.WebControls.WebParts.CatalogZone> classe ajoute uniquement un modèle de zone au comportement de sa classe de base, il a peu de membres. Le <xref:System.Web.UI.WebControls.WebParts.CatalogZone.%23ctor%2A> constructeur est un constructeur par défaut ; avec lui, vous pouvez initialiser une nouvelle instance de la <xref:System.Web.UI.WebControls.WebParts.CatalogZone> classe. Le <xref:System.Web.UI.WebControls.WebParts.CatalogZone.ZoneTemplate%2A> propriété obtient ou définit une référence à la <xref:System.Web.UI.ITemplate> objet qui contient les contrôles pour la zone. Le <xref:System.Web.UI.WebControls.WebParts.CatalogZone.CreateCatalogParts%2A> méthode est critique. Ce paramètre remplace la méthode de base pour créer la collection de tous les <xref:System.Web.UI.WebControls.WebParts.CatalogPart> contrôles contenus dans le modèle de zone.  
  
> [!NOTE]
>  Les boutons dans la <xref:System.Web.UI.WebControls.WebParts.CatalogZone> l’interface utilisateur nécessitent l’écriture de scripts côté client pour fonctionner correctement. Si les scripts sont désactivés dans le navigateur, l’utilisateur ne sera pas en mesure d’effectuer des actions via le <xref:System.Web.UI.WebControls.WebParts.CatalogZone> l’interface utilisateur.  
  
## <a name="accessibility"></a>Accessibilité  
 Le balisage rendu par défaut pour ce contrôle n’est peut-être pas conforme aux normes d’accessibilité telles que les instructions de priorité 1 Web Content Accessibility Guidelines 1.0 (WCAG). Pour plus d’informations sur la prise en charge d’accessibilité pour ce contrôle, consultez [les contrôles ASP.NET et l’accessibilité](https://msdn.microsoft.com/library/847a37e3-ce20-41da-b0d3-7dfb0fdae9a0).  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’utilisation déclarative et par programme de la <xref:System.Web.UI.WebControls.WebParts.CatalogZone> contrôle. L’exemple de code comprend quatre parties :  
  
-   Un contrôle utilisateur qui permet de modifier les modes d’affichage sur la page Web.  
  
-   Un fichier avec le code source personnalisé <xref:System.Web.UI.WebControls.WebParts.CatalogZone> contrôle et une personnalisée <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôle qui est importé par le catalogue et ajouté à la page Web.  
  
-   Une page Web qui déclare le contrôle utilisateur et personnalisé <xref:System.Web.UI.WebControls.WebParts.CatalogZone> contrôle.  
  
-   Une explication de l’exécution de l’exemple.  
  
 La première partie de cet exemple de code est le contrôle utilisateur qui permet aux utilisateurs de modifier les modes d’affichage sur une page Web. Pour plus d’informations sur les modes d’affichage et une description du code source dans ce contrôle, consultez [procédure pas à pas : Page de parties de modification des Modes d’affichage sur un serveur Web](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_CatalogZone_Overview#7](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_CatalogZone_Overview/CS/displaymodemenucs.ascx#7)]
 [!code-aspx-vb[WebParts_CatalogZone_Overview#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_CatalogZone_Overview/VB/displaymodemenuvb.ascx#7)]  
  
 La deuxième partie de l’exemple de code contient le code personnalisée du <xref:System.Web.UI.WebControls.WebParts.CatalogZone> et <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôles. Le code pour le <xref:System.Web.UI.WebControls.WebParts.CatalogZone> contrôle montre comment hériter de la <xref:System.Web.UI.WebControls.WebParts.CatalogZone> classe et personnaliser ses propriétés en définissant des valeurs de propriété de certains par défaut dans le constructeur. Le code source montre également comment créer un personnalisé <xref:System.Web.UI.WebControls.WebParts.WebPart> classe nommée `TextDisplayWebPart`. Il s’agit du contrôle associé le. Fichier de description de composant WebPart que vous allez importer dans le cadre de cet exemple de code. Après avoir importé le fichier de description à l’aide de la <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> contrôle sur la page Web, vous serez en mesure d’ajouter le `TextDisplayWebPart` contrôle à la page, parfaitement préconfigurée, comme spécifié dans le fichier de description.  
  
 Pour l’exemple de code à exécuter, vous devez compiler ce code source. Vous pouvez compiler explicitement et placer l’assembly résultant dans le dossier Bin de votre site Web ou le global assembly cache. Vous pouvez également mettre le code source dans le dossier App_Code de votre site, où il sera compilé dynamiquement au moment de l’exécution. Cet exemple de code utilise la compilation dynamique, par conséquent, si vous souhaitez exécuter l’exemple de cette façon, nommez le fichier de code source et l’ajouter à un sous-dossier App_Code du répertoire racine de votre application Web. Pour une procédure pas à pas qui illustre les deux méthodes de compilation, consultez [procédure pas à pas : Contrôle serveur Web de développement et à l’aide d’un](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_CatalogZone_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_CatalogZone_Overview/CS/catalogSamples.cs#1)]
 [!code-vb[WebParts_CatalogZone_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_CatalogZone_Overview/VB/catalogSamples.vb#1)]  
  
 La troisième partie de l’exemple de code est la page Web qui contient les contrôles. Il contient un `Register` directive pour le contrôle utilisateur et l’autre pour le fichier source avec les contrôles personnalisés. Notez que dans la deuxième directive, il ne nomme pas l’assembly, car l’exemple n’utilise pas un assembly, il utilise la compilation dynamique avec le code source placé dans le sous-dossier App_Code. La page Web déclare un <xref:System.Web.UI.WebControls.WebParts.WebPartZone> contrôle et au sein de son enfant `<zonetemplate>` élément, elle déclare un <xref:System.Web.UI.WebControls.BulletedList> contrôle. Bien qu’il s’agit d’un contrôle ASP.NET standard, il aura des toutes les fonctionnalités WebPart en cours d’exécution, car le <xref:System.Web.UI.WebControls.WebParts.WebPartManager> contrôler encapsule tout contrôle serveur placé dans un <xref:System.Web.UI.WebControls.WebParts.WebPartZone> avec un <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> de l’objet, afin que les autres contrôles serveur peuvent participer au Web Applications WebPart. Également déclaré dans cette zone est personnalisé <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôle nommé `TextDisplayWebPart`. Notez que ce contrôle a un attribut de `ExportMode="All"` déclaré sur lui. Cela vous permet d’exporter un. Fichier de description de composant WebPart qui contient les valeurs de propriété du contrôle, qui peut être importé par d’autres utilisateurs pour ajouter le contrôle préconfiguré vers d’autres pages Web.  
  
> [!NOTE]
>  Pour permettre aux utilisateurs d’une application Web Parts pour exporter un fichier de description pour <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôles, vous devez également activer la fonctionnalité d’exportation dans l’application Web en ajoutant un `enableExport="true"` attribut le `<webParts>` élément (qui est un enfant de le `<system.web>`élément) dans le fichier Web.config. Exportation est désactivée par défaut, par conséquent, si vous ne sont pas encore activé l’exportation pour votre application, modifiez le fichier Web.config et le faire maintenant.  
  
 La page Web déclare également personnalisé <xref:System.Web.UI.WebControls.WebParts.CatalogZone> contrôle et, dans ce cas, un `<zonetemplate>` élément contenant un <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> contrôle. L’utilisateur utilisera ce contrôle au moment de l’exécution pour importer le. Fichier de description de composant WebPart personnalisée du <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôle.  
  
 [!code-aspx-csharp[WebParts_CatalogZone_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_CatalogZone_Overview/CS/catalogzonecs.aspx#2)]
 [!code-aspx-vb[WebParts_CatalogZone_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_CatalogZone_Overview/VB/catalogzonevb.aspx#2)]  
  
 Exécutez maintenant l’exemple de code. Chargez la page Web dans un navigateur. La première étape consiste à exporter un. Fichier de description de composant WebPart pour le `TextDisplayWebPart` contrôle. Cliquez sur le menu d’actions verbales sur le contrôle personnalisé (représenté par la flèche vers le bas dans la barre de titre), puis cliquez sur **exporter**. Suivez les instructions pour enregistrer un fichier de description pour le contrôle. Ouvrez le. Description du composant WebPart dans un éditeur et modifier la valeur de la propriété du texte de titre. Rechercher la `<property>` élément qui possède l’attribut `name="Title"`et modifier le texte du titre qui est contenu entre les balises `<property>` balises. Maintenant fermer la page Web et modifiez la source de la page dans un éditeur. Supprimer le `<aspSample:TextDisplayWebPart>` control, élément de déclaration, puis enregistrez et fermez le fichier.  
  
 Chargez la page Web dans un navigateur. Le `TextDisplayWebPart` contrôle ne doit pas apparaître, car vous l’avez supprimé. Utilisez le **Mode d’affichage** le contrôle de liste déroulante et sélectionnez **catalogue** pour passer de la page en mode de catalogue. Notez que le custom <xref:System.Web.UI.WebControls.WebParts.CatalogZone> contrôle apparaît, avec la <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> contrôle. Cliquez sur le **Parcourir** pour localiser le. Fichier de description de composant WebPart que vous avez exporté pour la `TextDisplayWebPart` contrôle. Vous pouvez cliquer sur **télécharger**, sélectionnez la case à cocher en regard du contrôle importé, puis cliquez sur **ajouter** pour l’ajouter à la page. Cliquez sur **ferme le catalogue** pour retourner la page en mode de navigation normal. Le contrôle importé doit maintenant apparaître dans la page et le titre qui apparaît dans la barre de titre du contrôle doit être le texte de titre que vous avez ajouté à la. Fichier de description du composant WebPart.  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Web.AspNetHostingPermission">pour fonctionner dans un environnement hébergé. Valeur de demande : <see cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand" /> ; valeur d'autorisation : <see cref="F:System.Web.AspNetHostingPermissionLevel.Minimal" />.</permission>
    <block subset="none" type="overrides"><para>Vous pouvez créer personnalisé <see cref="T:System.Web.UI.WebControls.WebParts.CatalogZone" /> classes si vous souhaitez contrôler davantage le rendu et le comportement de l’interface utilisateur du catalogue. Si vous n’avez pas besoin de fournir aux utilisateurs de votre contrôle la possibilité d’ajouter <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> des contrôles de façon déclarative, vous pouvez hériter directement la <see cref="T:System.Web.UI.WebControls.WebParts.CatalogZoneBase" /> classe. Si vous ne souhaitez pas activer les contrôles à ajouter de manière déclarative, la méthode la plus simple consiste à hériter de la <see cref="T:System.Web.UI.WebControls.WebParts.CatalogZone" /> classe, car elle fournit le modèle de zone essentiel.  
  
Si vous héritez de la <see cref="T:System.Web.UI.WebControls.WebParts.CatalogZone" /> (classe), vous pouvez remplacer le <see cref="M:System.Web.UI.WebControls.WebParts.CatalogZone.CreateCatalogParts" /> (méthode) et utilisez la méthode pour ajouter un objet personnalisé <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> de contrôles à un <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPartCollection" />, si vous souhaitez plus grand contrôle par programmation sur Ajout personnalisé <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> contrôles à votre zone .</para></block>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" />
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/k3w2y2tf(v=vs.100)">Vue d’ensemble du jeu de contrôles Web parties</related>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/z36h8be9(v=vs.100)">Vue d’ensemble de personnalisation de parties Web</related>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Contrôles WebPart ASP.NET</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CatalogZone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.CatalogZone.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CatalogZone();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.UI.WebControls.WebParts.CatalogZone" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Étant donné que le <xref:System.Web.UI.WebControls.WebParts.CatalogZone> contrôle implémente un modèle de zone, il est généralement utilisé de façon déclarative et vous devrez rarement créer une nouvelle instance de la classe à l’aide de la <xref:System.Web.UI.WebControls.WebParts.CatalogZone.%23ctor%2A> constructeur. Toutefois, si vous héritez de la <xref:System.Web.UI.WebControls.WebParts.CatalogZone> classe pour créer une zone personnalisée, vous pouvez utiliser le constructeur pour initialiser certaines de ses valeurs de propriété et personnaliser son apparence.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’utilisation par programmation de la <xref:System.Web.UI.WebControls.WebParts.CatalogZone.%23ctor%2A> constructeur personnalisé <xref:System.Web.UI.WebControls.WebParts.CatalogZone> contrôle. Le constructeur est utilisé pour initialiser certaines valeurs de propriété par défaut pour le contrôle. Le code suivant montre le personnalisé <xref:System.Web.UI.WebControls.WebParts.CatalogZone> classe avec le constructeur déclaré dans la partie supérieure. Pour l’intégralité du code et des instructions pour configurer et exécuter l’exemple, consultez la section exemple dans le <xref:System.Web.UI.WebControls.WebParts.CatalogZone> vue d’ensemble de la classe.  
  
 [!code-csharp[WebParts_CatalogZone_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_CatalogZone_Overview/CS/catalogSamples.cs#1)]
 [!code-vb[WebParts_CatalogZone_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_CatalogZone_Overview/VB/catalogSamples.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Contrôles WebPart ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="CreateCatalogParts">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.WebControls.WebParts.CatalogPartCollection CreateCatalogParts ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.WebControls.WebParts.CatalogPartCollection CreateCatalogParts() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.CatalogZone.CreateCatalogParts" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateCatalogParts () As CatalogPartCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Web::UI::WebControls::WebParts::CatalogPartCollection ^ CreateCatalogParts();" />
      <MemberSignature Language="F#" Value="override this.CreateCatalogParts : unit -&gt; System.Web.UI.WebControls.WebParts.CatalogPartCollection" Usage="catalogZone.CreateCatalogParts " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.CatalogPartCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crée une instance de chaque type <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> déclaré dans la zone.</summary>
        <returns><see cref="T:System.Web.UI.WebControls.WebParts.CatalogPartCollection" /> contenant les références à tous les contrôles <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> dans la zone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.WebParts.CatalogZone.CreateCatalogParts%2A> méthode est une méthode critique, car lorsqu’un utilisateur bascule une page en mode d’affichage, cette méthode crée tous les <xref:System.Web.UI.WebControls.WebParts.CatalogPart> les contrôles qui composent le catalogue de composants WebPart.  
  
 Le <xref:System.Web.UI.WebControls.WebParts.CatalogZone.CreateCatalogParts%2A> méthode dans le <xref:System.Web.UI.WebControls.WebParts.CatalogZone> fourni avec les composants WebPart, jeu de contrôles peut créer un contrôle de serveur qui hérite de la classe la <xref:System.Web.UI.WebControls.WebParts.CatalogPart> classe. Par conséquent, si vous créez un personnalisé <xref:System.Web.UI.WebControls.WebParts.CatalogPart> contrôler et déclarez sur une page dans un <xref:System.Web.UI.WebControls.WebParts.CatalogZone> contrôle, cette méthode créera votre contrôle lorsqu’un utilisateur bascule la page en mode catalogue.  
  
 Toutefois, pour diverses raisons vous souhaitez contrôle via le <xref:System.Web.UI.WebControls.WebParts.CatalogZone.CreateCatalogParts%2A> (méthode). Vous souhaitez peut-être créer uniquement certains <xref:System.Web.UI.WebControls.WebParts.CatalogPart> contrôles. Par exemple, supposons que vous créez un ensemble de personnalisation <xref:System.Web.UI.WebControls.WebParts.CatalogPart> contrôles qui ont une apparence cohérente et appartiennent à un produit individuel ou d’une organisation. Si vous souhaitez être limitée à l’aide de ces contrôles personnalisés dans un catalogue, les développeurs de pages, vous devez hériter de la <xref:System.Web.UI.WebControls.WebParts.CatalogZone> classe, substituez le <xref:System.Web.UI.WebControls.WebParts.CatalogZone.CreateCatalogParts%2A> (méthode) et autoriser la méthode à créer uniquement des contrôles du même type que vos contrôles personnalisés.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Le contrôle <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> actuel ne possède pas d'ID.</exception>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.CatalogZoneBase.CreateCatalogParts" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Contrôles WebPart ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ZoneTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.ITemplate ZoneTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ITemplate ZoneTemplate" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.CatalogZone.ZoneTemplate" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ZoneTemplate As ITemplate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::ITemplate ^ ZoneTemplate { System::Web::UI::ITemplate ^ get(); void set(System::Web::UI::ITemplate ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ZoneTemplate : System.Web.UI.ITemplate with get, set" Usage="System.Web.UI.WebControls.WebParts.CatalogZone.ZoneTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.TemplateContainer(typeof(System.Web.UI.WebControls.WebParts.CatalogZone))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.TemplateInstance(System.Web.UI.TemplateInstance.Single)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ITemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit un modèle pour contenir des contrôles enfants dans un contrôle <see cref="T:System.Web.UI.WebControls.WebParts.CatalogZone" /> dans le format de persistance de la page.</summary>
        <value><see cref="T:System.Web.UI.ITemplate" /> qui joue le rôle de conteneur pour les contrôles enfants dans la zone.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.WebParts.CatalogZone.ZoneTemplate%2A> propriété fait référence à un modèle de type <xref:System.Web.UI.ITemplate> qui est utilisé pour contenir le <xref:System.Web.UI.WebControls.WebParts.CatalogPart> contrôles dans la zone. Le modèle de zone permet aux développeurs de page déclarer le <xref:System.Web.UI.WebControls.WebParts.CatalogPart> qu’ils souhaitent utiliser dans le format de persistance, plutôt que de devoir créer tous les contrôles par programmation des contrôles.  
  
 L’accesseur set pour la <xref:System.Web.UI.WebControls.WebParts.CatalogZone.ZoneTemplate%2A> les appels de propriété le <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.InvalidateCatalogParts%2A> (méthode), ce qui force la collection de <xref:System.Web.UI.WebControls.WebParts.CatalogPart> contrôles qui sont déclarés dans le modèle de zone dans la page à actualiser. Cela garantit que la collection de contrôles référencés par la zone reste active chaque fois qu’un utilisateur modifie les contrôles de réellement déclarés dans le modèle dans la page.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Si vous souhaitez créer un personnalisé <see cref="T:System.Web.UI.WebControls.WebParts.CatalogZone" /> zone, mais que vous envisagez de créer le <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> par programmation des contrôles au lieu de permettant aux développeurs de page pour les déclarer, vous ne pas besoin de zone prise en charge du modèle, et vous pouvez hériter directement le <see cref="T:System.Web.UI.WebControls.WebParts.CatalogZoneBase" /> classe.</para></block>
        <altmember cref="T:System.Web.UI.ITemplate" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.CatalogZone.CreateCatalogParts" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">Contrôles WebPart ASP.NET</related>
      </Docs>
    </Member>
  </Members>
</Type>