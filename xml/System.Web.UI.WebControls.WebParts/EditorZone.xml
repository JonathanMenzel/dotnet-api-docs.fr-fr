<Type Name="EditorZone" FullName="System.Web.UI.WebControls.WebParts.EditorZone">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d73b7feab97c6fb4cc690149b10735e132759c91" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30590553" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class EditorZone : System.Web.UI.WebControls.WebParts.EditorZoneBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EditorZone extends System.Web.UI.WebControls.WebParts.EditorZoneBase" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.EditorZone" />
  <TypeSignature Language="VB.NET" Value="Public Class EditorZone&#xA;Inherits EditorZoneBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class EditorZone : System::Web::UI::WebControls::WebParts::EditorZoneBase" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.WebParts.EditorZoneBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.WebParts.EditorZoneDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.SupportsEventValidation</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Sert de contrôle principal dans le jeu de contrôles WebPart pour l’hébergement de contrôles <see cref="T:System.Web.UI.WebControls.WebParts.EditorPart" /> sur une page web.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dans le jeu de composants WebPart, une zone est un contrôle composite qui couvre une région définie sur une page Web et qui contient des contrôles serveur. Les fonctions principales d’une zone sont pour disposer les contrôles qu’il contient et pour fournir une interface utilisateur commune (IU) de ces contrôles. Pour obtenir des informations générales sur les zones et comment elles sont utilisées dans les applications WebPart, consultez la documentation de référence pour la base de <xref:System.Web.UI.WebControls.WebParts.WebZone> (classe), et [Web Parts Control Set Overview](http://msdn.microsoft.com/library/ff0149e4-695a-401a-8cda-53df6d7d2668).  
  
 Le <xref:System.Web.UI.WebControls.WebParts.EditorZone> contrôle est un des contrôles fondamentaux dans le jeu de composants WebPart. Une fonctionnalité clé de composants WebPart est la capacité des utilisateurs à modifier (ou personnaliser) des pages Web en fonction de leurs préférences et enregistrer ses paramètres personnalisés pour les futures sessions de navigateur. Un aspect de la modification de pages WebPart comprend l’édition de ; les utilisateurs peuvent modifier l’apparence, disposition, comportement et autres propriétés de l’élément visible <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôles. Plusieurs contrôles dans le jeu de composants WebPart fournissent les fonctionnalités d’édition, y compris la <xref:System.Web.UI.WebControls.WebParts.EditorZone> contrôle.  
  
 Un <xref:System.Web.UI.WebControls.WebParts.EditorZone> contrôle devient visible lorsqu’une page WebPart en mode édition, et il met à disposition plusieurs <xref:System.Web.UI.WebControls.WebParts.EditorPart> les contrôles qui peuvent être utilisés pour personnaliser <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôles. Le <xref:System.Web.UI.WebControls.WebParts.EditorZone> contrôle est très similaire à son parent, le <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase> (classe), avec une différence près : le <xref:System.Web.UI.WebControls.WebParts.EditorZone> contrôle fournit un modèle de zone, référencé dans son <xref:System.Web.UI.WebControls.WebParts.EditorZone.ZoneTemplate%2A> propriété. Le modèle de zone permet de déclarer le contenu dans le format de persistance de page. Les développeurs de pages peuvent placer une <xref:System.Web.UI.WebControls.WebParts.EditorZone> de contrôle dans le balisage déclaratif d’une page Web, ajouter un enfant `<zonetemplate>` élément et, dans le `<zonetemplate>` élément, ajouter des références déclaratives à <xref:System.Web.UI.WebControls.WebParts.EditorPart> contrôles.  
  
 Le <xref:System.Web.UI.WebControls.WebParts.EditorZone> contrôle possède également une méthode, <xref:System.Web.UI.WebControls.WebParts.EditorZone.CreateEditorParts%2A>, qui substitue une méthode de base dans la <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase> classe. Cette méthode est nécessaire afin qu’un <xref:System.Web.UI.WebControls.WebParts.EditorZone> contrôle peut créer le modèle de zone pour contenir les <xref:System.Web.UI.WebControls.WebParts.EditorPart> contrôles qui sont ajoutés à la zone de façon déclarative.  
  
> [!NOTE]
>  Les boutons de la <xref:System.Web.UI.WebControls.WebParts.EditorZone> l’interface utilisateur nécessitent l’écriture de scripts côté client pour fonctionner correctement. Si le script est désactivé dans le navigateur, l’utilisateur ne sera pas en mesure d’effectuer des actions via le <xref:System.Web.UI.WebControls.WebParts.EditorZone> l’interface utilisateur.  
  
## <a name="accessibility"></a>Accessibilité  
 Le balisage rendu par défaut pour ce contrôle n’est peut-être pas conforme aux normes d’accessibilité telles que les règles de priorité 1 Web contenu Accessibility Guidelines 1.0 (WCAG). Pour plus d’informations sur la prise en charge de l’accessibilité de ce contrôle, consultez [contrôles ASP.NET et l’accessibilité](http://msdn.microsoft.com/library/847a37e3-ce20-41da-b0d3-7dfb0fdae9a0).  
  
   
  
## Examples  
 L’exemple de code suivant illustre plusieurs déclarative et utilise par programmation de la <xref:System.Web.UI.WebControls.WebParts.EditorZone> classe. L’exemple crée une zone Éditeur personnalisée qui hérite de la <xref:System.Web.UI.WebControls.WebParts.EditorZone> classe et l’utilise dans une page WebPart.  
  
 L’exemple de code comprend trois parties :  
  
-   Un contrôle utilisateur qui permet de modifier les modes d’affichage sur la page Web.  
  
-   Une page Web qui fait référence à personnalisé <xref:System.Web.UI.WebControls.WebParts.EditorZone> contrôle.  
  
-   Une explication du fonctionne de l’exemple.  
  
 La première partie de cet exemple de code est le contrôle utilisateur qui permet aux utilisateurs de modifier les modes d’affichage sur une page Web. Pour plus d’informations sur les modes d’affichage et une description du code source dans ce contrôle, consultez [procédure pas à pas : modification des Modes d’affichage sur une Page WebPart](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_EditorZone_Overview#4](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_EditorZone_Overview/CS/displaymodecs.ascx#4)]
 [!code-aspx-vb[WebParts_EditorZone_Overview#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_EditorZone_Overview/VB/displaymodevb.ascx#4)]  
  
 La deuxième partie de l’exemple de code est une page Web. En haut de la page est une `Register` directive pour le contrôle utilisateur. La balise du contrôle utilisateur est déclarée dans la page avec un `uc1:` préfixe pour l’élément. Notez que sous le `<asp:WebPartZone>` élément est un `<asp:EditorZone>` élément contenant plusieurs <xref:System.Web.UI.WebControls.WebParts.EditorPart> contrôles, des balises et les propriétés configurées pour déterminer son apparence et son comportement. Il existe également un certain nombre de méthodes qui accèdent aux différents membres de le <xref:System.Web.UI.WebControls.WebParts.EditorZone> contrôler par programme.  
  
 [!code-aspx-csharp[WebParts_EditorZone_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_EditorZone_Overview/CS/editorzonecs.aspx#1)]
 [!code-aspx-vb[WebParts_EditorZone_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_EditorZone_Overview/VB/editorzonevb.aspx#1)]  
  
 Lorsque vous chargez la page dans un navigateur, vous pouvez sélectionner **Mode d’édition** dans la liste déroulante pour passer en mode édition. Pour afficher l’interface utilisateur de modification, cliquez sur le menu des verbes (la flèche vers le bas) dans la barre de titre de l’un des deux contrôles, puis cliquez sur **modifier** pour modifier le contrôle. Avec l’interface utilisateur de modification est visible, vous pouvez voir les effets des utilisations déclaratives et par programme de la <xref:System.Web.UI.WebControls.WebParts.EditorZone> membres de classe.  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Si vous souhaitez créer un personnalisé <see cref="T:System.Web.UI.WebControls.WebParts.EditorZone" /> de zone pour mieux contrôler le rendu de l’interface utilisateur, vous pouvez hériter directement de la <see cref="T:System.Web.UI.WebControls.WebParts.EditorZoneBase" /> classe, tant que vous n’avez pas besoin de fournir la prise en charge du modèle de zone pour les développeurs de page Ajouter <see cref="T:System.Web.UI.WebControls.WebParts.EditorPart" /> contrôle de façon déclarative dans la zone. Dans ce cas, vous devez ajouter tous les <see cref="T:System.Web.UI.WebControls.WebParts.EditorPart" /> par programmation des contrôles à une zone. Si vous souhaitez fournir la prise en charge du modèle de zone, vous devez hériter de la <see cref="T:System.Web.UI.WebControls.WebParts.EditorZone" /> classe.</para>
    </block>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.EditorPart" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EditorZone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.EditorZone.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EditorZone();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.UI.WebControls.WebParts.EditorZone" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateEditorParts">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.WebControls.WebParts.EditorPartCollection CreateEditorParts ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.WebControls.WebParts.EditorPartCollection CreateEditorParts() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.EditorZone.CreateEditorParts" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateEditorParts () As EditorPartCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Web::UI::WebControls::WebParts::EditorPartCollection ^ CreateEditorParts();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.EditorPartCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crée tous les contrôles <see cref="T:System.Web.UI.WebControls.WebParts.EditorPart" /> déclarés dans un modèle de zone dans le format de persistance de la page.</summary>
        <returns>
          <see cref="T:System.Web.UI.WebControls.WebParts.EditorPartCollection" /> qui contient des références à tous les contrôles <see cref="T:System.Web.UI.WebControls.WebParts.EditorPart" /> déclarés dans le modèle de zone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.WebParts.EditorZone.CreateEditorParts%2A> méthode substitue la méthode de base pour créer uniquement les <xref:System.Web.UI.WebControls.WebParts.EditorPart> les contrôles qui sont déclarés dans le modèle de zone. N’importe quel autre <xref:System.Web.UI.WebControls.WebParts.EditorPart> contrôles ajoutés à la zone doivent être ajoutés par programmation. Cela est possible, par exemple, en implémentant le <xref:System.Web.UI.WebControls.WebParts.IWebEditable> interface dans un <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôle. Puis, dans la <xref:System.Web.UI.WebControls.WebParts.IWebEditable.CreateEditorParts%2A> (méthode), vous pouvez ajouter une collection de personnalisé <xref:System.Web.UI.WebControls.WebParts.EditorPart> contrôles à une zone.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Le contrôle <see cref="T:System.Web.UI.WebControls.WebParts.EditorPart" /> actuel ne possède pas d'ID.</exception>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.IWebEditable.CreateEditorParts" />
      </Docs>
    </Member>
    <Member MemberName="ZoneTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.ITemplate ZoneTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ITemplate ZoneTemplate" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.EditorZone.ZoneTemplate" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ZoneTemplate As ITemplate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::ITemplate ^ ZoneTemplate { System::Web::UI::ITemplate ^ get(); void set(System::Web::UI::ITemplate ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.TemplateContainer(typeof(System.Web.UI.WebControls.WebParts.EditorZone))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.TemplateInstance(System.Web.UI.TemplateInstance.Single)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ITemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Fournit un modèle pour contenir des contrôles enfants dans un contrôle <see cref="T:System.Web.UI.WebControls.WebParts.EditorZone" /> dans le format de persistance de la page.</summary>
        <value>Modèle de zone <see cref="T:System.Web.UI.ITemplate" /> qui joue le rôle de conteneur pour les contrôles enfants de la zone.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.WebParts.EditorZone.ZoneTemplate%2A> propriété est la principale différence entre la <xref:System.Web.UI.WebControls.WebParts.EditorZone> classe et la base de <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase> classe. En ajoutant la prise en charge pour un modèle de zone, le <xref:System.Web.UI.WebControls.WebParts.EditorZone> classe permet aux développeurs de page placer des enfants <xref:System.Web.UI.WebControls.WebParts.EditorPart> des contrôles dans un <xref:System.Web.UI.WebControls.WebParts.EditorZone> contrôle dans le balisage déclaratif d’une page Web. Le modèle de zone agit comme un conteneur pour les contrôles enfants.  
  
> [!NOTE]
>  L’accesseur set pour la <xref:System.Web.UI.WebControls.WebParts.EditorZone.ZoneTemplate%2A> propriété appelle la <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase.InvalidateEditorParts%2A> (méthode), ce qui force la collection de <xref:System.Web.UI.WebControls.WebParts.EditorPart> contrôles déclarés dans le modèle d’être recréée. Cela entraîne des modifications dans le contenu du modèle pour être reconnus.  
  
 Pour utiliser un modèle de zone de manière déclarative dans un <xref:System.Web.UI.WebControls.WebParts.EditorZone> (contrôle), vous ajoutez une paire de `<zonetemplate>` balises et référence <xref:System.Web.UI.WebControls.WebParts.EditorPart> contrôles entre les balises. Uniquement un modèle de zone est restitué par instance d’un <xref:System.Web.UI.WebControls.WebParts.EditorZone> contrôle (par conséquent, il n’est pas nécessaire d’ajouter plusieurs `<zonetemplate>` éléments à un <xref:System.Web.UI.WebControls.WebParts.EditorZone> contrôle). En outre, le modèle de zone d’un <xref:System.Web.UI.WebControls.WebParts.EditorZone> contrôle peut contenir uniquement des contrôles part qui dérivent de la <xref:System.Web.UI.WebControls.WebParts.EditorPart> classe.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’utilisation déclarative de la <xref:System.Web.UI.WebControls.WebParts.EditorZone.ZoneTemplate%2A> propriété. Le code complet pour l’exemple est disponible dans la section exemple de la <xref:System.Web.UI.WebControls.WebParts.EditorZone> vue d’ensemble de la classe.  
  
 L’exemple de code montre comment <xref:System.Web.UI.WebControls.WebParts.EditorPart> contrôles peuvent être placés dans un `<zonetemplate>` élément dans une <xref:System.Web.UI.WebControls.WebParts.EditorZone> contrôle.  
  
 [!code-aspx-csharp[WebParts_EditorZone_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_EditorZone_Overview/CS/editorzonecs.aspx#2)]
 [!code-aspx-vb[WebParts_EditorZone_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_EditorZone_Overview/VB/editorzonevb.aspx#2)]  
  
 Lorsque vous chargez la page dans un navigateur, vous pouvez sélectionner **Mode d’édition** dans la liste déroulante pour passer en mode édition. Pour afficher l’interface utilisateur (IU) de modification, cliquez sur le menu des verbes (la flèche vers le bas) dans la barre de titre de l’un des deux contrôles, puis cliquez sur **modifier** pour modifier le contrôle. Avec l’interface utilisateur de modification est visible, vous pouvez afficher les divers <xref:System.Web.UI.WebControls.WebParts.EditorPart> les contrôles qui sont déclarés dans le `<zonetemplate>` élément.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartZone.ZoneTemplate" />
        <altmember cref="T:System.Web.UI.ITemplate" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.EditorZoneBase.InvalidateEditorParts" />
      </Docs>
    </Member>
  </Members>
</Type>