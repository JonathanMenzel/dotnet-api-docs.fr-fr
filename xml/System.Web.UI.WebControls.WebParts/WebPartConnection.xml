<Type Name="WebPartConnection" FullName="System.Web.UI.WebControls.WebParts.WebPartConnection">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="99b712d129d3cb28502a4cc5a10761afa7fd6f97" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36584857" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class WebPartConnection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit WebPartConnection extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class WebPartConnection" />
  <TypeSignature Language="C++ CLI" Value="public ref class WebPartConnection sealed" />
  <TypeSignature Language="F#" Value="type WebPartConnection = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ParseChildren(true, "Transformers")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Fournit un objet qui permet à deux contrôles <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> de former une connexion. Cette classe ne peut pas être héritée.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dans le jeu de composants WebPart, une connexion est un lien ou une association entre deux <xref:System.Web.UI.WebControls.WebParts.WebPart> (ou autre serveur ou utilisateur) pour les contrôles qui leur permet de partager des données. Cette capacité à partager des données permet de contrôles connectés à utiliser dans les méthodes qui dépassent les fonctionnalités offertes par les contrôles isolés. Par exemple, si un contrôle fournit des données de code postal et un autre contrôle peut lire ces données et fournissent des informations météorologiques locales en fonction du code postal, la capacité combinée des deux contrôles fournit plus de valeur aux utilisateurs. Pour étendre cet exemple, autres contrôles pu être créés qu’également afficher des informations basées sur un code postal, par exemple un contrôle avec des liens vers les nouvelles locales, et de tous ces contrôles pouvant fonctionner avec un code postal peuvent partager des données avec le contrôle unique qui fournit un code postal. Les utilisateurs finaux des applications WebPart peuvent créer et gérer des connexions entre tous ces contrôles compatibles directement depuis un navigateur Web, à l’aide de l’interface d’utilisateur (IU) des connexions standard fournie par le <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> contrôle ou à l’aide d’une interface personnalisée fournie par un développeur.  
  
 Cela <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> vue d’ensemble de la classe est une instruction standard des détails de base pour la création d’une connexion. Pour plus d’informations sur les configurations requises pour créer des connexions et des composants spécifiques, consultez [Web Parts Connections Overview](http://msdn.microsoft.com/library/d98cfd0f-ebd6-4871-89d5-abbd2cdef67b), ou consultez les classes de référence et les exemples de code mentionnés dans la discussion suivante. Il existe plusieurs aspects fondamentaux d’une connexion WebPart :  
  
-   Deux <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôles. Chaque connexion WebPart se compose de deux contrôles. Il est possible pour un contrôle de participer simultanément à plusieurs connexions, mais chaque connexion se compose de deux contrôles. Les contrôles peuvent dériver directement à partir de la <xref:System.Web.UI.WebControls.WebParts.WebPart> classe de base, ou ils peuvent être des autres contrôles serveur, y compris les contrôles ASP.NET, les contrôles serveur personnalisés et les contrôles utilisateur. Les contrôles qui ne dérivent pas de la <xref:System.Web.UI.WebControls.WebParts.WebPart> classe si placé dans un <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> de zone, sont automatiquement inclus dans un <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> objet au moment de l’exécution, ce qui leur permet d’hériter la <xref:System.Web.UI.WebControls.WebParts.WebPart> classe et fonction en tant que l’exécution <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôles.  
  
-   Contrôles résidant dans <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zones. Les deux <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôles et tout autre type de contrôle serveur doivent résider dans un <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zone pour pouvoir participer aux connexions WebPart (et la plupart des autres fonctionnalités WebPart).  
  
-   Fournisseurs et consommateurs. Dans chaque connexion WebPart, il existe deux contrôles : un fournisseur de données et un consommateur de données. Le fournisseur fournit des données au consommateur via une méthode de rappel spécifiée qui retourne des données sous la forme d’une interface. (Pour obtenir un exemple montrant comment créer et spécifier la méthode de rappel, consultez la section exemple de cette rubrique.) Cette méthode de rappel est appelée sur un point de connexion fournisseur. Les détails de ce point de connexion (son nom « convivial », un ID et le type de l’interface retournée) sont contenus dans un <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> objet associé au contrôle de fournisseur. Le consommateur reçoit les données via une méthode spécifiée qui peut accepter une instance de l’interface. Cette méthode est appelée sur un point de connexion consommateur, et les détails du point de connexion (nom, ID et type d’interface) sont contenus dans un <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objet associé au contrôle consommateur.  
  
-   Contrôles compatibles ou transformateur valid. Pour une connexion fonctionne, le consommateur et le fournisseur doivent être compatible (c'est-à-dire que leurs méthodes de point de connexion spécifiées peuvent fonctionner avec le même type d’interface), ou il doit être un <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> objet capable de traduire le type offert par le fournisseur en un type compris par le consommateur.  
  
-   Objet <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>. Pour une connexion existe, il doit y avoir une instance de la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> classe qui contient des références aux contrôles fournisseur et le consommateur, ainsi que les détails de leurs points de connexion. Si le fournisseur et le consommateur ne sont pas compatibles et utilisez plutôt un <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> objet pour se connecter, la connexion fait référence au transformateur.  
  
-   Moyen d’établir la connexion. Une fois que les contrôles consommateur et fournisseur compatibles ont été conçues avec les méthodes de point de connexion et placés dans une zone et un <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> objet n’est disponible, la dernière étape de base nécessaire consiste à initialiser la connexion. Cela peut se produire est aux utilisateurs de créer la connexion via l’interface utilisateur. Si vous placez un `<asp:connectionszone>` élément sur la page et l’autre requis de composants pour une connexion sont en place, à l’exécution, un utilisateur peut basculer la page en mode d’affichage, cliquez sur un verbe connect dans le menu de verbes du fournisseur ou du consommateur et une interface utilisateur de connexion (selon le <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> contrôle) apparaît. Cette interface, l’utilisateur peut initier la connexion. Un autre pour établir la connexion consiste à le faire par programme. Dans les deux cas, si via l’interface utilisateur ou par programme, la méthode sous-jacente qui initie la connexion est le même. L’application appelle la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> (méthode) (ou le <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> méthode si vous utilisez un transformateur) sur le <xref:System.Web.UI.WebControls.WebParts.WebPartManager> contrôler, en lui passant le fournisseur, le consommateur et leurs objets de point de connexion respective, et la méthode retourne un <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> objet.  
  
 Le <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> classe définit un objet qui encapsule les détails essentiels d’une connexion entre deux <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôles. La classe se compose presque exclusivement de propriétés relatives aux détails d’une connexion particulière. Plusieurs propriétés concernent le contrôle consommateur d’une connexion. Le <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> propriété référence le contrôle consommateur lui-même et le <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> propriété fait référence à l’ID de. la consommation Le <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objet, qui contient les détails du point de connexion du consommateur, est référencé par le consommateur <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> propriété. Le <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> propriété fait référence à l’ID de la <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objet. Toutes ces propriétés de connexion liées au consommateur doivent avoir une valeur affectée à ceux-ci pour créer une connexion.  
  
 La <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> classe possède également plusieurs propriétés qui sont liés au contrôle de fournisseur dans une connexion, et ceux-ci correspondent aux propriétés d’un consommateur. Le <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> propriété fait référence au contrôle de fournisseur lui-même, tandis que le <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> propriété fait référence à son ID. Le <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A> références de propriété le <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> objet et le <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> propriété fait référence à l’ID du point de connexion du fournisseur.  
  
 Plusieurs propriétés concernent l’état de la connexion. Le <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A> propriété indique si la connexion est active (échange des données actuellement) ou inactive (toujours établies mais ne partage pas activement de données). Le <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> propriété indique si la connexion est une connexion partagée (disponible pour tous les utilisateurs d’une page) ou une connexion spécifique à l’utilisateur et le <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> propriété indique si le contrôle est statique (déclaré dans le balisage de page et donc permanent) ou dynamique (créé par programme, ce qui signifie qu’il peut être supprimé).  
  
   
  
## Examples  
 L’exemple de code suivant montre comment créer une connexion simple entre deux <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôles. L’exemple illustre trois façons d’établir une connexion : de manière déclarative, en plaçant des balises pour la connexion dans le balisage de la page Web. par programme, à la création de la connexion dans le code ; et via l’interface utilisateur, en plaçant un <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> contrôle sur la page, ce qui permet aux utilisateurs d’établir une connexion.  
  
 L’exemple de code de quatre parties :  
  
-   Mode d’affichage dans une page d’un contrôle utilisateur qui permet de modifier les composants WebPart.  
  
-   Code source pour une interface et deux <xref:System.Web.UI.WebControls.WebParts.WebPart> agissant en tant que le fournisseur et le consommateur d’une connexion de contrôle.  
  
-   Une page Web pour héberger tous les contrôles et exécuter l’exemple de code.  
  
-   Explication de l’exécution de l’exemple de page.  
  
 La première partie de cet exemple de code est le contrôle utilisateur qui permet aux utilisateurs de modifier les modes d’affichage sur une page Web. Enregistrer le code source suivant dans un fichier .ascx, en lui attribuant le nom de fichier qui est affecté à la `Src` attribut de la `Register` directive pour ce contrôle utilisateur, qui est en haut de la page Web d’hébergement. Pour plus d’informations sur les modes d’affichage et une description du code source dans ce contrôle, consultez [procédure pas à pas : modification des Modes d’affichage sur une Page WebPart](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Overview#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_Overview#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/VB/DisplayModeMenuVB.ascx#6)]  
  
 La deuxième partie de l’exemple de code est le code source pour les contrôles et l’interface. Le fichier source contient une interface simple nommée `IZipCode`. Il existe également un <xref:System.Web.UI.WebControls.WebParts.WebPart> classe nommée `ZipCodeWebPart` qui implémente l’interface et agit comme le contrôle de fournisseur. Son `ProvideIZipCode` méthode est la méthode de rappel qui implémente le membre d’interface. La méthode retourne simplement une instance de l’interface. Notez que la méthode est marquée avec un `ConnectionProvider` attribut dans ses métadonnées. Il s’agit du mécanisme d’identification de la méthode comme méthode de rappel pour le point de connexion fournisseur. L’autre <xref:System.Web.UI.WebControls.WebParts.WebPart> classe est nommée `WeatherWebPart`, et agit comme le consommateur de la connexion. Cette classe a une méthode nommée `GetZipCode` qui obtient une instance de la `IZipCode` interface à partir du contrôle de fournisseur. Notez que cette méthode est marquée comme méthode de point de connexion du consommateur avec un `ConnectionConsumer` attribut dans ses métadonnées.  
  
 Pour l’exemple de code à exécuter, vous devez compiler ce code source. Vous pouvez compiler explicitement et placer l’assembly résultant dans le dossier Bin de votre site Web ou le global assembly cache. Vous pouvez également mettre le code source dans le dossier App_Code de votre site, où il sera compilé dynamiquement au moment de l’exécution. Cet exemple de code utilise la compilation dynamique. Pour une procédure pas à pas qui montre comment compiler, consultez [procédure pas à pas : développement et à l’aide d’un contrôle de serveur Web personnalisé](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/VB/ZipCodeComponent.vb#2)]  
  
 La troisième partie de l’exemple de code est la page Web. Dans la partie supérieure sont la `Register` des directives pour le contrôle utilisateur et personnalisé <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôles. Étant donné que l’exemple suppose une compilation dynamique des contrôles, le code source pour les contrôles doit être dans un sous-dossier App_Code ; le `Register` dans la page fait référence uniquement un préfixe de balise arbitraire et l’espace de noms des contrôles. Personnalisé <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôles (le fournisseur et le consommateur) sont déclarés dans la page Web `<asp:webpartzone>` élément, à l’intérieur un `<zonetemplate>` élément.  
  
 La page fournit trois moyens d’établir une connexion entre les contrôles personnalisés. La première méthode est déclarative. Dans le balisage de la page, un <`StaticConnections>` élément est déclaré et qui est un `<asp:WebPartConnections>` élément, avec les détails de consommateur et de fournisseur différentes de la connexion spécifiée en tant qu’attributs. Il s’agit d’une méthode de création d’une connexion, en la déclarant directement dans la page Web, en particulier dans le `<asp:WebPartManager>` élément. En raison de cette connexion est statique, une connexion entre les deux contrôles personnalisés est créée immédiatement la première fois que la page se charge.  
  
 Une deuxième méthode pour établir une connexion entre les contrôles est fournie par le `<asp:connectionszone>` élément dans la page. Si un utilisateur bascule une page en mode d’affichage en cours d’exécution et clique sur un verbe connect sur l’un des contrôles personnalisés, le `<asp:connectionszone>` élément restitue automatiquement l’interface utilisateur pour la création d’une connexion.  
  
 La page montre également une troisième méthode de création d’une connexion, qui consiste à le faire par programme. Dans le `Button1_Click` (méthode), le code crée un <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> objet pour le contrôle de fournisseur et récupère les détails de son point de connexion en appelant le <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> (méthode). Il exécute une tâche similaire pour le contrôle consommateur, appelant le <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> (méthode). Enfin, il crée la nouvelle <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> objet en appelant le <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> méthode sur le <xref:System.Web.UI.WebControls.WebParts.WebPartManager> contrôle.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Après le chargement de la page Web dans un navigateur, la première connexion existe déjà, car il est déclaré dans le `<StaticConnections>` élément. Entrez du texte dans le **fournisseur de Code postal** contrôle et elle seront affichera dans le contrôle consommateur. Ensuite, déconnectez les deux contrôles. À l’aide de la **Mode d’affichage** déroulante contrôle de liste, de modifier la page pour connecter le mode d’affichage. Cliquez sur le menu d’actions verbales (représenté par une flèche vers le bas dans la barre de titre) pour chacun de la <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôle et notez que chacun un **Connect** option. Il s’agit d’un verbe connect, qui apparaît dans le menu d’actions verbales uniquement lorsque la page est en mode de connexion. Cliquez sur le verbe connect sur l’un des contrôles et la connexion de l’interface utilisateur fournie par le <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> contrôle s’affiche. Cliquez sur le **déconnexion** bouton à la fin de la connexion entre les contrôles. Utilisez le **Mode d’affichage** contrôle pour retourner la page en mode de navigation. Essayez d’entrer du texte dans le fournisseur à nouveau et notez qu’étant donné que les contrôles sont déconnectés, le texte ne parvient pas à mettre à jour dans le contrôle consommateur.  
  
 Ensuite, utilisez la même méthode que ci-dessus pour basculer la page en mode d’affichage à nouveau. Cliquez sur un verbe connect sur l’un des contrôles. Cliquez sur le **créer une connexion** lien et utilisez l’interface utilisateur fournie par le <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> contrôle pour créer une connexion entre les contrôles. Il s’agit de la deuxième méthode pour créer une connexion. Notez que, dès que la connexion est formée, la dernière chaîne vous avez entré dans le contrôle de fournisseur (qui a échoué à afficher, car les contrôles sont déconnectés) apparaît soudainement dans le consommateur, car la connexion a été recréée. Cliquez sur le **déconnexion** bouton à la fin de la connexion actuelle que vous venez de créer. Retourner la page en mode de navigation. Entrez du texte dans le fournisseur pour montrer que le texte n’est pas mis à jour et que les contrôles sont déconnectés de nouveau.  
  
 Retourner la page pour vous connecter en mode d’affichage. Au lieu de cliquer sur un verbe connect, cliquez sur le **connecter les contrôles WebPart** bouton qui illustre la troisième méthode permettant d’établir une connexion. Cette approche connecte les contrôles par programmation dans une étape simple sans devoir utiliser le <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> contrôle. Notez que la connexion est créée, la dernière chaîne que vous avez entré dans le fournisseur soudainement s’affiche dans le contrôle consommateur.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionPoint" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionsZone" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" />
    <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ProviderConnectionPoint,System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint)" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebPartConnection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartConnection.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebPartConnection();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.%23ctor%2A> constructeur est public afin que l’analyseur ASP.NET peut créer une instance lorsqu’une connexion est déclarée dans le balisage d’une page Web ; ce constructeur n’est pas destiné à être utilisée dans le code du développeur.  
  
 Lorsque vous souhaitez créer un <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> de l’objet par programme, vous devez utiliser le <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A?displayProperty=nameWithType> ou <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A?displayProperty=nameWithType> méthode fourni dans le <xref:System.Web.UI.WebControls.WebParts.WebPartManager> contrôle. Ces méthodes gèrent les nombreux détails de la création d’une connexion et retournent un <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> objet.  
  
 Le <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.%23ctor%2A> constructeur pour le <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> classe définit les valeurs de la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> et <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> propriétés `true`. Par conséquent, l’état par défaut d’une nouvelle connexion doit être statique (ce qui signifie qu’il est déclaré dans le balisage de la page Web conteneur) et partagé (visible pour tous les utilisateurs de la page). Ce sera le cas lorsque vous ajoutez une connexion dans le scénario typique, en déclarant la connexion dans le balisage de la page avec un `<asp:webpartconnection>` élément. Toutefois, dans d’autres cas, une connexion aura des valeurs différentes pour ces propriétés. Par exemple, lorsque vous ajoutez une connexion par programme en créant l’objet de connexion dans le code, et l’utilisateur visualise la page dans la portée de personnalisation utilisateur par défaut, la connexion est créée en tant qu’un user(visible only to the specific user)-par dynamique, connexion.  
  
> [!NOTE]
>  Le <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> et <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> propriétés sont en lecture seule, et ces propriétés qui déterminent la nature d’une connexion sont définies en interne par le <xref:System.Web.UI.WebControls.WebParts.WebPartManager> contrôle en fonction de la façon dont une connexion est créée (façon déclarative dans le balisage de page, ou par programme via votre code ou de l’interface utilisateur).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ProviderConnectionPoint,System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint)" />
      </Docs>
    </Member>
    <Member MemberName="Consumer">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPart Consumer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPart Consumer" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Consumer As WebPart" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPart ^ Consumer { System::Web::UI::WebControls::WebParts::WebPart ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Consumer : System.Web.UI.WebControls.WebParts.WebPart" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPart</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un objet <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> qui agit comme le contrôle consommateur dans une connexion.</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> qui représente le contrôle WebPart agissant comme le contrôle consommateur dans une connexion.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chaque connexion WebPart se compose de deux contrôles qui partagent des données. Un contrôle agit comme fournisseur de données, et l’autre contrôle agit comme un consommateur, recevoir et traiter les données à partir du fournisseur. Le <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> propriété obtient une référence à la <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôle agissant comme un consommateur dans une relation de connexion.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’utilisation par programmation de la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> propriété.  
  
 L’exemple de code de quatre parties :  
  
-   Mode d’affichage dans une page d’un contrôle utilisateur qui permet de modifier les composants WebPart.  
  
-   Code source pour une interface et deux <xref:System.Web.UI.WebControls.WebParts.WebPart> agissant en tant que le fournisseur et le consommateur d’une connexion de contrôle.  
  
-   Une page Web pour héberger tous les contrôles et exécuter l’exemple de code.  
  
-   Explication de l’exécution de l’exemple de page.  
  
 La première partie de cet exemple de code est le contrôle utilisateur qui permet aux utilisateurs de modifier les modes d’affichage sur une page Web. Enregistrer le code source suivant dans un fichier .ascx, en lui attribuant le nom de fichier qui est affecté à la `Src` attribut de la `Register` directive pour ce contrôle utilisateur, qui est en haut de la page Web d’hébergement. Pour plus d’informations sur les modes d’affichage et une description du code source dans ce contrôle, consultez [procédure pas à pas : modification des Modes d’affichage sur une Page WebPart](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Consumer#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_Consumer#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/VB/DisplayModeMenuVB.ascx#6)]  
  
 La deuxième partie de l’exemple de code est le code source pour les deux <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôles servir le consommateur et le fournisseur pour la connexion et une interface utilisée pour les points de connexion. Pour l’exemple de code à exécuter, vous devez compiler ce code source. Vous pouvez compiler explicitement et placer l’assembly résultant dans le dossier Bin de votre site Web ou le global assembly cache. Vous pouvez également mettre le code source dans le dossier App_Code de votre site, où il sera compilé dynamiquement au moment de l’exécution. Cet exemple de code utilise la compilation dynamique. Pour une procédure pas à pas qui montre comment compiler, consultez [procédure pas à pas : développement et à l’aide d’un contrôle de serveur Web personnalisé](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_Consumer#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_Consumer#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/VB/ZipCodeComponent.vb#2)]  
  
 La troisième partie de l’exemple de code est le code de la page Web qui héberge les contrôles et illustre l’utilisation de la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> propriété. En haut de la page sont les `Register` des directives pour le contrôle utilisateur et les contrôles personnalisés. Étant donné que cet exemple utilise la compilation dynamique, le `Register` directive pour le fichier source n’a pas besoin de faire référence à un nom d’assembly ; elle inclut uniquement un préfixe de balise arbitraire et l’espace de noms des contrôles. Dans le `Button2_Click` (méthode), le code accède à l’objet de connexion via le <xref:System.Web.UI.WebControls.WebParts.WebPartManager> contrôler et obtient une référence au contrôle consommateur.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Consumer#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_Consumer#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Après le chargement de la page dans un navigateur, utilisez le **Mode d’affichage** contrôle de liste déroulante pour basculer la page en mode connexion. Cliquez sur le menu d’actions verbales (représenté par la flèche vers le bas dans la barre de titre) sur l’un de le <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôle, puis cliquez sur le verbe connect. Utilisez le **connecter les contrôles WebPart** bouton ou l’interface utilisateur de connexion fournie (UI), pour créer une connexion entre les deux contrôles. Cliquez sur le **afficher les informations de consommateur** bouton pour exécuter le code qui illustre le <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> propriété.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">La longueur du <see cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID" /> est égale à zéro.</exception>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider" />
      </Docs>
    </Member>
    <Member MemberName="ConsumerConnectionPoint">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint ConsumerConnectionPoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint ConsumerConnectionPoint" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ConsumerConnectionPoint As ConsumerConnectionPoint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::ConsumerConnectionPoint ^ ConsumerConnectionPoint { System::Web::UI::WebControls::WebParts::ConsumerConnectionPoint ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ConsumerConnectionPoint : System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient l'objet qui sert de point de connexion pour un contrôle qui agit comme consommateur dans une connexion.</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" /> associé au contrôle consommateur dans une connexion.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Une des étapes requises pour la création d’une connexion entre deux <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôles consiste à créer des points de connexion pour chaque contrôle. Le point de connexion consommateur est un objet qui contient les informations sur la connexion au contrôle agissant comme un consommateur. Dans le code source du consommateur, une des méthodes doit être identifiée avec le `ConnectionConsumer` attribut. Le <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objet qui est associé à un contrôle consommateur contient plus d’informations sur la méthode et l’attribut, y compris un ID pour la méthode, un nom d’affichage pour une utilisation dans l’interface utilisateur (IU), et le type d’interface que la méthode peut récupérer. Cet ensemble d’informations sur le consommateur, sa méthode de création de connexions et le type d’interface qu’il comprend forme collectivement un point de connexion consommateur.  
  
 Par défaut, un <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objet peut se connecter à un seul <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> objet à la fois. Un consommateur peut avoir plusieurs méthodes identifiées comme points de connexion consommateur possibles, mais un consommateur ne peut participer une connexion en tant que consommateur (ainsi, seul un de ses points de connexion consommateur peut être actif) à la fois. En revanche, un <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> peut se connecter à n’importe quel nombre de <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objets. Ce comportement par défaut peut être modifié en remplaçant le <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute.AllowsMultipleConnections%2A> propriété sur le <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> attribut.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’utilisation par programmation de la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> propriété.  
  
 L’exemple de quatre parties :  
  
-   Mode d’affichage dans une page d’un contrôle utilisateur qui permet de modifier les composants WebPart.  
  
-   Code source pour une interface et deux <xref:System.Web.UI.WebControls.WebParts.WebPart> agissant en tant que le fournisseur et le consommateur d’une connexion de contrôle.  
  
-   Une page Web pour héberger tous les contrôles et exécuter l’exemple de code.  
  
-   Explication de l’exécution de l’exemple de page.  
  
 La première partie de cet exemple de code est le contrôle utilisateur qui permet aux utilisateurs de modifier les modes d’affichage sur une page Web. Enregistrer le code source suivant dans un fichier .ascx, en lui attribuant le nom de fichier qui est affecté à la `Src` attribut de la `Register` directive pour ce contrôle utilisateur, qui est en haut de la page Web d’hébergement. Pour plus d’informations sur les modes d’affichage et une description du code source dans ce contrôle, consultez [procédure pas à pas : modification des Modes d’affichage sur une Page WebPart](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerConnectionPoint#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerConnectionPoint#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/VB/DisplayModeMenuVB.ascx#6)]  
  
 La deuxième partie de l’exemple de code est le code source pour les deux <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôles servir le consommateur et le fournisseur pour la connexion et une interface utilisée pour les points de connexion. Pour l’exemple de code à exécuter, vous devez compiler ce code source. Vous pouvez compiler explicitement et placer l’assembly résultant dans le dossier Bin de votre site Web ou le global assembly cache. Vous pouvez également mettre le code source dans le dossier App_Code de votre site, où il sera compilé dynamiquement au moment de l’exécution. Cet exemple de code utilise la compilation dynamique. Pour une procédure pas à pas qui montre comment compiler, consultez [procédure pas à pas : développement et à l’aide d’un contrôle de serveur Web personnalisé](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_ConsumerConnectionPoint#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPoint#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/VB/ZipCodeComponent.vb#2)]  
  
 La troisième partie de l’exemple de code est le code de la page Web qui héberge les contrôles et illustre l’utilisation de la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> propriété. Dans le `Button1_Click` (méthode), tous les objets requis pour former une connexion sont créés, y compris un <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objet. Ces objets sont tous passés à la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> méthode pour créer la connexion. Dans le `Button2_Click` (méthode), le code accède à la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> propriété et affiche certains détails de la connexion du point.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerConnectionPoint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerConnectionPoint#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Après le chargement de la page dans un navigateur, utilisez le **Mode d’affichage** contrôle de liste déroulante pour basculer la page en mode connexion. Cliquez sur le menu d’actions verbales (représenté par la flèche vers le bas dans la barre de titre) sur l’un de le <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôle, puis cliquez sur le verbe connect. Utilisez le **connecter les contrôles WebPart** bouton ou l’interface utilisateur, pour créer une connexion entre les deux contrôles de connexion fournie. Cliquez sur le **ConnectionPoint Details** bouton pour exécuter le code qui illustre le <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> propriété.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
      </Docs>
    </Member>
    <Member MemberName="ConsumerConnectionPointID">
      <MemberSignature Language="C#" Value="public string ConsumerConnectionPointID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConsumerConnectionPointID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID" />
      <MemberSignature Language="VB.NET" Value="Public Property ConsumerConnectionPointID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ConsumerConnectionPointID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ConsumerConnectionPointID : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("default")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la valeur de propriété sur une connexion qui fait référence à l'ID de l'objet servant de point de connexion consommateur pour cette connexion.</summary>
        <value>Chaîne qui contient l'ID du point de connexion consommateur.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour une connexion statique déclarée dans le balisage d’une page Web, les développeurs peuvent spécifier un point de connexion consommateur qui servira pour la connexion en affectant une valeur pour le `ConsumerConnectionPointID` de l’attribut le `<asp:webpartconnection>` élément. Si une valeur n’est pas assignée à l’attribut, le <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> valeur de propriété est utilisée.  
  
 Lorsque vous créez des connexions dynamiques (par programme), normalement vous ne devez pas définir la valeur de la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> propriété. Vous pouvez simplement appeler le <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> méthode sur le <xref:System.Web.UI.WebControls.WebParts.WebPartManager> de contrôle, en lui passant le consommateur et connexion consommateur point objets (ainsi que les autres paramètres requis) et qu’elle détermine l’ID correct à utiliser pour connexion du consommateur point. De même, lorsque vous vous déconnectez, vous pouvez appeler la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A> méthode sans avoir à spécifier le <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> valeur de propriété.  
  
> [!NOTE]
>  L’ID d’un point de connexion consommateur peut être déterminé lorsque vous désignez un <xref:System.Web.UI.WebControls.WebParts.WebPart> ou un autre contrôle serveur en tant que consommateur. Vous devez identifier une méthode dans le consommateur qui Récupère une instance d’une interface fournie par un contrôle de fournisseur ou un transformateur. Pour identifier la méthode, marquez-la avec le `ConnectionConsumer` attribut code. Lorsque vous ajoutez cet attribut, vous pouvez ajouter un paramètre de valeur de chaîne facultatif qui sert d’ID pour le consommateur <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objet. Si vous fournissez une valeur pour le paramètre d’ID facultatif, cette valeur devient la valeur de la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> propriété pour la connexion. Si vous ne fournissez pas de valeur d’ID, le <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> valeur de propriété est utilisée.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’utilisation déclarative et par programme de la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> propriété.  
  
 L’exemple de quatre parties :  
  
-   Mode d’affichage dans une page d’un contrôle utilisateur qui permet de modifier les composants WebPart.  
  
-   Code source pour une interface et deux <xref:System.Web.UI.WebControls.WebParts.WebPart> agissant en tant que le fournisseur et le consommateur d’une connexion de contrôle.  
  
-   Une page Web pour héberger tous les contrôles et exécuter l’exemple de code.  
  
-   Explication de l’exécution de l’exemple de page.  
  
 La première partie de cet exemple de code est le contrôle utilisateur qui permet aux utilisateurs de modifier les modes d’affichage sur une page Web. Enregistrer le code source suivant dans un fichier .ascx, en lui attribuant le nom de fichier qui est affecté à la `Src` attribut de la `Register` directive pour ce contrôle utilisateur, qui est en haut de la page Web d’hébergement. Pour plus d’informations sur les modes d’affichage et une description du code source dans ce contrôle, consultez [procédure pas à pas : modification des Modes d’affichage sur une Page WebPart](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerConnectionPointID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerConnectionPointID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/VB/DisplayModeMenuVB.ascx#6)]  
  
 La deuxième partie de l’exemple de code est le code source pour l’interface et les contrôles de consommateur et de fournisseur. Pour l’exemple de code à exécuter, vous devez compiler ce code source. Vous pouvez compiler explicitement et placer l’assembly résultant dans le dossier Bin de votre site Web ou le global assembly cache. Vous pouvez également mettre le code source dans le dossier App_Code de votre site, où il sera compilé dynamiquement au moment de l’exécution. Cet exemple de code utilise la compilation dynamique. Pour une procédure pas à pas qui montre comment compiler, consultez [procédure pas à pas : développement et à l’aide d’un contrôle de serveur Web personnalisé](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_ConsumerConnectionPointID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPointID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/VB/ZipCodeComponent.vb#2)]  
  
 La troisième partie de l’exemple de code est la page Web. Notez qu’une connexion est déclarée dans le balisage de page à l’aide de la `<StaticConnections>` et `<asp:WebPartsConnection>` éléments. La déclaration de connexion inclut requis `ConsumerConnectionPointID` attribut. Une deuxième méthode de création de la connexion s’affiche dans le `Button1_Click` méthode, où le code crée une nouvelle connexion, en utilisant le point de connexion défini dans le contrôle consommateur. Puis, dans le `Button2_Click` (méthode), le code accède à la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> propriété.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerConnectionPointID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerConnectionPointID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Après le chargement de la page dans un navigateur, il existe déjà une connexion en raison de la connexion statique déclarée dans la page. Entrez du texte dans le contrôle de fournisseur et notez qu’il s’affiche dans le consommateur en raison de la connexion. Ensuite, déconnectez les contrôles. À l’aide de la **Mode d’affichage** déroulante contrôle de liste, basculer la page en mode connexion. Cliquez sur le menu d’actions verbales (représenté par la flèche vers le bas dans la barre de titre) sur l’un de le <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôle, puis cliquez sur le verbe connect. Cliquez sur le **déconnexion** bouton. Utilisez le **connecter les contrôles WebPart** pour recréer une connexion entre les deux contrôles bouton. Cliquez sur le **ConnectionPoint Details** bouton pour exécuter le code qui accède à la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> valeur de propriété. La valeur est écrite dans une étiquette sous les contrôles.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID" />
      </Docs>
    </Member>
    <Member MemberName="ConsumerID">
      <MemberSignature Language="C#" Value="public string ConsumerID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConsumerID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID" />
      <MemberSignature Language="VB.NET" Value="Public Property ConsumerID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ConsumerID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ConsumerID : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la valeur de propriété sur une connexion qui fait référence à l'ID du contrôle <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> agissant comme consommateur pour cette connexion.</summary>
        <value>Chaîne qui contient l'ID du contrôle agissant comme consommateur dans une connexion.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> valeur de propriété est requise lorsque vous créez une connexion entre <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôles. Si une valeur n’est pas assignée à la propriété, une exception est levée lorsque la <xref:System.Web.UI.WebControls.WebParts.WebPartManager> contrôle tente d’activer la connexion.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’utilisation déclarative et par programme de la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> propriété.  
  
 L’exemple de quatre parties :  
  
-   Mode d’affichage dans une page d’un contrôle utilisateur qui permet de modifier les composants WebPart.  
  
-   Code source pour une interface et deux <xref:System.Web.UI.WebControls.WebParts.WebPart> agissant en tant que le fournisseur et le consommateur d’une connexion de contrôle.  
  
-   Une page Web pour héberger tous les contrôles et exécuter l’exemple de code.  
  
-   Explication de l’exécution de l’exemple de page.  
  
 La première partie de cet exemple de code est le contrôle utilisateur qui permet aux utilisateurs de modifier les modes d’affichage sur une page Web. Enregistrer le code source suivant dans un fichier .ascx, en lui attribuant le nom de fichier qui est affecté à la `Src` attribut de la `Register` directive pour ce contrôle utilisateur, qui est en haut de la page Web d’hébergement. Pour plus d’informations sur les modes d’affichage et une description du code source dans ce contrôle, consultez [procédure pas à pas : modification des Modes d’affichage sur une Page WebPart](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/VB/DisplayModeMenuVB.ascx#6)]  
  
 La deuxième partie de l’exemple de code est le code source pour l’interface et les contrôles de consommateur et de fournisseur. Pour l’exemple de code à exécuter, vous devez compiler ce code source. Vous pouvez compiler explicitement et placer l’assembly résultant dans le dossier Bin de votre site Web ou le global assembly cache. Vous pouvez également mettre le code source dans le dossier App_Code de votre site, où il sera compilé dynamiquement au moment de l’exécution. Cet exemple de code utilise la compilation dynamique. Pour une procédure pas à pas qui montre comment compiler, consultez [procédure pas à pas : développement et à l’aide d’un contrôle de serveur Web personnalisé](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_ConsumerID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ConsumerID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/VB/ZipCodeComponent.vb#2)]  
  
 La troisième partie de l’exemple de code est la page Web. Notez qu’une connexion est déclarée dans le balisage de page à l’aide de la `<StaticConnections>` et `<asp:WebPartsConnection>` éléments. La déclaration de connexion inclut requis `ConsumerID` attribut. Une deuxième méthode de création de la connexion s’affiche dans le `Button1_Click` méthode, où le code crée une nouvelle connexion, en utilisant le point de connexion défini dans le contrôle consommateur. Puis, dans le `Button2_Click` (méthode), le code accède à la valeur de la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> propriété et l’affiche dans une étiquette.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Après le chargement de la page dans un navigateur, il existe déjà une connexion en raison de la connexion statique déclarée dans la page. Entrez du texte dans le contrôle de fournisseur et notez qu’il s’affiche dans le consommateur en raison de la connexion. Ensuite, déconnectez les contrôles. À l’aide de la **Mode d’affichage** déroulante contrôle de liste, basculer la page en mode connexion. Cliquez sur le menu d’actions verbales (représenté par la flèche vers le bas dans la barre de titre) sur l’un de le <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôle, puis cliquez sur le verbe connect. Cliquez sur le **déconnexion** bouton. Utilisez le **connecter les contrôles WebPart** pour recréer une connexion entre les deux contrôles bouton. Cliquez sur le **Consumer Details** bouton pour exécuter le code qui accède à la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> valeur de propriété.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer" />
      </Docs>
    </Member>
    <Member MemberName="ID">
      <MemberSignature Language="C#" Value="public string ID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ID" />
      <MemberSignature Language="VB.NET" Value="Public Property ID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ID : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit l'ID d'un objet <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />.</summary>
        <value>Chaîne qui contient l'ID d'une <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chaque <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> objet a une valeur unique attribuée à son <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ID%2A> propriété. Il s’agit pour vous assurer qu’il existe un moyen de faire la distinction entre plusieurs connexions.  
  
 Si vous créez une connexion statique en déclarant une `<asp:webpartconnection>` élément dans une page Web et que vous n’affectez pas une valeur pour le `ID` attribut pour la connexion, une exception est levée lorsque la <xref:System.Web.UI.WebControls.WebParts.WebPartManager> contrôle tente d’activer la connexion.  
  
 Lorsque le <xref:System.Web.UI.WebControls.WebParts.WebPartManager> contrôle crée une connexion dynamique, il appelle la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicConnectionID%2A> méthode pour générer un ID unique pour la connexion.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’utilisation déclarative et par programme de la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ID%2A> propriété.  
  
 L’exemple de quatre parties :  
  
-   Mode d’affichage dans une page d’un contrôle utilisateur qui permet de modifier les composants WebPart.  
  
-   Code source pour une interface et deux <xref:System.Web.UI.WebControls.WebParts.WebPart> agissant en tant que le fournisseur et le consommateur d’une connexion de contrôle.  
  
-   Une page Web pour héberger tous les contrôles et exécuter l’exemple de code.  
  
-   Explication de l’exécution de l’exemple de page.  
  
 La première partie de cet exemple de code est le contrôle utilisateur qui permet aux utilisateurs de modifier les modes d’affichage sur une page Web. Enregistrer le code source suivant dans un fichier .ascx, en lui attribuant le nom de fichier qui est affecté à la `Src` attribut de la `Register` directive pour ce contrôle utilisateur, qui est en haut de la page Web d’hébergement. Pour plus d’informations sur les modes d’affichage et une description du code source dans ce contrôle, consultez [procédure pas à pas : modification des Modes d’affichage sur une Page WebPart](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/VB/DisplayModeMenuVB.ascx#6)]  
  
 La deuxième partie de l’exemple de code est le code source pour l’interface et les contrôles de consommateur et de fournisseur. Pour l’exemple de code à exécuter, vous devez compiler ce code source. Vous pouvez compiler explicitement et placer l’assembly résultant dans le dossier Bin de votre site Web ou le global assembly cache. Vous pouvez également mettre le code source dans le dossier App_Code de votre site, où il sera compilé dynamiquement au moment de l’exécution. Cet exemple de code utilise la compilation dynamique. Pour une procédure pas à pas qui montre comment compiler, consultez [procédure pas à pas : développement et à l’aide d’un contrôle de serveur Web personnalisé](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_ID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/VB/ZipCodeComponent.vb#2)]  
  
 La troisième partie de l’exemple de code est la page Web. Notez qu’une connexion est déclarée dans le balisage de page à l’aide de la `<StaticConnections>` et `<asp:WebPartsConnection>` éléments. La déclaration de connexion inclut requis `ID` attribut. Une deuxième méthode de création de la connexion s’affiche dans le `Button1_Click` méthode, où le code crée une nouvelle connexion, en utilisant le point de connexion défini dans le contrôle consommateur. Ici, la propriété ID n’est pas nécessaire, car la connexion est dynamique et le <xref:System.Web.UI.WebControls.WebParts.WebPartManager> contrôle affecte un ID pour la connexion. Dans le `Button2_Click` (méthode), le code accède à la valeur de la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ID%2A> propriété et l’affiche dans une étiquette.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Après le chargement de la page dans un navigateur, il existe déjà une connexion en raison de la connexion statique déclarée dans la page. Entrez du texte dans le contrôle de fournisseur et notez qu’il s’affiche dans le consommateur en raison de la connexion. Ensuite, déconnectez les contrôles. À l’aide de la **Mode d’affichage** déroulante contrôle de liste, basculer la page en mode connexion. Cliquez sur le menu d’actions verbales (représenté par la flèche vers le bas dans la barre de titre) sur l’un de le <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôle, puis cliquez sur le verbe connect. Cliquez sur le **déconnexion** bouton. Utilisez le **connecter les contrôles WebPart** pour recréer une connexion entre les deux contrôles bouton. Cliquez sur le **détails de la connexion** bouton pour exécuter le code qui accède à la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ID%2A> valeur de propriété.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsActive">
      <MemberSignature Language="C#" Value="public bool IsActive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsActive" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsActive As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsActive { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsActive : bool" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui indique si un objet <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> est actuellement établi et capable d'échanger des données entre son contrôle fournisseur et son contrôle consommateur.</summary>
        <value>
          <see langword="true" /> si la connexion est active ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A> propriété indique un état d’un <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> objet. Lorsque la connexion est dans cet état, les contrôles de fournisseur et le consommateur de la connexion sont communiquent et peuvent échanger des données via une interface commune ou un <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> objet.  
  
 Lorsqu’un utilisateur affiche une page rendue qui inclut une connexion établie en mode de navigation normal, la connexion est généralement active (sauf si elle a échoué être activé en raison des conflits ou de tout autre problème lors du chargée de la page). Dans les premières étapes du cycle de vie de page et de contrôle, la valeur de propriété est `false`. La connexion est activée juste après le <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated> événement sur le <xref:System.Web.UI.WebControls.WebParts.WebPartManager> contrôle est déclenché. Plus particulièrement, la connexion est activée après que le consommateur a récupéré une instance de l’interface spécifiée à partir du fournisseur ou un <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> objet.  
  
 Il est utile de savoir si une connexion est active dans les situations où il peut y avoir des conflits ou des problèmes de synchronisation en raison de plusieurs connexions sur une page. Par exemple, si un type quelconque de conflit entre les deux connexions, le <xref:System.Web.UI.WebControls.WebParts.WebPartManager> contrôle a la possibilité de ne pas activer une des connexions pour éviter le conflit.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’utilisation de la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A> propriété.  
  
 L’exemple comporte trois parties :  
  
-   Code source pour une interface et deux <xref:System.Web.UI.WebControls.WebParts.WebPart> agissant en tant que le fournisseur et le consommateur d’une connexion de contrôle.  
  
-   Une page Web pour héberger tous les contrôles et exécuter l’exemple de code.  
  
-   Explication de l’exécution de l’exemple de page.  
  
 La première partie de l’exemple de code est le code source pour l’interface et les contrôles de consommateur et de fournisseur. Pour l’exemple de code à exécuter, vous devez compiler ce code source. Vous pouvez compiler explicitement et placer l’assembly résultant dans le dossier Bin de votre site Web ou le global assembly cache. Vous pouvez également mettre le code source dans le dossier App_Code de votre site, où il sera compilé dynamiquement au moment de l’exécution. Cet exemple de code utilise la compilation dynamique. Pour une procédure pas à pas qui montre comment compiler, consultez [procédure pas à pas : développement et à l’aide d’un contrôle de serveur Web personnalisé](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_IsActive#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsActive/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_IsActive#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsActive/VB/ZipCodeComponent.vb#2)]  
  
 La deuxième partie de l’exemple de code est la page Web. Vers le haut est un `Register` directive qui fait référence au code source pour les deux compilés dynamiquement <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôles. La connexion statique est déclarée dans le `<StaticConnections>` élément sur la page. Dans la `<script>` élément sont les quatre gestionnaires d’événements. Chaque gestionnaire d’événements vérifie la valeur de la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A> propriété sur la connexion statique et écrit un message à la <xref:System.Web.UI.WebControls.Label> contrôle indiquant si la connexion est active ou inactive à ce stade du cycle de vie de page et de contrôle. Cela montre à quel point la connexion devient active et qu’il reste actif après la page est rendue.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_IsActive#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsActive/CS/wpConnectIsActiveCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_IsActive#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsActive/VB/wpConnectIsActiveVB.aspx#1)]  
  
 Charger la page dans un navigateur. La connexion statique est déjà créée, et les messages ont déjà été écrits dans les étiquettes affichant si la connexion était active à différents points dans le cycle de vie de page et de contrôle. Cliquez sur le **détails de la connexion** bouton et notez que la connexion n’est pas active à ce stade, mais que la connexion est réactivée après chaque le <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated> événement, et qu’il est toujours active (et restera ainsi) après le <xref:System.Web.UI.Control.PreRender> événement de la page.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPart.IsStatic" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.ActivateConnections" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivating" />
      </Docs>
    </Member>
    <Member MemberName="IsShared">
      <MemberSignature Language="C#" Value="public bool IsShared { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsShared" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsShared As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsShared { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsShared : bool" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui indique si un objet <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> est visible pour tous les utilisateurs ou uniquement pour l'utilisateur actuel.</summary>
        <value>
          <see langword="true" /> si la connexion est partagée ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Comme pour les <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôles, un <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> objet peut être partagé ou une instance par utilisateur. Une instance partagée signifie que la connexion est visible pour tous les utilisateurs d’une page Web, et une instance par utilisateur signifie que la connexion est visible uniquement à un utilisateur spécifique.  
  
 En général, la façon de qu'une connexion est ajoutée à une page détermine si la connexion est partagée. Si la connexion est déclarée dans le balisage d’une page Web, alors que la connexion est partagée et le <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> valeur de propriété est `true`. En outre, si la page Web est dans la portée de personnalisation partagée lorsqu’une connexion est ajoutée, la connexion est également partagée. En général, lorsqu’un utilisateur utilise le `<asp:connectionszone>` interface utilisateur (IU) pour ajouter une connexion, la page est dans la portée de personnalisation utilisateur, la connexion n’est pas partagée et le <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> valeur de propriété est `false`.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’utilisation par programme de la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> propriété.  
  
 L’exemple de code comprend cinq parties :  
  
-   Mode d’affichage dans une page d’un contrôle utilisateur qui permet de modifier les composants WebPart.  
  
-   Code source pour une interface et deux <xref:System.Web.UI.WebControls.WebParts.WebPart> agissant en tant que le fournisseur et le consommateur d’une connexion de contrôle.  
  
-   Une page Web pour héberger tous les contrôles et exécuter l’exemple de code.  
  
-   Une entrée dans le fichier Web.config qui est requis pour exécuter l’exemple.  
  
-   Explication de l’exécution de l’exemple de page.  
  
 La première partie de cet exemple de code est le contrôle utilisateur qui permet aux utilisateurs de modifier les modes d’affichage sur une page Web. Enregistrer le code source suivant dans un fichier .ascx, en lui attribuant le nom de fichier qui est affecté à la `Src` attribut de la `Register` directive pour ce contrôle utilisateur, qui est en haut de la page Web d’hébergement. Pour plus d’informations sur les modes d’affichage et une description du code source dans ce contrôle, consultez [procédure pas à pas : modification des Modes d’affichage sur une Page WebPart](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_IsShared#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_IsShared#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/VB/DisplayModeMenuVB.ascx#6)]  
  
 La deuxième partie de l’exemple de code est le code source pour l’interface et les contrôles de consommateur et de fournisseur. Pour l’exemple de code à exécuter, vous devez compiler ce code source. Vous pouvez compiler explicitement et placer l’assembly résultant dans le dossier Bin de votre site Web ou le global assembly cache. Vous pouvez également mettre le code source dans le dossier App_Code de votre site, où il sera compilé dynamiquement au moment de l’exécution. Cet exemple de code utilise la compilation dynamique. Pour une procédure pas à pas qui montre comment compiler, consultez [procédure pas à pas : développement et à l’aide d’un contrôle de serveur Web personnalisé](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_IsShared#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_IsShared#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/VB/ZipCodeComponent.vb#2)]  
  
 La troisième partie de l’exemple de code est la page Web. Dans le `Button2_Click` méthode, il vérifie le <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> propriété de la connexion existante et affiche le résultat dans la page.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_IsShared#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_IsShared#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 La quatrième partie de l’exemple de code est une entrée dans le fichier Web.config qui est requis pour le compte d’utilisateur qui exécutera l’exemple pour être en mesure de modifier la page dans la portée de personnalisation partagée. Pour ce faire, vous devez disposer d’une entrée dans le fichier Web.config dans le `<system.web>` section qui ressemble à l’exemple suivant.  
  
```  
<webParts>  
  <personalization>  
    <authorization>  
      <allow users="UserAccount"  
             roles="admin"  
             verbs="enterSharedScope"/>  
    </authorization>            
  </personalization>  
</webParts>  
```  
  
 Après le chargement de la page dans un navigateur, utilisez le **Mode d’affichage** contrôle de liste déroulante pour passer de la page pour connecter le mode d’affichage. Cliquez sur le **connecter les contrôles WebPart** bouton pour établir une connexion. Ensuite, cliquez sur le **détails de la connexion** bouton à afficher si la connexion est partagée. Si vous avez créé la connexion avec la page dans la portée de personnalisation utilisateur par défaut, le <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> valeur de propriété doit être `false` pour la connexion.  
  
 Dans le menu de verbes de l’un de le <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôles (indiqués par la flèche vers le bas dans la barre de titre), cliquez sur le verbe connect. Lorsque l’interface utilisateur de connexion s’affiche, cliquez sur le **déconnexion** bouton à la fin de la connexion. Utilisez le **Mode d’affichage** contrôle pour retourner la page en mode de navigation.  
  
 Dans le **Mode d’affichage** (contrôle), sélectionnez le **Shared** option pour basculer la page en portée de personnalisation de partagée. Suivez les mêmes étapes que celles présentées ci-dessus pour créer une connexion et cliquez à nouveau sur le **détails de la connexion** bouton à afficher si la connexion est partagée. Dans ce cas, la valeur de la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> la propriété doit être `true`.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPart.IsShared" />
      </Docs>
    </Member>
    <Member MemberName="IsStatic">
      <MemberSignature Language="C#" Value="public bool IsStatic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStatic" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStatic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStatic { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStatic : bool" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui indique si un objet <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> est déclaré dans le balisage d'une page Web ou a été créé par programme.</summary>
        <value>
          <see langword="true" /> si la connexion est statique ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les connexions entre les contrôles WebPart peuvent être statique ou dynamique. Une connexion statique est déclarée dans le balisage d’une page Web, à l’aide un `<asp:WebPartConnection>` élément. Les connexions dynamiques sont créées par programme ou lorsqu’un utilisateur crée une connexion via l’interface utilisateur (IU) définie par le <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> contrôle.  
  
 Les connexions statiques sont des objets partagés, ce qui signifie qu’ils sont disponibles pour tous les utilisateurs de la page Web. En outre, ils sont essentiellement permanents, car, comme statique <xref:System.Web.UI.WebControls.WebParts.WebPart> (contrôle), ils ne peuvent pas être supprimés définitivement.  
  
> [!NOTE]
>  Lors d’un objet de connexion statique ne peut pas être supprimé définitivement, il peut être déconnecté définitivement. Dans ce cas, l’objet déconnecté existerait sur le serveur, mais un utilisateur final ne serait jamais informé de l’existence de l’objet dans une page.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’utilisation par programmation de la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> propriété.  
  
 L’exemple de code comprend trois parties :  
  
-   Code source pour une interface et deux <xref:System.Web.UI.WebControls.WebParts.WebPart> agissant en tant que le fournisseur et le consommateur d’une connexion de contrôle.  
  
-   Une page Web pour héberger les contrôles et exécuter l’exemple de code.  
  
-   Explication de l’exécution de l’exemple de page.  
  
 La première partie de l’exemple de code est le code source pour l’interface et les contrôles de consommateur et de fournisseur. Pour l’exemple de code à exécuter, vous devez compiler ce code source. Vous pouvez compiler explicitement et placer l’assembly résultant dans le dossier Bin de votre site Web ou le global assembly cache. Vous pouvez également mettre le code source dans le dossier App_Code de votre site, où il sera compilé dynamiquement au moment de l’exécution. Cet exemple de code utilise la compilation dynamique. Pour une procédure pas à pas qui montre comment compiler, consultez [procédure pas à pas : développement et à l’aide d’un contrôle de serveur Web personnalisé](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_IsStatic#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsStatic/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_IsStatic#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsStatic/VB/ZipCodeComponent.vb#2)]  
  
 La deuxième partie de l’exemple de code est la page Web. Vers le haut est un `Register` directive qui fait référence au code source pour les deux compilés dynamiquement <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôles. La connexion statique est déclarée dans le `<StaticConnections>` élément sur la page. Le `Button1_Click` accède à la méthode le <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> propriété pour vérifier si la connexion est statique.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_IsStatic#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsStatic/CS/wpConnectIsStaticCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_IsStatic#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsStatic/VB/wpConnectIsStaticVB.aspx#1)]  
  
 Charger la page dans un navigateur. La connexion statique est déjà créée. Entrez du texte dans le contrôle de fournisseur et notez que le texte est affiché dans le contrôle consommateur. Cliquez sur le **détails de la connexion** bouton pour afficher la valeur de la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> propriété.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.StaticConnections" />
      </Docs>
    </Member>
    <Member MemberName="Provider">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPart Provider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPart Provider" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Provider As WebPart" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPart ^ Provider { System::Web::UI::WebControls::WebParts::WebPart ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Provider : System.Web.UI.WebControls.WebParts.WebPart" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.Provider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPart</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> contrôle qui agit comme fournisseur dans une connexion WebPart.</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> qui agit comme fournisseur de données.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chaque connexion WebPart se compose de deux <xref:System.Web.UI.WebControls.WebParts.WebPart> --les contrôles consommateur et fournisseur – et <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> propriété retourne une référence au contrôle fournisseur dans une connexion.  
  
 Comme son équivalent dans une connexion (contrôle consommateur), le contrôle de fournisseur est requis pour établir une connexion. Si vous créez la connexion par programme, ou en le déclarant dans le format de persistance de page, vous devez spécifier un contrôle d’agir en tant que le fournisseur pour une connexion.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’utilisation de la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> propriété.  
  
 L’exemple de code comprend trois parties :  
  
-   Code source pour une interface et deux <xref:System.Web.UI.WebControls.WebParts.WebPart> agissant en tant que le fournisseur et le consommateur d’une connexion de contrôle.  
  
-   Une page Web pour héberger les contrôles et exécuter l’exemple de code.  
  
-   Explication de l’exécution de l’exemple de page.  
  
 La première partie de l’exemple de code est le code source pour l’interface et les contrôles de consommateur et de fournisseur. Pour l’exemple de code à exécuter, vous devez compiler ce code source. Vous pouvez compiler explicitement et placer l’assembly résultant dans le dossier Bin de votre site Web ou le global assembly cache. Vous pouvez également mettre le code source dans le dossier App_Code de votre site, où il sera compilé dynamiquement au moment de l’exécution. Cet exemple de code utilise la compilation dynamique. Pour une procédure pas à pas qui montre comment compiler, consultez [procédure pas à pas : développement et à l’aide d’un contrôle de serveur Web personnalisé](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_Provider#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Provider/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_Provider#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Provider/VB/ZipCodeComponent.vb#2)]  
  
 La deuxième partie de l’exemple de code est la page Web. Vers le haut est un `Register` directive qui fait référence au code source pour les deux compilés dynamiquement <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôles. La connexion statique est déclarée dans le `<StaticConnections>` élément sur la page. Notez que dans le `<asp:webpartconnection>` élément, le `ProviderID` attribut avec l’ID du contrôle fournisseur qui lui est affecté. Cela est nécessaire pour identifier le fournisseur pour la connexion statique. Le `Button1_Click` accède à la méthode le <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> propriété et écrit certains de ses détails dans une étiquette.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Provider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Provider/CS/wpConnectProviderCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_Provider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Provider/VB/wpConnectProviderVB.aspx#1)]  
  
 Charger la page dans un navigateur. La connexion statique est déjà créée. Entrez du texte dans le contrôle de fournisseur et notez que le texte est affiché dans le contrôle consommateur. Cliquez sur le **détails du fournisseur** bouton pour afficher certaines valeurs de propriété accédées via la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> propriété.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">La longueur de la valeur de la propriété <see cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID" /> est égale à zéro.</exception>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID" />
      </Docs>
    </Member>
    <Member MemberName="ProviderConnectionPoint">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.ProviderConnectionPoint ProviderConnectionPoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.ProviderConnectionPoint ProviderConnectionPoint" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ProviderConnectionPoint As ProviderConnectionPoint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::ProviderConnectionPoint ^ ProviderConnectionPoint { System::Web::UI::WebControls::WebParts::ProviderConnectionPoint ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ProviderConnectionPoint : System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.ProviderConnectionPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient l'objet qui sert de point de connexion pour un contrôle <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> agissant comme fournisseur pour une connexion.</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /> associé au contrôle fournisseur dans une connexion.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Une des étapes requises pour la création d’une connexion entre deux <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôles consiste à créer des points de connexion pour chaque contrôle. Le point de connexion fournisseur est un objet qui contient les informations sur la connexion au contrôle agissant comme fournisseur. Dans le code source du fournisseur, une des méthodes doit être identifiée avec le `ConnectionProvider` attribut. Le <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> qui est associé à un fournisseur de contrôle contient des détails sur la méthode et l’attribut, y compris un ID pour la méthode, un nom d’affichage pour une utilisation dans l’interface utilisateur (IU), et le type d’instance d’interface que la méthode peut retourner à un consommateur contrôle. Cet ensemble d’informations sur le fournisseur, sa méthode de création de connexions et le type d’interface qu’il fournit, forme collectivement un point de connexion fournisseur.  
  
 Par défaut, un <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> peut se connecter à un seul <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> objet à la fois. Un consommateur peut avoir plusieurs méthodes identifiées comme points de connexion consommateur possibles, mais un consommateur ne peut participer une connexion en tant que consommateur (ainsi, seul un de ses points de connexion consommateur peut être actif) à la fois. En revanche, un <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> peut se connecter à n’importe quel nombre de <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objets par défaut. Par exemple, un contrôle de fournisseur qui fournit un code postal peut être connecté à plusieurs contrôles consommateur qui utilisent un code postal pour créer différents types de données basée sur un code postal, telles que les données météorologiques, actualités et ainsi de suite. Ce comportement par défaut peut être modifié en remplaçant le <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute.AllowsMultipleConnections%2A> propriété sur le <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> attribut.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’utilisation par programmation de la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A> propriété.  
  
 L’exemple de quatre parties :  
  
-   Mode d’affichage dans une page d’un contrôle utilisateur qui permet de modifier les composants WebPart.  
  
-   Code source pour une interface et deux <xref:System.Web.UI.WebControls.WebParts.WebPart> agissant en tant que le fournisseur et le consommateur d’une connexion de contrôle.  
  
-   Une page Web pour héberger tous les contrôles et exécuter l’exemple de code.  
  
-   Explication de l’exécution de l’exemple de page.  
  
 La première partie de cet exemple de code est le contrôle utilisateur qui permet aux utilisateurs de modifier les modes d’affichage sur une page Web. Enregistrer le code source suivant dans un fichier .ascx, en lui attribuant le nom de fichier qui est affecté à la `Src` attribut de la `Register` directive pour ce contrôle utilisateur, qui est en haut de la page Web d’hébergement. Pour plus d’informations sur les modes d’affichage et une description du code source dans ce contrôle, consultez [procédure pas à pas : modification des Modes d’affichage sur une Page WebPart](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderConnectionPoint#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderConnectionPoint#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/VB/DisplayModeMenuVB.ascx#6)]  
  
 La deuxième partie de l’exemple de code est le code source pour les deux <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôles servir le consommateur et le fournisseur pour la connexion et une interface utilisée pour les points de connexion. Pour l’exemple de code à exécuter, vous devez compiler ce code source. Vous pouvez compiler explicitement et placer l’assembly résultant dans le dossier Bin de votre site Web ou le global assembly cache. Vous pouvez également mettre le code source dans le dossier App_Code de votre site, où il sera compilé dynamiquement au moment de l’exécution. Cet exemple de code utilise la compilation dynamique. Pour une procédure pas à pas qui montre comment compiler, consultez [procédure pas à pas : développement et à l’aide d’un contrôle de serveur Web personnalisé](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_ProviderConnectionPoint#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ProviderConnectionPoint#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/VB/ZipCodeComponent.vb#2)]  
  
 La troisième partie de l’exemple de code est le code de la page Web qui héberge les contrôles et illustre l’utilisation de la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A> propriété. Dans le `Button1_Click` (méthode), tous les objets requis pour former une connexion sont créés, y compris un <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> objet. Notez l’appel à la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> méthode sur le <xref:System.Web.UI.WebControls.WebParts.WebPartManager> contrôle. Les différents objets créés sont tous passés à la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> méthode pour créer la connexion. Dans le `Button2_Click` (méthode), le code accède à la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A> propriété et affiche certains détails de la connexion du point.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderConnectionPoint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderConnectionPoint#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Après le chargement de la page dans un navigateur, utilisez le **Mode d’affichage** contrôle de liste déroulante pour basculer la page en mode connexion. Cliquez sur le menu d’actions verbales (représenté par la flèche vers le bas dans la barre de titre) sur l’un de le <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôle, puis cliquez sur le verbe connect. Utilisez le **connecter les contrôles WebPart** bouton ou l’interface utilisateur, pour créer une connexion entre les deux contrôles de connexion fournie. Cliquez sur le **ConnectionPoint Details** bouton pour exécuter le code qui illustre le <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A> propriété.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
      </Docs>
    </Member>
    <Member MemberName="ProviderConnectionPointID">
      <MemberSignature Language="C#" Value="public string ProviderConnectionPointID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ProviderConnectionPointID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID" />
      <MemberSignature Language="VB.NET" Value="Public Property ProviderConnectionPointID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ProviderConnectionPointID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ProviderConnectionPointID : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("default")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la valeur de propriété sur une connexion qui fait référence à l'ID de l'objet servant de point de connexion fournisseur pour cette connexion.</summary>
        <value>Chaîne qui contient l'ID d'un objet point de connexion fournisseur.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour une connexion statique déclarée dans le balisage d’une page Web, les développeurs peuvent spécifier le point de connexion fournisseur servira pour la connexion en affectant une valeur pour le `ProviderConnectionPointID` de l’attribut le `<asp:webpartconnection>` élément. Si une valeur n’est pas assignée à l’attribut, le <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> valeur de propriété est utilisée.  
  
 Lorsque vous créez des connexions dynamiques (par programme), normalement vous ne devez pas définir la valeur de la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> propriété. Vous pouvez simplement appeler le <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> méthode sur le <xref:System.Web.UI.WebControls.WebParts.WebPartManager> de contrôle, en lui passant le fournisseur et la connexion du fournisseur de point objets (ainsi que les autres paramètres requis) et qu’elle détermine l’ID correct à utiliser pour connexion du fournisseur point. De même, lorsque vous vous déconnectez, vous pouvez appeler la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A> méthode sans avoir à spécifier le <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> valeur de propriété.  
  
> [!NOTE]
>  L’ID du point de connexion d’un fournisseur peut être déterminé lorsque vous désignez un <xref:System.Web.UI.WebControls.WebParts.WebPart> ou un autre contrôle serveur en tant que fournisseur. Vous devez identifier une méthode de rappel dans le fournisseur qui sert d’une instance d’une interface contenant des données à un consommateur. Pour identifier la méthode, marquez-la avec le `ConnectionProvider` attribut code. Lorsque vous ajoutez cet attribut, vous pouvez ajouter un paramètre de valeur de chaîne facultatif qui sert d’ID pour le fournisseur <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> objet. Si vous fournissez une valeur pour le paramètre d’ID facultatif, cette valeur devient la valeur de la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> propriété pour la connexion. Si vous ne fournissez pas de valeur d’ID, le <xref:System.Web.UI.WebControls.WebParts.WebPartManager> contrôle affecte un ID par défaut lorsque l’objet est créé.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’utilisation déclarative et par programme de la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> propriété.  
  
 L’exemple de quatre parties :  
  
-   Mode d’affichage dans une page d’un contrôle utilisateur qui permet de modifier les composants WebPart.  
  
-   Code source pour une interface et deux <xref:System.Web.UI.WebControls.WebParts.WebPart> agissant en tant que le fournisseur et le consommateur d’une connexion de contrôle.  
  
-   Une page Web pour héberger tous les contrôles et exécuter l’exemple de code.  
  
-   Explication de l’exécution de l’exemple de page.  
  
 La première partie de cet exemple de code est le contrôle utilisateur qui permet aux utilisateurs de modifier les modes d’affichage sur une page Web. Enregistrer le code source suivant dans un fichier .ascx, en lui attribuant le nom de fichier qui est affecté à la `Src` attribut de la `Register` directive pour ce contrôle utilisateur, qui est en haut de la page Web d’hébergement. Pour plus d’informations sur les modes d’affichage et une description du code source dans ce contrôle, consultez [procédure pas à pas : modification des Modes d’affichage sur une Page WebPart](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderConnectionPointID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderConnectionPointID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/VB/DisplayModeMenuVB.ascx#6)]  
  
 La deuxième partie de l’exemple de code est le code source pour l’interface et les contrôles de consommateur et de fournisseur. Pour l’exemple de code à exécuter, vous devez compiler ce code source. Vous pouvez compiler explicitement et placer l’assembly résultant dans le dossier Bin de votre site Web ou le global assembly cache. Vous pouvez également mettre le code source dans le dossier App_Code de votre site, où il sera compilé dynamiquement au moment de l’exécution. Cet exemple de code utilise la compilation dynamique. Pour une procédure pas à pas qui montre comment compiler, consultez [procédure pas à pas : développement et à l’aide d’un contrôle de serveur Web personnalisé](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_ProviderConnectionPointID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ProviderConnectionPointID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/VB/ZipCodeComponent.vb#2)]  
  
 La troisième partie de l’exemple de code est la page Web. Notez qu’une connexion est déclarée dans le balisage de page à l’aide de la `<StaticConnections>` et `<asp:WebPartsConnection>` éléments. La déclaration de connexion inclut requis `ProviderConnectionPointID` attribut. Une deuxième méthode de création de la connexion s’affiche dans le `Button1_Click` (méthode), où le code crée une nouvelle connexion à l’aide du point de connexion (et l’ID) défini dans le contrôle de fournisseur. Puis, dans le `Button2_Click` (méthode), le code accède à la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> propriété.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderConnectionPointID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderConnectionPointID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Après le chargement de la page dans un navigateur, il existe déjà une connexion en raison de la connexion statique déclarée dans la page. Entrez du texte dans le contrôle de fournisseur et notez qu’il s’affiche dans le consommateur en raison de la connexion. Ensuite, déconnectez les contrôles. À l’aide de la **Mode d’affichage** déroulante contrôle de liste, basculer la page en mode connexion. Cliquez sur le menu d’actions verbales (représenté par la flèche vers le bas dans la barre de titre) sur l’un de le <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôle, puis cliquez sur le verbe connect. Cliquez sur le **déconnexion** bouton. Utilisez le **connecter les contrôles WebPart** pour recréer une connexion entre les deux contrôles bouton. Cliquez sur le **ConnectionPoint Details** bouton pour exécuter le code qui accède à la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> valeur de propriété. La valeur est écrite dans une étiquette sous les contrôles.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID" />
      </Docs>
    </Member>
    <Member MemberName="ProviderID">
      <MemberSignature Language="C#" Value="public string ProviderID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ProviderID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID" />
      <MemberSignature Language="VB.NET" Value="Public Property ProviderID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ProviderID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ProviderID : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la valeur de propriété sur une connexion qui fait référence à l'ID du contrôle <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> agissant comme fournisseur pour cette connexion.</summary>
        <value>Chaîne qui contient l'ID du contrôle fournisseur.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> valeur de propriété est requise lorsque vous créez une connexion entre deux <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôles. Si une valeur n’est pas assignée à la propriété, une exception est levée lorsque la <xref:System.Web.UI.WebControls.WebParts.WebPartManager> contrôle tente d’activer la connexion.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’utilisation déclarative et par programme de la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> propriété.  
  
 L’exemple de quatre parties :  
  
-   Mode d’affichage dans une page d’un contrôle utilisateur qui permet de modifier les composants WebPart.  
  
-   Code source pour une interface et deux <xref:System.Web.UI.WebControls.WebParts.WebPart> agissant en tant que le fournisseur et le consommateur d’une connexion de contrôle.  
  
-   Une page Web pour héberger tous les contrôles et exécuter l’exemple de code.  
  
-   Explication de l’exécution de l’exemple de page.  
  
 La première partie de cet exemple de code est le contrôle utilisateur qui permet aux utilisateurs de modifier les modes d’affichage sur une page Web. Enregistrer le code source suivant dans un fichier .ascx, en lui attribuant le nom de fichier qui est affecté à la `Src` attribut de la `Register` directive pour ce contrôle utilisateur, qui est en haut de la page Web d’hébergement. Pour plus d’informations sur les modes d’affichage et une description du code source dans ce contrôle, consultez [procédure pas à pas : modification des Modes d’affichage sur une Page WebPart](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/VB/DisplayModeMenuVB.ascx#6)]  
  
 La deuxième partie de l’exemple de code est le code source pour l’interface et les contrôles de consommateur et de fournisseur. Pour l’exemple de code à exécuter, vous devez compiler ce code source. Vous pouvez compiler explicitement et placer l’assembly résultant dans le dossier Bin de votre site Web ou le global assembly cache. Vous pouvez également mettre le code source dans le dossier App_Code de votre site, où il sera compilé dynamiquement au moment de l’exécution. Cet exemple de code utilise la compilation dynamique. Pour une procédure pas à pas qui montre comment compiler, consultez [procédure pas à pas : développement et à l’aide d’un contrôle de serveur Web personnalisé](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_ProviderID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ProviderID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/VB/ZipCodeComponent.vb#2)]  
  
 La troisième partie de l’exemple de code est la page Web. Notez qu’une connexion est déclarée dans le balisage de page à l’aide de la `<StaticConnections>` et `<asp:WebPartsConnection>` éléments. La déclaration de connexion inclut requis `ProviderID` attribut. Une deuxième méthode de création de la connexion s’affiche dans le `Button1_Click` méthode, où le code crée une nouvelle connexion, en utilisant le point de connexion défini dans le contrôle consommateur. Puis, dans le `Button2_Click` (méthode), le code accède à la valeur de la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> propriété et l’affiche dans une étiquette.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Après le chargement de la page dans un navigateur, il existe déjà une connexion en raison de la connexion statique déclarée dans la page. Entrez du texte dans le contrôle de fournisseur et notez qu’il s’affiche dans le consommateur en raison de la connexion. Ensuite, déconnectez les contrôles. Pour ce faire, utilisez le **Mode d’affichage** contrôle de liste déroulante pour basculer la page en mode connexion. Cliquez sur le menu d’actions verbales (représenté par la flèche vers le bas dans la barre de titre) sur l’un de le <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôle, puis cliquez sur le verbe connect. Cliquez sur le **déconnexion** bouton et les contrôles sont déconnectés. Ensuite, utilisez le **connecter les contrôles WebPart** pour recréer une connexion entre les deux contrôles bouton. Cliquez sur le **Consumer Details** bouton pour exécuter le code qui accède à la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> valeur de propriété.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartConnection.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="webPartConnection.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Substitue la méthode <see cref="M:System.Object.ToString" /> héritée et retourne un nom de type court pour l'objet de connexion.</summary>
        <returns>Chaîne qui contient le nom de type court (non qualifié) d'un <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode est utilisée principalement pour des raisons de commodité par les concepteurs de contrôles. Elle améliore l’apparence des objets de connexion en mode Design en utilisant le nom de type plus court, par opposition à un nom de type qualifié complet. Toutefois, la méthode peut être appelée à tout moment dans votre code où vous souhaitez connaître le nom de type d’un objet de connexion.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment appeler le <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ToString%2A> méthode pour retourner le nom de type court un <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> objet.  
  
 L’exemple de code comprend trois parties :  
  
-   Code source pour une interface et deux <xref:System.Web.UI.WebControls.WebParts.WebPart> agissant en tant que le fournisseur et le consommateur d’une connexion de contrôle.  
  
-   Une page Web pour héberger les contrôles et exécuter l’exemple de code.  
  
-   Explication de l’exécution de l’exemple de page.  
  
 La première partie de l’exemple de code est le code source pour l’interface et les contrôles de consommateur et de fournisseur. Pour l’exemple de code à exécuter, vous devez compiler ce code source. Vous pouvez compiler explicitement et placer l’assembly résultant dans le dossier Bin de votre site Web ou le global assembly cache. Vous pouvez également mettre le code source dans le dossier App_Code de votre site, où il sera compilé dynamiquement au moment de l’exécution. Cet exemple de code utilise la compilation dynamique. Pour une procédure pas à pas qui montre comment compiler, consultez [procédure pas à pas : développement et à l’aide d’un contrôle de serveur Web personnalisé](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_ToString#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ToString/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ToString#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ToString/VB/ZipCodeComponent.vb#2)]  
  
 La deuxième partie de l’exemple de code est la page Web. Vers le haut est un `Register` directive qui fait référence au code source pour les deux compilés dynamiquement <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôles. La connexion statique est déclarée dans le `<StaticConnections>` élément sur la page. Le `Button1_Click` les appels de méthode le <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ToString%2A> méthode pour écrire le nom de type de la connexion à une étiquette.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ToString#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ToString/CS/wpConnectToStringCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ToString#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ToString/VB/wpConnectToStringVB.aspx#1)]  
  
 Charger la page dans un navigateur. La connexion statique est déjà créée. Entrez du texte dans le contrôle de fournisseur et notez que le texte est affiché dans le contrôle consommateur. Cliquez sur le **détails de la connexion** bouton pour exécuter la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ToString%2A> (méthode).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.ToString" />
      </Docs>
    </Member>
    <Member MemberName="Transformer">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPartTransformer Transformer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPartTransformer Transformer" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Transformer As WebPartTransformer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPartTransformer ^ Transformer { System::Web::UI::WebControls::WebParts::WebPartTransformer ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Transformer : System.Web.UI.WebControls.WebParts.WebPartTransformer" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartTransformer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un objet <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" /> utilisé pour transformer des données entre deux points de connexion normalement incompatibles dans une connexion WebPart.</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" /> La valeur par défaut est <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dans une connexion WebPart, il existe deux façons dans lequel les contrôles fournisseur et le consommateur de la connexion peuvent se connecter. Ils peuvent se connecter directement via leurs respectifs <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> objets et un type d’interface compris par les deux contrôles. Ou, s’ils sont incompatibles, ils peuvent se connecter indirectement, à l’aide un <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> objet qui transforme une instance d’interface à partir d’un fournisseur dans un type compris par un consommateur.  
  
 Lorsqu’un transformateur est nécessaire dans le cadre d’une connexion, le <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer%2A> propriété fournit une référence à la <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> objet. Vous pouvez ajouter un transformateur pour une connexion de façon déclarative dans le balisage d’une page Web, en ajoutant une balise pour un transformateur personnalisé (ou un des transformateurs fournis avec le jeu de composants WebPart) dans le `<asp:WebPartConnection>` élément. Vous pouvez également ajouter un transformateur par programme, la création d’une instance de celui-ci dans votre code et en appelant le <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%28System.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ProviderConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ConsumerConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPartTransformer%29> méthode sur le <xref:System.Web.UI.WebControls.WebParts.WebPartManager> contrôle pour créer la connexion, en lui passant l’objet de transformateur avec les autres paramètres requis.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" />
      </Docs>
    </Member>
    <Member MemberName="Transformers">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPartTransformerCollection Transformers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPartTransformerCollection Transformers" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Transformers As WebPartTransformerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPartTransformerCollection ^ Transformers { System::Web::UI::WebControls::WebParts::WebPartTransformerCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Transformers : System.Web.UI.WebControls.WebParts.WebPartTransformerCollection" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerDefaultProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartTransformerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une collection d'objets <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" /> utilisés en interne par le jeu de contrôles WebPart.</summary>
        <value>Collection <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformerCollection" /> contenant des objets <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers%2A> propriété n’est jamais conçue pour une utilisation par les développeurs. Pour accéder au transformateur associé à une connexion, les développeurs doivent toujours utiliser le <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer%2A> propriété.  
  
 Le <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers%2A> propriété est utilisée en interne par le contrôle WebPart défini pour permettre aux développeurs de page déclarer des éléments de la classe transformer dans le `<asp:webpartconnection>` élément dans le balisage d’une page Web.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformerCollection" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer" />
      </Docs>
    </Member>
  </Members>
</Type>