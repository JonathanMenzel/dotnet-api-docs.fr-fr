<Type Name="ProviderConnectionPoint" FullName="System.Web.UI.WebControls.WebParts.ProviderConnectionPoint">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a89f471ebf510f4c98fbb34bac13429460f0b44f" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36385723" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ProviderConnectionPoint : System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi ProviderConnectionPoint extends System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
  <TypeSignature Language="VB.NET" Value="Public Class ProviderConnectionPoint&#xA;Inherits ConnectionPoint" />
  <TypeSignature Language="C++ CLI" Value="public ref class ProviderConnectionPoint : System::Web::UI::WebControls::WebParts::ConnectionPoint" />
  <TypeSignature Language="F#" Value="type ProviderConnectionPoint = class&#xA;    inherit ConnectionPoint" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.WebParts.ConnectionPoint</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Définit un objet point de connexion qui active un contrôle serveur agissant en tant que fournisseur pour établir une connexion avec un consommateur.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dans chaque connexion WebPart entre deux contrôles serveur, chaque contrôle doit avoir (parmi d’autres exigences) un objet de point de connexion associé qui lui permet de se connecter à l’autre contrôle et de fournir ou de consommer des données, selon que le contrôle est désigné comme le fournisseur ou le consommateur pour la connexion. A <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> objet contient en général les détails de la connexion d’un contrôle d’un contrôle et le type de données qu’il peut partager. Pour un contrôle agissant comme fournisseur dans une connexion, son point de connexion doit être un <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> objet. Pour plus d’informations sur les connexions WebPart et les points de connexion, consultez les rubriques répertoriées dans la section Voir aussi ci-dessous.  
  
 Pour créer un <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> de l’objet, plusieurs étapes sont requises :  
  
1.  Créez une interface. Lorsqu’une fournisseur partage des données avec un consommateur, il le fait en obtenant une instance d’une interface et en retournant cette instance à un consommateur.  
  
2.  Implémentez l’interface dans un fournisseur. A <xref:System.Web.UI.WebControls.WebParts.WebPart> ou autre contrôle serveur (tout type de contrôle de serveur dans un <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zone peut être utilisé) qui sera le fournisseur doit implémenter l’interface créée dans la première étape.  
  
3.  Identifier une méthode de rappel. Une méthode dans le fournisseur doit être identifiée comme la méthode de rappel pour établir une connexion. Cette méthode retourne une instance de l’interface implémentée à un consommateur. L’approche WebPart pour identifier une méthode de rappel dans le fournisseur consiste à ajouter un `ConnectionProvider` attribut de métadonnées (défini par le <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> classe) à la méthode qui retourne l’instance d’interface. Lorsque l’attribut est ajouté, le seul paramètre requis est un nom d’affichage à utiliser pour le point de connexion fournisseur. Paramètres facultatifs peuvent également être ajoutés, tel qu’un ID pour le point de connexion.  
  
 Une fois un contrôle a été équipé d’agir en tant que fournisseur, le contrôle peut participer aux connexions (en supposant qu’un contrôle consommateur est de même équipé et disponible). Pour créer une connexion statique et déclarative dans le balisage d’une page Web, les développeurs peuvent utiliser le `<asp:webpartconnection>` élément. Si le `ConnectionProvider` attribut dans le code source fournisseur qui identifie la méthode de rappel spécifie un ID pour le point de connexion, alors cette valeur doit être assignée à la `ProviderConnectionPointID` d’attribut dans le `<asp:webpartconnection>` élément sur une page. L’une des raisons qu’un développeur peut spécifier un ID pour un point de connexion fournisseur sont s’il existe plusieurs points de connexion dans le contrôle de fournisseur. Si un ID n’est pas spécifié pour le point de connexion fournisseur dans le contrôle de fournisseur, une valeur pas nécessairement être affecté à la `ProviderConnectionPointID` d’attribut dans la page, car la connexion sera créée à l’aide de la valeur par défaut obtenue à partir de la <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> champ.  
  
 Pour créer une connexion dans le code, les développeurs doivent créer un nouveau <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> objet en appelant le <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> (méthode) et en lui passant l’ID du contrôle de fournisseur, ainsi que l’ID ou l’index de la période définie par <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> objet dans le contrôle de fournisseur. Retourné <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> référence d’objet, ainsi que d’une référence au contrôle de fournisseur, une contrôle consommateur et une <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> d’objet, sont tous transmis à la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> pour créer une nouvelle méthode <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> objet.  
  
 Bien que les développeurs peuvent utiliser des points de connexion fournisseur dans le cadre de l’établissement de connexions, de façon déclarative ou par programme, les utilisateurs peuvent également interagir avec les points de connexion fournisseur pour établir des connexions via l’interface utilisateur (IU). Si les développeurs déclarent un <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> contrôle sur une page Web, il fournit une interface utilisateur d’exécution pour les utilisateurs à créer des connexions. Si les utilisateurs choisissent le contrôle consommateur comme point de départ pour établir la connexion en cliquant sur son verbe connect (ils pourraient également choisir le fournisseur, il n’existe aucune différence dans la connexion résultante), dans l’interface utilisateur, ils verront un contrôle de liste déroulante avec le nom complet de la connexion fournisseur disponible point (ou points s’il existe plusieurs). Les utilisateurs doivent sélectionner un point de connexion fournisseur pour créer une connexion.  
  
 A <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> objet associe directement à un contrôle fournisseur spécifique et stocke des détails sur une connexion dans les propriétés qu’il hérite de la base de <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> classe. Par exemple, dans la <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> propriété, un point de connexion fournisseur garde le type d’interface retourné par le fournisseur. Si le fournisseur et le consommateur d’une connexion à la fois de travail avec le même type d’interface, les contrôles sont compatibles et capables d’établir une connexion directe. Si le fournisseur et le consommateur ne peut pas fonctionner avec le même type d’interface, ils ne sont pas compatibles et que vous devez utiliser un <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> objet à traduire le point de connexion fournisseur <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> valeur dans un type que le consommateur peut fonctionner avec. Une autre propriété héritée importante est la <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> lors de la création de connexions de point de propriété, qui fournit un nom convivial à afficher dans l’interface utilisateur pour les utilisateurs à choisir une connexion de fournisseur. Le nom complet est le paramètre requis lorsque les développeurs ajoutent un `ConnectionProvider` d’attribut à la méthode de rappel dans un contrôle de fournisseur. Hérité <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> propriété est également utile, comme indiqué ci-dessus, car elle fournit un identificateur unique pour un point de connexion fournisseur dans le cas où un fournisseur a plusieurs points de connexion. Un fournisseur peut avoir plusieurs <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> objets définis qu’il contient et dans ce cas, lorsque les développeurs ajoutent le `ConnectionProvider` attribut à une méthode, ils doivent spécifier une valeur d’ID pour distinguer chaque point de connexion. Une autre propriété héritée notable est la <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> propriété qui indique si un point de connexion fournisseur peut se connecter simultanément à plusieurs consommateurs. Valeur de cette propriété est `true` par défaut pour les points de connexion fournisseur (alors que la valeur par défaut `false` pour les points de connexion consommateur).  
  
 Le <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> classe ajoute plusieurs méthodes uniques aux membres qu’elle hérite la <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> classe. Le <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> méthode récupère une instance de l’interface de la méthode de rappel rendra aux consommateurs. Le <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A> méthode récupère des interfaces de consommateur supplémentaires qui font partie d’une connexion existante, mais pas les interfaces permettent d’établir la connexion.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment créer une connexion de manière déclarative, par programme ou via l’interface utilisateur, dans chaque cas, utilisez un point de connexion fournisseur.  
  
 L’exemple de quatre parties :  
  
-   Mode d’affichage dans une page d’un contrôle utilisateur qui permet de modifier les composants WebPart.  
  
-   Code source pour une interface et deux <xref:System.Web.UI.WebControls.WebParts.WebPart> agissant en tant que le fournisseur et le consommateur d’une connexion de contrôle.  
  
-   Une page Web pour héberger tous les contrôles et exécuter l’exemple de code.  
  
-   Explication de l’exécution de l’exemple de page.  
  
 La première partie de cet exemple de code est le contrôle utilisateur qui permet aux utilisateurs de modifier les modes d’affichage sur une page Web. Enregistrer le code source suivant dans un fichier .ascx, en lui attribuant le nom de fichier qui est affecté à la `Src` attribut de la `Register` directive pour ce contrôle utilisateur, qui est en haut de la page Web d’hébergement. Pour plus d’informations sur les modes d’affichage et une description du code source dans ce contrôle, consultez [procédure pas à pas : modification des Modes d’affichage sur une Page WebPart](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/DisplayModeMenuVB.ascx#6)]  
  
 La deuxième partie de l’exemple de code est le code source pour les contrôles et l’interface. Le fichier source contient une interface simple nommée `IZipCode`. Il existe également un <xref:System.Web.UI.WebControls.WebParts.WebPart> classe nommée `ZipCodeWebPart` qui implémente l’interface et agit comme le contrôle de fournisseur. Son `ProvideIZipCode` méthode est la méthode de rappel qui implémente le membre d’interface. La méthode retourne simplement une instance de l’interface. Notez que la méthode est marquée avec un `ConnectionProvider` attribut dans ses métadonnées. Il s’agit du mécanisme d’identification de la méthode comme méthode de rappel pour le point de connexion fournisseur. L’autre <xref:System.Web.UI.WebControls.WebParts.WebPart> classe est nommée `WeatherWebPart`, et agit comme le consommateur de la connexion. Cette classe a une méthode nommée `GetZipCode` qui obtient une instance de la `IZipCode` interface à partir du contrôle de fournisseur. Notez que cette méthode est marquée comme méthode de point de connexion du consommateur avec un `ConnectionConsumer` attribut dans ses métadonnées. Il s’agit du mécanisme d’identification de la méthode de point de connexion dans le contrôle consommateur.  
  
 Pour l’exemple de code à exécuter, vous devez compiler ce code source. Vous pouvez compiler explicitement et placer l’assembly résultant dans le dossier Bin de votre site Web ou le global assembly cache. Vous pouvez également mettre le code source dans le dossier App_Code de votre site, où il sera compilé dynamiquement au moment de l’exécution. Cet exemple de code utilise la compilation dynamique. Pour une procédure pas à pas qui montre comment compiler, consultez [procédure pas à pas : développement et à l’aide d’un contrôle de serveur Web personnalisé](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/ZipCodeComponent.vb#2)]  
  
 La troisième partie de l’exemple de code est la page Web. Dans la partie supérieure sont `Register` directives pour enregistrer les contrôles personnalisés qui forment la connexion et le contrôle utilisateur qui permet aux utilisateurs de modifier les modes d’affichage sur la page. La connexion elle-même est créée de manière déclarative dans le `<staticconnections>` élément sur la page. Cela vous montre une façon de créer une connexion--Remarque la `ProviderConnectionPointID` d’attribut dans le `<asp:webpartconnection>` élément. Vous pouvez également créer la connexion par programme. le code qui est dans le `Button1_Click` (méthode). Dans ce cas, un <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> objet est créé et est ensuite transmise à une méthode qui crée la connexion réelle. Si la connexion est créée de manière déclarative ou par programme, les points de connexion doivent toujours être spécifiés pour le fournisseur et le consommateur. Le `Button2_Click` accède à la méthode le <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> les objets par le fournisseur et le consommateur et écrit certaines de leurs valeurs de propriété sur une étiquette dans la page.  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 Après le chargement de la page dans un navigateur, cliquez sur le **détails du Point de connexion** bouton. Plus d’informations sur les points de connexion fournisseur et de consommateur établis dans la connexion déclarative s’affiche. Ensuite, utilisez le **Mode d’affichage** contrôle de liste déroulante pour basculer la page en mode connexion. Dans le menu des verbes le **ZIP Code Consumer** <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôle (représenté par une flèche vers le bas dans la barre de titre), cliquez sur le verbe connect. La connexion de l’interface utilisateur s’affiche, créé automatiquement par le `<asp:connectionszone>` contrôle déclaré dans la page. Il s’agit d’une autre façon de créer une connexion (via l’interface utilisateur), ainsi que les méthodes déclaratives et par programme abordées précédemment. Cliquez sur le **déconnexion** bouton pour terminer la connexion existante. Cliquez sur le **créer une connexion à un fournisseur** lien. L’interface utilisateur affiche maintenant un contrôle déroulant qui répertorie le nom complet de point de connexion fournisseur. Sélectionnez le point de connexion dans la liste déroulante, puis cliquez sur **connexion** pour établir la connexion. Ensuite, cliquez sur **déconnexion** à nouveau. Ensuite, cliquez sur le **connexion dynamique** bouton permettant de créer une connexion par programme. Utilisez le **Mode d’affichage** contrôle pour retourner la page en mode de navigation. Cliquez sur le **détails du Point de connexion** bouton là encore, pour indiquer une fois de plus de détails sur l’objet de point de connexion fournisseur.  
  
 L’exemple a illustré l’établissement d’une connexion et à l’aide d’un point de connexion fournisseur de trois manières : une connexion statique déclarée dans le balisage de page Web ; une connexion créée dans le code qui a utilisé un <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> objet et une connexion créée par un utilisateur via l’interface utilisateur de connexion.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ProviderConnectionPoint (System.Reflection.MethodInfo callbackMethod, Type interfaceType, Type controlType, string displayName, string id, bool allowsMultipleConnections);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.MethodInfo callbackMethod, class System.Type interfaceType, class System.Type controlType, string displayName, string id, bool allowsMultipleConnections) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callbackMethod As MethodInfo, interfaceType As Type, controlType As Type, displayName As String, id As String, allowsMultipleConnections As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ProviderConnectionPoint(System::Reflection::MethodInfo ^ callbackMethod, Type ^ interfaceType, Type ^ controlType, System::String ^ displayName, System::String ^ id, bool allowsMultipleConnections);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.WebParts.ProviderConnectionPoint : System.Reflection.MethodInfo * Type * Type * string * string * bool -&gt; System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" Usage="new System.Web.UI.WebControls.WebParts.ProviderConnectionPoint (callbackMethod, interfaceType, controlType, displayName, id, allowsMultipleConnections)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="callbackMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="interfaceType" Type="System.Type" />
        <Parameter Name="controlType" Type="System.Type" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="allowsMultipleConnections" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="callbackMethod">La méthode dans le contrôle fournisseur qui retourne une instance d'interface aux consommateurs pour établir une connexion.</param>
        <param name="interfaceType">
          <see cref="T:System.Type" /> de l'interface que le fournisseur sert aux consommateurs.</param>
        <param name="controlType">
          <see cref="T:System.Type" /> du contrôle fournisseur avec lequel le point de connexion fournisseur est associé.</param>
        <param name="displayName">Nom complet convivial pour le point de connexion fournisseur qui s'affiche aux utilisateurs dans l'interface utilisateur de connexion.</param>
        <param name="id">Un identificateur unique pour le point de connexion fournisseur.</param>
        <param name="allowsMultipleConnections">Une valeur Boolean indiquant si le point de connexion fournisseur peut posséder plusieurs connexions simultanées avec les consommateurs.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.%23ctor%2A> constructeur pour la <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> classe appelle simplement le constructeur de base, en lui passant les divers paramètres et de l’initialisation de la classe de base.  
  
 Le constructeur de classe de base vérifie un nombre de paramètres pour un point de connexion et peut lever plusieurs exceptions. Pour obtenir la liste des exceptions possibles, consultez la section Exceptions.  
  
 Vous pouvez appeler la <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.%23ctor%2A> constructeur pour créer votre propre instance de la <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> classe. Toutefois, dans les cas où vous êtes simplement l’établissement d’une connexion et n’étendez ne pas la classe, vous devez appeler la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> méthode pour retourner un objet de point de connexion existant d’un fournisseur.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment dériver à partir de la <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> classe pour créer un point de connexion fournisseur personnalisé.  
  
 L’exemple de code comprend trois parties :  
  
-   Un fichier source qui contient un fournisseur <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôler, un consommateur <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôle et personnalisé <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> objet.  
  
-   Une page Web qui héberge les contrôles dans une connexion statique.  
  
-   Explication de l’exécution de l’exemple de code.  
  
 La première partie de l’exemple de code est la source pour le fournisseur et le consommateur <xref:System.Web.UI.WebControls.WebParts.WebPart> des contrôles et personnalisé <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> classe, nommée `TableProviderConnectionPoint`. Notez que le constructeur de la `TableProviderConnectionPoint` classe appelle le constructeur de base, en lui passant les paramètres requis, comme indiqué dans la section Paramètres. Notez également que, dans le `TableProviderWebPart` (classe), le `GetConnectionInterface` méthode est spécifiée en tant que la méthode de rappel pour les connexions et le `ConnectionProvider` attribut déclare personnalisée `TableProviderConnectionPoint` en tant que paramètre. Cela montre comment créer un point de connexion fournisseur personnalisé et puis l’associer à un contrôle de fournisseur. Cet exemple suppose que le code source est compilé dynamiquement, donc vous devez placer le fichier de code source dans un sous-dossier App_Code de votre application Web.  
  
 [!code-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/connectionControls.cs#1)]  
  
 La deuxième partie de l’exemple de code est la page Web qui héberge les contrôles personnalisés dans une connexion WebPart statique. En haut de la page est une `Register` directive à déclarer un préfixe et l’espace de noms pour les contrôles personnalisés. La connexion est déclarée à l’aide un `<asp:webpartconnection>` contrôles d’élément et le fournisseur et le consommateur sont déclarés dans un `<asp:webpartzone>` élément.  
  
 [!code-aspx-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#3](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/defaultcs.aspx#3)]  
  
 Charger la page dans un navigateur. La connexion entre les contrôles déjà existe, et le consommateur affiche les données à partir du fournisseur, car la connexion a été déclarée comme une connexion statique dans la page.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="callbackMethod" /> est <see langword="null" />.  \-ou- <paramref name="interfaceType" /> est <see langword="null" />.  \-ou- <paramref name="controlType" /> est <see langword="null" />.  \-ou- <paramref name="displayName" /> est <see langword="null" /> ou est une chaîne vide ("").</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="controlType" /> n'est pas de même type que le contrôle fournisseur (ou une classe valide dérivée de celui-ci).</exception>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
      </Docs>
    </Member>
    <Member MemberName="GetObject">
      <MemberSignature Language="C#" Value="public virtual object GetObject (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetObject(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetObject(System::Web::UI::Control ^ control);" />
      <MemberSignature Language="F#" Value="abstract member GetObject : System.Web.UI.Control -&gt; obj&#xA;override this.GetObject : System.Web.UI.Control -&gt; obj" Usage="providerConnectionPoint.GetObject control" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">Contrôle agissant en tant que fournisseur dans une connexion WebPart.</param>
        <summary>Appelle la méthode de rappel dans un contrôle fournisseur qui obtient une instance d'interface à retourner aux consommateurs.</summary>
        <returns>
          <see cref="T:System.Object" /> qui est une instance de l'interface qu'un fournisseur retourne aux consommateurs pour établir une connexion.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode retourne un objet à partir du contrôle de fournisseur qui est une instance de l’interface utilisée pour établir une connexion. Le type de l’objet sera le type de l’interface implémentée. Par exemple, deux interfaces qui sont implémentées pour les connexions dans les composants WebPart sont contrôle <xref:System.Web.UI.WebControls.WebParts.IWebPartField> et <xref:System.Web.UI.WebControls.WebParts.IWebPartRow>. Lorsque le <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> méthode est appelée sur un <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> de l’objet, si le fournisseur associé implémente une de ces interfaces, l’objet retourné sera du même type.  
  
 Le <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> méthode est appelée par <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> objets lorsqu’une connexion est activée. Il s’agit d’une étape essentielle qui établit une connexion et commence le processus qui permet à deux contrôles de partager des données.  
  
 Le contrôle consommateur dans une connexion doit être en mesure de travailler avec le même type d’interface en tant que le fournisseur. Si elle n’est pas le cas, les contrôles sont incompatibles et un <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> objet doit être utilisé pour établir une connexion.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="control" /> est <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSecondaryInterfaces">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection GetSecondaryInterfaces (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection GetSecondaryInterfaces(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Web::UI::WebControls::WebParts::ConnectionInterfaceCollection ^ GetSecondaryInterfaces(System::Web::UI::Control ^ control);" />
      <MemberSignature Language="F#" Value="abstract member GetSecondaryInterfaces : System.Web.UI.Control -&gt; System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection&#xA;override this.GetSecondaryInterfaces : System.Web.UI.Control -&gt; System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" Usage="providerConnectionPoint.GetSecondaryInterfaces control" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">Contrôle agissant en tant que fournisseur dans une connexion WebPart.</param>
        <summary>Obtient une collection facultative d'interfaces secondaires qui peuvent être prises en charge par un point de connexion fournisseur.</summary>
        <returns>
          <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" /> d'interfaces supplémentaires fournies par le contrôle agissant en tant que fournisseur.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un objet de point de connexion fournisseur a toujours une interface par défaut qui est utilisée pour établir une connexion avec les consommateurs. Une instance de l’interface par défaut est récupérée en appelant le <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> méthode sur un <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> objet.  
  
 Toutefois, certains contrôles fournisseur seront implémenter plusieurs interfaces à fournir aux consommateurs dans le cadre d’une connexion. Ces interfaces, qui ne sont pas la valeur par défaut que ceux utilisés pour établir une connexion, sont appelées interfaces secondaires. Le <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A> méthode fournit un moyen de retourner une collection de références aux interfaces secondaires, tout comme le <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> méthode retourne une référence à l’interface par défaut.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Le <see cref="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)" /> méthode dans la <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /> classe ne contient pas d’implémentation ; elle retourne une collection vide d’interfaces secondaires. Pour implémenter cette méthode, vous devez hériter de la <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /> classe et substituer cette méthode, en retournant un ensemble spécifique d’interfaces secondaires.</para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>