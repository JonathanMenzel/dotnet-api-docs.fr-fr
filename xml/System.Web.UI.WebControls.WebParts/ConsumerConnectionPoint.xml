<Type Name="ConsumerConnectionPoint" FullName="System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="cd78a1f3ef930919223c519dad4ba41ea2113649" />
    <Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="11/17/2018" />
    <Meta Name="ms.locfileid" Value="51914498" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ConsumerConnectionPoint : System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi ConsumerConnectionPoint extends System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
  <TypeSignature Language="VB.NET" Value="Public Class ConsumerConnectionPoint&#xA;Inherits ConnectionPoint" />
  <TypeSignature Language="C++ CLI" Value="public ref class ConsumerConnectionPoint : System::Web::UI::WebControls::WebParts::ConnectionPoint" />
  <TypeSignature Language="F#" Value="type ConsumerConnectionPoint = class&#xA;    inherit ConnectionPoint" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.WebParts.ConnectionPoint</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Définit un objet de point de connexion qui active un contrôle serveur agissant comme un consommateur pour former une connexion avec un fournisseur.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dans chaque connexion WebPart entre deux contrôles serveur, chaque contrôle doit avoir (parmi d’autres exigences) un objet de point de connexion associé qui lui permet de se connecter à l’autre et de fournir ou de consommer des données, selon que le contrôle est désigné comme le fournisseur ou le consommateur pour la connexion. Un <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> objet contient en général les détails de la connexion d’un contrôle à un autre contrôle et le type de données peut partager. Pour un contrôle agissant comme consommateur dans une connexion, son point de connexion doit être un <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objet. Pour plus d’informations sur les connexions WebPart et les points de connexion, lisez les rubriques répertoriées dans la section Voir aussi.  
  
 Pour créer un <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> de l’objet, plusieurs étapes sont nécessaires :  
  
1.  Activer un contrôle consommateur référencer une instance d’interface. Un <xref:System.Web.UI.WebControls.WebParts.WebPart> ou autre contrôle serveur (n’importe quel type de contrôle serveur qui sera ajouté à un <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zone peut être utilisée) doit être en mesure de consommer des données à partir d’une instance d’interface spécifique. Le contrôle ne doive pas implémenter l’interface ; seul le fournisseur doit implémenter. Le consommateur peut fonctionner soit avec le type exact d’interface pris en charge par un fournisseur ou, dans le cas contraire, un <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> objet peut être utilisé pour transformer des données à partir du type d’interface d’un fournisseur à un type compris par le consommateur. La méthode courante pour activer un consommateur consiste à déclarer un champ privé pour contenir une référence au type d’interface souhaitée.  
  
2.  Identifier une méthode de rappel. Une méthode dans le consommateur doit être identifiée en tant que la méthode de rappel pour établir une connexion avec le fournisseur. Cette méthode récupère une instance de l’interface que le fournisseur implémente et affecte à un champ privé (par exemple) créé dans la première étape. L’approche de composants WebPart pour identifier une méthode de rappel dans le consommateur consiste à ajouter un `ConnectionConsumer` attribut de métadonnées (défini par le <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> classe) à la méthode qui reçoit l’instance d’interface. Lorsque l’attribut est ajouté, le seul paramètre requis est un nom complet à utiliser pour le point de connexion consommateur. Paramètres facultatifs peuvent également être ajoutés, tels que d’un code.  
  
3.  Processus et les données à partir de l’instance d’interface de sortie. Exécuter tout traitement interne en fonction des besoins sur les données, et puis généralement un contrôle consommateur restitue les données à la page. Un moyen courant d’effectuer cette opération consiste à substituer le contrôle <xref:System.Web.UI.Control.OnPreRender%2A> (méthode).  
  
    > [!NOTE]
    >  Lors d’une demande synchrone, un consommateur doit demander les données directement à partir du fournisseur pendant ou immédiatement après le <xref:System.Web.UI.Control.PreRender> événement. Lors d’une demande asynchrone, si la méthode de rappel du fournisseur n’est pas appelée à tout moment pendant le rendu, le développeur peut supposer qu’aucune donnée n’a été envoyée au consommateur.  
  
 Une fois un contrôle a été équipé pour agir en tant que consommateur, le contrôle peut participer aux connexions (en supposant qu’un contrôle fournisseur est également équipé et disponible). Pour créer une connexion statique et déclarative dans le balisage d’une page Web, les développeurs peuvent utiliser le `<asp:webpartconnection>` élément. Si le `ConnectionConsumer` attribut dans le code source du consommateur qui identifie la méthode de rappel spécifie un ID pour le point de connexion, puis cette valeur doit être affectée à la `ConsumerConnectionPointID` d’attribut dans le `<asp:webpartconnection>` élément sur une page. Une raison qu’un développeur peut spécifier un ID pour un point de connexion de consommateur est s’il existe plusieurs points de connexion définies dans le contrôle consommateur. Si un ID n’est pas spécifié pour le point de connexion consommateur dans le contrôle consommateur, une valeur ne devra pas être affectée à la `ConsumerConnectionPointID` d’attribut dans la page, car la connexion sera créée à l’aide d’une valeur par défaut obtenue à partir de la <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> champ.  
  
 Pour créer une connexion dans le code, les développeurs doivent créer un nouveau <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objet en appelant le <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> (méthode) et en lui passant l’ID du contrôle consommateur, ainsi que l’ID ou l’index de l’élément défini <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objet dans le contrôle consommateur. Retourné <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> de l’objet, ainsi qu’une référence au contrôle consommateur, une référence au contrôle fournisseur et un correspondant <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> d’objet, sont tous passé à la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> méthode pour créer un nouveau <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> objet.  
  
 Bien que les développeurs peuvent utiliser des points de connexion consommateur dans le cadre de l’établissement de connexions, de manière déclarative ou par programme, les utilisateurs peuvent également interagir avec les points de connexion consommateur pour établir des connexions via l’interface utilisateur (IU). Si les développeurs déclarent un <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> contrôle sur une page Web, il fournit une interface utilisateur d’exécution aux utilisateurs de créer des connexions. Si les utilisateurs choisissent le contrôle fournisseur comme point de départ pour établir la connexion en cliquant sur son verbe connect (ils peuvent également choisir le consommateur ; il n’existe aucune différence dans la connexion résultante), dans l’interface utilisateur, ils verront un contrôle de liste déroulante avec le afficher les noms du disponible consommateur connexion (ou points s’il existe plusieurs) que le fournisseur peut envoyer les données. Les utilisateurs doivent sélectionner un point de connexion consommateur pour établir une connexion.  
  
 Un <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objet associe directement à un contrôle consommateur spécifique et stocke les détails concernant une connexion dans les propriétés qu’il hérite de la base de <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> classe. Par exemple, dans l’élément hérité <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> propriété, un point de connexion de consommateur conserve le type d’interface qu’il utilise. Si le fournisseur et le consommateur dans une connexion comprennent tous deux le type d’interface, les contrôles sont compatibles et capables d’établir une connexion directe. Si le fournisseur et le consommateur ne peut pas fonctionner avec le même type d’interface, ils ne sont pas compatibles et que vous devez utiliser un <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> objet pour traduire le point de connexion fournisseur <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> propriété dans un type que le consommateur peut fonctionner. Une autre propriété héritée importante est la <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> lors de la création de connexions de point de propriété, qui fournit un nom convivial à afficher dans l’interface utilisateur pour les utilisateurs à choisir une connexion de consommateur. Le nom complet est le paramètre requis lorsque les développeurs ajoutent un `ConnectionConsumer` d’attribut à la méthode de rappel dans un contrôle consommateur. Hérité <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> propriété est également utile, comme indiqué ci-dessus, car elle fournit un identificateur unique pour un point de connexion consommateur dans le cas où un consommateur a plusieurs points de connexion. Un consommateur peut avoir plusieurs <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objets définis qu’il contient et dans ce cas, lorsque les développeurs ajoutent le `ConnectionConsumer` attribut à une méthode, ils doivent spécifier une valeur d’ID pour distinguer chaque point de connexion. Une autre propriété héritée notable est la <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> propriété, qui indique si un point de connexion consommateur peut se connecter simultanément à plusieurs fournisseurs. Cette valeur de propriété est `false` par défaut pour les points de connexion de consommateur (alors que les valeurs par défaut `true` pour les points de connexion de fournisseur).  
  
 Le <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> classe ajoute plusieurs méthodes uniques aux membres qu’elle hérite la <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> classe. Le <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject%2A> méthode appelle la méthode de rappel définie du consommateur propre pour récupérer l’instance d’interface à partir du fournisseur. Le <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A> méthode retourne une valeur booléenne qui indique si le point de connexion est en mesure d’établir des connexions, en fonction de l’état actuel du contrôle consommateur associé.  
  
   
  
## Examples  
 L’exemple de code suivant montre des moyens simples pour créer une connexion de manière déclarative, par programmation ou via l’interface utilisateur, dans chaque cas utiliser d’un point de connexion consommateur.  
  
 L’exemple comprend quatre parties :  
  
-   Mode d’affichage sur une page un contrôle utilisateur qui permet de modifier les composants WebPart.  
  
-   Code source pour une interface et deux <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôle agissant comme le fournisseur et le consommateur d’une connexion.  
  
-   Une page Web pour héberger tous les contrôles et exécuter l’exemple de code.  
  
-   Une explication de l’exécution de l’exemple de page.  
  
 La première partie de cet exemple de code est le contrôle utilisateur qui permet aux utilisateurs de modifier les modes d’affichage sur une page Web. Enregistrer le code source suivant dans un fichier .ascx, en lui donnant le nom de fichier qui est affecté à la `Src` attribut de la `Register` directive pour ce contrôle utilisateur, c'est-à-dire près du haut de la page Web d’hébergement. Pour plus d’informations sur les modes d’affichage et une description du code source dans ce contrôle, consultez [procédure pas à pas : modification des Modes d’affichage sur une Page WebPart](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/DisplayModeMenuVB.ascx#6)]  
  
 La deuxième partie de l’exemple de code est le code source pour les contrôles et l’interface. Le fichier source contient une interface simple nommée `IZipCode`. Il existe également un <xref:System.Web.UI.WebControls.WebParts.WebPart> classe nommée `ZipCodeWebPart` qui implémente l’interface et agit comme le contrôle fournisseur. L’autre <xref:System.Web.UI.WebControls.WebParts.WebPart> classe est nommée `WeatherWebPart`, et agit comme le consommateur de la connexion. Cette classe possède une méthode nommée `GetZipCode` qui obtient une instance de la `IZipCode` interface à partir du contrôle de fournisseur. Notez que cette méthode est marquée comme méthode de point de connexion du consommateur avec un `ConnectionConsumer` attribut dans ses métadonnées. Il s’agit du mécanisme d’identification de la méthode de point de connexion dans le contrôle consommateur.  
  
 Pour l’exemple de code à exécuter, vous devez compiler ce code source. Vous pouvez compiler explicitement et placer l’assembly résultant dans le dossier Bin de votre site Web ou le global assembly cache. Vous pouvez également mettre le code source dans le dossier App_Code de votre site, où il sera compilé dynamiquement au moment de l’exécution. Cet exemple de code utilise la compilation dynamique. Pour une procédure pas à pas qui montre comment compiler, consultez [procédure pas à pas : développement et à l’aide d’un contrôle de serveur Web personnalisé](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/ZipCodeComponent.vb#2)]  
  
 La troisième partie de l’exemple de code est la page Web. Près du haut sont `Register` directives pour enregistrer les contrôles personnalisés qui forment la connexion et le contrôle utilisateur qui permet aux utilisateurs de modifier les modes d’affichage dans la page. La connexion elle-même est créée de manière déclarative dans le `<staticconnections>` élément sur la page. Cet exemple montre une manière de créer une connexion--Remarque la `ConsumerConnectionPointID` d’attribut dans le `<asp:webpartconnection>` élément. Vous pouvez également créer la connexion par programme. le code correspondant se trouve dans le `Button1_Click` (méthode). Dans ce cas, un <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objet est créé, puis passé à une méthode qui crée la connexion réelle. Si la connexion est créée de manière déclarative ou par programme, les points de connexion doivent toujours être spécifiés pour le fournisseur et le consommateur. Le `Button2_Click` méthode accède la <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> des objets pour le fournisseur et le consommateur et écrit certaines de leurs valeurs de propriété à une étiquette dans la page.  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 Une fois que vous chargez la page dans un navigateur, cliquez sur le **détails du Point de connexion** bouton. Informations sur les points de connexion consommateur et fournisseur établis dans la connexion déclarative apparaissent. Ensuite, utilisez le **Mode d’affichage** contrôle de liste déroulante pour basculer la page en mode connexion. Sur le menu d’actions verbales de la **fournisseur de Code postal** <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôle (représenté par une flèche vers le bas dans la barre de titre), cliquez sur le verbe connect. La connexion à l’interface utilisateur s’affiche, créée automatiquement par le `<asp:connectionszone>` contrôle déclaré dans la page. Voici une autre façon de créer une connexion (via l’interface utilisateur), ainsi que les méthodes déclaratives et de programmation décrits précédemment. Cliquez sur le **déconnexion** bouton pour terminer la connexion existante. Cliquez sur le **créer une connexion à un consommateur** lien. L’interface utilisateur affiche maintenant un contrôle déroulant qui répertorie le nom complet de point de connexion consommateur. Sélectionnez le point de connexion dans la liste déroulante, puis cliquez sur **Connect** pour établir la connexion. Ensuite, cliquez sur **déconnexion** à nouveau. Cliquez sur le **connexion dynamique** bouton pour créer une connexion par programme. Utilisez le **Mode d’affichage** contrôle pour retourner la page en mode de navigation. Cliquez sur le **détails du Point de connexion** bouton là encore, pour indiquer des détails sur l’objet de point de connexion consommateur qu’une seule fois bien plus encore.  
  
 L’exemple a illustré l’établissement d’une connexion et à l’aide d’un point de connexion de consommateur de trois manières : une connexion statique déclarée dans le balisage de page Web ; une connexion créée dans le code qui a utilisé un <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objet et une connexion créée par un utilisateur via l’interface utilisateur de connexion.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
    <related type="Article" href="https://msdn.microsoft.com/library/ab78a66e-9feb-4391-b3c3-8c07555e2308">Pages de composants WebPart ASP.NET</related>
    <related type="Article" href="https://msdn.microsoft.com/library/d98cfd0f-ebd6-4871-89d5-abbd2cdef67b">Vue d’ensemble des connexions de composants Web</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConsumerConnectionPoint (System.Reflection.MethodInfo callbackMethod, Type interfaceType, Type controlType, string displayName, string id, bool allowsMultipleConnections);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.MethodInfo callbackMethod, class System.Type interfaceType, class System.Type controlType, string displayName, string id, bool allowsMultipleConnections) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callbackMethod As MethodInfo, interfaceType As Type, controlType As Type, displayName As String, id As String, allowsMultipleConnections As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ConsumerConnectionPoint(System::Reflection::MethodInfo ^ callbackMethod, Type ^ interfaceType, Type ^ controlType, System::String ^ displayName, System::String ^ id, bool allowsMultipleConnections);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint : System.Reflection.MethodInfo * Type * Type * string * string * bool -&gt; System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" Usage="new System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint (callbackMethod, interfaceType, controlType, displayName, id, allowsMultipleConnections)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callbackMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="interfaceType" Type="System.Type" />
        <Parameter Name="controlType" Type="System.Type" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="allowsMultipleConnections" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="callbackMethod">Méthode dans le contrôle consommateur qui retourne une instance d'interface aux consommateurs pour établir une connexion.</param>
        <param name="interfaceType">
          <see cref="T:System.Type" /> de l'interface que le consommateur reçoit d'un fournisseur.</param>
        <param name="controlType">
          <see cref="T:System.Type" /> du contrôle consommateur auquel le point de connexion du consommateur est associé.</param>
        <param name="displayName">Nom complet convivial pour le point de connexion du consommateur qui apparaît aux utilisateurs dans l'interface utilisateur de connexion.</param>
        <param name="id">Identificateur unique pour le point de connexion du consommateur.</param>
        <param name="allowsMultipleConnections">Valeur Boolean qui indique si le point de connexion du consommateur peut avoir plusieurs connexions simultanées avec des fournisseurs.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.%23ctor%2A> constructeur pour la <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> classe appelle simplement le constructeur de base, en lui passant les divers paramètres et en initialisant la classe de base.  
  
 Le constructeur de classe de base vérifie un nombre de paramètres pour un point de connexion et peut lever plusieurs exceptions. Pour obtenir la liste des exceptions possibles, consultez la section Exceptions.  
  
 Vous pouvez appeler la <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.%23ctor%2A> constructeur pour créer votre propre instance de la <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> classe. Toutefois, dans les cas où vous êtes simplement l’établissement d’une connexion et n’étendez ne pas la classe, vous devez appeler la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> méthode pour retourner un objet de point de connexion à partir d’un fournisseur.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment dériver à partir de la <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> classe pour créer un point de connexion fournisseur personnalisé.  
  
 L’exemple de code comprend trois parties :  
  
-   Un fichier source qui contient un fournisseur <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôler, un consommateur <xref:System.Web.UI.WebControls.WebParts.WebPart> contrôle et une personnalisée <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objet.  
  
-   Une page Web qui héberge les contrôles dans une connexion statique.  
  
-   Une explication de l’exécution de l’exemple de code.  
  
 La première partie de l’exemple de code est la source pour le fournisseur et le consommateur <xref:System.Web.UI.WebControls.WebParts.WebPart> un personnalisés et les contrôles <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> classe, nommée `TableConsumerConnectionPoint`. Notez que le constructeur de la `TableConsumerConnectionPoint` classe appelle le constructeur de base, en lui passant les paramètres requis, comme indiqué dans la section Paramètres. Notez également que dans le `TableConsumer` (classe), le `SetConnectionInterface` méthode est spécifiée en tant que la méthode de rappel pour les connexions et le `ConnectionConsumer` attribut déclare personnalisé `TableConsumerConnectionPoint` en tant que paramètre. Cela montre comment créer un point de connexion de consommateur personnalisé et puis l’associer à un contrôle consommateur. Cet exemple suppose que le code source est compilé dynamiquement, donc vous devez placer le fichier de code source dans un sous-dossier App_Code de votre application Web.  
  
 [!code-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/connectionControls.cs#1)]  
  
 La deuxième partie de l’exemple de code est la page Web qui héberge les contrôles personnalisés dans une connexion WebPart statique. En haut de la page est un `Register` directive à déclarer un préfixe et l’espace de noms pour les contrôles personnalisés. La connexion est déclarée à l’aide un `<asp:webpartconnection>` contrôles d’élément et le fournisseur et le consommateur sont déclarés dans un `<asp:webpartzone>` élément.  
  
 [!code-aspx-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#3](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/defaultcs.aspx#3)]  
  
 Chargez la page dans un navigateur. La connexion entre les contrôles déjà existe, et le consommateur affiche les données à partir du fournisseur, car la connexion a été déclarée comme une connexion statique dans la page.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="callbackMethod" /> a la valeur <see langword="null" />.  
  
\- ou - 
 <paramref name="interfaceType" /> a la valeur <see langword="null" />.  
  
\- ou - 
 <paramref name="controlType" /> a la valeur <see langword="null" />.  
  
\- ou - 
 <paramref name="displayName" /> ou <see langword="null" /> est une chaîne vide ("").</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="controlType" /> n'est pas du même type que le contrôle consommateur (ou une classe valide dérivée de celui-ci).</exception>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
        <related type="Article" href="https://msdn.microsoft.com/library/ab78a66e-9feb-4391-b3c3-8c07555e2308">Pages de composants WebPart ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="SetObject">
      <MemberSignature Language="C#" Value="public virtual void SetObject (System.Web.UI.Control control, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetObject(class System.Web.UI.Control control, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject(System.Web.UI.Control,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetObject(System::Web::UI::Control ^ control, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member SetObject : System.Web.UI.Control * obj -&gt; unit&#xA;override this.SetObject : System.Web.UI.Control * obj -&gt; unit" Usage="consumerConnectionPoint.SetObject (control, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="control">Contrôle consommateur associé à un point de connexion du consommateur.</param>
        <param name="data">Instance d'interface retournée par un contrôle fournisseur.</param>
        <summary>Appelle la méthode de rappel dans un contrôle consommateur et récupère l'instance d'interface d'un contrôle fournisseur.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode reçoit une instance d’interface d’un fournisseur qui contient les données pour le contrôle consommateur.  
  
 Le <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject%2A> méthode est appelée par <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> objets lorsqu’une connexion est activée. Il s’agit d’une étape essentielle qui fait partie de l’initialisation d’une connexion et l’activation de deux contrôles partager des données.  
  
 Le contrôle consommateur dans une connexion doit être en mesure d’utiliser le même type d’interface en tant que le fournisseur. Si elle n’est pas le cas, les contrôles sont incompatibles et un <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> objet doit être utilisé pour établir une connexion.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="control" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SupportsConnection">
      <MemberSignature Language="C#" Value="public virtual bool SupportsConnection (System.Web.UI.Control control, System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection secondaryInterfaces);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool SupportsConnection(class System.Web.UI.Control control, class System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection secondaryInterfaces) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection(System.Web.UI.Control,System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool SupportsConnection(System::Web::UI::Control ^ control, System::Web::UI::WebControls::WebParts::ConnectionInterfaceCollection ^ secondaryInterfaces);" />
      <MemberSignature Language="F#" Value="abstract member SupportsConnection : System.Web.UI.Control * System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection -&gt; bool&#xA;override this.SupportsConnection : System.Web.UI.Control * System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection -&gt; bool" Usage="consumerConnectionPoint.SupportsConnection (control, secondaryInterfaces)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="secondaryInterfaces" Type="System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" />
      </Parameters>
      <Docs>
        <param name="control">Contrôle consommateur associé au <see cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />.</param>
        <param name="secondaryInterfaces">
          <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" /> de toutes les interfaces secondaires qui participent à une connexion.</param>
        <summary>Détermine si un point de connexion de consommateur est actuellement en mesure d'établir une connexion.</summary>
        <returns>
          <see langword="true" /> si un point de connexion peut établir actuellement une connexion ; sinon, <see langword="false" />. La valeur par défaut est <see langword="true" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A> méthode telle qu’implémentée toujours retourne `true` dans tous les cas pour la <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> classe. L’objectif de cette méthode est de contrôler l’état de `control` et `secondaryInterfaces` à certains points critiques pour déterminer si un <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objet est actuellement en mesure de créer une connexion.  
  
 Il peut y avoir des scénarios où `control` est dans un état qui rend impossible former une connexion, ou où `secondaryInterfaces` doit exister qu’une connexion puisse être formée. Dans ce cas, les développeurs peuvent hériter les <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> classe et substituer la <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A> méthode, en fournissant une implémentation personnalisée pour déterminer quand le point de connexion est prêt à prendre en charge les connexions.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>