<Type Name="LogExtentCollection" FullName="System.IO.Log.LogExtentCollection">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="49b20e9ef660fe2fa6fe3be02b3c59ec65606a8f" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37759059" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class LogExtentCollection : System.Collections.Generic.IEnumerable&lt;System.IO.Log.LogExtent&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit LogExtentCollection extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;class System.IO.Log.LogExtent&gt;, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.IO.Log.LogExtentCollection" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class LogExtentCollection&#xA;Implements IEnumerable(Of LogExtent)" />
  <TypeSignature Language="C++ CLI" Value="public ref class LogExtentCollection sealed : System::Collections::Generic::IEnumerable&lt;System::IO::Log::LogExtent ^&gt;" />
  <TypeSignature Language="F#" Value="type LogExtentCollection = class&#xA;    interface seq&lt;LogExtent&gt;&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.IO.Log</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;System.IO.Log.LogExtent&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Represents the collection of <see cref="T:System.IO.Log.LogExtent" /> objects associated with a <see cref="T:System.IO.Log.LogStore" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette classe contient une collection d'objets <xref:System.IO.Log.LogExtent> associés à un <xref:System.IO.Log.LogStore>. Une instance <xref:System.IO.Log.LogStore> stocke ses données dans une collection d'étendues de disque, représentée par les instances <xref:System.IO.Log.LogExtent>. Un objet <xref:System.IO.Log.LogExtent> particulier est associé à un <xref:System.IO.Log.LogStore> et les objets <xref:System.IO.Log.LogExtent> dans le même <xref:System.IO.Log.LogStore> sont de taille identique. L'espace est ajouté et supprimé d'une instance <xref:System.IO.Log.LogStore> dans les incréments d'étendue.  
  
 Bien que les objets <xref:System.IO.Log.LogExtent> soient représentés sur le disque en tant que fichiers, ils ne doivent pas être déplacés ou supprimés comme les fichiers normaux. À la place, vous devez utiliser les méthodes fournies par cette classe pour ajouter et supprimer directement les instances <xref:System.IO.Log.LogExtent>. Les étendues sont généralement supprimées lorsqu'elles ne contiennent plus de données actives. Toutefois, si le paramètre `force` de la méthode <xref:System.IO.Log.LogExtentCollection.Remove%2A> correspond à `true`, une exception est alors levée si elles ne peuvent pas être supprimées immédiatement.  
  
 Vous ne pouvez pas supprimer la dernière étendue dans <xref:System.IO.Log.LogExtentCollection>, ce qui signifie que la propriété <xref:System.IO.Log.LogExtentCollection.Count%2A> ne peut pas être nulle après l'ajout d'une étendue.  
  
   
  
## Examples  
 Cet exemple montre comment utiliser les classes <xref:System.IO.Log.LogExtent> et <xref:System.IO.Log.LogExtentCollection> pour ajouter et émuler des étendues dans une séquence d'enregistrement en journal.  
  
 [!code-csharp[S_UELogRecordSequence#0](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mylogrecordsequence.cs#0)]
 [!code-vb[S_UELogRecordSequence#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mylogrecordsequence.vb#0)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IO.Log.LogExtent" />
    <altmember cref="T:System.IO.Log.LogStore" />
  </Docs>
  <Members>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Creates a new <see cref="T:System.IO.Log.LogExtent" /> and adds it to the collection.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogExtentCollection.Add(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.Add : string -&gt; unit" Usage="logExtentCollection.Add path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">The path to the log extent to be added.</param>
        <summary>Adds a <see cref="T:System.IO.Log.LogExtent" /> instance to the collection.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La taille de l'instance <xref:System.IO.Log.LogExtent> récemment ajoutée est de la même taille que des instances <xref:System.IO.Log.LogExtent> existantes dans la collection.  
  
> [!NOTE]
>  N'utilisez pas cette méthode pour ajouter le premier <xref:System.IO.Log.LogExtent> à la collection.  
  
   
  
## Examples  
 Cet exemple montre comment utiliser les classes <xref:System.IO.Log.LogExtent> et <xref:System.IO.Log.LogExtentCollection> pour ajouter et émuler des étendues dans une séquence d'enregistrement en journal.  
  
 [!code-csharp[S_UELogRecordSequence#0](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mylogrecordsequence.cs#0)]
 [!code-vb[S_UELogRecordSequence#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mylogrecordsequence.vb#0)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">The log store file name specified by <paramref name="path" /> is not valid.</exception>
        <exception cref="T:System.InvalidOperationException">A size must be specified for the first extent.</exception>
        <exception cref="T:System.IO.IOException">The request could not be performed because of an unexpected I/O exception.  -or-  The file specified by <paramref name="path" /> cannot be created because the file or directory already exists.</exception>
        <exception cref="T:System.ObjectDisposedException">The method was called after the sequence has been disposed of.</exception>
        <exception cref="T:System.OutOfMemoryException">There is not enough memory to continue the execution of the program.</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">The record sequence is full.  -or-  The storage disk or medium is full.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Access for the specified log store is denied by the operating system.</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (string path, long size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(string path, int64 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogExtentCollection.Add(System.String,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (path As String, size As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::String ^ path, long size);" />
      <MemberSignature Language="F#" Value="member this.Add : string * int64 -&gt; unit" Usage="logExtentCollection.Add (path, size)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="size" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="path">The path to the log extent.</param>
        <param name="size">The size of the log extent.</param>
        <summary>Creates a new <see cref="T:System.IO.Log.LogExtent" /> with the specified size and adds it to the collection.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si la collection n’est pas vide, la taille spécifiée doit être au moins aussi grande que la taille des autres étendues dans la collection. Dans ce cas, le paramètre `size` est ignoré, et l'étendue est créée à la même taille que les autres étendues de la collection.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> or <paramref name="size" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="archiveTail" /> is not within a valid range.</exception>
        <exception cref="T:System.ArgumentException">The log store file name specified by <paramref name="path" /> is not valid.  
  
 <paramref name="size" /> is smaller than the size of the other extents in the store.</exception>
        <exception cref="T:System.InvalidOperationException">A size must be specified for the first extent.  -or-  A duplicate extent name cannot be used.</exception>
        <exception cref="T:System.IO.IOException">The request could not be performed because of an unexpected I/O exception.  -or-  The file specified by <paramref name="path" /> cannot be created because the file or directory already exists.</exception>
        <exception cref="T:System.ObjectDisposedException">The method was called after the sequence has been disposed of.</exception>
        <exception cref="T:System.OutOfMemoryException">There is not enough memory to continue the execution of the program.</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">The record sequence is full.  -or-  The storage disk or medium is full.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Access for the specified log store is denied by the operating system.</exception>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.LogExtentCollection.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.IO.Log.LogExtentCollection.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the number of log extents in the collection.</summary>
        <value>Nombre d’étendues de journal de la collection.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Cet exemple montre comment utiliser les classes <xref:System.IO.Log.LogExtent> et <xref:System.IO.Log.LogExtentCollection> pour ajouter et émuler des étendues dans une séquence d'enregistrement en journal.  
  
 [!code-csharp[S_UELogRecordSequence#0](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mylogrecordsequence.cs#0)]
 [!code-vb[S_UELogRecordSequence#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mylogrecordsequence.vb#0)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">The log store has been disposed of.</exception>
      </Docs>
    </Member>
    <Member MemberName="FreeCount">
      <MemberSignature Language="C#" Value="public int FreeCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 FreeCount" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.LogExtentCollection.FreeCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FreeCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int FreeCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.FreeCount : int" Usage="System.IO.Log.LogExtentCollection.FreeCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the number of free <see cref="T:System.IO.Log.LogExtent" /> instances in the collection, that is, the number of <see cref="T:System.IO.Log.LogExtent" /> instances that do not contain any data.</summary>
        <value>Nombre d'instances <see cref="T:System.IO.Log.LogExtent" /> libres dans la collection.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Cet exemple montre comment utiliser les classes <xref:System.IO.Log.LogExtent> et <xref:System.IO.Log.LogExtentCollection> pour ajouter et émuler des étendues dans une séquence d'enregistrement en journal.  
  
 [!code-csharp[S_UELogRecordSequence#0](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mylogrecordsequence.cs#0)]
 [!code-vb[S_UELogRecordSequence#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mylogrecordsequence.vb#0)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">The log store has been disposed of.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;System.IO.Log.LogExtent&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;class System.IO.Log.LogExtent&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogExtentCollection.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator(Of LogExtent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IEnumerator&lt;System::IO::Log::LogExtent ^&gt; ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;System.IO.Log.LogExtent&gt;&#xA;override this.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;System.IO.Log.LogExtent&gt;" Usage="logExtentCollection.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.IO.Log.LogExtent&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets an enumerator for the <see cref="T:System.IO.Log.LogExtent" /> instances in this collection. This method cannot be inherited.</summary>
        <returns>An enumerator for the <see cref="T:System.IO.Log.LogExtent" /> instances in this collection.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IO.IOException">The request could not be performed because of an unexpected I/O exception.</exception>
        <exception cref="T:System.InvalidOperationException">The operation is invalid for one of the following reasons:  -   The enumeration has ended.  -   The collection has been modified.  -   The enumeration has not been started. A call to <see cref="M:System.Collections.IEnumerator.MoveNext" /> must be made.</exception>
        <exception cref="T:System.ObjectDisposedException">The method was called after the sequence has been disposed of.</exception>
        <exception cref="T:System.OutOfMemoryException">There is not enough memory to continue the execution of the program.</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">The record sequence is full.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Access for the specified log store is denied by the operating system.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Remove">
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Removes a <see cref="T:System.IO.Log.LogExtent" /> instance from the collection.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (System.IO.Log.LogExtent extent, bool force);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.IO.Log.LogExtent extent, bool force) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogExtentCollection.Remove(System.IO.Log.LogExtent,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (extent As LogExtent, force As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::IO::Log::LogExtent ^ extent, bool force);" />
      <MemberSignature Language="F#" Value="member this.Remove : System.IO.Log.LogExtent * bool -&gt; unit" Usage="logExtentCollection.Remove (extent, force)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="extent" Type="System.IO.Log.LogExtent" />
        <Parameter Name="force" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="extent">The <see cref="T:System.IO.Log.LogExtent" /> instance to remove.</param>
        <param name="force">
          <see langword="true" /> if the extent should be removed immediately; otherwise, <see langword="false" />.</param>
        <summary>Removes the specified <see cref="T:System.IO.Log.LogExtent" /> instance from the collection.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Une instance <xref:System.IO.Log.LogExtent> peut être supprimée uniquement de la collection si elle ne fait pas partie de la région active du <xref:System.IO.Log.LogStore>. Si le paramètre `force` est `true` et que l'étendue ne peut pas être supprimée immédiatement, une exception est levée. Si le paramètre `force` est `false` et que l'étendue ne peut pas être supprimée immédiatement, la suppression est alors différée jusqu'à ce qu'il ne fasse plus partie de la région active.  
  
 Vous ne pouvez pas supprimer la dernière étendue de <xref:System.IO.Log.LogExtentCollection>, ce qui signifie que la propriété <xref:System.IO.Log.LogExtentCollection.Count%2A> ne peut pas être nulle lorsqu'une étendue a été ajoutée.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="extent" /> or <paramref name="force" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="extent" /> cannot be found in the collection.</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="extent" /> cannot be removed. It is either still part of the active region, or access is denied.</exception>
        <exception cref="T:System.IO.IOException">The request could not be performed because of an unexpected I/O exception.  -or-  <paramref name="extent" /> cannot be deleted.</exception>
        <exception cref="T:System.ObjectDisposedException">The method was called after the sequence has been disposed of.</exception>
        <exception cref="T:System.OutOfMemoryException">There is not enough memory to continue the execution of the program.</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">The record sequence is full.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Access for the specified log store is denied by the operating system.</exception>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (string path, bool force);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(string path, bool force) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogExtentCollection.Remove(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (path As String, force As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::String ^ path, bool force);" />
      <MemberSignature Language="F#" Value="member this.Remove : string * bool -&gt; unit" Usage="logExtentCollection.Remove (path, force)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="force" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="path">The path of the <see cref="T:System.IO.Log.LogExtent" /> instance to remove.</param>
        <param name="force">
          <see langword="true" /> if the extent should be removed immediately; otherwise, <see langword="false" />.</param>
        <summary>Removes the <see cref="T:System.IO.Log.LogExtent" /> instance with the specified path from the collection.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Une instance <xref:System.IO.Log.LogExtent> peut être supprimée uniquement de la collection si elle ne fait pas partie de la région active du <xref:System.IO.Log.LogStore>. Si le paramètre `force` est `true` et que l'étendue ne peut pas être supprimée immédiatement, une exception est levée. Si le paramètre `force` est `false` et que l'étendue ne peut pas être supprimée immédiatement, la suppression est alors différée jusqu'à ce qu'il ne fasse plus partie de la région active.  
  
 Vous ne pouvez pas supprimer la dernière étendue de <xref:System.IO.Log.LogExtentCollection>, ce qui signifie que la propriété <xref:System.IO.Log.LogExtentCollection.Count%2A> ne peut pas être nulle lorsqu'une étendue a été ajoutée.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> or <paramref name="force" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">The extent specified by <paramref name="path" /> cannot be found in the collection.</exception>
        <exception cref="T:System.InvalidOperationException">The extent specified by <paramref name="path" /> cannot be removed. It is either still part of the active region, or access is denied.</exception>
        <exception cref="T:System.IO.IOException">The request could not be performed because of an unexpected I/O exception.  -or-  The extent specified by <paramref name="path" /> cannot be deleted.</exception>
        <exception cref="T:System.ObjectDisposedException">The method was called after the sequence has been disposed of.</exception>
        <exception cref="T:System.OutOfMemoryException">There is not enough memory to continue the execution of the program.</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">The record sequence is full.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Access for the specified log store is denied by the operating system.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogExtentCollection.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets an enumerator for the <see cref="T:System.IO.Log.LogExtent" /> instances in this collection. This method cannot be inherited.</summary>
        <returns>An enumerator for the <see cref="T:System.IO.Log.LogExtent" /> instances in this collection.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>