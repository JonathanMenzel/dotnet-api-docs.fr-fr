<Type Name="LogExtentCollection" FullName="System.IO.Log.LogExtentCollection">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a6312f62a7271a3ae638fe385dad862891597930" />
    <Meta Name="ms.sourcegitcommit" Value="723b8a6d92667ba86fcda96190bad3b4a03283b3" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="11/09/2018" />
    <Meta Name="ms.locfileid" Value="51304371" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class LogExtentCollection : System.Collections.Generic.IEnumerable&lt;System.IO.Log.LogExtent&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit LogExtentCollection extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;class System.IO.Log.LogExtent&gt;, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.IO.Log.LogExtentCollection" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class LogExtentCollection&#xA;Implements IEnumerable(Of LogExtent)" />
  <TypeSignature Language="C++ CLI" Value="public ref class LogExtentCollection sealed : System::Collections::Generic::IEnumerable&lt;System::IO::Log::LogExtent ^&gt;" />
  <TypeSignature Language="F#" Value="type LogExtentCollection = class&#xA;    interface seq&lt;LogExtent&gt;&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.IO.Log</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;System.IO.Log.LogExtent&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Représente la collection d'objets <see cref="T:System.IO.Log.LogExtent" /> associés à <see cref="T:System.IO.Log.LogStore" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette classe contient une collection d'objets <xref:System.IO.Log.LogExtent> associés à un <xref:System.IO.Log.LogStore>. Une instance <xref:System.IO.Log.LogStore> stocke ses données dans une collection d'étendues de disque, représentée par les instances <xref:System.IO.Log.LogExtent>. Un objet <xref:System.IO.Log.LogExtent> particulier est associé à un <xref:System.IO.Log.LogStore> et les objets <xref:System.IO.Log.LogExtent> dans le même <xref:System.IO.Log.LogStore> sont de taille identique. L'espace est ajouté et supprimé d'une instance <xref:System.IO.Log.LogStore> dans les incréments d'étendue.  
  
 Bien que les objets <xref:System.IO.Log.LogExtent> soient représentés sur le disque en tant que fichiers, ils ne doivent pas être déplacés ou supprimés comme les fichiers normaux. À la place, vous devez utiliser les méthodes fournies par cette classe pour ajouter et supprimer directement les instances <xref:System.IO.Log.LogExtent>. Les étendues sont généralement supprimées lorsqu'elles ne contiennent plus de données actives. Toutefois, si le paramètre `force` de la méthode <xref:System.IO.Log.LogExtentCollection.Remove%2A> correspond à `true`, une exception est alors levée si elles ne peuvent pas être supprimées immédiatement.  
  
 Vous ne pouvez pas supprimer la dernière étendue dans <xref:System.IO.Log.LogExtentCollection>, ce qui signifie que la propriété <xref:System.IO.Log.LogExtentCollection.Count%2A> ne peut pas être nulle après l'ajout d'une étendue.  
  
   
  
## Examples  
 Cet exemple montre comment utiliser les classes <xref:System.IO.Log.LogExtent> et <xref:System.IO.Log.LogExtentCollection> pour ajouter et émuler des étendues dans une séquence d'enregistrement en journal.  
  
 [!code-csharp[S_UELogRecordSequence#0](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mylogrecordsequence.cs#0)]
 [!code-vb[S_UELogRecordSequence#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mylogrecordsequence.vb#0)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IO.Log.LogExtent" />
    <altmember cref="T:System.IO.Log.LogStore" />
  </Docs>
  <Members>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Crée un nouvel élément <see cref="T:System.IO.Log.LogExtent" /> et l'ajoute à la collection.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogExtentCollection.Add(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.Add : string -&gt; unit" Usage="logExtentCollection.Add path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Chemin d’accès à l’étendue de journal à ajouter.</param>
        <summary>Ajoute une instance <see cref="T:System.IO.Log.LogExtent" /> à la collection.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La taille de l’instance <xref:System.IO.Log.LogExtent> récemment ajoutée est de la même taille que des instances <xref:System.IO.Log.LogExtent> existantes dans la collection.  
  
> [!NOTE]
>  N'utilisez pas cette méthode pour ajouter le premier <xref:System.IO.Log.LogExtent> à la collection.  
  
   
  
## Examples  
 Cet exemple montre comment utiliser les classes <xref:System.IO.Log.LogExtent> et <xref:System.IO.Log.LogExtentCollection> pour ajouter et émuler des étendues dans une séquence d'enregistrement en journal.  
  
 [!code-csharp[S_UELogRecordSequence#0](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mylogrecordsequence.cs#0)]
 [!code-vb[S_UELogRecordSequence#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mylogrecordsequence.vb#0)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Le nom de fichier du magasin de journaux spécifié par le <paramref name="path" /> n'est pas valide.</exception>
        <exception cref="T:System.InvalidOperationException">Une taille doit être spécifiée pour la première étendue.</exception>
        <exception cref="T:System.IO.IOException">La requête n'a pas pu être exécutée en raison d'une exception d'E/S inattendue.  
  
- ou - 
Le fichier spécifié par le <paramref name="path" /> ne peut pas être créé parce que le fichier ou le répertoire existe déjà.</exception>
        <exception cref="T:System.ObjectDisposedException">La méthode a été appelée après la suppression de la séquence.</exception>
        <exception cref="T:System.OutOfMemoryException">La mémoire disponible n'est pas suffisante pour continuer l'exécution du programme.</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">La séquence d'enregistrement est complète.  
  
- ou - 
Le disque ou support mémoire est plein.</exception>
        <exception cref="T:System.UnauthorizedAccessException">L'accès pour le magasin de journaux spécifié est refusé par le système d'exploitation.</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (string path, long size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(string path, int64 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogExtentCollection.Add(System.String,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (path As String, size As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::String ^ path, long size);" />
      <MemberSignature Language="F#" Value="member this.Add : string * int64 -&gt; unit" Usage="logExtentCollection.Add (path, size)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="size" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="path">Chemin d’accès à l’étendue de journal.</param>
        <param name="size">Taille de l'étendue de journal.</param>
        <summary>Crée un nouvel élément <see cref="T:System.IO.Log.LogExtent" /> de la taille spécifiée et l’ajoute à la collection.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si la collection n’est pas vide, la taille spécifiée doit être au moins aussi grande que la taille des autres étendues dans la collection. Dans ce cas, le paramètre `size` est ignoré, et l'étendue est créée à la même taille que les autres étendues de la collection.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> ou <paramref name="size" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="archiveTail" /> n'est pas compris dans une plage valide.</exception>
        <exception cref="T:System.ArgumentException">Le nom de fichier du magasin de journaux spécifié par le <paramref name="path" /> n'est pas valide.  
  
 <paramref name="size" /> est plus petit que la taille des autres étendues du magasin.</exception>
        <exception cref="T:System.InvalidOperationException">Une taille doit être spécifiée pour la première étendue.  
  
- ou - 
Un nom d'étendue en double ne peut pas être utilisé.</exception>
        <exception cref="T:System.IO.IOException">La requête n'a pas pu être exécutée en raison d'une exception d'E/S inattendue.  
  
- ou - 
Le fichier spécifié par le <paramref name="path" /> ne peut pas être créé parce que le fichier ou le répertoire existe déjà.</exception>
        <exception cref="T:System.ObjectDisposedException">La méthode a été appelée après la suppression de la séquence.</exception>
        <exception cref="T:System.OutOfMemoryException">La mémoire disponible n'est pas suffisante pour continuer l'exécution du programme.</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">La séquence d'enregistrement est complète.  
  
- ou - 
Le disque ou support mémoire est plein.</exception>
        <exception cref="T:System.UnauthorizedAccessException">L'accès pour le magasin de journaux spécifié est refusé par le système d'exploitation.</exception>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.LogExtentCollection.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.IO.Log.LogExtentCollection.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le nombre d’étendues de journal de la collection.</summary>
        <value>Nombre d’étendues de journal de la collection.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Cet exemple montre comment utiliser les classes <xref:System.IO.Log.LogExtent> et <xref:System.IO.Log.LogExtentCollection> pour ajouter et émuler des étendues dans une séquence d'enregistrement en journal.  
  
 [!code-csharp[S_UELogRecordSequence#0](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mylogrecordsequence.cs#0)]
 [!code-vb[S_UELogRecordSequence#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mylogrecordsequence.vb#0)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Le magasin de journaux a été éliminé.</exception>
      </Docs>
    </Member>
    <Member MemberName="FreeCount">
      <MemberSignature Language="C#" Value="public int FreeCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 FreeCount" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.LogExtentCollection.FreeCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FreeCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int FreeCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.FreeCount : int" Usage="System.IO.Log.LogExtentCollection.FreeCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Place le nombre d’instances <see cref="T:System.IO.Log.LogExtent" /> libres dans la collection, c’est-à-dire, le nombre d’instances <see cref="T:System.IO.Log.LogExtent" /> qui ne contiennent aucune données.</summary>
        <value>Nombre d’instances <see cref="T:System.IO.Log.LogExtent" /> libres dans la collection.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Cet exemple montre comment utiliser les classes <xref:System.IO.Log.LogExtent> et <xref:System.IO.Log.LogExtentCollection> pour ajouter et émuler des étendues dans une séquence d'enregistrement en journal.  
  
 [!code-csharp[S_UELogRecordSequence#0](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mylogrecordsequence.cs#0)]
 [!code-vb[S_UELogRecordSequence#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mylogrecordsequence.vb#0)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Le magasin de journaux a été éliminé.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;System.IO.Log.LogExtent&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;class System.IO.Log.LogExtent&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogExtentCollection.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator(Of LogExtent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IEnumerator&lt;System::IO::Log::LogExtent ^&gt; ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;System.IO.Log.LogExtent&gt;&#xA;override this.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;System.IO.Log.LogExtent&gt;" Usage="logExtentCollection.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.IO.Log.LogExtent&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Obtient un énumérateur pour les instances <see cref="T:System.IO.Log.LogExtent" /> de cette collection. Cette méthode ne peut pas être héritée.</summary>
        <returns>Énumérateur pour les instances <see cref="T:System.IO.Log.LogExtent" /> de cette collection.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IO.IOException">La requête n'a pas pu être exécutée en raison d'une exception d'E/S inattendue.</exception>
        <exception cref="T:System.InvalidOperationException">L'opération n'est pas valide pour l'une des raisons suivantes : 
- L’énumération est terminée.  
  
- La collection a été modifiée.  
  
- L’énumération n’a pas encore  démarré. Un appel à <see cref="M:System.Collections.IEnumerator.MoveNext" /> doit être fait.</exception>
        <exception cref="T:System.ObjectDisposedException">La méthode a été appelée après la suppression de la séquence.</exception>
        <exception cref="T:System.OutOfMemoryException">La mémoire disponible n'est pas suffisante pour continuer l'exécution du programme.</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">La séquence d'enregistrement est complète.</exception>
        <exception cref="T:System.UnauthorizedAccessException">L'accès pour le magasin de journaux spécifié est refusé par le système d'exploitation.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Remove">
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Supprime une instance <see cref="T:System.IO.Log.LogExtent" /> de la collection.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (System.IO.Log.LogExtent extent, bool force);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.IO.Log.LogExtent extent, bool force) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogExtentCollection.Remove(System.IO.Log.LogExtent,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (extent As LogExtent, force As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::IO::Log::LogExtent ^ extent, bool force);" />
      <MemberSignature Language="F#" Value="member this.Remove : System.IO.Log.LogExtent * bool -&gt; unit" Usage="logExtentCollection.Remove (extent, force)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="extent" Type="System.IO.Log.LogExtent" />
        <Parameter Name="force" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="extent">Instance <see cref="T:System.IO.Log.LogExtent" /> à supprimer.</param>
        <param name="force">
          <see langword="true" /> si l'étendue doit être supprimée immédiatement ; sinon, <see langword="false" />.</param>
        <summary>Supprime l’instance <see cref="T:System.IO.Log.LogExtent" /> spécifiée de la collection.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Une instance <xref:System.IO.Log.LogExtent> peut être supprimée uniquement de la collection si elle ne fait pas partie de la région active du <xref:System.IO.Log.LogStore>. Si le paramètre `force` est `true` et que l'étendue ne peut pas être supprimée immédiatement, une exception est levée. Si le paramètre `force` est `false` et que l'étendue ne peut pas être supprimée immédiatement, la suppression est alors différée jusqu'à ce qu'il ne fasse plus partie de la région active.  
  
 Vous ne pouvez pas supprimer la dernière étendue de <xref:System.IO.Log.LogExtentCollection>, ce qui signifie que la propriété <xref:System.IO.Log.LogExtentCollection.Count%2A> ne peut pas être nulle lorsqu'une étendue a été ajoutée.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="extent" /> ou <paramref name="force" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="extent" /> ne se trouve pas dans la collection.</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="extent" /> ne peut pas être supprimé. Soit elle fait encore partie de la région active, soit l'accès est refusé.</exception>
        <exception cref="T:System.IO.IOException">La requête n'a pas pu être exécutée en raison d'une exception d'E/S inattendue.  
  
- ou - 
 <paramref name="extent" /> ne peut pas être supprimée.</exception>
        <exception cref="T:System.ObjectDisposedException">La méthode a été appelée après la suppression de la séquence.</exception>
        <exception cref="T:System.OutOfMemoryException">La mémoire disponible n'est pas suffisante pour continuer l'exécution du programme.</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">La séquence d'enregistrement est complète.</exception>
        <exception cref="T:System.UnauthorizedAccessException">L'accès pour le magasin de journaux spécifié est refusé par le système d'exploitation.</exception>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (string path, bool force);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(string path, bool force) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogExtentCollection.Remove(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (path As String, force As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::String ^ path, bool force);" />
      <MemberSignature Language="F#" Value="member this.Remove : string * bool -&gt; unit" Usage="logExtentCollection.Remove (path, force)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="force" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="path">Chemin d’accès de l’instance <see cref="T:System.IO.Log.LogExtent" /> à supprimer.</param>
        <param name="force">
          <see langword="true" /> si l'étendue doit être supprimée immédiatement ; sinon, <see langword="false" />.</param>
        <summary>Supprime de la collection l’instance <see cref="T:System.IO.Log.LogExtent" /> avec le chemin d’accès spécifié</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Une instance <xref:System.IO.Log.LogExtent> peut être supprimée uniquement de la collection si elle ne fait pas partie de la région active du <xref:System.IO.Log.LogStore>. Si le paramètre `force` est `true` et que l'étendue ne peut pas être supprimée immédiatement, une exception est levée. Si le paramètre `force` est `false` et que l'étendue ne peut pas être supprimée immédiatement, la suppression est alors différée jusqu'à ce qu'il ne fasse plus partie de la région active.  
  
 Vous ne pouvez pas supprimer la dernière étendue de <xref:System.IO.Log.LogExtentCollection>, ce qui signifie que la propriété <xref:System.IO.Log.LogExtentCollection.Count%2A> ne peut pas être nulle lorsqu'une étendue a été ajoutée.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> ou <paramref name="force" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">L’étendue spécifiée par <paramref name="path" /> ne se trouve pas dans la collection.</exception>
        <exception cref="T:System.InvalidOperationException">L'étendue spécifiée par <paramref name="path" /> ne peut pas être supprimée. Soit elle fait encore partie de la région active, soit l'accès est refusé.</exception>
        <exception cref="T:System.IO.IOException">La requête n'a pas pu être exécutée en raison d'une exception d'E/S inattendue.  
  
- ou - 
L'étendue spécifiée par <paramref name="path" /> ne peut pas être supprimée.</exception>
        <exception cref="T:System.ObjectDisposedException">La méthode a été appelée après la suppression de la séquence.</exception>
        <exception cref="T:System.OutOfMemoryException">La mémoire disponible n'est pas suffisante pour continuer l'exécution du programme.</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">La séquence d'enregistrement est complète.</exception>
        <exception cref="T:System.UnauthorizedAccessException">L'accès pour le magasin de journaux spécifié est refusé par le système d'exploitation.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogExtentCollection.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Obtient un énumérateur pour les instances <see cref="T:System.IO.Log.LogExtent" /> de cette collection. Cette méthode ne peut pas être héritée.</summary>
        <returns>Énumérateur pour les instances <see cref="T:System.IO.Log.LogExtent" /> de cette collection.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>