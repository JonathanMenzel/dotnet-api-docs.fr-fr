<Type Name="SequenceNumber" FullName="System.IO.Log.SequenceNumber">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4486fc7cec683c947eb31f879c6f5891d668d41e" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48601332" />
  </Metadata>
  <TypeSignature Language="C#" Value="public struct SequenceNumber : IComparable&lt;System.IO.Log.SequenceNumber&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable sealed beforefieldinit SequenceNumber extends System.ValueType implements class System.IComparable`1&lt;valuetype System.IO.Log.SequenceNumber&gt;" />
  <TypeSignature Language="DocId" Value="T:System.IO.Log.SequenceNumber" />
  <TypeSignature Language="VB.NET" Value="Public Structure SequenceNumber&#xA;Implements IComparable(Of SequenceNumber)" />
  <TypeSignature Language="C++ CLI" Value="public value class SequenceNumber : IComparable&lt;System::IO::Log::SequenceNumber&gt;" />
  <TypeSignature Language="F#" Value="type SequenceNumber = struct" />
  <AssemblyInfo>
    <AssemblyName>System.IO.Log</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.IO.Log.SequenceNumber&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="95fa9-101">Représente un numéro de séquence assigné à un enregistrement du journal dans une séquence d'enregistrement.</span>
      <span class="sxs-lookup">
        <span data-stu-id="95fa9-101">Represents a sequence number assigned to a log record in a record sequence.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="95fa9-102">Un numéro de séquence supérieur aux numéros de séquence des enregistrements ajoutés avant chaque enregistrement du journal dans une séquence est assigné à ces enregistrements.</span><span class="sxs-lookup"><span data-stu-id="95fa9-102">Each log record in a sequence is assigned a sequence number greater than the sequence numbers of the records appended before it.</span></span> <span data-ttu-id="95fa9-103">Un numéro de séquence peut être comparé, mais pas manipulé.</span><span class="sxs-lookup"><span data-stu-id="95fa9-103">A sequence number can be compared, but not otherwise manipulated.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SequenceNumber (byte[] sequenceNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] sequenceNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.SequenceNumber.#ctor(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (sequenceNumber As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SequenceNumber(cli::array &lt;System::Byte&gt; ^ sequenceNumber);" />
      <MemberSignature Language="F#" Value="new System.IO.Log.SequenceNumber : byte[] -&gt; System.IO.Log.SequenceNumber" Usage="new System.IO.Log.SequenceNumber sequenceNumber" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="sequenceNumber" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="sequenceNumber">
          <span data-ttu-id="95fa9-104">Octets qui composent le numéro de séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="95fa9-104">Bytes that make up the sequence number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="95fa9-105">Initialise une nouvelle instance de la classe <see cref="T:System.IO.Log.SequenceNumber" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="95fa9-105">Initializes a new instance of the <see cref="T:System.IO.Log.SequenceNumber" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="95fa9-106">
            <paramref name="sequenceNumber" /> est de longueur incorrecte ou ne correspond pas à un numéro de séquence valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="95fa9-106">
              <paramref name="sequenceNumber" /> is of the wrong length, or does not represent a valid sequence number.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (System.IO.Log.SequenceNumber other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(valuetype System.IO.Log.SequenceNumber other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.SequenceNumber.CompareTo(System.IO.Log.SequenceNumber)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (other As SequenceNumber) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(System::IO::Log::SequenceNumber other);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : System.IO.Log.SequenceNumber -&gt; int&#xA;override this.CompareTo : System.IO.Log.SequenceNumber -&gt; int" Usage="sequenceNumber.CompareTo other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable`1.CompareTo(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.IO.Log.SequenceNumber" />
      </Parameters>
      <Docs>
        <param name="other">
          <span data-ttu-id="95fa9-107">Objet qui prend la valeur du numéro de séquence actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="95fa9-107">An object that evaluates to the current sequence number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="95fa9-108">Compare ce numéro de séquence avec un objet spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="95fa9-108">Compares this sequence number with a specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="95fa9-109">Entier signé 32 bits qui indique la relation lexicale entre les deux comparateurs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="95fa9-109">A 32-bit signed integer indicating the lexical relationship between the two comparands.</span>
          </span>
          <list type="table">
            <item>
              <term>
                <span data-ttu-id="95fa9-110">Value</span>
                <span class="sxs-lookup">
                  <span data-stu-id="95fa9-110">Value</span>
                </span>
              </term>
              <description>
                <span data-ttu-id="95fa9-111">Condition</span>
                <span class="sxs-lookup">
                  <span data-stu-id="95fa9-111">Condition</span>
                </span>
              </description>
            </item>
            <item>
              <term>
                <span data-ttu-id="95fa9-112">Inférieure à zéro</span>
                <span class="sxs-lookup">
                  <span data-stu-id="95fa9-112">Less than zero</span>
                </span>
              </term>
              <description>
                <span data-ttu-id="95fa9-113">Cette instance est inférieure à <paramref name="other" />.</span>
                <span class="sxs-lookup">
                  <span data-stu-id="95fa9-113">This instance is less than <paramref name="other" />.</span>
                </span>
              </description>
            </item>
            <item>
              <term>
                <span data-ttu-id="95fa9-114">Zéro</span>
                <span class="sxs-lookup">
                  <span data-stu-id="95fa9-114">Zero</span>
                </span>
              </term>
              <description>
                <span data-ttu-id="95fa9-115">Cette instance est égale à <paramref name="other" />.</span>
                <span class="sxs-lookup">
                  <span data-stu-id="95fa9-115">This instance is equal to <paramref name="other" />.</span>
                </span>
              </description>
            </item>
            <item>
              <term>
                <span data-ttu-id="95fa9-116">Supérieure à zéro</span>
                <span class="sxs-lookup">
                  <span data-stu-id="95fa9-116">Greater than zero</span>
                </span>
              </term>
              <description>
                <span data-ttu-id="95fa9-117">Cette instance est supérieure à <paramref name="other" />.</span>
                <span class="sxs-lookup">
                  <span data-stu-id="95fa9-117">This instance is greater than <paramref name="other" />.</span>
                </span>
              </description>
            </item>
          </list>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="95fa9-118">Indique si cette instance et un objet spécifié sont égaux.</span>
          <span class="sxs-lookup">
            <span data-stu-id="95fa9-118">Indicates whether this instance and a specified object are equal.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.IO.Log.SequenceNumber other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Equals(valuetype System.IO.Log.SequenceNumber other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.SequenceNumber.Equals(System.IO.Log.SequenceNumber)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As SequenceNumber) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(System::IO::Log::SequenceNumber other);" />
      <MemberSignature Language="F#" Value="override this.Equals : System.IO.Log.SequenceNumber -&gt; bool" Usage="sequenceNumber.Equals other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.IO.Log.SequenceNumber" />
      </Parameters>
      <Docs>
        <param name="other">
          <span data-ttu-id="95fa9-119">Un autre <see cref="T:System.IO.Log.SequenceNumber" /> à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="95fa9-119">Another <see cref="T:System.IO.Log.SequenceNumber" /> to compare to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="95fa9-120">Indique si cette instance et un numéro de séquence spécifié sont égaux.</span>
          <span class="sxs-lookup">
            <span data-stu-id="95fa9-120">Indicates whether this instance and a specified sequence number are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="95fa9-121">
            <see langword="true" /> si <paramref name="other" /> et cette instance représentent la même valeur ; sinon <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="95fa9-121">
              <see langword="true" /> if <paramref name="other" /> and this instance represent the same value; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.SequenceNumber.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (other As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ other);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="sequenceNumber.Equals other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="other">
          <span data-ttu-id="95fa9-122">Autre objet de comparaison.</span>
          <span class="sxs-lookup">
            <span data-stu-id="95fa9-122">Another object to compare to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="95fa9-123">Indique si cette instance et un objet spécifié sont égaux.</span>
          <span class="sxs-lookup">
            <span data-stu-id="95fa9-123">Indicates whether this instance and a specified object are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="95fa9-124">
            <see langword="true" /> si <paramref name="other" /> et cette instance sont du même type et représentent la même valeur ; sinon <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="95fa9-124">
              <see langword="true" /> if <paramref name="other" /> and this instance are the same type and represent the same value; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public byte[] GetBytes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] GetBytes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.SequenceNumber.GetBytes" />
      <MemberSignature Language="VB.NET" Value="Public Function GetBytes () As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ GetBytes();" />
      <MemberSignature Language="F#" Value="member this.GetBytes : unit -&gt; byte[]" Usage="sequenceNumber.GetBytes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="95fa9-125">Encode tout ou partie du numéro de séquence actuel dans un tableau d'octets.</span>
          <span class="sxs-lookup">
            <span data-stu-id="95fa9-125">Encodes all or part of the current sequence number into a byte array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="95fa9-126">Tableau d'octets qui contient tout ou partie du numéro de séquence actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="95fa9-126">A byte array containing all or part of the current sequence number.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.SequenceNumber.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="sequenceNumber.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="95fa9-127">Retourne le code de hachage de cette instance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="95fa9-127">Returns the hash code for this instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="95fa9-128">Code de hachage d'un entier signé 32 bits.</span>
          <span class="sxs-lookup">
            <span data-stu-id="95fa9-128">A 32-bit signed integer hash code.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invalid">
      <MemberSignature Language="C#" Value="public static System.IO.Log.SequenceNumber Invalid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.IO.Log.SequenceNumber Invalid" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.SequenceNumber.Invalid" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Invalid As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::IO::Log::SequenceNumber Invalid { System::IO::Log::SequenceNumber get(); };" />
      <MemberSignature Language="F#" Value="member this.Invalid : System.IO.Log.SequenceNumber" Usage="System.IO.Log.SequenceNumber.Invalid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="95fa9-129">Obtient un numéro de séquence en tant que valeur par défaut pour représenter un numéro de séquence non valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="95fa9-129">Gets a sequence number that serves as a default value for representing an invalid sequence number.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="95fa9-130">Un <see cref="T:System.IO.Log.SequenceNumber" /> initialisé à UInt64.<see cref="F:System.UInt64.MaxValue" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="95fa9-130">A <see cref="T:System.IO.Log.SequenceNumber" /> initialized to UInt64.<see cref="F:System.UInt64.MaxValue" /></span>
          </span>
          <span data-ttu-id="95fa9-131">qui sert de valeur par défaut pour représenter un numéro de séquence non valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="95fa9-131">that serves as a default value for representing an invalid sequence number.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.IO.Log.SequenceNumber c1, System.IO.Log.SequenceNumber c2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.IO.Log.SequenceNumber c1, valuetype System.IO.Log.SequenceNumber c2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.SequenceNumber.op_Equality(System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (c1 As SequenceNumber, c2 As SequenceNumber) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::IO::Log::SequenceNumber c1, System::IO::Log::SequenceNumber c2);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber -&gt; bool" Usage="c1 = c2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c1" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="c2" Type="System.IO.Log.SequenceNumber" />
      </Parameters>
      <Docs>
        <param name="c1">
          <span data-ttu-id="95fa9-132">
            <see cref="T:System.IO.Log.SequenceNumber" /> à gauche de l'opérateur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="95fa9-132">The <see cref="T:System.IO.Log.SequenceNumber" /> on the left side of the operator.</span>
          </span>
        </param>
        <param name="c2">
          <span data-ttu-id="95fa9-133">
            <see cref="T:System.IO.Log.SequenceNumber" /> à droite de l'opérateur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="95fa9-133">The <see cref="T:System.IO.Log.SequenceNumber" /> on the right side of the operator.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="95fa9-134">Compare deux instances <see cref="T:System.IO.Log.SequenceNumber" /> pour déterminer s'ils sont égaux.</span>
          <span class="sxs-lookup">
            <span data-stu-id="95fa9-134">Compares two <see cref="T:System.IO.Log.SequenceNumber" /> instances to determine whether they are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="95fa9-135">
            <see langword="true" /> si les deux instances <see cref="T:System.IO.Log.SequenceNumber" /> sont égales ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="95fa9-135">
              <see langword="true" /> if both <see cref="T:System.IO.Log.SequenceNumber" /> instances are equal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[<span data-ttu-id="95fa9-136">La méthode équivalente pour cet opérateur est <xref:System.IO.Log.SequenceNumber.CompareTo*?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="95fa9-136">The equivalent method for this operator is <xref:System.IO.Log.SequenceNumber.CompareTo*?displayProperty=nameWithType>.</span></span>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (System.IO.Log.SequenceNumber c1, System.IO.Log.SequenceNumber c2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(valuetype System.IO.Log.SequenceNumber c1, valuetype System.IO.Log.SequenceNumber c2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.SequenceNumber.op_GreaterThan(System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt; (c1 As SequenceNumber, c2 As SequenceNumber) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;(System::IO::Log::SequenceNumber c1, System::IO::Log::SequenceNumber c2);" />
      <MemberSignature Language="F#" Value="static member ( &gt; ) : System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber -&gt; bool" Usage="c1 &gt; c2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c1" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="c2" Type="System.IO.Log.SequenceNumber" />
      </Parameters>
      <Docs>
        <param name="c1">
          <span data-ttu-id="95fa9-137">
            <see cref="T:System.IO.Log.SequenceNumber" /> à gauche de l'opérateur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="95fa9-137">The <see cref="T:System.IO.Log.SequenceNumber" /> on the left side of the operator.</span>
          </span>
        </param>
        <param name="c2">
          <span data-ttu-id="95fa9-138">
            <see cref="T:System.IO.Log.SequenceNumber" /> à droite de l'opérateur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="95fa9-138">The <see cref="T:System.IO.Log.SequenceNumber" /> on the right side of the operator.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="95fa9-139">Effectue une comparaison logique de deux instances <see cref="T:System.IO.Log.SequenceNumber" /> pour déterminer si la première est supérieure à la seconde.</span>
          <span class="sxs-lookup">
            <span data-stu-id="95fa9-139">Performs a logical comparison of two <see cref="T:System.IO.Log.SequenceNumber" /> instances to determine whether the first is greater than the second.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="95fa9-140">
            <see langword="true" /> si la première instance est supérieure à la seconde ; sinon <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="95fa9-140">
              <see langword="true" /> if the first instance is greater than the second instance, otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[<span data-ttu-id="95fa9-141">La méthode équivalente pour cet opérateur est <xref:System.IO.Log.SequenceNumber.CompareTo*>.</span><span class="sxs-lookup"><span data-stu-id="95fa9-141">The equivalent method for this operator is <xref:System.IO.Log.SequenceNumber.CompareTo*>.</span></span>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &gt;= (System.IO.Log.SequenceNumber c1, System.IO.Log.SequenceNumber c2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(valuetype System.IO.Log.SequenceNumber c1, valuetype System.IO.Log.SequenceNumber c2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.SequenceNumber.op_GreaterThanOrEqual(System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;= (c1 As SequenceNumber, c2 As SequenceNumber) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;=(System::IO::Log::SequenceNumber c1, System::IO::Log::SequenceNumber c2);" />
      <MemberSignature Language="F#" Value="static member ( &gt;= ) : System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber -&gt; bool" Usage="c1 &gt;= c2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c1" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="c2" Type="System.IO.Log.SequenceNumber" />
      </Parameters>
      <Docs>
        <param name="c1">
          <span data-ttu-id="95fa9-142">
            <see cref="T:System.IO.Log.SequenceNumber" /> à gauche de l'opérateur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="95fa9-142">The <see cref="T:System.IO.Log.SequenceNumber" /> on the left side of the operator.</span>
          </span>
        </param>
        <param name="c2">
          <span data-ttu-id="95fa9-143">
            <see cref="T:System.IO.Log.SequenceNumber" /> à droite de l'opérateur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="95fa9-143">The <see cref="T:System.IO.Log.SequenceNumber" /> on the right side of the operator.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="95fa9-144">Effectue une comparaison logique des deux instances <see cref="T:System.IO.Log.SequenceNumber" /> pour déterminer si la première est supérieure ou égale à la seconde.</span>
          <span class="sxs-lookup">
            <span data-stu-id="95fa9-144">Performs a logical comparison of two <see cref="T:System.IO.Log.SequenceNumber" /> instances to determine whether the first is greater than or equal to the second.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="95fa9-145">
            <see langword="true" /> si la première instance est supérieure ou égale à la seconde ; sinon <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="95fa9-145">
              <see langword="true" /> if the first instance is greater than or equal to the second instance, otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[<span data-ttu-id="95fa9-146">La méthode équivalente pour cet opérateur est <xref:System.IO.Log.SequenceNumber.CompareTo*>.</span><span class="sxs-lookup"><span data-stu-id="95fa9-146">The equivalent method for this operator is <xref:System.IO.Log.SequenceNumber.CompareTo*>.</span></span>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.IO.Log.SequenceNumber c1, System.IO.Log.SequenceNumber c2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.IO.Log.SequenceNumber c1, valuetype System.IO.Log.SequenceNumber c2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.SequenceNumber.op_Inequality(System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (c1 As SequenceNumber, c2 As SequenceNumber) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::IO::Log::SequenceNumber c1, System::IO::Log::SequenceNumber c2);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber -&gt; bool" Usage="System.IO.Log.SequenceNumber.op_Inequality (c1, c2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c1" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="c2" Type="System.IO.Log.SequenceNumber" />
      </Parameters>
      <Docs>
        <param name="c1">
          <span data-ttu-id="95fa9-147">
            <see cref="T:System.IO.Log.SequenceNumber" /> à gauche de l'opérateur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="95fa9-147">The <see cref="T:System.IO.Log.SequenceNumber" /> on the left side of the operator.</span>
          </span>
        </param>
        <param name="c2">
          <span data-ttu-id="95fa9-148">
            <see cref="T:System.IO.Log.SequenceNumber" /> à droite de l'opérateur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="95fa9-148">The <see cref="T:System.IO.Log.SequenceNumber" /> on the right side of the operator.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="95fa9-149">Compare deux instances <see cref="T:System.IO.Log.SequenceNumber" /> pour déterminer si elles ne sont pas égales.</span>
          <span class="sxs-lookup">
            <span data-stu-id="95fa9-149">Compares two <see cref="T:System.IO.Log.SequenceNumber" /> instances to determine whether they are not equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="95fa9-150">
            <see langword="true" /> si les deux instances <see cref="T:System.IO.Log.SequenceNumber" /> ne sont pas égales ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="95fa9-150">
              <see langword="true" /> if both <see cref="T:System.IO.Log.SequenceNumber" /> instances are not equal, otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[<span data-ttu-id="95fa9-151">La méthode équivalente pour cet opérateur est <xref:System.IO.Log.SequenceNumber.CompareTo*>.</span><span class="sxs-lookup"><span data-stu-id="95fa9-151">The equivalent method for this operator is <xref:System.IO.Log.SequenceNumber.CompareTo*>.</span></span>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool operator &lt; (System.IO.Log.SequenceNumber c1, System.IO.Log.SequenceNumber c2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(valuetype System.IO.Log.SequenceNumber c1, valuetype System.IO.Log.SequenceNumber c2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.SequenceNumber.op_LessThan(System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt; (c1 As SequenceNumber, c2 As SequenceNumber) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;(System::IO::Log::SequenceNumber c1, System::IO::Log::SequenceNumber c2);" />
      <MemberSignature Language="F#" Value="static member ( &lt; ) : System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber -&gt; bool" Usage="c1 &lt; c2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c1" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="c2" Type="System.IO.Log.SequenceNumber" />
      </Parameters>
      <Docs>
        <param name="c1">
          <span data-ttu-id="95fa9-152">
            <see cref="T:System.IO.Log.SequenceNumber" /> à gauche de l'opérateur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="95fa9-152">The <see cref="T:System.IO.Log.SequenceNumber" /> on the left side of the operator.</span>
          </span>
        </param>
        <param name="c2">
          <span data-ttu-id="95fa9-153">
            <see cref="T:System.IO.Log.SequenceNumber" /> à droite de l'opérateur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="95fa9-153">The <see cref="T:System.IO.Log.SequenceNumber" /> on the right side of the operator.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="95fa9-154">Effectue une comparaison logique des deux paramètres <see cref="T:System.IO.Log.SequenceNumber" /> pour déterminer si le premier est inférieur au second.</span>
          <span class="sxs-lookup">
            <span data-stu-id="95fa9-154">Performs a logical comparison of the two <see cref="T:System.IO.Log.SequenceNumber" /> parameters to determine whether the first is less than the second.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="95fa9-155">
            <see langword="true" /> si la première instance est inférieure à la seconde ; sinon <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="95fa9-155">
              <see langword="true" /> if the first instance is less than the second instance, otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[<span data-ttu-id="95fa9-156">La méthode équivalente pour cet opérateur est <xref:System.IO.Log.SequenceNumber.CompareTo*>.</span><span class="sxs-lookup"><span data-stu-id="95fa9-156">The equivalent method for this operator is <xref:System.IO.Log.SequenceNumber.CompareTo*>.</span></span>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (System.IO.Log.SequenceNumber c1, System.IO.Log.SequenceNumber c2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(valuetype System.IO.Log.SequenceNumber c1, valuetype System.IO.Log.SequenceNumber c2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.SequenceNumber.op_LessThanOrEqual(System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;= (c1 As SequenceNumber, c2 As SequenceNumber) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;=(System::IO::Log::SequenceNumber c1, System::IO::Log::SequenceNumber c2);" />
      <MemberSignature Language="F#" Value="static member ( &lt;= ) : System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber -&gt; bool" Usage="c1 &lt;= c2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c1" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="c2" Type="System.IO.Log.SequenceNumber" />
      </Parameters>
      <Docs>
        <param name="c1">
          <span data-ttu-id="95fa9-157">
            <see cref="T:System.IO.Log.SequenceNumber" /> à gauche de l'opérateur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="95fa9-157">The <see cref="T:System.IO.Log.SequenceNumber" /> on the left side of the operator.</span>
          </span>
        </param>
        <param name="c2">
          <span data-ttu-id="95fa9-158">
            <see cref="T:System.IO.Log.SequenceNumber" /> à droite de l'opérateur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="95fa9-158">The <see cref="T:System.IO.Log.SequenceNumber" /> on the right side of the operator.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="95fa9-159">Effectue une comparaison logique des deux paramètres <see cref="T:System.IO.Log.SequenceNumber" /> pour déterminer si le premier est inférieur ou égal au second.</span>
          <span class="sxs-lookup">
            <span data-stu-id="95fa9-159">Performs a logical comparison of the two <see cref="T:System.IO.Log.SequenceNumber" /> parameters to determine whether the first is less than or equal to the second.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="95fa9-160">
            <see langword="true" /> si la première instance est inférieure ou égale à la seconde ; sinon <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="95fa9-160">
              <see langword="true" /> if the first instance is less than or equal to the second instance, otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[<span data-ttu-id="95fa9-161">La méthode équivalente pour cet opérateur est <xref:System.IO.Log.SequenceNumber.CompareTo*>.</span><span class="sxs-lookup"><span data-stu-id="95fa9-161">The equivalent method for this operator is <xref:System.IO.Log.SequenceNumber.CompareTo*>.</span></span>]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>