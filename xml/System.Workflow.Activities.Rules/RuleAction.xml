<Type Name="RuleAction" FullName="System.Workflow.Activities.Rules.RuleAction">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4cc309cf10342e34bcd1c837b30a806ec5a03083" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36455471" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class RuleAction" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit RuleAction extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Workflow.Activities.Rules.RuleAction" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class RuleAction" />
  <TypeSignature Language="C++ CLI" Value="public ref class RuleAction abstract" />
  <TypeSignature Language="F#" Value="type RuleAction = class" />
  <AssemblyInfo>
    <AssemblyName>System.Workflow.Activities</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Représente une classe abstraite qui définit une action à exécuter si la <see cref="P:System.Workflow.Activities.Rules.Rule.Condition" /> associée a la valeur <see langword="true" />, pour <see cref="P:System.Workflow.Activities.Rules.Rule.ThenActions" />, ou <see langword="false" />, pour <see cref="P:System.Workflow.Activities.Rules.Rule.ElseActions" />. Cette classe doit être héritée.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les objets <xref:System.Workflow.Activities.Rules.RuleStatementAction> (qui peuvent être utilisés comme <xref:System.Workflow.Activities.Rules.Rule.ThenActions%2A> et <xref:System.Workflow.Activities.Rules.Rule.ElseActions%2A>) affectent généralement à l'une des propriétés de l'activité une valeur de variable, appellent une méthode de l'activité ou des méthodes statiques sur des types des assemblys référencés.  
  
 <xref:System.Workflow.Activities.Rules.RuleAction> est le type de base à partir duquel les classes <xref:System.Workflow.Activities.Rules.RuleStatementAction>, <xref:System.Workflow.Activities.Rules.RuleHaltAction> et <xref:System.Workflow.Activities.Rules.RuleUpdateAction> dérivent. Les utilisations de ces classes sont les suivantes :  
  
-   <xref:System.Workflow.Activities.Rules.RuleStatementAction> modifie une propriété ou appelle une méthode.  
  
-   <xref:System.Workflow.Activities.Rules.RuleHaltAction> arrête l'exécution de <xref:System.Workflow.Activities.Rules.RuleSet> et retourne le contrôle à la méthode d'appel.  
  
-   <xref:System.Workflow.Activities.Rules.RuleUpdateAction> indique explicitement qu'une règle met à jour une variable. Cela provoque la réévaluation de toutes les règles affectées.  
  
   
  
## Examples  
 Le code suivant crée une action qui peut être utilisée dans des ensembles de règles. L'action est nommée `Log` et utilise un paramètre unique, qui doit prendre la valeur d'une chaîne. Cette action transmet la chaîne à la console.  
  
 Pour utiliser ce code, il est nécessaire de l'ajouter à un projet Bibliothèque de classes et de référencer la bibliothèque à partir de votre projet de workflow.  
  
```csharp  
using System;  
using System.CodeDom;  
using System.Collections.Generic;  
using System.Text;  
using System.Workflow.Activities.Rules;  
using System.Workflow.ComponentModel.Compiler;  
  
namespace LogRuleAction  
{  
    public class Log : RuleAction  
    {  
        CodeExpression message;  
  
        public CodeExpression Message  
        {  
            get { return message; }  
            set { message = value; }  
        }  
  
        public Log()  
        {  
            // constructor required for deserialization  
        }  
  
        public Log(CodeExpression expression)  
        {  
            // constructor required by parser  
            message = expression;  
        }  
  
        public override bool Validate(RuleValidation validator)  
        {  
            ValidationError error;  
            if (message == null)  
            {  
                error = new ValidationError("Message cannot be null", 123);  
                validator.Errors.Add(error);  
                return false;  
            }  
            else  
            {  
                RuleExpressionInfo result = RuleExpressionWalker.Validate(validator, message, false);  
                if ((result == null) || (result.ExpressionType != typeof(string)))  
                {  
                    error = new ValidationError("Message must return string result", 123);  
                    validator.Errors.Add(error);  
                    return false;  
                }  
            }  
            return (validator.Errors.Count == 0);  
        }  
  
        public override RuleAction Clone()  
        {  
            Log result = new Log();  
            result.Message = RuleExpressionWalker.Clone(message);  
            return result;  
        }  
  
        public override void Execute(RuleExecution context)  
        {  
            RuleExpressionResult result = RuleExpressionWalker.Evaluate(context, message);  
            if (result != null)  
                Console.WriteLine(result.Value);  
        }  
  
        public override ICollection<string> GetSideEffects(RuleValidation validation)  
        {  
            RuleAnalysis analysis = new RuleAnalysis(validation, true);  
            if (message != null)  
                RuleExpressionWalker.AnalyzeUsage(analysis, message, true, false, null);  
            return analysis.GetSymbols();  
        }  
  
        public override string ToString()  
        {  
            // what should be displayed by the parser  
            StringBuilder result = new StringBuilder("Log(");  
            RuleExpressionWalker.Decompile(result, message, null);  
            result.Append(")");  
            return result.ToString();  
        }  
    }  
}  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected RuleAction ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Activities.Rules.RuleAction.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; RuleAction();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Lors de l'implémentation dans une classe dérivée, initialise une nouvelle instance de la classe <see cref="T:System.Workflow.Activities.Rules.RuleAction" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public abstract System.Workflow.Activities.Rules.RuleAction Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Workflow.Activities.Rules.RuleAction Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Activities.Rules.RuleAction.Clone" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Clone () As RuleAction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Workflow::Activities::Rules::RuleAction ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; System.Workflow.Activities.Rules.RuleAction" Usage="ruleAction.Clone " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Activities.Rules.RuleAction</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crée une copie complète du <see cref="T:System.Workflow.Activities.Rules.RuleAction" /> en cours.</summary>
        <returns>
          <see cref="T:System.Workflow.Activities.Rules.RuleAction" /> identique à cette instance.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public abstract void Execute (System.Workflow.Activities.Rules.RuleExecution context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Execute(class System.Workflow.Activities.Rules.RuleExecution context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Activities.Rules.RuleAction.Execute(System.Workflow.Activities.Rules.RuleExecution)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Execute (context As RuleExecution)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Execute(System::Workflow::Activities::Rules::RuleExecution ^ context);" />
      <MemberSignature Language="F#" Value="abstract member Execute : System.Workflow.Activities.Rules.RuleExecution -&gt; unit" Usage="ruleAction.Execute context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Workflow.Activities.Rules.RuleExecution" />
      </Parameters>
      <Docs>
        <param name="context">L'état d'exécution de <see cref="T:System.Workflow.Activities.Rules.RuleAction" />.</param>
        <summary>Exécute <see cref="T:System.Workflow.Activities.Rules.RuleAction" /> à l'aide de l'instance <see cref="T:System.Workflow.Activities.Rules.RuleExecution" /> spécifiée.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSideEffects">
      <MemberSignature Language="C#" Value="public abstract System.Collections.Generic.ICollection&lt;string&gt; GetSideEffects (System.Workflow.Activities.Rules.RuleValidation validation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.ICollection`1&lt;string&gt; GetSideEffects(class System.Workflow.Activities.Rules.RuleValidation validation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Activities.Rules.RuleAction.GetSideEffects(System.Workflow.Activities.Rules.RuleValidation)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetSideEffects (validation As RuleValidation) As ICollection(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Collections::Generic::ICollection&lt;System::String ^&gt; ^ GetSideEffects(System::Workflow::Activities::Rules::RuleValidation ^ validation);" />
      <MemberSignature Language="F#" Value="abstract member GetSideEffects : System.Workflow.Activities.Rules.RuleValidation -&gt; System.Collections.Generic.ICollection&lt;string&gt;" Usage="ruleAction.GetSideEffects validation" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="validation" Type="System.Workflow.Activities.Rules.RuleValidation" />
      </Parameters>
      <Docs>
        <param name="validation">
          <see cref="T:System.Workflow.Activities.Rules.RuleValidation" /> qui a été utilisé précédemment dans un appel à <see cref="M:System.Workflow.Activities.Rules.RuleAction.Validate(System.Workflow.Activities.Rules.RuleValidation)" />.</param>
        <summary>Retourne les champs et les propriétés mis à jour par <see cref="T:System.Workflow.Activities.Rules.RuleAction" />.</summary>
        <returns>Une collection de chaînes qui représentent les noms des champs et propriétés modifiés par une classe <see cref="T:System.Workflow.Activities.Rules.RuleAction" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public abstract bool Validate (System.Workflow.Activities.Rules.RuleValidation validator);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Validate(class System.Workflow.Activities.Rules.RuleValidation validator) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Activities.Rules.RuleAction.Validate(System.Workflow.Activities.Rules.RuleValidation)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Validate (validator As RuleValidation) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool Validate(System::Workflow::Activities::Rules::RuleValidation ^ validator);" />
      <MemberSignature Language="F#" Value="abstract member Validate : System.Workflow.Activities.Rules.RuleValidation -&gt; bool" Usage="ruleAction.Validate validator" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="validator" Type="System.Workflow.Activities.Rules.RuleValidation" />
      </Parameters>
      <Docs>
        <param name="validator">La classe <see cref="T:System.Workflow.Activities.Rules.RuleValidation" /> pour gérer le processus de validation.</param>
        <summary>Vérifie que <see cref="T:System.Workflow.Activities.Rules.RuleAction" /> est configuré correctement et n'a pas d'erreurs.</summary>
        <returns>
          <see langword="true" /> pour indiquer que la classe <see cref="T:System.Workflow.Activities.Rules.RuleAction" /> est correctement validée et n'a pas d'erreurs ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si <xref:System.Workflow.Activities.Rules.RuleAction> contient des erreurs (la méthode `Validate` retourne `false`), alors <xref:System.Workflow.Activities.Rules.RuleValidation.Errors%2A?displayProperty=nameWithType> contiendra la liste des erreurs rencontrées.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>