<Type Name="ServiceProcessInstaller" FullName="System.ServiceProcess.ServiceProcessInstaller">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="79299cc2f8fd9772fbb8c8961ba6f8b4705dbc5a" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30529833" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ServiceProcessInstaller : System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ServiceProcessInstaller extends System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="DocId" Value="T:System.ServiceProcess.ServiceProcessInstaller" />
  <TypeSignature Language="VB.NET" Value="Public Class ServiceProcessInstaller&#xA;Inherits ComponentInstaller" />
  <TypeSignature Language="C++ CLI" Value="public ref class ServiceProcessInstaller : System::Configuration::Install::ComponentInstaller" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceProcess</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.Install.ComponentInstaller</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Installe un exécutable contenant des classes qui étendent <see cref="T:System.ServiceProcess.ServiceBase" />. Cette classe est appelée par les utilitaires d'installation comme InstallUtil.exe lors de l'installation d'une application de service.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.ServiceProcess.ServiceProcessInstaller> ne fonctionne pas commun à tous les services dans un fichier exécutable. Il est utilisé par l’utilitaire d’installation pour écrire des valeurs de Registre associés aux services que vous souhaitez installer.  
  
 Pour installer un service, créez une classe de programme d’installation de projet qui hérite de <xref:System.Configuration.Install.Installer>et définissez la <xref:System.ComponentModel.RunInstallerAttribute> sur la classe pour `true`. Dans votre projet, instanciez un <xref:System.ServiceProcess.ServiceProcessInstaller> instance par l’application de service et un <xref:System.ServiceProcess.ServiceInstaller> pour chaque service dans l’application. Enfin, ajoutez le <xref:System.ServiceProcess.ServiceProcessInstaller> instance et le <xref:System.ServiceProcess.ServiceInstaller> instances de classe de programme d’installation de votre projet.  
  
 Lorsque InstallUtil.exe s’exécute, l’utilitaire de recherche de classes dans l’assembly de service avec le <xref:System.ComponentModel.RunInstallerAttribute> la valeur `true`. Ajouter des classes à l’assembly de service en les ajoutant à la <xref:System.Configuration.Install.Installer.Installers%2A> collection associée à votre programme d’installation du projet. Si <xref:System.ComponentModel.RunInstallerAttribute> est `false`, l’utilitaire d’installation ignore le programme d’installation du projet.  
  
 Pour une instance de <xref:System.ServiceProcess.ServiceProcessInstaller>, vous pouvez modifier ces propriétés englobent qu’une application de service s’exécutent sous un compte autre que l’utilisateur connecté. Vous pouvez spécifier un particulier <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> et <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> paire sous lequel le service doit s’exécuter, ou vous pouvez utiliser <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> pour spécifier que le service est exécuté sous le compte d’ordinateur système, local ou compte de service réseau ou un compte d’utilisateur.  
  
> [!NOTE]
>  Compte de système de l’ordinateur n’est pas le même que le compte d’administrateur.  
  
 Normalement, vous n’appelez pas les méthodes sur <xref:System.ServiceProcess.ServiceInstaller> dans votre code ; ils sont généralement appelées uniquement par l’utilitaire d’installation. L’utilitaire d’installation appelle automatiquement la <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=nameWithType> et <xref:System.ServiceProcess.ServiceInstaller.Install%2A?displayProperty=nameWithType> méthodes pendant le processus d’installation. Si nécessaire, il annule les erreurs en appelant <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> (ou <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A?displayProperty=nameWithType>) sur tous les composants installés précédemment.  
  
 Routine d’installation d’une application gère automatiquement les informations concernant les composants déjà installé, le programme d’installation de projet <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>. Ces informations d’état sont régulièrement mis à jour en tant que le <xref:System.ServiceProcess.ServiceProcessInstaller> instance et à chaque <xref:System.ServiceProcess.ServiceInstaller> instance est installée par l’utilitaire. Il est généralement inutile pour votre code modifie ces informations d’état de manière explicite.  
  
 Instanciation d’un <xref:System.ServiceProcess.ServiceProcessInstaller> , le constructeur de classe de base, <xref:System.Configuration.Install.ComponentInstaller.%23ctor%2A>, à appeler.  
  
   
  
## Examples  
 L’exemple suivant crée un programme d’installation de projet appelé MyProjectInstaller qui hérite de <xref:System.Configuration.Install.Installer>. Il est supposé est un exécutable du service qui contient deux services, « Hello-World Service 1 » et « Hello-World Service 2 ». Dans le constructeur de MyProjectInstaller (appelé par l’utilitaire d’installation), <xref:System.ServiceProcess.ServiceInstaller> objets sont créés pour chaque service et un <xref:System.ServiceProcess.ServiceProcessInstaller> est créé pour le fichier exécutable. Pour l’utilitaire d’installation reconnaisse MyProjectInstaller comme un programme d’installation valide, le <xref:System.ComponentModel.RunInstallerAttribute> attribut a la valeur `true`.  
  
 Propriétés facultatives sont définies sur le programme d’installation de processus et les programmes d’installation de service avant que les programmes d’installation sont ajoutés à la <xref:System.Configuration.Install.Installer.Installers%2A> collection. Lorsque l’utilitaire d’installation accède à MyProjectInstaller, les objets ajoutés à la <xref:System.Configuration.Install.Installer.Installers%2A> collection via un appel à <xref:System.Configuration.Install.InstallerCollection.Add%2A?displayProperty=nameWithType> sera installé à son tour. Pendant le processus, le programme d’installation conserve les informations d’état indiquant quels objets ont été installés, chaque objet peut être annulé à son tour en cas d’échec d’une installation.  
  
 Normalement, vous n’instanciez pas votre projet de classe installer explicitement. Vous créez et ajoutez le <xref:System.ComponentModel.RunInstallerAttribute>, mais l’utilitaire d’installation appelle en fait et donc instanciée, la classe.  
  
 [!code-cpp[Classic ServiceInstaller Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ServiceInstaller Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/CS/source.cs#1)]
 [!code-vb[Classic ServiceInstaller Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ServiceProcess.ServiceInstaller" />
    <altmember cref="T:System.ServiceProcess.ServiceBase" />
    <altmember cref="T:System.Configuration.Install.ComponentInstaller" />
    <altmember cref="P:System.Configuration.Install.Installer.Installers" />
    <altmember cref="T:System.ServiceProcess.ServiceAccount" />
    <altmember cref="T:System.ServiceProcess.Design.ServiceInstallerDialog" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceProcessInstaller ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceProcessInstaller.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ServiceProcessInstaller();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Crée une instance de la classe <see cref="T:System.ServiceProcess.ServiceProcessInstaller" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Account">
      <MemberSignature Language="C#" Value="public System.ServiceProcess.ServiceAccount Account { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ServiceProcess.ServiceAccount Account" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceProcessInstaller.Account" />
      <MemberSignature Language="VB.NET" Value="Public Property Account As ServiceAccount" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceProcess::ServiceAccount Account { System::ServiceProcess::ServiceAccount get(); void set(System::ServiceProcess::ServiceAccount value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceProcessInstallerAccount")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceProcess.ServiceAccount</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le type de compte sous lequel doit fonctionner l'application de service.</summary>
        <value>
          <see cref="T:System.ServiceProcess.ServiceAccount" /> qui définit le type de compte sous lequel le système exécute ce service. La valeur par défaut est <see langword="User" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsque le <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> propriété `User`, le <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> et <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> propriétés sont utilisées pour définir un compte sous lequel s’exécute l’application de service.  
  
 Le <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> et <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> paire permet au service pour s’exécuter sous un compte autre que le compte système. Cela permet, par exemple, le service démarre automatiquement au redémarrage, si aucun utilisateur n’est connecté. Si vous ne définissez pas le <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> ou <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> et affectez <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> à `User`, vous serez invité pour un nom d’utilisateur valide et un mot de passe lors de l’installation.  
  
 Vous pouvez également spécifier que le service s’exécute sous le compte système local ou comme local ou service réseau. Consultez le <xref:System.ServiceProcess.ServiceAccount> énumération pour plus d’informations sur les types de comptes.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Username" />
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Password" />
        <altmember cref="T:System.ServiceProcess.ServiceAccount" />
        <altmember cref="T:System.ServiceProcess.Design.ServiceInstallerDialog" />
      </Docs>
    </Member>
    <Member MemberName="CopyFromComponent">
      <MemberSignature Language="C#" Value="public override void CopyFromComponent (System.ComponentModel.IComponent comp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void CopyFromComponent(class System.ComponentModel.IComponent comp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceProcessInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub CopyFromComponent (comp As IComponent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void CopyFromComponent(System::ComponentModel::IComponent ^ comp);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comp" Type="System.ComponentModel.IComponent" />
      </Parameters>
      <Docs>
        <param name="comp">
          <see cref="T:System.ComponentModel.IComponent" /> qui représente le processus de service.</param>
        <summary>Implémente la méthode <see cref="M:System.Configuration.Install.ComponentInstaller.CopyFromComponent(System.ComponentModel.IComponent)" /> de la classe de base sans comportement spécifique à la classe <see cref="T:System.ServiceProcess.ServiceProcessInstaller" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode ne doit pas être appelée au sein de votre code. La méthode de classe de base sur <xref:System.Configuration.Install.ComponentInstaller> est `abstract`, donc il est implémenté ici sur la classe dérivée. Toutefois, il n’est pas <xref:System.ServiceProcess.ServiceProcessInstaller> spécifiques à la classe dans l’implémentation de la méthode de traitement.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ServiceProcess.ServiceProcessInstaller.Install(System.Collections.IDictionary)" />
        <altmember cref="M:System.ServiceProcess.ServiceProcessInstaller.Rollback(System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="HelpText">
      <MemberSignature Language="C#" Value="public override string HelpText { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HelpText" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceProcessInstaller.HelpText" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property HelpText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ HelpText { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le texte d'aide affiché pour les options d'installation du service.</summary>
        <value>Texte d'aide qui décrit les étapes à suivre pour définir le nom d'utilisateur et le mot de passe en vue d'exécuter le service sous un compte particulier.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce texte d’aide peut être utilisé au démarrage d’un service manuellement. Il indique comment entrer les informations de nom et mot de passe utilisateur à l’utilisateur.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Username" />
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Password" />
      </Docs>
    </Member>
    <Member MemberName="Install">
      <MemberSignature Language="C#" Value="public override void Install (System.Collections.IDictionary stateSaver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Install(class System.Collections.IDictionary stateSaver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceProcessInstaller.Install(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Install (stateSaver As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Install(System::Collections::IDictionary ^ stateSaver);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateSaver" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="stateSaver">
          <see cref="T:System.Collections.IDictionary" /> qui contient les informations de contexte associées à l'installation.</param>
        <summary>Écrit dans le Registre des informations relatives à l'application de service. Cette méthode est prévue pour être utilisée par des outils d'installation qui appellent automatiquement les méthodes appropriées.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Normalement, vous n’appelez pas les méthodes sur <xref:System.ServiceProcess.ServiceProcessInstaller> dans votre code ; ils sont généralement appelées uniquement par l’utilitaire d’installation. L’utilitaire d’installation appelle automatiquement la <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=nameWithType> méthode pendant le processus d’installation. Si nécessaire, il annule les erreurs en appelant <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> sur tous les composants installés précédemment. Cette méthode passe l’installation à la classe de base <xref:System.Configuration.Install.Installer.Install%2A?displayProperty=nameWithType> (méthode).  
  
 Normalement, vous ne serez pas appeler les méthodes sur <xref:System.ServiceProcess.ServiceInstaller> dans votre code ; ils sont généralement appelées uniquement par l’utilitaire d’installation. L’utilitaire d’installation appelle automatiquement la <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=nameWithType> et <xref:System.ServiceProcess.ServiceInstaller.Install%2A?displayProperty=nameWithType> méthodes pendant le processus d’installation. Si nécessaire, il annule les erreurs en appelant <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> (ou <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A?displayProperty=nameWithType>) sur tous les composants précédemment installés.  
  
 Routine d’installation d’une application gère automatiquement les informations concernant les composants déjà installé, le programme d’installation de projet <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>. Ces informations d’état, passées dans <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A> comme le `stateSaver` paramètre, est régulièrement mis à jour en tant que le <xref:System.ServiceProcess.ServiceProcessInstaller> instance et à chaque <xref:System.ServiceProcess.ServiceInstaller> instance est installée par l’utilitaire. Il est généralement inutile pour votre code modifie ces informations d’état de manière explicite.  
  
 <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A> passe à la méthode appelante toute exception levée par les méthodes de classe de base ou <xref:System.Configuration.Install.Installer.BeforeInstall>  /  <xref:System.Configuration.Install.Installer.AfterInstall> gestionnaires d’événements.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="stateSaver" /> a la valeur <see langword="null" />.</exception>
        <altmember cref="M:System.ServiceProcess.ServiceProcessInstaller.Rollback(System.Collections.IDictionary)" />
        <altmember cref="M:System.Configuration.Install.Installer.Commit(System.Collections.IDictionary)" />
        <altmember cref="M:System.Configuration.Install.Installer.Uninstall(System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="Password">
      <MemberSignature Language="C#" Value="public string Password { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Password" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceProcessInstaller.Password" />
      <MemberSignature Language="VB.NET" Value="Public Property Password As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Password { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le mot de passe associé au compte d'utilisateur utilisé pour l'exécution de l'application de service.</summary>
        <value>Mot de passe associé au compte utilisateur sous lequel le service doit s'exécuter. La valeur par défaut est une chaîne vide (""). Cette propriété n'est pas publique et n'est jamais sérialisée.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> et <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> paire permet au service pour s’exécuter sous un compte autre que le compte système. Cela permet, par exemple, le service démarre automatiquement au redémarrage, si aucun utilisateur n’est connecté.  
  
 <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> et <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> sont gérées de manière sécurisée dans la mesure où ils ne sont jamais sérialisés ou enregistrés dans l’état d’installation (le programme d’installation de projet <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>) ou un autre emplacement avec un accès public.  
  
 Définition de la <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> et <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> permet à un compte à associer automatiquement avec le service au moment de l’installation. Si vous ne définissez pas le <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> ou <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> et affectez <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> à `User`, vous serez invité pour un nom d’utilisateur valide et un mot de passe lors de l’installation.  
  
 Une autre option pour exécuter un service sous un compte distinct consiste à utiliser le compte système de l’ordinateur. Ce compte, qui est distinct du compte d’administrateur, ne requiert aucun mot de passe. Les privilèges du compte système peuvent dépasser ceux de l’utilisateur actuellement connecté. Requiert de service en cours d’exécution sous le compte système plutôt qu’un compte d’utilisateur évite tout problème résultant de l’utilisateur ne dispose pas d’une autorisation  
  
 Si <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> est n’importe quelle valeur autre que `User`, le compte spécifié (local ou service réseau ou système local) est utilisé, même si le <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> et <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> propriétés sont remplies.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Username" />
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Account" />
        <altmember cref="T:System.ServiceProcess.Design.ServiceInstallerDialog" />
      </Docs>
    </Member>
    <Member MemberName="Rollback">
      <MemberSignature Language="C#" Value="public override void Rollback (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Rollback(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceProcessInstaller.Rollback(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Rollback (savedState As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Rollback(System::Collections::IDictionary ^ savedState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState">
          <see cref="T:System.Collections.IDictionary" /> qui contient les informations de contexte associées à l'installation.</param>
        <summary>Restaure les informations de l'application de service inscrites dans le Registre par la procédure d'installation. Cette méthode est destinée à être utilisée par les outils d'installation qui traitent automatiquement les méthodes appropriées.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Normalement, vous n’appelez pas les méthodes sur <xref:System.ServiceProcess.ServiceProcessInstaller> dans votre code ; ils sont généralement appelées uniquement par l’utilitaire d’installation. L’utilitaire d’installation appelle automatiquement la <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=nameWithType> méthode pendant le processus d’installation. Si nécessaire, il annule les erreurs en appelant <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> sur l’objet qui a généré l’exception.  
  
 Routine d’installation d’une application gère automatiquement les informations concernant les composants déjà installé, le programme d’installation de projet <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>. Ces informations d’état, passées dans <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> comme le `savedState` paramètre, est régulièrement mis à jour en tant que le <xref:System.ServiceProcess.ServiceProcessInstaller> instance et à chaque <xref:System.ServiceProcess.ServiceInstaller> instance est installée par l’utilitaire. Il est généralement inutile pour votre code modifie ces informations d’état de manière explicite.  
  
 <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> passe à la méthode appelante toute exception levée par les méthodes de classe de base ou <xref:System.Configuration.Install.Installer.BeforeInstall>  /  <xref:System.Configuration.Install.Installer.AfterInstall> gestionnaires d’événements.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="savedState" /> a la valeur <see langword="null" />.  
  
 - ou -  
  
 <paramref name="savedState" /> est endommagé ou n'existe pas.</exception>
        <altmember cref="M:System.ServiceProcess.ServiceProcessInstaller.Install(System.Collections.IDictionary)" />
        <altmember cref="T:System.Configuration.Install.ComponentInstaller" />
      </Docs>
    </Member>
    <Member MemberName="Username">
      <MemberSignature Language="C#" Value="public string Username { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Username" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceProcessInstaller.Username" />
      <MemberSignature Language="VB.NET" Value="Public Property Username As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Username { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le compte d'utilisateur sous lequel l'application de service fonctionnera.</summary>
        <value>Compte sous lequel le service doit s'exécuter. La valeur par défaut est une chaîne vide ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> et <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> paire permet au service pour s’exécuter sous un compte autre que le compte système. Cela permet, par exemple, le service démarre automatiquement au redémarrage, si aucun utilisateur n’est connecté.  
  
 <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> et <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> sont gérées de manière sécurisée dans la mesure où ils ne sont jamais sérialisés ou enregistrés dans l’état d’installation (le programme d’installation de projet <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>) ou un autre emplacement avec un accès public.  
  
 Définition de la <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> et <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> permet à un compte à associer automatiquement avec le service au moment de l’installation. Si vous ne définissez pas le <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> ou <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> et affectez <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> à `User`, vous serez invité pour un nom d’utilisateur valide et un mot de passe lors de l’installation.  
  
 Une autre option pour exécuter un service sous un compte distinct consiste à utiliser le compte système de l’ordinateur. Ce compte, qui est distinct du compte d’administrateur, ne requiert aucun mot de passe. Les privilèges du compte système peuvent dépasser ceux de l’utilisateur actuellement connecté. Requiert de service en cours d’exécution sous le compte système plutôt qu’un compte d’utilisateur évite tout problème résultant de l’utilisateur ne dispose pas d’une autorisation  
  
 Si <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> est n’importe quelle valeur autre que `User`, le compte spécifié (local ou service réseau ou système local) est utilisé, même si le <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> et <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> propriétés sont remplies.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Password" />
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Account" />
        <altmember cref="T:System.ServiceProcess.Design.ServiceInstallerDialog" />
      </Docs>
    </Member>
  </Members>
</Type>