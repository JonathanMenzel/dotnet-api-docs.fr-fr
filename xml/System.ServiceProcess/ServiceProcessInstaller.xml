<Type Name="ServiceProcessInstaller" FullName="System.ServiceProcess.ServiceProcessInstaller">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e74b3ded65de2cf8f02653a0912be16df26e0a19" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37611530" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ServiceProcessInstaller : System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ServiceProcessInstaller extends System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="DocId" Value="T:System.ServiceProcess.ServiceProcessInstaller" />
  <TypeSignature Language="VB.NET" Value="Public Class ServiceProcessInstaller&#xA;Inherits ComponentInstaller" />
  <TypeSignature Language="C++ CLI" Value="public ref class ServiceProcessInstaller : System::Configuration::Install::ComponentInstaller" />
  <TypeSignature Language="F#" Value="type ServiceProcessInstaller = class&#xA;    inherit ComponentInstaller" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceProcess</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.Install.ComponentInstaller</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Installs an executable containing classes that extend <see cref="T:System.ServiceProcess.ServiceBase" />. This class is called by installation utilities, such as InstallUtil.exe, when installing a service application.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.ServiceProcess.ServiceProcessInstaller> fonctionne-t-il communes à tous les services dans un fichier exécutable. Il est utilisé par l’utilitaire d’installation à écrire des valeurs de Registre associés aux services que vous souhaitez installer.  
  
 Pour installer un service, créez un projet de classe installer qui hérite de <xref:System.Configuration.Install.Installer>et définissez le <xref:System.ComponentModel.RunInstallerAttribute> sur la classe pour `true`. Au sein de votre projet, instanciez un <xref:System.ServiceProcess.ServiceProcessInstaller> instance par l’application de service et l’autre <xref:System.ServiceProcess.ServiceInstaller> instance pour chaque service dans l’application. Enfin, ajoutez le <xref:System.ServiceProcess.ServiceProcessInstaller> instance et le <xref:System.ServiceProcess.ServiceInstaller> instances à votre classe de programme d’installation de projet.  
  
 Lorsque InstallUtil.exe est exécuté, l’utilitaire recherche de classes dans l’assembly de service avec le <xref:System.ComponentModel.RunInstallerAttribute> défini sur `true`. Ajouter des classes à l’assembly de service en les ajoutant à la <xref:System.Configuration.Install.Installer.Installers%2A> collection associée à votre programme d’installation de projet. Si <xref:System.ComponentModel.RunInstallerAttribute> est `false`, l’utilitaire d’installation ignore le programme d’installation de projet.  
  
 Pour une instance de <xref:System.ServiceProcess.ServiceProcessInstaller>, vous pouvez modifier ces propriétés englobent qu’une application de service s’exécutent sous un compte autre que l’utilisateur connecté. Vous pouvez spécifier un particulier <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> et <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> paire sous lequel le service doit s’exécuter, ou vous pouvez utiliser <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> pour spécifier que le service doit s’exécuter sous le compte d’ordinateur système, local ou compte de service réseau ou un compte d’utilisateur.  
  
> [!NOTE]
>  Le compte d’ordinateur système n’est pas le même que le compte d’administrateur.  
  
 Normalement, vous n’appelez pas les méthodes sur <xref:System.ServiceProcess.ServiceInstaller> au sein de votre code ; ils sont généralement appelées uniquement par l’utilitaire d’installation. L’utilitaire d’installation appelle automatiquement la <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=nameWithType> et <xref:System.ServiceProcess.ServiceInstaller.Install%2A?displayProperty=nameWithType> méthodes pendant le processus d’installation. Si nécessaire, il annule les erreurs, en appelant <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> (ou <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A?displayProperty=nameWithType>) sur tous les composants installés précédemment.  
  
 Routine d’installation d’une application gère automatiquement les informations concernant les composants déjà installé, à l’aide du programme d’installation de projet <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>. Ces informations d’état sont continuellement mis à jour en tant que le <xref:System.ServiceProcess.ServiceProcessInstaller> instance et chaque <xref:System.ServiceProcess.ServiceInstaller> instance est installée par l’utilitaire. Il est généralement inutile pour votre code modifie ces informations d’état de manière explicite.  
  
 Instanciation d’un <xref:System.ServiceProcess.ServiceProcessInstaller> , le constructeur de classe de base, <xref:System.Configuration.Install.ComponentInstaller.%23ctor%2A>, d’être appelées.  
  
   
  
## Examples  
 L’exemple suivant crée un programme d’installation de projet appelé MyProjectInstaller qui hérite de <xref:System.Configuration.Install.Installer>. Il est supposé il est un exécutable de service qui contient deux services, « Hello-World Service 1 » et « Hello-World Service 2 ». Dans le constructeur de MyProjectInstaller (appelé par l’utilitaire d’installation), <xref:System.ServiceProcess.ServiceInstaller> objets sont créés pour chaque service et un <xref:System.ServiceProcess.ServiceProcessInstaller> est créé pour l’exécutable. Pour l’utilitaire d’installation reconnaisse MyProjectInstaller comme un programme d’installation valide, le <xref:System.ComponentModel.RunInstallerAttribute> attribut a la valeur `true`.  
  
 Propriétés facultatives sont définies sur le programme d’installation de processus et les programmes d’installation de service avant que les programmes d’installation sont ajoutés à la <xref:System.Configuration.Install.Installer.Installers%2A> collection. Lorsque l’utilitaire d’installation accède à MyProjectInstaller, les objets ajoutés à la <xref:System.Configuration.Install.Installer.Installers%2A> collection via un appel à <xref:System.Configuration.Install.InstallerCollection.Add%2A?displayProperty=nameWithType> sera installé à son tour. Pendant le processus, le programme d’installation conserve les informations d’état indiquant quels objets ont été installés, chaque objet peut être sauvegardé à son tour en cas d’échec d’une installation.  
  
 Normalement, vous n’instanciez pas votre classe de programme d’installation de projet explicitement. Vous créez et ajoutez le <xref:System.ComponentModel.RunInstallerAttribute>, mais l’utilitaire d’installation appelle en fait et par conséquent instancie, la classe.  
  
 [!code-cpp[Classic ServiceInstaller Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ServiceInstaller Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/CS/source.cs#1)]
 [!code-vb[Classic ServiceInstaller Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ServiceProcess.ServiceInstaller" />
    <altmember cref="T:System.ServiceProcess.ServiceBase" />
    <altmember cref="T:System.Configuration.Install.ComponentInstaller" />
    <altmember cref="P:System.Configuration.Install.Installer.Installers" />
    <altmember cref="T:System.ServiceProcess.ServiceAccount" />
    <altmember cref="T:System.ServiceProcess.Design.ServiceInstallerDialog" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceProcessInstaller ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceProcessInstaller.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ServiceProcessInstaller();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Creates a new instance of the <see cref="T:System.ServiceProcess.ServiceProcessInstaller" /> class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Account">
      <MemberSignature Language="C#" Value="public System.ServiceProcess.ServiceAccount Account { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ServiceProcess.ServiceAccount Account" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceProcessInstaller.Account" />
      <MemberSignature Language="VB.NET" Value="Public Property Account As ServiceAccount" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceProcess::ServiceAccount Account { System::ServiceProcess::ServiceAccount get(); void set(System::ServiceProcess::ServiceAccount value); };" />
      <MemberSignature Language="F#" Value="member this.Account : System.ServiceProcess.ServiceAccount with get, set" Usage="System.ServiceProcess.ServiceProcessInstaller.Account" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceProcessInstallerAccount")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceProcess.ServiceAccount</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the type of account under which to run this service application.</summary>
        <value>Un <see cref="T:System.ServiceProcess.ServiceAccount" /> qui définit le type de compte sous lequel le système exécute ce service. La valeur par défaut est <see langword="User" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsque le <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> propriété est `User`, le <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> et <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> propriétés sont utilisées pour définir un compte sous lequel s’exécute l’application de service.  
  
 Le <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> et <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> paire permet au service de s’exécuter sous un compte autre que le compte système. Cela peut, par exemple, autoriser le service démarre automatiquement au redémarrage, aucun utilisateur n’est connecté. Si vous ne définissez pas la <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> ou <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> vide et définissez <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> à `User`, vous demandera un nom d’utilisateur valide et un mot de passe lors de l’installation.  
  
 Vous pouvez également spécifier que le service de s’exécuter sous le compte système local, ou comme local ou service réseau. Consultez le <xref:System.ServiceProcess.ServiceAccount> énumération pour plus d’informations sur les types de comptes.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Username" />
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Password" />
        <altmember cref="T:System.ServiceProcess.ServiceAccount" />
        <altmember cref="T:System.ServiceProcess.Design.ServiceInstallerDialog" />
      </Docs>
    </Member>
    <Member MemberName="CopyFromComponent">
      <MemberSignature Language="C#" Value="public override void CopyFromComponent (System.ComponentModel.IComponent comp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void CopyFromComponent(class System.ComponentModel.IComponent comp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceProcessInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub CopyFromComponent (comp As IComponent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void CopyFromComponent(System::ComponentModel::IComponent ^ comp);" />
      <MemberSignature Language="F#" Value="override this.CopyFromComponent : System.ComponentModel.IComponent -&gt; unit" Usage="serviceProcessInstaller.CopyFromComponent comp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comp" Type="System.ComponentModel.IComponent" />
      </Parameters>
      <Docs>
        <param name="comp">The <see cref="T:System.ComponentModel.IComponent" /> that represents the service process.</param>
        <summary>Implements the base class <see cref="M:System.Configuration.Install.ComponentInstaller.CopyFromComponent(System.ComponentModel.IComponent)" /> method with no <see cref="T:System.ServiceProcess.ServiceProcessInstaller" /> class-specific behavior.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode ne doit pas être appelée au sein de votre code. La méthode de classe de base sur <xref:System.Configuration.Install.ComponentInstaller> est `abstract`, donc il est implémenté ici sur la classe dérivée. Toutefois, il n’est pas <xref:System.ServiceProcess.ServiceProcessInstaller> spécifique à la classe dans l’implémentation de la méthode de traitement.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ServiceProcess.ServiceProcessInstaller.Install(System.Collections.IDictionary)" />
        <altmember cref="M:System.ServiceProcess.ServiceProcessInstaller.Rollback(System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="HelpText">
      <MemberSignature Language="C#" Value="public override string HelpText { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HelpText" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceProcessInstaller.HelpText" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property HelpText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ HelpText { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.HelpText : string" Usage="System.ServiceProcess.ServiceProcessInstaller.HelpText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets help text displayed for service installation options.</summary>
        <value>Texte d’aide qui fournit une description des étapes permettant de définir le nom d’utilisateur et le mot de passe afin d’exécuter le service sous un compte particulier.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce texte d’aide peut être utilisé lorsqu’un service démarre manuellement. Il indique comment entrer les informations de nom et mot de passe utilisateur à l’utilisateur.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Username" />
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Password" />
      </Docs>
    </Member>
    <Member MemberName="Install">
      <MemberSignature Language="C#" Value="public override void Install (System.Collections.IDictionary stateSaver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Install(class System.Collections.IDictionary stateSaver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceProcessInstaller.Install(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Install (stateSaver As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Install(System::Collections::IDictionary ^ stateSaver);" />
      <MemberSignature Language="F#" Value="override this.Install : System.Collections.IDictionary -&gt; unit" Usage="serviceProcessInstaller.Install stateSaver" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateSaver" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="stateSaver">An <see cref="T:System.Collections.IDictionary" /> that contains the context information associated with the installation.</param>
        <summary>Writes service application information to the registry. This method is meant to be used by installation tools, which call the appropriate methods automatically.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Normalement, vous n’appelez pas les méthodes sur <xref:System.ServiceProcess.ServiceProcessInstaller> au sein de votre code ; ils sont généralement appelées uniquement par l’utilitaire d’installation. L’utilitaire d’installation appelle automatiquement la <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=nameWithType> méthode pendant le processus d’installation. Si nécessaire, il annule les erreurs, en appelant <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> sur tous les composants installés précédemment. Cette méthode passe l’installation à la classe de base <xref:System.Configuration.Install.Installer.Install%2A?displayProperty=nameWithType> (méthode).  
  
 Normalement, vous n’appelez pas les méthodes à <xref:System.ServiceProcess.ServiceInstaller> dans votre code ; ils sont généralement appelées uniquement par l’utilitaire d’installation. L’utilitaire d’installation appelle automatiquement la <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=nameWithType> et <xref:System.ServiceProcess.ServiceInstaller.Install%2A?displayProperty=nameWithType> méthodes pendant le processus d’installation. Si nécessaire, il annule les erreurs, en appelant <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> (ou <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A?displayProperty=nameWithType>) sur tous les composants installés précédemment  
  
 Routine d’installation d’une application gère automatiquement les informations concernant les composants déjà installé, à l’aide du programme d’installation de projet <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>. Ces informations d’état, passées dans <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A> en tant que le `stateSaver` paramètre, est continuellement mis à jour en tant que le <xref:System.ServiceProcess.ServiceProcessInstaller> instance et chaque <xref:System.ServiceProcess.ServiceInstaller> instance est installée par l’utilitaire. Il est généralement inutile pour votre code modifie ces informations d’état de manière explicite.  
  
 <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A> passe à la méthode appelante toutes les exceptions levées par les méthodes de classe de base ou <xref:System.Configuration.Install.Installer.BeforeInstall>  /  <xref:System.Configuration.Install.Installer.AfterInstall> gestionnaires d’événements.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The <paramref name="stateSaver" /> is <see langword="null" />.</exception>
        <altmember cref="M:System.ServiceProcess.ServiceProcessInstaller.Rollback(System.Collections.IDictionary)" />
        <altmember cref="M:System.Configuration.Install.Installer.Commit(System.Collections.IDictionary)" />
        <altmember cref="M:System.Configuration.Install.Installer.Uninstall(System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="Password">
      <MemberSignature Language="C#" Value="public string Password { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Password" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceProcessInstaller.Password" />
      <MemberSignature Language="VB.NET" Value="Public Property Password As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Password { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Password : string with get, set" Usage="System.ServiceProcess.ServiceProcessInstaller.Password" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the password associated with the user account under which the service application runs.</summary>
        <value>Le mot de passe associé au compte sous lequel le service doit s’exécuter. La valeur par défaut est une chaîne vide (""). La propriété n’est pas publique et n’est jamais sérialisée.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> et <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> paire permet au service de s’exécuter sous un compte autre que le compte système. Cela peut, par exemple, autoriser le service démarre automatiquement au redémarrage, aucun utilisateur n’est connecté.  
  
 <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> et <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> sont gérées de manière sécurisée dans la mesure où ils ne sont jamais sérialisés ou enregistrés dans l’état d’installation (le programme d’installation de projet <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>) ou un autre emplacement avec un accès public.  
  
 Définition de la <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> et <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> permet à un compte à associer automatiquement le service au moment de l’installation. Si vous ne définissez pas la <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> ou <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> vide et définissez <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> à `User`, vous demandera un nom d’utilisateur valide et un mot de passe lors de l’installation.  
  
 Une autre option pour exécuter un service sous un compte distinct consiste à utiliser le compte d’ordinateur système. Ce compte, ce qui est différent du compte d’administrateur, ne requiert aucun mot de passe. Les privilèges du compte système peuvent dépasser ceux de l’utilisateur actuellement connecté. En cours d’exécution sous le compte système plutôt que d’un compte d’utilisateur évite tout problème résultant de l’utilisateur une autorisation en l’absence du service requiert  
  
 Si <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> est n’importe quelle valeur autre que `User`, le compte spécifié (local ou service réseau ou système local) est utilisé, même si le <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> et <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> propriétés sont remplies.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Username" />
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Account" />
        <altmember cref="T:System.ServiceProcess.Design.ServiceInstallerDialog" />
      </Docs>
    </Member>
    <Member MemberName="Rollback">
      <MemberSignature Language="C#" Value="public override void Rollback (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Rollback(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceProcessInstaller.Rollback(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Rollback (savedState As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Rollback(System::Collections::IDictionary ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.Rollback : System.Collections.IDictionary -&gt; unit" Usage="serviceProcessInstaller.Rollback savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState">An <see cref="T:System.Collections.IDictionary" /> that contains the context information associated with the installation.</param>
        <summary>Rolls back service application information written to the registry by the installation procedure. This method is meant to be used by installation tools, which process the appropriate methods automatically.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Normalement, vous n’appelez pas les méthodes sur <xref:System.ServiceProcess.ServiceProcessInstaller> au sein de votre code ; ils sont généralement appelées uniquement par l’utilitaire d’installation. L’utilitaire d’installation appelle automatiquement la <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=nameWithType> méthode pendant le processus d’installation. Si nécessaire, il annule les erreurs, en appelant <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> sur l’objet qui a généré l’exception.  
  
 Routine d’installation d’une application gère automatiquement les informations concernant les composants déjà installé, à l’aide du programme d’installation de projet <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>. Ces informations d’état, passées dans <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> en tant que le `savedState` paramètre, est continuellement mis à jour en tant que le <xref:System.ServiceProcess.ServiceProcessInstaller> instance et chaque <xref:System.ServiceProcess.ServiceInstaller> instance est installée par l’utilitaire. Il est généralement inutile pour votre code modifie ces informations d’état de manière explicite.  
  
 <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> passe à la méthode appelante toutes les exceptions levées par les méthodes de classe de base ou <xref:System.Configuration.Install.Installer.BeforeInstall>  /  <xref:System.Configuration.Install.Installer.AfterInstall> gestionnaires d’événements.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The <paramref name="savedState" /> is <see langword="null" />.  -or-  The <paramref name="savedState" /> is corrupted or non-existent.</exception>
        <altmember cref="M:System.ServiceProcess.ServiceProcessInstaller.Install(System.Collections.IDictionary)" />
        <altmember cref="T:System.Configuration.Install.ComponentInstaller" />
      </Docs>
    </Member>
    <Member MemberName="Username">
      <MemberSignature Language="C#" Value="public string Username { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Username" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceProcessInstaller.Username" />
      <MemberSignature Language="VB.NET" Value="Public Property Username As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Username { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Username : string with get, set" Usage="System.ServiceProcess.ServiceProcessInstaller.Username" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the user account under which the service application will run.</summary>
        <value>Le compte sous lequel le service doit s’exécuter. La valeur par défaut est une chaîne vide ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> et <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> paire permet au service de s’exécuter sous un compte autre que le compte système. Cela peut, par exemple, autoriser le service démarre automatiquement au redémarrage, aucun utilisateur n’est connecté.  
  
 <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> et <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> sont gérées de manière sécurisée dans la mesure où ils ne sont jamais sérialisés ou enregistrés dans l’état d’installation (le programme d’installation de projet <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>) ou un autre emplacement avec un accès public.  
  
 Définition de la <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> et <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> permet à un compte à associer automatiquement le service au moment de l’installation. Si vous ne définissez pas la <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> ou <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> vide et définissez <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> à `User`, vous demandera un nom d’utilisateur valide et un mot de passe lors de l’installation.  
  
 Une autre option pour exécuter un service sous un compte distinct consiste à utiliser le compte d’ordinateur système. Ce compte, ce qui est différent du compte d’administrateur, ne requiert aucun mot de passe. Les privilèges du compte système peuvent dépasser ceux de l’utilisateur actuellement connecté. En cours d’exécution sous le compte système plutôt que d’un compte d’utilisateur évite tout problème résultant de l’utilisateur une autorisation en l’absence du service requiert  
  
 Si <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> est n’importe quelle valeur autre que `User`, le compte spécifié (local ou service réseau ou système local) est utilisé, même si le <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> et <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> propriétés sont remplies.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Password" />
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Account" />
        <altmember cref="T:System.ServiceProcess.Design.ServiceInstallerDialog" />
      </Docs>
    </Member>
  </Members>
</Type>