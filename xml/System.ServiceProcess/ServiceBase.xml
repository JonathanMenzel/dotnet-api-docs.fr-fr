<Type Name="ServiceBase" FullName="System.ServiceProcess.ServiceBase">
  <TypeSignature Language="C#" Value="public class ServiceBase : System.ComponentModel.Component" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ServiceBase extends System.ComponentModel.Component" />
  <TypeSignature Language="DocId" Value="T:System.ServiceProcess.ServiceBase" />
  <TypeSignature Language="VB.NET" Value="Public Class ServiceBase&#xA;Inherits Component" />
  <TypeSignature Language="C++ CLI" Value="public ref class ServiceBase : System::ComponentModel::Component" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceProcess</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.InstallerType(typeof(System.ServiceProcess.ServiceProcessInstaller))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="20b65-101">Fournit une classe de base pour un service qui fera partie d'une application de service.</span><span class="sxs-lookup"><span data-stu-id="20b65-101">Provides a base class for a service that will exist as part of a service application.</span></span> <span data-ttu-id="20b65-102"><see cref="T:System.ServiceProcess.ServiceBase" /> doit être dérivé lors de la création d'une classe de service.</span><span class="sxs-lookup"><span data-stu-id="20b65-102"><see cref="T:System.ServiceProcess.ServiceBase" /> must be derived from when creating a new service class.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20b65-103">Dériver de <xref:System.ServiceProcess.ServiceBase> lors de la définition de votre classe de service dans une application de service.</span><span class="sxs-lookup"><span data-stu-id="20b65-103">Derive from <xref:System.ServiceProcess.ServiceBase> when defining your service class in a service application.</span></span> <span data-ttu-id="20b65-104">Tout service utile substitue le <xref:System.ServiceProcess.ServiceBase.OnStart%2A> et <xref:System.ServiceProcess.ServiceBase.OnStop%2A> méthodes.</span><span class="sxs-lookup"><span data-stu-id="20b65-104">Any useful service overrides the <xref:System.ServiceProcess.ServiceBase.OnStart%2A> and <xref:System.ServiceProcess.ServiceBase.OnStop%2A> methods.</span></span> <span data-ttu-id="20b65-105">Pour des fonctionnalités supplémentaires, vous pouvez remplacer <xref:System.ServiceProcess.ServiceBase.OnPause%2A> et <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> avec un comportement spécifique en réponse aux modifications de l’état du service.</span><span class="sxs-lookup"><span data-stu-id="20b65-105">For additional functionality, you can override <xref:System.ServiceProcess.ServiceBase.OnPause%2A> and <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> with specific behavior in response to changes in the service state.</span></span>  
  
 <span data-ttu-id="20b65-106">Un service est un exécutable longues qui ne prend pas en charge une interface utilisateur, et qui ne peut pas s’exécuter sous le compte d’utilisateur connecté.</span><span class="sxs-lookup"><span data-stu-id="20b65-106">A service is a long-running executable that does not support a user interface, and which might not run under the logged-on user account.</span></span> <span data-ttu-id="20b65-107">Le service s’exécute sans tout utilisateur connecté à l’ordinateur.</span><span class="sxs-lookup"><span data-stu-id="20b65-107">The service can run without any user being logged on to the computer.</span></span>  
  
 <span data-ttu-id="20b65-108">Par défaut, les services s’exécutent sous le compte système, ce qui n’est pas le même que le compte d’administrateur.</span><span class="sxs-lookup"><span data-stu-id="20b65-108">By default, services run under the System account, which is not the same as the Administrator account.</span></span> <span data-ttu-id="20b65-109">Vous ne pouvez pas modifier les droits du compte système.</span><span class="sxs-lookup"><span data-stu-id="20b65-109">You cannot change the rights of the System account.</span></span> <span data-ttu-id="20b65-110">Vous pouvez également utiliser un <xref:System.ServiceProcess.ServiceProcessInstaller> pour spécifier un compte d’utilisateur sous lequel le service s’exécutera.</span><span class="sxs-lookup"><span data-stu-id="20b65-110">Alternatively, you can use a <xref:System.ServiceProcess.ServiceProcessInstaller> to specify a user account under which the service will run.</span></span>  
  
 <span data-ttu-id="20b65-111">Un exécutable peut contenir plus d’un service, mais doit contenir un distinct <xref:System.ServiceProcess.ServiceInstaller> pour chaque service.</span><span class="sxs-lookup"><span data-stu-id="20b65-111">An executable can contain more than one service but must contain a separate <xref:System.ServiceProcess.ServiceInstaller> for each service.</span></span> <span data-ttu-id="20b65-112">Le <xref:System.ServiceProcess.ServiceInstaller> instance inscrit le service dans le système.</span><span class="sxs-lookup"><span data-stu-id="20b65-112">The <xref:System.ServiceProcess.ServiceInstaller> instance registers the service with the system.</span></span> <span data-ttu-id="20b65-113">Le programme d’installation associe également chaque service à un journal des événements que vous pouvez utiliser pour enregistrer les commandes de service.</span><span class="sxs-lookup"><span data-stu-id="20b65-113">The installer also associates each service with an event log that you can use to record service commands.</span></span> <span data-ttu-id="20b65-114">Le `main()` fonction dans le fichier exécutable définit les services doivent s’exécuter.</span><span class="sxs-lookup"><span data-stu-id="20b65-114">The `main()` function in the executable defines which services should run.</span></span> <span data-ttu-id="20b65-115">Le répertoire de travail actuel du service est le répertoire système, pas le répertoire dans lequel se trouve le fichier exécutable.</span><span class="sxs-lookup"><span data-stu-id="20b65-115">The current working directory of the service is the system directory, not the directory in which the executable is located.</span></span>  
  
 <span data-ttu-id="20b65-116">Lorsque vous démarrez un service, le système trouve l’exécutable et exécute la <xref:System.ServiceProcess.ServiceBase.OnStart%2A> méthode pour ce service, contenu dans le fichier exécutable.</span><span class="sxs-lookup"><span data-stu-id="20b65-116">When you start a service, the system locates the executable and runs the <xref:System.ServiceProcess.ServiceBase.OnStart%2A> method for that service, contained within the executable.</span></span> <span data-ttu-id="20b65-117">Toutefois, le service en cours d’exécution n’est pas le même que le fichier exécutable en cours d’exécution.</span><span class="sxs-lookup"><span data-stu-id="20b65-117">However, running the service is not the same as running the executable.</span></span> <span data-ttu-id="20b65-118">Le fichier exécutable ne charge le service.</span><span class="sxs-lookup"><span data-stu-id="20b65-118">The executable only loads the service.</span></span> <span data-ttu-id="20b65-119">Le service est accessible (par exemple, démarrage et arrêt) via le Gestionnaire de contrôle des services.</span><span class="sxs-lookup"><span data-stu-id="20b65-119">The service is accessed (for example, started and stopped) through the Service Control Manager.</span></span>  
  
 <span data-ttu-id="20b65-120">L’exécutable appelle le <xref:System.ServiceProcess.ServiceBase> dérivée de fois que le constructeur le premier de la classe vous appelez Start sur le service.</span><span class="sxs-lookup"><span data-stu-id="20b65-120">The executable calls the <xref:System.ServiceProcess.ServiceBase> derived class's constructor the first time you call Start on the service.</span></span> <span data-ttu-id="20b65-121">Le <xref:System.ServiceProcess.ServiceBase.OnStart%2A> méthode de gestion de commande est appelée immédiatement après l’exécution du constructeur.</span><span class="sxs-lookup"><span data-stu-id="20b65-121">The <xref:System.ServiceProcess.ServiceBase.OnStart%2A> command-handling method is called immediately after the constructor executes.</span></span> <span data-ttu-id="20b65-122">Le constructeur n’est pas exécuté à nouveau après la première fois que le service a été chargé, il est donc nécessaire de séparer le traitement effectué par le constructeur de celle effectuée par <xref:System.ServiceProcess.ServiceBase.OnStart%2A>.</span><span class="sxs-lookup"><span data-stu-id="20b65-122">The constructor is not executed again after the first time the service has been loaded, so it is necessary to separate the processing performed by the constructor from that performed by <xref:System.ServiceProcess.ServiceBase.OnStart%2A>.</span></span> <span data-ttu-id="20b65-123">Toutes les ressources qui peuvent être libérées par <xref:System.ServiceProcess.ServiceBase.OnStop%2A> doivent être créées dans <xref:System.ServiceProcess.ServiceBase.OnStart%2A>.</span><span class="sxs-lookup"><span data-stu-id="20b65-123">Any resources that can be released by <xref:System.ServiceProcess.ServiceBase.OnStop%2A> should be created in <xref:System.ServiceProcess.ServiceBase.OnStart%2A>.</span></span> <span data-ttu-id="20b65-124">Création de ressources dans le constructeur empêche les créée correctement si le service est démarré après avoir <xref:System.ServiceProcess.ServiceBase.OnStop%2A> a publié les ressources.</span><span class="sxs-lookup"><span data-stu-id="20b65-124">Creating resources in the constructor prevents them from being created properly if the service is started again after <xref:System.ServiceProcess.ServiceBase.OnStop%2A> has released the resources.</span></span>  
  
 <span data-ttu-id="20b65-125">Le Gestionnaire de contrôle des services (SCM) fournit un moyen d’interagir avec le service.</span><span class="sxs-lookup"><span data-stu-id="20b65-125">The Service Control Manager (SCM) provides a way to interact with the service.</span></span> <span data-ttu-id="20b65-126">Vous pouvez utiliser le SCM pour passer de démarrer, arrêter, interrompre, continuer ou des commandes personnalisées dans le service.</span><span class="sxs-lookup"><span data-stu-id="20b65-126">You can use the SCM to pass Start, Stop, Pause, Continue, or custom commands into the service.</span></span> <span data-ttu-id="20b65-127">Le SCM utilise les valeurs de <xref:System.ServiceProcess.ServiceBase.CanStop%2A> et <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> pour déterminer si le service accepte les arrêter, suspendre ou redémarrer des commandes.</span><span class="sxs-lookup"><span data-stu-id="20b65-127">The SCM uses the values of <xref:System.ServiceProcess.ServiceBase.CanStop%2A> and <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> to determine whether the service accepts Stop, Pause, or Continue commands.</span></span> <span data-ttu-id="20b65-128">Arrêter, suspendre et continuer sont activées dans uniquement si du SCM contexte menus la propriété correspondante <xref:System.ServiceProcess.ServiceBase.CanStop%2A> ou <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> est `true` dans la classe de service.</span><span class="sxs-lookup"><span data-stu-id="20b65-128">Stop, Pause, and Continue are enabled in the SCM's context menus only if the corresponding property <xref:System.ServiceProcess.ServiceBase.CanStop%2A> or <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `true` in the service class.</span></span> <span data-ttu-id="20b65-129">S’il est activé, la commande est passée au service, et <xref:System.ServiceProcess.ServiceBase.OnStop%2A>, <xref:System.ServiceProcess.ServiceBase.OnPause%2A>, ou <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> est appelée.</span><span class="sxs-lookup"><span data-stu-id="20b65-129">If enabled, the command is passed to the service, and <xref:System.ServiceProcess.ServiceBase.OnStop%2A>, <xref:System.ServiceProcess.ServiceBase.OnPause%2A>, or <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> is called.</span></span> <span data-ttu-id="20b65-130">Si <xref:System.ServiceProcess.ServiceBase.CanStop%2A>, <xref:System.ServiceProcess.ServiceBase.CanShutdown%2A>, ou <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> est `false`, la méthode de gestion de commande correspondante (par exemple <xref:System.ServiceProcess.ServiceBase.OnStop%2A>) ne sera pas être traitée, même si vous avez implémenté la méthode.</span><span class="sxs-lookup"><span data-stu-id="20b65-130">If <xref:System.ServiceProcess.ServiceBase.CanStop%2A>, <xref:System.ServiceProcess.ServiceBase.CanShutdown%2A>, or <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `false`, the corresponding command-handling method (such as <xref:System.ServiceProcess.ServiceBase.OnStop%2A>) will not be processed, even if you have implemented the method.</span></span>  
  
 <span data-ttu-id="20b65-131">Vous pouvez utiliser la <xref:System.ServiceProcess.ServiceController> classe faire par programmation le SCM effectue à l’aide d’une interface utilisateur.</span><span class="sxs-lookup"><span data-stu-id="20b65-131">You can use the <xref:System.ServiceProcess.ServiceController> class to do programmatically what the SCM does using a user interface.</span></span> <span data-ttu-id="20b65-132">Vous pouvez automatiser les tâches disponibles dans la console.</span><span class="sxs-lookup"><span data-stu-id="20b65-132">You can automate the tasks available in the console.</span></span> <span data-ttu-id="20b65-133">Si <xref:System.ServiceProcess.ServiceBase.CanStop%2A>, <xref:System.ServiceProcess.ServiceBase.CanShutdown%2A>, ou <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> est `true` , mais vous n’avez pas implémenté une méthode de gestion de commande correspondante (par exemple <xref:System.ServiceProcess.ServiceBase.OnStop%2A>) le système lève une exception et ignore la commande.</span><span class="sxs-lookup"><span data-stu-id="20b65-133">If <xref:System.ServiceProcess.ServiceBase.CanStop%2A>, <xref:System.ServiceProcess.ServiceBase.CanShutdown%2A>, or <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `true` but you have not implemented a corresponding command-handling method (such as <xref:System.ServiceProcess.ServiceBase.OnStop%2A>) the system throws an exception and ignores the command.</span></span>  
  
 <span data-ttu-id="20b65-134">Vous n’avez pas à implémenter <xref:System.ServiceProcess.ServiceBase.OnStart%2A>, <xref:System.ServiceProcess.ServiceBase.OnStop%2A>, ou toute autre méthode dans <xref:System.ServiceProcess.ServiceBase>.</span><span class="sxs-lookup"><span data-stu-id="20b65-134">You do not have to implement <xref:System.ServiceProcess.ServiceBase.OnStart%2A>, <xref:System.ServiceProcess.ServiceBase.OnStop%2A>, or any other method in <xref:System.ServiceProcess.ServiceBase>.</span></span> <span data-ttu-id="20b65-135">Toutefois, le comportement du service est décrit dans <xref:System.ServiceProcess.ServiceBase.OnStart%2A>, au minimum, ce membre doit être substitué.</span><span class="sxs-lookup"><span data-stu-id="20b65-135">However, the service's behavior is described in <xref:System.ServiceProcess.ServiceBase.OnStart%2A>, so at minimum, this member should be overridden.</span></span> <span data-ttu-id="20b65-136">Le `main()` fonction de l’exécutable inscrit le service dans le fichier exécutable avec le Gestionnaire de contrôle de Service en appelant le <xref:System.ServiceProcess.ServiceBase.Run%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="20b65-136">The `main()` function of the executable registers the service in the executable with the Service Control Manager by calling the <xref:System.ServiceProcess.ServiceBase.Run%2A> method.</span></span> <span data-ttu-id="20b65-137">Le <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> propriété de la <xref:System.ServiceProcess.ServiceBase> objet passé à la <xref:System.ServiceProcess.ServiceBase.Run%2A> méthode doit correspondre à la <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> propriété du programme d’installation de service pour ce service.</span><span class="sxs-lookup"><span data-stu-id="20b65-137">The <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> property of the <xref:System.ServiceProcess.ServiceBase> object passed to the <xref:System.ServiceProcess.ServiceBase.Run%2A> method must match the <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> property of the service installer for that service.</span></span>  
  
 <span data-ttu-id="20b65-138">Vous pouvez utiliser `InstallUtil.exe` pour installer les services sur votre système.</span><span class="sxs-lookup"><span data-stu-id="20b65-138">You can use `InstallUtil.exe` to install services on your system.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="20b65-139">Vous pouvez spécifier un journal autre que le journal des événements pour recevoir une notification d’appels de service, mais ni la <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> ni le <xref:System.ServiceProcess.ServiceBase.EventLog%2A> propriété peut écrire dans un journal personnalisé.</span><span class="sxs-lookup"><span data-stu-id="20b65-139">You can specify a log other than the Application event log to receive notification of service calls, but neither the <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> nor the <xref:System.ServiceProcess.ServiceBase.EventLog%2A> property can write to a custom log.</span></span> <span data-ttu-id="20b65-140">Définissez <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> à `false` si vous ne souhaitez pas utiliser la journalisation automatique.</span><span class="sxs-lookup"><span data-stu-id="20b65-140">Set <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> to `false` if you do not want to use automatic logging.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ServiceProcess.ServiceProcessInstaller" />
    <altmember cref="T:System.ServiceProcess.ServiceInstaller" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceBase ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ServiceBase();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="20b65-141">Crée une instance de la classe <see cref="T:System.ServiceProcess.ServiceBase" />.</span><span class="sxs-lookup"><span data-stu-id="20b65-141">Creates a new instance of the <see cref="T:System.ServiceProcess.ServiceBase" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20b65-142">Ne créez pas une instance de la <xref:System.ServiceProcess.ServiceBase> classe.</span><span class="sxs-lookup"><span data-stu-id="20b65-142">Do not create an instance of the <xref:System.ServiceProcess.ServiceBase> class.</span></span> <span data-ttu-id="20b65-143">Au lieu de cela, dérivez de <xref:System.ServiceProcess.ServiceBase> et instancier votre classe dérivée.</span><span class="sxs-lookup"><span data-stu-id="20b65-143">Instead, derive from <xref:System.ServiceProcess.ServiceBase> and instantiate your derived class.</span></span> <span data-ttu-id="20b65-144">La valeur minimale que vous devez implémenter dans le constructeur pour une classe héritée <xref:System.ServiceProcess.ServiceBase> consiste à définir le <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> dans votre composant.</span><span class="sxs-lookup"><span data-stu-id="20b65-144">The minimum you need to implement in the constructor for a class inherited from <xref:System.ServiceProcess.ServiceBase> is to set the <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> on your component.</span></span> <span data-ttu-id="20b65-145">Aucun autre traitement n’est particulièrement nécessaire dans le constructeur.</span><span class="sxs-lookup"><span data-stu-id="20b65-145">No other processing is specifically required in the constructor.</span></span> <span data-ttu-id="20b65-146">Vous devez gérer la plupart des initialisation dans <xref:System.ServiceProcess.ServiceBase.OnStart%2A> plutôt que dans le constructeur.</span><span class="sxs-lookup"><span data-stu-id="20b65-146">You should handle most initialization in <xref:System.ServiceProcess.ServiceBase.OnStart%2A> rather than in the constructor.</span></span> <span data-ttu-id="20b65-147">Sinon, il n’existe aucune garantie que les objets seront réinitialisés lorsque vous redémarrez un service après avoir été arrêté.</span><span class="sxs-lookup"><span data-stu-id="20b65-147">Otherwise, there is no guarantee the objects will be reinitialized when you restart a service after it has been stopped.</span></span>  
  
 <span data-ttu-id="20b65-148">Si vous remplacez le constructeur dans votre classe dérivée, appelez le constructeur de classe de base dans votre code.</span><span class="sxs-lookup"><span data-stu-id="20b65-148">If you override the constructor in your derived class, call the base class constructor in your code.</span></span>  
  
 <span data-ttu-id="20b65-149">Le <xref:System.ServiceProcess.ServiceBase> constructeur définit <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> à `true`.</span><span class="sxs-lookup"><span data-stu-id="20b65-149">The <xref:System.ServiceProcess.ServiceBase> constructor sets <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> to `true`.</span></span> <span data-ttu-id="20b65-150">Si vous ne souhaitez pas enregistrer automatiquement les appels au service de gestionnaire de contrôle des services (SCM), la valeur <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> à `false`.</span><span class="sxs-lookup"><span data-stu-id="20b65-150">If you do not want to automatically log calls to the service from the Service Control Manager (SCM), set <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> to `false`.</span></span>  
  
 <span data-ttu-id="20b65-151">Si le fichier exécutable contient un seul service, le système appelle le constructeur du service lorsque Start est sélectionnée dans SCM et exécute le destructeur si arrêter est appelée.</span><span class="sxs-lookup"><span data-stu-id="20b65-151">If the executable contains a single service, the system calls the service's constructor when Start is selected from the SCM, and runs the destructor if Stop is called.</span></span>  
  
 <span data-ttu-id="20b65-152">Si le fichier exécutable contient plusieurs services, l’appel de démarrer sur un service entraîne des constructeurs pouvant être appelé pour tous les services dans le fichier exécutable, mais uniquement le service spécifié est démarré.</span><span class="sxs-lookup"><span data-stu-id="20b65-152">If the executable contains multiple services, calling Start on one service causes the constructors to be called for all services in the executable, but only the specified service is started.</span></span> <span data-ttu-id="20b65-153">Destructeurs pour les services sont exécutés ensemble lorsque tous les services ont été arrêtés, non pas individuellement lors de chaque service est arrêté.</span><span class="sxs-lookup"><span data-stu-id="20b65-153">Destructors for the services are run together when all services have been stopped, not individually when each service is stopped.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="20b65-154">Si vous remplacez le constructeur de classe de base, vous devez l’appeler explicitement dans le constructeur de votre classe dérivée.</span><span class="sxs-lookup"><span data-stu-id="20b65-154">If you override the base class constructor, you should explicitly call it in the constructor of your derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.AutoLog" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase[])" />
      </Docs>
    </Member>
    <Member MemberName="AutoLog">
      <MemberSignature Language="C#" Value="public bool AutoLog { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoLog" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceBase.AutoLog" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoLog As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoLog { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("SBAutoLog")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="20b65-155">Indique s'il faut signaler les commandes Démarrer, Arrêter, Suspendre et Continuer dans le journal des événements.</span><span class="sxs-lookup"><span data-stu-id="20b65-155">Indicates whether to report Start, Stop, Pause, and Continue commands in the event log.</span></span></summary>
        <value>
          <span data-ttu-id="20b65-156"><see langword="true" /> pour enregistrer les informations dans le journal des événements ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="20b65-156"><see langword="true" /> to report information in the event log; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20b65-157">Paramètre <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> à `true` indique au service d’utiliser le journal des événements pour les échecs de commande de rapport, ainsi que les informations de changement d’état pour démarrer, arrêter, suspendre et continuer d’événements sur le service.</span><span class="sxs-lookup"><span data-stu-id="20b65-157">Setting <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> to `true` instructs the service to use the Application event log to report command failures, as well as state change information for Start, Stop, Pause, and Continue events on the service.</span></span> <span data-ttu-id="20b65-158">Le nom du service est utilisé en tant que le journal <xref:System.Diagnostics.EventLog.Source%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="20b65-158">The name of the service is used as the log's <xref:System.Diagnostics.EventLog.Source%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="20b65-159">Pour plus d’informations de rapport à un journal des événements personnalisé plutôt que dans le journal des applications, définissez <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> à `false` et écrire des instructions dans les méthodes de gestion de commande <xref:System.ServiceProcess.ServiceBase.OnContinue%2A>, <xref:System.ServiceProcess.ServiceBase.OnPause%2A>, ou <xref:System.ServiceProcess.ServiceBase.OnStop%2A> à valider dans le journal approprié.</span><span class="sxs-lookup"><span data-stu-id="20b65-159">To report information to a custom event log rather than the Application log, set <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> to `false` and write instructions within the command-handling methods <xref:System.ServiceProcess.ServiceBase.OnContinue%2A>, <xref:System.ServiceProcess.ServiceBase.OnPause%2A>, or <xref:System.ServiceProcess.ServiceBase.OnStop%2A> to post to the appropriate log.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="20b65-160">Le <xref:System.ServiceProcess.ServiceBase.ServiceName%2A>, qui fournit la chaîne source pour le journal des événements doit être définie avant que le service tente d’écrire dans le journal des événements.</span><span class="sxs-lookup"><span data-stu-id="20b65-160">The <xref:System.ServiceProcess.ServiceBase.ServiceName%2A>, which supplies the source string for the event log, must be set before the service attempts to write to the event log.</span></span> <span data-ttu-id="20b65-161">Tentative d’accès le journal des événements avant de définie le nom de la source lève une exception.</span><span class="sxs-lookup"><span data-stu-id="20b65-161">Trying to access the event log before the source name is set throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceBase.EventLog" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStop" />
      </Docs>
    </Member>
    <Member MemberName="CanHandlePowerEvent">
      <MemberSignature Language="C#" Value="public bool CanHandlePowerEvent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanHandlePowerEvent" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceBase.CanHandlePowerEvent" />
      <MemberSignature Language="VB.NET" Value="Public Property CanHandlePowerEvent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanHandlePowerEvent { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="20b65-162">Obtient ou définit une valeur qui indique si le service peut gérer les notifications de changement d'état de l'alimentation de l'ordinateur.</span><span class="sxs-lookup"><span data-stu-id="20b65-162">Gets or sets a value indicating whether the service can handle notifications of computer power status changes.</span></span></summary>
        <value>
          <span data-ttu-id="20b65-163"><see langword="true" /> si le service gère les changements d'état de l'alimentation de l'ordinateur indiqués dans la classe <see cref="T:System.ServiceProcess.PowerBroadcastStatus" /> ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="20b65-163"><see langword="true" /> if the service handles the computer power status changes indicated in the <see cref="T:System.ServiceProcess.PowerBroadcastStatus" /> class, otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20b65-164">Lorsque les changements d’état d’alimentation ordinateur, le Gestionnaire de contrôle des services (SCM) vérifie si le service accepte les commandes d’événement d’alimentation à l’aide de la valeur de <xref:System.ServiceProcess.ServiceBase.CanHandlePowerEvent%2A>.</span><span class="sxs-lookup"><span data-stu-id="20b65-164">When the computer power status changes, the Service Control Manager (SCM) verifies whether the service accepts power event commands using the value of <xref:System.ServiceProcess.ServiceBase.CanHandlePowerEvent%2A>.</span></span>  
  
 <span data-ttu-id="20b65-165">Si <xref:System.ServiceProcess.ServiceBase.CanHandlePowerEvent%2A> est `true`, la commande est passée au service et la <xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A> méthode est appelée si définie.</span><span class="sxs-lookup"><span data-stu-id="20b65-165">If <xref:System.ServiceProcess.ServiceBase.CanHandlePowerEvent%2A> is `true`, the command is passed to the service and the <xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A> method is called if defined.</span></span> <span data-ttu-id="20b65-166">Si <xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A> n’est pas implémentée dans la classe dérivée, le SCM gère l’événement d’alimentation via la classe de base vide <xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="20b65-166">If <xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A> is not implemented in the derived class, the SCM handles the power event through the empty base class <xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="20b65-167">Cette propriété est modifiée après le démarrage du service.</span><span class="sxs-lookup"><span data-stu-id="20b65-167">This property is modified after the service was started.</span></span></exception>
        <altmember cref="T:System.ServiceProcess.PowerBroadcastStatus" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanShutdown" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanStop" />
      </Docs>
    </Member>
    <Member MemberName="CanHandleSessionChangeEvent">
      <MemberSignature Language="C#" Value="public bool CanHandleSessionChangeEvent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanHandleSessionChangeEvent" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Property CanHandleSessionChangeEvent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanHandleSessionChangeEvent { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="20b65-168">Obtient ou définit une valeur indiquant si le service peut gérer les événements de modification de session envoyés à partir d'une session Terminal Server.</span><span class="sxs-lookup"><span data-stu-id="20b65-168">Gets or sets a value that indicates whether the service can handle session change events received from a Terminal Server session.</span></span></summary>
        <value>
          <span data-ttu-id="20b65-169"><see langword="true" /> si le service peut gérer des événements de modification de session Terminal Server ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="20b65-169"><see langword="true" /> if the service can handle Terminal Server session change events; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="20b65-170">Cette propriété est modifiée après le démarrage du service.</span><span class="sxs-lookup"><span data-stu-id="20b65-170">This property is modified after the service was started.</span></span></exception>
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnSessionChange(System.ServiceProcess.SessionChangeDescription)" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanShutdown" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanStop" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanHandlePowerEvent" />
      </Docs>
    </Member>
    <Member MemberName="CanPauseAndContinue">
      <MemberSignature Language="C#" Value="public bool CanPauseAndContinue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanPauseAndContinue" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue" />
      <MemberSignature Language="VB.NET" Value="Public Property CanPauseAndContinue As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanPauseAndContinue { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="20b65-171">Obtient ou définit une valeur indiquant si le service accepte les pauses et les reprises.</span><span class="sxs-lookup"><span data-stu-id="20b65-171">Gets or sets a value indicating whether the service can be paused and resumed.</span></span></summary>
        <value>
          <span data-ttu-id="20b65-172"><see langword="true" /> si le service peut être suspendu ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="20b65-172"><see langword="true" /> if the service can be paused; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20b65-173">Définir la valeur de la <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> propriété dans le constructeur pour le service.</span><span class="sxs-lookup"><span data-stu-id="20b65-173">Set the value of the <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> property in the constructor for the service.</span></span>  
  
 <span data-ttu-id="20b65-174">Lorsqu’un service est suspendu, il interrompt son activité.</span><span class="sxs-lookup"><span data-stu-id="20b65-174">When a service is paused, it halts what it is doing.</span></span> <span data-ttu-id="20b65-175">Lorsque vous reprenez le service (via le Gestionnaire de contrôle des services ou par programme), <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> s’exécute.</span><span class="sxs-lookup"><span data-stu-id="20b65-175">When you continue the service (either through the Service Control Manager or programmatically), <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> runs.</span></span>  
  
 <span data-ttu-id="20b65-176">Envoie une demande de suspension au service peut préserver les ressources système.</span><span class="sxs-lookup"><span data-stu-id="20b65-176">Sending a Pause request to the service can conserve system resources.</span></span> <span data-ttu-id="20b65-177">Pause peut ne pas libérer toutes les ressources système, contrairement à arrêter.</span><span class="sxs-lookup"><span data-stu-id="20b65-177">Pause may not release all system resources, but Stop does.</span></span> <span data-ttu-id="20b65-178"><xref:System.ServiceProcess.ServiceBase.OnPause%2A> et <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> sont souvent implémentées pour effectuer le moins de traitement que <xref:System.ServiceProcess.ServiceBase.OnStop%2A> et <xref:System.ServiceProcess.ServiceBase.OnStart%2A>.</span><span class="sxs-lookup"><span data-stu-id="20b65-178"><xref:System.ServiceProcess.ServiceBase.OnPause%2A> and <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> are often implemented to perform less processing than <xref:System.ServiceProcess.ServiceBase.OnStop%2A> and <xref:System.ServiceProcess.ServiceBase.OnStart%2A>.</span></span>  
  
 <span data-ttu-id="20b65-179">Lorsque <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> est `true`, substituez <xref:System.ServiceProcess.ServiceBase.OnPause%2A> et <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> pour spécifier le traitement qui doit se produire lorsque le Gestionnaire de contrôle des services (SCM) passe une demande Pause ou continuer à votre service.</span><span class="sxs-lookup"><span data-stu-id="20b65-179">When <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `true`, override <xref:System.ServiceProcess.ServiceBase.OnPause%2A> and <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> to specify the processing that should occur when the Service Control Manager (SCM) passes a Pause or Continue request to your service.</span></span> <span data-ttu-id="20b65-180"><xref:System.ServiceProcess.ServiceBase.OnContinue%2A> doit être implémentée pour annuler le traitement dans <xref:System.ServiceProcess.ServiceBase.OnPause%2A>.</span><span class="sxs-lookup"><span data-stu-id="20b65-180"><xref:System.ServiceProcess.ServiceBase.OnContinue%2A> should be implemented to undo the processing in <xref:System.ServiceProcess.ServiceBase.OnPause%2A>.</span></span>  
  
 <span data-ttu-id="20b65-181">Si <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> est `false`, le SCM ne passe pas suspendre ou continuer des demandes au service, par conséquent, le <xref:System.ServiceProcess.ServiceBase.OnPause%2A> et <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> méthodes ne sont pas appelées même si elles sont implémentées.</span><span class="sxs-lookup"><span data-stu-id="20b65-181">If <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `false`, the SCM will not pass Pause or Continue requests to the service, so the <xref:System.ServiceProcess.ServiceBase.OnPause%2A> and <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> methods will not be called even if they are implemented.</span></span> <span data-ttu-id="20b65-182">Dans le SCM, le `Pause` et `Continue` contrôles sont désactivés lorsque <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> est `false`.</span><span class="sxs-lookup"><span data-stu-id="20b65-182">In the SCM, the `Pause` and `Continue` controls are disabled when <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="20b65-183">Le service a déjà été démarré.</span><span class="sxs-lookup"><span data-stu-id="20b65-183">The service has already been started.</span></span> <span data-ttu-id="20b65-184">La propriété <see cref="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue" /> ne peut pas être modifiée une fois que le service a démarré.</span><span class="sxs-lookup"><span data-stu-id="20b65-184">The <see cref="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue" /> property cannot be changed once the service has started.</span></span></exception>
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPause" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnContinue" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanShutdown" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanStop" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanHandlePowerEvent" />
      </Docs>
    </Member>
    <Member MemberName="CanShutdown">
      <MemberSignature Language="C#" Value="public bool CanShutdown { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanShutdown" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceBase.CanShutdown" />
      <MemberSignature Language="VB.NET" Value="Public Property CanShutdown As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanShutdown { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="20b65-185">Obtient ou définit une valeur indiquant si le service doit être averti de l'arrêt du système.</span><span class="sxs-lookup"><span data-stu-id="20b65-185">Gets or sets a value indicating whether the service should be notified when the system is shutting down.</span></span></summary>
        <value>
          <span data-ttu-id="20b65-186"><see langword="true" /> si le service doit être averti de l'arrêt du système ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="20b65-186"><see langword="true" /> if the service should be notified when the system is shutting down; otherwise, <see langword="false" />.</span></span>  <span data-ttu-id="20b65-187">La valeur par défaut est <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="20b65-187">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20b65-188">Si <xref:System.ServiceProcess.ServiceBase.CanShutdown%2A> est `true`, le service est notifié lorsque le système s’arrête.</span><span class="sxs-lookup"><span data-stu-id="20b65-188">If <xref:System.ServiceProcess.ServiceBase.CanShutdown%2A> is `true`, the service is notified when the system is shutting down.</span></span> <span data-ttu-id="20b65-189">Lors de l’arrêt, la <xref:System.ServiceProcess.ServiceBase.OnShutdown%2A> méthode est appelée si elle a été implémentée dans votre classe dérivée.</span><span class="sxs-lookup"><span data-stu-id="20b65-189">At shutdown, the <xref:System.ServiceProcess.ServiceBase.OnShutdown%2A> method is called if it has been implemented in your derived class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="20b65-190">Seul le système peut provoquer le <xref:System.ServiceProcess.ServiceBase.OnShutdown%2A> méthode à exécuter ; il peut appeler le service, mais cela n’est pas recommandé.</span><span class="sxs-lookup"><span data-stu-id="20b65-190">Only the system should cause the <xref:System.ServiceProcess.ServiceBase.OnShutdown%2A> method to execute; the service can call it, but this is not recommended.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="20b65-191">Le service a déjà été démarré.</span><span class="sxs-lookup"><span data-stu-id="20b65-191">The service has already been started.</span></span> <span data-ttu-id="20b65-192">La propriété <see cref="P:System.ServiceProcess.ServiceBase.CanShutdown" /> ne peut pas être modifiée une fois que le service a démarré.</span><span class="sxs-lookup"><span data-stu-id="20b65-192">The <see cref="P:System.ServiceProcess.ServiceBase.CanShutdown" /> property cannot be changed once the service has started.</span></span></exception>
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnShutdown" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanStop" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanHandlePowerEvent" />
      </Docs>
    </Member>
    <Member MemberName="CanStop">
      <MemberSignature Language="C#" Value="public bool CanStop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanStop" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceBase.CanStop" />
      <MemberSignature Language="VB.NET" Value="Public Property CanStop As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanStop { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="20b65-193">Obtient ou définit une valeur indiquant si le service peut être arrêté une fois qu'il a démarré.</span><span class="sxs-lookup"><span data-stu-id="20b65-193">Gets or sets a value indicating whether the service can be stopped once it has started.</span></span></summary>
        <value>
          <span data-ttu-id="20b65-194"><see langword="true" /> si le service peut être arrêté et la méthode <see cref="M:System.ServiceProcess.ServiceBase.OnStop" /> appelée ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="20b65-194"><see langword="true" /> if the service can be stopped and the <see cref="M:System.ServiceProcess.ServiceBase.OnStop" /> method called; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20b65-195">Lors de l’arrêt est appelée sur un service, le Gestionnaire de contrôle des services (SCM) vérifie si le service accepte les commandes d’arrêt à l’aide de la valeur de <xref:System.ServiceProcess.ServiceBase.CanStop%2A>.</span><span class="sxs-lookup"><span data-stu-id="20b65-195">When Stop is called on a service, the Service Control Manager (SCM) verifies whether the service accepts Stop commands using the value of <xref:System.ServiceProcess.ServiceBase.CanStop%2A>.</span></span> <span data-ttu-id="20b65-196">Pour la plupart des services, la valeur de <xref:System.ServiceProcess.ServiceBase.CanStop%2A> est `true`, mais certains services du système d’exploitation, par exemple, n’autorisent pas l’utilisateur de les arrêter.</span><span class="sxs-lookup"><span data-stu-id="20b65-196">For most services, the value of <xref:System.ServiceProcess.ServiceBase.CanStop%2A> is `true`, but some operating system services, for example, do not allow the user to stop them.</span></span>  
  
 <span data-ttu-id="20b65-197">Si <xref:System.ServiceProcess.ServiceBase.CanStop%2A> est `true`, la commande Arrêter est passée au service et la <xref:System.ServiceProcess.ServiceBase.OnStop%2A> méthode est appelée si elle est définie.</span><span class="sxs-lookup"><span data-stu-id="20b65-197">If <xref:System.ServiceProcess.ServiceBase.CanStop%2A> is `true`, the Stop command is passed to the service and the <xref:System.ServiceProcess.ServiceBase.OnStop%2A> method is called if it is defined.</span></span> <span data-ttu-id="20b65-198">Si <xref:System.ServiceProcess.ServiceBase.OnStop%2A> n’est pas implémentée dans la classe dérivée, le SCM gère la commande Arrêter via la classe de base vide <xref:System.ServiceProcess.ServiceBase.OnStop%2A?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="20b65-198">If <xref:System.ServiceProcess.ServiceBase.OnStop%2A> is not implemented in the derived class, the SCM handles the Stop command through the empty base class <xref:System.ServiceProcess.ServiceBase.OnStop%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="20b65-199">Le service a déjà été démarré.</span><span class="sxs-lookup"><span data-stu-id="20b65-199">The service has already been started.</span></span> <span data-ttu-id="20b65-200">La propriété <see cref="P:System.ServiceProcess.ServiceBase.CanStop" /> ne peut pas être modifiée une fois que le service a démarré.</span><span class="sxs-lookup"><span data-stu-id="20b65-200">The <see cref="P:System.ServiceProcess.ServiceBase.CanStop" /> property cannot be changed once the service has started.</span></span></exception>
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStop" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanShutdown" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanHandlePowerEvent" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="20b65-201"><see langword="true" /> pour libérer les ressources managées et non managées ; <see langword="false" /> pour ne libérer que les ressources non managées.</span><span class="sxs-lookup"><span data-stu-id="20b65-201"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="20b65-202">Libère les ressources (autres que la mémoire) utilisées par <see cref="T:System.ServiceProcess.ServiceBase" />.</span><span class="sxs-lookup"><span data-stu-id="20b65-202">Disposes of the resources (other than memory) used by the <see cref="T:System.ServiceProcess.ServiceBase" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20b65-203">Appelez <xref:System.ServiceProcess.ServiceBase.Dispose%2A> dans votre classe dérivée (et, dans le <xref:System.ServiceProcess.ServiceBase> classe) lorsque vous avez terminé à l’aide de la classe dérivée.</span><span class="sxs-lookup"><span data-stu-id="20b65-203">Call <xref:System.ServiceProcess.ServiceBase.Dispose%2A> in your derived class (and through it, in the <xref:System.ServiceProcess.ServiceBase> class) when you are finished using the derived class.</span></span> <span data-ttu-id="20b65-204">Le <xref:System.ServiceProcess.ServiceBase.Dispose%2A> méthode rend la classe dérivée dans un état inutilisable.</span><span class="sxs-lookup"><span data-stu-id="20b65-204">The <xref:System.ServiceProcess.ServiceBase.Dispose%2A> method leaves the derived class in an unusable state.</span></span> <span data-ttu-id="20b65-205">Après avoir appelé <xref:System.ServiceProcess.ServiceBase.Dispose%2A>, vous devez libérer toutes les références à la classe dérivée et <xref:System.ServiceProcess.ServiceBase> afin que la mémoire qu’ils ont été occupant peut être récupérée par le garbage collection.</span><span class="sxs-lookup"><span data-stu-id="20b65-205">After calling <xref:System.ServiceProcess.ServiceBase.Dispose%2A>, you must release all references to the derived class and <xref:System.ServiceProcess.ServiceBase> so the memory they were occupying can be reclaimed by garbage collection.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="20b65-206">Appelez toujours <xref:System.ServiceProcess.ServiceBase.Dispose%2A> avant de libérer votre dernière référence à la classe dérivée de <xref:System.ServiceProcess.ServiceBase>.</span><span class="sxs-lookup"><span data-stu-id="20b65-206">Always call <xref:System.ServiceProcess.ServiceBase.Dispose%2A> before you release your last reference to the class derived from <xref:System.ServiceProcess.ServiceBase>.</span></span> <span data-ttu-id="20b65-207">Sinon, les ressources <xref:System.ServiceProcess.ServiceBase> et la classe dérivée sont à l’aide de seront ne pas libérées tant que le garbage collection appelle les destructeurs des objets.</span><span class="sxs-lookup"><span data-stu-id="20b65-207">Otherwise, the resources <xref:System.ServiceProcess.ServiceBase> and the derived class are using will not be freed until garbage collection calls the objects' destructors.</span></span>  
  
 <span data-ttu-id="20b65-208"><xref:System.ServiceProcess.ServiceBase.OnStop%2A> est souvent implémenté pour traiter le code dans <xref:System.ServiceProcess.ServiceBase.OnPause%2A>combiné avec un appel à <xref:System.ServiceProcess.ServiceBase.Dispose%2A>.</span><span class="sxs-lookup"><span data-stu-id="20b65-208"><xref:System.ServiceProcess.ServiceBase.OnStop%2A> is often implemented to process the code in <xref:System.ServiceProcess.ServiceBase.OnPause%2A>, combined with a call to <xref:System.ServiceProcess.ServiceBase.Dispose%2A>.</span></span> <span data-ttu-id="20b65-209">Si vous choisissez de le faire dans votre classe dérivée, il est courant d’implémenter <xref:System.ServiceProcess.ServiceBase.OnStart%2A> allouer tout ce qui <xref:System.ServiceProcess.ServiceBase.Dispose%2A> publié.</span><span class="sxs-lookup"><span data-stu-id="20b65-209">If you choose to do this in your derived class, it is customary to implement <xref:System.ServiceProcess.ServiceBase.OnStart%2A> to allocate whatever <xref:System.ServiceProcess.ServiceBase.Dispose%2A> released.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ServiceProcess.ServiceBase.#ctor" />
      </Docs>
    </Member>
    <Member MemberName="EventLog">
      <MemberSignature Language="C#" Value="public virtual System.Diagnostics.EventLog EventLog { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Diagnostics.EventLog EventLog" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceBase.EventLog" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property EventLog As EventLog" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Diagnostics::EventLog ^ EventLog { System::Diagnostics::EventLog ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.EventLog</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="20b65-210">Obtient un journal des événements que vous pouvez utiliser pour écrire la notification des appels de commande de service comme Démarrer et Arrêter dans le journal des événements de l'application.</span><span class="sxs-lookup"><span data-stu-id="20b65-210">Gets an event log you can use to write notification of service command calls, such as Start and Stop, to the Application event log.</span></span></summary>
        <value><span data-ttu-id="20b65-211">Instance de <see cref="T:System.Diagnostics.EventLog" /> dont la source est inscrite dans le journal des applications.</span><span class="sxs-lookup"><span data-stu-id="20b65-211">An <see cref="T:System.Diagnostics.EventLog" /> instance whose source is registered to the Application log.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20b65-212">Le constructeur initialise la <xref:System.ServiceProcess.ServiceBase.EventLog%2A> propriété à une instance avec le <xref:System.Diagnostics.EventLog.Source%2A?displayProperty=nameWithType> et <xref:System.Diagnostics.EventLog.Log%2A?displayProperty=nameWithType> jeu de propriétés.</span><span class="sxs-lookup"><span data-stu-id="20b65-212">The constructor initializes the <xref:System.ServiceProcess.ServiceBase.EventLog%2A> property to an instance with the <xref:System.Diagnostics.EventLog.Source%2A?displayProperty=nameWithType> and <xref:System.Diagnostics.EventLog.Log%2A?displayProperty=nameWithType> properties set.</span></span> <span data-ttu-id="20b65-213">La source est le <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> du service, et le journal est le journal des applications de l’ordinateur.</span><span class="sxs-lookup"><span data-stu-id="20b65-213">The source is the <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> of the service, and the log is the computer's Application log.</span></span> <span data-ttu-id="20b65-214">Ces valeurs sont définies automatiquement et ne peut pas être modifiés pour la journalisation automatique de commandes de service.</span><span class="sxs-lookup"><span data-stu-id="20b65-214">These values are set automatically and cannot be changed for automatic logging of service commands.</span></span>  
  
 <span data-ttu-id="20b65-215">Lorsque <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> est `true`, Démarrer, arrêter, suspendre, continuer et des commandes personnalisées sont enregistrées automatiquement dans le journal des événements.</span><span class="sxs-lookup"><span data-stu-id="20b65-215">When <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> is `true`, Start, Stop, Pause, Continue, and custom commands are recorded automatically in the Application event log.</span></span> <span data-ttu-id="20b65-216">Vous pouvez utiliser le <xref:System.ServiceProcess.ServiceBase.EventLog%2A> propriété à écrire des messages supplémentaires dans ce journal.</span><span class="sxs-lookup"><span data-stu-id="20b65-216">You can use the <xref:System.ServiceProcess.ServiceBase.EventLog%2A> property to write additional messages to that log as well.</span></span> <span data-ttu-id="20b65-217">Les appels de composant <xref:System.Diagnostics.EventLog.WriteEntry%2A?displayProperty=nameWithType> à l’aide de ce <xref:System.ServiceProcess.ServiceBase.EventLog%2A> membre.</span><span class="sxs-lookup"><span data-stu-id="20b65-217">The component calls <xref:System.Diagnostics.EventLog.WriteEntry%2A?displayProperty=nameWithType> using this <xref:System.ServiceProcess.ServiceBase.EventLog%2A> member.</span></span>  
  
 <span data-ttu-id="20b65-218">Pour plus d’informations de rapport à un journal des événements personnalisé plutôt que dans le journal des applications, définissez <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> à `false` et écrire des instructions dans les méthodes de gestion de commande <xref:System.ServiceProcess.ServiceBase.OnContinue%2A>, <xref:System.ServiceProcess.ServiceBase.OnPause%2A>, ou <xref:System.ServiceProcess.ServiceBase.OnStop%2A> à valider dans le journal approprié.</span><span class="sxs-lookup"><span data-stu-id="20b65-218">To report information to a custom event log rather than the Application log, set <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> to `false` and write instructions within the command-handling methods <xref:System.ServiceProcess.ServiceBase.OnContinue%2A>, <xref:System.ServiceProcess.ServiceBase.OnPause%2A>, or <xref:System.ServiceProcess.ServiceBase.OnStop%2A> to post to the appropriate log.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceBase.AutoLog" />
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
        <altmember cref="T:System.Diagnostics.EventLog" />
      </Docs>
    </Member>
    <Member MemberName="ExitCode">
      <MemberSignature Language="C#" Value="public int ExitCode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ExitCode" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceBase.ExitCode" />
      <MemberSignature Language="VB.NET" Value="Public Property ExitCode As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ExitCode { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="20b65-219">Obtient ou définit le code de sortie du service.</span><span class="sxs-lookup"><span data-stu-id="20b65-219">Gets or sets the exit code for the service.</span></span></summary>
        <value><span data-ttu-id="20b65-220">Code de sortie du service.</span><span class="sxs-lookup"><span data-stu-id="20b65-220">The exit code for the service.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20b65-221">Définir le <xref:System.ServiceProcess.ServiceBase.ExitCode%2A> propriété à une valeur différente de zéro avant d’arrêter le service pour indiquer une erreur au Gestionnaire de contrôle des services.</span><span class="sxs-lookup"><span data-stu-id="20b65-221">Set the <xref:System.ServiceProcess.ServiceBase.ExitCode%2A> property to a non-zero value before stopping the service to indicate an error to the Service Control Manager.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxNameLength">
      <MemberSignature Language="C#" Value="public const int MaxNameLength = 80;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 MaxNameLength = (80)" />
      <MemberSignature Language="DocId" Value="F:System.ServiceProcess.ServiceBase.MaxNameLength" />
      <MemberSignature Language="VB.NET" Value="Public Const MaxNameLength As Integer  = 80" />
      <MemberSignature Language="C++ CLI" Value="public: int MaxNameLength = 80;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>80</MemberValue>
      <Docs>
        <summary><span data-ttu-id="20b65-222">Indique la taille maximale d'un nom de service.</span><span class="sxs-lookup"><span data-stu-id="20b65-222">Indicates the maximum size for a service name.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20b65-223">ServiceName et DisplayName ont tous deux des restrictions de taille doivent être observées lors de la définition des propriétés sur votre classe de service.</span><span class="sxs-lookup"><span data-stu-id="20b65-223">ServiceName and DisplayName both have size restrictions that must be observed when setting the properties on your service class.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceBase.ServiceName" />
      </Docs>
    </Member>
    <Member MemberName="OnContinue">
      <MemberSignature Language="C#" Value="protected virtual void OnContinue ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnContinue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.OnContinue" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnContinue ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnContinue();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="20b65-224">Si elle est implémentée dans une classe dérivée, la méthode <see cref="M:System.ServiceProcess.ServiceBase.OnContinue" /> s'exécute lorsqu'une commande Continuer est envoyée au service par le Gestionnaire de contrôle des services (SCM).</span><span class="sxs-lookup"><span data-stu-id="20b65-224">When implemented in a derived class, <see cref="M:System.ServiceProcess.ServiceBase.OnContinue" /> runs when a Continue command is sent to the service by the Service Control Manager (SCM).</span></span> <span data-ttu-id="20b65-225">Spécifie les actions à effectuer lorsqu'un service reprend son fonctionnement normal après avoir été suspendu.</span><span class="sxs-lookup"><span data-stu-id="20b65-225">Specifies actions to take when a service resumes normal functioning after being paused.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20b65-226">Implémentez <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> à mettre en miroir de la réponse de votre application à <xref:System.ServiceProcess.ServiceBase.OnPause%2A>.</span><span class="sxs-lookup"><span data-stu-id="20b65-226">Implement <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> to mirror your application's response to <xref:System.ServiceProcess.ServiceBase.OnPause%2A>.</span></span> <span data-ttu-id="20b65-227">Lorsque vous reprenez le service (via la console Services ou par programme), le <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> de traitement s’exécute et le service redevient actif.</span><span class="sxs-lookup"><span data-stu-id="20b65-227">When you continue the service (either through the Services console or programmatically), the <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> processing runs, and the service becomes active again.</span></span>  
  
 <span data-ttu-id="20b65-228"><xref:System.ServiceProcess.ServiceBase.OnContinue%2A> est censé être remplacée lorsque la <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> propriété est `true`.</span><span class="sxs-lookup"><span data-stu-id="20b65-228"><xref:System.ServiceProcess.ServiceBase.OnContinue%2A> is expected to be overridden when the <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> property is `true`.</span></span>  
  
 <span data-ttu-id="20b65-229">Si <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> est `false`, le SCM ne passe pas suspendre ou continuer des demandes au service, par conséquent, le <xref:System.ServiceProcess.ServiceBase.OnPause%2A> et <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> méthodes ne sont pas appelées même si elles sont implémentées.</span><span class="sxs-lookup"><span data-stu-id="20b65-229">If <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `false`, the SCM will not pass Pause or Continue requests to the service, so the <xref:System.ServiceProcess.ServiceBase.OnPause%2A> and <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> methods will not be called even if they are implemented.</span></span> <span data-ttu-id="20b65-230">Dans le SCM, le `Pause` et `Continue` contrôles sont désactivés lorsque <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> est `false`.</span><span class="sxs-lookup"><span data-stu-id="20b65-230">In the SCM, the `Pause` and `Continue` controls are disabled when <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPause" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnShutdown" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStop" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="OnCustomCommand">
      <MemberSignature Language="C#" Value="protected virtual void OnCustomCommand (int command);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCustomCommand(int32 command) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCustomCommand (command As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCustomCommand(int command);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="command"><span data-ttu-id="20b65-231">Message de commande envoyé au service.</span><span class="sxs-lookup"><span data-stu-id="20b65-231">The command message sent to the service.</span></span></param>
        <summary><span data-ttu-id="20b65-232">Si elle est implémentée dans une classe dérivée, la méthode <see cref="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)" /> s'exécute lorsque le Gestionnaire de contrôle des services (SCM) passe une commande personnalisée au service.</span><span class="sxs-lookup"><span data-stu-id="20b65-232">When implemented in a derived class, <see cref="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)" /> executes when the Service Control Manager (SCM) passes a custom command to the service.</span></span> <span data-ttu-id="20b65-233">Spécifie les actions à effectuer lorsqu'une commande a la valeur de paramètre spécifiée.</span><span class="sxs-lookup"><span data-stu-id="20b65-233">Specifies actions to take when a command with the specified parameter value occurs.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20b65-234"><xref:System.ServiceProcess.ServiceBase.OnCustomCommand%2A> permet de spécifier des fonctionnalités supplémentaires au-delà de démarrage, arrêt, suspension et reprise des services.</span><span class="sxs-lookup"><span data-stu-id="20b65-234"><xref:System.ServiceProcess.ServiceBase.OnCustomCommand%2A> lets you specify additional functionality beyond starting, stopping, pausing and continuing services.</span></span>  
  
 <span data-ttu-id="20b65-235">Le SCM n’examine pas la commande personnalisée pour vérifier si le service prend en charge la `command` paramètre transmis.</span><span class="sxs-lookup"><span data-stu-id="20b65-235">The SCM does not examine the custom command to verify whether the service supports the `command` parameter passed in.</span></span> <span data-ttu-id="20b65-236">Il passe la commande personnalisée directement au service.</span><span class="sxs-lookup"><span data-stu-id="20b65-236">It passes the custom command directly to the service.</span></span> <span data-ttu-id="20b65-237">Si le service ne reconnaît pas le `command` paramètre, elle ne fait rien.</span><span class="sxs-lookup"><span data-stu-id="20b65-237">If the service does not recognize the `command` parameter, it does nothing.</span></span>  
  
 <span data-ttu-id="20b65-238">Commandes personnalisées sont déclenchées par une <xref:System.ServiceProcess.ServiceController.ExecuteCommand%2A> instruction dans un <xref:System.ServiceProcess.ServiceController> composant.</span><span class="sxs-lookup"><span data-stu-id="20b65-238">Custom commands are raised by an <xref:System.ServiceProcess.ServiceController.ExecuteCommand%2A> statement in a <xref:System.ServiceProcess.ServiceController> component.</span></span> <span data-ttu-id="20b65-239">Utilisez une instruction switch ou si... Then pour gérer les commandes personnalisées que vous définissez sur votre service.</span><span class="sxs-lookup"><span data-stu-id="20b65-239">Use a switch statement or if..then condition to handle the custom commands you define on your service.</span></span>  
  
 <span data-ttu-id="20b65-240">Les seules valeurs pour une commande personnalisée que vous pouvez définir dans votre application ou utiliser dans <xref:System.ServiceProcess.ServiceBase.OnCustomCommand%2A> sont celles comprises entre 128 et 255.</span><span class="sxs-lookup"><span data-stu-id="20b65-240">The only values for a custom command that you can define in your application or use in <xref:System.ServiceProcess.ServiceBase.OnCustomCommand%2A> are those between 128 and 255.</span></span> <span data-ttu-id="20b65-241">Entiers inférieurs à 128 correspondent aux valeurs réservées par le système.</span><span class="sxs-lookup"><span data-stu-id="20b65-241">Integers below 128 correspond to system-reserved values.</span></span>  
  
 <span data-ttu-id="20b65-242">Si le <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> propriété est `true`, des commandes personnalisées, ainsi que toutes les autres commandes, écrivent des entrées dans le journal des événements pour signaler si l’exécution de la méthode a réussi ou a échoué.</span><span class="sxs-lookup"><span data-stu-id="20b65-242">If the <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> property is `true`, custom commands, like all other commands, write entries to the event log to report whether the method execution succeeded or failed.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnContinue" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPause" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnShutdown" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStop" />
      </Docs>
    </Member>
    <Member MemberName="OnPause">
      <MemberSignature Language="C#" Value="protected virtual void OnPause ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPause() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.OnPause" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPause ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPause();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="20b65-243">Si elle est implémentée dans une classe dérivée, cette méthode s'exécute lorsqu'une commande Suspendre est envoyée au service par le Gestionnaire de contrôle des services (SCM).</span><span class="sxs-lookup"><span data-stu-id="20b65-243">When implemented in a derived class, executes when a Pause command is sent to the service by the Service Control Manager (SCM).</span></span> <span data-ttu-id="20b65-244">Spécifie les actions à effectuer lorsqu'un service est suspendu.</span><span class="sxs-lookup"><span data-stu-id="20b65-244">Specifies actions to take when a service pauses.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20b65-245">Utilisez <xref:System.ServiceProcess.ServiceBase.OnPause%2A> pour spécifier le traitement qui se produit lorsque le service reçoit une commande Suspendre.</span><span class="sxs-lookup"><span data-stu-id="20b65-245">Use <xref:System.ServiceProcess.ServiceBase.OnPause%2A> to specify the processing that occurs when the service receives a Pause command.</span></span> <span data-ttu-id="20b65-246"><xref:System.ServiceProcess.ServiceBase.OnPause%2A> est censé être remplacée lorsque la <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> propriété est `true`.</span><span class="sxs-lookup"><span data-stu-id="20b65-246"><xref:System.ServiceProcess.ServiceBase.OnPause%2A> is expected to be overridden when the <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> property is `true`.</span></span>  
  
 <span data-ttu-id="20b65-247">Lorsque vous reprenez un service précédemment interrompu (via la console Services ou par programme), le <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> le traitement est exécuté, et le service redevient actif.</span><span class="sxs-lookup"><span data-stu-id="20b65-247">When you continue a paused service (either through the Services console or programmatically), the <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> processing is run, and the service becomes active again.</span></span>  
  
 <span data-ttu-id="20b65-248">La commande Pause permet uniquement de votre application de réagir à un événement spécifique.</span><span class="sxs-lookup"><span data-stu-id="20b65-248">The Pause command only allows your application to react to a specific event.</span></span> <span data-ttu-id="20b65-249"><xref:System.ServiceProcess.ServiceBase.OnPause%2A> ne fait rien pour le service que vous ne définissez pas à effectuer.</span><span class="sxs-lookup"><span data-stu-id="20b65-249"><xref:System.ServiceProcess.ServiceBase.OnPause%2A> does nothing to the service that you do not define it to do.</span></span>  
  
 <span data-ttu-id="20b65-250">Envoie une demande de suspension au service peut préserver les ressources système, car la suspension ne libère pas forcément toutes les ressources système.</span><span class="sxs-lookup"><span data-stu-id="20b65-250">Sending a Pause request to the service can conserve system resources because Pause need not release all system resources.</span></span> <span data-ttu-id="20b65-251">Par exemple, si les threads ont été ouverts par le processus, la suspension d’un service au lieu d’interruption peut permettre aux threads de rester ouverts, ce qui vous évite la nécessité de les réallouer lorsque le service continue.</span><span class="sxs-lookup"><span data-stu-id="20b65-251">For example, if threads have been opened by the process, pausing a service rather than stopping it can allow the threads to remain open, obviating the need to reallocate them when the service continues.</span></span> <span data-ttu-id="20b65-252">Si vous définissez Suspendre pour libérer toutes les ressources système, il se comporte comme une commande d’arrêt.</span><span class="sxs-lookup"><span data-stu-id="20b65-252">If you define Pause to release all system resources, it behaves like a Stop command.</span></span>  
  
 <span data-ttu-id="20b65-253">Définissez <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> à `true`et remplacez <xref:System.ServiceProcess.ServiceBase.OnPause%2A> et <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> pour spécifier le traitement qui doit se produire lorsque le GCL passe une demande Pause ou continuer à votre service.</span><span class="sxs-lookup"><span data-stu-id="20b65-253">Set <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> to `true`, and override <xref:System.ServiceProcess.ServiceBase.OnPause%2A> and <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> to specify the processing that should occur when the SCM passes a Pause or Continue request to your service.</span></span> <span data-ttu-id="20b65-254"><xref:System.ServiceProcess.ServiceBase.OnContinue%2A> doit être implémentée pour annuler le traitement dans <xref:System.ServiceProcess.ServiceBase.OnPause%2A>.</span><span class="sxs-lookup"><span data-stu-id="20b65-254"><xref:System.ServiceProcess.ServiceBase.OnContinue%2A> should be implemented to undo the processing in <xref:System.ServiceProcess.ServiceBase.OnPause%2A>.</span></span>  
  
 <span data-ttu-id="20b65-255">Si <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> est `false`, le SCM ne passe pas suspendre ou continuer des demandes au service, par conséquent, le <xref:System.ServiceProcess.ServiceBase.OnPause%2A> et <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> méthodes ne sont pas appelées même si implémenté.</span><span class="sxs-lookup"><span data-stu-id="20b65-255">If <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `false`, the SCM will not pass Pause or Continue requests to the service, so the <xref:System.ServiceProcess.ServiceBase.OnPause%2A> and <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> methods will not be called even if implemented.</span></span> <span data-ttu-id="20b65-256">Dans le SCM, le `Pause` et `Continue` contrôles sont désactivés lorsque <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> est `false`.</span><span class="sxs-lookup"><span data-stu-id="20b65-256">In the SCM, the `Pause` and `Continue` controls are disabled when <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnContinue" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnShutdown" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStop" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="OnPowerEvent">
      <MemberSignature Language="C#" Value="protected virtual bool OnPowerEvent (System.ServiceProcess.PowerBroadcastStatus powerStatus);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnPowerEvent(valuetype System.ServiceProcess.PowerBroadcastStatus powerStatus) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnPowerEvent (powerStatus As PowerBroadcastStatus) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool OnPowerEvent(System::ServiceProcess::PowerBroadcastStatus powerStatus);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="powerStatus" Type="System.ServiceProcess.PowerBroadcastStatus" />
      </Parameters>
      <Docs>
        <param name="powerStatus"><span data-ttu-id="20b65-257"><see cref="T:System.ServiceProcess.PowerBroadcastStatus" /> qui indique une notification émise par le système à propos de l'état de son alimentation.</span><span class="sxs-lookup"><span data-stu-id="20b65-257">A <see cref="T:System.ServiceProcess.PowerBroadcastStatus" /> that indicates a notification from the system about its power status.</span></span></param>
        <summary><span data-ttu-id="20b65-258">Si cette méthode est implémentée dans une classe dérivée, elle s'exécute lorsque l'alimentation de l'ordinateur change d'état.</span><span class="sxs-lookup"><span data-stu-id="20b65-258">When implemented in a derived class, executes when the computer's power status has changed.</span></span> <span data-ttu-id="20b65-259">Cela concerne les ordinateurs portables lorsqu'ils passent en mode suspendu (différent d'un arrêt du système).</span><span class="sxs-lookup"><span data-stu-id="20b65-259">This applies to laptop computers when they go into suspended mode, which is not the same as a system shutdown.</span></span></summary>
        <returns><span data-ttu-id="20b65-260">Une fois implémentés dans une classe dérivée, les besoins de votre application déterminent la valeur à retourner.</span><span class="sxs-lookup"><span data-stu-id="20b65-260">When implemented in a derived class, the needs of your application determine what value to return.</span></span> <span data-ttu-id="20b65-261">Par exemple, si un état de diffusion <see langword="QuerySuspend" /> est passé, vous pouvez obliger votre application à rejeter la requête en retournant <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="20b65-261">For example, if a <see langword="QuerySuspend" /> broadcast status is passed, you could cause your application to reject the query by returning <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20b65-262">Utilisez <xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A> pour spécifier le traitement qui se produit lorsque l’événement système indiqué dans le <xref:System.ServiceProcess.PowerBroadcastStatus> énumération se produit, par exemple, lorsque l’ordinateur est placé en mode suspendu ou indique peu d’énergie.</span><span class="sxs-lookup"><span data-stu-id="20b65-262">Use <xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A> to specify the processing that occurs when the system event indicated in the <xref:System.ServiceProcess.PowerBroadcastStatus> enumeration occurs--for example, when the computer is placed in suspended mode or indicates low battery power.</span></span>  
  
 <span data-ttu-id="20b65-263"><xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A> est censé être remplacée lorsque la <xref:System.ServiceProcess.ServiceBase.CanHandlePowerEvent%2A> propriété est `true`.</span><span class="sxs-lookup"><span data-stu-id="20b65-263"><xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A> is expected to be overridden when the <xref:System.ServiceProcess.ServiceBase.CanHandlePowerEvent%2A> property is `true`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanHandlePowerEvent" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnContinue" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPause" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnShutdown" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStop" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="OnSessionChange">
      <MemberSignature Language="C#" Value="protected virtual void OnSessionChange (System.ServiceProcess.SessionChangeDescription changeDescription);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSessionChange(valuetype System.ServiceProcess.SessionChangeDescription changeDescription) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.OnSessionChange(System.ServiceProcess.SessionChangeDescription)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSessionChange (changeDescription As SessionChangeDescription)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSessionChange(System::ServiceProcess::SessionChangeDescription changeDescription);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="changeDescription" Type="System.ServiceProcess.SessionChangeDescription" />
      </Parameters>
      <Docs>
        <param name="changeDescription"><span data-ttu-id="20b65-264">Structure identifiant le type de modification.</span><span class="sxs-lookup"><span data-stu-id="20b65-264">A structure that identifies the change type.</span></span></param>
        <summary><span data-ttu-id="20b65-265">S'exécute lorsqu'un événement de modification est reçu d'une session Terminal Server.</span><span class="sxs-lookup"><span data-stu-id="20b65-265">Executes when a change event is received from a Terminal Server session.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20b65-266">Vous devez définir le <xref:System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent%2A> propriété `true` pour permettre l’exécution de cette méthode.</span><span class="sxs-lookup"><span data-stu-id="20b65-266">You must set the <xref:System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent%2A> property to `true` to enable the execution of this method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent" />
        <altmember cref="T:System.ServiceProcess.SessionChangeDescription" />
      </Docs>
    </Member>
    <Member MemberName="OnShutdown">
      <MemberSignature Language="C#" Value="protected virtual void OnShutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnShutdown() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.OnShutdown" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnShutdown ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnShutdown();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="20b65-267">Si cette méthode est implémentée dans une classe dérivée, elle s'exécute lorsque le système s'arrête.</span><span class="sxs-lookup"><span data-stu-id="20b65-267">When implemented in a derived class, executes when the system is shutting down.</span></span> <span data-ttu-id="20b65-268">Spécifie ce qui doit se produire juste avant l'arrêt du système.</span><span class="sxs-lookup"><span data-stu-id="20b65-268">Specifies what should occur immediately prior to the system shutting down.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20b65-269">Utilisez <xref:System.ServiceProcess.ServiceBase.OnShutdown%2A> pour spécifier le traitement qui se produit lorsque le système s’arrête.</span><span class="sxs-lookup"><span data-stu-id="20b65-269">Use <xref:System.ServiceProcess.ServiceBase.OnShutdown%2A> to specify the processing that occurs when the system shuts down.</span></span>  
  
 <span data-ttu-id="20b65-270">Cet événement se produit uniquement lorsque le système d’exploitation est arrêté, pas lorsque l’ordinateur est mis hors tension.</span><span class="sxs-lookup"><span data-stu-id="20b65-270">This event occurs only when the operating system is shut down, not when the computer is turned off.</span></span>  
  
 <span data-ttu-id="20b65-271"><xref:System.ServiceProcess.ServiceBase.OnShutdown%2A> est censé être remplacée lorsque la <xref:System.ServiceProcess.ServiceBase.CanShutdown%2A> propriété est `true`.</span><span class="sxs-lookup"><span data-stu-id="20b65-271"><xref:System.ServiceProcess.ServiceBase.OnShutdown%2A> is expected to be overridden when the <xref:System.ServiceProcess.ServiceBase.CanShutdown%2A> property is `true`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanShutdown" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnContinue" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPause" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStop" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="OnStart">
      <MemberSignature Language="C#" Value="protected virtual void OnStart (string[] args);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStart(string[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStart (args As String())" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStart(cli::array &lt;System::String ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="args"><span data-ttu-id="20b65-272">Données passées par la commande de démarrage.</span><span class="sxs-lookup"><span data-stu-id="20b65-272">Data passed by the start command.</span></span></param>
        <summary><span data-ttu-id="20b65-273">Si elle est implémentée dans une classe dérivée, cette méthode s'exécute lorsqu'une commande Démarrer est envoyée au service par le Gestionnaire de contrôle des services (SCM) ou lorsque le système d'exploitation démarre (pour un service qui démarre automatiquement).</span><span class="sxs-lookup"><span data-stu-id="20b65-273">When implemented in a derived class, executes when a Start command is sent to the service by the Service Control Manager (SCM) or when the operating system starts (for a service that starts automatically).</span></span> <span data-ttu-id="20b65-274">Spécifie les actions à effectuer lorsque le service démarre.</span><span class="sxs-lookup"><span data-stu-id="20b65-274">Specifies actions to take when the service starts.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20b65-275">Utilisez <xref:System.ServiceProcess.ServiceBase.OnStart%2A> pour spécifier le traitement qui se produit lorsque le service reçoit une commande de démarrage.</span><span class="sxs-lookup"><span data-stu-id="20b65-275">Use <xref:System.ServiceProcess.ServiceBase.OnStart%2A> to specify the processing that occurs when the service receives a Start command.</span></span> <span data-ttu-id="20b65-276"><xref:System.ServiceProcess.ServiceBase.OnStart%2A> est la méthode dans laquelle vous spécifiez le comportement du service.</span><span class="sxs-lookup"><span data-stu-id="20b65-276"><xref:System.ServiceProcess.ServiceBase.OnStart%2A> is the method in which you specify the behavior of the service.</span></span> <span data-ttu-id="20b65-277"><xref:System.ServiceProcess.ServiceBase.OnStart%2A> peut accepter des arguments afin de passer des données, mais cette utilisation est rare.</span><span class="sxs-lookup"><span data-stu-id="20b65-277"><xref:System.ServiceProcess.ServiceBase.OnStart%2A> can take arguments as a way to pass data, but this usage is rare.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="20b65-278">N’utilisez pas le constructeur pour effectuer un traitement qui doit se trouver dans <xref:System.ServiceProcess.ServiceBase.OnStart%2A>.</span><span class="sxs-lookup"><span data-stu-id="20b65-278">Do not use the constructor to perform processing that should be in <xref:System.ServiceProcess.ServiceBase.OnStart%2A>.</span></span> <span data-ttu-id="20b65-279">Utilisez <xref:System.ServiceProcess.ServiceBase.OnStart%2A> pour gérer l’initialisation de votre service.</span><span class="sxs-lookup"><span data-stu-id="20b65-279">Use <xref:System.ServiceProcess.ServiceBase.OnStart%2A> to handle all initialization of your service.</span></span> <span data-ttu-id="20b65-280">Le constructeur est appelé lorsque le fichier exécutable de l’application s’exécute, pas lorsque le service s’exécute.</span><span class="sxs-lookup"><span data-stu-id="20b65-280">The constructor is called when the application's executable runs, not when the service runs.</span></span> <span data-ttu-id="20b65-281">L’exécutable s’exécute avant <xref:System.ServiceProcess.ServiceBase.OnStart%2A>.</span><span class="sxs-lookup"><span data-stu-id="20b65-281">The executable runs before <xref:System.ServiceProcess.ServiceBase.OnStart%2A>.</span></span> <span data-ttu-id="20b65-282">Si vous continuez, par exemple, le constructeur n’est pas appelé à nouveau, car le SCM contienne déjà l’objet en mémoire.</span><span class="sxs-lookup"><span data-stu-id="20b65-282">When you continue, for example, the constructor is not called again because the SCM already holds the object in memory.</span></span> <span data-ttu-id="20b65-283">Si <xref:System.ServiceProcess.ServiceBase.OnStop%2A> libère les ressources allouées dans le constructeur plutôt que dans <xref:System.ServiceProcess.ServiceBase.OnStart%2A>, les ressources nécessaires ne sont pas créés de la deuxième fois que le service est appelé.</span><span class="sxs-lookup"><span data-stu-id="20b65-283">If <xref:System.ServiceProcess.ServiceBase.OnStop%2A> releases resources allocated in the constructor rather than in <xref:System.ServiceProcess.ServiceBase.OnStart%2A>, the needed resources would not be created again the second time the service is called.</span></span>  
  
 <span data-ttu-id="20b65-284">Services peuvent être configurés pour démarrer automatiquement lorsque l’ordinateur redémarre en définissant le <xref:System.ServiceProcess.ServiceInstaller.StartType%2A> sur le programme d’installation du service de <xref:System.ServiceProcess.ServiceStartMode.Automatic>.</span><span class="sxs-lookup"><span data-stu-id="20b65-284">Services can be set to start automatically when the computer reboots by setting the <xref:System.ServiceProcess.ServiceInstaller.StartType%2A> on the service's installer to <xref:System.ServiceProcess.ServiceStartMode.Automatic>.</span></span> <span data-ttu-id="20b65-285">Dans ce cas, <xref:System.ServiceProcess.ServiceBase.OnStart%2A> est appelé au démarrage du système.</span><span class="sxs-lookup"><span data-stu-id="20b65-285">In such a situation, <xref:System.ServiceProcess.ServiceBase.OnStart%2A> would be called at system startup.</span></span>  
  
 <span data-ttu-id="20b65-286"><xref:System.ServiceProcess.ServiceBase.OnStart%2A> est censé être substitué dans la classe dérivée.</span><span class="sxs-lookup"><span data-stu-id="20b65-286"><xref:System.ServiceProcess.ServiceBase.OnStart%2A> is expected to be overridden in the derived class.</span></span> <span data-ttu-id="20b65-287">Pour le service soit utile, <xref:System.ServiceProcess.ServiceBase.OnStart%2A> et <xref:System.ServiceProcess.ServiceBase.OnStop%2A> doit être implémentées dans votre classe de service.</span><span class="sxs-lookup"><span data-stu-id="20b65-287">For the service to be useful, <xref:System.ServiceProcess.ServiceBase.OnStart%2A> and <xref:System.ServiceProcess.ServiceBase.OnStop%2A> should both be implemented in your service class.</span></span>  
  
 <span data-ttu-id="20b65-288">Traiter les arguments de l’initialisation du service dans le <xref:System.ServiceProcess.ServiceBase.OnStart%2A> méthode, pas dans la méthode Main.</span><span class="sxs-lookup"><span data-stu-id="20b65-288">Process initialization arguments for the service in the <xref:System.ServiceProcess.ServiceBase.OnStart%2A> method, not in the Main method.</span></span> <span data-ttu-id="20b65-289">Les arguments dans le `args` tableau de paramètres peut être défini manuellement dans la fenêtre Propriétés pour le service dans la console Services.</span><span class="sxs-lookup"><span data-stu-id="20b65-289">The arguments in the `args` parameter array can be set manually in the properties window for the service in the Services console.</span></span> <span data-ttu-id="20b65-290">Les arguments entrés dans la console ne sont pas enregistrées ; ils sont passés au service de manière ponctuelle lorsque le service est démarré à partir du panneau.</span><span class="sxs-lookup"><span data-stu-id="20b65-290">The arguments entered in the console are not saved; they are passed to the service on a one-time basis when the service is started from the control panel.</span></span> <span data-ttu-id="20b65-291">Les arguments qui doivent être présents lorsque le service est démarré automatiquement peuvent être placés dans la valeur de chaîne ImagePath de la clé de Registre du service (HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\\ * \< nom du service >*).</span><span class="sxs-lookup"><span data-stu-id="20b65-291">Arguments that must be present when the service is automatically started can be placed in the ImagePath string value for the service's registry key (HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\\*\<service name>*).</span></span> <span data-ttu-id="20b65-292">Vous pouvez obtenir les arguments du Registre à l’aide de la <xref:System.Environment.GetCommandLineArgs%2A> méthode, par exemple : `string[] imagePathArgs = Environment.GetCommandLineArgs();`.</span><span class="sxs-lookup"><span data-stu-id="20b65-292">You can obtain the arguments from the registry using the <xref:System.Environment.GetCommandLineArgs%2A> method, for example:  `string[] imagePathArgs = Environment.GetCommandLineArgs();`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnContinue" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPause" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnShutdown" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStop" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="OnStop">
      <MemberSignature Language="C#" Value="protected virtual void OnStop ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.OnStop" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStop ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStop();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="20b65-293">Si elle est implémentée dans une classe dérivée, cette méthode s'exécute lorsqu'une commande Arrêter est envoyée au service par le Gestionnaire de contrôle des services (SCM).</span><span class="sxs-lookup"><span data-stu-id="20b65-293">When implemented in a derived class, executes when a Stop command is sent to the service by the Service Control Manager (SCM).</span></span> <span data-ttu-id="20b65-294">Spécifie les actions à effectuer lorsqu'un service cesse de s'exécuter.</span><span class="sxs-lookup"><span data-stu-id="20b65-294">Specifies actions to take when a service stops running.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20b65-295">Utilisez <xref:System.ServiceProcess.ServiceBase.OnStop%2A> pour spécifier le traitement qui se produit lorsque le service reçoit une commande d’arrêt.</span><span class="sxs-lookup"><span data-stu-id="20b65-295">Use <xref:System.ServiceProcess.ServiceBase.OnStop%2A> to specify the processing that occurs when the service receives a Stop command.</span></span>  
  
 <span data-ttu-id="20b65-296">Lorsque le SCM reçoit une commande d’arrêt, il utilise la valeur de <xref:System.ServiceProcess.ServiceBase.CanStop%2A> pour vérifier si le service accepte cette commande.</span><span class="sxs-lookup"><span data-stu-id="20b65-296">When the SCM receives a Stop command, it uses the value of <xref:System.ServiceProcess.ServiceBase.CanStop%2A> to verify whether the service accepts Stop commands.</span></span> <span data-ttu-id="20b65-297">Si <xref:System.ServiceProcess.ServiceBase.CanStop%2A> est `true`, la commande d’arrêt est passée au service et le <xref:System.ServiceProcess.ServiceBase.OnStop%2A> méthode est appelée si elle est définie.</span><span class="sxs-lookup"><span data-stu-id="20b65-297">If <xref:System.ServiceProcess.ServiceBase.CanStop%2A> is `true`, the Stop command is passed to the service, and the <xref:System.ServiceProcess.ServiceBase.OnStop%2A> method is called if it is defined.</span></span> <span data-ttu-id="20b65-298">Si <xref:System.ServiceProcess.ServiceBase.OnStop%2A> n’est pas implémentée dans le service, le SCM gère la commande d’arrêt.</span><span class="sxs-lookup"><span data-stu-id="20b65-298">If <xref:System.ServiceProcess.ServiceBase.OnStop%2A> is not implemented in the service, the SCM handles the Stop command.</span></span>  
  
 <span data-ttu-id="20b65-299">Si <xref:System.ServiceProcess.ServiceBase.CanStop%2A> est `false`, le SCM ignore la commande d’arrêt.</span><span class="sxs-lookup"><span data-stu-id="20b65-299">If <xref:System.ServiceProcess.ServiceBase.CanStop%2A> is `false`, the SCM ignores the Stop command.</span></span> <span data-ttu-id="20b65-300">Il n’est pas passé au service.</span><span class="sxs-lookup"><span data-stu-id="20b65-300">It is not passed to the service.</span></span> <span data-ttu-id="20b65-301">La commande Arrêter retourne et lève une exception.</span><span class="sxs-lookup"><span data-stu-id="20b65-301">The Stop command returns and throws an exception.</span></span>  
  
 <span data-ttu-id="20b65-302"><xref:System.ServiceProcess.ServiceBase.OnStop%2A> est censé être substitué dans la classe dérivée.</span><span class="sxs-lookup"><span data-stu-id="20b65-302"><xref:System.ServiceProcess.ServiceBase.OnStop%2A> is expected to be overridden in the derived class.</span></span> <span data-ttu-id="20b65-303">Pour le service soit utile, <xref:System.ServiceProcess.ServiceBase.OnStart%2A> et <xref:System.ServiceProcess.ServiceBase.OnStop%2A> doit être implémentées dans votre classe de service.</span><span class="sxs-lookup"><span data-stu-id="20b65-303">For the service to be useful, <xref:System.ServiceProcess.ServiceBase.OnStart%2A> and <xref:System.ServiceProcess.ServiceBase.OnStop%2A> should both be implemented in your service class.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanStop" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnContinue" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPause" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnShutdown" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="RequestAdditionalTime">
      <MemberSignature Language="C#" Value="public void RequestAdditionalTime (int milliseconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RequestAdditionalTime(int32 milliseconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.RequestAdditionalTime(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RequestAdditionalTime (milliseconds As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RequestAdditionalTime(int milliseconds);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="milliseconds" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="milliseconds"><span data-ttu-id="20b65-304">Heure demandée en millisecondes.</span><span class="sxs-lookup"><span data-stu-id="20b65-304">The requested time in milliseconds.</span></span></param>
        <summary><span data-ttu-id="20b65-305">Demande la durée supplémentaire d'une opération en attente.</span><span class="sxs-lookup"><span data-stu-id="20b65-305">Requests additional time for a pending operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20b65-306">Le <xref:System.ServiceProcess.ServiceBase.RequestAdditionalTime%2A> méthode est destinée à être appelée par la <xref:System.ServiceProcess.ServiceBase.OnContinue%2A>, <xref:System.ServiceProcess.ServiceBase.OnPause%2A>, <xref:System.ServiceProcess.ServiceBase.OnStart%2A>, ou <xref:System.ServiceProcess.ServiceBase.OnStop%2A> méthodes pour demander plus de temps pour une opération en attente, pour empêcher le Gestionnaire de contrôle des services (SCM) marque le service comme ne répond ne pas.</span><span class="sxs-lookup"><span data-stu-id="20b65-306">The <xref:System.ServiceProcess.ServiceBase.RequestAdditionalTime%2A> method is intended to be called by the overridden <xref:System.ServiceProcess.ServiceBase.OnContinue%2A>, <xref:System.ServiceProcess.ServiceBase.OnPause%2A>, <xref:System.ServiceProcess.ServiceBase.OnStart%2A>, or <xref:System.ServiceProcess.ServiceBase.OnStop%2A> methods to request additional time for a pending operation, to prevent the Service Control Manager (SCM) from marking the service as not responding.</span></span>  <span data-ttu-id="20b65-307">Si l’opération en attente n’est pas un continuer, le suspendre, démarrer ou arrêter, un <xref:System.InvalidOperationException> est levée.</span><span class="sxs-lookup"><span data-stu-id="20b65-307">If the pending operation is not a continue, pause, start, or stop, an <xref:System.InvalidOperationException> is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="20b65-308">Le service n'est pas en état d'attente.</span><span class="sxs-lookup"><span data-stu-id="20b65-308">The service is not in a pending state.</span></span></exception>
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnContinue" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPause" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStop" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Run">
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="20b65-309">Fournit le point d'entrée principal pour un exécutable de service.</span><span class="sxs-lookup"><span data-stu-id="20b65-309">Provides the main entry point for a service executable.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public static void Run (System.ServiceProcess.ServiceBase service);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Run(class System.ServiceProcess.ServiceBase service) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Run (service As ServiceBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Run(System::ServiceProcess::ServiceBase ^ service);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="service" Type="System.ServiceProcess.ServiceBase" />
      </Parameters>
      <Docs>
        <param name="service"><span data-ttu-id="20b65-310"><see cref="T:System.ServiceProcess.ServiceBase" /> qui indique le service à démarrer.</span><span class="sxs-lookup"><span data-stu-id="20b65-310">A <see cref="T:System.ServiceProcess.ServiceBase" /> which indicates a service to start.</span></span></param>
        <summary><span data-ttu-id="20b65-311">Inscrit l'exécutable d'un service à l'aide du Gestionnaire de contrôle des services.</span><span class="sxs-lookup"><span data-stu-id="20b65-311">Registers the executable for a service with the Service Control Manager (SCM).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20b65-312">Appelez cette surcharge dans les `main()` fonction de l’exécutable du service pour inscrire le service avec le Gestionnaire de contrôle de Service.</span><span class="sxs-lookup"><span data-stu-id="20b65-312">Call this overload in the `main()` function of the service executable to register the service with the Service Control Manager.</span></span> <span data-ttu-id="20b65-313">Après avoir appelé <xref:System.ServiceProcess.ServiceBase.Run%28System.ServiceProcess.ServiceBase%29>, le Gestionnaire de contrôle des services émet une commande de démarrage, ce qui entraîne un appel à la <xref:System.ServiceProcess.ServiceBase.OnStart%2A> méthode dans le service.</span><span class="sxs-lookup"><span data-stu-id="20b65-313">After you call <xref:System.ServiceProcess.ServiceBase.Run%28System.ServiceProcess.ServiceBase%29>, the Service Control Manager issues a Start command, which results in a call to the <xref:System.ServiceProcess.ServiceBase.OnStart%2A> method in the service.</span></span> <span data-ttu-id="20b65-314">Le service n’est pas démarré jusqu'à ce que la commande de démarrage est exécutée.</span><span class="sxs-lookup"><span data-stu-id="20b65-314">The service is not started until the Start command is executed.</span></span>  
  
 <span data-ttu-id="20b65-315">Le <xref:System.ServiceProcess.ServiceBase.Run%2A?displayProperty=nameWithType> méthode est appelée de la même façon en tant que <xref:System.Windows.Forms.Application.Run%2A?displayProperty=nameWithType> pour les applications Windows Forms.</span><span class="sxs-lookup"><span data-stu-id="20b65-315">The <xref:System.ServiceProcess.ServiceBase.Run%2A?displayProperty=nameWithType> method is called in much the same way as <xref:System.Windows.Forms.Application.Run%2A?displayProperty=nameWithType> for Windows Forms applications.</span></span>  
  
 <span data-ttu-id="20b65-316">Si <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> est `true`, une entrée est écrite dans le journal des événements si le service spécifié par le `service` paramètre ne peut pas démarrer.</span><span class="sxs-lookup"><span data-stu-id="20b65-316">If <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> is `true`, an entry is written to the event log if the service specified by the `service` parameter fails to start.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="20b65-317"><paramref name="service" /> est <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="20b65-317"><paramref name="service" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.ServiceProcess.ServiceBase.#ctor" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public static void Run (System.ServiceProcess.ServiceBase[] services);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Run(class System.ServiceProcess.ServiceBase[] services) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Run (services As ServiceBase())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Run(cli::array &lt;System::ServiceProcess::ServiceBase ^&gt; ^ services);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="services" Type="System.ServiceProcess.ServiceBase[]" />
      </Parameters>
      <Docs>
        <param name="services"><span data-ttu-id="20b65-318">Tableau d'instances de ServiceBase qui indique les services à démarrer.</span><span class="sxs-lookup"><span data-stu-id="20b65-318">An array of ServiceBase instances, which indicate services to start.</span></span></param>
        <summary><span data-ttu-id="20b65-319">Inscrit l'exécutable de plusieurs services à l'aide du Gestionnaire de contrôle des services.</span><span class="sxs-lookup"><span data-stu-id="20b65-319">Registers the executable for multiple services with the Service Control Manager (SCM).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20b65-320">Appelez cette surcharge dans les `main()` fonction de l’exécutable du service pour inscrire les services avec le Gestionnaire de contrôle de Service.</span><span class="sxs-lookup"><span data-stu-id="20b65-320">Call this overload in the `main()` function of the service executable to register the services with the Service Control Manager.</span></span> <span data-ttu-id="20b65-321">Après avoir appelé <xref:System.ServiceProcess.ServiceBase.Run%28System.ServiceProcess.ServiceBase%5B%5D%29>, le Gestionnaire de contrôle des services émet des commandes Start qui entraînent des appels à la <xref:System.ServiceProcess.ServiceBase.OnStart%2A> méthodes dans les services.</span><span class="sxs-lookup"><span data-stu-id="20b65-321">After you call <xref:System.ServiceProcess.ServiceBase.Run%28System.ServiceProcess.ServiceBase%5B%5D%29>, the Service Control Manager issues Start commands, which result in calls to the <xref:System.ServiceProcess.ServiceBase.OnStart%2A> methods in the services.</span></span> <span data-ttu-id="20b65-322">Les services ne sont pas démarrés jusqu'à ce que les commandes de démarrage sont exécutées.</span><span class="sxs-lookup"><span data-stu-id="20b65-322">The services are not started until the Start commands are executed.</span></span>  
  
 <span data-ttu-id="20b65-323">Le <xref:System.ServiceProcess.ServiceBase.Run%2A?displayProperty=nameWithType> méthode est appelée dans la même façon que la <xref:System.Windows.Forms.Application.Run%2A?displayProperty=nameWithType> méthode pour les applications Windows Forms.</span><span class="sxs-lookup"><span data-stu-id="20b65-323">The <xref:System.ServiceProcess.ServiceBase.Run%2A?displayProperty=nameWithType> method is called in much the same way as the <xref:System.Windows.Forms.Application.Run%2A?displayProperty=nameWithType> method for Windows Forms applications.</span></span>  
  
 <span data-ttu-id="20b65-324">Si <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> est `true`, une entrée est écrite dans le journal des événements si un service quelconque dans le tableau ne démarre pas.</span><span class="sxs-lookup"><span data-stu-id="20b65-324">If <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> is `true`, an entry is written to the event log if any service in the array fails to start.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="20b65-325">Vous n'avez pas spécifié le service à démarrer.</span><span class="sxs-lookup"><span data-stu-id="20b65-325">You did not supply a service to start.</span></span> <span data-ttu-id="20b65-326">Le tableau peut être <see langword="null" /> ou vide.</span><span class="sxs-lookup"><span data-stu-id="20b65-326">The array might be <see langword="null" /> or empty.</span></span></exception>
        <altmember cref="M:System.ServiceProcess.ServiceBase.#ctor" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="ServiceHandle">
      <MemberSignature Language="C#" Value="protected IntPtr ServiceHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ServiceHandle" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceBase.ServiceHandle" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property ServiceHandle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property IntPtr ServiceHandle { IntPtr get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="20b65-327">Obtient le handle du contrôle du service.</span><span class="sxs-lookup"><span data-stu-id="20b65-327">Gets the service control handle for the service.</span></span></summary>
        <value><span data-ttu-id="20b65-328">Structure <see cref="T:System.IntPtr" /> contenant le handle du contrôle du service.</span><span class="sxs-lookup"><span data-stu-id="20b65-328">An <see cref="T:System.IntPtr" /> structure that contains the service control handle for the service.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20b65-329">Le handle du contrôle est utilisé pour communiquer avec le Gestionnaire de contrôle des services (SCM).</span><span class="sxs-lookup"><span data-stu-id="20b65-329">The service control handle is used to communicate with the Service Control Manager (SCM).</span></span>  <span data-ttu-id="20b65-330">Le handle peut être utilisé pour mettre à jour les informations d’état du Gestionnaire de contrôle de service pour le service d’appel à l’aide de la non managé `SetServiceStatus` (fonction).</span><span class="sxs-lookup"><span data-stu-id="20b65-330">The handle can be used to update the service control manager's status information for the calling service using the unmanaged `SetServiceStatus` function.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="20b65-331">Pour accéder au code non managé.</span><span class="sxs-lookup"><span data-stu-id="20b65-331">for access to unmanaged code.</span></span> <span data-ttu-id="20b65-332">Énumération associée : <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span><span class="sxs-lookup"><span data-stu-id="20b65-332">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="ServiceMainCallback">
      <MemberSignature Language="C#" Value="public void ServiceMainCallback (int argCount, IntPtr argPointer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ServiceMainCallback(int32 argCount, native int argPointer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.ServiceMainCallback(System.Int32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ServiceMainCallback (argCount As Integer, argPointer As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ServiceMainCallback(int argCount, IntPtr argPointer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="argCount" Type="System.Int32" />
        <Parameter Name="argPointer" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="argCount"><span data-ttu-id="20b65-333">Nombre d'arguments dans le tableau d'arguments.</span><span class="sxs-lookup"><span data-stu-id="20b65-333">The number of arguments in the argument array.</span></span></param>
        <param name="argPointer"><span data-ttu-id="20b65-334">Structure <see cref="T:System.IntPtr" /> qui désigne un tableau d'arguments.</span><span class="sxs-lookup"><span data-stu-id="20b65-334">An <see cref="T:System.IntPtr" /> structure that points to an array of arguments.</span></span></param>
        <summary><span data-ttu-id="20b65-335">Inscrit le gestionnaire de commandes et démarre le service.</span><span class="sxs-lookup"><span data-stu-id="20b65-335">Registers the command handler and starts the service.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ServiceName">
      <MemberSignature Language="C#" Value="public string ServiceName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ServiceName" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceBase.ServiceName" />
      <MemberSignature Language="VB.NET" Value="Public Property ServiceName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ServiceName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("SBServiceName")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="20b65-336">Obtient ou définit le nom court utilisé pour identifier le service sur le système.</span><span class="sxs-lookup"><span data-stu-id="20b65-336">Gets or sets the short name used to identify the service to the system.</span></span></summary>
        <value><span data-ttu-id="20b65-337">Nom du service.</span><span class="sxs-lookup"><span data-stu-id="20b65-337">The name of the service.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20b65-338">Le <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> identifie le service pour le Gestionnaire de contrôle de Service.</span><span class="sxs-lookup"><span data-stu-id="20b65-338">The <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> identifies the service to the Service Control Manager.</span></span> <span data-ttu-id="20b65-339">La valeur de cette propriété doit être identique au nom enregistré pour le service dans le <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=nameWithType> propriété de la classe de programme d’installation correspondante.</span><span class="sxs-lookup"><span data-stu-id="20b65-339">The value of this property must be identical to the name recorded for the service in the <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=nameWithType> property of the corresponding installer class.</span></span> <span data-ttu-id="20b65-340">Dans le code, le <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> du service est généralement définie dans le `main()` fonction de l’exécutable.</span><span class="sxs-lookup"><span data-stu-id="20b65-340">In code, the <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> of the service is usually set in the `main()` function of the executable.</span></span>  
  
 <span data-ttu-id="20b65-341">Le <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> est également utilisé pour spécifier le <xref:System.Diagnostics.EventLog.Source%2A?displayProperty=nameWithType> associé à la <xref:System.ServiceProcess.ServiceBase.EventLog%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="20b65-341">The <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> is also used to specify the <xref:System.Diagnostics.EventLog.Source%2A?displayProperty=nameWithType> associated with the <xref:System.ServiceProcess.ServiceBase.EventLog%2A> property.</span></span> <span data-ttu-id="20b65-342">Cela <xref:System.ServiceProcess.ServiceBase.EventLog%2A> est une instance qui écrit les informations de commande de service dans le journal des applications.</span><span class="sxs-lookup"><span data-stu-id="20b65-342">This <xref:System.ServiceProcess.ServiceBase.EventLog%2A> is an instance that writes service command information to the Application log.</span></span>  
  
 <span data-ttu-id="20b65-343">Le <xref:System.ServiceProcess.ServiceBase.ServiceName%2A>, qui fournit la chaîne source pour le journal des événements doit être définie avant que le service enregistre dans le journal des événements.</span><span class="sxs-lookup"><span data-stu-id="20b65-343">The <xref:System.ServiceProcess.ServiceBase.ServiceName%2A>, which supplies the source string for the event log, must be set before the service writes to the event log.</span></span> <span data-ttu-id="20b65-344">Essaie d’accéder au journal des événements avant le nom de la source est défini entraîne la levée d’une exception.</span><span class="sxs-lookup"><span data-stu-id="20b65-344">Trying to access the event log before the source name is set causes an exception to be thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="20b65-345">Le service a déjà été démarré.</span><span class="sxs-lookup"><span data-stu-id="20b65-345">The service has already been started.</span></span> <span data-ttu-id="20b65-346">La propriété <see cref="P:System.ServiceProcess.ServiceBase.ServiceName" /> ne peut pas être modifiée une fois que le service a démarré.</span><span class="sxs-lookup"><span data-stu-id="20b65-346">The <see cref="P:System.ServiceProcess.ServiceBase.ServiceName" /> property cannot be changed once the service has started.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="20b65-347">Le nom spécifié est une chaîne de longueur nulle ou est plus long que <see cref="F:System.ServiceProcess.ServiceBase.MaxNameLength" />, ou le nom spécifié contient des barres obliques ou des barres obliques inverses.</span><span class="sxs-lookup"><span data-stu-id="20b65-347">The specified name is a zero-length string or is longer than <see cref="F:System.ServiceProcess.ServiceBase.MaxNameLength" />, or the specified name contains forward slash or backslash characters.</span></span></exception>
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.ServiceName" />
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="20b65-348">Arrête le service en cours d'exécution.</span><span class="sxs-lookup"><span data-stu-id="20b65-348">Stops the executing service.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="20b65-349">Le <xref:System.ServiceProcess.ServiceBase.Stop%2A> méthode définit l’état du service pour indiquer un arrêt est en attente et appelle le <xref:System.ServiceProcess.ServiceBase.OnStop%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="20b65-349">The <xref:System.ServiceProcess.ServiceBase.Stop%2A> method sets the service state to indicate a stop is pending and calls the <xref:System.ServiceProcess.ServiceBase.OnStop%2A> method.</span></span>  <span data-ttu-id="20b65-350">Une fois que l’application est arrêtée, l’état du service a arrêté.</span><span class="sxs-lookup"><span data-stu-id="20b65-350">After the application is stopped, the service state is set to stopped.</span></span> <span data-ttu-id="20b65-351">Si l’application est un service hébergé, le domaine d’application est déchargé.</span><span class="sxs-lookup"><span data-stu-id="20b65-351">If the application is a hosted service, the application domain is unloaded.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanStop" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStop" />
      </Docs>
    </Member>
  </Members>
</Type>