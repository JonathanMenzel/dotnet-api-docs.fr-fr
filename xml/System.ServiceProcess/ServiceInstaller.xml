<Type Name="ServiceInstaller" FullName="System.ServiceProcess.ServiceInstaller">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b69845d38861eb8bf36caf960b2e2d06cfb6e478" /><Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="10/04/2018" /><Meta Name="ms.locfileid" Value="48717474" /></Metadata><TypeSignature Language="C#" Value="public class ServiceInstaller : System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ServiceInstaller extends System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="DocId" Value="T:System.ServiceProcess.ServiceInstaller" />
  <TypeSignature Language="VB.NET" Value="Public Class ServiceInstaller&#xA;Inherits ComponentInstaller" />
  <TypeSignature Language="C++ CLI" Value="public ref class ServiceInstaller : System::Configuration::Install::ComponentInstaller" />
  <TypeSignature Language="F#" Value="type ServiceInstaller = class&#xA;    inherit ComponentInstaller" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceProcess</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.Install.ComponentInstaller</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Installe une classe qui étend <see cref="T:System.ServiceProcess.ServiceBase" /> pour implémenter un service. Cette classe est appelée par l'utilitaire d'installation lors de l'installation d'une application de service.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.ServiceProcess.ServiceInstaller> ne fonctionne pas spécifique au service auquel il est associé. Il est utilisé par l’utilitaire d’installation à écrire des valeurs de Registre associées au service à une sous-clé dans la clé de Registre HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services. Le service est identifié par son ServiceName dans cette sous-clé. La sous-clé comprend également le nom du fichier exécutable ou .dll auquel appartient le service.  
  
 Pour installer un service, créez un projet de classe installer qui hérite de la <xref:System.Configuration.Install.Installer> , puis définissez le <xref:System.ComponentModel.RunInstallerAttribute> attribut sur la classe pour `true`. Au sein de votre projet, créez-le <xref:System.ServiceProcess.ServiceProcessInstaller> instance par l’application de service et l’autre <xref:System.ServiceProcess.ServiceInstaller> instance pour chaque service dans l’application. Dans votre constructeur de classe de programme d’installation de projet, définissez les propriétés d’installation pour le service en utilisant le <xref:System.ServiceProcess.ServiceProcessInstaller> et <xref:System.ServiceProcess.ServiceInstaller> instances et ajoutez les instances à la <xref:System.Configuration.Install.Installer.Installers%2A> collection.  
  
> [!NOTE]
>  Il est recommandé d’utiliser le constructeur pour l’ajout d’instances de programme d’installation ; Toutefois, si vous devez ajouter à la <xref:System.Configuration.Install.Installer.Installers%2A> collection dans le <xref:System.ServiceProcess.ServiceInstaller.Install%2A> (méthode), veillez à effectuer les mêmes ajouts à la collection dans le <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> (méthode).  
  
 Pour toutes les classes dérivées de la <xref:System.Configuration.Install.Installer> classe, l’état de la <xref:System.Configuration.Install.Installer.Installers%2A> collection doit être identiques dans le <xref:System.ServiceProcess.ServiceInstaller.Install%2A> et <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> méthodes. Toutefois, vous pouvez éviter la maintenance de la collection via le <xref:System.ServiceProcess.ServiceInstaller.Install%2A> et <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> méthodes si vous ajoutez des instances de programme d’installation pour le <xref:System.Configuration.Install.Installer.Installers%2A> collection dans votre constructeur de classe de programme d’installation personnalisé. Lorsque l’utilitaire d’installation est appelé, il recherche le <xref:System.ComponentModel.RunInstallerAttribute> attribut. Si l’attribut est `true`, l’utilitaire installe tous les services qui ont été ajoutés à la <xref:System.Configuration.Install.Installer.Installers%2A> collection qui ont été associés à votre programme d’installation de projet. Si <xref:System.ComponentModel.RunInstallerAttribute> est `false` ou n’existe pas, l’utilitaire d’installation ignore le programme d’installation de projet.  
  
 Le <xref:System.ServiceProcess.ServiceProcessInstaller> associé à votre projet installation classe installe les informations communes à tous les <xref:System.ServiceProcess.ServiceInstaller> instances dans le projet. Si ce service n’a rien qui sépare les autres services dans le projet d’installation, ces informations spécifiques au service sont installées par cette méthode.  
  
> [!NOTE]
>  Il est essentiel que le <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> être identique à la <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> de la classe dérivée à partir de <xref:System.ServiceProcess.ServiceBase>. En règle générale, la valeur de la <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> propriété pour le service est définie dans la fonction Main() de l’exécutable de l’application de service. Le Gestionnaire de contrôle de Service utilise le <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=nameWithType> propriété pour localiser le service dans cet exécutable.  
  
 Vous pouvez modifier d’autres propriétés sur le <xref:System.ServiceProcess.ServiceInstaller> avant ou après son ajout à la <xref:System.Configuration.Install.Installer.Installers%2A> collection de votre programme d’installation de projet. Par exemple, d’un service <xref:System.ServiceProcess.ServiceInstaller.StartType%2A> peut être défini pour démarrer le service automatiquement au redémarrage ou exiger qu’un utilisateur démarrer le service manuellement.  
  
 Normalement, vous n’appelez pas les méthodes à <xref:System.ServiceProcess.ServiceInstaller> dans votre code ; ils sont généralement appelées uniquement par l’utilitaire d’installation. L’utilitaire d’installation appelle automatiquement la <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=nameWithType> et <xref:System.ServiceProcess.ServiceInstaller.Install%2A?displayProperty=nameWithType> méthodes pendant le processus d’installation. Si nécessaire, il annule les erreurs, en appelant <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> (ou <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A?displayProperty=nameWithType>) sur tous les composants installés précédemment.  
  
 L’utilitaire d’installation appelle <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> pour supprimer l’objet.  
  
 Routine d’installation d’une application gère automatiquement les informations concernant les composants déjà installé, à l’aide du programme d’installation de projet <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>. Ces informations d’état sont continuellement mis à jour en tant que le <xref:System.ServiceProcess.ServiceProcessInstaller> instance et chaque <xref:System.ServiceProcess.ServiceInstaller> instance est installée par l’utilitaire. Il est généralement inutile pour votre code modifier explicitement les informations d’état.  
  
 Lorsque l’installation est effectuée, il crée automatiquement un <xref:System.Diagnostics.EventLogInstaller> pour installer la source du journal des événements associée à la <xref:System.ServiceProcess.ServiceBase> classe dérivée. Le <xref:System.Diagnostics.EventLog.Log%2A> propriété pour cette source est définie par le <xref:System.ServiceProcess.ServiceInstaller.%23ctor%2A> constructeur pour le journal des applications de l’ordinateur. Lorsque vous définissez la <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> de la <xref:System.ServiceProcess.ServiceInstaller> (qui doit être identique à la <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> du service), le <xref:System.Diagnostics.EventLog.Source%2A> est automatiquement définie sur la même valeur. Échec de l’installation, l’installation de la source est restaurée en même temps que les services installés précédemment.  
  
 Le <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> méthode tente d’arrêter le service s’il s’exécute. Si cette opération réussit ou non, <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> annule les modifications apportées par <xref:System.ServiceProcess.ServiceInstaller.Install%2A>. Si une nouvelle source a été créée pour la journalisation des événements, la source est supprimée.  
  
   
  
## Examples  
 L’exemple suivant crée un programme d’installation de projet appelé `MyProjectInstaller`, qui hérite de <xref:System.Configuration.Install.Installer>. Il est supposé il est un exécutable de service qui contient deux services, « Hello-World Service 1 » et « Hello-World Service 2 ». Dans le constructeur de `MyProjectInstaller` (qui est appelé par l’utilitaire d’installation), <xref:System.ServiceProcess.ServiceInstaller> objets sont créés pour chacune de ces services, ainsi qu’un <xref:System.ServiceProcess.ServiceProcessInstaller> est créé pour l’exécutable. Pour l’utilitaire d’installation reconnaître `MyProjectInstaller` comme un programme d’installation valide, le <xref:System.ComponentModel.RunInstallerAttribute> attribut a la valeur `true`.  
  
 Propriétés facultatives sont définies sur le programme d’installation de processus et les programmes d’installation de service avant que les programmes d’installation sont ajoutés à la <xref:System.Configuration.Install.Installer.Installers%2A> collection. Lorsque l’utilitaire d’installation accède à `MyProjectInstaller`, les objets ajoutés à la <xref:System.Configuration.Install.Installer.Installers%2A> collection via un appel à <xref:System.Configuration.Install.InstallerCollection.Add%2A?displayProperty=nameWithType> sera installé à son tour. Pendant le processus, le programme d’installation conserve les informations d’état indiquant quels objets ont été installés, chacun peut être sauvegardée à son tour, si un problème d’installation se produit.  
  
 Normalement, vous ne créez pas une instance de classe de programme d’installation de votre projet explicitement. Vous créez et ajoutez le <xref:System.ComponentModel.RunInstallerAttribute> d’attribut à la syntaxe, mais c’est l’utilitaire d’installation qui appelle en fait et par conséquent instancie, la classe.  
  
 [!code-cpp[Classic ServiceInstaller Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ServiceInstaller Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/CS/source.cs#1)]
 [!code-vb[Classic ServiceInstaller Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.ServiceProcess.ServiceBase.ServiceName" />
    <altmember cref="T:System.ServiceProcess.ServiceProcessInstaller" />
    <altmember cref="T:System.ServiceProcess.ServiceBase" />
    <altmember cref="P:System.ServiceProcess.ServiceBase.EventLog" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceInstaller ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ServiceInstaller();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ServiceProcess.ServiceInstaller" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour installer un service, créez un projet de classe installer qui hérite de la <xref:System.Configuration.Install.Installer> , puis définissez le <xref:System.ComponentModel.RunInstallerAttribute> attribut sur la classe pour `true`. Au sein de votre projet, créez-le <xref:System.ServiceProcess.ServiceProcessInstaller> instance par l’application de service et l’autre <xref:System.ServiceProcess.ServiceInstaller> instance pour chaque service dans l’application. Dans votre constructeur de classe de programme d’installation de projet, définissez les propriétés d’installation pour le service en utilisant le <xref:System.ServiceProcess.ServiceProcessInstaller> et <xref:System.ServiceProcess.ServiceInstaller> instances et ajoutez les instances à la <xref:System.Configuration.Install.Installer.Installers%2A> collection.  
  
 Le <xref:System.ServiceProcess.ServiceInstaller.%23ctor%2A> constructeur génère automatiquement un journal des événements dont la propriété source <xref:System.Diagnostics.EventLog.Log%2A> propriété est définie dans le journal des applications de l’ordinateur et un <xref:System.Diagnostics.EventLogInstaller>. Lorsque vous définissez la <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> de la <xref:System.ServiceProcess.ServiceInstaller>, qui doit être identique à la <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> du service, le <xref:System.Diagnostics.EventLog.Source%2A> propriété du journal des événements est automatiquement définie sur la même valeur. La source est supprimée automatiquement dans le cas d’un problème d’installation.  
  
 Le <xref:System.ServiceProcess.ServiceInstaller.%23ctor%2A> constructeur affecte la <xref:System.ServiceProcess.ServiceInstaller.StartType%2A> propriété `ServiceStartMode.Manual` pour spécifier qu’un utilisateur de démarrer le service. Vous pouvez réinitialiser la propriété à `ServiceStartMode.Automatic` pour spécifier que le service démarre lorsque l’ordinateur redémarre.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.EventLog" />
        <altmember cref="T:System.ServiceProcess.ServiceStartMode" />
      </Docs>
    </Member>
    <Member MemberName="CopyFromComponent">
      <MemberSignature Language="C#" Value="public override void CopyFromComponent (System.ComponentModel.IComponent component);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void CopyFromComponent(class System.ComponentModel.IComponent component) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub CopyFromComponent (component As IComponent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void CopyFromComponent(System::ComponentModel::IComponent ^ component);" />
      <MemberSignature Language="F#" Value="override this.CopyFromComponent : System.ComponentModel.IComponent -&gt; unit" Usage="serviceInstaller.CopyFromComponent component" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
      </Parameters>
      <Docs>
        <param name="component"><see cref="T:System.ComponentModel.IComponent" /> à partir duquel la copie doit être effectuée.</param>
        <summary>Copie les propriétés d'une instance de <see cref="T:System.ServiceProcess.ServiceBase" /> vers ce programme d'installation.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode est rarement être appelée au sein de votre code. <xref:System.ServiceProcess.ServiceInstaller.CopyFromComponent%2A> est généralement appelé uniquement par les concepteurs.  
  
 <xref:System.ServiceProcess.ServiceInstaller.CopyFromComponent%2A> enregistre le nom du service de la `component` paramètre à la <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> de la <xref:System.ServiceProcess.ServiceInstaller> instance. (Étant donné que le paramètre doit être une instance d’une classe qui dérive de <xref:System.ServiceProcess.ServiceBase>, `component` est la garantie d’avoir un <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> propriété.)  
  
> [!NOTE]
>  Si vous utilisez le concepteur Visual Studio, cette méthode est appelée au moment du design lorsque l’utilisateur clique sur `Add Installer` sur le composant spécifié de cette classe en tant que son programme d’installation. Le programme d’installation prend toutes les informations qu’il peut à partir du composant en direct et la stocke pour une utilisation au moment de l’installation.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Le composant que vous associez à ce programme d'installation n'hérite pas de <see cref="T:System.ServiceProcess.ServiceBase" />.</exception>
        <altmember cref="M:System.ServiceProcess.ServiceProcessInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
      </Docs>
    </Member>
    <Member MemberName="DelayedAutoStart">
      <MemberSignature Language="C#" Value="public bool DelayedAutoStart { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DelayedAutoStart" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.DelayedAutoStart" />
      <MemberSignature Language="VB.NET" Value="Public Property DelayedAutoStart As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool DelayedAutoStart { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.DelayedAutoStart : bool with get, set" Usage="System.ServiceProcess.ServiceInstaller.DelayedAutoStart" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerDelayedAutoStart")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui indique si le démarrage du service doit être différé jusqu'à ce que d'autres services démarrés automatiquement soit en cours d'exécution.</summary>
        <value><see langword="true" /> pour différer le démarrage automatique du service ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.ServiceProcess.ServiceInstaller.DelayedAutoStart%2A> propriété peut être appliquée à n’importe quel service, mais il est ignoré, sauf si le mode de démarrage du service est <xref:System.ServiceProcess.ServiceStartMode.Automatic>. Le paramètre prend effet la prochaine fois que le système est redémarré. Le Gestionnaire de contrôle de Service ne garantit pas une heure de début spécifique pour le service.  
  
 Un service de démarrage automatique retardé ne peut pas être membre d’un groupe de priorité de chargement, mais elle peut dépendre d’un autre service de démarrage automatique. Si une application appelle un service de démarrage automatique retardé avant son chargement, l’appel échoue.  
  
 Sur les systèmes d’exploitation qui ne prennent pas en charge le démarrage automatique retardé, la définition de cette propriété n’a aucun effet.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Description">
      <MemberSignature Language="C#" Value="public string Description { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Description" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.Description" />
      <MemberSignature Language="VB.NET" Value="Public Property Description As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Description { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Description : string with get, set" Usage="System.ServiceProcess.ServiceInstaller.Description" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerDescription")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la description du service.</summary>
        <value>Description du service. La valeur par défaut est une chaîne vide ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.ServiceProcess.ServiceInstaller.Description%2A> propriété pour décrire l’objectif du service installé à l’utilisateur. L’utilisateur peut afficher la description de service dans les applications qui affichent des détails pour les services installés.  
  
 Par exemple, à l’aide de Windows XP, vous pouvez afficher la description de service avec l’utilitaire de ligne de commande de contrôle de Service (Sc.exe) ou vous pouvez afficher la description du service au sein de la **Services** nœud de la **gestion de l’ordinateur ** console.  
  
   
  
## Examples  
 L’exemple de code suivant définit les propriétés d’installation pour une nouvelle application de service Windows. L’exemple définit le nom du service, ainsi que le nom d’affichage et la description. Après avoir attribué les propriétés d’installation pour le service, l’exemple ajoute le <xref:System.ServiceProcess.ServiceInstaller> de l’objet à le <xref:System.Configuration.Install.Installer.Installers%2A> collection.  
  
 [!code-csharp[ServiceProcess_ServiceInstaller#3](~/samples/snippets/csharp/VS_Snippets_CLR/ServiceProcess_serviceinstaller/CS/simpleserviceinstaller.cs#3)]
 [!code-vb[ServiceProcess_ServiceInstaller#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/ServiceProcess_serviceinstaller/VB/service1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.ServiceName" />
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.DisplayName" />
      </Docs>
    </Member>
    <Member MemberName="DisplayName">
      <MemberSignature Language="C#" Value="public string DisplayName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayName" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.DisplayName" />
      <MemberSignature Language="VB.NET" Value="Public Property DisplayName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DisplayName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DisplayName : string with get, set" Usage="System.ServiceProcess.ServiceInstaller.DisplayName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerDisplayName")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indique le nom convivial qui identifie le service offert à l'utilisateur.</summary>
        <value>Nom associé au service (fréquemment utilisé pour les outils interactifs).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.ServiceProcess.ServiceInstaller.DisplayName%2A> est utilisé, par exemple, pour fournir un nom descriptif lisible par l’utilisateur pour le service dans le Gestionnaire de contrôle de Service. Le <xref:System.ServiceProcess.ServiceInstaller.DisplayName%2A> est une valeur de Registre, mais n’est jamais utilisé comme une clé de Registre. Par conséquent, les restrictions sur les <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> valeur de propriété ne s’appliquent pas. <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> est utilisé comme la clé de Registre HKEY_LOCAL_MACHINES\System\CurrentControlSet\Services, il est limité.  
  
 Le nom d’affichage n’est jamais utilisé par l’utilitaire d’installation pour identifier le service, il existe donc aucune restriction sur le choix du nom, comme pour le <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> propriété.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.ServiceName" />
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.Description" />
      </Docs>
    </Member>
    <Member MemberName="Install">
      <MemberSignature Language="C#" Value="public override void Install (System.Collections.IDictionary stateSaver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Install(class System.Collections.IDictionary stateSaver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Install (stateSaver As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Install(System::Collections::IDictionary ^ stateSaver);" />
      <MemberSignature Language="F#" Value="override this.Install : System.Collections.IDictionary -&gt; unit" Usage="serviceInstaller.Install stateSaver" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateSaver" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="stateSaver"><see cref="T:System.Collections.IDictionary" /> qui contient les informations de contexte associées à l'installation.</param>
        <summary>Installe le service en écrivant les informations relatives aux applications de service dans le Registre. Cette méthode est destinée à être utilisée par les outils d'installation qui traitent automatiquement les méthodes appropriées.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Normalement, vous n’appelez pas les méthodes à <xref:System.ServiceProcess.ServiceInstaller> dans votre code ; ils sont généralement appelées uniquement par l’utilitaire d’installation. L’utilitaire d’installation appelle automatiquement la <xref:System.ServiceProcess.ServiceInstaller.Install%2A> méthode pendant l’installation. Si nécessaire, il annule les erreurs, en appelant <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A> sur l’objet qui a généré l’exception.  
  
 Routine d’installation d’une application gère automatiquement les informations concernant les composants qui ont été déjà installé, à l’aide du programme d’installation de projet <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>. Ces informations d’état, passées dans <xref:System.ServiceProcess.ServiceInstaller.Install%2A> en tant que le `stateSaver` paramètre, est continuellement mis à jour en tant que le <xref:System.ServiceProcess.ServiceProcessInstaller> instance et chaque <xref:System.ServiceProcess.ServiceInstaller> instance est installée par l’utilitaire. Il est généralement inutile pour votre code modifie ces informations d’état de manière explicite.  
  
 Le <xref:System.ServiceProcess.ServiceProcessInstaller> associé à votre projet installation classe installe les informations communes à tous les <xref:System.ServiceProcess.ServiceInstaller> instances dans le projet. Si ce service n’a rien qui sépare les autres services dans le projet d’installation, ces informations spécifiques au service sont installées par cette méthode.  
  
 Pour installer un service, créez un projet de classe installer qui hérite de la <xref:System.Configuration.Install.Installer> , puis définissez le <xref:System.ComponentModel.RunInstallerAttribute> attribut sur la classe pour `true`. Au sein de votre projet, créez-le <xref:System.ServiceProcess.ServiceProcessInstaller> instance par l’application de service et l’autre <xref:System.ServiceProcess.ServiceInstaller> instance pour chaque service dans l’application. Dans votre constructeur de classe de programme d’installation de projet, définissez les propriétés d’installation pour le service en utilisant le <xref:System.ServiceProcess.ServiceProcessInstaller> et <xref:System.ServiceProcess.ServiceInstaller> instances et ajoutez les instances à la <xref:System.Configuration.Install.Installer.Installers%2A> collection.  
  
> [!NOTE]
>  Il est recommandé d’utiliser le constructeur pour l’ajout d’instances de programme d’installation ; Toutefois, si vous devez ajouter à la <xref:System.Configuration.Install.Installer.Installers%2A> collection dans le <xref:System.ServiceProcess.ServiceInstaller.Install%2A> (méthode), veillez à effectuer les mêmes ajouts à la collection dans le <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> (méthode).  
  
 Pour toutes les classes dérivées de la <xref:System.Configuration.Install.Installer> classe, l’état de la <xref:System.Configuration.Install.Installer.Installers%2A> collection doit être identiques dans le <xref:System.ServiceProcess.ServiceInstaller.Install%2A> et <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> méthodes. Toutefois, vous pouvez éviter la maintenance de la collection via le <xref:System.ServiceProcess.ServiceInstaller.Install%2A> et <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> méthodes si vous ajoutez des instances de programme d’installation pour le <xref:System.Configuration.Install.Installer.Installers%2A> collection dans votre constructeur de classe de programme d’installation personnalisé.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">L'installation ne contient pas de <see cref="T:System.ServiceProcess.ServiceProcessInstaller" /> pour l'exécutable.  
  
- ou - 
Le nom de fichier de l'assembly est <see langword="null" /> ou une chaîne vide.  
  
- ou - 
Le nom de service n'est pas valide.  
  
- ou - 
Le Gestionnaire de contrôle des services est impossible à ouvrir.</exception>
        <exception cref="T:System.ArgumentException">Le nom complet du service contient plus de 255 caractères.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">Le système n'a pas réussi à générer de handle pour le service.  
  
- ou - 
Un service portant ce nom est déjà installé.</exception>
        <altmember cref="T:System.ServiceProcess.ServiceProcessInstaller" />
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Rollback(System.Collections.IDictionary)" />
        <altmember cref="M:System.Configuration.Install.Installer.Commit(System.Collections.IDictionary)" />
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)" />
        <altmember cref="T:System.Diagnostics.EventLogInstaller" />
        <altmember cref="M:System.Diagnostics.EventLogInstaller.#ctor" />
      </Docs>
    </Member>
    <Member MemberName="IsEquivalentInstaller">
      <MemberSignature Language="C#" Value="public override bool IsEquivalentInstaller (System.Configuration.Install.ComponentInstaller otherInstaller);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsEquivalentInstaller(class System.Configuration.Install.ComponentInstaller otherInstaller) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsEquivalentInstaller (otherInstaller As ComponentInstaller) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsEquivalentInstaller(System::Configuration::Install::ComponentInstaller ^ otherInstaller);" />
      <MemberSignature Language="F#" Value="override this.IsEquivalentInstaller : System.Configuration.Install.ComponentInstaller -&gt; bool" Usage="serviceInstaller.IsEquivalentInstaller otherInstaller" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherInstaller" Type="System.Configuration.Install.ComponentInstaller" />
      </Parameters>
      <Docs>
        <param name="otherInstaller"><see cref="T:System.Configuration.Install.ComponentInstaller" /> auquel vous comparez le programme d'installation en cours.</param>
        <summary>Indique si deux programmes d'installation installent le même service.</summary>
        <returns><see langword="true" /> si l'appel de <see cref="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)" /> sur ces deux programmes d'installation aboutit à l'installation du même service ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller%2A> indique, par exemple, si deux programmes d’installation installent le même service sous le même compte d’utilisateur.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
        <altmember cref="T:System.Configuration.Install.ComponentInstaller" />
      </Docs>
    </Member>
    <Member MemberName="Rollback">
      <MemberSignature Language="C#" Value="public override void Rollback (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Rollback(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.Rollback(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Rollback (savedState As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Rollback(System::Collections::IDictionary ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.Rollback : System.Collections.IDictionary -&gt; unit" Usage="serviceInstaller.Rollback savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState"><see cref="T:System.Collections.IDictionary" /> qui contient les informations de contexte associées à l'installation.</param>
        <summary>Restaure les informations de l'application de service inscrites dans le Registre par la procédure d'installation. Cette méthode est destinée à être utilisée par les outils d'installation qui traitent automatiquement les méthodes appropriées.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Normalement, vous n’appelez pas les méthodes à <xref:System.ServiceProcess.ServiceInstaller> dans votre code ; ils sont généralement appelées uniquement par l’utilitaire d’installation. L’utilitaire d’installation appelle automatiquement la <xref:System.ServiceProcess.ServiceInstaller.Install%2A> méthode pendant le processus d’installation. Si nécessaire, il annule les erreurs, en appelant <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A> sur l’objet qui a généré l’exception.  
  
 Routine d’installation d’une application gère automatiquement les informations concernant les composants déjà installé, à l’aide du programme d’installation de projet <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>. Ces informations d’état, passées dans <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A> en tant que le `savedState` paramètre, est continuellement mis à jour en tant que le <xref:System.ServiceProcess.ServiceProcessInstaller> instance et chaque <xref:System.ServiceProcess.ServiceInstaller> instance est installée par l’utilitaire. Il est généralement inutile pour votre code modifie ces informations d’état de manière explicite.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ServiceProcess.ServiceProcessInstaller.Rollback(System.Collections.IDictionary)" />
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)" />
        <altmember cref="M:System.Configuration.Install.Installer.Commit(System.Collections.IDictionary)" />
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="ServiceName">
      <MemberSignature Language="C#" Value="public string ServiceName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ServiceName" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.ServiceName" />
      <MemberSignature Language="VB.NET" Value="Public Property ServiceName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ServiceName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ServiceName : string with get, set" Usage="System.ServiceProcess.ServiceInstaller.ServiceName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerServiceName")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indique le nom utilisé par le système pour identifier ce service. Cette propriété doit être identique à la propriété <see cref="P:System.ServiceProcess.ServiceBase.ServiceName" /> du service que vous souhaitez installer.</summary>
        <value>Nom du service à installer. Cette valeur doit être définie avant que l'utilitaire d'installation n'essaie d'installer le service.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il est essentiel que le <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> être identique à la <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> de la classe dérivée à partir de <xref:System.ServiceProcess.ServiceBase>. En règle générale, la valeur de la <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> propriété pour le service est définie dans la fonction Main() de l’exécutable de l’application de service. Le Gestionnaire de contrôle de Service utilise le <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=nameWithType> propriété pour localiser le service dans cet exécutable.  
  
 Lorsque vous définissez la <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> du programme d’installation du service, le <xref:System.Diagnostics.EventLog.Source%2A> du journal des événements associé est défini sur la même valeur. Cela permet au service enregistrer automatiquement les appels de commandes (telles que Démarrer et arrêter) de service dans le journal des applications sur l’ordinateur.  
  
> [!NOTE]
>  Si une source par le même nom existe déjà sur l’ordinateur, mais dans un journal autre que le journal des applications, une exception sera levée. Si la source existe et est associée avec le journal des applications, cette source est utilisée pour signaler les appels de commande au service, et aucune exception n’est levée.  
  
 Le <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> ne peut pas être `null` ou avoir une longueur nulle. Sa taille maximale est de 256 caractères. Il ne doit pas contenir de barres obliques vers l’avant ou vers l’arrière, '/' ou '\\', ou de caractères à partir de l’ASCII jeu avec une valeur inférieure à la valeur décimale 32 de caractères.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">La propriété <see cref="P:System.ServiceProcess.ServiceInstaller.ServiceName" /> n'est pas valide.</exception>
        <altmember cref="P:System.ServiceProcess.ServiceBase.ServiceName" />
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.DisplayName" />
      </Docs>
    </Member>
    <Member MemberName="ServicesDependedOn">
      <MemberSignature Language="C#" Value="public string[] ServicesDependedOn { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] ServicesDependedOn" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.ServicesDependedOn" />
      <MemberSignature Language="VB.NET" Value="Public Property ServicesDependedOn As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ ServicesDependedOn { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ServicesDependedOn : string[] with get, set" Usage="System.ServiceProcess.ServiceInstaller.ServicesDependedOn" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerServicesDependedOn")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indique les services qui doivent être en cours d'exécution pour que ce service puisse fonctionner.</summary>
        <value>Tableau de services qui doivent être actifs pour que le service associé à ce programme d'installation puisse s'exécuter.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un service peut nécessiter d’autres services afin d’être en cours d’exécution avant de pouvoir démarrer. Les informations à partir de cette propriété sont écrite à une clé dans le Registre. Lorsque l’utilisateur (ou le système, dans le cas d’un démarrage automatique) essaie d’exécuter le service, le Gestionnaire de contrôle des services (SCM) vérifie que chacun des services dans le tableau a déjà démarré.  
  
 Si n’importe quel service dans le tableau n'est pas en cours d’exécution, le SCM essaie de les démarrer. Cela comprend les services avec `Manual` <xref:System.ServiceProcess.ServiceInstaller.StartType%2A>.  
  
 Si n’importe quel service dont dépend ce service ne démarre pas, ce service ne démarre pas. Une exception n’est pas levée si le système n’est pas démarré, car il n’existe aucune gestion au niveau du système pour détecter des exceptions. Décider comment gérer les échecs de démarrage de service et implémenter cela dans votre code. En règle générale, une boîte de dialogue s’affiche à l’utilisateur au démarrage si un service ne parvient pas à démarrer.  
  
 Si le service ne démarre pas, une entrée est écrite dans le journal des événements Application.  
  
 Les services dont dépend ce service n’avez pas besoin de se trouver dans le même exécutable.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.StartType" />
      </Docs>
    </Member>
    <Member MemberName="StartType">
      <MemberSignature Language="C#" Value="public System.ServiceProcess.ServiceStartMode StartType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ServiceProcess.ServiceStartMode StartType" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.StartType" />
      <MemberSignature Language="VB.NET" Value="Public Property StartType As ServiceStartMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceProcess::ServiceStartMode StartType { System::ServiceProcess::ServiceStartMode get(); void set(System::ServiceProcess::ServiceStartMode value); };" />
      <MemberSignature Language="F#" Value="member this.StartType : System.ServiceProcess.ServiceStartMode with get, set" Usage="System.ServiceProcess.ServiceInstaller.StartType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerStartType")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceProcess.ServiceStartMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indique le mode de démarrage de ce service.</summary>
        <value><see cref="T:System.ServiceProcess.ServiceStartMode" /> qui représente la manière dont le service est démarré. Sa valeur par défaut <see langword="Manual" /> indique que le service ne démarre pas automatiquement après un redémarrage du système.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Définir le <xref:System.ServiceProcess.ServiceInstaller.StartType%2A> pour spécifier que le service est démarré automatiquement après le redémarrage ou qu’un utilisateur doit démarrer manuellement le service. Un service peut également être désactivé, en spécifiant qu’il ne peut pas être démarré, manuellement ou par programmation, jusqu'à ce qu’il est activé.  
  
 Vous ne pouvez pas modifier <xref:System.ServiceProcess.ServiceInstaller> les valeurs de propriété après l’installation. Pour modifier le <xref:System.ServiceProcess.ServiceInstaller.StartType%2A>, vous devez désinstaller et réinstaller votre service ou modifier manuellement le paramètre à l’aide du Gestionnaire de contrôle de Service.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Le mode de démarrage n'est pas une valeur de l'énumération <see cref="T:System.ServiceProcess.ServiceStartMode" />.</exception>
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Account" />
      </Docs>
    </Member>
    <Member MemberName="Uninstall">
      <MemberSignature Language="C#" Value="public override void Uninstall (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Uninstall(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Uninstall (savedState As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Uninstall(System::Collections::IDictionary ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.Uninstall : System.Collections.IDictionary -&gt; unit" Usage="serviceInstaller.Uninstall savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState"><see cref="T:System.Collections.IDictionary" /> qui contient les informations de contexte associées à l'installation.</param>
        <summary>Désinstalle le service en supprimant les informations qui le concernent dans le Registre.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Désinstallation essaie d’arrêter le service avant de le désinstaller. Si le service ne peut pas être arrêté, aucune exception n’est interceptée et la méthode poursuit la suppression du service.  
  
 Normalement, vous n’appelez pas les méthodes à <xref:System.ServiceProcess.ServiceInstaller> dans votre code ; ils sont généralement appelées uniquement par l’utilitaire d’installation. InstallUtil permet de désinstaller les services ainsi que de les installer ; la désinstallation, un commutateur est requis dans l’appel de la ligne de commande.  
  
 Routine de désinstallation d’une application gère automatiquement les informations concernant les composants en cours de désinstallation, à l’aide du programme d’installation de projet <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>. Ces informations d’état, passées dans <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> en tant que le `savedState` paramètre, est continuellement mis à jour en tant que le <xref:System.ServiceProcess.ServiceProcessInstaller> instance et chaque <xref:System.ServiceProcess.ServiceInstaller> instance est installée par l’utilitaire. Il est généralement inutile pour votre code modifie ces informations d’état de manière explicite.  
  
 Pour toutes les classes dérivées de la <xref:System.Configuration.Install.Installer> classe, l’état de la <xref:System.Configuration.Install.Installer.Installers%2A> collection doit être identiques dans le <xref:System.ServiceProcess.ServiceInstaller.Install%2A> et <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> méthodes. Toutefois, vous pouvez éviter la maintenance de la collection via le <xref:System.ServiceProcess.ServiceInstaller.Install%2A> et <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> méthodes si vous ajoutez des instances de programme d’installation pour le <xref:System.Configuration.Install.Installer.Installers%2A> collection dans votre constructeur de classe de programme d’installation personnalisé.  
  
 Il n’existe aucun mécanisme de restauration pour la désinstallation, donc si un service ne parvient pas à désinstaller, cela n’affecte pas les autres services (généralement dans le même projet d’installation) en cours de désinstallation.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">Le Gestionnaire de contrôle des services est impossible à ouvrir.  
  
- ou - 
Le système n'a pas réussi à obtenir un handle pour le service.</exception>
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)" />
      </Docs>
    </Member>
  </Members>
</Type>