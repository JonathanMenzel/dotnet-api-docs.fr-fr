<Type Name="WmiWebEventProvider" FullName="System.Web.Management.WmiWebEventProvider">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="cd254cd67fa72398c24c8a8f7660ac36f626b812" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36400322" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class WmiWebEventProvider : System.Web.Management.WebEventProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit WmiWebEventProvider extends System.Web.Management.WebEventProvider" />
  <TypeSignature Language="DocId" Value="T:System.Web.Management.WmiWebEventProvider" />
  <TypeSignature Language="VB.NET" Value="Public Class WmiWebEventProvider&#xA;Inherits WebEventProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class WmiWebEventProvider : System::Web::Management::WebEventProvider" />
  <TypeSignature Language="F#" Value="type WmiWebEventProvider = class&#xA;    inherit WebEventProvider" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.Management.WebEventProvider</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Implémente un fournisseur d'événements qui mappe les événements de contrôle d'état ASP.NET aux événements WMI (Windows Management Instrumentation).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Contrôle d’état ASP.NET permet de production et les opérations personnel gérer les applications Web déployées. Le <xref:System.Web.Management> espace de noms contient les types d’événements d’état responsables de l’empaquetage des données d’état de santé et les types de fournisseur responsables du traitement de ces données. Il contient également des types pris en charge qui facilitent la gestion des événements d’état.  
  
 ASP.NET utilise cette classe pour mapper les événements de contrôle d’intégrité aux événements WMI. Pour activer la remise des événements de contrôle d’état ASP.NET au sous-système WMI, vous devez configurer le <xref:System.Web.Management.WmiWebEventProvider> classe en ajoutant les paramètres appropriés dans la `<healthMonitoring>` section du fichier de configuration.  
  
 Les informations contenues dans le fichier Aspnet.mof décrivent les paramètres des événements WMI déclenchés lorsque les événements de contrôle d’état ASP.NET sont routés vers le <xref:System.Web.Management.WmiWebEventProvider> classe et mappés aux événements WMI. Le fichier Aspnet.mof est stocké dans le répertoire de build de .NET Framework, par exemple %windir%\Microsoft.NET\Framework\\*BuildNumber*. Pour plus d’informations sur les événements de contrôle d’intégrité en tant qu’événements WMI, consultez [NIB : à l’aide de WMI pour remettre des événements de contrôle de l’intégrité de ASP.NET](http://msdn.microsoft.com/library/e57fea2f-610f-4432-9dd6-dd10a6c5bd10).  
  
> [!NOTE]
>  Dans la plupart des cas, vous serez en mesure d’utiliser les types de contrôle d’état ASP.NET implémenté et contrôle le système de contrôle d’intégrité en spécifiant des valeurs dans la `<healthMonitoring>` section de configuration. Vous pouvez également dériver des types d’analyse du fonctionnement pour créer vos propres fournisseurs et événements personnalisés. Pour obtenir un exemple de création d’un fournisseur personnalisé, consultez [Comment : implémenter l’exemple analyse des fournisseur personnalisé de contrôle d’intégrité](http://msdn.microsoft.com/library/bbb1c959-e6e4-42b2-be62-49b7ca5ab72c).  
  
   
  
## Examples  
 L’exemple suivant montre comment créer un consommateur d’événements WMI émis par la suite à des événements de contrôle d’intégrité d’application Web de contrôle d’état ASP.NET.  
  
> [!NOTE]
>  La <xref:System.Web.Management.WmiWebEventProvider> classe et les types d’événements de contrôle d’intégrité à surveiller sont déjà configurés par défaut. La seule chose que vous devez faire est de définir la règle pour tous les événements de contrôle d’intégrité. Souvenez-vous que les événements d’état ne sont pas distribuées au <xref:System.Web.Management.WmiWebEventProvider> fournisseur par défaut.  
  
 [!code-csharp[System.Web.Management.WmiWebEventProvider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Management.WmiWebEventProvider/CS/WmiWebEventListener.cs#1)]
 [!code-vb[System.Web.Management.WmiWebEventProvider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Management.WmiWebEventProvider/VB/WmiWebEventListener.vb#1)]  
  
 L’exemple suivant est un extrait du fichier de configuration qui montre une `<healthMonitoring>` section de configuration qui permet à ASP.NET d’utiliser le <xref:System.Web.Management.WmiWebEventProvider> fournisseur pour traiter tous les événements de contrôle d’état.  
  
```  
<healthMonitoring>  
  <rules>  
    <add   
      name="Using Wmi"  
      eventName="All Events"   
      provider="WmiWebEventProvider"   
      profile="Critical"/>  
  </rules>  
</healthMonitoring>  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WmiWebEventProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Management.WmiWebEventProvider.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WmiWebEventProvider();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Management.WmiWebEventProvider" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce constructeur est utilisé en interne par le système de contrôle d’état ASP.NET. Vous ne l’utiliserez jamais pour créer une instance de la <xref:System.Web.Management.TraceWebEventProvider> classe, mais vous pouvez appeler ce constructeur lorsque vous implémentez votre propre type de fournisseur qui hérite de cette classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public override void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Management.WmiWebEventProvider.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Flush();" />
      <MemberSignature Language="F#" Value="override this.Flush : unit -&gt; unit" Usage="wmiWebEventProvider.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Supprime tous les événements de la mémoire tampon du fournisseur.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsque cette méthode est appelée, tous les événements dans la mémoire tampon du fournisseur sont immédiatement supprimés, indépendamment de la durée écoulée depuis la dernière écriture ou le nombre d’événements est dans la mémoire tampon. L’heure de la dernière écriture est réinitialisée à l’heure de l’action de vidage. Lorsque le mécanisme de mise en mémoire tampon n’est pas activé, l’appel de cette méthode n’a aucun effet.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public override void Initialize (string name, System.Collections.Specialized.NameValueCollection config);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Initialize(string name, class System.Collections.Specialized.NameValueCollection config) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Management.WmiWebEventProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Initialize (name As String, config As NameValueCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Initialize(System::String ^ name, System::Collections::Specialized::NameValueCollection ^ config);" />
      <MemberSignature Language="F#" Value="override this.Initialize : string * System.Collections.Specialized.NameValueCollection -&gt; unit" Usage="wmiWebEventProvider.Initialize (name, config)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="config" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="name">Nom utilisé dans le fichier de configuration pour identifier ce fournisseur.</param>
        <param name="config">Objet <see cref="T:System.Collections.Specialized.NameValueCollection" /> qui spécifie les attributs assignés à ce fournisseur dans le fichier de configuration.</param>
        <summary>Définit les valeurs initiales de cet objet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASP.NET appelle le <xref:System.Web.Management.WmiWebEventProvider.Initialize%2A> méthode après avoir appelé la <xref:System.Web.Management.WmiWebEventProvider.%23ctor%2A> constructeur. Cette méthode est appelée pour initialiser le <xref:System.Web.Management.WmiWebEventProvider> classe avec les paramètres de configuration et le nom spécifié dans le fichier de configuration.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessEvent">
      <MemberSignature Language="C#" Value="public override void ProcessEvent (System.Web.Management.WebBaseEvent eventRaised);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ProcessEvent(class System.Web.Management.WebBaseEvent eventRaised) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Management.WmiWebEventProvider.ProcessEvent(System.Web.Management.WebBaseEvent)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub ProcessEvent (eventRaised As WebBaseEvent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void ProcessEvent(System::Web::Management::WebBaseEvent ^ eventRaised);" />
      <MemberSignature Language="F#" Value="override this.ProcessEvent : System.Web.Management.WebBaseEvent -&gt; unit" Usage="wmiWebEventProvider.ProcessEvent eventRaised" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventRaised" Type="System.Web.Management.WebBaseEvent" />
      </Parameters>
      <Docs>
        <param name="eventRaised">L'objet <see cref="T:System.Web.Management.WebBaseEvent" /> à traiter.</param>
        <summary>Traite l'événement passé au fournisseur.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il s’agit de la méthode que le contrôle d’état ASP.NET appelle pour démarrer le traitement de l’événement.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">L'événement n'a pas pu être déclenché.</exception>
      </Docs>
    </Member>
    <Member MemberName="Shutdown">
      <MemberSignature Language="C#" Value="public override void Shutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Shutdown() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Management.WmiWebEventProvider.Shutdown" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Shutdown ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Shutdown();" />
      <MemberSignature Language="F#" Value="override this.Shutdown : unit -&gt; unit" Usage="wmiWebEventProvider.Shutdown " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Exécute les tâches associées à l'arrêt du fournisseur.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASP.NET appelle le <xref:System.Web.Management.EventLogWebEventProvider.Shutdown%2A> méthode lorsque le domaine d’application qui héberge l’application Web se termine. La méthode est appelée pour effectuer des tâches qui permettent à l’application de se terminer correctement.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>