<Type Name="WebEventProvider" FullName="System.Web.Management.WebEventProvider">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="552d2ee41fd9d4b1639131e902f83c17fac20224" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30538613" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class WebEventProvider : System.Configuration.Provider.ProviderBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit WebEventProvider extends System.Configuration.Provider.ProviderBase" />
  <TypeSignature Language="DocId" Value="T:System.Web.Management.WebEventProvider" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class WebEventProvider&#xA;Inherits ProviderBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class WebEventProvider abstract : System::Configuration::Provider::ProviderBase" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.Provider.ProviderBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fournit la classe de base pour les fournisseurs d'événements non mis en mémoire.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Contrôle d’état ASP.NET permet de production et les opérations personnel gérer les applications Web déployées. Le <xref:System.Web.Management> espace de noms contient les types d’événements de contrôle d’intégrité responsables de l’empaquetage des données d’état de santé et les types de fournisseur responsables du traitement de ces données. Il contient également des types pris en charge qui facilitent la gestion des événements d’état.  
  
 Si vous souhaitez personnaliser le traitement des événements d’état, vous pouvez dériver de la <xref:System.Web.Management.WebEventProvider> classe pour créer votre propre fournisseur personnalisé.  
  
> [!NOTE]
>  Dans la plupart des cas, vous serez en mesure d’utiliser les types de contrôle d’état ASP.NET implémenté et contrôle le système de contrôle d’intégrité en spécifiant des valeurs dans la `healthMonitoring` section de configuration. Vous pouvez également dériver des types d’analyse du fonctionnement pour créer vos propres fournisseurs et événements personnalisés. Pour obtenir un exemple de dérivation à partir de la <xref:System.Web.Management.WebEventProvider> de classe, consultez l’exemple fourni dans cette rubrique.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment dériver à partir de la <xref:System.Web.Management.WebEventProvider> classe pour créer un fournisseur personnalisé qui écrit les événements configurés dans un fichier local pour lequel les droits d’accès appropriés doivent être accordés. Cet exemple de fournisseur personnalisé est simple et son principal objectif est de vous en tant que développeur un contrôle total de ses mécanismes de base. Dans un scénario réel, vous pouvez utiliser ce fournisseur et notamment l’exemple mis en mémoire tampon du fournisseur disponible à l’adresse <xref:System.Web.Management.BufferedWebEventProvider>, en tant que test préliminaire le comportement d’une application. Cela peut vous aider durant la phase de conception à mieux comprendre les informations disponibles ; puis vous pouvez ensuite transmettre ces informations à un fournisseur plus complexe.  
  
 Le fichier de configuration suivant extrait montre un `healthMonitoring` configuration de la section qui permet à ASP.NET d’utiliser le fournisseur personnalisé défini ci-dessus pour traiter tous les événements de contrôle d’état.  
  
```  
<healthMonitoring   
  heartBeatInterval="0"   
  enabled="true">  
  
    <providers>  
  
      <add name="SampleWebEventProvider"   
        type="SamplesAspNet.SampleEventProvider,webeventprovider, Version=1.0.1773.33989, Culture=neutral, PublicKeyToken=cf85aa6c978d9dea, processorArchitecture=MSIL" />  
  
    </providers>  
  
    <rules>  
  
      <rule   
        name="Custom Event Provider"  
        eventName="All Events"  
        provider="SampleWebEventProvider"  
        profile="Default" />  
    </rules>  
  
</healthMonitoring>  
```  
  
 [!code-csharp[System.Web.Management.WebEventProvider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Management.WebEventProvider/CS/webeventprovider.cs#1)]
 [!code-vb[System.Web.Management.WebEventProvider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Management.WebEventProvider/VB/webeventprovider.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WebEventProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Management.WebEventProvider.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; WebEventProvider();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Management.WebEventProvider" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.Management.WebEventProvider.%23ctor%2A> constructeur n’est pas destiné à être utilisée directement à partir de votre code. Elle est appelée par ASP.NET. Vous pouvez appeler la <xref:System.Web.Management.WebEventProvider.%23ctor%2A> constructeur lors de la dérivation à partir de la <xref:System.Web.Management.WebEventProvider> classe.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser ce constructeur dans un fournisseur d’événements personnalisés.  
  
 [!code-csharp[System.Web.Management.WebEventProvider#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Management.WebEventProvider/CS/webeventprovider.cs#2)]
 [!code-vb[System.Web.Management.WebEventProvider#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Management.WebEventProvider/VB/webeventprovider.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public abstract void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Management.WebEventProvider.Flush" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Flush();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Déplace les événements de la mémoire tampon du fournisseur vers le journal des événements.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsque cette méthode est appelée, tous les événements dans la mémoire tampon sont déplacés immédiatement à partir de la mémoire tampon au journal des événements, quelle que soit la durée écoulée depuis la dernière écriture ou le nombre d’événements contenus dans la mémoire tampon. L’heure de la dernière écriture est réinitialisée à l’heure de l’action de vidage.  
  
   
  
## Examples  
 L'exemple de code suivant montre comment utiliser la méthode <xref:System.Web.Management.WebEventProvider.Flush%2A>.  
  
 [!code-csharp[System.Web.Management.WebEventProvider#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Management.WebEventProvider/CS/webeventprovider.cs#3)]
 [!code-vb[System.Web.Management.WebEventProvider#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Management.WebEventProvider/VB/webeventprovider.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessEvent">
      <MemberSignature Language="C#" Value="public abstract void ProcessEvent (System.Web.Management.WebBaseEvent raisedEvent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ProcessEvent(class System.Web.Management.WebBaseEvent raisedEvent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Management.WebEventProvider.ProcessEvent(System.Web.Management.WebBaseEvent)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub ProcessEvent (raisedEvent As WebBaseEvent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void ProcessEvent(System::Web::Management::WebBaseEvent ^ raisedEvent);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="raisedEvent" Type="System.Web.Management.WebBaseEvent" />
      </Parameters>
      <Docs>
        <param name="raisedEvent">L'objet <see cref="T:System.Web.Management.WebBaseEvent" /> à traiter.</param>
        <summary>Traite l'événement passé au fournisseur.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il s’agit de la méthode que le contrôle d’état ASP.NET appelle pour commencer le traitement de l’événement.  
  
   
  
## Examples  
 L'exemple de code suivant illustre l'implémentation de la méthode <xref:System.Web.Management.WebEventProvider.ProcessEvent%2A>. Cette méthode ajoute la représentation sous forme de chaîne personnalisée de l’événement dans un fichier journal spécifique.  
  
 [!code-csharp[System.Web.Management.WebEventProvider#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Management.WebEventProvider/CS/webeventprovider.cs#5)]
 [!code-vb[System.Web.Management.WebEventProvider#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Management.WebEventProvider/VB/webeventprovider.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Shutdown">
      <MemberSignature Language="C#" Value="public abstract void Shutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Shutdown() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Management.WebEventProvider.Shutdown" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Shutdown ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Shutdown();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Exécute les tâches associées à l'arrêt du fournisseur.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASP.NET appelle le <xref:System.Web.Management.EventLogWebEventProvider.Shutdown%2A> méthode lorsque le domaine d’application qui héberge l’application Web se termine. La méthode est appelée pour effectuer des tâches qui permettent à l’application de se terminer correctement, comme des ressources.  
  
   
  
## Examples  
 L'exemple de code suivant montre comment utiliser la méthode <xref:System.Web.Management.WebEventProvider.Shutdown%2A>.  
  
 [!code-csharp[System.Web.Management.WebEventProvider#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Management.WebEventProvider/CS/webeventprovider.cs#4)]
 [!code-vb[System.Web.Management.WebEventProvider#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Management.WebEventProvider/VB/webeventprovider.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>