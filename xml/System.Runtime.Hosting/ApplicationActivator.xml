<Type Name="ApplicationActivator" FullName="System.Runtime.Hosting.ApplicationActivator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="637afb3ab95d9c067d9a8875b129dfafcf5465ff" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39733130" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ApplicationActivator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ApplicationActivator extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Hosting.ApplicationActivator" />
  <TypeSignature Language="VB.NET" Value="Public Class ApplicationActivator" />
  <TypeSignature Language="C++ CLI" Value="public ref class ApplicationActivator" />
  <TypeSignature Language="F#" Value="type ApplicationActivator = class" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Fournit la classe de base pour l'activation d'assemblys basés sur un manifeste.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il existe une instance désignée de le <xref:System.Runtime.Hosting.ApplicationActivator> classe dans chaque <xref:System.AppDomain> à activation tous les appels sont routés. Le <xref:System.AppDomainManager> actif <xref:System.AppDomain> peut fournir sa propre valeur personnalisée <xref:System.Runtime.Hosting.ApplicationActivator> à cet effet. Si un personnalisé <xref:System.Runtime.Hosting.ApplicationActivator> n’est pas fourni, une instance de la valeur par défaut <xref:System.Runtime.Hosting.ApplicationActivator> est créé.  
  
 Les étapes suivantes décrivent le comportement de la valeur par défaut <xref:System.Runtime.Hosting.ApplicationActivator.CreateInstance%2A> implémentation de la méthode :  
  
1.  Vérifie si le <xref:System.ActivationContext> du complément à activer correspond la <xref:System.ActivationContext> d’actuel domaine ; le cas contraire, se poursuit à l’étape 2. Sinon, exécute l’assembly et retourne le résultat encapsulé dans un handle d’objet.  
  
2.  Active le complément dans un nouveau <xref:System.AppDomain>. Les étapes suivantes sont effectuées pour initialiser une nouvelle <xref:System.AppDomain> à l’aide de la <xref:System.Runtime.Hosting.ActivationArguments> pour le complément.  
  
    1.  Crée un <xref:System.AppDomainSetup> à l’aide de l’objet une <xref:System.Runtime.Hosting.ActivationArguments> objet contenant le contexte d’activation pour le complément.  
  
    2.  Appelle le <xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A> méthode pour créer un nouveau domaine à l’aide du <xref:System.AppDomainSetup> objet.  
  
    3.  Le <xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A> les appels de méthode le <xref:System.Security.HostSecurityManager.DetermineApplicationTrust%2A?displayProperty=nameWithType> méthode pour acquérir un <xref:System.Security.Policy.ApplicationTrust> objet pour le complément. Si le <xref:System.Security.Policy.ApplicationTrust.IsApplicationTrustedToRun%2A> retourne de la propriété `true`, le complément est exécuté. Si ce n’est pas le cas, <xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A> lève un <xref:System.Security.Policy.PolicyException> indiquant que l’autorisation d’exécution ne peut pas être acquis.  
  
    4.  Si le complément est approuvé pour exécution, puis un nouveau <xref:System.AppDomain> est créé et configuré pour le <xref:System.ActivationContext> du complément, et le complément est chargé et exécuté.  
  
    5.  Le résultat de l’activation de la macro complémentaire est retourné, encapsulé dans un handle d’objet.  
  
 Un activateur personnalisé peut adapter l’activation d’un complément à un ensemble spécifique de circonstances. Par exemple, un activateur personnalisé a trouvé un existant <xref:System.AppDomain> pour activer ce complément au lieu de créer un nouveau domaine à chaque fois.  
  
 Les étapes suivantes décrivent le comportement de personnalisé <xref:System.Runtime.Hosting.ApplicationActivator> qui active un complément dans un existant <xref:System.AppDomain>:  
  
1.  L’activateur personnalisé recherche un domaine qui a le même <xref:System.ActivationContext> en tant que le complément est en cours d’activation.  
  
2.  Si le <xref:System.ActivationContext> n’a jamais été rencontré auparavant dans le processus, l’activateur personnalisé crée un <xref:System.AppDomain> pour ce <xref:System.ActivationContext> en appelant le <xref:System.AppDomain.CreateDomain%2A> directement la méthode, ou en déléguant cette activité à le <xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A> dans la classe de base.  
  
3.  S’il existe un domaine existant avec le même <xref:System.ActivationContext>, puis l’activateur peut déléguer le <xref:System.Runtime.Hosting.ApplicationActivator.CreateInstance%2A> appel de méthode à la <xref:System.Runtime.Hosting.ApplicationActivator> dans le domaine cible. Notez qu’il s’agit d’un appel de domaines à un <xref:System.Runtime.Hosting.ApplicationActivator> qui se trouvent dans la cible <xref:System.AppDomain>.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment obtenir un <xref:System.Runtime.Hosting.ApplicationActivator> objet à partir du <xref:System.AppDomain.DomainManager%2A> pour une application basée sur un manifeste.  
  
 [!code-csharp[System.Runtime.Hosting.ApplicationActivator#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.Hosting.ApplicationActivator/cs/program.cs#1)]
 [!code-vb[System.Runtime.Hosting.ApplicationActivator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.Hosting.ApplicationActivator/vb/program.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ApplicationActivator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Hosting.ApplicationActivator.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ApplicationActivator();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.Hosting.ApplicationActivator" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateInstance">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Crée une instance de l'application à activer, à l'aide d'un contexte d'activation qui identifie l'application.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public virtual System.Runtime.Remoting.ObjectHandle CreateInstance (ActivationContext activationContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Runtime.Remoting.ObjectHandle CreateInstance(class System.ActivationContext activationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Runtime::Remoting::ObjectHandle ^ CreateInstance(ActivationContext ^ activationContext);" />
      <MemberSignature Language="F#" Value="abstract member CreateInstance : ActivationContext -&gt; System.Runtime.Remoting.ObjectHandle&#xA;override this.CreateInstance : ActivationContext -&gt; System.Runtime.Remoting.ObjectHandle" Usage="applicationActivator.CreateInstance activationContext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activationContext" Type="System.ActivationContext" />
      </Parameters>
      <Docs>
        <param name="activationContext">
          <see cref="T:System.ActivationContext" /> qui identifie l'application à activer.</param>
        <summary>Crée une instance de l'application à activer, à l'aide du contexte d'activation spécifié.</summary>
        <returns>
          <see cref="T:System.Runtime.Remoting.ObjectHandle" /> qui est un wrapper de la valeur de retour de l'exécution de l'application. La valeur de retour doit être désencapsulée pour accéder à l'objet réel.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode est conçue pour l’activation basée sur le manifeste des applications.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="activationContext" /> est <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public virtual System.Runtime.Remoting.ObjectHandle CreateInstance (ActivationContext activationContext, string[] activationCustomData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Runtime.Remoting.ObjectHandle CreateInstance(class System.ActivationContext activationContext, string[] activationCustomData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext,System.String[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Runtime::Remoting::ObjectHandle ^ CreateInstance(ActivationContext ^ activationContext, cli::array &lt;System::String ^&gt; ^ activationCustomData);" />
      <MemberSignature Language="F#" Value="abstract member CreateInstance : ActivationContext * string[] -&gt; System.Runtime.Remoting.ObjectHandle&#xA;override this.CreateInstance : ActivationContext * string[] -&gt; System.Runtime.Remoting.ObjectHandle" Usage="applicationActivator.CreateInstance (activationContext, activationCustomData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activationContext" Type="System.ActivationContext" />
        <Parameter Name="activationCustomData" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="activationContext">
          <see cref="T:System.ActivationContext" /> qui identifie l'application à activer.</param>
        <param name="activationCustomData">Données d'activation personnalisées.</param>
        <summary>Crée une instance de l’application à activer, à l’aide du contexte d’activation et des données d’activation personnalisées spécifiés.</summary>
        <returns>
          <see cref="T:System.Runtime.Remoting.ObjectHandle" /> qui est un wrapper de la valeur de retour de l'exécution de l'application. La valeur de retour doit être désencapsulée pour accéder à l'objet réel.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode est conçue pour l’activation basée sur le manifeste des applications. Les données d’activation se composent d’informations, telles que la partie de chaîne de requête d’une URL.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="activationContext" /> est <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceHelper">
      <MemberSignature Language="C#" Value="protected static System.Runtime.Remoting.ObjectHandle CreateInstanceHelper (AppDomainSetup adSetup);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class System.Runtime.Remoting.ObjectHandle CreateInstanceHelper(class System.AppDomainSetup adSetup) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper(System.AppDomainSetup)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function CreateInstanceHelper (adSetup As AppDomainSetup) As ObjectHandle" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static System::Runtime::Remoting::ObjectHandle ^ CreateInstanceHelper(AppDomainSetup ^ adSetup);" />
      <MemberSignature Language="F#" Value="static member CreateInstanceHelper : AppDomainSetup -&gt; System.Runtime.Remoting.ObjectHandle" Usage="System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper adSetup" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="adSetup" Type="System.AppDomainSetup" />
      </Parameters>
      <Docs>
        <param name="adSetup">Objet <see cref="T:System.AppDomainSetup" /> dont la propriété <see cref="P:System.AppDomainSetup.ActivationArguments" /> identifie l'application à activer.</param>
        <summary>Crée une instance d'une application à l'aide de l'objet <see cref="T:System.AppDomainSetup" /> spécifié.</summary>
        <returns>
          <see cref="T:System.Runtime.Remoting.ObjectHandle" /> qui est un wrapper de la valeur de retour de l'exécution de l'application. La valeur de retour doit être désencapsulée pour accéder à l'objet réel.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode est conçue pour l’activation basée sur le manifeste des applications.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">La propriété <see cref="P:System.AppDomainSetup.ActivationArguments" /> de <paramref name="adSetup" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.Security.Policy.PolicyException">L'exécution de l'instance de l'application a échoué car les paramètres de stratégie sur le domaine d'application actuel ne fournissent pas d'autorisation pour l'exécution de cette application.</exception>
      </Docs>
    </Member>
  </Members>
</Type>