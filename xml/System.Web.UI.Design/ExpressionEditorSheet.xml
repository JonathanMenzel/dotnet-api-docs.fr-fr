<Type Name="ExpressionEditorSheet" FullName="System.Web.UI.Design.ExpressionEditorSheet">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="996b1d4c6fc4fc427cbcd8f4d454f07c7e3b21ac" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37541075" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class ExpressionEditorSheet" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ExpressionEditorSheet extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.Design.ExpressionEditorSheet" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ExpressionEditorSheet" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExpressionEditorSheet abstract" />
  <TypeSignature Language="F#" Value="type ExpressionEditorSheet = class" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="94be6-101">Représente une feuille d'éditeur au moment du design pour une expression personnalisée.</span>
      <span class="sxs-lookup">
        <span data-stu-id="94be6-101">Represents a design-time editor sheet for a custom expression.</span>
      </span>
      <span data-ttu-id="94be6-102">Cette classe doit être héritée.</span>
      <span class="sxs-lookup">
        <span data-stu-id="94be6-102">This class must be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="94be6-103">Une feuille d’éditeur d’expression personnalisée permet à un développeur de définir des propriétés sur une expression personnalisée au moment du design.</span><span class="sxs-lookup"><span data-stu-id="94be6-103">A custom expression editor sheet lets a developer set properties on a custom expression at design-time.</span></span> <span data-ttu-id="94be6-104">Valeurs de propriété de contrôle peuvent être définies à l’aide de chaînes d’expressions ; les chaînes d’expressions sont évaluées au moment de l’exécution par un générateur d’expressions et au moment du design par un éditeur d’expressions.</span><span class="sxs-lookup"><span data-stu-id="94be6-104">Control property values can be set using expression strings; the expression strings are evaluated at run time by an expression builder and at design time by an expression editor.</span></span>  
  
 <span data-ttu-id="94be6-105">Lorsque vous parcourez le <xref:System.Web.UI.Design.HtmlControlDesigner.Expressions%2A> propriété pour un contrôle dans la grille des propriétés au moment du design, le concepteur visuel affiche une boîte de dialogue pour définir des expressions qui fournissent la valeur d’une propriété du contrôle.</span><span class="sxs-lookup"><span data-stu-id="94be6-105">When you browse the <xref:System.Web.UI.Design.HtmlControlDesigner.Expressions%2A> property for a control in the design-time properties grid, the visual designer displays a dialog box to set expressions that provide the value for a control property.</span></span> <span data-ttu-id="94be6-106">Vous pouvez sélectionner le type d’expression basé sur une liste de préfixes d’expression.</span><span class="sxs-lookup"><span data-stu-id="94be6-106">You can select the expression type based on a list of expression prefixes.</span></span> <span data-ttu-id="94be6-107">Lorsque vous sélectionnez un préfixe d’expression dans la liste, le concepteur visuel utilise associé <xref:System.Web.UI.Design.ExpressionEditor> et <xref:System.Web.UI.Design.ExpressionEditorSheet> objets pour évaluer et convertir la chaîne d’expression selon la syntaxe pour ce type d’expression.</span><span class="sxs-lookup"><span data-stu-id="94be6-107">When you select an expression prefix from the list, the visual designer uses the associated <xref:System.Web.UI.Design.ExpressionEditor> and <xref:System.Web.UI.Design.ExpressionEditorSheet> objects to evaluate and convert the expression string based on the syntax for that type of expression.</span></span> <span data-ttu-id="94be6-108">Le concepteur visuel utilise les propriétés de feuille d’éditeur expression pour demander un ou plusieurs chaînes qui combinent en une chaîne d’expression personnalisée.</span><span class="sxs-lookup"><span data-stu-id="94be6-108">The visual designer uses expression editor sheet properties to prompt for one or more strings that combine into the custom expression string.</span></span>  
  
 <span data-ttu-id="94be6-109">En règle générale, pour fournir un nouveau type d’expression au moment du design, vous définissez un préfixe d’expression unique et fournir une personnalisée <xref:System.Web.Compilation.ExpressionBuilder> et <xref:System.Web.UI.Design.ExpressionEditor> implémentations.</span><span class="sxs-lookup"><span data-stu-id="94be6-109">Typically, to supply a new expression type at design time, you define a unique expression prefix and provide custom <xref:System.Web.Compilation.ExpressionBuilder> and <xref:System.Web.UI.Design.ExpressionEditor> implementations.</span></span> <span data-ttu-id="94be6-110">Si vous le souhaitez, vous pouvez fournir un personnalisé <xref:System.Web.UI.Design.ExpressionEditorSheet> implémentation qui définit les propriétés qui sont utilisées pour former l’expression.</span><span class="sxs-lookup"><span data-stu-id="94be6-110">Optionally, you can provide a custom <xref:System.Web.UI.Design.ExpressionEditorSheet> implementation that defines properties that are used to form the expression.</span></span> <span data-ttu-id="94be6-111">Pour associer un préfixe d’expression à un générateur d’expressions et d’un éditeur d’expressions, appliquez le <xref:System.Web.Compilation.ExpressionEditorAttribute> attribut et un <xref:System.Web.Compilation.ExpressionPrefixAttribute> attribut personnalisé <xref:System.Web.Configuration.ExpressionBuilder> classe, puis configurez le préfixe d’expression pour un générateur d’expressions dans le `expressionBuilders` élément dans le fichier de configuration Web.</span><span class="sxs-lookup"><span data-stu-id="94be6-111">To associate an expression prefix with an expression builder and an expression editor, apply the <xref:System.Web.Compilation.ExpressionEditorAttribute> attribute and an <xref:System.Web.Compilation.ExpressionPrefixAttribute> attribute to the custom <xref:System.Web.Configuration.ExpressionBuilder> class, and then configure the expression prefix for an expression builder in the `expressionBuilders` element in the Web configuration file.</span></span>  
  
 <span data-ttu-id="94be6-112">L’implémentation par défaut de la <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A> méthode retourne une feuille d’éditeur de base, qui utilise une chaîne d’entrée unique pour former l’expression.</span><span class="sxs-lookup"><span data-stu-id="94be6-112">The default implementation of the <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A> method returns a basic editor sheet, which uses a single input string to form the expression.</span></span> <span data-ttu-id="94be6-113">Les éditeurs d’expressions personnalisées qui sont dérivés de la <xref:System.Web.UI.Design.ExpressionEditor> peut remplacer le <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A> méthode pour retourner un éditeur personnalisé de mise en œuvre de la feuille.</span><span class="sxs-lookup"><span data-stu-id="94be6-113">Custom expression editors that are derived from the <xref:System.Web.UI.Design.ExpressionEditor> can override the <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A> method to return a custom editor sheet implementation.</span></span> <span data-ttu-id="94be6-114">En règle générale, une feuille d’éditeur personnalisée contient plusieurs propriétés qui sont utilisées pour générer la chaîne d’expression.</span><span class="sxs-lookup"><span data-stu-id="94be6-114">Typically, a custom editor sheet contains multiple properties that are used to build the expression string.</span></span> <span data-ttu-id="94be6-115">Le <xref:System.Web.UI.Design.ExpressionEditorSheet.GetExpression%2A> méthode retourne la chaîne d’expression résultante selon les propriétés de l’expression actuelle.</span><span class="sxs-lookup"><span data-stu-id="94be6-115">The <xref:System.Web.UI.Design.ExpressionEditorSheet.GetExpression%2A> method returns the resulting expression string based on the current expression properties.</span></span>  
  
 <span data-ttu-id="94be6-116">Par exemple, le <xref:System.Web.UI.Design.ResourceExpressionEditor> classe dérive de la <xref:System.Web.UI.Design.ExpressionEditor> classe et fournit une implémentation pour évaluer et associer une référence de chaîne de ressource avec une propriété du contrôle au moment du design.</span><span class="sxs-lookup"><span data-stu-id="94be6-116">For example, the <xref:System.Web.UI.Design.ResourceExpressionEditor> class derives from the <xref:System.Web.UI.Design.ExpressionEditor> class and provides an implementation for evaluating and associating a resource string reference with a control property at design time.</span></span> <span data-ttu-id="94be6-117">Le <xref:System.Web.Compilation.ResourceExpressionBuilder> classe est associée au préfixe d’expression `Resources` et <xref:System.Web.UI.Design.ResourceExpressionEditor> implémentation.</span><span class="sxs-lookup"><span data-stu-id="94be6-117">The <xref:System.Web.Compilation.ResourceExpressionBuilder> class is associated with the expression prefix `Resources` and the <xref:System.Web.UI.Design.ResourceExpressionEditor> implementation.</span></span> <span data-ttu-id="94be6-118">Le <xref:System.Web.UI.Design.ResourceExpressionEditor.GetExpressionEditorSheet%2A> méthode retourne un <xref:System.Web.UI.Design.ResourceExpressionEditorSheet>, qui définit les propriétés individuelles qui forment une expression de référence de ressource.</span><span class="sxs-lookup"><span data-stu-id="94be6-118">The <xref:System.Web.UI.Design.ResourceExpressionEditor.GetExpressionEditorSheet%2A> method returns a <xref:System.Web.UI.Design.ResourceExpressionEditorSheet>, which defines the individual properties that form a resource reference expression.</span></span>  
  
 <span data-ttu-id="94be6-119">Lorsque vous héritez de la <xref:System.Web.UI.Design.ExpressionEditorSheet> (classe), vous devez substituer les membres suivants :</span><span class="sxs-lookup"><span data-stu-id="94be6-119">When you inherit from the <xref:System.Web.UI.Design.ExpressionEditorSheet> class, you must override the following members:</span></span>  
  
-   <span data-ttu-id="94be6-120">Le <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A> méthode pour retourner un éditeur personnalisé de mise en œuvre de la feuille.</span><span class="sxs-lookup"><span data-stu-id="94be6-120">The <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A> method to return a custom editor sheet implementation.</span></span>  
  
-   <span data-ttu-id="94be6-121">Le <xref:System.Web.UI.Design.ExpressionEditorSheet.%23ctor%2A> constructeur pour implémenter des actions d’initialisation personnalisées pour votre implémentation de feuille d’éditeur expression.</span><span class="sxs-lookup"><span data-stu-id="94be6-121">The <xref:System.Web.UI.Design.ExpressionEditorSheet.%23ctor%2A> constructor to implement custom initialization actions for your expression editor sheet implementation.</span></span>  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <span data-ttu-id="94be6-122">
        <para>Dérivez une feuille d’éditeur d’expressions personnalisées à partir de la <see cref="T:System.Web.UI.Design.ExpressionEditorSheet" /> (classe), si vous définissez un nouveau type d’expression pour les valeurs de propriété de contrôle et que vous souhaitez générer la chaîne d’expression en fonction de plusieurs valeurs de propriété expression. Une implémentation de classe dérivée doit contenir les éléments suivants :-une propriété publique pour chaque valeur distincte dans la chaîne d’expression qui peut être définie au moment du design.  -Une implémentation de la <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" /> méthode qui forme la chaîne d’expression personnalisée à partir des valeurs de propriété de feuille éditeur.  Le cas échéant, une implémentation de constructeur qui définit les valeurs initiales de l’éditeur de feuille de propriétés.  Classe de l’éditeur d’expressions personnalisées associée crée une instance de la feuille d’éditeur dérivée dans la <see cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" /> (méthode), initialise avec la chaîne d’expression actuelle définie pour la propriété de contrôle et retourne l’instance au concepteur visuel. Le concepteur visuel vous permet de définir l’expression de feuille de propriétés, puis appelle la <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" /> méthode pour former la chaîne d’expression à partir des valeurs de propriété de feuille expression d’entrée.</para>
      </span>
      <span class="sxs-lookup">
        <span data-stu-id="94be6-122">
          <para>Derive a custom expression editor sheet from the <see cref="T:System.Web.UI.Design.ExpressionEditorSheet" /> class, if you are defining a new expression type for control property values and you want to build the expression string based on multiple expression property values. A derived class implementation should contain the following:  -   A public property for each distinct value in the expression string that can be set at design time.  -   An implementation of the <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" /> method that forms the custom expression string from the editor sheet property values.  -   Optionally, a constructor implementation that sets the initial values of the editor sheet properties.  The associated custom expression editor class creates an instance of the derived editor sheet in the <see cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" /> method, initializes that instance with the current expression string set for the control property, and returns the instance to the visual designer. The visual designer allows you to set the expression sheet properties, and then calls the <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" /> method to form the expression string from the input expression sheet property values.</para>
        </span>
      </span>
    </block>
    <altmember cref="T:System.Web.UI.Design.ExpressionEditor" />
    <altmember cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />
    <altmember cref="T:System.Web.UI.Design.ResourceExpressionEditorSheet" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ExpressionEditorSheet (IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.ExpressionEditorSheet.#ctor(System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (serviceProvider As IServiceProvider)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ExpressionEditorSheet(IServiceProvider ^ serviceProvider);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.Design.ExpressionEditorSheet : IServiceProvider -&gt; System.Web.UI.Design.ExpressionEditorSheet" Usage="new System.Web.UI.Design.ExpressionEditorSheet serviceProvider" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="serviceProvider">
          <span data-ttu-id="94be6-123">Implémentation d'un fournisseur de services fournie par l'hôte du concepteur, utilisée pour obtenir des services supplémentaires au moment du design.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94be6-123">A service provider implementation supplied by the designer host, used to obtain additional design-time services.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="94be6-124">Initialise une nouvelle instance de la classe <see cref="T:System.Web.UI.Design.ExpressionEditorSheet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94be6-124">Initializes a new instance of the <see cref="T:System.Web.UI.Design.ExpressionEditorSheet" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="94be6-125">Étant donné que le <xref:System.Web.UI.Design.ExpressionEditorSheet> classe est abstraite, vous ne pouvez pas créer une instance d’un <xref:System.Web.UI.Design.ExpressionEditorSheet> directement à l’aide de la <xref:System.Web.UI.Design.ExpressionEditorSheet.%23ctor%2A> constructeur.</span><span class="sxs-lookup"><span data-stu-id="94be6-125">Because the <xref:System.Web.UI.Design.ExpressionEditorSheet> class is abstract, you cannot create an instance of an <xref:System.Web.UI.Design.ExpressionEditorSheet> directly using the <xref:System.Web.UI.Design.ExpressionEditorSheet.%23ctor%2A> constructor.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="94be6-126">
            <para>Lorsque vous dérivez de la <see cref="T:System.Web.UI.Design.ExpressionEditorSheet" /> classe, substituez le <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.#ctor(System.IServiceProvider)" /> constructeur pour implémenter des actions d’initialisation personnalisées pour votre implémentation de feuille d’éditeur expression.  Par exemple, une classe de feuille d’éditeur expression personnalisée qui implémente des propriétés de l’expression supplémentaires peut définir les valeurs par défaut pour les propriétés de l’expression dans le <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.#ctor(System.IServiceProvider)" /> constructeur. Une classe de feuille d’éditeur expression personnalisée peut définir des surcharges de constructeur public supplémentaires qui utilisent des valeurs de paramètre d’entrée pour définir les valeurs initiales pour les propriétés de l’expression.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="94be6-126">
              <para>When deriving from the <see cref="T:System.Web.UI.Design.ExpressionEditorSheet" /> class, override the <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.#ctor(System.IServiceProvider)" /> constructor to implement custom initialization actions for your expression editor sheet implementation.  For example, a custom expression editor sheet class that implements additional expression properties can define the default values for the expression properties in the <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.#ctor(System.IServiceProvider)" /> constructor. A custom expression editor sheet class can define additional public constructor overloads that use input parameter values to set the initial values for the expression properties.</para>
            </span>
          </span>
        </block>
        <altmember cref="Overload:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor" />
        <altmember cref="T:System.Web.UI.Design.ExpressionEditor" />
        <altmember cref="T:System.Web.UI.Design.ResourceExpressionEditorSheet" />
      </Docs>
    </Member>
    <Member MemberName="GetExpression">
      <MemberSignature Language="C#" Value="public abstract string GetExpression ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetExpression() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetExpression () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::String ^ GetExpression();" />
      <MemberSignature Language="F#" Value="abstract member GetExpression : unit -&gt; string" Usage="expressionEditorSheet.GetExpression " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="94be6-127">En cas de substitution dans une classe dérivée, retourne la chaîne d'expression formée par les valeurs de propriété de feuille d'éditeur d'expressions.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94be6-127">When overridden in a derived class, returns the expression string that is formed by the expression editor sheet property values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="94be6-128">Chaîne d'expression personnalisée pour les valeurs de propriété actuelles.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94be6-128">The custom expression string for the current property values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="94be6-129">Une feuille d’éditeur d’expression personnalisée contient des paramètres au moment du design pour plusieurs propriétés de l’expression, qui sont combinées pour former une chaîne d’expression.</span><span class="sxs-lookup"><span data-stu-id="94be6-129">A custom expression editor sheet contains design-time settings for multiple expression properties, which are combined to form an expression string.</span></span> <span data-ttu-id="94be6-130">Valeurs de propriété de contrôle peuvent être définies à l’aide de chaînes d’expressions ; les chaînes d’expressions sont évaluées au moment de l’exécution par un générateur d’expressions.</span><span class="sxs-lookup"><span data-stu-id="94be6-130">Control property values can be set using expression strings; the expression strings are evaluated at run time by an expression builder.</span></span>  
  
 <span data-ttu-id="94be6-131">Le <xref:System.Web.UI.Design.ExpressionEditorSheet.GetExpression%2A> méthode retourne une chaîne d’expression qui est générée à partir des propriétés de l’expression actuelle.</span><span class="sxs-lookup"><span data-stu-id="94be6-131">The <xref:System.Web.UI.Design.ExpressionEditorSheet.GetExpression%2A> method returns an expression string that is built from the current expression properties.</span></span> <span data-ttu-id="94be6-132">Le concepteur visuel vous permet de définir l’expression de feuille de propriétés, puis appelle la <xref:System.Web.UI.Design.ExpressionEditorSheet.GetExpression%2A> méthode pour obtenir la chaîne d’expression et de définir la valeur de propriété de contrôle.</span><span class="sxs-lookup"><span data-stu-id="94be6-132">The visual designer allows you to set the expression sheet properties, and then calls the <xref:System.Web.UI.Design.ExpressionEditorSheet.GetExpression%2A> method to get the expression string and set the control property value.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="94be6-133">
            <para>Dérivez une feuille d’éditeur d’expressions personnalisées à partir de la <see cref="T:System.Web.UI.Design.ExpressionEditorSheet" /> (classe), si vous définissez un nouveau type d’expression pour les valeurs de propriété de contrôle et que vous souhaitez générer la chaîne d’expression en fonction de plusieurs valeurs de propriété expression. Une implémentation de classe dérivée doit contenir les éléments suivants :-une propriété publique pour chaque valeur distincte dans la chaîne d’expression qui peut être définie au moment du design.  -Une implémentation de la <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" /> méthode qui forme la chaîne d’expression personnalisée à partir des valeurs de propriété de feuille éditeur.  Le cas échéant, une implémentation de constructeur qui définit les valeurs initiales de l’éditeur de feuille de propriétés.  Classe de l’éditeur d’expressions personnalisées associée crée une instance de la feuille d’éditeur dérivée dans la <see cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" /> (méthode), initialise avec la chaîne d’expression actuelle définie pour la propriété de contrôle, puis retourne l’instance à l’élément visuel concepteur. Le concepteur visuel vous permet de définir l’expression de feuille de propriétés, puis appelle la <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" /> méthode pour former la chaîne d’expression à partir des valeurs de propriété de feuille expression d’entrée.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="94be6-133">
              <para>Derive a custom expression editor sheet from the <see cref="T:System.Web.UI.Design.ExpressionEditorSheet" /> class, if you are defining a new expression type for control property values and you want to build the expression string based on multiple expression property values. A derived class implementation should contain the following:  -   A public property for each distinct value in the expression string that can be set at design time.  -   An implementation of the <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" /> method that forms the custom expression string from the editor sheet property values.  -   Optionally, a constructor implementation that sets the initial values of the editor sheet properties.  The associated custom expression editor class creates an instance of the derived editor sheet in the <see cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" /> method, initializes that instance with the current expression string set for the control property, and then returns the instance to the visual designer. The visual designer allows you to set the expression sheet properties, and then calls the <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" /> method to form the expression string from the input expression sheet property values.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Web.UI.Design.ExpressionEditor" />
        <altmember cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />
        <altmember cref="T:System.Web.UI.Design.ResourceExpressionEditorSheet" />
      </Docs>
    </Member>
    <Member MemberName="IsValid">
      <MemberSignature Language="C#" Value="public virtual bool IsValid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValid" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Design.ExpressionEditorSheet.IsValid" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsValid As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsValid { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsValid : bool" Usage="System.Web.UI.Design.ExpressionEditorSheet.IsValid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="94be6-134">Obtient une valeur qui indique si la chaîne d'expression est valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94be6-134">Gets a value that indicates whether the expression string is valid.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="94be6-135">
            <see langword="true" /> si la chaîne d'expression est valide ; sinon <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94be6-135">
              <see langword="true" />, if the expression string is valid; otherwise <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="94be6-136">Cette implémentation de base retourne toujours `true`.</span><span class="sxs-lookup"><span data-stu-id="94be6-136">This base implementation always returns `true`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.Design.ExpressionEditor" />
        <altmember cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />
        <altmember cref="T:System.Web.UI.Design.ResourceExpressionEditorSheet" />
      </Docs>
    </Member>
    <Member MemberName="ServiceProvider">
      <MemberSignature Language="C#" Value="public IServiceProvider ServiceProvider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IServiceProvider ServiceProvider" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ServiceProvider As IServiceProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IServiceProvider ^ ServiceProvider { IServiceProvider ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ServiceProvider : IServiceProvider" Usage="System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IServiceProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="94be6-137">Obtient l'implémentation de fournisseur de services utilisée par la feuille d'éditeur d'expressions.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94be6-137">Gets the service provider implementation that is used by the expression editor sheet.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="94be6-138">
            <see cref="T:System.IServiceProvider" />, fourni en général par l'hôte de conception, qui peut être utilisé pour obtenir des services supplémentaires au moment du design.</span>
          <span class="sxs-lookup">
            <span data-stu-id="94be6-138">An <see cref="T:System.IServiceProvider" />, typically provided by the design host, that can be used to obtain additional design-time services.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="94be6-139">Utilisez le <xref:System.Web.UI.Design.ExpressionEditorSheet.%23ctor%2A> constructeur afin de définir le <xref:System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider%2A> implémentation pour une feuille d’éditeur d’expressions personnalisées.</span><span class="sxs-lookup"><span data-stu-id="94be6-139">Use the <xref:System.Web.UI.Design.ExpressionEditorSheet.%23ctor%2A> constructor to set the <xref:System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider%2A> implementation for a custom expression editor sheet.</span></span>  
  
 <span data-ttu-id="94be6-140">Le <xref:System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider%2A> propriété peut être utilisée pour accéder aux services fournis par l’hôte du concepteur.</span><span class="sxs-lookup"><span data-stu-id="94be6-140">The <xref:System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider%2A> property can be used to access services that are provided by the designer host.</span></span> <span data-ttu-id="94be6-141">Par exemple, appelez le <xref:System.IServiceProvider.GetService%2A> méthode avec le <xref:System.Web.UI.Design.IWebApplication> interface pour accéder à des éléments de projet, des documents ou des détails de fichier de configuration qui sont fournies par le biais du concepteur visuel.</span><span class="sxs-lookup"><span data-stu-id="94be6-141">For example, call the <xref:System.IServiceProvider.GetService%2A> method with the <xref:System.Web.UI.Design.IWebApplication> interface to access project items, documents, or configuration file details that are provided through the visual designer.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />
        <altmember cref="M:System.Web.UI.Design.ExpressionEditorSheet.#ctor(System.IServiceProvider)" />
      </Docs>
    </Member>
  </Members>
</Type>