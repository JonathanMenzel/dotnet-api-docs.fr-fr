<Type Name="ExpressionEditorSheet" FullName="System.Web.UI.Design.ExpressionEditorSheet">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9d987e9f0ffaf7b1818b7d646845498696df77f9" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36589979" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class ExpressionEditorSheet" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ExpressionEditorSheet extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.Design.ExpressionEditorSheet" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ExpressionEditorSheet" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExpressionEditorSheet abstract" />
  <TypeSignature Language="F#" Value="type ExpressionEditorSheet = class" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Représente une feuille d'éditeur au moment du design pour une expression personnalisée. Cette classe doit être héritée.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Une feuille de l’éditeur d’expressions personnalisée permet à un développeur de définir des propriétés sur une expression personnalisée au moment du design. Valeurs de propriété de contrôle peuvent être définies à l’aide de chaînes d’expression ; les chaînes d’expressions sont évaluées au moment de l’exécution par un générateur d’expressions et au moment du design par un éditeur d’expressions.  
  
 Lorsque vous parcourez le <xref:System.Web.UI.Design.HtmlControlDesigner.Expressions%2A> propriété pour un contrôle dans la grille des propriétés au moment du design, le concepteur visuel affiche une boîte de dialogue pour définir les expressions qui fournissent la valeur d’une propriété du contrôle. Vous pouvez sélectionner le type d’expression basé sur une liste de préfixes d’expression. Lorsque vous sélectionnez un préfixe d’expression dans la liste, le concepteur visuel utilise associé <xref:System.Web.UI.Design.ExpressionEditor> et <xref:System.Web.UI.Design.ExpressionEditorSheet> objets pour évaluer et convertir la chaîne d’expression selon la syntaxe pour ce type d’expression. Le concepteur visuel utilise les propriétés feuille de l’éditeur d’expression pour la saisie d’une ou plusieurs chaînes combinent dans la chaîne d’expression personnalisée.  
  
 En règle générale, pour fournir un nouveau type d’expression au moment du design, vous définissez un préfixe d’expression unique et fournir personnalisée <xref:System.Web.Compilation.ExpressionBuilder> et <xref:System.Web.UI.Design.ExpressionEditor> implémentations. Si vous le souhaitez, vous pouvez fournir une personnalisée <xref:System.Web.UI.Design.ExpressionEditorSheet> implémentation qui définit les propriétés qui sont utilisées pour former l’expression. Pour associer un préfixe d’expression à un générateur d’expressions et d’un éditeur d’expressions, appliquez le <xref:System.Web.Compilation.ExpressionEditorAttribute> attribut et un <xref:System.Web.Compilation.ExpressionPrefixAttribute> l’attribut personnalisé <xref:System.Web.Configuration.ExpressionBuilder> classe, puis configurez le préfixe d’expression pour un générateur d’expressions dans le `expressionBuilders` élément dans le fichier de configuration Web.  
  
 L’implémentation par défaut de la <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A> méthode retourne une feuille de l’éditeur de base, qui utilise une chaîne d’entrée unique pour former l’expression. Les éditeurs d’expressions personnalisées qui sont dérivés de la <xref:System.Web.UI.Design.ExpressionEditor> peuvent substituer la <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A> méthode pour retourner un éditeur personnalisé de mise en œuvre de la feuille. En règle générale, une feuille de l’éditeur personnalisé contient plusieurs propriétés qui sont utilisées pour générer la chaîne d’expression. Le <xref:System.Web.UI.Design.ExpressionEditorSheet.GetExpression%2A> méthode retourne la chaîne d’expression résultante basée sur les propriétés de l’expression actuelle.  
  
 Par exemple, le <xref:System.Web.UI.Design.ResourceExpressionEditor> classe dérive de la <xref:System.Web.UI.Design.ExpressionEditor> classe et fournit une implémentation pour évaluer et associer une référence de chaîne de ressource avec une propriété de contrôle au moment du design. Le <xref:System.Web.Compilation.ResourceExpressionBuilder> classe est associé au préfixe d’expression `Resources` et <xref:System.Web.UI.Design.ResourceExpressionEditor> implémentation. Le <xref:System.Web.UI.Design.ResourceExpressionEditor.GetExpressionEditorSheet%2A> méthode retourne un <xref:System.Web.UI.Design.ResourceExpressionEditorSheet>, qui définit les propriétés individuelles qui forment une expression de référence de ressource.  
  
 Lorsque vous héritez de la <xref:System.Web.UI.Design.ExpressionEditorSheet> (classe), vous devez substituer les membres suivants :  
  
-   Le <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A> méthode pour retourner un éditeur personnalisé de mise en œuvre de la feuille.  
  
-   Le <xref:System.Web.UI.Design.ExpressionEditorSheet.%23ctor%2A> constructeur pour implémenter des actions d’initialisation personnalisées pour votre implémentation d’éditeur d’expressions feuille.  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Dérivez une feuille d’éditeur d’expression personnalisée à partir de la <see cref="T:System.Web.UI.Design.ExpressionEditorSheet" /> (classe), si vous définissez un nouveau type d’expression pour des valeurs de propriété de contrôle et que vous souhaitez générer la chaîne d’expression en fonction de plusieurs valeurs de propriété d’expression. Une implémentation de classe dérivée doit contenir les éléments suivants :-une propriété publique pour chaque valeur distincte dans la chaîne d’expression qui peut être définie au moment du design.  -Une implémentation de la <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" /> méthode qui forme la chaîne d’expression personnalisée à partir des valeurs de propriété de feuille éditeur.  -Le cas échéant, une implémentation de constructeur qui définit les valeurs initiales de l’éditeur de propriétés de la feuille.  La classe d’Éditeur d’expressions personnalisées associée crée une instance de la feuille d’éditeur dérivée dans la <see cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" /> méthode initialise avec la chaîne d’expression actuelle définie pour la propriété du contrôle et retourne l’instance au concepteur visuel. Le concepteur visuel vous permet de définir des propriétés de feuille de l’expression, puis appelle la <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" /> méthode pour former la chaîne d’expression à partir des valeurs de propriété de feuille expression d’entrée.</para>
    </block>
    <altmember cref="T:System.Web.UI.Design.ExpressionEditor" />
    <altmember cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />
    <altmember cref="T:System.Web.UI.Design.ResourceExpressionEditorSheet" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ExpressionEditorSheet (IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.ExpressionEditorSheet.#ctor(System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (serviceProvider As IServiceProvider)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ExpressionEditorSheet(IServiceProvider ^ serviceProvider);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.Design.ExpressionEditorSheet : IServiceProvider -&gt; System.Web.UI.Design.ExpressionEditorSheet" Usage="new System.Web.UI.Design.ExpressionEditorSheet serviceProvider" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="serviceProvider">Implémentation d'un fournisseur de services fournie par l'hôte du concepteur, utilisée pour obtenir des services supplémentaires au moment du design.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.UI.Design.ExpressionEditorSheet" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Étant donné que la <xref:System.Web.UI.Design.ExpressionEditorSheet> classe est abstraite, vous ne pouvez pas créer une instance d’un <xref:System.Web.UI.Design.ExpressionEditorSheet> directement à l’aide de la <xref:System.Web.UI.Design.ExpressionEditorSheet.%23ctor%2A> constructeur.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Lorsque vous dérivez de la <see cref="T:System.Web.UI.Design.ExpressionEditorSheet" /> de classe, remplacez le <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.#ctor(System.IServiceProvider)" /> constructeur pour implémenter des actions d’initialisation personnalisées pour votre implémentation d’éditeur d’expressions feuille.  Par exemple, une classe de feuille d’éditeur expression personnalisée qui implémente des propriétés d’expression supplémentaires peut définir les valeurs par défaut pour les propriétés de l’expression dans le <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.#ctor(System.IServiceProvider)" /> constructeur. Une classe de feuille de l’éditeur d’expression personnalisée peut définir des surcharges de constructeur public supplémentaires qui utilisent des valeurs de paramètre d’entrée pour définir les valeurs initiales pour les propriétés de l’expression.</para>
        </block>
        <altmember cref="Overload:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor" />
        <altmember cref="T:System.Web.UI.Design.ExpressionEditor" />
        <altmember cref="T:System.Web.UI.Design.ResourceExpressionEditorSheet" />
      </Docs>
    </Member>
    <Member MemberName="GetExpression">
      <MemberSignature Language="C#" Value="public abstract string GetExpression ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetExpression() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetExpression () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::String ^ GetExpression();" />
      <MemberSignature Language="F#" Value="abstract member GetExpression : unit -&gt; string" Usage="expressionEditorSheet.GetExpression " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>En cas de substitution dans une classe dérivée, retourne la chaîne d'expression formée par les valeurs de propriété de feuille d'éditeur d'expressions.</summary>
        <returns>Chaîne d'expression personnalisée pour les valeurs de propriété actuelles.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Une feuille de l’éditeur d’expressions personnalisée contient des paramètres au moment du design pour plusieurs propriétés de l’expression, qui sont combinées pour former une chaîne d’expression. Valeurs de propriété de contrôle peuvent être définies à l’aide de chaînes d’expression ; les chaînes d’expressions sont évaluées au moment de l’exécution par un générateur d’expressions.  
  
 Le <xref:System.Web.UI.Design.ExpressionEditorSheet.GetExpression%2A> méthode retourne une chaîne d’expression qui est construite à partir des propriétés de l’expression actuelle. Le concepteur visuel vous permet de définir des propriétés de feuille de l’expression, puis appelle la <xref:System.Web.UI.Design.ExpressionEditorSheet.GetExpression%2A> méthode pour obtenir la chaîne d’expression et définir la valeur de propriété du contrôle.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Dérivez une feuille d’éditeur d’expression personnalisée à partir de la <see cref="T:System.Web.UI.Design.ExpressionEditorSheet" /> (classe), si vous définissez un nouveau type d’expression pour des valeurs de propriété de contrôle et que vous souhaitez générer la chaîne d’expression en fonction de plusieurs valeurs de propriété d’expression. Une implémentation de classe dérivée doit contenir les éléments suivants :-une propriété publique pour chaque valeur distincte dans la chaîne d’expression qui peut être définie au moment du design.  -Une implémentation de la <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" /> méthode qui forme la chaîne d’expression personnalisée à partir des valeurs de propriété de feuille éditeur.  -Le cas échéant, une implémentation de constructeur qui définit les valeurs initiales de l’éditeur de propriétés de la feuille.  La classe d’Éditeur d’expressions personnalisées associée crée une instance de la feuille d’éditeur dérivée dans la <see cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" /> méthode initialise avec la chaîne d’expression actuelle définie pour la propriété du contrôle, puis retourne l’instance à l’élément visuel concepteur. Le concepteur visuel vous permet de définir des propriétés de feuille de l’expression, puis appelle la <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" /> méthode pour former la chaîne d’expression à partir des valeurs de propriété de feuille expression d’entrée.</para>
        </block>
        <altmember cref="T:System.Web.UI.Design.ExpressionEditor" />
        <altmember cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />
        <altmember cref="T:System.Web.UI.Design.ResourceExpressionEditorSheet" />
      </Docs>
    </Member>
    <Member MemberName="IsValid">
      <MemberSignature Language="C#" Value="public virtual bool IsValid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValid" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Design.ExpressionEditorSheet.IsValid" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsValid As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsValid { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsValid : bool" Usage="System.Web.UI.Design.ExpressionEditorSheet.IsValid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui indique si la chaîne d'expression est valide.</summary>
        <value>
          <see langword="true" /> si la chaîne d'expression est valide ; sinon <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette implémentation de base retourne toujours `true`.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.Design.ExpressionEditor" />
        <altmember cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />
        <altmember cref="T:System.Web.UI.Design.ResourceExpressionEditorSheet" />
      </Docs>
    </Member>
    <Member MemberName="ServiceProvider">
      <MemberSignature Language="C#" Value="public IServiceProvider ServiceProvider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IServiceProvider ServiceProvider" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ServiceProvider As IServiceProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IServiceProvider ^ ServiceProvider { IServiceProvider ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ServiceProvider : IServiceProvider" Usage="System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IServiceProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient l'implémentation de fournisseur de services utilisée par la feuille d'éditeur d'expressions.</summary>
        <value>
          <see cref="T:System.IServiceProvider" />, fourni en général par l'hôte de conception, qui peut être utilisé pour obtenir des services supplémentaires au moment du design.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Web.UI.Design.ExpressionEditorSheet.%23ctor%2A> constructeur pour définir le <xref:System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider%2A> mise en œuvre d’une feuille de l’éditeur d’expression personnalisée.  
  
 Le <xref:System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider%2A> propriété peut être utilisée pour accéder aux services fournis par l’hôte de concepteur. Par exemple, appelez le <xref:System.IServiceProvider.GetService%2A> méthode avec le <xref:System.Web.UI.Design.IWebApplication> interface pour accéder aux éléments de projet, des documents ou des détails de fichier de configuration sont fournies par le biais du concepteur visuel.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />
        <altmember cref="M:System.Web.UI.Design.ExpressionEditorSheet.#ctor(System.IServiceProvider)" />
      </Docs>
    </Member>
  </Members>
</Type>