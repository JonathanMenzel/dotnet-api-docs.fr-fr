<Type Name="ExpressionEditor" FullName="System.Web.UI.Design.ExpressionEditor">
  <Metadata><Meta Name="ms.openlocfilehash" Value="eb01c3d6cf6e42b1709ab5acc0cf88f7b14094c3" /><Meta Name="ms.sourcegitcommit" Value="c5fd6b431a16f0412349201a0e93a9eacddf4b35" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="12/14/2018" /><Meta Name="ms.locfileid" Value="53389947" /></Metadata><TypeSignature Language="C#" Value="public abstract class ExpressionEditor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ExpressionEditor extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.Design.ExpressionEditor" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ExpressionEditor" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExpressionEditor abstract" />
  <TypeSignature Language="F#" Value="type ExpressionEditor = class" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Définit un jeu de propriétés et de méthodes pour évaluer une expression associée à une propriété du contrôle au moment du design et pour fournir une feuille d'éditeur d'expressions à l'hôte de conception visuel pour une utilisation dans la boîte de dialogue de l'éditeur d'expressions. Cette classe est abstraite.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Héberger un concepteur visuel, tel que [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)], utilise le <xref:System.Web.UI.Design.ExpressionEditor> classe pour présenter des feuilles d’éditeur à l’utilisateur d’expression personnalisée et puis d’évaluer l’expression sélectionnée pour le rendu au moment du design.  
  
 Lorsque vous parcourez le <xref:System.Web.UI.Design.HtmlControlDesigner.Expressions%2A> propriété pour un contrôle dans la grille des propriétés au moment du design, le concepteur visuel affiche une boîte de dialogue pour définir les expressions d’une propriété du contrôle. Vous pouvez sélectionner le type d’expression basé sur une liste de préfixes d’expression. Lorsque vous sélectionnez un préfixe d’expression dans la liste, le concepteur visuel utilise associé <xref:System.Web.UI.Design.ExpressionEditor> et <xref:System.Web.UI.Design.ExpressionEditorSheet> objets à définir, évaluer et convertir la chaîne d’expression selon la syntaxe pour ce type d’expression. Le concepteur visuel définit l’expression pour la propriété du contrôle associé et utilise ensuite le résultat de l’expression évaluée pour assigner des valeurs de propriété qui sont rendues sur l’aire de conception du contrôle.  
  
 La méthode statique <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor%2A> méthodes permettent d’obtenir l’éditeur d’expressions qui est associé à un préfixe particulier ou un générateur d’expressions. Le <xref:System.Web.UI.Design.ExpressionEditor.ExpressionPrefix%2A> propriété pour un <xref:System.Web.UI.Design.ExpressionEditor> objet retourne le préfixe d’expression configuré. Le <xref:System.Web.UI.Design.ExpressionEditor.EvaluateExpression%2A> méthode évalue une chaîne d’expression d’entrée. Le <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A> méthode retourne le <xref:System.Web.UI.Design.ExpressionEditorSheet> implémentation qui est utilisée pour demander les propriétés de l’expression personnalisée dans la boîte de dialogue d’expressions.  
  
 En règle générale, pour prendre en charge un nouveau type d’expression au moment du design, vous définissez un préfixe d’expression unique et fournir une personnalisée <xref:System.Web.Compilation.ExpressionBuilder> et <xref:System.Web.UI.Design.ExpressionEditor> implémentations. Si vous le souhaitez, vous pouvez fournir un personnalisé <xref:System.Web.UI.Design.ExpressionEditorSheet> implémentation qui définit les propriétés qui sont utilisées pour former l’expression dans la boîte de dialogue d’expressions.  
  
 Le préfixe d’expression identifie le type d’expression personnalisé et associe une expression avec le Générateur d’expressions et l’éditeur d’expressions. Lorsque des expressions personnalisées sont analysées dans une page, le préfixe d’expression est utilisé pour créer des instances d’associé <xref:System.Web.Compilation.ExpressionBuilder> et <xref:System.Web.UI.Design.ExpressionEditor> classes. Pour associer un préfixe d’expression à un générateur d’expressions et l’éditeur d’expressions, appliquez le <xref:System.Web.Compilation.ExpressionEditorAttribute> et <xref:System.Web.Compilation.ExpressionPrefixAttribute> attributs personnalisé <xref:System.Web.Compilation.ExpressionBuilder> classe et configurez le préfixe d’expression pour un générateur d’expressions dans le `expressionBuilders` élément dans le fichier de configuration Web. Le préfixe est pas obligatoire, mais fortement recommandé.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment dériver à partir de la <xref:System.Web.UI.Design.ExpressionEditor> classe pour définir un éditeur d’expressions personnalisées.  
  
 [!code-csharp[CustomExpressionEditor#1](~/samples/snippets/csharp/VS_Snippets_WebNet/customexpressioneditor/cs/CustomAppSettingsExpression.cs#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>Les étapes suivantes sont nécessaires pour dériver un personnalisé <see cref="T:System.Web.UI.Design.ExpressionEditor" /> classe : 
-Remplacer le <see cref="M:System.Web.UI.Design.ExpressionEditor.EvaluateExpression(System.String,System.Object,System.Type,System.IServiceProvider)" /> méthode pour évaluer le type d’expression personnalisé au moment du design.  
  
Remplacer le cas échéant, le <see cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" /> méthode pour retourner une classe personnalisée qui définit les propriétés qui sont combinées pour former l’expression personnalisée.  
  
-Appliquer le <see cref="T:System.Web.Compilation.ExpressionEditorAttribute" /> d’attribut sur le <see cref="T:System.Web.Compilation.ExpressionBuilder" /> déclaration à associer le Générateur d’expressions personnalisées de la classe de l’éditeur d’expressions dérivées de classe.  
  
Par exemple, le <see cref="T:System.Web.UI.Design.ResourceExpressionEditor" /> classe dérive de la <see cref="T:System.Web.UI.Design.ExpressionEditor" /> classe et fournit une implémentation pour évaluer et associer une référence de chaîne de ressource avec une propriété du contrôle au moment du design. Le <see cref="T:System.Web.Compilation.ResourceExpressionBuilder" /> classe est associée au préfixe d’expression <see langword="Resources" /> et <see cref="T:System.Web.UI.Design.ResourceExpressionEditor" /> implémentation. Le <see cref="M:System.Web.UI.Design.ResourceExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" /> méthode retourne un <see cref="T:System.Web.UI.Design.ResourceExpressionEditorSheet" />, qui définit les propriétés individuelles qui forment une expression de référence de ressource.</para></block>
    <altmember cref="T:System.Web.UI.Design.ExpressionEditorSheet" />
    <altmember cref="T:System.Web.Compilation.ExpressionBuilder" />
    <altmember cref="P:System.Web.UI.Design.HtmlControlDesigner.Expressions" />
    <altmember cref="T:System.Web.Compilation.ExpressionEditorAttribute" />
    <altmember cref="T:System.Web.Configuration.ExpressionBuilder" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ExpressionEditor ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.ExpressionEditor.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ExpressionEditor();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.UI.Design.ExpressionEditor" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Étant donné que le <xref:System.Web.UI.Design.ExpressionEditor> classe est abstraite, vous ne pouvez pas créer une instance de la <xref:System.Web.UI.Design.ExpressionEditor> directement à l’aide de la classe la <xref:System.Web.UI.Design.ExpressionEditor.%23ctor%2A> constructeur.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Lorsque vous dérivez de la <see cref="T:System.Web.UI.Design.ExpressionEditor" /> classe, substituez le <see cref="M:System.Web.UI.Design.ExpressionEditor.#ctor" /> constructeur pour implémenter des actions d’initialisation personnalisées pour votre implémentation d’éditeur d’expression.</para></block>
        <altmember cref="T:System.Web.UI.Design.ExpressionEditorSheet" />
        <altmember cref="T:System.Web.Compilation.ExpressionBuilder" />
        <altmember cref="P:System.Web.UI.Design.HtmlControlDesigner.Expressions" />
        <altmember cref="T:System.Web.Compilation.ExpressionEditorAttribute" />
      </Docs>
    </Member>
    <Member MemberName="EvaluateExpression">
      <MemberSignature Language="C#" Value="public abstract object EvaluateExpression (string expression, object parseTimeData, Type propertyType, IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object EvaluateExpression(string expression, object parseTimeData, class System.Type propertyType, class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.ExpressionEditor.EvaluateExpression(System.String,System.Object,System.Type,System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function EvaluateExpression (expression As String, parseTimeData As Object, propertyType As Type, serviceProvider As IServiceProvider) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ EvaluateExpression(System::String ^ expression, System::Object ^ parseTimeData, Type ^ propertyType, IServiceProvider ^ serviceProvider);" />
      <MemberSignature Language="F#" Value="abstract member EvaluateExpression : string * obj * Type * IServiceProvider -&gt; obj" Usage="expressionEditor.EvaluateExpression (expression, parseTimeData, propertyType, serviceProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.String" />
        <Parameter Name="parseTimeData" Type="System.Object" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="expression">Chaîne d'expression à évaluer. L'expression ne comprend pas le préfixe d'expression.</param>
        <param name="parseTimeData">Objet contenant des informations d'analyse supplémentaires pour évaluer l'<paramref name="expression" />. Ceci est généralement fourni par le générateur d'expressions.</param>
        <param name="propertyType">Type de la propriété du contrôle à laquelle <paramref name="expression" /> est lié.</param>
        <param name="serviceProvider">Implémentation d'un fournisseur de services fournie par l'hôte du concepteur, utilisée pour obtenir des services supplémentaires au moment du design.</param>
        <summary>Évalue une chaîne d'expression et fournit la valeur au moment du design pour une propriété du contrôle.</summary>
        <returns>Objet référencé par la chaîne d'expression évaluée si l'évaluation de l'expression a réussi ; sinon, <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’hôte de concepteur visuel utilise la <xref:System.Web.UI.Design.ExpressionEditor.EvaluateExpression%2A> méthode pour évaluer une expression et fournir la valeur au moment du design d’une propriété de contrôle associé.  
  
 Le concepteur visuel utilise le <xref:System.Web.Compilation.ExpressionBuilder.ParseExpression%2A?displayProperty=nameWithType> méthode pour analyser la chaîne d’expression au moment du design, puis appelle la <xref:System.Web.UI.Design.ExpressionEditor.EvaluateExpression%2A> méthode avec les données de l’expression analysée. Le concepteur visuel utilise le résultat de l’expression évaluée pour assigner des valeurs de propriété qui sont rendues sur l’aire de conception du contrôle.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Les classes dérivées de la <see cref="T:System.Web.UI.Design.ExpressionEditor" /> classe doit remplacer le <see cref="M:System.Web.UI.Design.ExpressionEditor.EvaluateExpression(System.String,System.Object,System.Type,System.IServiceProvider)" /> méthode pour évaluer le type d’expression personnalisé au moment du design.  
  
Au minimum, un <see cref="M:System.Web.UI.Design.ExpressionEditor.EvaluateExpression(System.String,System.Object,System.Type,System.IServiceProvider)" /> implémentation doit utiliser les étapes suivantes : 
1.  Évaluer la chaîne d’expression et déterminer l’objet qui est référencé par l’expression.  
  
2.  Retourner <see langword="null" />, si la chaîne d’expression ne peut pas être évaluée.  
  
3.  Utilisez le <see cref="M:System.Type.IsAssignableFrom(System.Type)" /> méthode sur <paramref name="propertyType" /> pour déterminer si l’objet référencé peut être assigné directement au type de propriété de contrôle, puis, en fonction du résultat, effectuez l’une des actions suivantes : 
-Si l’objet référencé peut être assigné directement à la propriété du contrôle, retourner l’objet référencé pour l’expression.  
  
-Si l’objet référencé est un type simple, telle qu’une chaîne, retourne l’objet référencé.  
  
-Dans le cas contraire, déterminez si l’objet référencé peut être assigné à ou converti vers le type de propriété.  
  
4.  Utilisez le <see cref="Overload:System.ComponentModel.TypeConverter.CanConvertFrom" /> méthode sur le <see cref="T:System.ComponentModel.TypeConverter" /> pour l’objet <paramref name="propertyType" /> pour déterminer si l’objet référencé peut être converti au type de propriété de contrôle, puis, en fonction du résultat, effectuez l’une des actions suivantes : 
-Si l’objet peut être converti au type de propriété de contrôle, retourner l’objet converti en utilisant le <see cref="Overload:System.ComponentModel.TypeConverter.ConvertFrom" /> (méthode).  
  
-Si l’objet référencé ne peut pas être assigné ou converti en <paramref name="propertyType" />, retourner l’objet référencé.  
  
Si vous le souhaitez, le <see cref="M:System.Web.UI.Design.ExpressionEditor.EvaluateExpression(System.String,System.Object,System.Type,System.IServiceProvider)" /> implémentation peut utiliser le <paramref name="parseTimeData" /> objet qui est fournie par le <see cref="M:System.Web.Compilation.ExpressionBuilder.ParseExpression(System.String,System.Type,System.Web.Compilation.ExpressionBuilderContext)" /> implémentation optimiser ou de l’aide dans l’évaluation de la chaîne d’expression d’entrée.</para></block>
        <altmember cref="T:System.Web.Compilation.ExpressionBuilder" />
      </Docs>
    </Member>
    <Member MemberName="ExpressionPrefix">
      <MemberSignature Language="C#" Value="public string ExpressionPrefix { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ExpressionPrefix" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Design.ExpressionEditor.ExpressionPrefix" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExpressionPrefix As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ExpressionPrefix { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ExpressionPrefix : string" Usage="System.Web.UI.Design.ExpressionEditor.ExpressionPrefix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le préfixe d'expression qui identifie des chaînes d'expressions prises en charge par l'implémentation d'éditeur d'expressions.</summary>
        <value>Chaîne représentant le préfixe pour les expressions prises en charge par la classe dérivée de <see cref="T:System.Web.UI.Design.ExpressionEditor" /> ; sinon, chaîne vide ("") si l'éditeur d'expressions n'est associé à aucun préfixe d'expression.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le préfixe d’expression identifie le type d’expression personnalisé et associe une expression avec le Générateur d’expressions et l’éditeur d’expressions. Lorsque des expressions personnalisées sont analysées dans une page, le préfixe d’expression est utilisé pour créer des instances d’associé <xref:System.Web.Compilation.ExpressionBuilder> et <xref:System.Web.UI.Design.ExpressionEditor> classes. Pour associer un préfixe d’expression à un générateur d’expressions et l’éditeur d’expressions, appliquez le <xref:System.Web.Compilation.ExpressionEditorAttribute> et <xref:System.Web.Compilation.ExpressionPrefixAttribute> attributs personnalisé <xref:System.Web.Compilation.ExpressionBuilder> classe et configurez le préfixe d’expression pour un générateur d’expressions dans le `expressionBuilders` élément dans le fichier de configuration Web.  
  
 En règle générale, les classes dérivées ne remplacent pas les <xref:System.Web.UI.Design.ExpressionEditor.ExpressionPrefix%2A> propriété. La base de <xref:System.Web.UI.Design.ExpressionEditor> classe définit la <xref:System.Web.UI.Design.ExpressionEditor.ExpressionPrefix%2A> valeur basée sur le <xref:System.Web.Compilation.ExpressionPrefixAttribute> attribut associé au <xref:System.Web.Compilation.ExpressionBuilder> objet.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Compilation.ExpressionPrefixAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetExpressionEditor">
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Retourne une implémentation <see cref="T:System.Web.UI.Design.ExpressionEditor" /> associée à un préfixe d'expression ou un générateur d'expressions.</summary>
        <altmember cref="T:System.Web.UI.Design.ExpressionEditorSheet" />
        <altmember cref="T:System.Web.Compilation.ExpressionBuilder" />
        <altmember cref="P:System.Web.UI.Design.HtmlControlDesigner.Expressions" />
        <altmember cref="T:System.Web.Compilation.ExpressionEditorAttribute" />
      </Docs>
    </MemberGroup>
    <Member MemberName="GetExpressionEditor">
      <MemberSignature Language="C#" Value="public static System.Web.UI.Design.ExpressionEditor GetExpressionEditor (string expressionPrefix, IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.UI.Design.ExpressionEditor GetExpressionEditor(string expressionPrefix, class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor(System.String,System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetExpressionEditor (expressionPrefix As String, serviceProvider As IServiceProvider) As ExpressionEditor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::UI::Design::ExpressionEditor ^ GetExpressionEditor(System::String ^ expressionPrefix, IServiceProvider ^ serviceProvider);" />
      <MemberSignature Language="F#" Value="static member GetExpressionEditor : string * IServiceProvider -&gt; System.Web.UI.Design.ExpressionEditor" Usage="System.Web.UI.Design.ExpressionEditor.GetExpressionEditor (expressionPrefix, serviceProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.Design.ExpressionEditor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expressionPrefix" Type="System.String" />
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="expressionPrefix">Préfixe d'expression utilisé pour rechercher l'éditeur d'expressions associé.</param>
        <param name="serviceProvider">Implémentation d'un fournisseur de services fournie par l'hôte du concepteur, utilisée pour obtenir des services supplémentaires au moment du design.</param>
        <summary>Retourne une implémentation <see cref="T:System.Web.UI.Design.ExpressionEditor" /> associée au préfixe d'expression spécifié.</summary>
        <returns>Implémentation <see cref="T:System.Web.UI.Design.ExpressionEditor" /> associée à <paramref name="expressionPrefix" /> ; sinon, <see langword="null" />, si <paramref name="expressionPrefix" /> n'est pas défini ou n'est pas associé à un <see cref="T:System.Web.UI.Design.ExpressionEditor" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez la méthode statique <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor%2A> des surcharges de méthode pour rechercher le <xref:System.Web.UI.Design.ExpressionEditor> objet qui est associé à un préfixe d’expression particulière ou d’un type de générateur d’expression.  
  
 Pour chaque type d’expression personnalisée, un préfixe d’expression identifie le Générateur d’expressions associé et l’éditeur d’expressions. Lorsque des expressions personnalisées sont analysées dans une page, le préfixe d’expression est utilisé pour créer des instances d’associé <xref:System.Web.Compilation.ExpressionBuilder> et <xref:System.Web.UI.Design.ExpressionEditor> classes.  
  
 Pour associer un préfixe d’expression à un générateur d’expressions et l’éditeur d’expressions, appliquez le <xref:System.Web.Compilation.ExpressionEditorAttribute> et <xref:System.Web.Compilation.ExpressionPrefixAttribute> attributs personnalisé <xref:System.Web.Compilation.ExpressionBuilder> classe et configurez le préfixe d’expression pour un générateur d’expressions dans le `expressionBuilders` élément dans le fichier de configuration Web.  
  
 Pour rechercher l’expression associée d’éditeur pour un préfixe d’expression, le <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor%2A> méthode énumère disponibles <xref:System.Web.Compilation.ExpressionBuilder> implémentations pour un préfixe correspondant. Le <xref:System.Web.Compilation.ExpressionBuilder> implémentations peuvent être configurées dans le `expressionBuilders` section du fichier de configuration Web. Si une disponible <xref:System.Web.Compilation.ExpressionBuilder> implémentation définit le préfixe d’expression, le <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor%2A> méthode retourne le type qui est spécifié dans le <xref:System.Web.Compilation.ExpressionEditorAttribute> attribut de la <xref:System.Web.Compilation.ExpressionBuilder> métadonnées.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="serviceProvider" /> a la valeur <see langword="null" />.</exception>
        <altmember cref="P:System.Web.UI.Design.ExpressionEditor.ExpressionPrefix" />
        <altmember cref="T:System.Web.Compilation.ExpressionBuilder" />
        <altmember cref="T:System.Web.Compilation.ExpressionEditorAttribute" />
        <altmember cref="T:System.Web.Compilation.ExpressionPrefixAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetExpressionEditor">
      <MemberSignature Language="C#" Value="public static System.Web.UI.Design.ExpressionEditor GetExpressionEditor (Type expressionBuilderType, IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.UI.Design.ExpressionEditor GetExpressionEditor(class System.Type expressionBuilderType, class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor(System.Type,System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetExpressionEditor (expressionBuilderType As Type, serviceProvider As IServiceProvider) As ExpressionEditor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::UI::Design::ExpressionEditor ^ GetExpressionEditor(Type ^ expressionBuilderType, IServiceProvider ^ serviceProvider);" />
      <MemberSignature Language="F#" Value="static member GetExpressionEditor : Type * IServiceProvider -&gt; System.Web.UI.Design.ExpressionEditor" Usage="System.Web.UI.Design.ExpressionEditor.GetExpressionEditor (expressionBuilderType, serviceProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.Design.ExpressionEditor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expressionBuilderType" Type="System.Type" />
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="expressionBuilderType">Type de la classe de générateur d'expressions dérivée, utilisé pour rechercher l'éditeur d'expressions associé.</param>
        <param name="serviceProvider">Implémentation d'un fournisseur de services fournie par l'hôte du concepteur, utilisée pour obtenir des services supplémentaires au moment du design.</param>
        <summary>Retourne une implémentation <see cref="T:System.Web.UI.Design.ExpressionEditor" /> associée au type de générateur d'expressions spécifié.</summary>
        <returns>Implémentation <see cref="T:System.Web.UI.Design.ExpressionEditor" /> associée à <paramref name="expressionBuilderType" /> ; sinon, <see langword="null" />, si <paramref name="expressionBuilderType" /> ne peut pas être localisé ou n'est associé à aucun <see cref="T:System.Web.UI.Design.ExpressionEditor" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez la méthode statique <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor%2A> surcharges pour rechercher le <xref:System.Web.UI.Design.ExpressionEditor> objet qui est associé à un préfixe d’expression particulière ou d’un type de générateur d’expression.  
  
 Pour chaque type d’expression personnalisée, un préfixe d’expression identifie le Générateur d’expressions associé et l’éditeur d’expressions. Lorsque des expressions personnalisées sont analysées dans une page, le préfixe d’expression est utilisé pour créer des instances d’associé <xref:System.Web.Compilation.ExpressionBuilder> et <xref:System.Web.UI.Design.ExpressionEditor> classes.  
  
 Pour associer un préfixe d’expression à un générateur d’expressions et l’éditeur d’expressions, appliquez le <xref:System.Web.Compilation.ExpressionEditorAttribute> et <xref:System.Web.Compilation.ExpressionPrefixAttribute> attributs personnalisé <xref:System.Web.Compilation.ExpressionBuilder> classe et configurez le préfixe d’expression pour un générateur d’expressions dans le `expressionBuilders` élément dans le fichier de configuration Web.  
  
 Le <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor%2A> méthode énumère disponibles <xref:System.Web.Compilation.ExpressionBuilder> implémentations pour localiser `expressionBuilderType`. Le <xref:System.Web.Compilation.ExpressionBuilder> implémentations peuvent être configurées dans le `expressionBuilders` section du fichier de configuration Web. Si `expressionBuilderType` se trouve dans le jeu de disponibles <xref:System.Web.Compilation.ExpressionBuilder> implémentations, le <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor%2A> méthode retourne le type qui est spécifié dans le <xref:System.Web.Compilation.ExpressionEditorAttribute> attribut de la <xref:System.Web.Compilation.ExpressionBuilder> métadonnées.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="expressionBuilderType" /> a la valeur <see langword="null" />.  
  
- ou - 
 <paramref name="serviceProvider" /> a la valeur <see langword="null" />.</exception>
        <altmember cref="P:System.Web.UI.Design.ExpressionEditor.ExpressionPrefix" />
        <altmember cref="T:System.Web.Compilation.ExpressionBuilder" />
        <altmember cref="T:System.Web.Compilation.ExpressionEditorAttribute" />
        <altmember cref="T:System.Web.Compilation.ExpressionPrefixAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetExpressionEditorSheet">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.Design.ExpressionEditorSheet GetExpressionEditorSheet (string expression, IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.UI.Design.ExpressionEditorSheet GetExpressionEditorSheet(string expression, class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetExpressionEditorSheet (expression As String, serviceProvider As IServiceProvider) As ExpressionEditorSheet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Web::UI::Design::ExpressionEditorSheet ^ GetExpressionEditorSheet(System::String ^ expression, IServiceProvider ^ serviceProvider);" />
      <MemberSignature Language="F#" Value="abstract member GetExpressionEditorSheet : string * IServiceProvider -&gt; System.Web.UI.Design.ExpressionEditorSheet&#xA;override this.GetExpressionEditorSheet : string * IServiceProvider -&gt; System.Web.UI.Design.ExpressionEditorSheet" Usage="expressionEditor.GetExpressionEditorSheet (expression, serviceProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.Design.ExpressionEditorSheet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.String" />
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="expression">Chaîne d'expression définie pour une propriété du contrôle, utilisée pour initialiser la feuille d'éditeur d'expression.</param>
        <param name="serviceProvider">Implémentation d'un fournisseur de services fournie par l'hôte du concepteur, utilisée pour obtenir des services supplémentaires au moment du design.</param>
        <summary>Retourne une feuille d'éditeur d'expressions qui est associée à l'éditeur d'expressions actuel.</summary>
        <returns><see cref="T:System.Web.UI.Design.ExpressionEditorSheet" /> qui définit les propriétés d'expressions personnalisées.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A> méthode retourne un <xref:System.Web.UI.Design.ExpressionEditorSheet> implémentation qui définit les chaînes qui sont combinées pour former une expression personnalisée. Le concepteur visuel utilise une feuille d’éditeur d’expression pour demander un ou plusieurs chaînes qui combinent en une expression personnalisée. La méthode de classe de base retourne une feuille d’éditeur d’expression par défaut, qui utilise une chaîne d’entrée unique pour former l’expression. La feuille d’éditeur d’expression définit la grille des propriétés pour l’expression. Par conséquent, les propriétés qui expose l’éditeur d’expressions deviennent des propriétés qui peuvent être définies pour l’expression dans la boîte de dialogue.  
  
 Les classes dérivées de la <xref:System.Web.UI.Design.ExpressionEditor> classe peut éventuellement substituer le <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A> méthode pour fournir une feuille d’éditeur d’expressions personnalisées. Une feuille d’éditeur d’expression personnalisée peut autoriser l’entrée au moment du design pour plusieurs propriétés, qui sont associées pour former la chaîne d’expression.  
  
 Par exemple, le <xref:System.Web.UI.Design.ResourceExpressionEditor> classe dérive de la <xref:System.Web.UI.Design.ExpressionEditor> classe et fournit une implémentation pour évaluer et associer une référence de chaîne de ressource avec une propriété du contrôle au moment du design. Le <xref:System.Web.Compilation.ResourceExpressionBuilder> classe est associée au préfixe d’expression `Resources` et <xref:System.Web.UI.Design.ResourceExpressionEditor> implémentation. Le <xref:System.Web.UI.Design.ResourceExpressionEditor.GetExpressionEditorSheet%2A?displayProperty=nameWithType> méthode retourne un <xref:System.Web.UI.Design.ResourceExpressionEditorSheet>, qui définit les propriétés individuelles qui forment une expression de référence de ressource.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>En règle générale, pour fournir un nouveau type d’expression au moment du design, vous définissez un préfixe d’expression unique et fournir une personnalisée <see cref="T:System.Web.Compilation.ExpressionBuilder" /> et <see cref="T:System.Web.UI.Design.ExpressionEditor" /> implémentations. Si vous le souhaitez, vous pouvez fournir un personnalisé <see cref="T:System.Web.UI.Design.ExpressionEditorSheet" /> implémentation qui définit les propriétés qui sont utilisées pour former l’expression. Même si le fichier de configuration définit le préfixe, vous devez également appliquer un <see cref="T:System.Web.Compilation.ExpressionPrefixAttribute" /> objet et un <see cref="T:System.Web.Compilation.ExpressionEditorAttribute" /> objet.  
  
Remplacer le <see cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" /> méthode pour retourner une feuille d’éditeur d’expression qui définit l’entrée au moment du design pour les propriétés multiples dans une expression personnalisée. Lorsque vous sélectionnez une propriété de contrôle et le type de l’éditeur d’expression, le concepteur visuel appelle le <see cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" /> (méthode), puis fournit l’expression actuelle de chaîne qui est définie pour la propriété de contrôle. Utilisez <paramref name="expression" /> pour définir les valeurs initiales pour les propriétés de l’expression. Utilisez <paramref name="serviceProvider" /> pour initialiser un constructeur de feuilles d’expressions personnalisées et accéder aux services fournis par l’hôte du concepteur. Par exemple, appelez le <see cref="M:System.IServiceProvider.GetService(System.Type)" /> méthode avec le <see cref="T:System.Web.UI.Design.IWebApplication" /> type pour accéder à des éléments de projet, des documents ou des détails de fichier de configuration qui sont fournies par le biais du concepteur visuel.</para></block>
        <altmember cref="T:System.Web.UI.Design.ExpressionEditorSheet" />
        <altmember cref="T:System.Web.UI.Design.ResourceExpressionEditorSheet" />
        <altmember cref="T:System.Web.Compilation.ExpressionPrefixAttribute" />
        <altmember cref="T:System.Web.Compilation.ExpressionEditorAttribute" />
      </Docs>
    </Member>
  </Members>
</Type>