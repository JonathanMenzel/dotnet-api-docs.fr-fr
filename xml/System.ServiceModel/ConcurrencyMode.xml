<Type Name="ConcurrencyMode" FullName="System.ServiceModel.ConcurrencyMode">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b794f216ceaa7c6fce1828d6ee563ec907867be6" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="37451371" />
  </Metadata>
  <TypeSignature Language="C#" Value="public enum ConcurrencyMode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ConcurrencyMode extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.ConcurrencyMode" />
  <TypeSignature Language="VB.NET" Value="Public Enum ConcurrencyMode" />
  <TypeSignature Language="C++ CLI" Value="public enum class ConcurrencyMode" />
  <TypeSignature Language="F#" Value="type ConcurrencyMode = " />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>
      <span data-ttu-id="dfe07-101">Spécifie si une classe de service prend en charge des modes d'opération monothread ou multithread.</span>
      <span class="sxs-lookup">
        <span data-stu-id="dfe07-101">Specifies whether a service class supports single-threaded or multi-threaded modes of operation.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dfe07-102"><xref:System.ServiceModel.ConcurrencyMode> est utilisé conjointement avec la propriété <xref:System.ServiceModel.ServiceBehaviorAttribute.ConcurrencyMode%2A> pour spécifier si une classe de service prend en charge des modes d'opération monothread ou multithread.</span><span class="sxs-lookup"><span data-stu-id="dfe07-102"><xref:System.ServiceModel.ConcurrencyMode> is used in conjunction with the <xref:System.ServiceModel.ServiceBehaviorAttribute.ConcurrencyMode%2A> property to specify whether a service class supports single-threaded or multi-threaded modes of operation.</span></span> <span data-ttu-id="dfe07-103">Une opération monothread peut être réentrante ou non réentrante.</span><span class="sxs-lookup"><span data-stu-id="dfe07-103">A single-threaded operation can be either reentrant or non-reentrant.</span></span>  
  
 <span data-ttu-id="dfe07-104">Le tableau suivant présente lorsque Windows Communication Foundation (WCF) permet à une opération à appeler pendant qu’une autre est en cours, en fonction de la <xref:System.ServiceModel.ConcurrencyMode>.</span><span class="sxs-lookup"><span data-stu-id="dfe07-104">The following table shows when Windows Communication Foundation (WCF) permits an operation to be invoked while another one is in progress, depending upon the <xref:System.ServiceModel.ConcurrencyMode>.</span></span>  
  
|<span data-ttu-id="dfe07-105">Valeur ConcurrencyMode</span><span class="sxs-lookup"><span data-stu-id="dfe07-105">ConcurrencyMode Value</span></span>|<span data-ttu-id="dfe07-106">Une nouvelle opération peut-elle être appelée ?</span><span class="sxs-lookup"><span data-stu-id="dfe07-106">Can a new operation be invoked?</span></span>|  
|---------------------------|-------------------------------------|  
|<span data-ttu-id="dfe07-107">Single</span><span class="sxs-lookup"><span data-stu-id="dfe07-107">Single</span></span>|<span data-ttu-id="dfe07-108">Jamais.</span><span class="sxs-lookup"><span data-stu-id="dfe07-108">Never.</span></span>|  
|<span data-ttu-id="dfe07-109">Réentrant</span><span class="sxs-lookup"><span data-stu-id="dfe07-109">Reentrant</span></span>|<span data-ttu-id="dfe07-110">Uniquement pendant l'appel d'un autre service ou d'un rappel.</span><span class="sxs-lookup"><span data-stu-id="dfe07-110">Only while invoking another service or a callback.</span></span>|  
|<span data-ttu-id="dfe07-111">Multiple</span><span class="sxs-lookup"><span data-stu-id="dfe07-111">Multiple</span></span>|<span data-ttu-id="dfe07-112">Toujours.</span><span class="sxs-lookup"><span data-stu-id="dfe07-112">Always.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="dfe07-113">L’exemple de code suivant montre la différence entre les à l’aide d’un seul, réentrant et plusieurs.</span><span class="sxs-lookup"><span data-stu-id="dfe07-113">The following code example demonstrates the different between using Single, Reentrant, and Multiple.</span></span> <span data-ttu-id="dfe07-114">Cet exemple ne se compile pas sans une vraie implémentation, mais ne montre pas le type de garanties que WCF rend et ce que cela signifie pour votre code d’opération de thread.</span><span class="sxs-lookup"><span data-stu-id="dfe07-114">This sample does not compile without a real implementation behind it, but does demonstrate the kind of threading guarantees that WCF makes and what that means for your operation code.</span></span>  
  
 [!code-csharp[C_BestPractices-Concurrency#1](~/samples/snippets/csharp/VS_Snippets_CFX/c_bestpractices-concurrency/cs/reentrantandmultiple.cs#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Multiple">
      <MemberSignature Language="C#" Value="Multiple" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ServiceModel.ConcurrencyMode Multiple = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.ServiceModel.ConcurrencyMode.Multiple" />
      <MemberSignature Language="VB.NET" Value="Multiple" />
      <MemberSignature Language="C++ CLI" Value="Multiple" />
      <MemberSignature Language="F#" Value="Multiple = 2" Usage="System.ServiceModel.ConcurrencyMode.Multiple" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.ConcurrencyMode</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="dfe07-115">L'instance de service est multithread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dfe07-115">The service instance is multi-threaded.</span>
          </span>
          <span data-ttu-id="dfe07-116">Il n'existe aucune garantie de synchronisation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dfe07-116">No synchronization guarantees are made.</span>
          </span>
          <span data-ttu-id="dfe07-117">Comme d’autres threads peuvent modifier votre objet de service n’importe quand, vous devez gérer à tout moment la synchronisation et la cohérence d’état.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dfe07-117">Because other threads can change your service object at any time, you must handle synchronization and state consistency at all times.</span>
          </span>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Reentrant">
      <MemberSignature Language="C#" Value="Reentrant" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ServiceModel.ConcurrencyMode Reentrant = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.ServiceModel.ConcurrencyMode.Reentrant" />
      <MemberSignature Language="VB.NET" Value="Reentrant" />
      <MemberSignature Language="C++ CLI" Value="Reentrant" />
      <MemberSignature Language="F#" Value="Reentrant = 1" Usage="System.ServiceModel.ConcurrencyMode.Reentrant" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.ConcurrencyMode</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="dfe07-118">L'instance de service est monothread et accepte des appels réentrants.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dfe07-118">The service instance is single-threaded and accepts reentrant calls.</span>
          </span>
          <span data-ttu-id="dfe07-119">Le service réentrant accepte des appels lorsque vous appelez un autre service ; il vous incombe par conséquent d'assurer la cohérence de l'état de vos objets avant les appels sortants et vous devez confirmer que les données d'opération locales sont valides après des appels sortants.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dfe07-119">The reentrant service accepts calls when you call another service; it is therefore your responsibility to leave your object state consistent before callouts and you must confirm that operation-local data is valid after callouts.</span>
          </span>
          <span data-ttu-id="dfe07-120">Notez que l’instance de service est déverrouillée uniquement en appelant un autre service sur un canal WCF.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dfe07-120">Note that the service instance is unlocked only by calling another service over a WCF channel.</span>
          </span>
          <span data-ttu-id="dfe07-121">Dans ce cas, le service appelé peut réentrer le premier service via un rappel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dfe07-121">In this case, the called service can reenter the first service via a callback.</span>
          </span>
          <span data-ttu-id="dfe07-122">Si le premier service n'est pas réentrant, la séquence des appels provoque un interblocage.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dfe07-122">If the first service is not reentrant, the sequence of calls results in a deadlock.</span>
          </span>
          <span data-ttu-id="dfe07-123">Pour plus d'informations, consultez <see cref="P:System.ServiceModel.ServiceBehaviorAttribute.ConcurrencyMode" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dfe07-123">For details, see <see cref="P:System.ServiceModel.ServiceBehaviorAttribute.ConcurrencyMode" />.</span>
          </span>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Single">
      <MemberSignature Language="C#" Value="Single" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ServiceModel.ConcurrencyMode Single = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.ServiceModel.ConcurrencyMode.Single" />
      <MemberSignature Language="VB.NET" Value="Single" />
      <MemberSignature Language="C++ CLI" Value="Single" />
      <MemberSignature Language="F#" Value="Single = 0" Usage="System.ServiceModel.ConcurrencyMode.Single" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.ConcurrencyMode</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="dfe07-124">L'instance de service est monothread et n'accepte pas d'appels réentrants.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dfe07-124">The service instance is single-threaded and does not accept reentrant calls.</span>
          </span>
          <span data-ttu-id="dfe07-125">Si la propriété <see cref="P:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode" /> est <see cref="F:System.ServiceModel.InstanceContextMode.Single" />, et que des messages supplémentaires arrivent pendant que l'instance sert un appel, ces messages doivent attendre jusqu'à ce que le service soit disponible ou jusqu'à expiration de leur délai d'attente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dfe07-125">If the <see cref="P:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode" /> property is <see cref="F:System.ServiceModel.InstanceContextMode.Single" />, and additional messages arrive while the instance services a call, these messages must wait until the service is available or until the messages time out.</span>
          </span>
        </summary>
      </Docs>
    </Member>
  </Members>
</Type>