<Type Name="ServiceHost" FullName="System.ServiceModel.ServiceHost">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b9bd9e574a16f37d9722705874671597e3cb60aa" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36410439" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ServiceHost : System.ServiceModel.ServiceHostBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ServiceHost extends System.ServiceModel.ServiceHostBase" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.ServiceHost" />
  <TypeSignature Language="VB.NET" Value="Public Class ServiceHost&#xA;Inherits ServiceHostBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class ServiceHost : System::ServiceModel::ServiceHostBase" />
  <TypeSignature Language="F#" Value="type ServiceHost = class&#xA;    inherit ServiceHostBase" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ServiceModel.ServiceHostBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="ea0dd-101">Fournit un hôte de services.</span>
      <span class="sxs-lookup">
        <span data-stu-id="ea0dd-101">Provides a host for services.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ea0dd-102">Implémente l’hôte utilisé par le modèle de service Windows Communication Foundation (WCF) modèle de programmation.</span><span class="sxs-lookup"><span data-stu-id="ea0dd-102">Implements the host used by the Windows Communication Foundation (WCF) service model programming model.</span></span>  
  
 <span data-ttu-id="ea0dd-103">Utilisez la classe <xref:System.ServiceModel.ServiceHost> pour configurer et exposer un service destiné à être utilisé par les applications clientes lorsque vous n'utilisez pas IIS (Internet Information Services) ou WAS (Windows Activation Services) pour exposer un service.</span><span class="sxs-lookup"><span data-stu-id="ea0dd-103">Use the <xref:System.ServiceModel.ServiceHost> class to configure and expose a service for use by client applications when you are not using Internet Information Services (IIS) or Windows Activation Services (WAS) to expose a service.</span></span> <span data-ttu-id="ea0dd-104">IIS et WAS interagissent avec un objet <xref:System.ServiceModel.ServiceHost> en votre nom.</span><span class="sxs-lookup"><span data-stu-id="ea0dd-104">Both IIS and WAS interact with a <xref:System.ServiceModel.ServiceHost> object on your behalf.</span></span>  
  
 <span data-ttu-id="ea0dd-105">Pour exposer un service pour une utilisation par les appelants, WCF requiert une description complète du service (représenté par la <xref:System.ServiceModel.Description.ServiceDescription> classe).</span><span class="sxs-lookup"><span data-stu-id="ea0dd-105">To expose a service for use by callers, WCF requires a complete service description (represented by the <xref:System.ServiceModel.Description.ServiceDescription> class).</span></span> <span data-ttu-id="ea0dd-106">La classe <xref:System.ServiceModel.ServiceHost> crée un <xref:System.ServiceModel.Description.ServiceDescription> à partir des informations sur le type de service et la configuration, puis utilise cette description pour créer des objets <xref:System.ServiceModel.Dispatcher.ChannelDispatcher> pour chaque point de terminaison dans la description.</span><span class="sxs-lookup"><span data-stu-id="ea0dd-106">The <xref:System.ServiceModel.ServiceHost> class creates a <xref:System.ServiceModel.Description.ServiceDescription> from the service type and configuration information and then uses that description to create <xref:System.ServiceModel.Dispatcher.ChannelDispatcher> objects for each endpoint in the description.</span></span>  
  
 <span data-ttu-id="ea0dd-107">Utilisez un objet <xref:System.ServiceModel.ServiceHost> pour charger un service, configurer des points de terminaison, appliquer des paramètres de sécurité et démarrer des écouteurs pour gérer des demandes entrantes.</span><span class="sxs-lookup"><span data-stu-id="ea0dd-107">Use a <xref:System.ServiceModel.ServiceHost> object to load a service, configure endpoints, apply security settings, and start listeners to handle incoming requests.</span></span>  
  
   
  
## Examples  
 [!code-csharp[S_SelfHost#1](~/samples/snippets/csharp/VS_Snippets_CFX/s_selfhost/cs/wholeenchilada.cs#1)]
 [!code-vb[S_SelfHost#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_selfhost/vb/wholeenchilada.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ea0dd-108">Initialise une nouvelle instance de la classe <see cref="T:System.ServiceModel.ServiceHost" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea0dd-108">Initializes a new instance of the <see cref="T:System.ServiceModel.ServiceHost" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ServiceHost ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.ServiceHost.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ServiceHost();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ea0dd-109">Initialise une nouvelle instance de la classe <see cref="T:System.ServiceModel.ServiceHost" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea0dd-109">Initializes a new instance of the <see cref="T:System.ServiceModel.ServiceHost" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ea0dd-110">Deux constructeurs sont utilisés pour créer une instance de la classe <xref:System.ServiceModel.ServiceHost>.</span><span class="sxs-lookup"><span data-stu-id="ea0dd-110">There are two constructors used to create an instance of the <xref:System.ServiceModel.ServiceHost> class.</span></span> <span data-ttu-id="ea0dd-111">Utilisez le constructeur <xref:System.ServiceModel.ServiceHost.%23ctor%28System.Type%2CSystem.Uri%5B%5D%29> qui prend le type de service en tant que paramètre d'entrée, la plupart du temps.</span><span class="sxs-lookup"><span data-stu-id="ea0dd-111">Use the <xref:System.ServiceModel.ServiceHost.%23ctor%28System.Type%2CSystem.Uri%5B%5D%29> constructor which takes the service type as an input parameter, most of the time.</span></span> <span data-ttu-id="ea0dd-112">L'hôte peut utiliser ceci pour créer des services, selon vos besoins.</span><span class="sxs-lookup"><span data-stu-id="ea0dd-112">The host can use this to create new services as needed.</span></span> <span data-ttu-id="ea0dd-113">Utilisez le constructeur <xref:System.ServiceModel.ServiceHost.%23ctor%28System.Object%2CSystem.Uri%5B%5D%29> à la place uniquement lorsque vous souhaitez que l'hôte de service utilise une instance de singleton spécifique du service.</span><span class="sxs-lookup"><span data-stu-id="ea0dd-113">Use the <xref:System.ServiceModel.ServiceHost.%23ctor%28System.Object%2CSystem.Uri%5B%5D%29> constructor instead only when you want the service host to use a specific singleton instance of the service.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceHost (object singletonInstance, params Uri[] baseAddresses);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object singletonInstance, class System.Uri[] baseAddresses) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.ServiceHost.#ctor(System.Object,System.Uri[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (singletonInstance As Object, ParamArray baseAddresses As Uri())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ServiceHost(System::Object ^ singletonInstance, ... cli::array &lt;Uri ^&gt; ^ baseAddresses);" />
      <MemberSignature Language="F#" Value="new System.ServiceModel.ServiceHost : obj * Uri[] -&gt; System.ServiceModel.ServiceHost" Usage="new System.ServiceModel.ServiceHost (singletonInstance, baseAddresses)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="singletonInstance" Type="System.Object" />
        <Parameter Name="baseAddresses" Type="System.Uri[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="singletonInstance">
          <span data-ttu-id="ea0dd-114">Instance du service hébergé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea0dd-114">The instance of the hosted service.</span>
          </span>
        </param>
        <param name="baseAddresses">
          <span data-ttu-id="ea0dd-115">
            <see cref="T:System.Array" /> de type <see cref="T:System.Uri" /> qui contient les adresses de base pour le service hébergé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea0dd-115">An <see cref="T:System.Array" /> of type <see cref="T:System.Uri" /> that contains the base addresses for the hosted service.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ea0dd-116">Initialise une nouvelle instance de la classe <see cref="T:System.ServiceModel.ServiceHost" /> avec l'instance du service et ses adresses de base spécifiés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea0dd-116">Initializes a new instance of the <see cref="T:System.ServiceModel.ServiceHost" /> class with the instance of the service and its base addresses specified.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ea0dd-117">Utilisez ce constructeur comme alternative à l'implémentation d'un <xref:System.ServiceModel.Dispatcher.IInstanceContextInitializer?displayProperty=nameWithType> personnalisé lorsque vous souhaitez fournir une instance d'objet spécifique destinée à être utilisée par un service singleton.</span><span class="sxs-lookup"><span data-stu-id="ea0dd-117">Use this constructor as an alternative to implementing a custom <xref:System.ServiceModel.Dispatcher.IInstanceContextInitializer?displayProperty=nameWithType> when you want to provide a specific object instance for use by a singleton service.</span></span> <span data-ttu-id="ea0dd-118">Vous pouvez utiliser cette surcharge lorsque votre type d'implémentation de service est difficile à construire (par exemple, s'il n'implémente pas de constructeur public par défaut qui n'a pas de paramètres).</span><span class="sxs-lookup"><span data-stu-id="ea0dd-118">You may want to use this overload when your service implementation type is difficult to construct (for example, if it does not implement a default public constructor that has no parameters).</span></span>  
  
 <span data-ttu-id="ea0dd-119">Notez que lorsqu’un objet est fourni à cette surcharge, certaines fonctionnalités liées à la Windows Communication Foundation (WCF) comportement d’instanciation fonctionnent différemment.</span><span class="sxs-lookup"><span data-stu-id="ea0dd-119">Note that when an object is provided to this overload, some features related to the Windows Communication Foundation (WCF) instancing behavior work differently.</span></span> <span data-ttu-id="ea0dd-120">Par exemple, <xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A?displayProperty=nameWithType> n'a aucun effet lorsqu'une instance d'objet connue est fournie à l'aide de cette surcharge du constructeur.</span><span class="sxs-lookup"><span data-stu-id="ea0dd-120">For example, calling <xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A?displayProperty=nameWithType> have no effect when a well-known object instance is provided using this constructor overload.</span></span> <span data-ttu-id="ea0dd-121">De même, tout autre mécanisme de libération d'instance est ignoré.</span><span class="sxs-lookup"><span data-stu-id="ea0dd-121">Similarly, any other instance release mechanism is ignored.</span></span> <span data-ttu-id="ea0dd-122"><xref:System.ServiceModel.ServiceHost> se comporte systématiquement comme si la propriété <xref:System.ServiceModel.OperationBehaviorAttribute.ReleaseInstanceMode%2A?displayProperty=nameWithType> avait la valeur <xref:System.ServiceModel.ReleaseInstanceMode.None?displayProperty=nameWithType> pour toutes les opérations.</span><span class="sxs-lookup"><span data-stu-id="ea0dd-122">The <xref:System.ServiceModel.ServiceHost> always behaves as if the <xref:System.ServiceModel.OperationBehaviorAttribute.ReleaseInstanceMode%2A?displayProperty=nameWithType> property is set to <xref:System.ServiceModel.ReleaseInstanceMode.None?displayProperty=nameWithType> for all operations.</span></span>  
  
   
  
## Examples  
 [!code-csharp[S_UEServiceHost2#1](~/samples/snippets/csharp/VS_Snippets_CFX/s_ueservicehost2/cs/service.cs#1)]
 [!code-vb[S_UEServiceHost2#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_ueservicehost2/vb/service.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ea0dd-123">
            <paramref name="singletonInstance" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea0dd-123">
              <paramref name="singletonInstance" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceHost (Type serviceType, params Uri[] baseAddresses);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type serviceType, class System.Uri[] baseAddresses) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.ServiceHost.#ctor(System.Type,System.Uri[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (serviceType As Type, ParamArray baseAddresses As Uri())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ServiceHost(Type ^ serviceType, ... cli::array &lt;Uri ^&gt; ^ baseAddresses);" />
      <MemberSignature Language="F#" Value="new System.ServiceModel.ServiceHost : Type * Uri[] -&gt; System.ServiceModel.ServiceHost" Usage="new System.ServiceModel.ServiceHost (serviceType, baseAddresses)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
        <Parameter Name="baseAddresses" Type="System.Uri[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="serviceType">
          <span data-ttu-id="ea0dd-124">Type de service hébergé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea0dd-124">The type of hosted service.</span>
          </span>
        </param>
        <param name="baseAddresses">
          <span data-ttu-id="ea0dd-125">Tableau de type <see cref="T:System.Uri" /> qui contient les adresses de base pour le service hébergé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea0dd-125">An array of type <see cref="T:System.Uri" /> that contains the base addresses for the hosted service.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ea0dd-126">Initialise une nouvelle instance de <see cref="T:System.ServiceModel.ServiceHost" /> avec le type de service et ses adresses de base spécifiés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea0dd-126">Initializes a new instance of the <see cref="T:System.ServiceModel.ServiceHost" /> class with the type of service and its base addresses specified.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ea0dd-127">Utilisez ce constructeur lorsque vous avez le type de service et que vous pouvez créer des instances de ce type, le cas échéant, même lorsque vous avez besoin d'une instance singleton.</span><span class="sxs-lookup"><span data-stu-id="ea0dd-127">Use this constructor when you have the service type and you can create new instances of it when needed, even when you need a singleton instance.</span></span> <span data-ttu-id="ea0dd-128">Utilisez le constructeur <xref:System.ServiceModel.ServiceHost.%23ctor%28System.Object%2CSystem.Uri%5B%5D%29> à la place uniquement lorsque vous souhaitez que l'hôte de service utilise une instance de singleton spécifique du service.</span><span class="sxs-lookup"><span data-stu-id="ea0dd-128">Use the <xref:System.ServiceModel.ServiceHost.%23ctor%28System.Object%2CSystem.Uri%5B%5D%29> constructor instead only when you want the service host to use a specific singleton instance of the service.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ea0dd-129">Cet exemple illustre l'utilisation de la classe <xref:System.ServiceModel.ServiceHost> pour héberger un service Windows Communication Foundation :</span><span class="sxs-lookup"><span data-stu-id="ea0dd-129">This sample illustrates how to use the <xref:System.ServiceModel.ServiceHost> class to host a Windows Communication Foundation service:</span></span>  
  
 [!code-csharp[S_UEServiceHost#1](~/samples/snippets/csharp/VS_Snippets_CFX/s_ueservicehost/cs/service.cs#1)]
 [!code-vb[S_UEServiceHost#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_ueservicehost/vb/service.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ea0dd-130">
            <paramref name="serviceType" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea0dd-130">
              <paramref name="serviceType" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddServiceEndpoint">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ea0dd-131">Ajoute un point de terminaison de service au service hébergé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea0dd-131">Adds a service endpoint to the hosted service.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddServiceEndpoint">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Description.ServiceEndpoint AddServiceEndpoint (Type implementedContract, System.ServiceModel.Channels.Binding binding, string address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.ServiceModel.Description.ServiceEndpoint AddServiceEndpoint(class System.Type implementedContract, class System.ServiceModel.Channels.Binding binding, string address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.ServiceHost.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::Description::ServiceEndpoint ^ AddServiceEndpoint(Type ^ implementedContract, System::ServiceModel::Channels::Binding ^ binding, System::String ^ address);" />
      <MemberSignature Language="F#" Value="override this.AddServiceEndpoint : Type * System.ServiceModel.Channels.Binding * string -&gt; System.ServiceModel.Description.ServiceEndpoint" Usage="serviceHost.AddServiceEndpoint (implementedContract, binding, address)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Description.ServiceEndpoint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="implementedContract" Type="System.Type" />
        <Parameter Name="binding" Type="System.ServiceModel.Channels.Binding" />
        <Parameter Name="address" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="implementedContract">
          <span data-ttu-id="ea0dd-132">
            <see cref="T:System.Type" /> correspondant au contrat du point de terminaison ajouté.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea0dd-132">The <see cref="T:System.Type" /> of contract for the endpoint added.</span>
          </span>
        </param>
        <param name="binding">
          <span data-ttu-id="ea0dd-133">
            <see cref="T:System.ServiceModel.Channels.Binding" /> pour le point de terminaison ajouté.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea0dd-133">The <see cref="T:System.ServiceModel.Channels.Binding" /> for the endpoint added.</span>
          </span>
        </param>
        <param name="address">
          <span data-ttu-id="ea0dd-134">Adresse du point de terminaison ajouté.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea0dd-134">The address for the endpoint added.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ea0dd-135">Ajoute un point de terminaison de service au service hébergé avec un contrat, une liaison et une adresse de point de terminaison spécifiés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea0dd-135">Adds a service endpoint to the hosted service with a specified contract, binding, and endpoint address.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ea0dd-136">
            <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> ajouté au service hébergé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea0dd-136">The <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> added to the hosted service.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-csharp[S_UEServiceHost#3](~/samples/snippets/csharp/VS_Snippets_CFX/s_ueservicehost/cs/service.cs#3)]
 [!code-vb[S_UEServiceHost#3](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_ueservicehost/vb/service.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ea0dd-137">
            <paramref name="implementedContract" /> ou <paramref name="binding" /> ou <paramref name="address" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea0dd-137">
              <paramref name="implementedContract" /> or <paramref name="binding" /> or <paramref name="address" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="AddServiceEndpoint">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Description.ServiceEndpoint AddServiceEndpoint (Type implementedContract, System.ServiceModel.Channels.Binding binding, Uri address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.ServiceModel.Description.ServiceEndpoint AddServiceEndpoint(class System.Type implementedContract, class System.ServiceModel.Channels.Binding binding, class System.Uri address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.ServiceHost.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::Description::ServiceEndpoint ^ AddServiceEndpoint(Type ^ implementedContract, System::ServiceModel::Channels::Binding ^ binding, Uri ^ address);" />
      <MemberSignature Language="F#" Value="override this.AddServiceEndpoint : Type * System.ServiceModel.Channels.Binding * Uri -&gt; System.ServiceModel.Description.ServiceEndpoint" Usage="serviceHost.AddServiceEndpoint (implementedContract, binding, address)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Description.ServiceEndpoint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="implementedContract" Type="System.Type" />
        <Parameter Name="binding" Type="System.ServiceModel.Channels.Binding" />
        <Parameter Name="address" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="implementedContract">
          <span data-ttu-id="ea0dd-138">
            <see cref="T:System.Type" /> correspondant au contrat du point de terminaison ajouté.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea0dd-138">The <see cref="T:System.Type" /> of contract for the endpoint added.</span>
          </span>
        </param>
        <param name="binding">
          <span data-ttu-id="ea0dd-139">
            <see cref="T:System.ServiceModel.Channels.Binding" /> pour le point de terminaison ajouté.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea0dd-139">The <see cref="T:System.ServiceModel.Channels.Binding" /> for the endpoint added.</span>
          </span>
        </param>
        <param name="address">
          <span data-ttu-id="ea0dd-140">
            <see cref="T:System.Uri" /> contenant l'adresse du point de terminaison ajouté.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea0dd-140">The <see cref="T:System.Uri" /> that contains the address for the endpoint added.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ea0dd-141">Ajoute un point de terminaison de service au service hébergé avec un contrat, une liaison et un URI qui contient l’adresse de point de terminaison spécifiés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea0dd-141">Adds a service endpoint to the hosted service with a specified contract, binding, and URI that contains the endpoint address.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ea0dd-142">
            <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> ajouté au service hébergé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea0dd-142">The <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> added to the hosted service.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-csharp[S_UEServiceHost#4](~/samples/snippets/csharp/VS_Snippets_CFX/s_ueservicehost/cs/service.cs#4)]
 [!code-vb[S_UEServiceHost#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_ueservicehost/vb/service.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ea0dd-143">
            <paramref name="implementedContract" /> ou <paramref name="binding" /> ou <paramref name="address" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea0dd-143">
              <paramref name="implementedContract" /> or <paramref name="binding" /> or <paramref name="address" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="AddServiceEndpoint">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Description.ServiceEndpoint AddServiceEndpoint (Type implementedContract, System.ServiceModel.Channels.Binding binding, string address, Uri listenUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.ServiceModel.Description.ServiceEndpoint AddServiceEndpoint(class System.Type implementedContract, class System.ServiceModel.Channels.Binding binding, string address, class System.Uri listenUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.ServiceHost.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.String,System.Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::Description::ServiceEndpoint ^ AddServiceEndpoint(Type ^ implementedContract, System::ServiceModel::Channels::Binding ^ binding, System::String ^ address, Uri ^ listenUri);" />
      <MemberSignature Language="F#" Value="override this.AddServiceEndpoint : Type * System.ServiceModel.Channels.Binding * string * Uri -&gt; System.ServiceModel.Description.ServiceEndpoint" Usage="serviceHost.AddServiceEndpoint (implementedContract, binding, address, listenUri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Description.ServiceEndpoint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="implementedContract" Type="System.Type" />
        <Parameter Name="binding" Type="System.ServiceModel.Channels.Binding" />
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="listenUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="implementedContract">
          <span data-ttu-id="ea0dd-144">
            <see cref="T:System.Type" /> correspondant au contrat du point de terminaison ajouté.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea0dd-144">The <see cref="T:System.Type" /> of contract for the endpoint added.</span>
          </span>
        </param>
        <param name="binding">
          <span data-ttu-id="ea0dd-145">
            <see cref="T:System.ServiceModel.Channels.Binding" /> pour le point de terminaison ajouté.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea0dd-145">The <see cref="T:System.ServiceModel.Channels.Binding" /> for the endpoint added.</span>
          </span>
        </param>
        <param name="address">
          <span data-ttu-id="ea0dd-146">Adresse de point de terminaison pour le service.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea0dd-146">The endpoint address for the service.</span>
          </span>
        </param>
        <param name="listenUri">
          <span data-ttu-id="ea0dd-147">
            <see cref="T:System.Uri" /> sur lequel les points de terminaison de service peuvent écouter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea0dd-147">The <see cref="T:System.Uri" /> on which the service endpoints can listen.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ea0dd-148">Ajoute un point de terminaison de service au service hébergé avec un contrat spécifié, une liaison, une adresse de point de terminaison et un URI sur lequel le service écoute.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea0dd-148">Adds a service endpoint to the hosted service with a specified contract, binding, an endpoint address, and a URI on which the service listens.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ea0dd-149">
            <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> ajouté au service hébergé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea0dd-149">The <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> added to the hosted service.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ea0dd-150">Utilisez cette version de la méthode lorsque plusieurs de vos points de terminaison doivent écouter sur le même URI spécifié.</span><span class="sxs-lookup"><span data-stu-id="ea0dd-150">Use this version of the method when you have multiple endpoints that need to listen on the same, specified URI.</span></span>  
  
   
  
## Examples  
 [!code-csharp[S_UEServiceHost#5](~/samples/snippets/csharp/VS_Snippets_CFX/s_ueservicehost/cs/service.cs#5)]
 [!code-vb[S_UEServiceHost#5](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_ueservicehost/vb/service.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ea0dd-151">
            <paramref name="implementedContract" /> ou <paramref name="binding" /> ou <paramref name="address" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea0dd-151">
              <paramref name="implementedContract" /> or <paramref name="binding" /> or <paramref name="address" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="AddServiceEndpoint">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Description.ServiceEndpoint AddServiceEndpoint (Type implementedContract, System.ServiceModel.Channels.Binding binding, Uri address, Uri listenUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.ServiceModel.Description.ServiceEndpoint AddServiceEndpoint(class System.Type implementedContract, class System.ServiceModel.Channels.Binding binding, class System.Uri address, class System.Uri listenUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.ServiceHost.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.Uri,System.Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::Description::ServiceEndpoint ^ AddServiceEndpoint(Type ^ implementedContract, System::ServiceModel::Channels::Binding ^ binding, Uri ^ address, Uri ^ listenUri);" />
      <MemberSignature Language="F#" Value="override this.AddServiceEndpoint : Type * System.ServiceModel.Channels.Binding * Uri * Uri -&gt; System.ServiceModel.Description.ServiceEndpoint" Usage="serviceHost.AddServiceEndpoint (implementedContract, binding, address, listenUri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Description.ServiceEndpoint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="implementedContract" Type="System.Type" />
        <Parameter Name="binding" Type="System.ServiceModel.Channels.Binding" />
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="listenUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="implementedContract">
          <span data-ttu-id="ea0dd-152">
            <see cref="T:System.Type" /> correspondant au contrat du point de terminaison ajouté.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea0dd-152">The <see cref="T:System.Type" /> of contract for the endpoint added.</span>
          </span>
        </param>
        <param name="binding">
          <span data-ttu-id="ea0dd-153">
            <see cref="T:System.ServiceModel.Channels.Binding" /> pour le point de terminaison ajouté.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea0dd-153">The <see cref="T:System.ServiceModel.Channels.Binding" /> for the endpoint added.</span>
          </span>
        </param>
        <param name="address">
          <span data-ttu-id="ea0dd-154">
            <see cref="T:System.Uri" /> contenant l'adresse du point de terminaison ajouté.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea0dd-154">The <see cref="T:System.Uri" /> that contains the address for the endpoint added.</span>
          </span>
        </param>
        <param name="listenUri">
          <span data-ttu-id="ea0dd-155">
            <see cref="T:System.Uri" /> sur lequel les points de terminaison de service peuvent écouter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea0dd-155">The <see cref="T:System.Uri" /> on which the service endpoints can listen.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ea0dd-156">Ajoute un point de terminaison de service au service hébergé avec un contrat spécifié, une liaison, un URI qui contient l’adresse de point de terminaison et un URI sur lequel le service écoute.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea0dd-156">Adds a service endpoint to the hosted service with a specified contract, binding, a URI that contains the endpoint address, and a URI on which the service listens.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ea0dd-157">
            <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> ajouté au service hébergé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea0dd-157">The <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> added to the hosted service.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ea0dd-158">Utilisez cette version de la méthode lorsque plusieurs de vos points de terminaison doivent écouter sur le même URI spécifié.</span><span class="sxs-lookup"><span data-stu-id="ea0dd-158">Use this version of the method when you have multiple endpoints that need to listen on the same, specified URI.</span></span>  
  
   
  
## Examples  
 [!code-csharp[S_UEServiceHost#6](~/samples/snippets/csharp/VS_Snippets_CFX/s_ueservicehost/cs/service.cs#6)]
 [!code-vb[S_UEServiceHost#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_ueservicehost/vb/service.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ea0dd-159">
            <paramref name="implementedContract" /> ou <paramref name="binding" /> ou <paramref name="address" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea0dd-159">
              <paramref name="implementedContract" /> or <paramref name="binding" /> or <paramref name="address" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="ea0dd-160">Les contrats ne sont pas initialisés ou les clés de contrat sont introuvables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea0dd-160">The contracts are not initialized or the contract keys cannot be found.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ApplyConfiguration">
      <MemberSignature Language="C#" Value="protected override void ApplyConfiguration ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void ApplyConfiguration() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.ServiceHost.ApplyConfiguration" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub ApplyConfiguration ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void ApplyConfiguration();" />
      <MemberSignature Language="F#" Value="override this.ApplyConfiguration : unit -&gt; unit" Usage="serviceHost.ApplyConfiguration " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ea0dd-161">Charge la description du service à partir du fichier de configuration et les applique au runtime en cours de construction.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea0dd-161">Loads the service description from the configuration file and applies it to the runtime being constructed.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDescription">
      <MemberSignature Language="C#" Value="protected override System.ServiceModel.Description.ServiceDescription CreateDescription (out System.Collections.Generic.IDictionary&lt;string,System.ServiceModel.Description.ContractDescription&gt; implementedContracts);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.ServiceModel.Description.ServiceDescription CreateDescription([out] class System.Collections.Generic.IDictionary`2&lt;string, class System.ServiceModel.Description.ContractDescription&gt;&amp; implementedContracts) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.ServiceHost.CreateDescription(System.Collections.Generic.IDictionary{System.String,System.ServiceModel.Description.ContractDescription}@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateDescription (ByRef implementedContracts As IDictionary(Of String, ContractDescription)) As ServiceDescription" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::ServiceModel::Description::ServiceDescription ^ CreateDescription([Runtime::InteropServices::Out] System::Collections::Generic::IDictionary&lt;System::String ^, System::ServiceModel::Description::ContractDescription ^&gt; ^ % implementedContracts);" />
      <MemberSignature Language="F#" Value="override this.CreateDescription :  -&gt; System.ServiceModel.Description.ServiceDescription" Usage="serviceHost.CreateDescription implementedContracts" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Description.ServiceDescription</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="implementedContracts" Type="System.Collections.Generic.IDictionary&lt;System.String,System.ServiceModel.Description.ContractDescription&gt;&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="implementedContracts">
          <span data-ttu-id="ea0dd-162">
            <see cref="T:System.Collections.Generic.IDictionary`2" /> avec les paires de clés de type (<see cref="T:System.String" />, <see cref="T:System.ServiceModel.Description.ContractDescription" />) qui contient les contrats de clé du service hébergé qui ont été implémentés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea0dd-162">The <see cref="T:System.Collections.Generic.IDictionary`2" /> with key pairs of type (<see cref="T:System.String" />, <see cref="T:System.ServiceModel.Description.ContractDescription" />) that contains the keyed-contracts of the hosted service that have been implemented.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ea0dd-163">Crée une description du service hébergé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea0dd-163">Creates a description of the service hosted.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ea0dd-164">
            <see cref="T:System.ServiceModel.Description.ServiceDescription" /> du service hébergé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea0dd-164">A <see cref="T:System.ServiceModel.Description.ServiceDescription" /> of the hosted service.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ea0dd-165">Cette méthode est utilisée pour construire des descriptions de contrat à partir de modèles de programmation personnalisés.</span><span class="sxs-lookup"><span data-stu-id="ea0dd-165">This method is used to construct contract descriptions from customized programming models.</span></span> <span data-ttu-id="ea0dd-166">Substituez la méthode de classe de base correspondante, <xref:System.ServiceModel.ServiceHostBase.CreateDescription%28System.Collections.Generic.IDictionary%7BSystem.String%2CSystem.ServiceModel.Description.ContractDescription%7D%40%29>, pour implémenter le modèle personnalisé.</span><span class="sxs-lookup"><span data-stu-id="ea0dd-166">Override the corresponding base class method, <xref:System.ServiceModel.ServiceHostBase.CreateDescription%28System.Collections.Generic.IDictionary%7BSystem.String%2CSystem.ServiceModel.Description.ContractDescription%7D%40%29>, to implement the customized model.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="ea0dd-167">Le type de service hébergé a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea0dd-167">The type of service hosted is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="InitializeDescription">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ea0dd-168">Initialise une description du service hébergé basée sur son type ou son instance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea0dd-168">Initializes a description of the service hosted based on its type or instance.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ea0dd-169">Cette méthode supprime la spécification pour passer les adresses de base dans le cadre de <xref:System.ServiceModel.ServiceHost.%23ctor%2A>.</span><span class="sxs-lookup"><span data-stu-id="ea0dd-169">This method removes the requirement for passing base addresses as part of <xref:System.ServiceModel.ServiceHost.%23ctor%2A>.</span></span> <span data-ttu-id="ea0dd-170">Les classes qui héritent de <xref:System.ServiceModel.ServiceHost> peuvent appeler <xref:System.ServiceModel.ServiceHost.%23ctor%2A>, puis peuvent appeler l'une des <xref:System.ServiceModel.ServiceHost.InitializeDescription%2A> lorsqu'une adresse de base est disponible.</span><span class="sxs-lookup"><span data-stu-id="ea0dd-170">Classes that inherit from <xref:System.ServiceModel.ServiceHost> can call <xref:System.ServiceModel.ServiceHost.%23ctor%2A> and then can call one of the <xref:System.ServiceModel.ServiceHost.InitializeDescription%2A> when a base address is available.</span></span> <span data-ttu-id="ea0dd-171">C'est ainsi que le Service Model Metadata Utility Tool (Svcutil.exe) est implémenté.</span><span class="sxs-lookup"><span data-stu-id="ea0dd-171">This is how the Service Model Metadata Utility Tool (Svcutil.exe) is implemented.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="InitializeDescription">
      <MemberSignature Language="C#" Value="protected void InitializeDescription (object singletonInstance, System.ServiceModel.UriSchemeKeyedCollection baseAddresses);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InitializeDescription(object singletonInstance, class System.ServiceModel.UriSchemeKeyedCollection baseAddresses) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.ServiceHost.InitializeDescription(System.Object,System.ServiceModel.UriSchemeKeyedCollection)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub InitializeDescription (singletonInstance As Object, baseAddresses As UriSchemeKeyedCollection)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void InitializeDescription(System::Object ^ singletonInstance, System::ServiceModel::UriSchemeKeyedCollection ^ baseAddresses);" />
      <MemberSignature Language="F#" Value="override this.InitializeDescription : obj * System.ServiceModel.UriSchemeKeyedCollection -&gt; unit" Usage="serviceHost.InitializeDescription (singletonInstance, baseAddresses)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="singletonInstance" Type="System.Object" />
        <Parameter Name="baseAddresses" Type="System.ServiceModel.UriSchemeKeyedCollection" />
      </Parameters>
      <Docs>
        <param name="singletonInstance">
          <span data-ttu-id="ea0dd-172">Instance du service hébergé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea0dd-172">The instance of the hosted service.</span>
          </span>
        </param>
        <param name="baseAddresses">
          <span data-ttu-id="ea0dd-173">Le <see cref="T:System.ServiceModel.UriSchemeKeyedCollection" /> qui contient les adresses de base pour le service hébergé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea0dd-173">The <see cref="T:System.ServiceModel.UriSchemeKeyedCollection" /> that contains the base addresses for the hosted service.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ea0dd-174">Initialise une description du service hébergé basée sur son instance et ses adresses de base spécifiées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea0dd-174">Initializes a description of the service hosted based on its instance and specified base addresses.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ea0dd-175">
            <paramref name="singletonInstance" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea0dd-175">
              <paramref name="singletonInstance" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="InitializeDescription">
      <MemberSignature Language="C#" Value="protected void InitializeDescription (Type serviceType, System.ServiceModel.UriSchemeKeyedCollection baseAddresses);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InitializeDescription(class System.Type serviceType, class System.ServiceModel.UriSchemeKeyedCollection baseAddresses) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.ServiceHost.InitializeDescription(System.Type,System.ServiceModel.UriSchemeKeyedCollection)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub InitializeDescription (serviceType As Type, baseAddresses As UriSchemeKeyedCollection)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void InitializeDescription(Type ^ serviceType, System::ServiceModel::UriSchemeKeyedCollection ^ baseAddresses);" />
      <MemberSignature Language="F#" Value="override this.InitializeDescription : Type * System.ServiceModel.UriSchemeKeyedCollection -&gt; unit" Usage="serviceHost.InitializeDescription (serviceType, baseAddresses)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
        <Parameter Name="baseAddresses" Type="System.ServiceModel.UriSchemeKeyedCollection" />
      </Parameters>
      <Docs>
        <param name="serviceType">
          <span data-ttu-id="ea0dd-176">Le <see cref="T:System.Type" /> de service hébergé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea0dd-176">The <see cref="T:System.Type" /> of service hosted.</span>
          </span>
        </param>
        <param name="baseAddresses">
          <span data-ttu-id="ea0dd-177">Le <see cref="T:System.ServiceModel.UriSchemeKeyedCollection" /> qui contient les adresses de base pour le service hébergé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea0dd-177">The <see cref="T:System.ServiceModel.UriSchemeKeyedCollection" /> that contains the base addresses for the hosted service.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ea0dd-178">Initialise une description du service hébergé basée sur son type et ses adresses de base spécifiées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea0dd-178">Initializes a description of the service hosted based on its type and specified base addresses.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ea0dd-179">
            <paramref name="serviceType" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea0dd-179">
              <paramref name="serviceType" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="OnClosed">
      <MemberSignature Language="C#" Value="protected override void OnClosed ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnClosed() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.ServiceHost.OnClosed" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnClosed ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnClosed();" />
      <MemberSignature Language="F#" Value="override this.OnClosed : unit -&gt; unit" Usage="serviceHost.OnClosed " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ea0dd-180">Supprime les services supprimables hébergés lorsque l'hôte de service est fermé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea0dd-180">Disposes of disposable services that are being hosted when the service host is closed.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ea0dd-181">Lors de la substitution du <xref:System.ServiceModel.ServiceHost.OnClosed%2A> (méthode), vous devez vérifier la base. OnClosed méthode est appelée, même si une exception se produit.</span><span class="sxs-lookup"><span data-stu-id="ea0dd-181">When overriding the <xref:System.ServiceModel.ServiceHost.OnClosed%2A> method you must ensure the base.OnClosed method is called, even if an exception occurs.</span></span> <span data-ttu-id="ea0dd-182">Le code suivant illustre comment effectuer cette opération.</span><span class="sxs-lookup"><span data-stu-id="ea0dd-182">The following code illustrates how to do this.</span></span>  
  
```  
protected override void OnClosed()  
{  
    try  
    {  
        if (FaultFlagService.faultFlag == ThrowDuring.OnClosed)  
        {  
            FaultFlagService.faultFlag = ThrowDuring.Never;  
            throw new ServiceActivationException("Faulting the service because FaultFlagService.faultFlag = ThrowDuring.OnClosed");  
        }  
    }  
    finally  
    {  
        base.OnClosed();  
    }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SingletonInstance">
      <MemberSignature Language="C#" Value="public object SingletonInstance { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SingletonInstance" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.ServiceHost.SingletonInstance" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SingletonInstance As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ SingletonInstance { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SingletonInstance : obj" Usage="System.ServiceModel.ServiceHost.SingletonInstance" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ea0dd-183">Obtient l'instance singleton du service hébergé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea0dd-183">Gets the singleton instance of the hosted service.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ea0dd-184">Objet du service hébergé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea0dd-184">The hosted service object.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ea0dd-185">Utilisez le constructeur <xref:System.ServiceModel.ServiceHost.%23ctor%28System.Object%2CSystem.Uri%5B%5D%29> pour initialiser une instance de singleton du service à héberger lorsque vous souhaitez contrôler l'instance du service utilisé.</span><span class="sxs-lookup"><span data-stu-id="ea0dd-185">Use the <xref:System.ServiceModel.ServiceHost.%23ctor%28System.Object%2CSystem.Uri%5B%5D%29> constructor to initialize a singleton instance of the service to be hosted when you want to control the instance of the service that is used.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>