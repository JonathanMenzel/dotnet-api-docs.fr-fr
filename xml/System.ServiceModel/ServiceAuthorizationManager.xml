<Type Name="ServiceAuthorizationManager" FullName="System.ServiceModel.ServiceAuthorizationManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="507ef7fb282a367be5aaaddbe4806c43a6bf0204" />
    <Meta Name="ms.sourcegitcommit" Value="3907f9a5780957d9c85af2e54c0a5bc2a5bf19ab" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="06/14/2018" />
    <Meta Name="ms.locfileid" Value="34316046" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ServiceAuthorizationManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ServiceAuthorizationManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.ServiceAuthorizationManager" />
  <TypeSignature Language="VB.NET" Value="Public Class ServiceAuthorizationManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class ServiceAuthorizationManager" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Assure le contrôle d'accès des autorisations pour les opérations de service.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette classe est chargée d'évaluer toutes les stratégies (règles établissant ce qu'un utilisateur est autorisé à faire), de comparer les stratégies aux revendications d'un client, d'attribuer la valeur <xref:System.IdentityModel.Policy.AuthorizationContext> au <xref:System.ServiceModel.ServiceSecurityContext> résultant et de communiquer la décision d'autorisation autorisant ou refusant l'accès à une opération de service donnée par un appelant.  
  
 Le <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> méthode est appelée chaque fois qu’une tentative d’accéder à une ressource est effectuée par l’infrastructure Windows Communication Foundation (WCF). La méthode retourne la valeur `true` ou `false` afin d'autoriser ou de refuser l'accès, respectivement.  
  
 Le <xref:System.ServiceModel.ServiceAuthorizationManager> fait partie de WCF*modèle d’identité* infrastructure. Le modèle d'identité vous permet de créer des stratégies et schémas d'autorisation personnalisés. Pour plus d’informations sur le fonctionnement du modèle d’identité, consultez [la gestion des revendications et autorisation avec le modèle d’identité](~/docs/framework/wcf/feature-details/managing-claims-and-authorization-with-the-identity-model.md).  
  
## <a name="custom-authorization"></a>Autorisation personnalisée  
 Cette classe n'effectue pas de vérification des autorisations et autorise les utilisateurs à accéder à toutes les opérations de service. Si vous voulez limiter les autorisations, vous devez créer un gestionnaire d'autorisations personnalisé chargé de vérifier les stratégies personnalisées. Pour ce faire, héritez à partir de cette classe et remplacez la méthode <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A>. Spécifiez l'instance de la classe dérivée par le biais de la propriété <xref:System.ServiceModel.Dispatcher.DispatchRuntime.ServiceAuthorizationManager%2A>.  
  
 Dans <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A>, l'application peut utiliser l'objet <xref:System.ServiceModel.OperationContext> pour accéder à l'identité de l'appelant (<xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A>).  
  
 La propriété <xref:System.ServiceModel.OperationContext.IncomingMessageHeaders%2A>, qui retourne un objet <xref:System.ServiceModel.Channels.MessageHeaders>, permet à l'application d'accéder au service (<xref:System.ServiceModel.Channels.MessageHeaders.To%2A>) et à l'opération (<xref:System.ServiceModel.Channels.MessageHeaders.Action%2A>).  
  
 La propriété <xref:System.ServiceModel.OperationContext.RequestContext%2A>, qui retourne un objet <xref:System.ServiceModel.Channels.RequestContext> permet à l'application d'accéder à l'intégralité du message de demande (<xref:System.ServiceModel.Channels.RequestContext.RequestMessage%2A>) et de prendre la décision d'autorisation en conséquence.  
  
 Pour obtenir un exemple, consultez [Comment : créer un gestionnaire d’autorisation personnalisé pour un Service](~/docs/framework/wcf/extending/how-to-create-a-custom-authorization-manager-for-a-service.md).  
  
 Pour créer des stratégies d'autorisation personnalisées, implémentez la classe <xref:System.IdentityModel.Policy.IAuthorizationPolicy>.  Pour obtenir un exemple, consultez [Comment : créer une stratégie d’autorisation personnalisée](~/docs/framework/wcf/extending/how-to-create-a-custom-authorization-policy.md).  
  
 Pour créer une revendication personnalisée, utilisez la classe <xref:System.IdentityModel.Claims.Claim>.  Pour obtenir un exemple, consultez [Comment : créer une revendication personnalisée](~/docs/framework/wcf/extending/how-to-create-a-custom-claim.md). Pour comparer des revendications personnalisées, vous devez comparer des revendications, comme indiqué dans [Comment : comparer des revendications](~/docs/framework/wcf/extending/how-to-compare-claims.md).  
  
 Pour plus d’informations, consultez [personnalisé autorisation](~/docs/framework/wcf/extending/custom-authorization.md).  
  
 Vous pouvez définir le type d’un gestionnaire d’autorisations personnalisé à l’aide de la [ &lt;serviceAuthorization&gt; ](~/docs/framework/configure-apps/file-schema/wcf/serviceauthorization-element.md) dans un fichier de configuration d’application cliente.  
  
   
  
## Examples  
 L'exemple suivant montre une classe appelée `MyServiceAuthorizationManager` qui hérite de <xref:System.ServiceModel.ServiceAuthorizationManager> et substitue la méthode <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A>.  
  
 [!code-csharp[c_CustomAuthMgr#2](~/samples/snippets/csharp/VS_Snippets_CFX/c_customauthmgr/cs/c_customauthmgr.cs#2)]
 [!code-vb[c_CustomAuthMgr#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/c_customauthmgr/vb/c_customauthmgr.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IdentityModel.Claims.ClaimSet" />
    <altmember cref="T:System.IdentityModel.Claims.Claim" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceAuthorizationManager ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.ServiceAuthorizationManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ServiceAuthorizationManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ServiceModel.ServiceAuthorizationManager" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CheckAccess">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Vérifie l'autorisation pour le contexte d'opération et le message facultatif donnés.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CheckAccess">
      <MemberSignature Language="C#" Value="public virtual bool CheckAccess (System.ServiceModel.OperationContext operationContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CheckAccess(class System.ServiceModel.OperationContext operationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.ServiceAuthorizationManager.CheckAccess(System.ServiceModel.OperationContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CheckAccess(System::ServiceModel::OperationContext ^ operationContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationContext" Type="System.ServiceModel.OperationContext" />
      </Parameters>
      <Docs>
        <param name="operationContext">
          <see cref="T:System.ServiceModel.OperationContext" />.</param>
        <summary>Vérifie l'autorisation pour le contexte d'opération donné.</summary>
        <returns>
          <see langword="true" /> si l'accès est accordé ; sinon <see langword="false" />. La valeur par défaut est <see langword="true" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En général, les applications doivent substituer <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> au lieu de cette méthode.  
  
 Substituez <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccess%2A> si l'application associe ou introduit un jeu différent de stratégies pour le <xref:System.ServiceModel.ServiceSecurityContext> résultant ou fournit un modèle d'évaluation (chaînage) de la stratégie différent.  
  
 Cette méthode est chargée d'appeler <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A>.  
  
   
  
## Examples  
 Le code suivant montre comment substituer cette méthode afin d’appliquer des exigences de contrôle d’accès personnalisées.  
  
 [!code-csharp[c_Federation#1](~/samples/snippets/csharp/VS_Snippets_CFX/c_federation/cs/source.cs#1)]
 [!code-vb[c_Federation#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/c_federation/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckAccess">
      <MemberSignature Language="C#" Value="public virtual bool CheckAccess (System.ServiceModel.OperationContext operationContext, ref System.ServiceModel.Channels.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CheckAccess(class System.ServiceModel.OperationContext operationContext, class System.ServiceModel.Channels.Message&amp; message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.ServiceAuthorizationManager.CheckAccess(System.ServiceModel.OperationContext,System.ServiceModel.Channels.Message@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CheckAccess(System::ServiceModel::OperationContext ^ operationContext, System::ServiceModel::Channels::Message ^ % message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationContext" Type="System.ServiceModel.OperationContext" />
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="operationContext">
          <see cref="T:System.ServiceModel.OperationContext" />.</param>
        <param name="message">
          <see cref="T:System.ServiceModel.Channels.Message" /> à examiner pour déterminer l'autorisation.</param>
        <summary>Vérifie l'autorisation pour le contexte d'opération donné lorsque l'accès à un message est requis.</summary>
        <returns>
          <see langword="true" /> si l'accès est accordé ; sinon <see langword="false" />. La valeur par défaut est <see langword="true" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En général, les applications doivent substituer <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> au lieu de cette méthode, qui ne doit être utilisée que si la décision d'autorisation dépend du corps du message. En raison des problèmes de performances, essayez de reconcevoir si possible votre application afin que la décision d'autorisation ne nécessite pas l'accès au corps du message.  
  
 Substituez cette méthode si l'application associe ou introduit un jeu différent de stratégies pour les <xref:System.ServiceModel.ServiceSecurityContext> et <xref:System.ServiceModel.Channels.Message> résultants ou fournit un modèle d'évaluation (chaînage) de la stratégie différent.  
  
 Cette méthode est chargée d'appeler <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A>.  
  
   
  
## Examples  
 Le code suivant montre comment substituer cette méthode afin d’appliquer des exigences de contrôle d’accès personnalisées qui requièrent l’accès au corps du message.  
  
 [!code-csharp[c_Federation#6](~/samples/snippets/csharp/VS_Snippets_CFX/c_federation/cs/source.cs#6)]
 [!code-vb[c_Federation#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/c_federation/vb/source.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckAccessCore">
      <MemberSignature Language="C#" Value="protected virtual bool CheckAccessCore (System.ServiceModel.OperationContext operationContext);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool CheckAccessCore(class System.ServiceModel.OperationContext operationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore(System.ServiceModel.OperationContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool CheckAccessCore(System::ServiceModel::OperationContext ^ operationContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationContext" Type="System.ServiceModel.OperationContext" />
      </Parameters>
      <Docs>
        <param name="operationContext">
          <see cref="T:System.ServiceModel.OperationContext" /> de la demande d'autorisation actuelle.</param>
        <summary>Vérifie l'autorisation pour le contexte d'opération donné selon l'évaluation de la stratégie par défaut.</summary>
        <returns>
          <see langword="true" /> si l'accès est accordé ; sinon <see langword="false" />. La valeur par défaut est <see langword="true" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A> est généralement le résultat de l'évaluation de la stratégie par défaut.  
  
 Substituez cette méthode pour proposer des décisions d'autorisation personnalisées.  
  
 Cette méthode peut être utilisée pour prendre des décisions d'autorisation en fonction d'ensembles de revendications déduits sur la base de jetons entrants ou ajoutés par le biais de stratégies d'autorisation externes. Elle peut également prendre des décisions d'autorisation d'après les propriétés du message entrant : par exemple, l'en-tête de l'action.  
  
 Dans cette méthode, l'application peut utiliser le paramètre `operationContext` pour accéder à l'identité de l'appelant (<xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A>). En retournant l'objet <xref:System.ServiceModel.Channels.RequestContext> à partir de la propriété <xref:System.ServiceModel.OperationContext.RequestContext%2A>, l'application peut accéder à l'intégralité du message de demande (<xref:System.ServiceModel.Channels.RequestContext.RequestMessage%2A>). En retournant l'objet <xref:System.ServiceModel.Channels.MessageHeaders> à partir de la propriété <xref:System.ServiceModel.OperationContext.IncomingMessageHeaders%2A>, l'application peut accéder à l'URL de service (<xref:System.ServiceModel.Channels.MessageHeaders.To%2A>) et à l'opération (<xref:System.ServiceModel.Channels.MessageHeaders.Action%2A>). Ces informations permettent à l'application de prendre la décision d'autorisation.  
  
 Les revendications d'un utilisateur figurent dans l'<xref:System.IdentityModel.Claims.ClaimSet> retourné par la propriété <xref:System.IdentityModel.Policy.AuthorizationContext.ClaimSets%2A> du `AuthorizationContext`. Le `AuthorizationContext` est retourné par la propriété <xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A> de la classe <xref:System.ServiceModel.OperationContext>.  
  
   
  
## Examples  
 L'exemple suivant illustre une substitution de la méthode <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A>.  
  
 [!code-csharp[c_CustomAuthMgr#6](~/samples/snippets/csharp/VS_Snippets_CFX/c_customauthmgr/cs/c_customauthmgr.cs#6)]
 [!code-vb[c_CustomAuthMgr#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/c_customauthmgr/vb/c_customauthmgr.vb#6)]  
  
 Pour un autre exemple, consultez [Comment : créer un gestionnaire d’autorisation personnalisé pour un Service](~/docs/framework/wcf/extending/how-to-create-a-custom-authorization-manager-for-a-service.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAuthorizationPolicies">
      <MemberSignature Language="C#" Value="protected virtual System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IdentityModel.Policy.IAuthorizationPolicy&gt; GetAuthorizationPolicies (System.ServiceModel.OperationContext operationContext);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.IdentityModel.Policy.IAuthorizationPolicy&gt; GetAuthorizationPolicies(class System.ServiceModel.OperationContext operationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.ServiceAuthorizationManager.GetAuthorizationPolicies(System.ServiceModel.OperationContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Collections::ObjectModel::ReadOnlyCollection&lt;System::IdentityModel::Policy::IAuthorizationPolicy ^&gt; ^ GetAuthorizationPolicies(System::ServiceModel::OperationContext ^ operationContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IdentityModel.Policy.IAuthorizationPolicy&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationContext" Type="System.ServiceModel.OperationContext" />
      </Parameters>
      <Docs>
        <param name="operationContext">
          <see cref="T:System.ServiceModel.OperationContext" /> de la demande d'autorisation actuelle.</param>
        <summary>Obtient l'ensemble des stratégies intervenant dans l'évaluation de la stratégie.</summary>
        <returns>
          <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> de type <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’implémentation de Windows Communication Foundation (WCF) fournit un ensemble par défaut de stratégies d’autorisation. Celles-ci incluent le jeton principal qui contient les informations d'identification du demandeur et tous les jetons de prise en charge, les jetons de transport et les stratégies externes, si spécifiés.  
  
 Vous pouvez substituer cette implémentation et fournir un autre ensemble de stratégies.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>