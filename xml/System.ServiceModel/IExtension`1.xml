<Type Name="IExtension&lt;T&gt;" FullName="System.ServiceModel.IExtension&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3cd9ef7ba62ca0261201ace92772b919330c31e3" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IExtension&lt;T&gt; where T : IExtensibleObject&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IExtension`1&lt;(class System.ServiceModel.IExtensibleObject`1&lt;!T&gt;) T&gt;" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.IExtension`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IExtension(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA; where T : IExtensibleObject&lt;T&gt;public interface class IExtension" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <InterfaceName>System.ServiceModel.IExtensibleObject&lt;T&gt;</InterfaceName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="T">
      <span data-ttu-id="b0c17-101">Objet qui participe au comportement personnalisé.</span>
      <span class="sxs-lookup">
        <span data-stu-id="b0c17-101">The object that participates in the custom behavior.</span>
      </span>
    </typeparam>
    <summary>
      <span data-ttu-id="b0c17-102">Permet à un objet d'étendre un autre objet par le biais de l'agrégation.</span>
      <span class="sxs-lookup">
        <span data-stu-id="b0c17-102">Enables an object to extend another object through aggregation.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[indigo2](~/includes/indigo2-md.md)]<span data-ttu-id="b0c17-103"> vous permet d'étendre des objets <xref:System.ServiceModel.IExtensibleObject%601?displayProperty=nameWithType> (classes <xref:System.ServiceModel.IContextChannel?displayProperty=nameWithType>, <xref:System.ServiceModel.ServiceHost?displayProperty=nameWithType>, <xref:System.ServiceModel.InstanceContext?displayProperty=nameWithType>et <xref:System.ServiceModel.OperationContext?displayProperty=nameWithType>) en ajoutant un nouvel état ou comportement en utilisant son modèle d'objet extensible.</span><span class="sxs-lookup"><span data-stu-id="b0c17-103"> allows you to extend <xref:System.ServiceModel.IExtensibleObject%601?displayProperty=nameWithType> objects (the <xref:System.ServiceModel.IContextChannel?displayProperty=nameWithType>, <xref:System.ServiceModel.ServiceHost?displayProperty=nameWithType>, <xref:System.ServiceModel.InstanceContext?displayProperty=nameWithType>, and <xref:System.ServiceModel.OperationContext?displayProperty=nameWithType> classes) by adding a new state or behavior by using its extensible object pattern.</span></span> <span data-ttu-id="b0c17-104">Le modèle d'objet extensible est utilisé dans [!INCLUDE[indigo2](~/includes/indigo2-md.md)] pour étendre des classes à l'exécution existantes avec de nouvelles fonctionnalités ou ajouter de nouvelles fonctionnalités d'état à un objet.</span><span class="sxs-lookup"><span data-stu-id="b0c17-104">The extensible object pattern is used in [!INCLUDE[indigo2](~/includes/indigo2-md.md)] to either extend existing run-time classes with new functionality or to add new state features to an object.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Attach">
      <MemberSignature Language="C#" Value="public void Attach (T owner);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Attach(!T owner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.IExtension`1.Attach(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Attach (owner As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Attach(T owner);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="owner" Type="T" />
      </Parameters>
      <Docs>
        <param name="owner">
          <span data-ttu-id="b0c17-105">Objet extensible qui regroupe cette extension en aggrégats.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0c17-105">The extensible object that aggregates this extension.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b0c17-106">Active un objet d’extension pour recherche où il a été regroupé en aggrégats.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0c17-106">Enables an extension object to find out when it has been aggregated.</span>
          </span>
          <span data-ttu-id="b0c17-107">Appelée lorsque l'extension est ajoutée à la propriété <see cref="P:System.ServiceModel.IExtensibleObject`1.Extensions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0c17-107">Called when the extension is added to the <see cref="P:System.ServiceModel.IExtensibleObject`1.Extensions" /> property.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0c17-108">Utilisez cette méthode pour garder la trace de l'objet <xref:System.ServiceModel.IExtensibleObject%601> auquel l'instance actuelle de l'extension appartient.</span><span class="sxs-lookup"><span data-stu-id="b0c17-108">Use this method to keep track of the <xref:System.ServiceModel.IExtensibleObject%601> object to which the current instance of the extension belongs.</span></span> <span data-ttu-id="b0c17-109">Cet appel permet aux extensions de gérer des événements ou d’inspecter des propriétés de leur propriétaire.</span><span class="sxs-lookup"><span data-stu-id="b0c17-109">This call gives extensions a chance to handle events or inspect properties of their owner.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0c17-110">Le code d'exemple suivant montre comment cette méthode peut être utilisée pour garder une trace de l'objet <xref:System.ServiceModel.IExtensibleObject%601> auquel l'instance actuelle de l'extension appartient.</span><span class="sxs-lookup"><span data-stu-id="b0c17-110">The following example code shows how this method can be used to keep track of the <xref:System.ServiceModel.IExtensibleObject%601> object to which the current instance of the extension belongs.</span></span>  
  
```csharp  
InstanceContext owner;  
  
public void Attach(InstanceContext owner)  
{  
  this.owner = owner;   
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Detach">
      <MemberSignature Language="C#" Value="public void Detach (T owner);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Detach(!T owner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.IExtension`1.Detach(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Detach (owner As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Detach(T owner);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="owner" Type="T" />
      </Parameters>
      <Docs>
        <param name="owner">
          <span data-ttu-id="b0c17-111">Objet extensible qui regroupe cette extension en aggrégats.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0c17-111">The extensible object that aggregates this extension.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b0c17-112">Active un objet pour savoir quand il n'est plus regroupé en agrégat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0c17-112">Enables an object to find out when it is no longer aggregated.</span>
          </span>
          <span data-ttu-id="b0c17-113">Appelée lorsqu'une extension est supprimée de la propriété <see cref="P:System.ServiceModel.IExtensibleObject`1.Extensions" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0c17-113">Called when an extension is removed from the <see cref="P:System.ServiceModel.IExtensibleObject`1.Extensions" /> property.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0c17-114">Utilisez la méthode <xref:System.ServiceModel.IExtension%601.Detach%2A> pour savoir quand l'extension a été supprimée.</span><span class="sxs-lookup"><span data-stu-id="b0c17-114">Use the <xref:System.ServiceModel.IExtension%601.Detach%2A> method to find out when the extension has been removed.</span></span> <span data-ttu-id="b0c17-115">Une extension peut utiliser cette méthode pour décrocher des événements de l'objet extensible.</span><span class="sxs-lookup"><span data-stu-id="b0c17-115">An extension can use this to unhook events on the extensible object.</span></span> <span data-ttu-id="b0c17-116">Une extension peut également lever l'exception <xref:System.InvalidOperationException?displayProperty=nameWithType> à partir de cette méthode pour indiquer que l'extension ne peut pas être supprimée une fois ajoutée.</span><span class="sxs-lookup"><span data-stu-id="b0c17-116">An extension can also throw <xref:System.InvalidOperationException?displayProperty=nameWithType> from this method to indicate that, once added, the extension cannot be removed.</span></span>  
  
 <span data-ttu-id="b0c17-117">Notez que cette méthode n'est pas appelée lorsque l'objet propriétaire est détruit ou fermé.</span><span class="sxs-lookup"><span data-stu-id="b0c17-117">Note that this method is not called when the owner object is disposed or closed.</span></span> <span data-ttu-id="b0c17-118">Si nécessaire, c'est à l'extension ou au  code qui ajoute l'extension d'accrocher les événements <xref:System.ServiceModel.ICommunicationObject?displayProperty=nameWithType> appropriés ou d'implémenter les interfaces appropriées (pour <xref:System.ServiceModel.OperationContext?displayProperty=nameWithType>) afin d'observer le cycle de vie du propriétaire.</span><span class="sxs-lookup"><span data-stu-id="b0c17-118">If needed, it is up to the extension or the code adding the extension to hook the appropriate <xref:System.ServiceModel.ICommunicationObject?displayProperty=nameWithType> events or implement the appropriate interfaces (for <xref:System.ServiceModel.OperationContext?displayProperty=nameWithType>) to observe the lifecycle of the owner.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>