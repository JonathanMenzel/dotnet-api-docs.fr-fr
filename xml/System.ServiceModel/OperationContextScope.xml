<Type Name="OperationContextScope" FullName="System.ServiceModel.OperationContextScope">
  <Metadata><Meta Name="ms.openlocfilehash" Value="40f9d7eb2a12aa6aeb7c0ce6a9da8e1e44c42c67" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="37451814" /></Metadata><TypeSignature Language="C#" Value="public sealed class OperationContextScope : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit OperationContextScope extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.OperationContextScope" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class OperationContextScope&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class OperationContextScope sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type OperationContextScope = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Crée un bloc à l'intérieur duquel un objet <see cref="T:System.ServiceModel.OperationContext" /> est dans la portée.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez la classe <xref:System.ServiceModel.OperationContextScope> pour créer une portée pour un objet <xref:System.ServiceModel.OperationContext> spécifique ou pour un nouvel objet <xref:System.ServiceModel.OperationContext> à l'aide d'un objet <xref:System.ServiceModel.IContextChannel> spécifié. Un <xref:System.ServiceModel.OperationContextScope> peut être utilisé dans un service Windows Communication Foundation (WCF) ou d’une application cliente WCF.  
  
 Une fois que l'objet <xref:System.ServiceModel.OperationContextScope> a établi le contexte d'opération actuel, vous pouvez utiliser le <xref:System.ServiceModel.OperationContext> pour :  
  
-   Accéder aux en-têtes et à d'autres propriétés des messages entrants et sortants et les modifier.  
  
-   Accéder à l’exécution, y compris aux répartiteurs, à l’hôte, au canal et aux extensions.  
  
-   Accéder à d'autres types de contextes, tels que les contextes de sécurité, d'instance et de demande.  
  
-   Accéder au canal associé à l'objet <xref:System.ServiceModel.OperationContext> ou (si le canal implémente <xref:System.ServiceModel.Channels.ISession?displayProperty=nameWithType>) à l'identificateur de session du canal associé.  
  
 Lorsqu'une <xref:System.ServiceModel.OperationContextScope> est créée, le <xref:System.ServiceModel.OperationContext> actuel est stocké et le nouveau <xref:System.ServiceModel.OperationContext> est celui retourné par la propriété <xref:System.ServiceModel.OperationContext.Current%2A>. Lorsque la <xref:System.ServiceModel.OperationContextScope> est supprimée, le <xref:System.ServiceModel.OperationContext> d'origine est restauré.  
  
> [!WARNING]
>  N’utilisez pas le modèle asynchrone « await » au sein d’un bloc OperationContextScope. En cas de la continuation, il peut s’exécuter sur un thread différent et OperationContextScope est thread spécifique. Si vous avez besoin d’appeler « await » pour un appel asynchrone, utilisez-le en dehors du bloc OperationContextScope.  
  
   
  
## Examples  
 L'exemple suivant indique comment utiliser la <xref:System.ServiceModel.OperationContextScope> pour créer un contexte dans une application cliente afin d'ajouter un en-tête personnalisé au message sortant.  
  
 [!code-csharp[OperationContextScope#3](~/samples/snippets/csharp/VS_Snippets_CFX/operationcontextscope/cs/client.cs#3)]
 [!code-vb[OperationContextScope#3](~/samples/snippets/visualbasic/VS_Snippets_CFX/operationcontextscope/vb/client.vb#3)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ServiceModel.OperationContextScope" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OperationContextScope (System.ServiceModel.IContextChannel channel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ServiceModel.IContextChannel channel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.OperationContextScope.#ctor(System.ServiceModel.IContextChannel)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (channel As IContextChannel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; OperationContextScope(System::ServiceModel::IContextChannel ^ channel);" />
      <MemberSignature Language="F#" Value="new System.ServiceModel.OperationContextScope : System.ServiceModel.IContextChannel -&gt; System.ServiceModel.OperationContextScope" Usage="new System.ServiceModel.OperationContextScope channel" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="channel" Type="System.ServiceModel.IContextChannel" />
      </Parameters>
      <Docs>
        <param name="channel">Le canal à utiliser lors de la création de la portée pour un nouveau <see cref="T:System.ServiceModel.OperationContext" />.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ServiceModel.OperationContextScope" /> qui utilise le <see cref="T:System.ServiceModel.IContextChannel" /> spécifié pour créer un <see cref="T:System.ServiceModel.OperationContext" /> pour la portée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le constructeur <xref:System.ServiceModel.OperationContextScope.%23ctor%2A> pour créer un <xref:System.ServiceModel.OperationContext> pour un canal client qui peut être utilisé pour ajouter ou modifier des en-tête de message sortants, lire des en-têtes de messages entrants ou accéder à d'autres propriétés à l'exécution du <xref:System.ServiceModel.OperationContext>.  
  
 Les en-têtes ajoutés à la propriété <xref:System.ServiceModel.OperationContext.IncomingMessageHeaders%2A?displayProperty=nameWithType> du nouveau <xref:System.ServiceModel.OperationContext> ne s'appliquent qu'au canal passé au constructeur <xref:System.ServiceModel.OperationContextScope.%23ctor%2A>. Si l'utilisateur crée un canal dans sa portée, les en-têtes ne sont pas appliqués aux messages envoyés sur le nouveau canal.  
  
   
  
## Examples  
 L'exemple suivant indique comment utiliser la <xref:System.ServiceModel.OperationContextScope> pour créer un contexte dans une application cliente afin d'ajouter un en-tête personnalisé au message sortant.  
  
 [!code-csharp[OperationContextScope#4](~/samples/snippets/csharp/VS_Snippets_CFX/operationcontextscope/cs/client.cs#4)]
 [!code-vb[OperationContextScope#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/operationcontextscope/vb/client.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OperationContextScope (System.ServiceModel.OperationContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ServiceModel.OperationContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.OperationContextScope.#ctor(System.ServiceModel.OperationContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (context As OperationContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; OperationContextScope(System::ServiceModel::OperationContext ^ context);" />
      <MemberSignature Language="F#" Value="new System.ServiceModel.OperationContextScope : System.ServiceModel.OperationContext -&gt; System.ServiceModel.OperationContextScope" Usage="new System.ServiceModel.OperationContextScope context" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="context" Type="System.ServiceModel.OperationContext" />
      </Parameters>
      <Docs>
        <param name="context">Le <see cref="T:System.ServiceModel.OperationContext" /> actif dans la portée créée.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ServiceModel.OperationContextScope" /> pour créer une portée pour l'objet <see cref="T:System.ServiceModel.OperationContext" /> spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le constructeur <xref:System.ServiceModel.OperationContextScope.%23ctor%2A> pour créer un bloc de code dans lequel l'objet <xref:System.ServiceModel.OperationContextScope> spécifié est la portée actuelle.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.OperationContextScope.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="operationContextScope.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Rétablit le <see cref="T:System.ServiceModel.OperationContext" /> d'origine comme contexte actif et recycle l'objet <see cref="T:System.ServiceModel.OperationContextScope" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>