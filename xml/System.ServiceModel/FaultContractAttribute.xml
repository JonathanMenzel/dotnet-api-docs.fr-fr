<Type Name="FaultContractAttribute" FullName="System.ServiceModel.FaultContractAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="da23cb7f48282db4b2d167dc90f5f9052c7c6dbd" />
    <Meta Name="ms.sourcegitcommit" Value="0d6aa6694f157a08fe52cd25b4d9d3dcf913e812" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="10/12/2018" />
    <Meta Name="ms.locfileid" Value="49157379" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class FaultContractAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit FaultContractAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.FaultContractAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class FaultContractAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class FaultContractAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type FaultContractAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;dotnet-plat-ext-2.1">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Method, AllowMultiple=true, Inherited=false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Spécifie une ou plusieurs fautes SOAP retournées lorsqu'une opération de service rencontre des erreurs de traitement.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Marquez une opération avec l'attribut <xref:System.ServiceModel.FaultContractAttribute> pour déclarer une ou plusieurs conditions d'exception spécifiques ajoutées à la description WSDL (Web Service Description Language) de l'opération de service comme messages d'erreur SOAP explicites retournés par l'opération.  
  
 Dans toutes les applications managées, les erreurs de traitement sont représentées par des objets <xref:System.Exception>. Dans les applications basées sur SOAP telles que les applications Windows Communication Foundation (WCF), les méthodes de service communiquent des informations d’erreur de traitement à l’aide de messages d’erreur SOAP. Étant donné que les applications WCF s’exécutent sous les deux types de systèmes d’erreur, les informations d’exception gérées qui doivent être envoyées au client doivent être converties à partir d’exceptions en fautes SOAP. Vous pouvez utiliser les comportements d'exception de service par défaut ou vous pouvez contrôler explicitement si (et comment) les exceptions sont mappées aux messages d'erreur. Pour une vue d’ensemble des exceptions et erreurs SOAP dans les applications WCF, consultez [spécification et gestion des erreurs dans les contrats et Services](~/docs/framework/wcf/specifying-and-handling-faults-in-contracts-and-services.md).  
  
 Il est recommandé que les opérations de service utilisent l'<xref:System.ServiceModel.FaultContractAttribute> pour spécifier de manière formelle toutes les fautes SOAP qu'un client peut s'attendre à recevoir dans le cours normal d'une opération. Il est également recommandé que seules les informations qu'un client doit connaître soient retournées dans une faute SOAP pour réduire la divulgation d'informations.  
  
-   La propriété <xref:System.ServiceModel.FaultContractAttribute.Action%2A> contrôle l'action du message d'erreur.  
  
-   La propriété <xref:System.ServiceModel.FaultContractAttribute.DetailType%2A> obtient le type de l'objet de détail sérialisé dans le message d'erreur.  
  
-   Les propriétés <xref:System.ServiceModel.FaultContractAttribute.Name%2A> et <xref:System.ServiceModel.FaultContractAttribute.Namespace%2A> contrôlent respectivement le nom et l'espace de noms du message d'erreur.  
  
-   Le <xref:System.ServiceModel.FaultContractAttribute.HasProtectionLevel%2A> indique si le message d'erreur a un niveau de protection spécifié, et si c'est le cas, la propriété <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A> contrôle ce niveau de protection.  
  
> [!CAUTION]
>  Si un message d'erreur contient des informations qui sont sensibles ou peuvent provoquer des problèmes de sécurité, il est fortement recommandé que la propriété <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A> soit définie.  
  
-   Si vous affectez explicitement à la propriété <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A> la valeur <xref:System.Net.Security.ProtectionLevel.Sign?displayProperty=nameWithType> ou <xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType>, alors vous devez utiliser une liaison dont la sécurité est activée à l'aide de la propriété <xref:System.ServiceModel.SecurityMode?displayProperty=nameWithType> sur la liaison, sans quoi une exception est levée.  
  
-   Si vous sélectionnez une liaison qui active la sécurité et que vous ne définissez pas la propriété <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A> à quelque endroit du contrat, toutes les données d’application seront chiffrées et signées.  
  
-   Si vous sélectionnez une liaison dont la sécurité n’est pas activée (par exemple, la sécurité de la <xref:System.ServiceModel.BasicHttpBinding?displayProperty=nameWithType> est désactivée par défaut) et que la <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A> n’est pas définie explicitement, alors aucune des données d’application ne seront protégées.  
  
 Pour de nombreux scénarios, il est suffisant d'affecter <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A> à <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> pour les messages d'erreur. Pour plus d’informations, consultez [niveau de Protection de présentation](~/docs/framework/wcf/understanding-protection-level.md).  
  
 Pour retourner une erreur spécifiée d’une opération marquée avec <xref:System.ServiceModel.FaultContractAttribute>, levez une exception <xref:System.ServiceModel.FaultException%601> (où les informations sérialisables sur l’erreur sont le paramètre de type) lorsque l’exception managée se produit pendant l’opération. Applications clientes WCF surface l’erreur SOAP avec le même type qu’a été levée dans l’implémentation cliente, autrement dit, comme un <xref:System.ServiceModel.FaultException%601> (où le typeparameter représente les informations d’erreur sérialisable). L'<xref:System.ServiceModel.FaultContractAttribute> peut être utilisé uniquement pour spécifier les fautes SOAP pour les opérations de service bidirectionnelles et les paires d'opérations asynchrones ; les opérations unidirectionnelles ne prennent pas en charge les fautes SOAP et ne prennent donc pas en charge <xref:System.ServiceModel.FaultContractAttribute>.  
  
> [!NOTE]
>  Vous pouvez utiliser tout type sérialisable pour transmettre des informations sur l'erreur. La seule restriction dans cette version de WCF est que les types spécifiés dans un <xref:System.ServiceModel.FaultContractAttribute> doivent être sérialisables par le <xref:System.Runtime.Serialization.DataContractSerializer?displayProperty=nameWithType>. Pour la prise en charge de la sérialisation du <xref:System.Runtime.Serialization.DataContractSerializer> fournit, consultez [Data Contract Serializer](~/docs/framework/wcf/feature-details/data-contract-serializer.md).  
  
 Par exemple, pour spécifier que les clients peuvent attendre une erreur SOAP qui contient un <xref:System.Int32>, placez ce paramètre de type dans l’<xref:System.ServiceModel.FaultContractAttribute> sur votre méthode de service.  
  
> [!NOTE]
>  Les exemples de code suivants ne définissent pas les propriétés <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A>, <xref:System.ServiceModel.FaultContractAttribute.Name%2A> ou <xref:System.ServiceModel.FaultContractAttribute.Namespace%2A>.  
  
 [!code-csharp[C_FCA#1](~/samples/snippets/csharp/VS_Snippets_CFX/c_fca/cs/fcademo.cs#1)]
 [!code-vb[C_FCA#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/c_fca/vb/fcademo.vb#1)]  
  
 Ensuite, dans votre méthode de service, levez une nouvelle <xref:System.ServiceModel.FaultException%601> où le paramètre de type est le type qui contient les informations sur l’erreur (dans le cas ci-dessus, un <xref:System.Int32>). Exemple :  
  
 [!code-csharp[C_FCA#2](~/samples/snippets/csharp/VS_Snippets_CFX/c_fca/cs/fcademo.cs#2)]
 [!code-vb[C_FCA#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/c_fca/vb/fcademo.vb#2)]  
  
 L’exemple précédent est très élémentaire ; presque toutes les informations peuvent être passées à l’aide d’un code <xref:System.Int32?displayProperty=nameWithType>, ce type de détail n’est donc pas le plus utile. En règle générale, les applications WCF spécifient les erreurs SOAP avec les types de détail spécifiques aux besoins de plus d’informations d’erreur du client. Pour obtenir un exemple plus complet, consultez la section Exemple.  
  
> [!NOTE]
>  Si vous spécifiez une <xref:System.ServiceModel.FaultException%601> où le paramètre de type est une <xref:System.String?displayProperty=nameWithType>, la valeur de chaîne est assignée à la propriété Detail dans l’application cliente ; les clients ne peuvent pas récupérer cette chaîne en appelant la méthode <xref:System.ServiceModel.FaultException%601.ToString%2A?displayProperty=nameWithType>. Pour que la valeur de chaîne soit retournée lorsque l'application cliente appelle <xref:System.Exception.ToString%2A?displayProperty=nameWithType>, levez une exception <xref:System.ServiceModel.FaultException?displayProperty=nameWithType> dans l'opération et passez la chaîne au constructeur.  
  
 Pour contrôler explicitement le comportement de l'application lorsqu'une exception ou <xref:System.ServiceModel.FaultException%601> est levé, implémentez l'interface <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=nameWithType> sur un <xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType>, <xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType> ou <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> et assignez-la à la propriété <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=nameWithType>. <xref:System.ServiceModel.Dispatcher.IErrorHandler> vous permet de contrôler explicitement l’erreur SOAP qui est généré et s’il faut envoyer au client.  
  
 Pour faciliter le débogage, affectez la <xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType> à `true` dans le code, ou vous pouvez utiliser la <xref:System.ServiceModel.Description.ServiceDebugBehavior.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType> dans un fichier de configuration d’application. En cas d'activation, le service retourne automatiquement les informations sur les exceptions à l'appelant. Ces erreurs apparaissent au client sous forme d'exceptions <xref:System.ServiceModel.FaultException>.  
  
> [!IMPORTANT]
>  Étant donné que les exceptions managées peuvent exposer des informations d’application internes, paramètre <xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType> ou <xref:System.ServiceModel.Description.ServiceDebugBehavior.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType> à `true` peut autoriser les clients WCF pour obtenir des informations sur les exceptions d’opération de service interne, y compris personnelle identifiables ou autres informations sensibles.  
>   
>  Par conséquent, l'affectation de la valeur <xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType> à <xref:System.ServiceModel.Description.ServiceDebugBehavior.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType> ou `true` est uniquement recommandée comme une façon de déboguer temporairement une application de service. De plus, le WSDL pour une méthode qui retourne des exceptions managées non prises en charge de cette façon ne contient pas le contrat pour le <xref:System.ServiceModel.FaultException%601> de type <xref:System.String>. Les clients doivent attendre une erreur SOAP inconnue (retournée aux clients WCF en tant que <xref:System.ServiceModel.FaultException?displayProperty=nameWithType> objets) pour obtenir les informations de débogage correctement.  
  
   
  
## Examples  
 L'exemple de code suivant illustre l'utilisation de <xref:System.ServiceModel.FaultContractAttribute> pour spécifier que l'opération `SampleMethod` peut retourner une erreur SOAP avec le type de détail `GreetingFault`.  
  
 [!code-csharp[FaultContractAttribute#1](~/samples/snippets/csharp/VS_Snippets_CFX/faultcontractattribute/cs/services.cs#1)]
 [!code-vb[FaultContractAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/faultcontractattribute/vb/services.vb#1)]  
  
 L’exemple de code suivant montre que les clients WCF de `ISampleService` rencontrer cette erreur SOAP comme un <xref:System.ServiceModel.FaultException%601> de type `GreetingFault`.  
  
 [!code-csharp[FaultContractAttribute#3](~/samples/snippets/csharp/VS_Snippets_CFX/faultcontractattribute/cs/client.cs#3)]
 [!code-vb[FaultContractAttribute#3](~/samples/snippets/visualbasic/VS_Snippets_CFX/faultcontractattribute/vb/client.vb#3)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FaultContractAttribute (Type detailType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type detailType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.FaultContractAttribute.#ctor(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (detailType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FaultContractAttribute(Type ^ detailType);" />
      <MemberSignature Language="F#" Value="new System.ServiceModel.FaultContractAttribute : Type -&gt; System.ServiceModel.FaultContractAttribute" Usage="new System.ServiceModel.FaultContractAttribute detailType" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="detailType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="detailType">Type sérialisable qui contient des informations sur l'erreur pour l'appelant.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ServiceModel.FaultContractAttribute" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En général, le constructeur est exécuté en appliquant l’attribut à une méthode de service et en spécifiant un type comme argument dans l’attribut.  
  
   
  
## Examples  
 L'exemple de code suivant illustre l'utilisation de <xref:System.ServiceModel.FaultContractAttribute> pour spécifier que l'opération `SampleMethod` peut retourner une erreur SOAP avec le type de détail `GreetingFault`.  
  
 [!code-csharp[FaultContractAttribute#1](~/samples/snippets/csharp/VS_Snippets_CFX/faultcontractattribute/cs/services.cs#1)]
 [!code-vb[FaultContractAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/faultcontractattribute/vb/services.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">L'argument <paramref name="detailType" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Action">
      <MemberSignature Language="C#" Value="public string Action { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Action" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.FaultContractAttribute.Action" />
      <MemberSignature Language="VB.NET" Value="Public Property Action As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Action { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Action : string with get, set" Usage="System.ServiceModel.FaultContractAttribute.Action" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit l'action du message d'erreur SOAP spécifié dans le cadre du contrat d'opération.</summary>
        <value>Valeur de l'action pour le message d'erreur SOAP.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez ceci pour contrôler l'action du message d'erreur SOAP.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DetailType">
      <MemberSignature Language="C#" Value="public Type DetailType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type DetailType" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.FaultContractAttribute.DetailType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DetailType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ DetailType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DetailType : Type" Usage="System.ServiceModel.FaultContractAttribute.DetailType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le type d'un objet sérialisable qui contient des informations sur l'erreur.</summary>
        <value>Type qui représente la classe d'erreur sérialisable.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L'exemple de code suivant illustre l'utilisation de <xref:System.ServiceModel.FaultContractAttribute> pour spécifier que l'opération `SampleMethod` peut retourner une erreur SOAP avec le type de détail `GreetingFault`.  
  
 [!code-csharp[FaultContractAttribute#1](~/samples/snippets/csharp/VS_Snippets_CFX/faultcontractattribute/cs/services.cs#1)]
 [!code-vb[FaultContractAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/faultcontractattribute/vb/services.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasProtectionLevel">
      <MemberSignature Language="C#" Value="public bool HasProtectionLevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasProtectionLevel" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.FaultContractAttribute.HasProtectionLevel" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasProtectionLevel As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasProtectionLevel { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasProtectionLevel : bool" Usage="System.ServiceModel.FaultContractAttribute.HasProtectionLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui indique si un niveau de protection a été assigné au message d'erreur SOAP.</summary>
        <value>
          <see langword="true" /> si un niveau de protection est assigné au message d'erreur ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez la propriété <xref:System.ServiceModel.FaultContractAttribute.HasProtectionLevel%2A> pour spécifier si le message d'erreur SOAP doit être chiffré, signé, ou les deux. Pour plus d'informations, consultez la propriété <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.FaultContractAttribute.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.ServiceModel.FaultContractAttribute.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le nom du message d'erreur dans WSDL (Web Services Description Language).</summary>
        <value>Nom du message d'erreur. La valeur par défaut est le nom du type utilisé comme détail d'erreur.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.FaultContractAttribute.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : string with get, set" Usage="System.ServiceModel.FaultContractAttribute.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit l'espace de noms de l'erreur SOAP.</summary>
        <value>Espace de noms de l'erreur SOAP.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectionLevel">
      <MemberSignature Language="C#" Value="public System.Net.Security.ProtectionLevel ProtectionLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.Security.ProtectionLevel ProtectionLevel" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.FaultContractAttribute.ProtectionLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property ProtectionLevel As ProtectionLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Security::ProtectionLevel ProtectionLevel { System::Net::Security::ProtectionLevel get(); void set(System::Net::Security::ProtectionLevel value); };" />
      <MemberSignature Language="F#" Value="member this.ProtectionLevel : System.Net.Security.ProtectionLevel with get, set" Usage="System.ServiceModel.FaultContractAttribute.ProtectionLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.Security.ProtectionLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Spécifie le niveau de protection que l’erreur SOAP requiert de la liaison.</summary>
        <value>Une des valeurs de <see cref="T:System.Net.Security.ProtectionLevel" />. La valeur par défaut est <see cref="F:System.Net.Security.ProtectionLevel.None" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez la propriété <xref:System.ServiceModel.Description.FaultDescription.ProtectionLevel%2A?displayProperty=nameWithType> pour spécifier le degré auquel la liaison doit effectuer un chiffrement, une signature ou les deux, lors de l'envoi de l'erreur SOAP. Il est fortement recommandé que l'erreur d'une opération détermine explicitement les spécifications de niveau de protection de la sécurité sur le contrat. Le niveau de protection par défaut est <xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType>, ce qui signifie que le message d’erreur SOAP que vous définissez ne requiert pas de chiffrement ou de signature numérique (même si votre liaison peut fournir cette prise en charge si elle est configurée pour cela). Si un message d'erreur contient des informations qui sont sensibles ou peuvent provoquer des problèmes de sécurité, il est fortement recommandé d'affecter à la propriété  <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A> la valeur <xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType>. Pour plus d’informations sur les problèmes de sécurité, consultez [niveau de Protection de présentation](~/docs/framework/wcf/understanding-protection-level.md).  
  
 Le comportement de protection à l'exécution est la combinaison des propriétés de niveau de protection qui ont une structure hiérarchique. La définition de la valeur la plus à l'extérieur établit le paramètre par défaut pour toutes les portées plus restreintes, sauf si une valeur différente est définie explicitement pour une portée plus restreinte. Dans ce cas, la valeur externe reste la valeur par défaut pour toutes les portées plus restreintes à l'exception de celles qui sont spécifiquement définies.  
  
 Par exemple, si <xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType> a la valeur <xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType> et qu'aucune autre portée plus étroite n'a de paramètres de niveau de protection, tous les messages dans un contrat d'opération sont chiffrés et signés, y compris les messages d'erreur. Toutefois, si vous affectez au jeu <xref:System.ServiceModel.OperationContractAttribute>, de l'une de ces opérations, la valeur <xref:System.Net.Security.ProtectionLevel.Sign?displayProperty=nameWithType>, les messages pour cette opération sont signés, mais tous les autres messages dans le contrat sont chiffrés et signés, y compris les messages d'erreur.  
  
 Les portées auxquelles ces valeurs sont affectées sont les suivantes :  
  
 <xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.OperationContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.MessageContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 Propriété <xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A?displayProperty=nameWithType> sur <xref:System.ServiceModel.MessageHeaderAttribute?displayProperty=nameWithType>.  
  
 Propriété <xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A?displayProperty=nameWithType> sur <xref:System.ServiceModel.MessageBodyMemberAttribute?displayProperty=nameWithType>.  
  
 Lorsque aucun niveau de protection n’est spécifié explicitement sur le contrat et que la liaison sous-jacente prend en charge la sécurité (au niveau du transport ou du message), le niveau de protection effectif pour l’ensemble du contrat est <xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType>. Si la liaison ne prend pas en charge la sécurité (comme <xref:System.ServiceModel.BasicHttpBinding>), le <xref:System.Net.Security.ProtectionLevel?displayProperty=nameWithType> effectif est <xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType> pour l'ensemble du contrat. Le résultat est que selon la liaison du point de terminaison, les clients peuvent avoir besoin d’une protection de sécurité au niveau du message ou du transport différente même lorsque le contrat spécifie <xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>