<Type Name="RuntimeTransactionHandle" FullName="System.Activities.RuntimeTransactionHandle">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="198c1d1c65f5a1d3cd7314f427f448fb2c27d552" />
    <Meta Name="ms.sourcegitcommit" Value="ff790cada015edfb865078fd6bc24fd61fa40b48" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="06/30/2018" />
    <Meta Name="ms.locfileid" Value="37139590" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class RuntimeTransactionHandle : System.Activities.Handle, System.Activities.IExecutionProperty, System.Activities.IPropertyRegistrationCallback" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit RuntimeTransactionHandle extends System.Activities.Handle implements class System.Activities.IExecutionProperty, class System.Activities.IPropertyRegistrationCallback" />
  <TypeSignature Language="DocId" Value="T:System.Activities.RuntimeTransactionHandle" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class RuntimeTransactionHandle&#xA;Inherits Handle&#xA;Implements IExecutionProperty, IPropertyRegistrationCallback" />
  <TypeSignature Language="C++ CLI" Value="public ref class RuntimeTransactionHandle sealed : System::Activities::Handle, System::Activities::IExecutionProperty, System::Activities::IPropertyRegistrationCallback" />
  <TypeSignature Language="F#" Value="type RuntimeTransactionHandle = class&#xA;    inherit Handle&#xA;    interface IExecutionProperty&#xA;    interface IPropertyRegistrationCallback" />
  <AssemblyInfo>
    <AssemblyName>System.Activities</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Activities.Handle</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Activities.IExecutionProperty</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Activities.IPropertyRegistrationCallback</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.Serialization.DataContract</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Fournit l'accès à la transaction runtime dans une instance de flux de travail.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Activities.RuntimeTransactionHandle" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RuntimeTransactionHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.RuntimeTransactionHandle.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RuntimeTransactionHandle();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Activities.RuntimeTransactionHandle" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RuntimeTransactionHandle (System.Transactions.Transaction rootTransaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Transactions.Transaction rootTransaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.RuntimeTransactionHandle.#ctor(System.Transactions.Transaction)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (rootTransaction As Transaction)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RuntimeTransactionHandle(System::Transactions::Transaction ^ rootTransaction);" />
      <MemberSignature Language="F#" Value="new System.Activities.RuntimeTransactionHandle : System.Transactions.Transaction -&gt; System.Activities.RuntimeTransactionHandle" Usage="new System.Activities.RuntimeTransactionHandle rootTransaction" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="rootTransaction" Type="System.Transactions.Transaction" />
      </Parameters>
      <Docs>
        <param name="rootTransaction">Transaction racine.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Activities.RuntimeTransactionHandle" /> à l'aide de la transaction racine spécifiée.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AbortInstanceOnTransactionFailure">
      <MemberSignature Language="C#" Value="public bool AbortInstanceOnTransactionFailure { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AbortInstanceOnTransactionFailure" />
      <MemberSignature Language="DocId" Value="P:System.Activities.RuntimeTransactionHandle.AbortInstanceOnTransactionFailure" />
      <MemberSignature Language="VB.NET" Value="Public Property AbortInstanceOnTransactionFailure As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AbortInstanceOnTransactionFailure { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AbortInstanceOnTransactionFailure : bool with get, set" Usage="System.Activities.RuntimeTransactionHandle.AbortInstanceOnTransactionFailure" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit si l’instance de flux de travail doit être abandonnée si la transaction échoue.</summary>
        <value>
          <see langword="true" /> si l'instance de flux de travail doit être abandonnée lorsque la transaction échoue ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si <xref:System.Activities.RuntimeTransactionHandle.AbortInstanceOnTransactionFailure%2A> est `false`, Échec de la transaction provoque l’exception qui provoque l’échec de propagation comme d’habitude. La valeur par défaut de <xref:System.Activities.RuntimeTransactionHandle.AbortInstanceOnTransactionFailure%2A> est `true`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CompleteTransaction">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Termine la transaction runtime actuelle.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CompleteTransaction">
      <MemberSignature Language="C#" Value="public void CompleteTransaction (System.Activities.NativeActivityContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CompleteTransaction(class System.Activities.NativeActivityContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.RuntimeTransactionHandle.CompleteTransaction(System.Activities.NativeActivityContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CompleteTransaction (context As NativeActivityContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CompleteTransaction(System::Activities::NativeActivityContext ^ context);" />
      <MemberSignature Language="F#" Value="member this.CompleteTransaction : System.Activities.NativeActivityContext -&gt; unit" Usage="runtimeTransactionHandle.CompleteTransaction context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Activities.NativeActivityContext" />
      </Parameters>
      <Docs>
        <param name="context">Environnement d'exécution actuel.</param>
        <summary>Termine la transaction runtime actuelle.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompleteTransaction">
      <MemberSignature Language="C#" Value="public void CompleteTransaction (System.Activities.NativeActivityContext context, System.Activities.BookmarkCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CompleteTransaction(class System.Activities.NativeActivityContext context, class System.Activities.BookmarkCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.RuntimeTransactionHandle.CompleteTransaction(System.Activities.NativeActivityContext,System.Activities.BookmarkCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CompleteTransaction (context As NativeActivityContext, callback As BookmarkCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CompleteTransaction(System::Activities::NativeActivityContext ^ context, System::Activities::BookmarkCallback ^ callback);" />
      <MemberSignature Language="F#" Value="member this.CompleteTransaction : System.Activities.NativeActivityContext * System.Activities.BookmarkCallback -&gt; unit" Usage="runtimeTransactionHandle.CompleteTransaction (context, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Activities.NativeActivityContext" />
        <Parameter Name="callback" Type="System.Activities.BookmarkCallback" />
      </Parameters>
      <Docs>
        <param name="context">Environnement d'exécution actuel.</param>
        <param name="callback">Rappel de signet à appeler lorsque la transaction est terminée.</param>
        <summary>Termine la transaction runtime actuelle et planifie le rappel de signet lorsque la transaction est terminée.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCurrentTransaction">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Retourne une référence à la transaction runtime actuelle.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCurrentTransaction">
      <MemberSignature Language="C#" Value="public System.Transactions.Transaction GetCurrentTransaction (System.Activities.AsyncCodeActivityContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Transactions.Transaction GetCurrentTransaction(class System.Activities.AsyncCodeActivityContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.RuntimeTransactionHandle.GetCurrentTransaction(System.Activities.AsyncCodeActivityContext)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCurrentTransaction (context As AsyncCodeActivityContext) As Transaction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Transactions::Transaction ^ GetCurrentTransaction(System::Activities::AsyncCodeActivityContext ^ context);" />
      <MemberSignature Language="F#" Value="member this.GetCurrentTransaction : System.Activities.AsyncCodeActivityContext -&gt; System.Transactions.Transaction" Usage="runtimeTransactionHandle.GetCurrentTransaction context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Transactions.Transaction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Activities.AsyncCodeActivityContext" />
      </Parameters>
      <Docs>
        <param name="context">Environnement d'exécution actuel.</param>
        <summary>Retourne une référence à la transaction runtime actuelle.</summary>
        <returns>Transaction active.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentTransaction">
      <MemberSignature Language="C#" Value="public System.Transactions.Transaction GetCurrentTransaction (System.Activities.CodeActivityContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Transactions.Transaction GetCurrentTransaction(class System.Activities.CodeActivityContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.RuntimeTransactionHandle.GetCurrentTransaction(System.Activities.CodeActivityContext)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCurrentTransaction (context As CodeActivityContext) As Transaction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Transactions::Transaction ^ GetCurrentTransaction(System::Activities::CodeActivityContext ^ context);" />
      <MemberSignature Language="F#" Value="member this.GetCurrentTransaction : System.Activities.CodeActivityContext -&gt; System.Transactions.Transaction" Usage="runtimeTransactionHandle.GetCurrentTransaction context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Transactions.Transaction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Activities.CodeActivityContext" />
      </Parameters>
      <Docs>
        <param name="context">Environnement d'exécution actuel.</param>
        <summary>Retourne une référence à la transaction runtime actuelle.</summary>
        <returns>Transaction active.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentTransaction">
      <MemberSignature Language="C#" Value="public System.Transactions.Transaction GetCurrentTransaction (System.Activities.NativeActivityContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Transactions.Transaction GetCurrentTransaction(class System.Activities.NativeActivityContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.RuntimeTransactionHandle.GetCurrentTransaction(System.Activities.NativeActivityContext)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCurrentTransaction (context As NativeActivityContext) As Transaction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Transactions::Transaction ^ GetCurrentTransaction(System::Activities::NativeActivityContext ^ context);" />
      <MemberSignature Language="F#" Value="member this.GetCurrentTransaction : System.Activities.NativeActivityContext -&gt; System.Transactions.Transaction" Usage="runtimeTransactionHandle.GetCurrentTransaction context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Transactions.Transaction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Activities.NativeActivityContext" />
      </Parameters>
      <Docs>
        <param name="context">Environnement d'exécution actuel.</param>
        <summary>Retourne une référence à la transaction runtime actuelle.</summary>
        <returns>Transaction runtime actuelle.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnInitialize">
      <MemberSignature Language="C#" Value="protected override void OnInitialize (System.Activities.HandleInitializationContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnInitialize(class System.Activities.HandleInitializationContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.RuntimeTransactionHandle.OnInitialize(System.Activities.HandleInitializationContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnInitialize (context As HandleInitializationContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnInitialize(System::Activities::HandleInitializationContext ^ context);" />
      <MemberSignature Language="F#" Value="override this.OnInitialize : System.Activities.HandleInitializationContext -&gt; unit" Usage="runtimeTransactionHandle.OnInitialize context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Activities.HandleInitializationContext" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnUninitialize">
      <MemberSignature Language="C#" Value="protected override void OnUninitialize (System.Activities.HandleInitializationContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnUninitialize(class System.Activities.HandleInitializationContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.RuntimeTransactionHandle.OnUninitialize(System.Activities.HandleInitializationContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnUninitialize (context As HandleInitializationContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnUninitialize(System::Activities::HandleInitializationContext ^ context);" />
      <MemberSignature Language="F#" Value="override this.OnUninitialize : System.Activities.HandleInitializationContext -&gt; unit" Usage="runtimeTransactionHandle.OnUninitialize context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Activities.HandleInitializationContext" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RequestTransactionContext">
      <MemberSignature Language="C#" Value="public void RequestTransactionContext (System.Activities.NativeActivityContext context, Action&lt;System.Activities.NativeActivityTransactionContext,object&gt; callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RequestTransactionContext(class System.Activities.NativeActivityContext context, class System.Action`2&lt;class System.Activities.NativeActivityTransactionContext, object&gt; callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.RuntimeTransactionHandle.RequestTransactionContext(System.Activities.NativeActivityContext,System.Action{System.Activities.NativeActivityTransactionContext,System.Object},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RequestTransactionContext (context As NativeActivityContext, callback As Action(Of NativeActivityTransactionContext, Object), state As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RequestTransactionContext(System::Activities::NativeActivityContext ^ context, Action&lt;System::Activities::NativeActivityTransactionContext ^, System::Object ^&gt; ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.RequestTransactionContext : System.Activities.NativeActivityContext * Action&lt;System.Activities.NativeActivityTransactionContext, obj&gt; * obj -&gt; unit" Usage="runtimeTransactionHandle.RequestTransactionContext (context, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Activities.NativeActivityContext" />
        <Parameter Name="callback" Type="System.Action&lt;System.Activities.NativeActivityTransactionContext,System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="context">Environnement d'exécution actuel.</param>
        <param name="callback">Méthode à appeler quand l'objet <see cref="T:System.Activities.NativeActivityTransactionContext" /> est créé.</param>
        <param name="state">État facultatif fourni par l'utilisateur qui contient les informations relatives à la demande.</param>
        <summary>Initialise la création d'un <see cref="T:System.Activities.NativeActivityTransactionContext" /> pour une utilisation avec une nouvelle transaction.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode est utilisée lorsque l’activité crée une transaction pour une utilisation par le runtime. Le flux de travail pourrait potentiellement être rendu persistant une ou plusieurs fois avant que le rappel ne soit appelé. Cette méthode permet aux portées de transaction de plusieurs branches d'une représentation parallèle de mettre en file d'attente les demandes simultanées sans les empêcher de devenir persistantes à l'achèvement de la transaction. Pour éviter les erreurs si le flux de travail rend son état persistant, assurez-vous que l'objet état peut être sérialisé.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RequireTransactionContext">
      <MemberSignature Language="C#" Value="public void RequireTransactionContext (System.Activities.NativeActivityContext context, Action&lt;System.Activities.NativeActivityTransactionContext,object&gt; callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RequireTransactionContext(class System.Activities.NativeActivityContext context, class System.Action`2&lt;class System.Activities.NativeActivityTransactionContext, object&gt; callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.RuntimeTransactionHandle.RequireTransactionContext(System.Activities.NativeActivityContext,System.Action{System.Activities.NativeActivityTransactionContext,System.Object},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RequireTransactionContext (context As NativeActivityContext, callback As Action(Of NativeActivityTransactionContext, Object), state As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RequireTransactionContext(System::Activities::NativeActivityContext ^ context, Action&lt;System::Activities::NativeActivityTransactionContext ^, System::Object ^&gt; ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.RequireTransactionContext : System.Activities.NativeActivityContext * Action&lt;System.Activities.NativeActivityTransactionContext, obj&gt; * obj -&gt; unit" Usage="runtimeTransactionHandle.RequireTransactionContext (context, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Activities.NativeActivityContext" />
        <Parameter Name="callback" Type="System.Action&lt;System.Activities.NativeActivityTransactionContext,System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="context">Environnement d'exécution actuel.</param>
        <param name="callback">Méthode à appeler quand l'objet <see cref="T:System.Activities.NativeActivityTransactionContext" /> est créé.</param>
        <param name="state">État facultatif fourni par l'utilisateur qui contient les informations relatives à la demande.</param>
        <summary>Initialise la création d'un objet <see cref="T:System.Activities.NativeActivityTransactionContext" /> pour une utilisation avec une transaction existante.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode est utilisée lorsque l’activité possède une transaction qui requiert l’exécution du runtime. Le flux de travail ne peut pas rendre son état persistant entre un appel à <xref:System.Activities.RuntimeTransactionHandle.RequireTransactionContext%2A> et le rappel suivant. L'appel à nouveau de la méthode <xref:System.Activities.RuntimeTransactionHandle.RequireTransactionContext%2A> avant que le premier appel ne soit terminé n'est pas autorisé et tous les appels après le premier appel entraînent des exceptions. Cette méthode autorise les transactions transmises depuis l’hôte à être fournies au runtime sans risquer un point de persistance intermédiaire. L'objet état qui peut être sérialisé n'est pas nécessaire, parce que l'instance est garantie ne pas devenir persistante lorsque cette méthode est utilisée.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SuppressTransaction">
      <MemberSignature Language="C#" Value="public bool SuppressTransaction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SuppressTransaction" />
      <MemberSignature Language="DocId" Value="P:System.Activities.RuntimeTransactionHandle.SuppressTransaction" />
      <MemberSignature Language="VB.NET" Value="Public Property SuppressTransaction As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SuppressTransaction { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SuppressTransaction : bool with get, set" Usage="System.Activities.RuntimeTransactionHandle.SuppressTransaction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui indique si cette transaction runtime est supprimée.</summary>
        <value>
          <see langword="true" /> si la transaction runtime est supprimée ; sinon, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Activities.IExecutionProperty.CleanupWorkflowThread">
      <MemberSignature Language="C#" Value="void IExecutionProperty.CleanupWorkflowThread ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Activities.IExecutionProperty.CleanupWorkflowThread() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.RuntimeTransactionHandle.System#Activities#IExecutionProperty#CleanupWorkflowThread" />
      <MemberSignature Language="VB.NET" Value="Sub CleanupWorkflowThread () Implements IExecutionProperty.CleanupWorkflowThread" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Activities.IExecutionProperty.CleanupWorkflowThread() = System::Activities::IExecutionProperty::CleanupWorkflowThread;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Activities.IExecutionProperty.CleanupWorkflowThread</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pour obtenir une description de ce membre, consultez <see cref="M:System.Activities.IExecutionProperty.CleanupWorkflowThread" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Activities.IExecutionProperty.SetupWorkflowThread">
      <MemberSignature Language="C#" Value="void IExecutionProperty.SetupWorkflowThread ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Activities.IExecutionProperty.SetupWorkflowThread() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.RuntimeTransactionHandle.System#Activities#IExecutionProperty#SetupWorkflowThread" />
      <MemberSignature Language="VB.NET" Value="Sub SetupWorkflowThread () Implements IExecutionProperty.SetupWorkflowThread" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Activities.IExecutionProperty.SetupWorkflowThread() = System::Activities::IExecutionProperty::SetupWorkflowThread;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Activities.IExecutionProperty.SetupWorkflowThread</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pour obtenir une description de ce membre, consultez <see cref="M:System.Activities.IExecutionProperty.SetupWorkflowThread" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Activities.IPropertyRegistrationCallback.Register">
      <MemberSignature Language="C#" Value="void IPropertyRegistrationCallback.Register (System.Activities.RegistrationContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Activities.IPropertyRegistrationCallback.Register(class System.Activities.RegistrationContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.RuntimeTransactionHandle.System#Activities#IPropertyRegistrationCallback#Register(System.Activities.RegistrationContext)" />
      <MemberSignature Language="VB.NET" Value="Sub Register (context As RegistrationContext) Implements IPropertyRegistrationCallback.Register" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Activities.IPropertyRegistrationCallback.Register(System::Activities::RegistrationContext ^ context) = System::Activities::IPropertyRegistrationCallback::Register;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Activities.IPropertyRegistrationCallback.Register(System.Activities.RegistrationContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Activities.RegistrationContext" />
      </Parameters>
      <Docs>
        <param name="context">Pour une description de ce paramètre, consultez <see cref="M:System.Activities.IPropertyRegistrationCallback.Register(System.Activities.RegistrationContext)" />.</param>
        <summary>Pour obtenir une description de ce membre, consultez <see cref="M:System.Activities.IPropertyRegistrationCallback.Register(System.Activities.RegistrationContext)" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Activities.IPropertyRegistrationCallback.Unregister">
      <MemberSignature Language="C#" Value="void IPropertyRegistrationCallback.Unregister (System.Activities.RegistrationContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Activities.IPropertyRegistrationCallback.Unregister(class System.Activities.RegistrationContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.RuntimeTransactionHandle.System#Activities#IPropertyRegistrationCallback#Unregister(System.Activities.RegistrationContext)" />
      <MemberSignature Language="VB.NET" Value="Sub Unregister (context As RegistrationContext) Implements IPropertyRegistrationCallback.Unregister" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Activities.IPropertyRegistrationCallback.Unregister(System::Activities::RegistrationContext ^ context) = System::Activities::IPropertyRegistrationCallback::Unregister;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Activities.IPropertyRegistrationCallback.Unregister(System.Activities.RegistrationContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Activities.RegistrationContext" />
      </Parameters>
      <Docs>
        <param name="context">Pour une description de ce paramètre, consultez <see cref="M:System.Activities.IPropertyRegistrationCallback.Unregister(System.Activities.RegistrationContext)" />.</param>
        <summary>Pour obtenir une description de ce membre, consultez <see cref="M:System.Activities.IPropertyRegistrationCallback.Unregister(System.Activities.RegistrationContext)" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>