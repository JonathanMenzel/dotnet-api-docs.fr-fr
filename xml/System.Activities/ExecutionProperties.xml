<Type Name="ExecutionProperties" FullName="System.Activities.ExecutionProperties">
  <TypeSignature Language="C#" Value="public sealed class ExecutionProperties : System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;string,object&gt;&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ExecutionProperties extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, object&gt;&gt;, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Activities.ExecutionProperties" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ExecutionProperties&#xA;Implements IEnumerable(Of KeyValuePair(Of String, Object))" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExecutionProperties sealed : System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Object ^&gt;&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Activities</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Object&gt;&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="efe6a-101">Représente la collection de propriétés à une portée particulière.</span><span class="sxs-lookup"><span data-stu-id="efe6a-101">Represents the collection of properties at a particular scope.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="efe6a-102">Par le biais du stockage local des threads (TLS), le CLR maintient un contexte d'exécution pour chaque thread.</span><span class="sxs-lookup"><span data-stu-id="efe6a-102">Through thread local storage (TLS), the CLR maintains an execution context for each thread.</span></span> <span data-ttu-id="efe6a-103">Ce contexte d’exécution gouverne des propriétés de thread connues, telles que l’identité de thread, la transaction ambiante et le jeu d’autorisations actuel ainsi que les propriétés de thread définies par l’utilisateur (comme les emplacements nommés).</span><span class="sxs-lookup"><span data-stu-id="efe6a-103">This execution context governs well-known thread properties such as the thread identity, the ambient transaction, and the current permission set as well as user-defined thread properties like named slots.</span></span>  
  
 <span data-ttu-id="efe6a-104">Contrairement aux programmes qui ciblent directement le CLR, les programmes de flux de travail sont hiérarchiquement des arborescences de portée d’activités qui s’exécutent dans un environnement de thread agnostique.</span><span class="sxs-lookup"><span data-stu-id="efe6a-104">Unlike programs directly targeting the CLR, workflow programs are hierarchically-scoped trees that execute in a thread-agnostic environment.</span></span> <span data-ttu-id="efe6a-105">Cela implique que les mécanismes de TLS standard ne peuvent pas être utilisés directement pour déterminer quel contexte se trouve dans la portée d'un élément de travail donné.</span><span class="sxs-lookup"><span data-stu-id="efe6a-105">This implies that the standard TLS mechanisms cannot directly be used to determine what context is in scope for a given work item.</span></span> <span data-ttu-id="efe6a-106">Par exemple, deux branches parallèles d'exécution peuvent utiliser des identités différentes, mais le planificateur peut entrelacer leur exécution sur le même thread de CLR.</span><span class="sxs-lookup"><span data-stu-id="efe6a-106">For example, two parallel branches of execution might use different identities yet the scheduler might interleave their execution on the same CLR thread.</span></span>  
  
 <span data-ttu-id="efe6a-107">Les propriétés d’exécution autorisent une activité à déclarer les propriétés incluses dans la portée pour la sous-arborescence associée, tout en fournissant des connexions pour la configuration et la destruction de TLS afin d’interagir correctement avec les objets CLR.</span><span class="sxs-lookup"><span data-stu-id="efe6a-107">Execution properties allow an activity to declare which properties are in scope for its sub-tree as well as provide hooks for setting up and tearing down TLS to properly interoperate with CLR objects.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="efe6a-108">Enregistre une nouvelle propriété.</span><span class="sxs-lookup"><span data-stu-id="efe6a-108">Registers a new property.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (string name, object property);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(string name, object property) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.ExecutionProperties.Add(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (name As String, property As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::String ^ name, System::Object ^ property);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="property" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="efe6a-109">Nom de la propriété.</span><span class="sxs-lookup"><span data-stu-id="efe6a-109">The name of the property.</span></span></param>
        <param name="property"><span data-ttu-id="efe6a-110">Objet qui représente la propriété.</span><span class="sxs-lookup"><span data-stu-id="efe6a-110">The object that represents the property.</span></span></param>
        <summary><span data-ttu-id="efe6a-111">Enregistre une nouvelle propriété à l'aide du nom spécifié.</span><span class="sxs-lookup"><span data-stu-id="efe6a-111">Registers a new property using the specified name.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (string name, object property, bool onlyVisibleToPublicChildren);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(string name, object property, bool onlyVisibleToPublicChildren) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.ExecutionProperties.Add(System.String,System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (name As String, property As Object, onlyVisibleToPublicChildren As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::String ^ name, System::Object ^ property, bool onlyVisibleToPublicChildren);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="property" Type="System.Object" />
        <Parameter Name="onlyVisibleToPublicChildren" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="efe6a-112">Nom de la propriété.</span><span class="sxs-lookup"><span data-stu-id="efe6a-112">The name of the property.</span></span></param>
        <param name="property"><span data-ttu-id="efe6a-113">Objet qui représente la propriété.</span><span class="sxs-lookup"><span data-stu-id="efe6a-113">The object that represents the property.</span></span></param>
        <param name="onlyVisibleToPublicChildren"><span data-ttu-id="efe6a-114">Valeur qui détermine si la propriété est visible aux enfants de l'activité propriétaire.</span><span class="sxs-lookup"><span data-stu-id="efe6a-114">A value that determines whether this property is visible to the children of the owning activity.</span></span></param>
        <summary><span data-ttu-id="efe6a-115">Enregistre une propriété à l'aide du nom spécifié et de la visibilité enfant.</span><span class="sxs-lookup"><span data-stu-id="efe6a-115">Registers a property using the specified name and child visibility.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public object Find (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Find(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.ExecutionProperties.Find(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Find (name As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Find(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="efe6a-116">Nom de la propriété.</span><span class="sxs-lookup"><span data-stu-id="efe6a-116">The name of the property.</span></span></param>
        <summary><span data-ttu-id="efe6a-117">Retourne la propriété la plus proche du nom donné.</span><span class="sxs-lookup"><span data-stu-id="efe6a-117">Returns the nearest property of the given name.</span></span></summary>
        <returns><span data-ttu-id="efe6a-118">Propriété la plus proche du nom donné.</span><span class="sxs-lookup"><span data-stu-id="efe6a-118">The nearest property of the given name.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="efe6a-119"><xref:System.Activities.ExecutionProperties.Find%2A> recherche la propriété visible la plus proche à l'aide de la définition du périmètre hiérarchique.</span><span class="sxs-lookup"><span data-stu-id="efe6a-119"><xref:System.Activities.ExecutionProperties.Find%2A> finds the nearest visible property using hierarchical scoping.</span></span> <span data-ttu-id="efe6a-120">Si deux propriétés ont le même nom, la propriété la plus proche de la portée parent est retournée.</span><span class="sxs-lookup"><span data-stu-id="efe6a-120">If two properties have the same name, the closest property at the parent scope is returned.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;string,object&gt;&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, object&gt;&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.ExecutionProperties.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator(Of KeyValuePair(Of String, Object))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IEnumerator&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Object ^&gt;&gt; ^ GetEnumerator();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Object&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="efe6a-121">Retourne un énumérateur qui itère la collection de propriétés.</span><span class="sxs-lookup"><span data-stu-id="efe6a-121">Returns an enumerator that iterates through the collection of properties.</span></span></summary>
        <returns><span data-ttu-id="efe6a-122">Énumérateur qui itère la collection de propriétés.</span><span class="sxs-lookup"><span data-stu-id="efe6a-122">An enumerator that iterates through the collection of properties.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEmpty">
      <MemberSignature Language="C#" Value="public bool IsEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Activities.ExecutionProperties.IsEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEmpty { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="efe6a-123">Obtient une valeur qui indique s'il y a des propriétés inscrites à la portée actuelle.</span><span class="sxs-lookup"><span data-stu-id="efe6a-123">Gets a value that indicates whether there are properties registered at the current scope.</span></span></summary>
        <value>
          <span data-ttu-id="efe6a-124"><see langword="true" /> s'il existe des propriétés inscrites ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="efe6a-124"><see langword="true" /> if there are properties registered; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Remove(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.ExecutionProperties.Remove(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (name As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Remove(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="efe6a-125">Nom de la propriété dont l'inscription doit être annulée.</span><span class="sxs-lookup"><span data-stu-id="efe6a-125">The name of the property to unregister.</span></span></param>
        <summary><span data-ttu-id="efe6a-126">Annule l'inscription de la propriété avec le nom spécifié.</span><span class="sxs-lookup"><span data-stu-id="efe6a-126">Unregisters the property with the specified name.</span></span></summary>
        <returns>
          <span data-ttu-id="efe6a-127"><see langword="true" /> si la propriété était non inscrite, sinon <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="efe6a-127"><see langword="true" /> if the property was unregistered; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="efe6a-128">L'inscription des propriétés est automatiquement annulée lorsque l'activité est terminée.</span><span class="sxs-lookup"><span data-stu-id="efe6a-128">Properties are automatically unregistered when the activity completes.</span></span> <span data-ttu-id="efe6a-129">Cette méthode peut être utilisée pour annuler l'inscription d'une propriété avant que l'activité ne s'achève.</span><span class="sxs-lookup"><span data-stu-id="efe6a-129">This method can be used to unregister a property before the activity completes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.ExecutionProperties.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="efe6a-130">Retourne un énumérateur qui itère la collection de propriétés.</span><span class="sxs-lookup"><span data-stu-id="efe6a-130">Returns an enumerator that iterates through the collection of properties.</span></span></summary>
        <returns><span data-ttu-id="efe6a-131">Énumérateur qui itère la collection de propriétés.</span><span class="sxs-lookup"><span data-stu-id="efe6a-131">An enumerator that iterates through the collection of properties.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>