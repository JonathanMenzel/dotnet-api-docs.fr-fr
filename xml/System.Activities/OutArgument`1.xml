<Type Name="OutArgument&lt;T&gt;" FullName="System.Activities.OutArgument&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4a2b64937b4d3f4d02444fb23a2c76d9c6aff5cc" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36716452" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class OutArgument&lt;T&gt; : System.Activities.OutArgument" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit OutArgument`1&lt;T&gt; extends System.Activities.OutArgument" />
  <TypeSignature Language="DocId" Value="T:System.Activities.OutArgument`1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class OutArgument(Of T)&#xA;Inherits OutArgument" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class OutArgument sealed : System::Activities::OutArgument" />
  <TypeSignature Language="F#" Value="type OutArgument&lt;'T&gt; = class&#xA;    inherit OutArgument" />
  <AssemblyInfo>
    <AssemblyName>System.Activities</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Activities.OutArgument</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Activities.XamlIntegration.OutArgumentConverter))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.ContentProperty("Expression")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.ValueSerializer(typeof(System.Activities.XamlIntegration.ArgumentValueSerializer))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T">Type de données de l'objet <see cref="T:System.Activities.OutArgument`1" />.</typeparam>
    <summary>Terminal de liaison qui représente le flux de données hors d’une activité.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un objet <xref:System.Activities.OutArgument%601> est utilisé pour entraîner la circulation des données hors d'une activité. Si l'activité est l'activité racine d'un flux de travail, il est également utilisé pour entraîner la circulation des données du flux de travail vers l'hôte du flux de travail. Dans cet exemple, une activité `Divide` personnalisée qui a deux arguments d'entrée et un argument de sortie est utilisée comme activité racine d'un flux de travail. L'application hôte passe deux valeurs dans le flux de travail, puis récupère le résultat de la division après que le flux de travail est achevé.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#20](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#20)]  
  
 L'activité `Divide` utilise des arguments pour recevoir les valeurs d'entrée et fournir les valeurs de résultat calculées. Le `Remainder` <xref:System.Activities.OutArgument%601> est utilisé pour transmettre le reste de la division et le <xref:System.Activities.Activity%601.Result%2A> fournis par des arguments de sortie <xref:System.Activities.Activity%601> activités dérivées est utilisé pour transmettre le quotient.  
  
> [!NOTE]
>  Si votre activité personnalisée est dérivée de l'objet générique <xref:System.Activities.CodeActivity%601> avec un objet <xref:System.Int32> comme argument de type générique, lorsque vous appelez l'activité avec la méthode Invoke <xref:System.Activities.WorkflowInvoker>, elle retourne une valeur <xref:System.Int32>. En outre, le <xref:System.Activities.CodeActivity%601.Execute%2A?displayProperty=nameWithType> méthode retournera un <xref:System.Int32> au lieu de la valeur `void` et vous n’avez pas besoin de définir une valeur de retournée.  
  
 [!code-csharp[CFX_WorkflowApplicationExample#120](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#120)]  
  
   
  
## Examples  
 L'exemple de code suivant montre comment créer un <xref:System.Activities.OutArgument%601>. Il est extrait de l'exemple du formateur.  
  
 [!code-csharp[wfs_Formatter#1](~/samples/snippets/csharp/VS_Snippets_CFX/wfs_formatter/cs/program.cs#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Activities.OutArgument`1" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OutArgument ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.OutArgument`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; OutArgument();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Activities.OutArgument`1" /> avec les valeurs par défaut.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L'exemple de code suivant montre comment créer un <xref:System.Activities.OutArgument%601>. Il est extrait de l'exemple du formateur.  
  
 [!code-csharp[wfs_Formatter#1](~/samples/snippets/csharp/VS_Snippets_CFX/wfs_formatter/cs/program.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OutArgument (System.Activities.Activity&lt;System.Activities.Location&lt;T&gt;&gt; expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Activities.Activity`1&lt;class System.Activities.Location`1&lt;!T&gt;&gt; expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.OutArgument`1.#ctor(System.Activities.Activity{System.Activities.Location{`0}})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (expression As Activity(Of Location(Of T)))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; OutArgument(System::Activities::Activity&lt;System::Activities::Location&lt;T&gt; ^&gt; ^ expression);" />
      <MemberSignature Language="F#" Value="new System.Activities.OutArgument&lt;'T&gt; : System.Activities.Activity&lt;System.Activities.Location&lt;'T&gt;&gt; -&gt; System.Activities.OutArgument&lt;'T&gt;" Usage="new System.Activities.OutArgument&lt;'T&gt; expression" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="expression" Type="System.Activities.Activity&lt;System.Activities.Location&lt;T&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="expression">Valeur de l’argument.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Activities.OutArgument`1" /> à l'aide du <see cref="T:System.Activities.Activity`1" /> spécifié.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OutArgument (System.Activities.DelegateArgument delegateArgument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Activities.DelegateArgument delegateArgument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.OutArgument`1.#ctor(System.Activities.DelegateArgument)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; OutArgument(System::Activities::DelegateArgument ^ delegateArgument);" />
      <MemberSignature Language="F#" Value="new System.Activities.OutArgument&lt;'T&gt; : System.Activities.DelegateArgument -&gt; System.Activities.OutArgument&lt;'T&gt;" Usage="new System.Activities.OutArgument&lt;'T&gt; delegateArgument" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="delegateArgument" Type="System.Activities.DelegateArgument" />
      </Parameters>
      <Docs>
        <param name="delegateArgument">Valeur de l’argument.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Activities.OutArgument`1" /> à l'aide du <see cref="T:System.Activities.DelegateArgument" /> spécifié.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OutArgument (System.Activities.Variable variable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Activities.Variable variable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.OutArgument`1.#ctor(System.Activities.Variable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; OutArgument(System::Activities::Variable ^ variable);" />
      <MemberSignature Language="F#" Value="new System.Activities.OutArgument&lt;'T&gt; : System.Activities.Variable -&gt; System.Activities.OutArgument&lt;'T&gt;" Usage="new System.Activities.OutArgument&lt;'T&gt; variable" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="variable" Type="System.Activities.Variable" />
      </Parameters>
      <Docs>
        <param name="variable">Valeur de l’argument.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Activities.OutArgument`1" /> à l'aide du <see cref="T:System.Activities.Variable" /> spécifié.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OutArgument (System.Linq.Expressions.Expression&lt;Func&lt;System.Activities.ActivityContext,T&gt;&gt; expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;class System.Activities.ActivityContext, !T&gt;&gt; expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.OutArgument`1.#ctor(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,`0}})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (expression As Expression(Of Func(Of ActivityContext, T)))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; OutArgument(System::Linq::Expressions::Expression&lt;Func&lt;System::Activities::ActivityContext ^, T&gt; ^&gt; ^ expression);" />
      <MemberSignature Language="F#" Value="new System.Activities.OutArgument&lt;'T&gt; : System.Linq.Expressions.Expression&lt;Func&lt;System.Activities.ActivityContext, 'T&gt;&gt; -&gt; System.Activities.OutArgument&lt;'T&gt;" Usage="new System.Activities.OutArgument&lt;'T&gt; expression" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;System.Activities.ActivityContext,T&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="expression">Valeur de l’argument.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Activities.OutArgument`1" /> avec l'expression spécifiée.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Expression">
      <MemberSignature Language="C#" Value="public System.Activities.Activity&lt;System.Activities.Location&lt;T&gt;&gt; Expression { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Activities.Activity`1&lt;class System.Activities.Location`1&lt;!T&gt;&gt; Expression" />
      <MemberSignature Language="DocId" Value="P:System.Activities.OutArgument`1.Expression" />
      <MemberSignature Language="VB.NET" Value="Public Property Expression As Activity(Of Location(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Activities::Activity&lt;System::Activities::Location&lt;T&gt; ^&gt; ^ Expression { System::Activities::Activity&lt;System::Activities::Location&lt;T&gt; ^&gt; ^ get(); void set(System::Activities::Activity&lt;System::Activities::Location&lt;T&gt; ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Expression : System.Activities.Activity&lt;System.Activities.Location&lt;'T&gt;&gt; with get, set" Usage="System.Activities.OutArgument&lt;'T&gt;.Expression" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Activities.Activity&lt;System.Activities.Location&lt;T&gt;&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un objet <see cref="T:System.Activities.Activity`1" /> qui représente la valeur de l'objet <see cref="T:System.Activities.OutArgument`1" />.</summary>
        <value>Activité représentant la valeur de l’argument.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromDelegateArgument">
      <MemberSignature Language="C#" Value="public static System.Activities.OutArgument&lt;T&gt; FromDelegateArgument (System.Activities.DelegateArgument delegateArgument);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Activities.OutArgument`1&lt;!T&gt; FromDelegateArgument(class System.Activities.DelegateArgument delegateArgument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.OutArgument`1.FromDelegateArgument(System.Activities.DelegateArgument)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Activities::OutArgument&lt;T&gt; ^ FromDelegateArgument(System::Activities::DelegateArgument ^ delegateArgument);" />
      <MemberSignature Language="F#" Value="static member FromDelegateArgument : System.Activities.DelegateArgument -&gt; System.Activities.OutArgument&lt;'T&gt;" Usage="System.Activities.OutArgument&lt;'T&gt;.FromDelegateArgument delegateArgument" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.OutArgument&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateArgument" Type="System.Activities.DelegateArgument" />
      </Parameters>
      <Docs>
        <param name="delegateArgument">Valeur de l’argument.</param>
        <summary>Initialise et retourne un nouvel <see cref="T:System.Activities.OutArgument`1" /> construit à l'aide de la <see cref="T:System.Activities.DelegateArgument" /> spécifiée.</summary>
        <returns>Nouvel argument.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromExpression">
      <MemberSignature Language="C#" Value="public static System.Activities.OutArgument&lt;T&gt; FromExpression (System.Activities.Activity&lt;System.Activities.Location&lt;T&gt;&gt; expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Activities.OutArgument`1&lt;!T&gt; FromExpression(class System.Activities.Activity`1&lt;class System.Activities.Location`1&lt;!T&gt;&gt; expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.OutArgument`1.FromExpression(System.Activities.Activity{System.Activities.Location{`0}})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromExpression (expression As Activity(Of Location(Of T))) As OutArgument(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Activities::OutArgument&lt;T&gt; ^ FromExpression(System::Activities::Activity&lt;System::Activities::Location&lt;T&gt; ^&gt; ^ expression);" />
      <MemberSignature Language="F#" Value="static member FromExpression : System.Activities.Activity&lt;System.Activities.Location&lt;'T&gt;&gt; -&gt; System.Activities.OutArgument&lt;'T&gt;" Usage="System.Activities.OutArgument&lt;'T&gt;.FromExpression expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.OutArgument&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Activities.Activity&lt;System.Activities.Location&lt;T&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="expression">Valeur de l’argument.</param>
        <summary>Initialise et retourne un nouvel <see cref="T:System.Activities.OutArgument`1" /> construit à l'aide de la <see cref="T:System.Activities.Activity`1" /> spécifiée.</summary>
        <returns>Nouvel argument.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromVariable">
      <MemberSignature Language="C#" Value="public static System.Activities.OutArgument&lt;T&gt; FromVariable (System.Activities.Variable variable);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Activities.OutArgument`1&lt;!T&gt; FromVariable(class System.Activities.Variable variable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.OutArgument`1.FromVariable(System.Activities.Variable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Activities::OutArgument&lt;T&gt; ^ FromVariable(System::Activities::Variable ^ variable);" />
      <MemberSignature Language="F#" Value="static member FromVariable : System.Activities.Variable -&gt; System.Activities.OutArgument&lt;'T&gt;" Usage="System.Activities.OutArgument&lt;'T&gt;.FromVariable variable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.OutArgument&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="variable" Type="System.Activities.Variable" />
      </Parameters>
      <Docs>
        <param name="variable">Valeur de l’argument.</param>
        <summary>Initialise et retourne un nouvel <see cref="T:System.Activities.OutArgument`1" /> construit à l'aide de la <see cref="T:System.Activities.Variable" /> spécifiée.</summary>
        <returns>Nouvel argument.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public T Get (System.Activities.ActivityContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T Get(class System.Activities.ActivityContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.OutArgument`1.Get(System.Activities.ActivityContext)" />
      <MemberSignature Language="VB.NET" Value="Public Function Get (context As ActivityContext) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; T Get(System::Activities::ActivityContext ^ context);" />
      <MemberSignature Language="F#" Value="override this.Get : System.Activities.ActivityContext -&gt; 'T" Usage="outArgument.Get context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Activities.ActivityContext" />
      </Parameters>
      <Docs>
        <param name="context">Contexte de l'activité en cours.</param>
        <summary>Obtient la valeur de <see cref="T:System.Activities.OutArgument`1" /> à l'aide du contexte d'activité spécifié.</summary>
        <returns>Valeur de l’argument.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLocation">
      <MemberSignature Language="C#" Value="public System.Activities.Location&lt;T&gt; GetLocation (System.Activities.ActivityContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Activities.Location`1&lt;!T&gt; GetLocation(class System.Activities.ActivityContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.OutArgument`1.GetLocation(System.Activities.ActivityContext)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetLocation (context As ActivityContext) As Location(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Activities::Location&lt;T&gt; ^ GetLocation(System::Activities::ActivityContext ^ context);" />
      <MemberSignature Language="F#" Value="override this.GetLocation : System.Activities.ActivityContext -&gt; System.Activities.Location&lt;'T&gt;" Usage="outArgument.GetLocation context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.Location&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Activities.ActivityContext" />
      </Parameters>
      <Docs>
        <param name="context">Contexte d'activité qui contient la valeur de la variable.</param>
        <summary>Obtient l'emplacement de la valeur de <see cref="T:System.Activities.OutArgument`1" />.</summary>
        <returns>Référence à l’emplacement où la valeur de l’argument est stockée.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Activities.OutArgument&lt;T&gt; (System.Activities.Activity&lt;System.Activities.Location&lt;T&gt;&gt; expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Activities.OutArgument`1&lt;!T&gt; op_Implicit(class System.Activities.Activity`1&lt;class System.Activities.Location`1&lt;!T&gt;&gt; expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.OutArgument`1.op_Implicit(System.Activities.Activity{System.Activities.Location{`0}})~System.Activities.OutArgument{`0}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (expression As Activity(Of Location(Of T))) As OutArgument(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Activities::OutArgument&lt;T&gt; ^(System::Activities::Activity&lt;System::Activities::Location&lt;T&gt; ^&gt; ^ expression);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : System.Activities.Activity&lt;System.Activities.Location&lt;'T&gt;&gt; -&gt; System.Activities.OutArgument&lt;'T&gt;" Usage="System.Activities.OutArgument&lt;'T&gt;.op_Implicit expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.OutArgument&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Activities.Activity&lt;System.Activities.Location&lt;T&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="expression">Valeur de l’argument.</param>
        <summary>Initialise et retourne un nouvel <see cref="T:System.Activities.OutArgument`1" /> construit à l'aide de la <see cref="T:System.Activities.Activity`1" /> spécifiée.</summary>
        <returns>Nouvel argument.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Activities.OutArgument&lt;T&gt; (System.Activities.DelegateArgument delegateArgument);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Activities.OutArgument`1&lt;!T&gt; op_Implicit(class System.Activities.DelegateArgument delegateArgument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.OutArgument`1.op_Implicit(System.Activities.DelegateArgument)~System.Activities.OutArgument{`0}" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Activities::OutArgument&lt;T&gt; ^(System::Activities::DelegateArgument ^ delegateArgument);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : System.Activities.DelegateArgument -&gt; System.Activities.OutArgument&lt;'T&gt;" Usage="System.Activities.OutArgument&lt;'T&gt;.op_Implicit delegateArgument" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.OutArgument&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateArgument" Type="System.Activities.DelegateArgument" />
      </Parameters>
      <Docs>
        <param name="delegateArgument">Valeur de l’argument.</param>
        <summary>Initialise et retourne un nouvel <see cref="T:System.Activities.OutArgument`1" /> construit à l'aide de la <see cref="T:System.Activities.DelegateArgument" /> spécifiée.</summary>
        <returns>Nouvel argument.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Conversion implicite.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Activities.OutArgument&lt;T&gt; (System.Activities.Variable variable);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Activities.OutArgument`1&lt;!T&gt; op_Implicit(class System.Activities.Variable variable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.OutArgument`1.op_Implicit(System.Activities.Variable)~System.Activities.OutArgument{`0}" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Activities::OutArgument&lt;T&gt; ^(System::Activities::Variable ^ variable);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : System.Activities.Variable -&gt; System.Activities.OutArgument&lt;'T&gt;" Usage="System.Activities.OutArgument&lt;'T&gt;.op_Implicit variable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.OutArgument&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="variable" Type="System.Activities.Variable" />
      </Parameters>
      <Docs>
        <param name="variable">Valeur de l’argument.</param>
        <summary>Initialise et retourne un nouvel <see cref="T:System.Activities.OutArgument`1" /> construit à l'aide de la <see cref="T:System.Activities.Variable" /> spécifiée.</summary>
        <returns>Nouvel argument.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Set">
      <MemberSignature Language="C#" Value="public void Set (System.Activities.ActivityContext context, T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Set(class System.Activities.ActivityContext context, !T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.OutArgument`1.Set(System.Activities.ActivityContext,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Set (context As ActivityContext, value As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Set(System::Activities::ActivityContext ^ context, T value);" />
      <MemberSignature Language="F#" Value="override this.Set : System.Activities.ActivityContext * 'T -&gt; unit" Usage="outArgument.Set (context, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Activities.ActivityContext" />
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="context">Contexte de l'activité en cours.</param>
        <param name="value">Nouvelle valeur.</param>
        <summary>Définit la valeur de l'objet <see cref="T:System.Activities.OutArgument`1" /> à l'aide du contexte d'activité spécifié.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>