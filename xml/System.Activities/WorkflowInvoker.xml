<Type Name="WorkflowInvoker" FullName="System.Activities.WorkflowInvoker">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a1d6a938287920a69315e465828e1e66bb9224e5" />
    <Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="11/17/2018" />
    <Meta Name="ms.locfileid" Value="51895687" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class WorkflowInvoker" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit WorkflowInvoker extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Activities.WorkflowInvoker" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class WorkflowInvoker" />
  <TypeSignature Language="C++ CLI" Value="public ref class WorkflowInvoker sealed" />
  <TypeSignature Language="F#" Value="type WorkflowInvoker = class" />
  <AssemblyInfo>
    <AssemblyName>System.Activities</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fournit un moyen pour appeler un flux de travail comme s'il s'agissait d'un appel de méthode.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Activities.WorkflowInvoker> contient les méthodes d'instance et les méthodes statiques permettant d'appeler les flux de travail de façon synchrone, ainsi que les méthodes d'instance permettant de les appeler de façon asynchrone.  
  
 <xref:System.Activities.WorkflowInvoker> n'autorise pas le contrôle d'instance tel que la persistance, le déchargement ou la reprise de signets. Si le contrôle d'instance est souhaité, utilisez à la place <xref:System.Activities.WorkflowApplication>.  
  
 Pour exécuter de façon synchrone les flux de travail sans contrôle d’instance, appelez la méthode <xref:System.Activities.WorkflowInvoker.Invoke%2A>. Pour exécuter de façon asynchrone un flux de travail sans contrôle d'instance, utilisez les méthodes <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> et <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>, ou la méthode <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>.  
  
   
  
## Examples  
 L’exemple suivant appelle de façon synchrone un flux de travail composé d’une activité <xref:System.Activities.Statements.WriteLine> unique à l’aide de <xref:System.Activities.WorkflowInvoker>.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#1](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WorkflowInvoker (System.Activities.Activity workflow);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Activities.Activity workflow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (workflow As Activity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WorkflowInvoker(System::Activities::Activity ^ workflow);" />
      <MemberSignature Language="F#" Value="new System.Activities.WorkflowInvoker : System.Activities.Activity -&gt; System.Activities.WorkflowInvoker" Usage="new System.Activities.WorkflowInvoker workflow" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
      </Parameters>
      <Docs>
        <param name="workflow">Définition du flux de travail devant être appelé par cette instance de la classe <see cref="T:System.Activities.WorkflowInvoker" />.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Activities.WorkflowInvoker" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Activities.WorkflowInvoker> contient les méthodes d'instance et les méthodes statiques permettant d'appeler les flux de travail de façon synchrone, ainsi que les méthodes d'instance permettant de les appeler de façon asynchrone.  
  
   
  
## Examples  
 L'exemple suivant appelle un flux de travail composé d'une activité <xref:System.Activities.Statements.WriteLine> unique.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#2](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginInvoke">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Appelle de façon asynchrone un flux de travail à l'aide du modèle de conception asynchrone <see cref="T:System.IAsyncResult" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour plus d’informations, consultez [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : AsyncCallback * obj -&gt; IAsyncResult" Usage="workflowInvoker.BeginInvoke (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">Méthode à appeler lorsque le flux de travail est terminé.</param>
        <param name="state">Objet spécifique à l'application facultatif qui contient les informations sur l'opération asynchrone.</param>
        <summary>Appelle de façon asynchrone un flux de travail à l'aide de l'objet <see cref="T:System.AsyncCallback" /> spécifié et de l'état fourni par l'utilisateur.</summary>
        <returns>Référence à l'opération d'appel asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour être informé quand le flux de travail est terminé et extraire les paramètres de sortie du flux de travail, appelez la méthode <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> à partir de la méthode `callback`. Si la méthode <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> est appelée avant que le flux de travail ne soit terminé, elle s'interrompt jusqu'à la fin du flux de travail. Pour configurer un intervalle de délai d'attente au cours duquel le flux de travail doit être exécuté, utilisez l'une des surcharges de <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> acceptant un objet <xref:System.TimeSpan>.  
  
 Cette méthode appelle de façon asynchrone un flux de travail à l’aide du modèle de conception asynchrone <xref:System.IAsyncResult>. Pour plus d’informations, consultez [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).  
  
   
  
## Examples  
 L'exemple suivant appelle un flux de travail composé d'une activité `LongRunningDiceRoll`. L’activité `LongRunningDiceRoll` a deux arguments de sortie qui représentent les résultats du jet de dés. Ces arguments sont récupérés via l'appel de <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>. Lors du retour de l’appel à <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>, chaque argument de sortie, indexé par nom d’argument, est retourné dans le dictionnaire de sorties.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (inputs As IDictionary(Of String, Object), callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Collections.Generic.IDictionary&lt;string, obj&gt; * AsyncCallback * obj -&gt; IAsyncResult" Usage="workflowInvoker.BeginInvoke (inputs, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs">Dictionnaire des paramètres d’entrée du flux de travail, indexés par nom d’argument.</param>
        <param name="callback">Méthode à appeler lorsque le flux de travail est terminé.</param>
        <param name="state">Objet spécifique à l'application facultatif qui contient les informations sur l'opération asynchrone.</param>
        <summary>Appelle de façon asynchrone un flux de travail à l'aide de l'objet <see cref="T:System.Collections.Generic.IDictionary`2" /> spécifié des paramètres en entrée, de l'objet <see cref="T:System.AsyncCallback" /> et de l'état fourni par l'utilisateur.</summary>
        <returns>Référence à l'opération d'appel asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour être informé quand le flux de travail est terminé et extraire les paramètres de sortie du flux de travail, appelez la méthode <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> à partir de la méthode `callback`. Si la méthode <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> est appelée avant que le flux de travail ne soit terminé, elle s'interrompt jusqu'à la fin du flux de travail.  Pour configurer un intervalle de délai d'attente au cours duquel le flux de travail doit être exécuté, utilisez l'une des surcharges de <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> acceptant un objet <xref:System.TimeSpan>.  
  
 Cette méthode appelle de façon asynchrone un flux de travail à l’aide du modèle de conception asynchrone <xref:System.IAsyncResult>. Pour plus d’informations, consultez [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).  
  
   
  
## Examples  
 L'exemple suivant appelle un flux de travail composé d'une activité `LongRunningDiceRoll`. L’activité `LongRunningDiceRoll` a deux arguments de sortie qui représentent les résultats du jet de dés. Ces arguments sont récupérés via l'appel de <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>. Lors du retour de l’appel à <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>, chaque argument de sortie, indexé par nom d’argument, est retourné dans le dictionnaire de sorties.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="workflowInvoker.BeginInvoke (timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout">Intervalle pendant lequel le flux de travail doit s'exécuter avant qu'il ne soit interrompu et qu'une exception <see cref="T:System.TimeoutException" /> ne soit levée.</param>
        <param name="callback">Méthode à appeler lorsque le flux de travail est terminé.</param>
        <param name="state">Objet spécifique à l'application facultatif qui contient les informations sur l'opération asynchrone.</param>
        <summary>Appelle de façon asynchrone un flux de travail à l'aide de l'intervalle de délai d'attente, de l'objet <see cref="T:System.AsyncCallback" /> et de l'état fourni par l'utilisateur qui ont été spécifiés.</summary>
        <returns>Référence à l'opération d'appel asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour être informé quand le flux de travail est terminé et extraire les paramètres de sortie du flux de travail, appelez la méthode <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> à partir de la méthode `callback`. Si la méthode <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> est appelée avant que le flux de travail ne soit terminé, elle s'interrompt jusqu'à la fin du flux de travail. Si le flux de travail ne se termine pas dans le délai spécifié, le flux de travail est interrompu et une exception <xref:System.TimeoutException> est levée lorsque la méthode <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> est appelée.  
  
> [!NOTE]
>  <xref:System.TimeoutException> est levée uniquement si l'intervalle de délai d'attente est écoulé et que le workflow devient inactif pendant l'exécution. Un flux de travail dont le délai d'exécution dépasse l'intervalle de délai d'attente spécifié se termine correctement s'il ne devient pas inactif.  
  
 Cette méthode appelle de façon asynchrone un flux de travail à l’aide du modèle de conception asynchrone <xref:System.IAsyncResult>. Pour plus d’informations, consultez [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).  
  
   
  
## Examples  
 L'exemple suivant appelle un flux de travail composé d'une activité `LongRunningDiceRoll`. L’activité `LongRunningDiceRoll` a deux arguments de sortie qui représentent les résultats du jet de dés. Ces arguments sont récupérés via l'appel de <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>. Lors du retour de l’appel à <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>, chaque argument de sortie, indexé par nom d’argument, est retourné dans le dictionnaire de sorties.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (inputs As IDictionary(Of String, Object), timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="workflowInvoker.BeginInvoke (inputs, timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs">Dictionnaire des paramètres d’entrée du flux de travail, indexés par nom d’argument.</param>
        <param name="timeout">Intervalle pendant lequel le flux de travail doit s'exécuter avant qu'il ne soit interrompu et qu'une exception <see cref="T:System.TimeoutException" /> ne soit levée.</param>
        <param name="callback">Méthode à appeler lorsque le flux de travail est terminé.</param>
        <param name="state">Objet spécifique à l'application facultatif qui contient les informations sur l'opération asynchrone.</param>
        <summary>Appelle de façon asynchrone un flux de travail à l'aide de l'objet <see cref="T:System.Collections.Generic.IDictionary`2" /> des paramètres d'entrée, de l'intervalle de délai d'attente, de l'objet <see cref="T:System.AsyncCallback" /> et de l'état fourni par l'utilisateur qui ont été spécifiés.</summary>
        <returns>Référence à l'opération d'appel asynchrone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour être informé quand le flux de travail est terminé et extraire les paramètres de sortie du flux de travail, appelez la méthode <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> à partir de la méthode `callback`. Si la méthode <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> est appelée avant que le flux de travail ne soit terminé, elle s'interrompt jusqu'à la fin du flux de travail. Si le flux de travail ne se termine pas dans le délai spécifié, le flux de travail est interrompu et une exception <xref:System.TimeoutException> est levée lorsque la méthode <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> est appelée.  
  
> [!NOTE]
>  <xref:System.TimeoutException> est levée uniquement si l'intervalle de délai d'attente est écoulé et que le workflow devient inactif pendant l'exécution. Un flux de travail dont le délai d'exécution dépasse l'intervalle de délai d'attente spécifié se termine correctement s'il ne devient pas inactif.  
  
 Cette méthode appelle de façon asynchrone un flux de travail à l’aide du modèle de conception asynchrone <xref:System.IAsyncResult>. Pour plus d’informations, consultez [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).  
  
   
  
## Examples  
 L'exemple suivant appelle un flux de travail composé d'une activité `LongRunningDiceRoll`. L’activité `LongRunningDiceRoll` a deux arguments de sortie qui représentent les résultats du jet de dés. Ces arguments sont récupérés via l'appel de <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>. Lors du retour de l’appel à <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>, chaque argument de sortie, indexé par nom d’argument, est retourné dans le dictionnaire de sorties.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelAsync">
      <MemberSignature Language="C#" Value="public void CancelAsync (object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelAsync(object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.CancelAsync(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelAsync (userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CancelAsync(System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.CancelAsync : obj -&gt; unit" Usage="workflowInvoker.CancelAsync userState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userState">Jeton du flux de travail à annuler.</param>
        <summary>Tente d'annuler le flux de travail qui a été appelé avec le paramètre <paramref name="userState" /> spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Seul un flux de travail appelé par l'une des surcharges <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> acceptant un paramètre `userState` peut être annulé.  
  
 Si l’annulation réussit, le <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> propriété de la <xref:System.Activities.InvokeCompletedEventArgs> passé à la <xref:System.Activities.WorkflowInvoker.InvokeCompleted> gestionnaire est défini `true`; sinon, elle est définie sur `false`.  
  
   
  
## Examples  
 L'exemple suivant appelle un flux de travail composé d'une activité `LongRunningDiceRoll`. L’activité `LongRunningDiceRoll` a deux arguments de sortie qui représentent les résultats du jet de dés. Une fois que le flux de travail est appelé, l'hôte tente de l'annuler.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#34](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#34)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndInvoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; EndInvoke (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; EndInvoke(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.EndInvoke(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndInvoke (result As IAsyncResult) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ EndInvoke(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="member this.EndInvoke : IAsyncResult -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.EndInvoke result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">Objet <see cref="T:System.IAsyncResult" /> qui fait référence à l'opération <see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" /> ayant démarré le flux de travail.</param>
        <summary>Retourne les résultats d'un flux de travail appelé à l'aide de l'une des surcharges de <see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" />.</summary>
        <returns>Dictionnaire des valeurs <see cref="T:System.Activities.OutArgument" /> et <see cref="T:System.Activities.InOutArgument" /> de l’activité racine indexées par nom d’argument et représentant les sorties du flux de travail.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour être informé quand le flux de travail est terminé et extraire les paramètres de sortie du flux de travail, appelez la méthode <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> à partir de la méthode `callback` spécifiée par <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A>. Si la méthode <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> est appelée avant que le flux de travail ne soit terminé, elle s'interrompt jusqu'à la fin du flux de travail.  
  
 Cette méthode retourne le résultat d’un flux de travail appelé de façon asynchrone à l’aide du modèle de conception asynchrone <xref:System.IAsyncResult>. Pour plus d’informations, consultez [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).  
  
   
  
## Examples  
 L'exemple suivant appelle un flux de travail composé d'une activité `LongRunningDiceRoll`. L’activité `LongRunningDiceRoll` a deux arguments de sortie qui représentent les résultats du jet de dés. Ces arguments sont récupérés via l'appel de <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>. Lors du retour de l’appel à <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>, chaque argument de sortie, indexé par nom d’argument, est retourné dans le dictionnaire de sorties.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Extensions">
      <MemberSignature Language="C#" Value="public System.Activities.Hosting.WorkflowInstanceExtensionManager Extensions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Activities.Hosting.WorkflowInstanceExtensionManager Extensions" />
      <MemberSignature Language="DocId" Value="P:System.Activities.WorkflowInvoker.Extensions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Extensions As WorkflowInstanceExtensionManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Activities::Hosting::WorkflowInstanceExtensionManager ^ Extensions { System::Activities::Hosting::WorkflowInstanceExtensionManager ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Extensions : System.Activities.Hosting.WorkflowInstanceExtensionManager" Usage="System.Activities.WorkflowInvoker.Extensions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.Hosting.WorkflowInstanceExtensionManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient l’objet <see cref="T:System.Collections.ObjectModel.Collection`1" /> contenant les extensions qui sont disponibles pour les flux de travail appelés par une instance de <see cref="T:System.Activities.WorkflowInvoker" />.</summary>
        <value>Objet <see cref="T:System.Collections.ObjectModel.Collection`1" /> contenant les extensions qui sont disponibles pour les flux de travail appelés par une instance de <see cref="T:System.Activities.WorkflowInvoker" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété est utilisée par les auteurs d’hôte de flux de travail pour ajouter des extensions à l’instance de <xref:System.Activities.WorkflowInvoker> afin qu’elles soient disponibles pour les flux de travail appelés par cette instance.  
  
   
  
## Examples  
 L’exemple suivant inscrit un <xref:System.Activities.Tracking.TrackingParticipant> personnalisé auprès de la collection <xref:System.Activities.WorkflowInvoker.Extensions%2A> d’une instance de <xref:System.Activities.WorkflowInvoker>. Cet exemple de code fait partie de la [suivi personnalisé](~/docs/framework/windows-workflow-foundation/samples/custom-tracking.md) exemple.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#40](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#40)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Invoke">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Appelle un flux de travail de façon synchrone et retourne un dictionnaire des valeurs <see cref="T:System.Activities.OutArgument" /> et <see cref="T:System.Activities.InOutArgument" /> de l’activité racine indexées par nom d’argument et représentant les sorties du flux de travail.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode s'interrompt jusqu'à ce que le flux de travail soit terminé, durée d'inactivité incluse. L'exécution du flux de travail se déroule toujours intégralement sur le thread appelant. Pour configurer un intervalle de délai d'attente au cours duquel le flux de travail doit être exécuté, utilisez l'une des surcharges de <xref:System.Activities.WorkflowInvoker.Invoke%2A> acceptant un objet <xref:System.TimeSpan>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke () As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke();" />
      <MemberSignature Language="F#" Value="member this.Invoke : unit -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.Invoke " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Appelle de façon synchrone un flux de travail à l'aide de la définition de flux de travail passée au constructeur de <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" />.</summary>
        <returns>Dictionnaire des valeurs <see cref="T:System.Activities.OutArgument" /> et <see cref="T:System.Activities.InOutArgument" /> de l'activité racine indexées par nom d'argument et représentant les sorties du flux de travail.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode s'interrompt jusqu'à ce que le flux de travail soit terminé, durée d'inactivité incluse. L'exécution du flux de travail se déroule toujours intégralement sur le thread appelant. Pour configurer un intervalle de délai d'attente au cours duquel le flux de travail doit être exécuté, utilisez l'une des surcharges de <xref:System.Activities.WorkflowInvoker.Invoke%2A> acceptant un objet <xref:System.TimeSpan>.  
  
   
  
## Examples  
 L'exemple suivant appelle un flux de travail composé d'une activité `DiceRoll` unique. L’activité `DiceRoll` a deux arguments de sortie qui représentent les résultats du jet de dés. Lors du retour de l’appel à `Invoke`, chaque argument de sortie, indexé par nom d’argument, est retourné dans le dictionnaire de sorties. Le workflow est appelé deux fois, à l’aide de la définition de flux de travail passée dans le `WorkflowInvoker` constructeur.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#130](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#130)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#31](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#31)]  
  
 Si l’activité racine du flux de travail n’a pas d’arguments de sortie ou si ces derniers ne sont pas requis par l’hôte, ils peuvent être ignorés. L’exemple suivant appelle un flux de travail composé d’une activité <xref:System.Activities.Statements.WriteLine> unique qui n’a pas d’arguments de sortie.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#2](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="System.Activities.WorkflowInvoker.Invoke workflow" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
      </Parameters>
      <Docs>
        <param name="workflow">Définition du flux de travail à appeler.</param>
        <summary>Appelle de façon synchrone un flux de travail à l’aide de la définition de flux de travail spécifiée.</summary>
        <returns>Dictionnaire des valeurs <see cref="T:System.Activities.OutArgument" /> et <see cref="T:System.Activities.InOutArgument" /> de l’activité racine indexées par nom d’argument et représentant les sorties du flux de travail.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode s'interrompt jusqu'à ce que le flux de travail soit terminé, durée d'inactivité incluse. L'exécution du flux de travail se déroule toujours intégralement sur le thread appelant. Pour configurer un intervalle de délai d'attente au cours duquel le flux de travail doit être exécuté, utilisez l'une des surcharges de <xref:System.Activities.WorkflowInvoker.Invoke%2A> acceptant un objet <xref:System.TimeSpan>.  
  
   
  
## Examples  
 L'exemple suivant appelle un flux de travail composé d'une activité `DiceRoll` unique. L’activité `DiceRoll` a deux arguments de sortie qui représentent les résultats du jet de dés. Lors du retour de l’appel à `Invoke`, chaque argument de sortie, indexé par nom d’argument, est retourné dans le dictionnaire de sorties.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#130](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#130)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#30](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#30)]  
  
 Si l’activité racine du flux de travail n’a pas d’arguments de sortie ou si ces derniers ne sont pas requis par l’hôte, ils peuvent être ignorés. L’exemple suivant appelle un flux de travail composé d’une activité <xref:System.Activities.Statements.WriteLine> unique qui n’a pas d’arguments de sortie.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#1](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (inputs As IDictionary(Of String, Object)) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Collections.Generic.IDictionary&lt;string, obj&gt; -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.Invoke inputs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="inputs">Dictionnaire des paramètres d’entrée du flux de travail, indexés par nom d’argument.</param>
        <summary>Appelle l’activité passée au constructeur de <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> de façon synchrone avec l’objet <see cref="T:System.Collections.Generic.IDictionary`2" /> des paramètres d’entrée qui est spécifié.</summary>
        <returns>Dictionnaire des valeurs <see cref="T:System.Activities.OutArgument" /> et <see cref="T:System.Activities.InOutArgument" /> de l’activité racine indexées par nom d’argument et représentant les sorties du flux de travail.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode s'interrompt jusqu'à ce que le flux de travail soit terminé, durée d'inactivité incluse. L'exécution du flux de travail se déroule toujours intégralement sur le thread appelant. Pour configurer un intervalle de délai d'attente au cours duquel le flux de travail doit être exécuté, utilisez l'une des surcharges de <xref:System.Activities.WorkflowInvoker.Invoke%2A> acceptant un objet <xref:System.TimeSpan>.  
  
   
  
## Examples  
 L’exemple suivant appelle un workflow composé d’une activité `Divide` unique qui a deux arguments d’entrée et deux arguments de sortie. Lorsque le workflow est appelé, le dictionnaire d’arguments (`arguments`) est passé ; il contient les valeurs de chaque argument d’entrée, indexées par nom d’argument. Lors du retour de l’appel à `Invoke`, chaque argument de sortie, également indexé par nom d’argument, est retourné dans le dictionnaire `outputs`.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#120](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#120)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#22](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#22)]  
  
 Si le flux de travail dérive <xref:System.Activities.ActivityWithResult>, tel que `CodeActivity<TResult>` ou `Activity<TResult>`, et il existe des arguments de sortie en plus de bien définis <xref:System.Activities.Activity%601.Result%2A> sortie argument, une surcharge non générique de `Invoke`, telle que celle-ci, doit être utilisé dans afin de récupérer les arguments supplémentaires. Pour ce faire, la définition de flux de travail passée dans le `WorkflowInvoker` constructeur doit être de type <xref:System.Activities.Activity>. Dans cet exemple le `Divide` activité dérive `CodeActivity<int>`, mais est déclarée comme <xref:System.Activities.Activity> afin que cette surcharge de `Invoke`, qui retourne un dictionnaire d’arguments au lieu d’une seule valeur de retournée, est utilisé.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#121](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#121)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#23](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Invoke : TimeSpan -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.Invoke timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">Intervalle pendant lequel le flux de travail doit s'exécuter avant qu'il ne soit interrompu et qu'une exception <see cref="T:System.TimeoutException" /> ne soit levée.</param>
        <summary>Appelle de façon synchrone un flux de travail avec l’intervalle de délai d’attente spécifié.</summary>
        <returns>Dictionnaire des valeurs <see cref="T:System.Activities.OutArgument" /> et <see cref="T:System.Activities.InOutArgument" /> de l’activité racine indexées par nom d’argument et représentant les sorties du flux de travail.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode s'interrompt jusqu'à ce que le flux de travail soit terminé, durée d'inactivité incluse. L'exécution du flux de travail se déroule toujours intégralement sur le thread appelant. Si le flux de travail ne se termine pas dans le délai spécifié, le flux de travail est interrompu et une exception <xref:System.TimeoutException> est levée.  
  
> [!NOTE]
>  <xref:System.TimeoutException> est levée uniquement si l'intervalle de délai d'attente est écoulé et que le workflow devient inactif pendant l'exécution. Un flux de travail dont le délai d'exécution dépasse l'intervalle de délai d'attente spécifié se termine correctement s'il ne devient pas inactif.  
  
   
  
## Examples  
 L'exemple suivant appelle un flux de travail qui contient deux activités <xref:System.Activities.Statements.WriteLine> et une activité <xref:System.Activities.Statements.Delay> configurée avec une propriété <xref:System.Activities.Statements.Delay.Duration%2A> égale à une minute. Ce flux de travail est appelé deux fois ; la première fois avec un intervalle de délai d'attente de 2 minutes et la deuxième fois avec un intervalle de délai d'attente de 30 secondes. Le premier flux de travail se termine correctement, mais pas le deuxième ; une exception <xref:System.TimeoutException> est levée et le message suivant s'affiche.  
  
```Output  
The operation did not complete within the allotted timeout of 00:00:30.   
The time allotted to this operation may have been a portion of a longer timeout.  
```  
  
 [!code-csharp[CFX_WorkflowInvokerExample#51](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#51)]  
  
 Pour obtenir un exemple d’utilisation de `Invoke` avec les arguments de sortie, consultez la surcharge de <xref:System.Activities.WorkflowInvoker.Invoke%2A> avec les mêmes paramètres que cette surcharge sans le délai d’attente.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity, inputs As IDictionary(Of String, Object)) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity * System.Collections.Generic.IDictionary&lt;string, obj&gt; -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="workflow">Définition du flux de travail à appeler.</param>
        <param name="inputs">Dictionnaire des paramètres d’entrée du flux de travail, indexés par nom d’argument.</param>
        <summary>Appelle de façon synchrone un flux de travail à l’aide de la définition de flux de travail et de l’objet <see cref="T:System.Collections.Generic.IDictionary`2" /> des paramètres d’entrée qui ont été spécifiés.</summary>
        <returns>Dictionnaire des valeurs <see cref="T:System.Activities.OutArgument" /> et <see cref="T:System.Activities.InOutArgument" /> de l’activité racine indexées par nom d’argument et représentant les sorties du flux de travail.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode s'interrompt jusqu'à ce que le flux de travail soit terminé, durée d'inactivité incluse. L'exécution du flux de travail se déroule toujours intégralement sur le thread appelant. Pour configurer un intervalle de délai d'attente au cours duquel le flux de travail doit être exécuté, utilisez l'une des surcharges de <xref:System.Activities.WorkflowInvoker.Invoke%2A> acceptant un objet <xref:System.TimeSpan>.  
  
   
  
## Examples  
 L’exemple suivant appelle un workflow composé d’une activité `Divide` unique qui a deux arguments d’entrée et deux arguments de sortie. Lorsque le workflow est appelé, le dictionnaire d’arguments (`arguments`) est passé ; il contient les valeurs de chaque argument d’entrée, indexées par nom d’argument. Lors du retour de l’appel à `Invoke`, chaque argument de sortie, également indexé par nom d’argument, est retourné dans le dictionnaire `outputs`.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#120](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#120)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#20](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#20)]  
  
 Si le flux de travail dérive <xref:System.Activities.ActivityWithResult>, tel que `CodeActivity<TResult>` ou `Activity<TResult>`, et il existe des arguments de sortie en plus de bien définis <xref:System.Activities.Activity%601.Result%2A> sortie argument, une surcharge non générique de `Invoke`, telle que celle-ci, doit être utilisé dans afin de récupérer les arguments supplémentaires. Pour ce faire, la définition de workflow passée dans `Invoke` doit être de type <xref:System.Activities.Activity>. Dans cet exemple le `Divide` activité dérive `CodeActivity<int>`, mais est déclarée comme <xref:System.Activities.Activity> afin que cette surcharge de `Invoke`, qui retourne un dictionnaire d’arguments au lieu d’une seule valeur de retournée, est utilisé.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#121](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#121)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#21](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity, timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity * TimeSpan -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="workflow">Définition du flux de travail à appeler.</param>
        <param name="timeout">Intervalle pendant lequel le flux de travail doit s'exécuter avant qu'il ne soit interrompu et qu'une exception <see cref="T:System.TimeoutException" /> ne soit levée.</param>
        <summary>Appelle de façon synchrone un flux de travail à l’aide de la définition de flux de travail et de l’intervalle de délai d’attente qui ont été spécifiés.</summary>
        <returns>Dictionnaire des valeurs <see cref="T:System.Activities.OutArgument" /> et <see cref="T:System.Activities.InOutArgument" /> de l’activité racine indexées par nom d’argument et représentant les sorties du flux de travail.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode s'interrompt jusqu'à ce que le flux de travail soit terminé, durée d'inactivité incluse. L'exécution du flux de travail se déroule toujours intégralement sur le thread appelant. Si le flux de travail ne se termine pas dans le délai spécifié, le flux de travail est interrompu et une exception <xref:System.TimeoutException> est levée.  
  
> [!NOTE]
>  <xref:System.TimeoutException> est levée uniquement si l'intervalle de délai d'attente est écoulé et que le workflow devient inactif pendant l'exécution. Un flux de travail dont le délai d'exécution dépasse l'intervalle de délai d'attente spécifié se termine correctement s'il ne devient pas inactif.  
  
   
  
## Examples  
 L'exemple suivant appelle un flux de travail qui contient deux activités <xref:System.Activities.Statements.WriteLine> et une activité <xref:System.Activities.Statements.Delay> configurée avec une propriété <xref:System.Activities.Statements.Delay.Duration%2A> égale à une minute. Ce flux de travail est appelé deux fois ; la première fois avec un intervalle de délai d'attente de 2 minutes et la deuxième fois avec un intervalle de délai d'attente de 30 secondes. Le premier flux de travail se termine correctement, mais pas le deuxième, et une exception <xref:System.TimeoutException> est levée.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#50](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#50)]  
  
 Pour obtenir un exemple d’utilisation de `Invoke` avec les arguments de sortie, consultez la surcharge de <xref:System.Activities.WorkflowInvoker.Invoke%2A> avec les mêmes paramètres que cette surcharge sans le délai d’attente.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (inputs As IDictionary(Of String, Object), timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.Invoke (inputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="inputs">Dictionnaire des paramètres d’entrée du flux de travail, indexés par nom d’argument.</param>
        <param name="timeout">Intervalle pendant lequel le flux de travail doit s'exécuter avant qu'il ne soit interrompu et qu'une exception <see cref="T:System.TimeoutException" /> ne soit levée.</param>
        <summary>Appelle l’activité passée au constructeur de <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> de façon synchrone avec l’objet <see cref="T:System.Collections.Generic.IDictionary`2" /> des paramètres d’entrée et l’intervalle de délai d’attente qui ont été spécifiés.</summary>
        <returns>Dictionnaire des valeurs <see cref="T:System.Activities.OutArgument" /> et <see cref="T:System.Activities.InOutArgument" /> de l’activité racine indexées par nom d’argument et représentant les sorties du flux de travail.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode s'interrompt jusqu'à ce que le flux de travail soit terminé, durée d'inactivité incluse. L'exécution du flux de travail se déroule toujours intégralement sur le thread appelant. Si le flux de travail ne se termine pas dans le délai spécifié, le flux de travail est interrompu et une exception <xref:System.TimeoutException> est levée.  
  
> [!NOTE]
>  <xref:System.TimeoutException> est levée uniquement si l'intervalle de délai d'attente est écoulé et que le workflow devient inactif pendant l'exécution. Un flux de travail dont le délai d'exécution dépasse l'intervalle de délai d'attente spécifié se termine correctement s'il ne devient pas inactif.  
  
   
  
## Examples  
 L'exemple suivant appelle un flux de travail qui contient deux activités <xref:System.Activities.Statements.WriteLine> et une activité <xref:System.Activities.Statements.Delay> configurée avec une propriété <xref:System.Activities.Statements.Delay.Duration%2A> égale à une minute. Ce flux de travail est appelé deux fois ; la première fois avec un intervalle de délai d'attente de 2 minutes et la deuxième fois avec un intervalle de délai d'attente de 30 secondes. Le premier flux de travail se termine correctement, mais pas le deuxième ; une exception <xref:System.TimeoutException> est levée et le message suivant s'affiche.  
  
```Output  
The operation did not complete within the allotted timeout of 00:00:30.   
The time allotted to this operation may have been a portion of a longer timeout.  
```  
  
 [!code-csharp[CFX_WorkflowInvokerExample#51](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#51)]  
  
 Pour obtenir un exemple d’utilisation de `Invoke` avec les arguments d’entrée et de sortie, consultez la surcharge de <xref:System.Activities.WorkflowInvoker.Invoke%2A> avec les mêmes paramètres que cette surcharge sans le délai d’attente.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity, inputs As IDictionary(Of String, Object), timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity * System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="workflow">Définition du flux de travail à appeler.</param>
        <param name="inputs">Dictionnaire des paramètres d’entrée du flux de travail, indexés par nom d’argument.</param>
        <param name="timeout">Intervalle pendant lequel le flux de travail doit s'exécuter avant qu'il ne soit interrompu et qu'une exception <see cref="T:System.TimeoutException" /> ne soit levée.</param>
        <summary>Appelle de façon synchrone un flux de travail à l’aide de la définition de flux de travail, de l’objet <see cref="T:System.Collections.Generic.IDictionary`2" /> des paramètres d’entrée et de l’intervalle de délai d’attente qui ont été spécifiés.</summary>
        <returns>Dictionnaire des valeurs <see cref="T:System.Activities.OutArgument" /> et <see cref="T:System.Activities.InOutArgument" /> de l’activité racine indexées par nom d’argument et représentant les sorties du flux de travail.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode s'interrompt jusqu'à ce que le flux de travail soit terminé, durée d'inactivité incluse. L'exécution du flux de travail se déroule toujours intégralement sur le thread appelant. Si le flux de travail ne se termine pas dans le délai spécifié, le flux de travail est interrompu et une exception <xref:System.TimeoutException> est levée.  
  
> [!NOTE]
>  <xref:System.TimeoutException> est levée uniquement si l'intervalle de délai d'attente est écoulé et que le workflow devient inactif pendant l'exécution. Un flux de travail dont le délai d'exécution dépasse l'intervalle de délai d'attente spécifié se termine correctement s'il ne devient pas inactif.  
  
   
  
## Examples  
 L'exemple suivant appelle un flux de travail qui contient deux activités <xref:System.Activities.Statements.WriteLine> et une activité <xref:System.Activities.Statements.Delay> configurée avec une propriété <xref:System.Activities.Statements.Delay.Duration%2A> égale à une minute. Ce flux de travail est appelé deux fois ; la première fois avec un intervalle de délai d'attente de 2 minutes et la deuxième fois avec un intervalle de délai d'attente de 30 secondes. Le premier flux de travail se termine correctement, mais pas le deuxième, et une exception <xref:System.TimeoutException> est levée.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#50](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#50)]  
  
 Pour obtenir un exemple d’utilisation de `Invoke` avec les arguments d’entrée et de sortie, consultez la surcharge de <xref:System.Activities.WorkflowInvoker.Invoke%2A> avec les mêmes paramètres que cette surcharge sans le délai d’attente.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult)) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity&lt;'Result&gt; -&gt; 'Result" Usage="System.Activities.WorkflowInvoker.Invoke workflow" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">Type de flux de travail.</typeparam>
        <param name="workflow">Définition du flux de travail à appeler. La définition du flux de travail doit dériver de l'objet <see cref="T:System.Activities.ActivityWithResult" />.</param>
        <summary>Appelle de façon synchrone un flux de travail à l’aide de la définition de flux de travail passée au constructeur de <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" />.</summary>
        <returns>Valeur de type TResult avec le résultat de l'exécution de l'activité.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode s'interrompt jusqu'à ce que le flux de travail soit terminé, durée d'inactivité incluse. L'exécution du flux de travail se déroule toujours intégralement sur le thread appelant. Pour configurer un intervalle de délai d'attente au cours duquel le flux de travail doit être exécuté, utilisez l'une des surcharges de <xref:System.Activities.WorkflowInvoker.Invoke%2A> acceptant un objet <xref:System.TimeSpan>.  
  
   
  
## Examples  
 L’exemple suivant appelle un workflow consistant en un seul `Add` activité qui a deux arguments d’entrée et dans la mesure où elle est dérivée de `CodeActivity<int>` il existe bien définis <xref:System.Activities.Activity%601.Result%2A> argument de sortie. Lorsque le workflow est appelé, le dictionnaire d'arguments (`arguments`) est passé ; il contient les valeurs de chaque argument d'entrée, indexées par nom d'argument. Lors de l’appel à `Invoke` est retournée, la valeur de la <xref:System.Activities.Activity%601.Result%2A> argument de sortie est retournée. Cet exemple de code repose issu de la [à l’aide de la classe WorkflowInvoker](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) exemple.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult), inputs As IDictionary(Of String, Object)) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity&lt;'Result&gt; * System.Collections.Generic.IDictionary&lt;string, obj&gt; -&gt; 'Result" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">Type de flux de travail.</typeparam>
        <param name="workflow">Définition du flux de travail à appeler.</param>
        <param name="inputs">Dictionnaire des paramètres d’entrée du flux de travail, indexés par nom d’argument.</param>
        <summary>Appelle de façon synchrone un flux de travail à l’aide de la définition de flux de travail et de l’objet <see cref="T:System.Collections.Generic.IDictionary`2" /> des paramètres d’entrée qui ont été spécifiés.</summary>
        <returns>Valeur de type TResult avec le résultat de l'exécution de l'activité.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode s'interrompt jusqu'à ce que le flux de travail soit terminé, durée d'inactivité incluse. L'exécution du flux de travail se déroule toujours intégralement sur le thread appelant. Pour configurer un intervalle de délai d'attente au cours duquel le flux de travail doit être exécuté, utilisez l'une des surcharges de <xref:System.Activities.WorkflowInvoker.Invoke%2A> acceptant un objet <xref:System.TimeSpan>.  
  
> [!NOTE]
>  <xref:System.TimeoutException> est levée uniquement si l'intervalle de délai d'attente est écoulé et que le workflow devient inactif pendant l'exécution. Un flux de travail dont le délai d'exécution dépasse l'intervalle de délai d'attente spécifié se termine correctement s'il ne devient pas inactif.  
  
   
  
## Examples  
 L’exemple suivant appelle un workflow consistant en un seul `Add` activité qui a deux arguments d’entrée et dans la mesure où elle est dérivée de `CodeActivity<int>` il existe bien définis <xref:System.Activities.Activity%601.Result%2A> argument de sortie. Lorsque le workflow est appelé, le dictionnaire d'arguments (`arguments`) est passé ; il contient les valeurs de chaque argument d'entrée, indexées par nom d'argument. Lors de l’appel à `Invoke` est retournée, la valeur de la <xref:System.Activities.Activity%601.Result%2A> argument de sortie est retournée. Cet exemple de code repose issu de la [à l’aide de la classe WorkflowInvoker](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) exemple.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult), inputs As IDictionary(Of String, Object), timeout As TimeSpan) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity&lt;'Result&gt; * System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan -&gt; 'Result" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">Type de flux de travail.</typeparam>
        <param name="workflow">Définition du flux de travail à appeler.</param>
        <param name="inputs">Dictionnaire des paramètres d’entrée du flux de travail, indexés par nom d’argument.</param>
        <param name="timeout">Intervalle pendant lequel le flux de travail doit s'exécuter avant qu'il ne soit interrompu et qu'une exception <see cref="T:System.TimeoutException" /> ne soit levée.</param>
        <summary>Appelle de façon synchrone un flux de travail à l’aide de la définition de flux de travail, de l’objet <see cref="T:System.Collections.Generic.IDictionary`2" /> des paramètres d’entrée et de l’intervalle de délai d’attente qui ont été spécifiés.</summary>
        <returns>Valeur de type TResult avec le résultat de l'exécution de l'activité.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode s'interrompt jusqu'à ce que le flux de travail soit terminé, durée d'inactivité incluse. L'exécution du flux de travail se déroule toujours intégralement sur le thread appelant. Si le flux de travail ne se termine pas dans le délai spécifié, le flux de travail est interrompu et une exception <xref:System.TimeoutException> est levée.  
  
> [!NOTE]
>  <xref:System.TimeoutException> est levée uniquement si l'intervalle de délai d'attente est écoulé et que le workflow devient inactif pendant l'exécution. Un flux de travail dont le délai d'exécution dépasse l'intervalle de délai d'attente spécifié se termine correctement s'il ne devient pas inactif.  
  
   
  
## Examples  
 L’exemple suivant appelle un workflow consistant en un seul `Add` activité qui a deux arguments d’entrée et dans la mesure où elle est dérivée de `CodeActivity<int>` il existe bien définis <xref:System.Activities.Activity%601.Result%2A> argument de sortie. Lorsque le workflow est appelé, le dictionnaire d'arguments (`arguments`) est passé ; il contient les valeurs de chaque argument d'entrée, indexées par nom d'argument. Lors de l’appel à `Invoke` est retournée, la valeur de la <xref:System.Activities.Activity%601.Result%2A> argument de sortie est retournée. Cet exemple de code repose issu de la [à l’aide de la classe WorkflowInvoker](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) exemple.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, out System.Collections.Generic.IDictionary&lt;string,object&gt; additionalOutputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, [out] class System.Collections.Generic.IDictionary`2&lt;string, object&gt;&amp; additionalOutputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object}@,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult), inputs As IDictionary(Of String, Object), ByRef additionalOutputs As IDictionary(Of String, Object), timeout As TimeSpan) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, [Runtime::InteropServices::Out] System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ % additionalOutputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity&lt;'Result&gt; * System.Collections.Generic.IDictionary&lt;string, obj&gt; *  * TimeSpan -&gt; 'Result" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs, additionalOutputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="additionalOutputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" RefType="out" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">Type de flux de travail.</typeparam>
        <param name="workflow">Définition du flux de travail à appeler.</param>
        <param name="inputs">Dictionnaire des paramètres d’entrée du flux de travail, indexés par nom d’argument.</param>
        <param name="additionalOutputs">Dictionnaire des paramètres de sortie supplémentaires du flux de travail, indexés par nom d’argument.</param>
        <param name="timeout">Intervalle pendant lequel le flux de travail doit s'exécuter avant qu'il ne soit interrompu et qu'une exception <see cref="T:System.TimeoutException" /> ne soit levée.</param>
        <summary>Appelle de façon synchrone un flux de travail à l’aide de la définition de flux de travail, de l’objet <see cref="T:System.Collections.Generic.IDictionary`2" /> des paramètres d’entrée, de l’objet <see cref="T:System.Collections.Generic.IDictionary`2" /> des paramètres de sortie supplémentaires et de l’intervalle de délai d’attente qui ont été spécifiés.</summary>
        <returns>Valeur de type TResult avec le résultat de l'exécution de l'activité.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode s'interrompt jusqu'à ce que le flux de travail soit terminé, durée d'inactivité incluse. L'exécution du flux de travail se déroule toujours intégralement sur le thread appelant. Si le flux de travail ne se termine pas dans le délai spécifié, le flux de travail est interrompu et une exception <xref:System.TimeoutException> est levée.  
  
> [!NOTE]
>  <xref:System.TimeoutException> est levée uniquement si l'intervalle de délai d'attente est écoulé et que le workflow devient inactif pendant l'exécution. Un flux de travail dont le délai d'exécution dépasse l'intervalle de délai d'attente spécifié se termine correctement s'il ne devient pas inactif.  
  
   
  
## Examples  
 L’exemple suivant appelle un workflow consistant en un seul `Add` activité qui a deux arguments d’entrée et dans la mesure où elle est dérivée de `CodeActivity<int>` il existe bien définis <xref:System.Activities.Activity%601.Result%2A> argument de sortie. Lorsque le workflow est appelé, le dictionnaire d'arguments (`arguments`) est passé ; il contient les valeurs de chaque argument d'entrée, indexées par nom d'argument. Lors de l’appel à `Invoke` est retournée, la valeur de la <xref:System.Activities.Activity%601.Result%2A> argument de sortie est retournée. Cet exemple de code repose issu de la [à l’aide de la classe WorkflowInvoker](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) exemple.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="InvokeAsync">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Appelle de façon asynchrone un flux de travail à l’aide du modèle de conception asynchrone basé sur les événements.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour être informé de la fin du flux de travail, gérez l'événement <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. Pour configurer un intervalle de délai d'attente au cours duquel le flux de travail doit être exécuté, utilisez l'une des surcharges de <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> acceptant un objet <xref:System.TimeSpan>.  
  
 Cette méthode appelle de façon asynchrone un flux de travail à l’aide du modèle de conception asynchrone basé sur les événements. Pour plus d’informations, consultez l’article [Vue d’ensemble du modèle asynchrone basé sur les événements](https://go.microsoft.com/fwlink/?LinkId=141765).  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync();" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : unit -&gt; unit" Usage="workflowInvoker.InvokeAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Appelle un flux de travail de façon asynchrone.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour être informé de la fin du flux de travail, gérez l'événement <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. Pour configurer un intervalle de délai d'attente au cours duquel le flux de travail doit être exécuté, utilisez l'une des surcharges de <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> acceptant un objet <xref:System.TimeSpan>.  
  
 Cette méthode appelle de façon asynchrone un flux de travail à l’aide du modèle de conception asynchrone basé sur les événements. Pour plus d’informations, consultez l’article [Vue d’ensemble du modèle asynchrone basé sur les événements](https://go.microsoft.com/fwlink/?LinkId=141765).  
  
   
  
## Examples  
 L'exemple suivant appelle un flux de travail composé d'une activité `LongRunningDiceRoll`. L'activité `LongRunningDiceRoll` a deux arguments de sortie qui représentent les résultats du jet de dés. Lorsque le flux de travail se termine, ces arguments sont récupérés dans le gestionnaire d'événements <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : System.Collections.Generic.IDictionary&lt;string, obj&gt; -&gt; unit" Usage="workflowInvoker.InvokeAsync inputs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="inputs">Dictionnaire des paramètres d’entrée du flux de travail, indexés par nom d’argument.</param>
        <summary>Appelle de façon asynchrone un flux de travail à l'aide de l'objet <see cref="T:System.Collections.Generic.IDictionary`2" /> spécifié des paramètres d'entrée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour être informé de la fin du flux de travail, gérez l'événement <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. Pour configurer un intervalle de délai d'attente au cours duquel le flux de travail doit être exécuté, utilisez l'une des surcharges de <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> acceptant un objet <xref:System.TimeSpan>.  
  
 Cette méthode appelle de façon asynchrone un flux de travail à l’aide du modèle de conception asynchrone basé sur les événements. Pour plus d’informations, consultez l’article [Vue d’ensemble du modèle asynchrone basé sur les événements](https://go.microsoft.com/fwlink/?LinkId=141765).  
  
   
  
## Examples  
 L'exemple suivant appelle un flux de travail composé d'une activité `LongRunningDiceRoll`. L'activité `LongRunningDiceRoll` a deux arguments de sortie qui représentent les résultats du jet de dés. Lorsque le flux de travail se termine, ces arguments sont récupérés dans le gestionnaire d'événements <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : obj -&gt; unit" Usage="workflowInvoker.InvokeAsync userState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userState">Objet fourni par l'utilisateur permettant de distinguer cet appel asynchrone particulier des autres opérations courantes d'appel asynchrone.</param>
        <summary>Appelle de façon asynchrone un flux de travail à l'aide de l'identificateur unique spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le paramètre `userState` doit être unique à travers toutes les opérations <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> en cours d'exécution pour l'activité actuelle. Si le paramètre `userState` n'est pas unique, une exception <xref:System.ArgumentException> est levée `userState` permet d'identifier le flux de travail dans l'événement <xref:System.Activities.WorkflowInvoker.InvokeCompleted> et d'annuler le flux de travail à l'aide de la méthode <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.  
  
 Pour être informé de la fin du flux de travail, gérez l'événement <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. Pour configurer un intervalle de délai d'attente au cours duquel le flux de travail doit être exécuté, utilisez l'une des surcharges de <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> acceptant un objet <xref:System.TimeSpan>.  
  
 Cette méthode appelle de façon asynchrone un flux de travail à l’aide du modèle de conception asynchrone basé sur les événements. Pour plus d’informations, consultez l’article [Vue d’ensemble du modèle asynchrone basé sur les événements](https://go.microsoft.com/fwlink/?LinkId=141765).  
  
   
  
## Examples  
 L'exemple suivant appelle un flux de travail composé d'une activité `LongRunningDiceRoll`. L'activité `LongRunningDiceRoll` a deux arguments de sortie qui représentent les résultats du jet de dés. Lorsque le flux de travail se termine, ces arguments sont récupérés dans le gestionnaire d'événements <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : TimeSpan -&gt; unit" Usage="workflowInvoker.InvokeAsync timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">Intervalle pendant lequel le flux de travail doit s'exécuter avant qu'il ne soit interrompu et qu'une exception <see cref="T:System.TimeoutException" /> ne soit levée.</param>
        <summary>Appelle de façon asynchrone un flux de travail avec l'intervalle de délai d'attente spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour être informé de la fin du flux de travail, gérez l'événement <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. Si le flux de travail ne se termine pas dans le délai spécifié, le flux de travail est interrompu et une exception <xref:System.TimeoutException> est levée.  
  
> [!NOTE]
>  <xref:System.TimeoutException> est levée uniquement si l'intervalle de délai d'attente est écoulé et que le workflow devient inactif pendant l'exécution. Un flux de travail dont le délai d'exécution dépasse l'intervalle de délai d'attente spécifié se termine correctement s'il ne devient pas inactif.  
  
 Cette méthode appelle de façon asynchrone un flux de travail à l’aide du modèle de conception asynchrone basé sur les événements. Pour plus d’informations, consultez l’article [Vue d’ensemble du modèle asynchrone basé sur les événements](https://go.microsoft.com/fwlink/?LinkId=141765).  
  
   
  
## Examples  
 L'exemple suivant appelle un flux de travail composé d'une activité `LongRunningDiceRoll`. L'activité `LongRunningDiceRoll` a deux arguments de sortie qui représentent les résultats du jet de dés. Lorsque le flux de travail se termine, ces arguments sont récupérés dans le gestionnaire d'événements <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object), userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : System.Collections.Generic.IDictionary&lt;string, obj&gt; * obj -&gt; unit" Usage="workflowInvoker.InvokeAsync (inputs, userState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs">Dictionnaire des paramètres d’entrée du flux de travail, indexés par nom d’argument.</param>
        <param name="userState">Objet fourni par l'utilisateur permettant de distinguer cet appel asynchrone particulier des autres opérations courantes d'appel asynchrone.</param>
        <summary>Appelle de façon asynchrone un flux de travail à l'aide de l'objet <see cref="T:System.Collections.Generic.IDictionary`2" /> des paramètres d'entrée qui est spécifié et d'un identificateur unique.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le paramètre `userState` doit être unique à travers toutes les opérations <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> en cours d'exécution pour l'activité actuelle. Si `userState` n'est pas unique, une exception <xref:System.ArgumentException> est levée `userState` permet d'identifier le flux de travail dans l'événement <xref:System.Activities.WorkflowInvoker.InvokeCompleted> et d'annuler le flux de travail à l'aide de la méthode <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.  
  
 Pour être informé de la fin du flux de travail, gérez l'événement <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. Pour configurer un intervalle de délai d'attente au cours duquel le flux de travail doit être exécuté, utilisez l'une des surcharges de <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> acceptant un objet <xref:System.TimeSpan>.  
  
 Cette méthode appelle de façon asynchrone un flux de travail à l’aide du modèle de conception asynchrone basé sur les événements. Pour plus d’informations, consultez l’article [Vue d’ensemble du modèle asynchrone basé sur les événements](https://go.microsoft.com/fwlink/?LinkId=141765).  
  
   
  
## Examples  
 L'exemple suivant appelle un flux de travail composé d'une activité `LongRunningDiceRoll`. L'activité `LongRunningDiceRoll` a deux arguments de sortie qui représentent les résultats du jet de dés. Lorsque le flux de travail se termine, ces arguments sont récupérés dans le gestionnaire d'événements <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object), timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan -&gt; unit" Usage="workflowInvoker.InvokeAsync (inputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="inputs">Dictionnaire des paramètres d’entrée du flux de travail, indexés par nom d’argument.</param>
        <param name="timeout">Intervalle pendant lequel le flux de travail doit s'exécuter avant qu'il ne soit interrompu et qu'une exception <see cref="T:System.TimeoutException" /> ne soit levée.</param>
        <summary>Appelle de façon asynchrone un flux de travail avec l'objet <see cref="T:System.Collections.Generic.IDictionary`2" /> des paramètres d'entrée et l'intervalle de délai d'attente qui ont été spécifiés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour être informé de la fin du flux de travail, gérez l'événement <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. Si le flux de travail ne se termine pas dans le délai spécifié, le flux de travail est interrompu et une exception <xref:System.TimeoutException> est levée.  
  
> [!NOTE]
>  <xref:System.TimeoutException> est levée uniquement si l'intervalle de délai d'attente est écoulé et que le workflow devient inactif pendant l'exécution. Un flux de travail dont le délai d'exécution dépasse l'intervalle de délai d'attente spécifié se termine correctement s'il ne devient pas inactif.  
  
 Cette méthode appelle de façon asynchrone un flux de travail à l’aide du modèle de conception asynchrone basé sur les événements. Pour plus d’informations, consultez l’article [Vue d’ensemble du modèle asynchrone basé sur les événements](https://go.microsoft.com/fwlink/?LinkId=141765).  
  
   
  
## Examples  
 L'exemple suivant appelle un flux de travail composé d'une activité `LongRunningDiceRoll`. L'activité `LongRunningDiceRoll` a deux arguments de sortie qui représentent les résultats du jet de dés. Lorsque le flux de travail se termine, ces arguments sont récupérés dans le gestionnaire d'événements <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (TimeSpan timeout, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(valuetype System.TimeSpan timeout, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (timeout As TimeSpan, userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(TimeSpan timeout, System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : TimeSpan * obj -&gt; unit" Usage="workflowInvoker.InvokeAsync (timeout, userState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout">Intervalle pendant lequel le flux de travail doit s'exécuter avant qu'il ne soit interrompu et qu'une exception <see cref="T:System.TimeoutException" /> ne soit levée.</param>
        <param name="userState">Objet fourni par l'utilisateur permettant de distinguer cet appel asynchrone particulier des autres opérations courantes d'appel asynchrone.</param>
        <summary>Appelle de façon asynchrone un flux de travail avec l'intervalle de délai d'attente spécifié et un identificateur unique.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le paramètre `userState` doit être unique à travers toutes les opérations <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> en cours d'exécution pour l'activité actuelle. Si `userState` n'est pas unique, une exception <xref:System.ArgumentException> est levée `userState` permet d'identifier le flux de travail dans l'événement <xref:System.Activities.WorkflowInvoker.InvokeCompleted> et d'annuler le flux de travail à l'aide de la méthode <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.  
  
 Pour être informé de la fin du flux de travail, gérez l'événement <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. Si le flux de travail ne se termine pas dans le délai spécifié, le flux de travail est interrompu et une exception <xref:System.TimeoutException> est levée.  
  
> [!NOTE]
>  <xref:System.TimeoutException> est levée uniquement si l'intervalle de délai d'attente est écoulé et que le workflow devient inactif pendant l'exécution. Un flux de travail dont le délai d'exécution dépasse l'intervalle de délai d'attente spécifié se termine correctement s'il ne devient pas inactif.  
  
 Cette méthode appelle de façon asynchrone un flux de travail à l’aide du modèle de conception asynchrone basé sur les événements. Pour plus d’informations, consultez l’article [Vue d’ensemble du modèle asynchrone basé sur les événements](https://go.microsoft.com/fwlink/?LinkId=141765).  
  
   
  
## Examples  
 L'exemple suivant appelle un flux de travail composé d'une activité `LongRunningDiceRoll`. L'activité `LongRunningDiceRoll` a deux arguments de sortie qui représentent les résultats du jet de dés. Lorsque le flux de travail se termine, ces arguments sont récupérés dans le gestionnaire d'événements <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object), timeout As TimeSpan, userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout, System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan * obj -&gt; unit" Usage="workflowInvoker.InvokeAsync (inputs, timeout, userState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs">Dictionnaire des paramètres d’entrée du flux de travail, indexés par nom d’argument.</param>
        <param name="timeout">Intervalle pendant lequel le flux de travail doit s'exécuter avant qu'il ne soit interrompu et qu'une exception <see cref="T:System.TimeoutException" /> ne soit levée.</param>
        <param name="userState">Objet fourni par l'utilisateur permettant de distinguer cet appel asynchrone particulier des autres opérations courantes d'appel asynchrone.</param>
        <summary>Appelle de façon asynchrone un flux de travail avec l'objet <see cref="T:System.Collections.Generic.IDictionary`2" /> des paramètres d'entrée qui est spécifié, l'intervalle de délai d'attente indiqué et un identificateur unique.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le paramètre `userState` doit être unique à travers toutes les opérations <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> en cours d'exécution pour l'activité actuelle. Si `userState` n'est pas unique, une exception <xref:System.ArgumentException> est levée `userState` permet d'identifier le flux de travail dans l'événement <xref:System.Activities.WorkflowInvoker.InvokeCompleted> et d'annuler le flux de travail à l'aide de la méthode <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.  
  
 Pour être informé de la fin du flux de travail, gérez l'événement <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. Si le flux de travail ne se termine pas dans le délai spécifié, le flux de travail est interrompu et une exception <xref:System.TimeoutException> est levée.  
  
> [!NOTE]
>  <xref:System.TimeoutException> est levée uniquement si l'intervalle de délai d'attente est écoulé et que le workflow devient inactif pendant l'exécution. Un flux de travail dont le délai d'exécution dépasse l'intervalle de délai d'attente spécifié se termine correctement s'il ne devient pas inactif.  
  
 Cette méthode appelle de façon asynchrone un flux de travail à l’aide du modèle de conception asynchrone basé sur les événements. Pour plus d’informations, consultez l’article [Vue d’ensemble du modèle asynchrone basé sur les événements](https://go.microsoft.com/fwlink/?LinkId=141765).  
  
   
  
## Examples  
 L'exemple suivant appelle un flux de travail composé d'une activité `LongRunningDiceRoll`. L'activité `LongRunningDiceRoll` a deux arguments de sortie qui représentent les résultats du jet de dés. Lorsque le flux de travail se termine, ces arguments sont récupérés dans le gestionnaire d'événements <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Activities.InvokeCompletedEventArgs&gt; InvokeCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Activities.InvokeCompletedEventArgs&gt; InvokeCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Activities.WorkflowInvoker.InvokeCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Event InvokeCompleted As EventHandler(Of InvokeCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Activities::InvokeCompletedEventArgs ^&gt; ^ InvokeCompleted;" />
      <MemberSignature Language="F#" Value="member this.InvokeCompleted : EventHandler&lt;System.Activities.InvokeCompletedEventArgs&gt; " Usage="member this.InvokeCompleted : System.EventHandler&lt;System.Activities.InvokeCompletedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Activities.InvokeCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque le flux de travail appelé par l'une des surcharges de <see cref="Overload:System.Activities.WorkflowInvoker.InvokeAsync" /> est terminé ou annulé.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gérez cet événement pour déterminer si un flux de travail appelé avec l'une des surcharges de <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> s'est exécuté correctement et pour récupérer les arguments de sortie du flux de travail terminé.  
  
   
  
## Examples  
 L'exemple suivant appelle un flux de travail composé d'une activité `LongRunningDiceRoll`. L'activité `LongRunningDiceRoll` a deux arguments de sortie qui représentent les résultats du jet de dés. Lorsque le flux de travail se termine, ces arguments sont récupérés dans le gestionnaire d'événements <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>