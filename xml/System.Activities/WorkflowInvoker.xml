<Type Name="WorkflowInvoker" FullName="System.Activities.WorkflowInvoker">
  <Metadata><Meta Name="ms.openlocfilehash" Value="73cad7482ec89c2404cb253c90cebeaaff316196" /><Meta Name="ms.sourcegitcommit" Value="0e1f030650a307c745ee84ed547ef858acaea587" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="11/29/2018" /><Meta Name="ms.locfileid" Value="52590229" /></Metadata><TypeSignature Language="C#" Value="public sealed class WorkflowInvoker" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit WorkflowInvoker extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Activities.WorkflowInvoker" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class WorkflowInvoker" />
  <TypeSignature Language="C++ CLI" Value="public ref class WorkflowInvoker sealed" />
  <TypeSignature Language="F#" Value="type WorkflowInvoker = class" />
  <AssemblyInfo>
    <AssemblyName>System.Activities</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="60b8d-101">Fournit un moyen pour appeler un flux de travail comme s'il s'agissait d'un appel de méthode.</span><span class="sxs-lookup"><span data-stu-id="60b8d-101">Provides a means for invoking a workflow as if it were a method call.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60b8d-102"><xref:System.Activities.WorkflowInvoker> contient les méthodes d'instance et les méthodes statiques permettant d'appeler les flux de travail de façon synchrone, ainsi que les méthodes d'instance permettant de les appeler de façon asynchrone.</span><span class="sxs-lookup"><span data-stu-id="60b8d-102"><xref:System.Activities.WorkflowInvoker> contains both instance and static methods for invoking workflows synchronously, and instance methods for invoking workflows asynchronously.</span></span>  
  
 <span data-ttu-id="60b8d-103"><xref:System.Activities.WorkflowInvoker> n'autorise pas le contrôle d'instance tel que la persistance, le déchargement ou la reprise de signets.</span><span class="sxs-lookup"><span data-stu-id="60b8d-103"><xref:System.Activities.WorkflowInvoker> does not allow instance control such as persisting, unloading, or resuming bookmarks.</span></span> <span data-ttu-id="60b8d-104">Si le contrôle d'instance est souhaité, utilisez à la place <xref:System.Activities.WorkflowApplication>.</span><span class="sxs-lookup"><span data-stu-id="60b8d-104">If instance control is desired, use <xref:System.Activities.WorkflowApplication> instead.</span></span>  
  
 <span data-ttu-id="60b8d-105">Pour exécuter de façon synchrone les flux de travail sans contrôle d’instance, appelez la méthode <xref:System.Activities.WorkflowInvoker.Invoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="60b8d-105">To execute workflows synchronously with no instance control, call the <xref:System.Activities.WorkflowInvoker.Invoke%2A> method.</span></span> <span data-ttu-id="60b8d-106">Pour exécuter de façon asynchrone un flux de travail sans contrôle d'instance, utilisez les méthodes <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> et <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>, ou la méthode <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>.</span><span class="sxs-lookup"><span data-stu-id="60b8d-106">To execute a workflow asynchronously with no instance control, use the <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> and <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> method pairs, or the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60b8d-107">L’exemple suivant appelle de façon synchrone un flux de travail composé d’une activité <xref:System.Activities.Statements.WriteLine> unique à l’aide de <xref:System.Activities.WorkflowInvoker>.</span><span class="sxs-lookup"><span data-stu-id="60b8d-107">The following example synchronously invokes a workflow consisting of a single <xref:System.Activities.Statements.WriteLine> activity using <xref:System.Activities.WorkflowInvoker>.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#1](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WorkflowInvoker (System.Activities.Activity workflow);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Activities.Activity workflow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (workflow As Activity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WorkflowInvoker(System::Activities::Activity ^ workflow);" />
      <MemberSignature Language="F#" Value="new System.Activities.WorkflowInvoker : System.Activities.Activity -&gt; System.Activities.WorkflowInvoker" Usage="new System.Activities.WorkflowInvoker workflow" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
      </Parameters>
      <Docs>
        <param name="workflow"><span data-ttu-id="60b8d-108">Définition du flux de travail devant être appelé par cette instance de la classe <see cref="T:System.Activities.WorkflowInvoker" />.</span><span class="sxs-lookup"><span data-stu-id="60b8d-108">The workflow definition of the workflow to be invoked by this instance of the <see cref="T:System.Activities.WorkflowInvoker" /> class.</span></span></param>
        <summary><span data-ttu-id="60b8d-109">Initialise une nouvelle instance de la classe <see cref="T:System.Activities.WorkflowInvoker" />.</span><span class="sxs-lookup"><span data-stu-id="60b8d-109">Initializes a new instance of the <see cref="T:System.Activities.WorkflowInvoker" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60b8d-110"><xref:System.Activities.WorkflowInvoker> contient les méthodes d'instance et les méthodes statiques permettant d'appeler les flux de travail de façon synchrone, ainsi que les méthodes d'instance permettant de les appeler de façon asynchrone.</span><span class="sxs-lookup"><span data-stu-id="60b8d-110"><xref:System.Activities.WorkflowInvoker> contains both instance and static methods for invoking workflows synchronously, and instance methods for invoking workflows asynchronously.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60b8d-111">L'exemple suivant appelle un flux de travail composé d'une activité <xref:System.Activities.Statements.WriteLine> unique.</span><span class="sxs-lookup"><span data-stu-id="60b8d-111">The following example invokes a workflow consisting of a single <xref:System.Activities.Statements.WriteLine> activity.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#2](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginInvoke">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="60b8d-112">Appelle de façon asynchrone un flux de travail à l'aide du modèle de conception asynchrone <see cref="T:System.IAsyncResult" />.</span><span class="sxs-lookup"><span data-stu-id="60b8d-112">Invokes a workflow asynchronously using the <see cref="T:System.IAsyncResult" /> asynchronous design pattern.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60b8d-113">Pour plus d’informations, consultez [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span><span class="sxs-lookup"><span data-stu-id="60b8d-113">For more information, see [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : AsyncCallback * obj -&gt; IAsyncResult" Usage="workflowInvoker.BeginInvoke (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="60b8d-114">Méthode à appeler lorsque le flux de travail est terminé.</span><span class="sxs-lookup"><span data-stu-id="60b8d-114">The method to be called when the workflow has completed.</span></span></param>
        <param name="state"><span data-ttu-id="60b8d-115">Objet spécifique à l'application facultatif qui contient les informations sur l'opération asynchrone.</span><span class="sxs-lookup"><span data-stu-id="60b8d-115">An optional application-specific object that contains information about the asynchronous operation.</span></span></param>
        <summary><span data-ttu-id="60b8d-116">Appelle de façon asynchrone un flux de travail à l'aide de l'objet <see cref="T:System.AsyncCallback" /> spécifié et de l'état fourni par l'utilisateur.</span><span class="sxs-lookup"><span data-stu-id="60b8d-116">Invokes a workflow asynchronously using the specified <see cref="T:System.AsyncCallback" /> and user-provided state.</span></span></summary>
        <returns><span data-ttu-id="60b8d-117">Référence à l'opération d'appel asynchrone.</span><span class="sxs-lookup"><span data-stu-id="60b8d-117">A reference to the asynchronous invoke operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60b8d-118">Pour être informé quand le flux de travail est terminé et extraire les paramètres de sortie du flux de travail, appelez la méthode <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> à partir de la méthode `callback`.</span><span class="sxs-lookup"><span data-stu-id="60b8d-118">To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method.</span></span> <span data-ttu-id="60b8d-119">Si la méthode <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> est appelée avant que le flux de travail ne soit terminé, elle s'interrompt jusqu'à la fin du flux de travail.</span><span class="sxs-lookup"><span data-stu-id="60b8d-119">If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes.</span></span> <span data-ttu-id="60b8d-120">Pour configurer un intervalle de délai d'attente au cours duquel le flux de travail doit être exécuté, utilisez l'une des surcharges de <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> acceptant un objet <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="60b8d-120">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="60b8d-121">Cette méthode appelle de façon asynchrone un flux de travail à l’aide du modèle de conception asynchrone <xref:System.IAsyncResult>.</span><span class="sxs-lookup"><span data-stu-id="60b8d-121">This method invokes a workflow asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern.</span></span> <span data-ttu-id="60b8d-122">Pour plus d’informations, consultez [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span><span class="sxs-lookup"><span data-stu-id="60b8d-122">For more information, see [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60b8d-123">L'exemple suivant appelle un flux de travail composé d'une activité `LongRunningDiceRoll`.</span><span class="sxs-lookup"><span data-stu-id="60b8d-123">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="60b8d-124">L’activité `LongRunningDiceRoll` a deux arguments de sortie qui représentent les résultats du jet de dés.</span><span class="sxs-lookup"><span data-stu-id="60b8d-124">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="60b8d-125">Ces arguments sont récupérés via l'appel de <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="60b8d-125">These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span></span> <span data-ttu-id="60b8d-126">Lors du retour de l’appel à <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>, chaque argument de sortie, indexé par nom d’argument, est retourné dans le dictionnaire de sorties.</span><span class="sxs-lookup"><span data-stu-id="60b8d-126">When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (inputs As IDictionary(Of String, Object), callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Collections.Generic.IDictionary&lt;string, obj&gt; * AsyncCallback * obj -&gt; IAsyncResult" Usage="workflowInvoker.BeginInvoke (inputs, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs"><span data-ttu-id="60b8d-127">Dictionnaire des paramètres d’entrée du flux de travail, indexés par nom d’argument.</span><span class="sxs-lookup"><span data-stu-id="60b8d-127">The dictionary of input parameters to the workflow, keyed by argument name.</span></span></param>
        <param name="callback"><span data-ttu-id="60b8d-128">Méthode à appeler lorsque le flux de travail est terminé.</span><span class="sxs-lookup"><span data-stu-id="60b8d-128">The method to be called when the workflow has completed.</span></span></param>
        <param name="state"><span data-ttu-id="60b8d-129">Objet spécifique à l'application facultatif qui contient les informations sur l'opération asynchrone.</span><span class="sxs-lookup"><span data-stu-id="60b8d-129">An optional application-specific object that contains information about the asynchronous operation.</span></span></param>
        <summary><span data-ttu-id="60b8d-130">Appelle de façon asynchrone un flux de travail à l'aide de l'objet <see cref="T:System.Collections.Generic.IDictionary`2" /> spécifié des paramètres en entrée, de l'objet <see cref="T:System.AsyncCallback" /> et de l'état fourni par l'utilisateur.</span><span class="sxs-lookup"><span data-stu-id="60b8d-130">Invokes a workflow asynchronously using the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, <see cref="T:System.AsyncCallback" />, and user-provided state.</span></span></summary>
        <returns><span data-ttu-id="60b8d-131">Référence à l'opération d'appel asynchrone.</span><span class="sxs-lookup"><span data-stu-id="60b8d-131">A reference to the asynchronous invoke operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60b8d-132">Pour être informé quand le flux de travail est terminé et extraire les paramètres de sortie du flux de travail, appelez la méthode <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> à partir de la méthode `callback`.</span><span class="sxs-lookup"><span data-stu-id="60b8d-132">To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method.</span></span> <span data-ttu-id="60b8d-133">Si la méthode <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> est appelée avant que le flux de travail ne soit terminé, elle s'interrompt jusqu'à la fin du flux de travail.</span><span class="sxs-lookup"><span data-stu-id="60b8d-133">If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes.</span></span>  <span data-ttu-id="60b8d-134">Pour configurer un intervalle de délai d'attente au cours duquel le flux de travail doit être exécuté, utilisez l'une des surcharges de <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> acceptant un objet <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="60b8d-134">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="60b8d-135">Cette méthode appelle de façon asynchrone un flux de travail à l’aide du modèle de conception asynchrone <xref:System.IAsyncResult>.</span><span class="sxs-lookup"><span data-stu-id="60b8d-135">This method invokes a workflow asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern.</span></span> <span data-ttu-id="60b8d-136">Pour plus d’informations, consultez [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span><span class="sxs-lookup"><span data-stu-id="60b8d-136">For more information, see [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60b8d-137">L'exemple suivant appelle un flux de travail composé d'une activité `LongRunningDiceRoll`.</span><span class="sxs-lookup"><span data-stu-id="60b8d-137">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="60b8d-138">L’activité `LongRunningDiceRoll` a deux arguments de sortie qui représentent les résultats du jet de dés.</span><span class="sxs-lookup"><span data-stu-id="60b8d-138">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="60b8d-139">Ces arguments sont récupérés via l'appel de <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="60b8d-139">These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span></span> <span data-ttu-id="60b8d-140">Lors du retour de l’appel à <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>, chaque argument de sortie, indexé par nom d’argument, est retourné dans le dictionnaire de sorties.</span><span class="sxs-lookup"><span data-stu-id="60b8d-140">When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="workflowInvoker.BeginInvoke (timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="60b8d-141">Intervalle pendant lequel le flux de travail doit s'exécuter avant qu'il ne soit interrompu et qu'une exception <see cref="T:System.TimeoutException" /> ne soit levée.</span><span class="sxs-lookup"><span data-stu-id="60b8d-141">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span></span></param>
        <param name="callback"><span data-ttu-id="60b8d-142">Méthode à appeler lorsque le flux de travail est terminé.</span><span class="sxs-lookup"><span data-stu-id="60b8d-142">The method to be called when the workflow has completed.</span></span></param>
        <param name="state"><span data-ttu-id="60b8d-143">Objet spécifique à l'application facultatif qui contient les informations sur l'opération asynchrone.</span><span class="sxs-lookup"><span data-stu-id="60b8d-143">An optional application-specific object that contains information about the asynchronous operation.</span></span></param>
        <summary><span data-ttu-id="60b8d-144">Appelle de façon asynchrone un flux de travail à l'aide de l'intervalle de délai d'attente, de l'objet <see cref="T:System.AsyncCallback" /> et de l'état fourni par l'utilisateur qui ont été spécifiés.</span><span class="sxs-lookup"><span data-stu-id="60b8d-144">Invokes a workflow asynchronously using the specified time-out interval, <see cref="T:System.AsyncCallback" />, and user-provided state.</span></span></summary>
        <returns><span data-ttu-id="60b8d-145">Référence à l'opération d'appel asynchrone.</span><span class="sxs-lookup"><span data-stu-id="60b8d-145">A reference to the asynchronous invoke operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60b8d-146">Pour être informé quand le flux de travail est terminé et extraire les paramètres de sortie du flux de travail, appelez la méthode <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> à partir de la méthode `callback`.</span><span class="sxs-lookup"><span data-stu-id="60b8d-146">To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method.</span></span> <span data-ttu-id="60b8d-147">Si la méthode <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> est appelée avant que le flux de travail ne soit terminé, elle s'interrompt jusqu'à la fin du flux de travail.</span><span class="sxs-lookup"><span data-stu-id="60b8d-147">If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes.</span></span> <span data-ttu-id="60b8d-148">Si le flux de travail ne se termine pas dans le délai spécifié, le flux de travail est interrompu et une exception <xref:System.TimeoutException> est levée lorsque la méthode <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> est appelée.</span><span class="sxs-lookup"><span data-stu-id="60b8d-148">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown when the <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> method is called.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="60b8d-149"><xref:System.TimeoutException> est levée uniquement si l'intervalle de délai d'attente est écoulé et que le workflow devient inactif pendant l'exécution.</span><span class="sxs-lookup"><span data-stu-id="60b8d-149">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="60b8d-150">Un flux de travail dont le délai d'exécution dépasse l'intervalle de délai d'attente spécifié se termine correctement s'il ne devient pas inactif.</span><span class="sxs-lookup"><span data-stu-id="60b8d-150">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
 <span data-ttu-id="60b8d-151">Cette méthode appelle de façon asynchrone un flux de travail à l’aide du modèle de conception asynchrone <xref:System.IAsyncResult>.</span><span class="sxs-lookup"><span data-stu-id="60b8d-151">This method invokes a workflow asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern.</span></span> <span data-ttu-id="60b8d-152">Pour plus d’informations, consultez [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span><span class="sxs-lookup"><span data-stu-id="60b8d-152">For more information, see [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60b8d-153">L'exemple suivant appelle un flux de travail composé d'une activité `LongRunningDiceRoll`.</span><span class="sxs-lookup"><span data-stu-id="60b8d-153">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="60b8d-154">L’activité `LongRunningDiceRoll` a deux arguments de sortie qui représentent les résultats du jet de dés.</span><span class="sxs-lookup"><span data-stu-id="60b8d-154">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="60b8d-155">Ces arguments sont récupérés via l'appel de <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="60b8d-155">These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span></span> <span data-ttu-id="60b8d-156">Lors du retour de l’appel à <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>, chaque argument de sortie, indexé par nom d’argument, est retourné dans le dictionnaire de sorties.</span><span class="sxs-lookup"><span data-stu-id="60b8d-156">When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (inputs As IDictionary(Of String, Object), timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="workflowInvoker.BeginInvoke (inputs, timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs"><span data-ttu-id="60b8d-157">Dictionnaire des paramètres d’entrée du flux de travail, indexés par nom d’argument.</span><span class="sxs-lookup"><span data-stu-id="60b8d-157">The dictionary of input parameters to the workflow, keyed by argument name.</span></span></param>
        <param name="timeout"><span data-ttu-id="60b8d-158">Intervalle pendant lequel le flux de travail doit s'exécuter avant qu'il ne soit interrompu et qu'une exception <see cref="T:System.TimeoutException" /> ne soit levée.</span><span class="sxs-lookup"><span data-stu-id="60b8d-158">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span></span></param>
        <param name="callback"><span data-ttu-id="60b8d-159">Méthode à appeler lorsque le flux de travail est terminé.</span><span class="sxs-lookup"><span data-stu-id="60b8d-159">The method to be called when the workflow has completed.</span></span></param>
        <param name="state"><span data-ttu-id="60b8d-160">Objet spécifique à l'application facultatif qui contient les informations sur l'opération asynchrone.</span><span class="sxs-lookup"><span data-stu-id="60b8d-160">An optional application-specific object that contains information about the asynchronous operation.</span></span></param>
        <summary><span data-ttu-id="60b8d-161">Appelle de façon asynchrone un flux de travail à l'aide de l'objet <see cref="T:System.Collections.Generic.IDictionary`2" /> des paramètres d'entrée, de l'intervalle de délai d'attente, de l'objet <see cref="T:System.AsyncCallback" /> et de l'état fourni par l'utilisateur qui ont été spécifiés.</span><span class="sxs-lookup"><span data-stu-id="60b8d-161">Invokes a workflow asynchronously using the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, time-out interval, <see cref="T:System.AsyncCallback" />, and user-provided state.</span></span></summary>
        <returns><span data-ttu-id="60b8d-162">Référence à l'opération d'appel asynchrone.</span><span class="sxs-lookup"><span data-stu-id="60b8d-162">A reference to the asynchronous invoke operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60b8d-163">Pour être informé quand le flux de travail est terminé et extraire les paramètres de sortie du flux de travail, appelez la méthode <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> à partir de la méthode `callback`.</span><span class="sxs-lookup"><span data-stu-id="60b8d-163">To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method.</span></span> <span data-ttu-id="60b8d-164">Si la méthode <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> est appelée avant que le flux de travail ne soit terminé, elle s'interrompt jusqu'à la fin du flux de travail.</span><span class="sxs-lookup"><span data-stu-id="60b8d-164">If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes.</span></span> <span data-ttu-id="60b8d-165">Si le flux de travail ne se termine pas dans le délai spécifié, le flux de travail est interrompu et une exception <xref:System.TimeoutException> est levée lorsque la méthode <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> est appelée.</span><span class="sxs-lookup"><span data-stu-id="60b8d-165">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown when <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="60b8d-166"><xref:System.TimeoutException> est levée uniquement si l'intervalle de délai d'attente est écoulé et que le workflow devient inactif pendant l'exécution.</span><span class="sxs-lookup"><span data-stu-id="60b8d-166">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="60b8d-167">Un flux de travail dont le délai d'exécution dépasse l'intervalle de délai d'attente spécifié se termine correctement s'il ne devient pas inactif.</span><span class="sxs-lookup"><span data-stu-id="60b8d-167">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
 <span data-ttu-id="60b8d-168">Cette méthode appelle de façon asynchrone un flux de travail à l’aide du modèle de conception asynchrone <xref:System.IAsyncResult>.</span><span class="sxs-lookup"><span data-stu-id="60b8d-168">This method invokes a workflow asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern.</span></span> <span data-ttu-id="60b8d-169">Pour plus d’informations, consultez [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span><span class="sxs-lookup"><span data-stu-id="60b8d-169">For more information, see [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60b8d-170">L'exemple suivant appelle un flux de travail composé d'une activité `LongRunningDiceRoll`.</span><span class="sxs-lookup"><span data-stu-id="60b8d-170">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="60b8d-171">L’activité `LongRunningDiceRoll` a deux arguments de sortie qui représentent les résultats du jet de dés.</span><span class="sxs-lookup"><span data-stu-id="60b8d-171">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="60b8d-172">Ces arguments sont récupérés via l'appel de <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="60b8d-172">These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span></span> <span data-ttu-id="60b8d-173">Lors du retour de l’appel à <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>, chaque argument de sortie, indexé par nom d’argument, est retourné dans le dictionnaire de sorties.</span><span class="sxs-lookup"><span data-stu-id="60b8d-173">When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelAsync">
      <MemberSignature Language="C#" Value="public void CancelAsync (object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelAsync(object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.CancelAsync(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelAsync (userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CancelAsync(System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.CancelAsync : obj -&gt; unit" Usage="workflowInvoker.CancelAsync userState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userState"><span data-ttu-id="60b8d-174">Jeton du flux de travail à annuler.</span><span class="sxs-lookup"><span data-stu-id="60b8d-174">The token for the workflow to cancel.</span></span></param>
        <summary><span data-ttu-id="60b8d-175">Tente d'annuler le flux de travail qui a été appelé avec le paramètre <paramref name="userState" /> spécifié.</span><span class="sxs-lookup"><span data-stu-id="60b8d-175">Attempts to cancel the workflow that was invoked with the specified <paramref name="userState" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60b8d-176">Seul un flux de travail appelé par l'une des surcharges <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> acceptant un paramètre `userState` peut être annulé.</span><span class="sxs-lookup"><span data-stu-id="60b8d-176">Only a workflow invoked by one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that takes a `userState` parameter can be canceled.</span></span>  
  
 <span data-ttu-id="60b8d-177">Si l’annulation réussit, le <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> propriété de la <xref:System.Activities.InvokeCompletedEventArgs> passé à la <xref:System.Activities.WorkflowInvoker.InvokeCompleted> gestionnaire est défini `true`; sinon, elle est définie sur `false`.</span><span class="sxs-lookup"><span data-stu-id="60b8d-177">If the cancellation succeeds, the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> property of the <xref:System.Activities.InvokeCompletedEventArgs> passed to the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler is set to `true`; otherwise, it is set to `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60b8d-178">L'exemple suivant appelle un flux de travail composé d'une activité `LongRunningDiceRoll`.</span><span class="sxs-lookup"><span data-stu-id="60b8d-178">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="60b8d-179">L’activité `LongRunningDiceRoll` a deux arguments de sortie qui représentent les résultats du jet de dés.</span><span class="sxs-lookup"><span data-stu-id="60b8d-179">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="60b8d-180">Une fois que le flux de travail est appelé, l'hôte tente de l'annuler.</span><span class="sxs-lookup"><span data-stu-id="60b8d-180">Once the workflow is invoked, the host attempts to cancel the workflow.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#34](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#34)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndInvoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; EndInvoke (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; EndInvoke(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.EndInvoke(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndInvoke (result As IAsyncResult) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ EndInvoke(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="member this.EndInvoke : IAsyncResult -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.EndInvoke result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="60b8d-181">Objet <see cref="T:System.IAsyncResult" /> qui fait référence à l'opération <see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" /> ayant démarré le flux de travail.</span><span class="sxs-lookup"><span data-stu-id="60b8d-181">The <see cref="T:System.IAsyncResult" /> that references the <see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" /> operation that started the workflow.</span></span></param>
        <summary><span data-ttu-id="60b8d-182">Retourne les résultats d'un flux de travail appelé à l'aide de l'une des surcharges de <see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" />.</span><span class="sxs-lookup"><span data-stu-id="60b8d-182">Returns the results of a workflow that was invoked using one of the <see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" /> overloads.</span></span></summary>
        <returns><span data-ttu-id="60b8d-183">Dictionnaire des valeurs <see cref="T:System.Activities.OutArgument" /> et <see cref="T:System.Activities.InOutArgument" /> de l’activité racine indexées par nom d’argument et représentant les sorties du flux de travail.</span><span class="sxs-lookup"><span data-stu-id="60b8d-183">A dictionary of the root activity's <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60b8d-184">Pour être informé quand le flux de travail est terminé et extraire les paramètres de sortie du flux de travail, appelez la méthode <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> à partir de la méthode `callback` spécifiée par <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="60b8d-184">To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method specified by <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A>.</span></span> <span data-ttu-id="60b8d-185">Si la méthode <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> est appelée avant que le flux de travail ne soit terminé, elle s'interrompt jusqu'à la fin du flux de travail.</span><span class="sxs-lookup"><span data-stu-id="60b8d-185">If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes.</span></span>  
  
 <span data-ttu-id="60b8d-186">Cette méthode retourne le résultat d’un flux de travail appelé de façon asynchrone à l’aide du modèle de conception asynchrone <xref:System.IAsyncResult>.</span><span class="sxs-lookup"><span data-stu-id="60b8d-186">This method returns the result of a workflow invoked asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern.</span></span> <span data-ttu-id="60b8d-187">Pour plus d’informations, consultez [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span><span class="sxs-lookup"><span data-stu-id="60b8d-187">For more information, see [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60b8d-188">L'exemple suivant appelle un flux de travail composé d'une activité `LongRunningDiceRoll`.</span><span class="sxs-lookup"><span data-stu-id="60b8d-188">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="60b8d-189">L’activité `LongRunningDiceRoll` a deux arguments de sortie qui représentent les résultats du jet de dés.</span><span class="sxs-lookup"><span data-stu-id="60b8d-189">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="60b8d-190">Ces arguments sont récupérés via l'appel de <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="60b8d-190">These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span></span> <span data-ttu-id="60b8d-191">Lors du retour de l’appel à <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>, chaque argument de sortie, indexé par nom d’argument, est retourné dans le dictionnaire de sorties.</span><span class="sxs-lookup"><span data-stu-id="60b8d-191">When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Extensions">
      <MemberSignature Language="C#" Value="public System.Activities.Hosting.WorkflowInstanceExtensionManager Extensions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Activities.Hosting.WorkflowInstanceExtensionManager Extensions" />
      <MemberSignature Language="DocId" Value="P:System.Activities.WorkflowInvoker.Extensions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Extensions As WorkflowInstanceExtensionManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Activities::Hosting::WorkflowInstanceExtensionManager ^ Extensions { System::Activities::Hosting::WorkflowInstanceExtensionManager ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Extensions : System.Activities.Hosting.WorkflowInstanceExtensionManager" Usage="System.Activities.WorkflowInvoker.Extensions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.Hosting.WorkflowInstanceExtensionManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="60b8d-192">Obtient l’objet <see cref="T:System.Collections.ObjectModel.Collection`1" /> contenant les extensions qui sont disponibles pour les flux de travail appelés par une instance de <see cref="T:System.Activities.WorkflowInvoker" />.</span><span class="sxs-lookup"><span data-stu-id="60b8d-192">Gets the <see cref="T:System.Collections.ObjectModel.Collection`1" /> of extensions that are available to workflows invoked by a <see cref="T:System.Activities.WorkflowInvoker" /> instance.</span></span></summary>
        <value><span data-ttu-id="60b8d-193">Objet <see cref="T:System.Collections.ObjectModel.Collection`1" /> contenant les extensions qui sont disponibles pour les flux de travail appelés par une instance de <see cref="T:System.Activities.WorkflowInvoker" />.</span><span class="sxs-lookup"><span data-stu-id="60b8d-193">The <see cref="T:System.Collections.ObjectModel.Collection`1" /> of extensions that are available to workflows invoked by a <see cref="T:System.Activities.WorkflowInvoker" /> instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60b8d-194">Cette propriété est utilisée par les auteurs d’hôte de flux de travail pour ajouter des extensions à l’instance de <xref:System.Activities.WorkflowInvoker> afin qu’elles soient disponibles pour les flux de travail appelés par cette instance.</span><span class="sxs-lookup"><span data-stu-id="60b8d-194">This property is used by workflow host authors to add extensions to the <xref:System.Activities.WorkflowInvoker> instance so they will be available to workflows invoked by it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60b8d-195">L’exemple suivant inscrit un <xref:System.Activities.Tracking.TrackingParticipant> personnalisé auprès de la collection <xref:System.Activities.WorkflowInvoker.Extensions%2A> d’une instance de <xref:System.Activities.WorkflowInvoker>.</span><span class="sxs-lookup"><span data-stu-id="60b8d-195">The following example registers a custom <xref:System.Activities.Tracking.TrackingParticipant> with the <xref:System.Activities.WorkflowInvoker.Extensions%2A> collection of a <xref:System.Activities.WorkflowInvoker> instance.</span></span> <span data-ttu-id="60b8d-196">Cet exemple de code fait partie de la [suivi personnalisé](~/docs/framework/windows-workflow-foundation/samples/custom-tracking.md) exemple.</span><span class="sxs-lookup"><span data-stu-id="60b8d-196">This code example is part of the [Custom Tracking](~/docs/framework/windows-workflow-foundation/samples/custom-tracking.md) sample.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#40](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#40)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Invoke">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="60b8d-197">Appelle un flux de travail de façon synchrone et retourne un dictionnaire des valeurs <see cref="T:System.Activities.OutArgument" /> et <see cref="T:System.Activities.InOutArgument" /> de l’activité racine indexées par nom d’argument et représentant les sorties du flux de travail.</span><span class="sxs-lookup"><span data-stu-id="60b8d-197">Invokes a workflow synchronously and returns a dictionary of the root activity's <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60b8d-198">Cette méthode s'interrompt jusqu'à ce que le flux de travail soit terminé, durée d'inactivité incluse.</span><span class="sxs-lookup"><span data-stu-id="60b8d-198">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="60b8d-199">L'exécution du flux de travail se déroule toujours intégralement sur le thread appelant.</span><span class="sxs-lookup"><span data-stu-id="60b8d-199">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="60b8d-200">Pour configurer un intervalle de délai d'attente au cours duquel le flux de travail doit être exécuté, utilisez l'une des surcharges de <xref:System.Activities.WorkflowInvoker.Invoke%2A> acceptant un objet <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="60b8d-200">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke () As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke();" />
      <MemberSignature Language="F#" Value="member this.Invoke : unit -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.Invoke " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="60b8d-201">Appelle de façon synchrone un flux de travail à l’aide de la définition de flux de travail passée au constructeur de <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" />.</span><span class="sxs-lookup"><span data-stu-id="60b8d-201">Invokes a workflow synchronously using the workflow definition passed to the <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> constructor.</span></span></summary>
        <returns><span data-ttu-id="60b8d-202">Dictionnaire des valeurs <see cref="T:System.Activities.OutArgument" /> et <see cref="T:System.Activities.InOutArgument" /> de l’activité racine indexées par nom d’argument et représentant les sorties du flux de travail.</span><span class="sxs-lookup"><span data-stu-id="60b8d-202">A dictionary of the root activity's <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60b8d-203">Cette méthode s'interrompt jusqu'à ce que le flux de travail soit terminé, durée d'inactivité incluse.</span><span class="sxs-lookup"><span data-stu-id="60b8d-203">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="60b8d-204">L'exécution du flux de travail se déroule toujours intégralement sur le thread appelant.</span><span class="sxs-lookup"><span data-stu-id="60b8d-204">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="60b8d-205">Pour configurer un intervalle de délai d'attente au cours duquel le flux de travail doit être exécuté, utilisez l'une des surcharges de <xref:System.Activities.WorkflowInvoker.Invoke%2A> acceptant un objet <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="60b8d-205">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60b8d-206">L'exemple suivant appelle un flux de travail composé d'une activité `DiceRoll` unique.</span><span class="sxs-lookup"><span data-stu-id="60b8d-206">The following example invokes a workflow consisting of a single `DiceRoll` activity.</span></span> <span data-ttu-id="60b8d-207">L’activité `DiceRoll` a deux arguments de sortie qui représentent les résultats du jet de dés.</span><span class="sxs-lookup"><span data-stu-id="60b8d-207">The `DiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="60b8d-208">Lors du retour de l’appel à `Invoke`, chaque argument de sortie, indexé par nom d’argument, est retourné dans le dictionnaire de sorties.</span><span class="sxs-lookup"><span data-stu-id="60b8d-208">When the call to `Invoke` returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span> <span data-ttu-id="60b8d-209">Le workflow est appelé deux fois, à l’aide de la définition de flux de travail passée dans le `WorkflowInvoker` constructeur.</span><span class="sxs-lookup"><span data-stu-id="60b8d-209">The workflow is invoked twice, using the workflow definition passed into the `WorkflowInvoker` constructor.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#130](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#130)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#31](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#31)]  
  
 <span data-ttu-id="60b8d-210">Si l’activité racine du flux de travail n’a pas d’arguments de sortie ou si ces derniers ne sont pas requis par l’hôte, ils peuvent être ignorés.</span><span class="sxs-lookup"><span data-stu-id="60b8d-210">If the workflow's root activity has no output arguments or they are not needed by the host, they can be disregarded.</span></span> <span data-ttu-id="60b8d-211">L’exemple suivant appelle un flux de travail composé d’une activité <xref:System.Activities.Statements.WriteLine> unique qui n’a pas d’arguments de sortie.</span><span class="sxs-lookup"><span data-stu-id="60b8d-211">The following example invokes a workflow consisting of a single <xref:System.Activities.Statements.WriteLine> activity that does not have any output arguments.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#2](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="System.Activities.WorkflowInvoker.Invoke workflow" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
      </Parameters>
      <Docs>
        <param name="workflow"><span data-ttu-id="60b8d-212">Définition du flux de travail à appeler.</span><span class="sxs-lookup"><span data-stu-id="60b8d-212">The workflow definition of the workflow to invoke.</span></span></param>
        <summary><span data-ttu-id="60b8d-213">Appelle de façon synchrone un flux de travail à l’aide de la définition de flux de travail spécifiée.</span><span class="sxs-lookup"><span data-stu-id="60b8d-213">Invokes a workflow synchronously using the specified workflow definition.</span></span></summary>
        <returns><span data-ttu-id="60b8d-214">Dictionnaire des valeurs <see cref="T:System.Activities.OutArgument" /> et <see cref="T:System.Activities.InOutArgument" /> de l’activité racine indexées par nom d’argument et représentant les sorties du flux de travail.</span><span class="sxs-lookup"><span data-stu-id="60b8d-214">A dictionary of the root activity's <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60b8d-215">Cette méthode s'interrompt jusqu'à ce que le flux de travail soit terminé, durée d'inactivité incluse.</span><span class="sxs-lookup"><span data-stu-id="60b8d-215">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="60b8d-216">L'exécution du flux de travail se déroule toujours intégralement sur le thread appelant.</span><span class="sxs-lookup"><span data-stu-id="60b8d-216">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="60b8d-217">Pour configurer un intervalle de délai d'attente au cours duquel le flux de travail doit être exécuté, utilisez l'une des surcharges de <xref:System.Activities.WorkflowInvoker.Invoke%2A> acceptant un objet <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="60b8d-217">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60b8d-218">L'exemple suivant appelle un flux de travail composé d'une activité `DiceRoll` unique.</span><span class="sxs-lookup"><span data-stu-id="60b8d-218">The following example invokes a workflow consisting of a single `DiceRoll` activity.</span></span> <span data-ttu-id="60b8d-219">L’activité `DiceRoll` a deux arguments de sortie qui représentent les résultats du jet de dés.</span><span class="sxs-lookup"><span data-stu-id="60b8d-219">The `DiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="60b8d-220">Lors du retour de l’appel à `Invoke`, chaque argument de sortie, indexé par nom d’argument, est retourné dans le dictionnaire de sorties.</span><span class="sxs-lookup"><span data-stu-id="60b8d-220">When the call to `Invoke` returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#130](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#130)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#30](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#30)]  
  
 <span data-ttu-id="60b8d-221">Si l’activité racine du flux de travail n’a pas d’arguments de sortie ou si ces derniers ne sont pas requis par l’hôte, ils peuvent être ignorés.</span><span class="sxs-lookup"><span data-stu-id="60b8d-221">If the workflow's root activity has no output arguments or they are not needed by the host, they can be disregarded.</span></span> <span data-ttu-id="60b8d-222">L’exemple suivant appelle un flux de travail composé d’une activité <xref:System.Activities.Statements.WriteLine> unique qui n’a pas d’arguments de sortie.</span><span class="sxs-lookup"><span data-stu-id="60b8d-222">The following example invokes a workflow consisting of a single <xref:System.Activities.Statements.WriteLine> activity that does not have any output arguments.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#1](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (inputs As IDictionary(Of String, Object)) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Collections.Generic.IDictionary&lt;string, obj&gt; -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.Invoke inputs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="inputs"><span data-ttu-id="60b8d-223">Dictionnaire des paramètres d’entrée du flux de travail, indexés par nom d’argument.</span><span class="sxs-lookup"><span data-stu-id="60b8d-223">The dictionary of input parameters to the workflow, keyed by argument name.</span></span></param>
        <summary><span data-ttu-id="60b8d-224">Appelle l’activité passée au constructeur de <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> de façon synchrone avec l’objet <see cref="T:System.Collections.Generic.IDictionary`2" /> des paramètres d’entrée qui est spécifié.</span><span class="sxs-lookup"><span data-stu-id="60b8d-224">Invokes the activity passed to the <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> constructor synchronously with the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters.</span></span></summary>
        <returns><span data-ttu-id="60b8d-225">Dictionnaire des valeurs <see cref="T:System.Activities.OutArgument" /> et <see cref="T:System.Activities.InOutArgument" /> de l’activité racine indexées par nom d’argument et représentant les sorties du flux de travail.</span><span class="sxs-lookup"><span data-stu-id="60b8d-225">A dictionary of the root activity's <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60b8d-226">Cette méthode s'interrompt jusqu'à ce que le flux de travail soit terminé, durée d'inactivité incluse.</span><span class="sxs-lookup"><span data-stu-id="60b8d-226">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="60b8d-227">L'exécution du flux de travail se déroule toujours intégralement sur le thread appelant.</span><span class="sxs-lookup"><span data-stu-id="60b8d-227">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="60b8d-228">Pour configurer un intervalle de délai d'attente au cours duquel le flux de travail doit être exécuté, utilisez l'une des surcharges de <xref:System.Activities.WorkflowInvoker.Invoke%2A> acceptant un objet <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="60b8d-228">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60b8d-229">L’exemple suivant appelle un workflow composé d’une activité `Divide` unique qui a deux arguments d’entrée et deux arguments de sortie.</span><span class="sxs-lookup"><span data-stu-id="60b8d-229">The following example invokes a workflow consisting of a single `Divide` activity that has two input arguments and two output arguments.</span></span> <span data-ttu-id="60b8d-230">Lorsque le workflow est appelé, le dictionnaire d’arguments (`arguments`) est passé ; il contient les valeurs de chaque argument d’entrée, indexées par nom d’argument.</span><span class="sxs-lookup"><span data-stu-id="60b8d-230">When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name.</span></span> <span data-ttu-id="60b8d-231">Lors du retour de l’appel à `Invoke`, chaque argument de sortie, également indexé par nom d’argument, est retourné dans le dictionnaire `outputs`.</span><span class="sxs-lookup"><span data-stu-id="60b8d-231">When the call to `Invoke` returns, each output argument is returned in the `outputs` dictionary, also keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#120](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#120)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#22](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#22)]  
  
 <span data-ttu-id="60b8d-232">Si le flux de travail dérive <xref:System.Activities.ActivityWithResult>, tel que `CodeActivity<TResult>` ou `Activity<TResult>`, et il existe des arguments de sortie en plus de bien définis <xref:System.Activities.Activity%601.Result%2A> sortie argument, une surcharge non générique de `Invoke`, telle que celle-ci, doit être utilisé dans afin de récupérer les arguments supplémentaires.</span><span class="sxs-lookup"><span data-stu-id="60b8d-232">If the workflow derives from <xref:System.Activities.ActivityWithResult>, such as `CodeActivity<TResult>` or `Activity<TResult>`, and there are output arguments in addition to the well-defined <xref:System.Activities.Activity%601.Result%2A> output argument, a non-generic overload of `Invoke`, such as this one, must be used in order to retrieve the additional arguments.</span></span> <span data-ttu-id="60b8d-233">Pour ce faire, la définition de flux de travail passée dans le `WorkflowInvoker` constructeur doit être de type <xref:System.Activities.Activity>.</span><span class="sxs-lookup"><span data-stu-id="60b8d-233">To do this, the workflow definition passed into the `WorkflowInvoker` constructor must be of type <xref:System.Activities.Activity>.</span></span> <span data-ttu-id="60b8d-234">Dans cet exemple le `Divide` activité dérive `CodeActivity<int>`, mais est déclarée comme <xref:System.Activities.Activity> afin que cette surcharge de `Invoke`, qui retourne un dictionnaire d’arguments au lieu d’une seule valeur de retournée, est utilisé.</span><span class="sxs-lookup"><span data-stu-id="60b8d-234">In this example the `Divide` activity derives from `CodeActivity<int>`, but is declared as <xref:System.Activities.Activity> so that this overload of `Invoke`, which returns a dictionary of arguments instead of a single return value, is used.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#121](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#121)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#23](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Invoke : TimeSpan -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.Invoke timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="60b8d-235">Intervalle pendant lequel le flux de travail doit s'exécuter avant qu'il ne soit interrompu et qu'une exception <see cref="T:System.TimeoutException" /> ne soit levée.</span><span class="sxs-lookup"><span data-stu-id="60b8d-235">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span></span></param>
        <summary><span data-ttu-id="60b8d-236">Appelle de façon synchrone un flux de travail avec l’intervalle de délai d’attente spécifié.</span><span class="sxs-lookup"><span data-stu-id="60b8d-236">Invokes a workflow synchronously with the specified time-out interval.</span></span></summary>
        <returns><span data-ttu-id="60b8d-237">Dictionnaire des valeurs <see cref="T:System.Activities.OutArgument" /> et <see cref="T:System.Activities.InOutArgument" /> de l’activité racine indexées par nom d’argument et représentant les sorties du flux de travail.</span><span class="sxs-lookup"><span data-stu-id="60b8d-237">A dictionary of the root activity's <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60b8d-238">Cette méthode s'interrompt jusqu'à ce que le flux de travail soit terminé, durée d'inactivité incluse.</span><span class="sxs-lookup"><span data-stu-id="60b8d-238">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="60b8d-239">L'exécution du flux de travail se déroule toujours intégralement sur le thread appelant.</span><span class="sxs-lookup"><span data-stu-id="60b8d-239">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="60b8d-240">Si le flux de travail ne se termine pas dans le délai spécifié, le flux de travail est interrompu et une exception <xref:System.TimeoutException> est levée.</span><span class="sxs-lookup"><span data-stu-id="60b8d-240">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="60b8d-241"><xref:System.TimeoutException> est levée uniquement si l'intervalle de délai d'attente est écoulé et que le workflow devient inactif pendant l'exécution.</span><span class="sxs-lookup"><span data-stu-id="60b8d-241">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="60b8d-242">Un flux de travail dont le délai d'exécution dépasse l'intervalle de délai d'attente spécifié se termine correctement s'il ne devient pas inactif.</span><span class="sxs-lookup"><span data-stu-id="60b8d-242">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60b8d-243">L'exemple suivant appelle un flux de travail qui contient deux activités <xref:System.Activities.Statements.WriteLine> et une activité <xref:System.Activities.Statements.Delay> configurée avec une propriété <xref:System.Activities.Statements.Delay.Duration%2A> égale à une minute.</span><span class="sxs-lookup"><span data-stu-id="60b8d-243">The following example invokes a workflow that contains two <xref:System.Activities.Statements.WriteLine> activities and a <xref:System.Activities.Statements.Delay> activity configured with a <xref:System.Activities.Statements.Delay.Duration%2A> of one minute.</span></span> <span data-ttu-id="60b8d-244">Ce flux de travail est appelé deux fois ; la première fois avec un intervalle de délai d'attente de 2 minutes et la deuxième fois avec un intervalle de délai d'attente de 30 secondes.</span><span class="sxs-lookup"><span data-stu-id="60b8d-244">This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds.</span></span> <span data-ttu-id="60b8d-245">Le premier flux de travail se termine correctement, mais pas le deuxième ; une exception <xref:System.TimeoutException> est levée et le message suivant s'affiche.</span><span class="sxs-lookup"><span data-stu-id="60b8d-245">The first workflow completes successfully, but the second one does not and a <xref:System.TimeoutException> is thrown and the following message is displayed.</span></span>  
  
```Output  
The operation did not complete within the allotted timeout of 00:00:30.   
The time allotted to this operation may have been a portion of a longer timeout.  
```  
  
 [!code-csharp[CFX_WorkflowInvokerExample#51](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#51)]  
  
 <span data-ttu-id="60b8d-246">Pour obtenir un exemple d’utilisation de `Invoke` avec les arguments de sortie, consultez la surcharge de <xref:System.Activities.WorkflowInvoker.Invoke%2A> avec les mêmes paramètres que cette surcharge sans le délai d’attente.</span><span class="sxs-lookup"><span data-stu-id="60b8d-246">For an example of using `Invoke` with output arguments, see the overload of <xref:System.Activities.WorkflowInvoker.Invoke%2A> with the same parameters as this overload without the time-out interval.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity, inputs As IDictionary(Of String, Object)) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity * System.Collections.Generic.IDictionary&lt;string, obj&gt; -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="workflow"><span data-ttu-id="60b8d-247">Définition du flux de travail à appeler.</span><span class="sxs-lookup"><span data-stu-id="60b8d-247">The workflow definition of the workflow to invoke.</span></span></param>
        <param name="inputs"><span data-ttu-id="60b8d-248">Dictionnaire des paramètres d’entrée du flux de travail, indexés par nom d’argument.</span><span class="sxs-lookup"><span data-stu-id="60b8d-248">The dictionary of input parameters to the workflow, keyed by argument name.</span></span></param>
        <summary><span data-ttu-id="60b8d-249">Appelle de façon synchrone un flux de travail à l’aide de la définition de flux de travail et de l’objet <see cref="T:System.Collections.Generic.IDictionary`2" /> des paramètres d’entrée qui ont été spécifiés.</span><span class="sxs-lookup"><span data-stu-id="60b8d-249">Invokes a workflow synchronously using the specified workflow definition and <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters.</span></span></summary>
        <returns><span data-ttu-id="60b8d-250">Dictionnaire des valeurs <see cref="T:System.Activities.OutArgument" /> et <see cref="T:System.Activities.InOutArgument" /> de l’activité racine indexées par nom d’argument et représentant les sorties du flux de travail.</span><span class="sxs-lookup"><span data-stu-id="60b8d-250">A dictionary of the root activity's <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60b8d-251">Cette méthode s'interrompt jusqu'à ce que le flux de travail soit terminé, durée d'inactivité incluse.</span><span class="sxs-lookup"><span data-stu-id="60b8d-251">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="60b8d-252">L'exécution du flux de travail se déroule toujours intégralement sur le thread appelant.</span><span class="sxs-lookup"><span data-stu-id="60b8d-252">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="60b8d-253">Pour configurer un intervalle de délai d'attente au cours duquel le flux de travail doit être exécuté, utilisez l'une des surcharges de <xref:System.Activities.WorkflowInvoker.Invoke%2A> acceptant un objet <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="60b8d-253">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60b8d-254">L’exemple suivant appelle un workflow composé d’une activité `Divide` unique qui a deux arguments d’entrée et deux arguments de sortie.</span><span class="sxs-lookup"><span data-stu-id="60b8d-254">The following example invokes a workflow consisting of a single `Divide` activity that has two input arguments and two output arguments.</span></span> <span data-ttu-id="60b8d-255">Lorsque le workflow est appelé, le dictionnaire d’arguments (`arguments`) est passé ; il contient les valeurs de chaque argument d’entrée, indexées par nom d’argument.</span><span class="sxs-lookup"><span data-stu-id="60b8d-255">When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name.</span></span> <span data-ttu-id="60b8d-256">Lors du retour de l’appel à `Invoke`, chaque argument de sortie, également indexé par nom d’argument, est retourné dans le dictionnaire `outputs`.</span><span class="sxs-lookup"><span data-stu-id="60b8d-256">When the call to `Invoke` returns, each output argument is returned in the `outputs` dictionary, also keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#120](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#120)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#20](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#20)]  
  
 <span data-ttu-id="60b8d-257">Si le flux de travail dérive <xref:System.Activities.ActivityWithResult>, tel que `CodeActivity<TResult>` ou `Activity<TResult>`, et il existe des arguments de sortie en plus de bien définis <xref:System.Activities.Activity%601.Result%2A> sortie argument, une surcharge non générique de `Invoke`, telle que celle-ci, doit être utilisé dans afin de récupérer les arguments supplémentaires.</span><span class="sxs-lookup"><span data-stu-id="60b8d-257">If the workflow derives from <xref:System.Activities.ActivityWithResult>, such as `CodeActivity<TResult>` or `Activity<TResult>`, and there are output arguments in addition to the well-defined <xref:System.Activities.Activity%601.Result%2A> output argument, a non-generic overload of `Invoke`, such as this one, must be used in order to retrieve the additional arguments.</span></span> <span data-ttu-id="60b8d-258">Pour ce faire, la définition de workflow passée dans `Invoke` doit être de type <xref:System.Activities.Activity>.</span><span class="sxs-lookup"><span data-stu-id="60b8d-258">To do this, the workflow definition passed into `Invoke` must be of type <xref:System.Activities.Activity>.</span></span> <span data-ttu-id="60b8d-259">Dans cet exemple le `Divide` activité dérive `CodeActivity<int>`, mais est déclarée comme <xref:System.Activities.Activity> afin que cette surcharge de `Invoke`, qui retourne un dictionnaire d’arguments au lieu d’une seule valeur de retournée, est utilisé.</span><span class="sxs-lookup"><span data-stu-id="60b8d-259">In this example the `Divide` activity derives from `CodeActivity<int>`, but is declared as <xref:System.Activities.Activity> so that this overload of `Invoke`, which returns a dictionary of arguments instead of a single return value, is used.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#121](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#121)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#21](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity, timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity * TimeSpan -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="workflow"><span data-ttu-id="60b8d-260">Définition du flux de travail à appeler.</span><span class="sxs-lookup"><span data-stu-id="60b8d-260">The workflow definition of the workflow to invoke.</span></span></param>
        <param name="timeout"><span data-ttu-id="60b8d-261">Intervalle pendant lequel le flux de travail doit s'exécuter avant qu'il ne soit interrompu et qu'une exception <see cref="T:System.TimeoutException" /> ne soit levée.</span><span class="sxs-lookup"><span data-stu-id="60b8d-261">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span></span></param>
        <summary><span data-ttu-id="60b8d-262">Appelle de façon synchrone un flux de travail à l’aide de la définition de flux de travail et de l’intervalle de délai d’attente qui ont été spécifiés.</span><span class="sxs-lookup"><span data-stu-id="60b8d-262">Invokes a workflow synchronously using the specified workflow definition and time-out interval.</span></span></summary>
        <returns><span data-ttu-id="60b8d-263">Dictionnaire des valeurs <see cref="T:System.Activities.OutArgument" /> et <see cref="T:System.Activities.InOutArgument" /> de l’activité racine indexées par nom d’argument et représentant les sorties du flux de travail.</span><span class="sxs-lookup"><span data-stu-id="60b8d-263">A dictionary of the root activity's <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60b8d-264">Cette méthode s'interrompt jusqu'à ce que le flux de travail soit terminé, durée d'inactivité incluse.</span><span class="sxs-lookup"><span data-stu-id="60b8d-264">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="60b8d-265">L'exécution du flux de travail se déroule toujours intégralement sur le thread appelant.</span><span class="sxs-lookup"><span data-stu-id="60b8d-265">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="60b8d-266">Si le flux de travail ne se termine pas dans le délai spécifié, le flux de travail est interrompu et une exception <xref:System.TimeoutException> est levée.</span><span class="sxs-lookup"><span data-stu-id="60b8d-266">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="60b8d-267"><xref:System.TimeoutException> est levée uniquement si l'intervalle de délai d'attente est écoulé et que le workflow devient inactif pendant l'exécution.</span><span class="sxs-lookup"><span data-stu-id="60b8d-267">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="60b8d-268">Un flux de travail dont le délai d'exécution dépasse l'intervalle de délai d'attente spécifié se termine correctement s'il ne devient pas inactif.</span><span class="sxs-lookup"><span data-stu-id="60b8d-268">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60b8d-269">L'exemple suivant appelle un flux de travail qui contient deux activités <xref:System.Activities.Statements.WriteLine> et une activité <xref:System.Activities.Statements.Delay> configurée avec une propriété <xref:System.Activities.Statements.Delay.Duration%2A> égale à une minute.</span><span class="sxs-lookup"><span data-stu-id="60b8d-269">The following example invokes a workflow that contains two <xref:System.Activities.Statements.WriteLine> activities and a <xref:System.Activities.Statements.Delay> activity configured with a <xref:System.Activities.Statements.Delay.Duration%2A> of one minute.</span></span> <span data-ttu-id="60b8d-270">Ce flux de travail est appelé deux fois ; la première fois avec un intervalle de délai d'attente de 2 minutes et la deuxième fois avec un intervalle de délai d'attente de 30 secondes.</span><span class="sxs-lookup"><span data-stu-id="60b8d-270">This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds.</span></span> <span data-ttu-id="60b8d-271">Le premier flux de travail se termine correctement, mais pas le deuxième, et une exception <xref:System.TimeoutException> est levée.</span><span class="sxs-lookup"><span data-stu-id="60b8d-271">The first workflow completes successfully, but the second one does not and a <xref:System.TimeoutException> is thrown.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#50](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#50)]  
  
 <span data-ttu-id="60b8d-272">Pour obtenir un exemple d’utilisation de `Invoke` avec les arguments de sortie, consultez la surcharge de <xref:System.Activities.WorkflowInvoker.Invoke%2A> avec les mêmes paramètres que cette surcharge sans le délai d’attente.</span><span class="sxs-lookup"><span data-stu-id="60b8d-272">For an example of using `Invoke` with output arguments, see the overload of <xref:System.Activities.WorkflowInvoker.Invoke%2A> with the same parameters as this overload without the time-out interval.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (inputs As IDictionary(Of String, Object), timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.Invoke (inputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="inputs"><span data-ttu-id="60b8d-273">Dictionnaire des paramètres d’entrée du flux de travail, indexés par nom d’argument.</span><span class="sxs-lookup"><span data-stu-id="60b8d-273">The dictionary of input parameters to the workflow, keyed by argument name.</span></span></param>
        <param name="timeout"><span data-ttu-id="60b8d-274">Intervalle pendant lequel le flux de travail doit s'exécuter avant qu'il ne soit interrompu et qu'une exception <see cref="T:System.TimeoutException" /> ne soit levée.</span><span class="sxs-lookup"><span data-stu-id="60b8d-274">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span></span></param>
        <summary><span data-ttu-id="60b8d-275">Appelle l’activité passée au constructeur de <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> de façon synchrone avec l’objet <see cref="T:System.Collections.Generic.IDictionary`2" /> des paramètres d’entrée et l’intervalle de délai d’attente qui ont été spécifiés.</span><span class="sxs-lookup"><span data-stu-id="60b8d-275">Invokes the activity passed to the <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> constructor synchronously with the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters and the specified time-out interval.</span></span></summary>
        <returns><span data-ttu-id="60b8d-276">Dictionnaire des valeurs <see cref="T:System.Activities.OutArgument" /> et <see cref="T:System.Activities.InOutArgument" /> de l’activité racine indexées par nom d’argument et représentant les sorties du flux de travail.</span><span class="sxs-lookup"><span data-stu-id="60b8d-276">A dictionary of the root activity's <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60b8d-277">Cette méthode s'interrompt jusqu'à ce que le flux de travail soit terminé, durée d'inactivité incluse.</span><span class="sxs-lookup"><span data-stu-id="60b8d-277">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="60b8d-278">L'exécution du flux de travail se déroule toujours intégralement sur le thread appelant.</span><span class="sxs-lookup"><span data-stu-id="60b8d-278">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="60b8d-279">Si le flux de travail ne se termine pas dans le délai spécifié, le flux de travail est interrompu et une exception <xref:System.TimeoutException> est levée.</span><span class="sxs-lookup"><span data-stu-id="60b8d-279">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="60b8d-280"><xref:System.TimeoutException> est levée uniquement si l'intervalle de délai d'attente est écoulé et que le workflow devient inactif pendant l'exécution.</span><span class="sxs-lookup"><span data-stu-id="60b8d-280">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="60b8d-281">Un flux de travail dont le délai d'exécution dépasse l'intervalle de délai d'attente spécifié se termine correctement s'il ne devient pas inactif.</span><span class="sxs-lookup"><span data-stu-id="60b8d-281">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60b8d-282">L'exemple suivant appelle un flux de travail qui contient deux activités <xref:System.Activities.Statements.WriteLine> et une activité <xref:System.Activities.Statements.Delay> configurée avec une propriété <xref:System.Activities.Statements.Delay.Duration%2A> égale à une minute.</span><span class="sxs-lookup"><span data-stu-id="60b8d-282">The following example invokes a workflow that contains two <xref:System.Activities.Statements.WriteLine> activities and a <xref:System.Activities.Statements.Delay> activity configured with a <xref:System.Activities.Statements.Delay.Duration%2A> of one minute.</span></span> <span data-ttu-id="60b8d-283">Ce flux de travail est appelé deux fois ; la première fois avec un intervalle de délai d'attente de 2 minutes et la deuxième fois avec un intervalle de délai d'attente de 30 secondes.</span><span class="sxs-lookup"><span data-stu-id="60b8d-283">This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds.</span></span> <span data-ttu-id="60b8d-284">Le premier flux de travail se termine correctement, mais pas le deuxième ; une exception <xref:System.TimeoutException> est levée et le message suivant s'affiche.</span><span class="sxs-lookup"><span data-stu-id="60b8d-284">The first workflow completes successfully, but the second one does not and a <xref:System.TimeoutException> is thrown and the following message is displayed.</span></span>  
  
```Output  
The operation did not complete within the allotted timeout of 00:00:30.   
The time allotted to this operation may have been a portion of a longer timeout.  
```  
  
 [!code-csharp[CFX_WorkflowInvokerExample#51](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#51)]  
  
 <span data-ttu-id="60b8d-285">Pour obtenir un exemple d’utilisation de `Invoke` avec les arguments d’entrée et de sortie, consultez la surcharge de <xref:System.Activities.WorkflowInvoker.Invoke%2A> avec les mêmes paramètres que cette surcharge sans le délai d’attente.</span><span class="sxs-lookup"><span data-stu-id="60b8d-285">For an example of using `Invoke` with input and output arguments, see the overload of <xref:System.Activities.WorkflowInvoker.Invoke%2A> with the same parameters as this overload without the time-out interval.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity, inputs As IDictionary(Of String, Object), timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity * System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="workflow"><span data-ttu-id="60b8d-286">Définition du flux de travail à appeler.</span><span class="sxs-lookup"><span data-stu-id="60b8d-286">The workflow definition of the workflow to invoke.</span></span></param>
        <param name="inputs"><span data-ttu-id="60b8d-287">Dictionnaire des paramètres d’entrée du flux de travail, indexés par nom d’argument.</span><span class="sxs-lookup"><span data-stu-id="60b8d-287">The dictionary of input parameters to the workflow, keyed by argument name.</span></span></param>
        <param name="timeout"><span data-ttu-id="60b8d-288">Intervalle pendant lequel le flux de travail doit s'exécuter avant qu'il ne soit interrompu et qu'une exception <see cref="T:System.TimeoutException" /> ne soit levée.</span><span class="sxs-lookup"><span data-stu-id="60b8d-288">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span></span></param>
        <summary><span data-ttu-id="60b8d-289">Appelle de façon synchrone un flux de travail à l’aide de la définition de flux de travail, de l’objet <see cref="T:System.Collections.Generic.IDictionary`2" /> des paramètres d’entrée et de l’intervalle de délai d’attente qui ont été spécifiés.</span><span class="sxs-lookup"><span data-stu-id="60b8d-289">Invokes a workflow synchronously using the specified workflow definition, <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, and time-out interval.</span></span></summary>
        <returns><span data-ttu-id="60b8d-290">Dictionnaire des valeurs <see cref="T:System.Activities.OutArgument" /> et <see cref="T:System.Activities.InOutArgument" /> de l’activité racine indexées par nom d’argument et représentant les sorties du flux de travail.</span><span class="sxs-lookup"><span data-stu-id="60b8d-290">A dictionary of the root activity's <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60b8d-291">Cette méthode s'interrompt jusqu'à ce que le flux de travail soit terminé, durée d'inactivité incluse.</span><span class="sxs-lookup"><span data-stu-id="60b8d-291">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="60b8d-292">L'exécution du flux de travail se déroule toujours intégralement sur le thread appelant.</span><span class="sxs-lookup"><span data-stu-id="60b8d-292">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="60b8d-293">Si le flux de travail ne se termine pas dans le délai spécifié, le flux de travail est interrompu et une exception <xref:System.TimeoutException> est levée.</span><span class="sxs-lookup"><span data-stu-id="60b8d-293">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="60b8d-294"><xref:System.TimeoutException> est levée uniquement si l'intervalle de délai d'attente est écoulé et que le workflow devient inactif pendant l'exécution.</span><span class="sxs-lookup"><span data-stu-id="60b8d-294">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="60b8d-295">Un flux de travail dont le délai d'exécution dépasse l'intervalle de délai d'attente spécifié se termine correctement s'il ne devient pas inactif.</span><span class="sxs-lookup"><span data-stu-id="60b8d-295">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60b8d-296">L'exemple suivant appelle un flux de travail qui contient deux activités <xref:System.Activities.Statements.WriteLine> et une activité <xref:System.Activities.Statements.Delay> configurée avec une propriété <xref:System.Activities.Statements.Delay.Duration%2A> égale à une minute.</span><span class="sxs-lookup"><span data-stu-id="60b8d-296">The following example invokes a workflow that contains two <xref:System.Activities.Statements.WriteLine> activities and a <xref:System.Activities.Statements.Delay> activity configured with a <xref:System.Activities.Statements.Delay.Duration%2A> of one minute.</span></span> <span data-ttu-id="60b8d-297">Ce flux de travail est appelé deux fois ; la première fois avec un intervalle de délai d'attente de 2 minutes et la deuxième fois avec un intervalle de délai d'attente de 30 secondes.</span><span class="sxs-lookup"><span data-stu-id="60b8d-297">This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds.</span></span> <span data-ttu-id="60b8d-298">Le premier flux de travail se termine correctement, mais pas le deuxième, et une exception <xref:System.TimeoutException> est levée.</span><span class="sxs-lookup"><span data-stu-id="60b8d-298">The first workflow completes successfully, but the second one does not and a <xref:System.TimeoutException> is thrown.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#50](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#50)]  
  
 <span data-ttu-id="60b8d-299">Pour obtenir un exemple d’utilisation de `Invoke` avec les arguments d’entrée et de sortie, consultez la surcharge de <xref:System.Activities.WorkflowInvoker.Invoke%2A> avec les mêmes paramètres que cette surcharge sans le délai d’attente.</span><span class="sxs-lookup"><span data-stu-id="60b8d-299">For an example of using `Invoke` with input and output arguments, see the overload of <xref:System.Activities.WorkflowInvoker.Invoke%2A> with the same parameters as this overload without the time-out interval.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult)) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity&lt;'Result&gt; -&gt; 'Result" Usage="System.Activities.WorkflowInvoker.Invoke workflow" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="60b8d-300">Type de flux de travail.</span><span class="sxs-lookup"><span data-stu-id="60b8d-300">The type of the workflow.</span></span></typeparam>
        <param name="workflow"><span data-ttu-id="60b8d-301">Définition du flux de travail à appeler.</span><span class="sxs-lookup"><span data-stu-id="60b8d-301">The workflow definition of the workflow to invoke.</span></span> <span data-ttu-id="60b8d-302">La définition du flux de travail doit dériver de l'objet <see cref="T:System.Activities.ActivityWithResult" />.</span><span class="sxs-lookup"><span data-stu-id="60b8d-302">The workflow definition needs to derive from <see cref="T:System.Activities.ActivityWithResult" />.</span></span></param>
        <summary><span data-ttu-id="60b8d-303">Appelle de façon synchrone un flux de travail à l’aide de la définition de flux de travail passée au constructeur de <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" />.</span><span class="sxs-lookup"><span data-stu-id="60b8d-303">Invokes a workflow synchronously using the workflow definition passed to the <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> constructor.</span></span></summary>
        <returns><span data-ttu-id="60b8d-304">Valeur de type TResult avec le résultat de l'exécution de l'activité.</span><span class="sxs-lookup"><span data-stu-id="60b8d-304">A value of type TResult with the result of the execution of the activity.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60b8d-305">Cette méthode s'interrompt jusqu'à ce que le flux de travail soit terminé, durée d'inactivité incluse.</span><span class="sxs-lookup"><span data-stu-id="60b8d-305">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="60b8d-306">L'exécution du flux de travail se déroule toujours intégralement sur le thread appelant.</span><span class="sxs-lookup"><span data-stu-id="60b8d-306">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="60b8d-307">Pour configurer un intervalle de délai d'attente au cours duquel le flux de travail doit être exécuté, utilisez l'une des surcharges de <xref:System.Activities.WorkflowInvoker.Invoke%2A> acceptant un objet <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="60b8d-307">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60b8d-308">L’exemple suivant appelle un workflow consistant en un seul `Add` activité qui a deux arguments d’entrée et dans la mesure où elle est dérivée de `CodeActivity<int>` il existe bien définis <xref:System.Activities.Activity%601.Result%2A> argument de sortie.</span><span class="sxs-lookup"><span data-stu-id="60b8d-308">The following example invokes a workflow consisting of a single `Add` activity that has two input arguments and since it derives from `CodeActivity<int>` it has one well-defined <xref:System.Activities.Activity%601.Result%2A> output argument.</span></span> <span data-ttu-id="60b8d-309">Lorsque le workflow est appelé, le dictionnaire d'arguments (`arguments`) est passé ; il contient les valeurs de chaque argument d'entrée, indexées par nom d'argument.</span><span class="sxs-lookup"><span data-stu-id="60b8d-309">When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name.</span></span> <span data-ttu-id="60b8d-310">Lors de l’appel à `Invoke` est retournée, la valeur de la <xref:System.Activities.Activity%601.Result%2A> argument de sortie est retournée.</span><span class="sxs-lookup"><span data-stu-id="60b8d-310">When the call to `Invoke` returns, the value of the <xref:System.Activities.Activity%601.Result%2A> output argument is returned.</span></span> <span data-ttu-id="60b8d-311">Cet exemple de code repose issu de la [à l’aide de la classe WorkflowInvoker](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) exemple.</span><span class="sxs-lookup"><span data-stu-id="60b8d-311">This code example is based off of the [Using the WorkflowInvoker Class](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) sample.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult), inputs As IDictionary(Of String, Object)) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity&lt;'Result&gt; * System.Collections.Generic.IDictionary&lt;string, obj&gt; -&gt; 'Result" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="60b8d-312">Type de flux de travail.</span><span class="sxs-lookup"><span data-stu-id="60b8d-312">The type of the workflow.</span></span></typeparam>
        <param name="workflow"><span data-ttu-id="60b8d-313">Définition du flux de travail à appeler.</span><span class="sxs-lookup"><span data-stu-id="60b8d-313">The workflow definition of the workflow to invoke.</span></span></param>
        <param name="inputs"><span data-ttu-id="60b8d-314">Dictionnaire des paramètres d’entrée du flux de travail, indexés par nom d’argument.</span><span class="sxs-lookup"><span data-stu-id="60b8d-314">The dictionary of input parameters to the workflow, keyed by argument name.</span></span></param>
        <summary><span data-ttu-id="60b8d-315">Appelle de façon synchrone un flux de travail à l’aide de la définition de flux de travail et de l’objet <see cref="T:System.Collections.Generic.IDictionary`2" /> des paramètres d’entrée qui ont été spécifiés.</span><span class="sxs-lookup"><span data-stu-id="60b8d-315">Invokes a workflow synchronously using the specified workflow definition and <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters.</span></span></summary>
        <returns><span data-ttu-id="60b8d-316">Valeur de type TResult avec le résultat de l'exécution de l'activité.</span><span class="sxs-lookup"><span data-stu-id="60b8d-316">A value of type TResult with the result of the execution of the activity.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60b8d-317">Cette méthode s'interrompt jusqu'à ce que le flux de travail soit terminé, durée d'inactivité incluse.</span><span class="sxs-lookup"><span data-stu-id="60b8d-317">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="60b8d-318">L'exécution du flux de travail se déroule toujours intégralement sur le thread appelant.</span><span class="sxs-lookup"><span data-stu-id="60b8d-318">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="60b8d-319">Pour configurer un intervalle de délai d'attente au cours duquel le flux de travail doit être exécuté, utilisez l'une des surcharges de <xref:System.Activities.WorkflowInvoker.Invoke%2A> acceptant un objet <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="60b8d-319">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="60b8d-320"><xref:System.TimeoutException> est levée uniquement si l'intervalle de délai d'attente est écoulé et que le workflow devient inactif pendant l'exécution.</span><span class="sxs-lookup"><span data-stu-id="60b8d-320">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="60b8d-321">Un flux de travail dont le délai d'exécution dépasse l'intervalle de délai d'attente spécifié se termine correctement s'il ne devient pas inactif.</span><span class="sxs-lookup"><span data-stu-id="60b8d-321">A workflow that takes longer than the specified time-out interval to complete, completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60b8d-322">L’exemple suivant appelle un workflow consistant en un seul `Add` activité qui a deux arguments d’entrée et dans la mesure où elle est dérivée de `CodeActivity<int>` il existe bien définis <xref:System.Activities.Activity%601.Result%2A> argument de sortie.</span><span class="sxs-lookup"><span data-stu-id="60b8d-322">The following example invokes a workflow consisting of a single `Add` activity that has two input arguments and since it derives from `CodeActivity<int>` it has one well-defined <xref:System.Activities.Activity%601.Result%2A> output argument.</span></span> <span data-ttu-id="60b8d-323">Lorsque le workflow est appelé, le dictionnaire d'arguments (`arguments`) est passé ; il contient les valeurs de chaque argument d'entrée, indexées par nom d'argument.</span><span class="sxs-lookup"><span data-stu-id="60b8d-323">When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name.</span></span> <span data-ttu-id="60b8d-324">Lors de l’appel à `Invoke` est retournée, la valeur de la <xref:System.Activities.Activity%601.Result%2A> argument de sortie est retournée.</span><span class="sxs-lookup"><span data-stu-id="60b8d-324">When the call to `Invoke` returns, the value of the <xref:System.Activities.Activity%601.Result%2A> output argument is returned.</span></span> <span data-ttu-id="60b8d-325">Cet exemple de code repose issu de la [à l’aide de la classe WorkflowInvoker](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) exemple.</span><span class="sxs-lookup"><span data-stu-id="60b8d-325">This code example is based off of the [Using the WorkflowInvoker Class](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) sample.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult), inputs As IDictionary(Of String, Object), timeout As TimeSpan) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity&lt;'Result&gt; * System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan -&gt; 'Result" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="60b8d-326">Type de flux de travail.</span><span class="sxs-lookup"><span data-stu-id="60b8d-326">The type of the workflow.</span></span></typeparam>
        <param name="workflow"><span data-ttu-id="60b8d-327">Définition du flux de travail à appeler.</span><span class="sxs-lookup"><span data-stu-id="60b8d-327">The workflow definition of the workflow to invoke.</span></span></param>
        <param name="inputs"><span data-ttu-id="60b8d-328">Dictionnaire des paramètres d’entrée du flux de travail, indexés par nom d’argument.</span><span class="sxs-lookup"><span data-stu-id="60b8d-328">The dictionary of input parameters to the workflow, keyed by argument name.</span></span></param>
        <param name="timeout"><span data-ttu-id="60b8d-329">Intervalle pendant lequel le flux de travail doit s'exécuter avant qu'il ne soit interrompu et qu'une exception <see cref="T:System.TimeoutException" /> ne soit levée.</span><span class="sxs-lookup"><span data-stu-id="60b8d-329">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span></span></param>
        <summary><span data-ttu-id="60b8d-330">Appelle de façon synchrone un flux de travail à l’aide de la définition de flux de travail, de l’objet <see cref="T:System.Collections.Generic.IDictionary`2" /> des paramètres d’entrée et de l’intervalle de délai d’attente qui ont été spécifiés.</span><span class="sxs-lookup"><span data-stu-id="60b8d-330">Invokes a workflow synchronously using the specified workflow definition, <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, and time-out interval.</span></span></summary>
        <returns><span data-ttu-id="60b8d-331">Valeur de type TResult avec le résultat de l'exécution de l'activité.</span><span class="sxs-lookup"><span data-stu-id="60b8d-331">A value of type TResult with the result of the execution of the activity.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60b8d-332">Cette méthode s'interrompt jusqu'à ce que le flux de travail soit terminé, durée d'inactivité incluse.</span><span class="sxs-lookup"><span data-stu-id="60b8d-332">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="60b8d-333">L'exécution du flux de travail se déroule toujours intégralement sur le thread appelant.</span><span class="sxs-lookup"><span data-stu-id="60b8d-333">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="60b8d-334">Si le flux de travail ne se termine pas dans le délai spécifié, le flux de travail est interrompu et une exception <xref:System.TimeoutException> est levée.</span><span class="sxs-lookup"><span data-stu-id="60b8d-334">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="60b8d-335"><xref:System.TimeoutException> est levée uniquement si l'intervalle de délai d'attente est écoulé et que le workflow devient inactif pendant l'exécution.</span><span class="sxs-lookup"><span data-stu-id="60b8d-335">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="60b8d-336">Un flux de travail dont le délai d'exécution dépasse l'intervalle de délai d'attente spécifié se termine correctement s'il ne devient pas inactif.</span><span class="sxs-lookup"><span data-stu-id="60b8d-336">A workflow that takes longer than the specified time-out interval to complete, completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60b8d-337">L’exemple suivant appelle un workflow consistant en un seul `Add` activité qui a deux arguments d’entrée et dans la mesure où elle est dérivée de `CodeActivity<int>` il existe bien définis <xref:System.Activities.Activity%601.Result%2A> argument de sortie.</span><span class="sxs-lookup"><span data-stu-id="60b8d-337">The following example invokes a workflow consisting of a single `Add` activity that has two input arguments and since it derives from `CodeActivity<int>` it has one well-defined <xref:System.Activities.Activity%601.Result%2A> output argument.</span></span> <span data-ttu-id="60b8d-338">Lorsque le workflow est appelé, le dictionnaire d'arguments (`arguments`) est passé ; il contient les valeurs de chaque argument d'entrée, indexées par nom d'argument.</span><span class="sxs-lookup"><span data-stu-id="60b8d-338">When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name.</span></span> <span data-ttu-id="60b8d-339">Lors de l’appel à `Invoke` est retournée, la valeur de la <xref:System.Activities.Activity%601.Result%2A> argument de sortie est retournée.</span><span class="sxs-lookup"><span data-stu-id="60b8d-339">When the call to `Invoke` returns, the value of the <xref:System.Activities.Activity%601.Result%2A> output argument is returned.</span></span> <span data-ttu-id="60b8d-340">Cet exemple de code repose issu de la [à l’aide de la classe WorkflowInvoker](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) exemple.</span><span class="sxs-lookup"><span data-stu-id="60b8d-340">This code example is based off of the [Using the WorkflowInvoker Class](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) sample.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, out System.Collections.Generic.IDictionary&lt;string,object&gt; additionalOutputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, [out] class System.Collections.Generic.IDictionary`2&lt;string, object&gt;&amp; additionalOutputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object}@,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult), inputs As IDictionary(Of String, Object), ByRef additionalOutputs As IDictionary(Of String, Object), timeout As TimeSpan) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, [Runtime::InteropServices::Out] System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ % additionalOutputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity&lt;'Result&gt; * System.Collections.Generic.IDictionary&lt;string, obj&gt; *  * TimeSpan -&gt; 'Result" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs, additionalOutputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="additionalOutputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" RefType="out" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="60b8d-341">Type de flux de travail.</span><span class="sxs-lookup"><span data-stu-id="60b8d-341">The type of the workflow.</span></span></typeparam>
        <param name="workflow"><span data-ttu-id="60b8d-342">Définition du flux de travail à appeler.</span><span class="sxs-lookup"><span data-stu-id="60b8d-342">The workflow definition of the workflow to invoke.</span></span></param>
        <param name="inputs"><span data-ttu-id="60b8d-343">Dictionnaire des paramètres d’entrée du flux de travail, indexés par nom d’argument.</span><span class="sxs-lookup"><span data-stu-id="60b8d-343">The dictionary of input parameters to the workflow, keyed by argument name.</span></span></param>
        <param name="additionalOutputs"><span data-ttu-id="60b8d-344">Dictionnaire des paramètres de sortie supplémentaires du flux de travail, indexés par nom d’argument.</span><span class="sxs-lookup"><span data-stu-id="60b8d-344">The dictionary of additional output parameters of the workflow, keyed by argument name.</span></span></param>
        <param name="timeout"><span data-ttu-id="60b8d-345">Intervalle pendant lequel le flux de travail doit s'exécuter avant qu'il ne soit interrompu et qu'une exception <see cref="T:System.TimeoutException" /> ne soit levée.</span><span class="sxs-lookup"><span data-stu-id="60b8d-345">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span></span></param>
        <summary><span data-ttu-id="60b8d-346">Appelle de façon synchrone un flux de travail à l’aide de la définition de flux de travail, de l’objet <see cref="T:System.Collections.Generic.IDictionary`2" /> des paramètres d’entrée, de l’objet <see cref="T:System.Collections.Generic.IDictionary`2" /> des paramètres de sortie supplémentaires et de l’intervalle de délai d’attente qui ont été spécifiés.</span><span class="sxs-lookup"><span data-stu-id="60b8d-346">Invokes a workflow synchronously using the specified workflow definition, <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, <see cref="T:System.Collections.Generic.IDictionary`2" /> of additional output parameters, and time-out interval.</span></span></summary>
        <returns><span data-ttu-id="60b8d-347">Valeur de type TResult avec le résultat de l'exécution de l'activité.</span><span class="sxs-lookup"><span data-stu-id="60b8d-347">A value of type TResult with the result of the execution of the activity.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60b8d-348">Cette méthode s'interrompt jusqu'à ce que le flux de travail soit terminé, durée d'inactivité incluse.</span><span class="sxs-lookup"><span data-stu-id="60b8d-348">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="60b8d-349">L'exécution du flux de travail se déroule toujours intégralement sur le thread appelant.</span><span class="sxs-lookup"><span data-stu-id="60b8d-349">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="60b8d-350">Si le flux de travail ne se termine pas dans le délai spécifié, le flux de travail est interrompu et une exception <xref:System.TimeoutException> est levée.</span><span class="sxs-lookup"><span data-stu-id="60b8d-350">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="60b8d-351"><xref:System.TimeoutException> est levée uniquement si l'intervalle de délai d'attente est écoulé et que le workflow devient inactif pendant l'exécution.</span><span class="sxs-lookup"><span data-stu-id="60b8d-351">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="60b8d-352">Un flux de travail dont le délai d'exécution dépasse l'intervalle de délai d'attente spécifié se termine correctement s'il ne devient pas inactif.</span><span class="sxs-lookup"><span data-stu-id="60b8d-352">A workflow that takes longer than the specified time-out interval to complete, completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60b8d-353">L’exemple suivant appelle un workflow consistant en un seul `Add` activité qui a deux arguments d’entrée et dans la mesure où elle est dérivée de `CodeActivity<int>` il existe bien définis <xref:System.Activities.Activity%601.Result%2A> argument de sortie.</span><span class="sxs-lookup"><span data-stu-id="60b8d-353">The following example invokes a workflow consisting of a single `Add` activity that has two input arguments and since it derives from `CodeActivity<int>` it has one well-defined <xref:System.Activities.Activity%601.Result%2A> output argument.</span></span> <span data-ttu-id="60b8d-354">Lorsque le workflow est appelé, le dictionnaire d'arguments (`arguments`) est passé ; il contient les valeurs de chaque argument d'entrée, indexées par nom d'argument.</span><span class="sxs-lookup"><span data-stu-id="60b8d-354">When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name.</span></span> <span data-ttu-id="60b8d-355">Lors de l’appel à `Invoke` est retournée, la valeur de la <xref:System.Activities.Activity%601.Result%2A> argument de sortie est retournée.</span><span class="sxs-lookup"><span data-stu-id="60b8d-355">When the call to `Invoke` returns, the value of the <xref:System.Activities.Activity%601.Result%2A> output argument is returned.</span></span> <span data-ttu-id="60b8d-356">Cet exemple de code repose issu de la [à l’aide de la classe WorkflowInvoker](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) exemple.</span><span class="sxs-lookup"><span data-stu-id="60b8d-356">This code example is based off of the [Using the WorkflowInvoker Class](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) sample.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="InvokeAsync">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="60b8d-357">Appelle de façon asynchrone un flux de travail à l’aide du modèle de conception asynchrone basé sur les événements.</span><span class="sxs-lookup"><span data-stu-id="60b8d-357">Invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60b8d-358">Pour être informé de la fin du flux de travail, gérez l'événement <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="60b8d-358">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="60b8d-359">Pour configurer un intervalle de délai d'attente au cours duquel le flux de travail doit être exécuté, utilisez l'une des surcharges de <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> acceptant un objet <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="60b8d-359">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="60b8d-360">Cette méthode appelle de façon asynchrone un flux de travail à l’aide du modèle de conception asynchrone basé sur les événements.</span><span class="sxs-lookup"><span data-stu-id="60b8d-360">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="60b8d-361">Pour plus d’informations, consultez l’article [Vue d’ensemble du modèle asynchrone basé sur les événements](https://go.microsoft.com/fwlink/?LinkId=141765).</span><span class="sxs-lookup"><span data-stu-id="60b8d-361">For more information, see [Event-based Asynchronous Pattern Overview](https://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync();" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : unit -&gt; unit" Usage="workflowInvoker.InvokeAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="60b8d-362">Appelle un flux de travail de façon asynchrone.</span><span class="sxs-lookup"><span data-stu-id="60b8d-362">Invokes a workflow asynchronously.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60b8d-363">Pour être informé de la fin du flux de travail, gérez l'événement <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="60b8d-363">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="60b8d-364">Pour configurer un intervalle de délai d'attente au cours duquel le flux de travail doit être exécuté, utilisez l'une des surcharges de <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> acceptant un objet <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="60b8d-364">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="60b8d-365">Cette méthode appelle de façon asynchrone un flux de travail à l’aide du modèle de conception asynchrone basé sur les événements.</span><span class="sxs-lookup"><span data-stu-id="60b8d-365">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="60b8d-366">Pour plus d’informations, consultez l’article [Vue d’ensemble du modèle asynchrone basé sur les événements](https://go.microsoft.com/fwlink/?LinkId=141765).</span><span class="sxs-lookup"><span data-stu-id="60b8d-366">For more information, see [Event-based Asynchronous Pattern Overview](https://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60b8d-367">L'exemple suivant appelle un flux de travail composé d'une activité `LongRunningDiceRoll`.</span><span class="sxs-lookup"><span data-stu-id="60b8d-367">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="60b8d-368">L'activité `LongRunningDiceRoll` a deux arguments de sortie qui représentent les résultats du jet de dés.</span><span class="sxs-lookup"><span data-stu-id="60b8d-368">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="60b8d-369">Lorsque le flux de travail se termine, ces arguments sont récupérés dans le gestionnaire d'événements <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="60b8d-369">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : System.Collections.Generic.IDictionary&lt;string, obj&gt; -&gt; unit" Usage="workflowInvoker.InvokeAsync inputs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="inputs"><span data-ttu-id="60b8d-370">Dictionnaire des paramètres d’entrée du flux de travail, indexés par nom d’argument.</span><span class="sxs-lookup"><span data-stu-id="60b8d-370">The dictionary of input parameters to the workflow, keyed by argument name.</span></span></param>
        <summary><span data-ttu-id="60b8d-371">Appelle de façon asynchrone un flux de travail à l'aide de l'objet <see cref="T:System.Collections.Generic.IDictionary`2" /> spécifié des paramètres d'entrée.</span><span class="sxs-lookup"><span data-stu-id="60b8d-371">Invokes a workflow asynchronously using the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60b8d-372">Pour être informé de la fin du flux de travail, gérez l'événement <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="60b8d-372">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="60b8d-373">Pour configurer un intervalle de délai d'attente au cours duquel le flux de travail doit être exécuté, utilisez l'une des surcharges de <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> acceptant un objet <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="60b8d-373">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="60b8d-374">Cette méthode appelle de façon asynchrone un flux de travail à l’aide du modèle de conception asynchrone basé sur les événements.</span><span class="sxs-lookup"><span data-stu-id="60b8d-374">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="60b8d-375">Pour plus d’informations, consultez l’article [Vue d’ensemble du modèle asynchrone basé sur les événements](https://go.microsoft.com/fwlink/?LinkId=141765).</span><span class="sxs-lookup"><span data-stu-id="60b8d-375">For more information, see [Event-based Asynchronous Pattern Overview](https://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60b8d-376">L'exemple suivant appelle un flux de travail composé d'une activité `LongRunningDiceRoll`.</span><span class="sxs-lookup"><span data-stu-id="60b8d-376">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="60b8d-377">L'activité `LongRunningDiceRoll` a deux arguments de sortie qui représentent les résultats du jet de dés.</span><span class="sxs-lookup"><span data-stu-id="60b8d-377">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="60b8d-378">Lorsque le flux de travail se termine, ces arguments sont récupérés dans le gestionnaire d'événements <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="60b8d-378">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : obj -&gt; unit" Usage="workflowInvoker.InvokeAsync userState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userState"><span data-ttu-id="60b8d-379">Objet fourni par l'utilisateur permettant de distinguer cet appel asynchrone particulier des autres opérations courantes d'appel asynchrone.</span><span class="sxs-lookup"><span data-stu-id="60b8d-379">A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.</span></span></param>
        <summary><span data-ttu-id="60b8d-380">Appelle de façon asynchrone un flux de travail à l'aide de l'identificateur unique spécifié.</span><span class="sxs-lookup"><span data-stu-id="60b8d-380">Invokes a workflow asynchronously using the specified unique identifier.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60b8d-381">Le paramètre `userState` doit être unique à travers toutes les opérations <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> en cours d'exécution pour l'activité actuelle.</span><span class="sxs-lookup"><span data-stu-id="60b8d-381">The `userState` parameter must be unique across all currently running <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operations for the current activity.</span></span> <span data-ttu-id="60b8d-382">Si le paramètre `userState` n'est pas unique, une exception <xref:System.ArgumentException> est levée</span><span class="sxs-lookup"><span data-stu-id="60b8d-382">If the `userState` parameter is not unique, an <xref:System.ArgumentException> is thrown.</span></span> <span data-ttu-id="60b8d-383">`userState` permet d'identifier le flux de travail dans l'événement <xref:System.Activities.WorkflowInvoker.InvokeCompleted> et d'annuler le flux de travail à l'aide de la méthode <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</span><span class="sxs-lookup"><span data-stu-id="60b8d-383">`userState` is used to identify the workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, and to cancel the workflow using <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</span></span>  
  
 <span data-ttu-id="60b8d-384">Pour être informé de la fin du flux de travail, gérez l'événement <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="60b8d-384">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="60b8d-385">Pour configurer un intervalle de délai d'attente au cours duquel le flux de travail doit être exécuté, utilisez l'une des surcharges de <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> acceptant un objet <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="60b8d-385">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="60b8d-386">Cette méthode appelle de façon asynchrone un flux de travail à l’aide du modèle de conception asynchrone basé sur les événements.</span><span class="sxs-lookup"><span data-stu-id="60b8d-386">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="60b8d-387">Pour plus d’informations, consultez l’article [Vue d’ensemble du modèle asynchrone basé sur les événements](https://go.microsoft.com/fwlink/?LinkId=141765).</span><span class="sxs-lookup"><span data-stu-id="60b8d-387">For more information, see [Event-based Asynchronous Pattern Overview](https://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60b8d-388">L'exemple suivant appelle un flux de travail composé d'une activité `LongRunningDiceRoll`.</span><span class="sxs-lookup"><span data-stu-id="60b8d-388">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="60b8d-389">L'activité `LongRunningDiceRoll` a deux arguments de sortie qui représentent les résultats du jet de dés.</span><span class="sxs-lookup"><span data-stu-id="60b8d-389">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="60b8d-390">Lorsque le flux de travail se termine, ces arguments sont récupérés dans le gestionnaire d'événements <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="60b8d-390">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : TimeSpan -&gt; unit" Usage="workflowInvoker.InvokeAsync timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="60b8d-391">Intervalle pendant lequel le flux de travail doit s'exécuter avant qu'il ne soit interrompu et qu'une exception <see cref="T:System.TimeoutException" /> ne soit levée.</span><span class="sxs-lookup"><span data-stu-id="60b8d-391">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span></span></param>
        <summary><span data-ttu-id="60b8d-392">Appelle de façon asynchrone un flux de travail avec l'intervalle de délai d'attente spécifié.</span><span class="sxs-lookup"><span data-stu-id="60b8d-392">Invokes a workflow asynchronously with the specified time-out interval.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60b8d-393">Pour être informé de la fin du flux de travail, gérez l'événement <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="60b8d-393">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="60b8d-394">Si le flux de travail ne se termine pas dans le délai spécifié, le flux de travail est interrompu et une exception <xref:System.TimeoutException> est levée.</span><span class="sxs-lookup"><span data-stu-id="60b8d-394">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="60b8d-395"><xref:System.TimeoutException> est levée uniquement si l'intervalle de délai d'attente est écoulé et que le workflow devient inactif pendant l'exécution.</span><span class="sxs-lookup"><span data-stu-id="60b8d-395">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="60b8d-396">Un flux de travail dont le délai d'exécution dépasse l'intervalle de délai d'attente spécifié se termine correctement s'il ne devient pas inactif.</span><span class="sxs-lookup"><span data-stu-id="60b8d-396">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
 <span data-ttu-id="60b8d-397">Cette méthode appelle de façon asynchrone un flux de travail à l’aide du modèle de conception asynchrone basé sur les événements.</span><span class="sxs-lookup"><span data-stu-id="60b8d-397">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="60b8d-398">Pour plus d’informations, consultez l’article [Vue d’ensemble du modèle asynchrone basé sur les événements](https://go.microsoft.com/fwlink/?LinkId=141765).</span><span class="sxs-lookup"><span data-stu-id="60b8d-398">For more information, see [Event-based Asynchronous Pattern Overview](https://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60b8d-399">L'exemple suivant appelle un flux de travail composé d'une activité `LongRunningDiceRoll`.</span><span class="sxs-lookup"><span data-stu-id="60b8d-399">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="60b8d-400">L'activité `LongRunningDiceRoll` a deux arguments de sortie qui représentent les résultats du jet de dés.</span><span class="sxs-lookup"><span data-stu-id="60b8d-400">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="60b8d-401">Lorsque le flux de travail se termine, ces arguments sont récupérés dans le gestionnaire d'événements <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="60b8d-401">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object), userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : System.Collections.Generic.IDictionary&lt;string, obj&gt; * obj -&gt; unit" Usage="workflowInvoker.InvokeAsync (inputs, userState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs"><span data-ttu-id="60b8d-402">Dictionnaire des paramètres d’entrée du flux de travail, indexés par nom d’argument.</span><span class="sxs-lookup"><span data-stu-id="60b8d-402">The dictionary of input parameters to the workflow, keyed by argument name.</span></span></param>
        <param name="userState"><span data-ttu-id="60b8d-403">Objet fourni par l'utilisateur permettant de distinguer cet appel asynchrone particulier des autres opérations courantes d'appel asynchrone.</span><span class="sxs-lookup"><span data-stu-id="60b8d-403">A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.</span></span></param>
        <summary><span data-ttu-id="60b8d-404">Appelle de façon asynchrone un flux de travail à l'aide de l'objet <see cref="T:System.Collections.Generic.IDictionary`2" /> des paramètres d'entrée qui est spécifié et d'un identificateur unique.</span><span class="sxs-lookup"><span data-stu-id="60b8d-404">Invokes a workflow asynchronously using the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters and a unique identifier.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60b8d-405">Le paramètre `userState` doit être unique à travers toutes les opérations <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> en cours d'exécution pour l'activité actuelle.</span><span class="sxs-lookup"><span data-stu-id="60b8d-405">The `userState` parameter must be unique across all currently running <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operations for the current activity.</span></span> <span data-ttu-id="60b8d-406">Si `userState` n'est pas unique, une exception <xref:System.ArgumentException> est levée</span><span class="sxs-lookup"><span data-stu-id="60b8d-406">If `userState` is not unique, an <xref:System.ArgumentException> is thrown.</span></span> <span data-ttu-id="60b8d-407">`userState` permet d'identifier le flux de travail dans l'événement <xref:System.Activities.WorkflowInvoker.InvokeCompleted> et d'annuler le flux de travail à l'aide de la méthode <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</span><span class="sxs-lookup"><span data-stu-id="60b8d-407">`userState` is used to identify the workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, and to cancel the workflow using <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</span></span>  
  
 <span data-ttu-id="60b8d-408">Pour être informé de la fin du flux de travail, gérez l'événement <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="60b8d-408">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="60b8d-409">Pour configurer un intervalle de délai d'attente au cours duquel le flux de travail doit être exécuté, utilisez l'une des surcharges de <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> acceptant un objet <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="60b8d-409">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="60b8d-410">Cette méthode appelle de façon asynchrone un flux de travail à l’aide du modèle de conception asynchrone basé sur les événements.</span><span class="sxs-lookup"><span data-stu-id="60b8d-410">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="60b8d-411">Pour plus d’informations, consultez l’article [Vue d’ensemble du modèle asynchrone basé sur les événements](https://go.microsoft.com/fwlink/?LinkId=141765).</span><span class="sxs-lookup"><span data-stu-id="60b8d-411">For more information, see [Event-based Asynchronous Pattern Overview](https://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60b8d-412">L'exemple suivant appelle un flux de travail composé d'une activité `LongRunningDiceRoll`.</span><span class="sxs-lookup"><span data-stu-id="60b8d-412">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="60b8d-413">L'activité `LongRunningDiceRoll` a deux arguments de sortie qui représentent les résultats du jet de dés.</span><span class="sxs-lookup"><span data-stu-id="60b8d-413">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="60b8d-414">Lorsque le flux de travail se termine, ces arguments sont récupérés dans le gestionnaire d'événements <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="60b8d-414">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object), timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan -&gt; unit" Usage="workflowInvoker.InvokeAsync (inputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="inputs"><span data-ttu-id="60b8d-415">Dictionnaire des paramètres d’entrée du flux de travail, indexés par nom d’argument.</span><span class="sxs-lookup"><span data-stu-id="60b8d-415">The dictionary of input parameters to the workflow, keyed by argument name.</span></span></param>
        <param name="timeout"><span data-ttu-id="60b8d-416">Intervalle pendant lequel le flux de travail doit s'exécuter avant qu'il ne soit interrompu et qu'une exception <see cref="T:System.TimeoutException" /> ne soit levée.</span><span class="sxs-lookup"><span data-stu-id="60b8d-416">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span></span></param>
        <summary><span data-ttu-id="60b8d-417">Appelle de façon asynchrone un flux de travail avec l'objet <see cref="T:System.Collections.Generic.IDictionary`2" /> des paramètres d'entrée et l'intervalle de délai d'attente qui ont été spécifiés.</span><span class="sxs-lookup"><span data-stu-id="60b8d-417">Invokes a workflow asynchronously with the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters and the specified time-out interval.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60b8d-418">Pour être informé de la fin du flux de travail, gérez l'événement <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="60b8d-418">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="60b8d-419">Si le flux de travail ne se termine pas dans le délai spécifié, le flux de travail est interrompu et une exception <xref:System.TimeoutException> est levée.</span><span class="sxs-lookup"><span data-stu-id="60b8d-419">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="60b8d-420"><xref:System.TimeoutException> est levée uniquement si l'intervalle de délai d'attente est écoulé et que le workflow devient inactif pendant l'exécution.</span><span class="sxs-lookup"><span data-stu-id="60b8d-420">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="60b8d-421">Un flux de travail dont le délai d'exécution dépasse l'intervalle de délai d'attente spécifié se termine correctement s'il ne devient pas inactif.</span><span class="sxs-lookup"><span data-stu-id="60b8d-421">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
 <span data-ttu-id="60b8d-422">Cette méthode appelle de façon asynchrone un flux de travail à l’aide du modèle de conception asynchrone basé sur les événements.</span><span class="sxs-lookup"><span data-stu-id="60b8d-422">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="60b8d-423">Pour plus d’informations, consultez l’article [Vue d’ensemble du modèle asynchrone basé sur les événements](https://go.microsoft.com/fwlink/?LinkId=141765).</span><span class="sxs-lookup"><span data-stu-id="60b8d-423">For more information, see [Event-based Asynchronous Pattern Overview](https://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60b8d-424">L'exemple suivant appelle un flux de travail composé d'une activité `LongRunningDiceRoll`.</span><span class="sxs-lookup"><span data-stu-id="60b8d-424">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="60b8d-425">L'activité `LongRunningDiceRoll` a deux arguments de sortie qui représentent les résultats du jet de dés.</span><span class="sxs-lookup"><span data-stu-id="60b8d-425">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="60b8d-426">Lorsque le flux de travail se termine, ces arguments sont récupérés dans le gestionnaire d'événements <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="60b8d-426">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (TimeSpan timeout, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(valuetype System.TimeSpan timeout, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (timeout As TimeSpan, userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(TimeSpan timeout, System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : TimeSpan * obj -&gt; unit" Usage="workflowInvoker.InvokeAsync (timeout, userState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="60b8d-427">Intervalle pendant lequel le flux de travail doit s'exécuter avant qu'il ne soit interrompu et qu'une exception <see cref="T:System.TimeoutException" /> ne soit levée.</span><span class="sxs-lookup"><span data-stu-id="60b8d-427">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span></span></param>
        <param name="userState"><span data-ttu-id="60b8d-428">Objet fourni par l'utilisateur permettant de distinguer cet appel asynchrone particulier des autres opérations courantes d'appel asynchrone.</span><span class="sxs-lookup"><span data-stu-id="60b8d-428">A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.</span></span></param>
        <summary><span data-ttu-id="60b8d-429">Appelle de façon asynchrone un flux de travail avec l'intervalle de délai d'attente spécifié et un identificateur unique.</span><span class="sxs-lookup"><span data-stu-id="60b8d-429">Invokes a workflow asynchronously with the specified time-out interval and a unique identifier.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60b8d-430">Le paramètre `userState` doit être unique à travers toutes les opérations <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> en cours d'exécution pour l'activité actuelle.</span><span class="sxs-lookup"><span data-stu-id="60b8d-430">The `userState` parameter must be unique across all currently running <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operations for the current activity.</span></span> <span data-ttu-id="60b8d-431">Si `userState` n'est pas unique, une exception <xref:System.ArgumentException> est levée</span><span class="sxs-lookup"><span data-stu-id="60b8d-431">If `userState` is not unique, an <xref:System.ArgumentException> is thrown.</span></span> <span data-ttu-id="60b8d-432">`userState` permet d'identifier le flux de travail dans l'événement <xref:System.Activities.WorkflowInvoker.InvokeCompleted> et d'annuler le flux de travail à l'aide de la méthode <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</span><span class="sxs-lookup"><span data-stu-id="60b8d-432">`userState` is used to identify the workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, and to cancel the workflow using <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</span></span>  
  
 <span data-ttu-id="60b8d-433">Pour être informé de la fin du flux de travail, gérez l'événement <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="60b8d-433">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="60b8d-434">Si le flux de travail ne se termine pas dans le délai spécifié, le flux de travail est interrompu et une exception <xref:System.TimeoutException> est levée.</span><span class="sxs-lookup"><span data-stu-id="60b8d-434">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="60b8d-435"><xref:System.TimeoutException> est levée uniquement si l'intervalle de délai d'attente est écoulé et que le workflow devient inactif pendant l'exécution.</span><span class="sxs-lookup"><span data-stu-id="60b8d-435">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="60b8d-436">Un flux de travail dont le délai d'exécution dépasse l'intervalle de délai d'attente spécifié se termine correctement s'il ne devient pas inactif.</span><span class="sxs-lookup"><span data-stu-id="60b8d-436">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
 <span data-ttu-id="60b8d-437">Cette méthode appelle de façon asynchrone un flux de travail à l’aide du modèle de conception asynchrone basé sur les événements.</span><span class="sxs-lookup"><span data-stu-id="60b8d-437">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="60b8d-438">Pour plus d’informations, consultez l’article [Vue d’ensemble du modèle asynchrone basé sur les événements](https://go.microsoft.com/fwlink/?LinkId=141765).</span><span class="sxs-lookup"><span data-stu-id="60b8d-438">For more information, see [Event-based Asynchronous Pattern Overview](https://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60b8d-439">L'exemple suivant appelle un flux de travail composé d'une activité `LongRunningDiceRoll`.</span><span class="sxs-lookup"><span data-stu-id="60b8d-439">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="60b8d-440">L'activité `LongRunningDiceRoll` a deux arguments de sortie qui représentent les résultats du jet de dés.</span><span class="sxs-lookup"><span data-stu-id="60b8d-440">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="60b8d-441">Lorsque le flux de travail se termine, ces arguments sont récupérés dans le gestionnaire d'événements <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="60b8d-441">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object), timeout As TimeSpan, userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout, System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan * obj -&gt; unit" Usage="workflowInvoker.InvokeAsync (inputs, timeout, userState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs"><span data-ttu-id="60b8d-442">Dictionnaire des paramètres d’entrée du flux de travail, indexés par nom d’argument.</span><span class="sxs-lookup"><span data-stu-id="60b8d-442">The dictionary of input parameters to the workflow, keyed by argument name.</span></span></param>
        <param name="timeout"><span data-ttu-id="60b8d-443">Intervalle pendant lequel le flux de travail doit s'exécuter avant qu'il ne soit interrompu et qu'une exception <see cref="T:System.TimeoutException" /> ne soit levée.</span><span class="sxs-lookup"><span data-stu-id="60b8d-443">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span></span></param>
        <param name="userState"><span data-ttu-id="60b8d-444">Objet fourni par l'utilisateur permettant de distinguer cet appel asynchrone particulier des autres opérations courantes d'appel asynchrone.</span><span class="sxs-lookup"><span data-stu-id="60b8d-444">A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.</span></span></param>
        <summary><span data-ttu-id="60b8d-445">Appelle de façon asynchrone un flux de travail avec l'objet <see cref="T:System.Collections.Generic.IDictionary`2" /> des paramètres d'entrée qui est spécifié, l'intervalle de délai d'attente indiqué et un identificateur unique.</span><span class="sxs-lookup"><span data-stu-id="60b8d-445">Invokes a workflow asynchronously with the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, the specified time-out interval, and a unique identifier.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60b8d-446">Le paramètre `userState` doit être unique à travers toutes les opérations <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> en cours d'exécution pour l'activité actuelle.</span><span class="sxs-lookup"><span data-stu-id="60b8d-446">The `userState` parameter must be unique across all currently running <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operations for the current activity.</span></span> <span data-ttu-id="60b8d-447">Si `userState` n'est pas unique, une exception <xref:System.ArgumentException> est levée</span><span class="sxs-lookup"><span data-stu-id="60b8d-447">If `userState` is not unique, an <xref:System.ArgumentException> is thrown.</span></span> <span data-ttu-id="60b8d-448">`userState` permet d'identifier le flux de travail dans l'événement <xref:System.Activities.WorkflowInvoker.InvokeCompleted> et d'annuler le flux de travail à l'aide de la méthode <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</span><span class="sxs-lookup"><span data-stu-id="60b8d-448">`userState` is used to identify the workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, and to cancel the workflow using <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</span></span>  
  
 <span data-ttu-id="60b8d-449">Pour être informé de la fin du flux de travail, gérez l'événement <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="60b8d-449">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="60b8d-450">Si le flux de travail ne se termine pas dans le délai spécifié, le flux de travail est interrompu et une exception <xref:System.TimeoutException> est levée.</span><span class="sxs-lookup"><span data-stu-id="60b8d-450">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="60b8d-451"><xref:System.TimeoutException> est levée uniquement si l'intervalle de délai d'attente est écoulé et que le workflow devient inactif pendant l'exécution.</span><span class="sxs-lookup"><span data-stu-id="60b8d-451">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="60b8d-452">Un flux de travail dont le délai d'exécution dépasse l'intervalle de délai d'attente spécifié se termine correctement s'il ne devient pas inactif.</span><span class="sxs-lookup"><span data-stu-id="60b8d-452">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
 <span data-ttu-id="60b8d-453">Cette méthode appelle de façon asynchrone un flux de travail à l’aide du modèle de conception asynchrone basé sur les événements.</span><span class="sxs-lookup"><span data-stu-id="60b8d-453">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="60b8d-454">Pour plus d’informations, consultez l’article [Vue d’ensemble du modèle asynchrone basé sur les événements](https://go.microsoft.com/fwlink/?LinkId=141765).</span><span class="sxs-lookup"><span data-stu-id="60b8d-454">For more information, see [Event-based Asynchronous Pattern Overview](https://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60b8d-455">L'exemple suivant appelle un flux de travail composé d'une activité `LongRunningDiceRoll`.</span><span class="sxs-lookup"><span data-stu-id="60b8d-455">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="60b8d-456">L'activité `LongRunningDiceRoll` a deux arguments de sortie qui représentent les résultats du jet de dés.</span><span class="sxs-lookup"><span data-stu-id="60b8d-456">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="60b8d-457">Lorsque le flux de travail se termine, ces arguments sont récupérés dans le gestionnaire d'événements <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="60b8d-457">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Activities.InvokeCompletedEventArgs&gt; InvokeCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Activities.InvokeCompletedEventArgs&gt; InvokeCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Activities.WorkflowInvoker.InvokeCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Event InvokeCompleted As EventHandler(Of InvokeCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Activities::InvokeCompletedEventArgs ^&gt; ^ InvokeCompleted;" />
      <MemberSignature Language="F#" Value="member this.InvokeCompleted : EventHandler&lt;System.Activities.InvokeCompletedEventArgs&gt; " Usage="member this.InvokeCompleted : System.EventHandler&lt;System.Activities.InvokeCompletedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Activities.InvokeCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="60b8d-458">Se produit lorsque le flux de travail appelé par l'une des surcharges de <see cref="Overload:System.Activities.WorkflowInvoker.InvokeAsync" /> est terminé ou annulé.</span><span class="sxs-lookup"><span data-stu-id="60b8d-458">Occurs when the workflow invoked by one of the <see cref="Overload:System.Activities.WorkflowInvoker.InvokeAsync" /> overloads is completed or canceled.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60b8d-459">Gérez cet événement pour déterminer si un flux de travail appelé avec l'une des surcharges de <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> s'est exécuté correctement et pour récupérer les arguments de sortie du flux de travail terminé.</span><span class="sxs-lookup"><span data-stu-id="60b8d-459">Handle this to determine whether a workflow invoked with one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads completed successfully and to retrieve the output arguments of the completed workflow.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60b8d-460">L'exemple suivant appelle un flux de travail composé d'une activité `LongRunningDiceRoll`.</span><span class="sxs-lookup"><span data-stu-id="60b8d-460">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="60b8d-461">L'activité `LongRunningDiceRoll` a deux arguments de sortie qui représentent les résultats du jet de dés.</span><span class="sxs-lookup"><span data-stu-id="60b8d-461">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="60b8d-462">Lorsque le flux de travail se termine, ces arguments sont récupérés dans le gestionnaire d'événements <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="60b8d-462">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>