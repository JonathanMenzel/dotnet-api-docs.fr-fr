<Type Name="DefaultHttpHandler" FullName="System.Web.DefaultHttpHandler">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="2fdaffe3a469651a2b5cc4eced8a5a3b6b08126e" />
    <Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="11/17/2018" />
    <Meta Name="ms.locfileid" Value="51901121" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DefaultHttpHandler : System.Web.IHttpAsyncHandler" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DefaultHttpHandler extends System.Object implements class System.Web.IHttpAsyncHandler, class System.Web.IHttpHandler" />
  <TypeSignature Language="DocId" Value="T:System.Web.DefaultHttpHandler" />
  <TypeSignature Language="VB.NET" Value="Public Class DefaultHttpHandler&#xA;Implements IHttpAsyncHandler" />
  <TypeSignature Language="C++ CLI" Value="public ref class DefaultHttpHandler : System::Web::IHttpAsyncHandler" />
  <TypeSignature Language="F#" Value="type DefaultHttpHandler = class&#xA;    interface IHttpAsyncHandler&#xA;    interface IHttpHandler" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.IHttpAsyncHandler</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.IHttpHandler</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Représente les propriétés et les méthodes d'un gestionnaire HTTP par défaut.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.Web.DefaultHttpHandler> objet intercepte les demandes entrantes dans le pipeline HTTP lorsqu’à la fois l’interception des demandes a été configurée via les Services Internet (IIS) 6.0 et aucune liaison explicite s’appliquent à l’extension demandée.  
  
 L’interception de requête peut être configurée via la fonctionnalité de mappage d’application générique introduite dans IIS 6.0. Pour plus d’informations, recherchez le [MSDN Library](https://go.microsoft.com/fwlink/?linkid=37118) pour plus d’informations sur l’utilisation de mappages d’applications génériques pour remapper une URL.  
  
 Le <xref:System.Web.DefaultHttpHandler> la classe implémente le <xref:System.Web.IHttpAsyncHandler> interface pour fournir le traitement de la demande asynchrone. Pour obtenir des informations générales sur les gestionnaires HTTP, consultez [vue d’ensemble des Modules HTTP et les gestionnaires HTTP](https://msdn.microsoft.com/library/f540bdeb-d22e-4e1d-ba8a-fe6c9926283b). En outre, pour plus d’informations, consultez les éléments suivants :  
  
-   Sur la création de gestionnaires HTTP asynchrones, consultez [procédure pas à pas : création d’un gestionnaire HTTP asynchrone](https://msdn.microsoft.com/library/1b5c4a27-599b-44d0-8a06-72edc6765aa9).  
  
-   À propos de l’enregistrement de gestionnaires HTTP, consultez [Comment : inscrire des gestionnaires HTTP](https://msdn.microsoft.com/library/d5633f9a-03fb-4ccc-a799-dc67d656fa60).  
  
 Classes peuvent être dérivées de la <xref:System.Web.DefaultHttpHandler> classe pour fournir une gestion personnalisée des demandes. Un gestionnaire HTTP asynchrone qui est dérivé de la <xref:System.Web.DefaultHttpHandler> peut remplacer le <xref:System.Web.DefaultHttpHandler.BeginProcessRequest%2A> méthode pour modifier la façon dont les demandes sont traitées.  
  
 Un <xref:System.Web.DefaultHttpHandler> n’utilise pas d’erreurs ASP.NET. Un contenu existant qui utilise des erreurs IIS ou un mécanisme d’erreur personnalisés de ISAPI décence fonctionnerait inchangé.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment implémenter un gestionnaire HTTP personnalisé en dérivant la <xref:System.Web.DefaultHttpHandler> classe.  
  
 [!code-csharp[System.Web.DefaultHttpHandler#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.DefaultHttpHandler/CS/source.cs#1)]
 [!code-vb[System.Web.DefaultHttpHandler#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.DefaultHttpHandler/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/d5633f9a-03fb-4ccc-a799-dc67d656fa60">Comment : inscrire des gestionnaires HTTP</related>
    <related type="Article" href="https://msdn.microsoft.com/library/1b5c4a27-599b-44d0-8a06-72edc6765aa9">Comment : créer un gestionnaire HTTP asynchrone</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DefaultHttpHandler ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DefaultHttpHandler.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DefaultHttpHandler();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.DefaultHttpHandler" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginProcessRequest">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginProcessRequest (System.Web.HttpContext context, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginProcessRequest(class System.Web.HttpContext context, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DefaultHttpHandler.BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BeginProcessRequest (context As HttpContext, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginProcessRequest(System::Web::HttpContext ^ context, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginProcessRequest : System.Web.HttpContext * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginProcessRequest : System.Web.HttpContext * AsyncCallback * obj -&gt; IAsyncResult" Usage="defaultHttpHandler.BeginProcessRequest (context, callback, state)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.IHttpAsyncHandler.BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="context">Objet qui fournit des références à des objets serveur intrinsèques qui sont utilisés pour traiter des requêtes HTTP.</param>
        <param name="callback">Méthode à appeler lorsque l'appel de la méthode asynchrone est terminé. Si <c>callback</c> a la valeur <see langword="null" />, le délégué n’est pas appelé.</param>
        <param name="state">Données d'état éventuelles nécessaires pour traiter la demande.</param>
        <summary>Lance un appel asynchrone au gestionnaire HTTP.</summary>
        <returns>
          <see cref="T:System.IAsyncResult" /> qui contient des informations sur l'état du processus.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsque vous créez un gestionnaire HTTP pour une utilisation asynchrone, votre gestionnaire doit implémenter asynchrone <xref:System.Web.DefaultHttpHandler.BeginProcessRequest%2A> et <xref:System.Web.DefaultHttpHandler.EndProcessRequest%2A> méthodes sont appelées de façon asynchrone par ASP.NET.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">Les conditions préalables au traitement d'une demande échouent, et soit le fichier demandé a pour suffixe .asp, soit la demande a été envoyée par le biais de la méthode POST.</exception>
      </Docs>
    </Member>
    <Member MemberName="Context">
      <MemberSignature Language="C#" Value="protected System.Web.HttpContext Context { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.HttpContext Context" />
      <MemberSignature Language="DocId" Value="P:System.Web.DefaultHttpHandler.Context" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property Context As HttpContext" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Web::HttpContext ^ Context { System::Web::HttpContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Context : System.Web.HttpContext" Usage="System.Web.DefaultHttpHandler.Context" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.HttpContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le contexte associé à l'objet <see cref="T:System.Web.DefaultHttpHandler" /> actuel.</summary>
        <value>Objet <see cref="T:System.Web.HttpContext" /> qui contient le contexte en cours.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.DefaultHttpHandler.Context%2A> propriété fournit l’accès aux cours <xref:System.Web.HttpContext> objet pour les classes dérivées. Un <xref:System.Web.HttpContext> objet fournit l’accès à la fonction intrinsèque <xref:System.Web.HttpApplication.Request%2A>, <xref:System.Web.HttpApplication.Response%2A>, et <xref:System.Web.HttpApplication.Server%2A> propriétés de la demande. Pour plus d’informations sur l’accès à des informations contextuelles, consultez <xref:System.Web.HttpContext>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.HttpContext" />
      </Docs>
    </Member>
    <Member MemberName="EndProcessRequest">
      <MemberSignature Language="C#" Value="public virtual void EndProcessRequest (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndProcessRequest(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DefaultHttpHandler.EndProcessRequest(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndProcessRequest (result As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndProcessRequest(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndProcessRequest : IAsyncResult -&gt; unit&#xA;override this.EndProcessRequest : IAsyncResult -&gt; unit" Usage="defaultHttpHandler.EndProcessRequest result" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.IHttpAsyncHandler.EndProcessRequest(System.IAsyncResult)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">Objet qui contient des informations sur l'état du processus.</param>
        <summary>Fournit une méthode End pour un processus asynchrone.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez utiliser la <xref:System.Web.DefaultHttpHandler.EndProcessRequest%2A> méthode lève des exceptions sont interceptées au cours du processus asynchrone.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteUrlHeaders">
      <MemberSignature Language="C#" Value="protected System.Collections.Specialized.NameValueCollection ExecuteUrlHeaders { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Specialized.NameValueCollection ExecuteUrlHeaders" />
      <MemberSignature Language="DocId" Value="P:System.Web.DefaultHttpHandler.ExecuteUrlHeaders" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property ExecuteUrlHeaders As NameValueCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Specialized::NameValueCollection ^ ExecuteUrlHeaders { System::Collections::Specialized::NameValueCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ExecuteUrlHeaders : System.Collections.Specialized.NameValueCollection" Usage="System.Web.DefaultHttpHandler.ExecuteUrlHeaders" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.NameValueCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient qu'une collection d'en-têtes de demande et de valeurs de demande à transférer avec la demande.</summary>
        <value>
          <see cref="T:System.Collections.Specialized.NameValueCollection" /> qui contient des en-têtes de demande et des valeurs.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.DefaultHttpHandler.ExecuteUrlHeaders%2A> propriété retourne une collection vide, sauf si elle est remplie dans une classe dérivée de la <xref:System.Web.DefaultHttpHandler> classe. Les en-têtes sont ajoutés sont ajoutées à la collection d’en-têtes dans la demande avant de transmettre la demande de revenir à Internet Information Services (IIS).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReusable">
      <MemberSignature Language="C#" Value="public virtual bool IsReusable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReusable" />
      <MemberSignature Language="DocId" Value="P:System.Web.DefaultHttpHandler.IsReusable" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsReusable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsReusable { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReusable : bool" Usage="System.Web.DefaultHttpHandler.IsReusable" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.IHttpHandler.IsReusable</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur Boolean indiquant qu'une autre demande peut utiliser l'instance actuelle de la classe <see cref="T:System.Web.DefaultHttpHandler" />.</summary>
        <value>
          <see langword="true" /> si le <see cref="T:System.Web.DefaultHttpHandler" /> est réutilisable ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour définir explicitement la <xref:System.Web.DefaultHttpHandler.IsReusable%2A> propriété `true` ou `false`, remplacer le <xref:System.Web.DefaultHttpHandler.IsReusable%2A> propriété.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.DefaultHttpHandler.ProcessRequest(System.Web.HttpContext)" />
      </Docs>
    </Member>
    <Member MemberName="OnExecuteUrlPreconditionFailure">
      <MemberSignature Language="C#" Value="public virtual void OnExecuteUrlPreconditionFailure ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnExecuteUrlPreconditionFailure() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DefaultHttpHandler.OnExecuteUrlPreconditionFailure" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub OnExecuteUrlPreconditionFailure ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void OnExecuteUrlPreconditionFailure();" />
      <MemberSignature Language="F#" Value="abstract member OnExecuteUrlPreconditionFailure : unit -&gt; unit&#xA;override this.OnExecuteUrlPreconditionFailure : unit -&gt; unit" Usage="defaultHttpHandler.OnExecuteUrlPreconditionFailure " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Appelé lorsque les conditions préalables empêchent l'objet <see cref="T:System.Web.DefaultHttpHandler" /> de traiter une demande.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Conditions préalables sont spécifiées par le client dans les champs d’en-tête de demande et sont évaluées sur le serveur Web. Par exemple, à l’aide de conditions préalables, les clients peuvent empêcher une méthode demandée (par exemple, GET) appliqué à une ressource autre que celle prévue. Pour plus d’informations, consultez la section 14, « Définitions de champ d’en-tête », dans le [Hypertext Transfer Protocol--HTTP/1.1](https://go.microsoft.com/fwlink/?LinkID=73147) spécification sur le site Web de World Wide Web Consortium (W3C).  
  
 Le <xref:System.Web.DefaultHttpHandler.OnExecuteUrlPreconditionFailure%2A> méthode est appelée lorsque les conditions préalables empêchent le <xref:System.Web.DefaultHttpHandler> objet de traitement d’une requête. Une classe dérivée peut substituer le <xref:System.Web.DefaultHttpHandler.OnExecuteUrlPreconditionFailure%2A> méthode lève une exception lorsque les conditions préalables échouent. Le <xref:System.Web.DefaultHttpHandler> ne lève pas d’exception le <xref:System.Web.DefaultHttpHandler.OnExecuteUrlPreconditionFailure%2A> (méthode).  
  
 Les éléments suivants entraîne l’échec des conditions préalables :  
  
-   Appel de <xref:System.Web.HttpResponse.Write%2A?displayProperty=nameWithType>.  
  
-   Appel de <xref:System.Web.HttpResponse.AddHeader%2A?displayProperty=nameWithType>.  
  
-   Appel de <xref:System.Web.HttpResponse.Flush%2A?displayProperty=nameWithType>.  
  
-   Modification de la stratégie de cache pour la réponse.  
  
-   Ajout d’un <xref:System.IO.Stream> objet en tant que filtre pour le <xref:System.Web.HttpResponse.Filter%2A?displayProperty=nameWithType> propriété.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OverrideExecuteUrlPath">
      <MemberSignature Language="C#" Value="public virtual string OverrideExecuteUrlPath ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string OverrideExecuteUrlPath() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DefaultHttpHandler.OverrideExecuteUrlPath" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OverrideExecuteUrlPath () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ OverrideExecuteUrlPath();" />
      <MemberSignature Language="F#" Value="abstract member OverrideExecuteUrlPath : unit -&gt; string&#xA;override this.OverrideExecuteUrlPath : unit -&gt; string" Usage="defaultHttpHandler.OverrideExecuteUrlPath " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Substitue l'URL cible de la demande actuelle.</summary>
        <returns>URL substituée à utiliser dans la demande ; sinon, <see langword="null" />, si aucune URL remplacée n'est fournie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.DefaultHttpHandler.OverrideExecuteUrlPath%2A> retourne de la méthode `null` , sauf si elle est substituée dans une classe dérivée de la <xref:System.Web.DefaultHttpHandler> classe.  
  
 Le <xref:System.Web.DefaultHttpHandler.OverrideExecuteUrlPath%2A> méthode est appelée uniquement si ASP.NET s’exécute en mode d’isolation de processus de travail sur IIS 6.0, et si la réponse n’a pas été modifié avant le <xref:System.Web.DefaultHttpHandler> objet a été appelé. La réponse est modifiée par les éléments suivants :  
  
-   Appel de <xref:System.Web.HttpResponse.Write%2A?displayProperty=nameWithType>.  
  
-   Appel de <xref:System.Web.HttpResponse.AddHeader%2A?displayProperty=nameWithType>.  
  
-   Appel de <xref:System.Web.HttpResponse.Flush%2A?displayProperty=nameWithType>.  
  
-   Modification de la stratégie de cache pour la réponse.  
  
-   Ajout d’un <xref:System.IO.Stream> objet en tant que filtre pour le <xref:System.Web.HttpResponse.Filter%2A?displayProperty=nameWithType> propriété.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessRequest">
      <MemberSignature Language="C#" Value="public virtual void ProcessRequest (System.Web.HttpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ProcessRequest(class System.Web.HttpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DefaultHttpHandler.ProcessRequest(System.Web.HttpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ProcessRequest (context As HttpContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ProcessRequest(System::Web::HttpContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member ProcessRequest : System.Web.HttpContext -&gt; unit&#xA;override this.ProcessRequest : System.Web.HttpContext -&gt; unit" Usage="defaultHttpHandler.ProcessRequest context" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.IHttpHandler.ProcessRequest(System.Web.HttpContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
      </Parameters>
      <Docs>
        <param name="context">Objet qui fournit des références à des objets serveur intrinsèques utilisés pour traiter des requêtes HTTP.</param>
        <summary>Active un objet <see cref="T:System.Web.DefaultHttpHandler" /> pour traiter des demandes Web HTTP.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.DefaultHttpHandler.ProcessRequest%2A> méthode ne doit pas être appelée de manière synchrone. Les classes dérivées de la <xref:System.Web.DefaultHttpHandler> classe peut substituer le <xref:System.Web.DefaultHttpHandler.ProcessRequest%2A> pour fournir le traitement de requête personnalisé.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Le <see cref="M:System.Web.DefaultHttpHandler.ProcessRequest(System.Web.HttpContext)" /> est appelé de façon synchrone.</exception>
        <altmember cref="M:System.Web.IHttpHandler.ProcessRequest(System.Web.HttpContext)" />
      </Docs>
    </Member>
  </Members>
</Type>