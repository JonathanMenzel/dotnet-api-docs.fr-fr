<Type Name="IHttpHandler" FullName="System.Web.IHttpHandler">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c0af3086a39a9ec32e66cb3393068e7b0233d4ac" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="37528488" /></Metadata><TypeSignature Language="C#" Value="public interface IHttpHandler" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IHttpHandler" />
  <TypeSignature Language="DocId" Value="T:System.Web.IHttpHandler" />
  <TypeSignature Language="VB.NET" Value="Public Interface IHttpHandler" />
  <TypeSignature Language="C++ CLI" Value="public interface class IHttpHandler" />
  <TypeSignature Language="F#" Value="type IHttpHandler = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Définit le contrat que ASP.NET implémente pour traiter de manière synchrone les demandes Web HTTP en utilisant des gestionnaires HTTP personnalisés.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez écrire des gestionnaires HTTP personnalisés pour traiter des types spécifiques et prédéfinis de demandes HTTP dans n’importe quel langage conforme Common Language Specification (CLS). Le code exécutable défini dans le `HttpHandler` classes, plutôt que des pages Web ASP ou ASP.NET conventionnelles, répond à ces demandes spécifiques. Gestionnaires HTTP vous permettent d’interagir avec les services de réponse du serveur Web IIS et de requête de bas niveau et fournissent des fonctionnalités à une grande partie comme les extensions ISAPI, mais avec un modèle de programmation plus simple.  
  
 Si votre gestionnaire sera accéder aux valeurs d’état de session, il doit implémenter le <xref:System.Web.SessionState.IRequiresSessionState> interface (interface de marqueur sans méthode).  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="IsReusable">
      <MemberSignature Language="C#" Value="public bool IsReusable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReusable" />
      <MemberSignature Language="DocId" Value="P:System.Web.IHttpHandler.IsReusable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReusable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReusable { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReusable : bool" Usage="System.Web.IHttpHandler.IsReusable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur indiquant si une autre requête peut utiliser l'instance de <see cref="T:System.Web.IHttpHandler" />.</summary>
        <value><see langword="true" /> si l'instance <see cref="T:System.Web.IHttpHandler" /> est réutilisable ; sinon <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous définissez explicitement la <xref:System.Web.IHttpHandler.IsReusable%2A> propriété `true` ou `false` par le code que vous fournissez et qui remplace le <xref:System.Web.IHttpHandler.IsReusable%2A> propriété accesseur Get.  
  
   
  
## Examples  
 L’exemple de code suivant écrit quatre lignes de texte dans le flux de sortie HTTP en réponse à une demande du client pour une page nommée handler.aspx. Toutes les requêtes pour handler.aspx sont traitées par le `MyHttpHandler` classe dans l’espace de noms `HandlerExample` contenus dans l’assembly HandlerTest.dll.  
  
 [!code-csharp[Classic IHttpHandler.ProcessRequest Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic IHttpHandler.ProcessRequest Example/CS/source.cs#1)]
 [!code-vb[Classic IHttpHandler.ProcessRequest Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic IHttpHandler.ProcessRequest Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessRequest">
      <MemberSignature Language="C#" Value="public void ProcessRequest (System.Web.HttpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ProcessRequest(class System.Web.HttpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.IHttpHandler.ProcessRequest(System.Web.HttpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ProcessRequest (context As HttpContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ProcessRequest(System::Web::HttpContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member ProcessRequest : System.Web.HttpContext -&gt; unit" Usage="iHttpHandler.ProcessRequest context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
      </Parameters>
      <Docs>
        <param name="context">Objet <see cref="T:System.Web.HttpContext" /> qui fournit les références à des objets serveur intrinsèques (par exemple, <see langword="Request" />, <see langword="Response" />, <see langword="Session" /> et <see langword="Server" />) utilisés pour traiter des demandes HTTP.</param>
        <summary>Active le traitement des demandes Web HTTP par un <see langword="HttpHandler" /> personnalisé qui implémente l'interface <see cref="T:System.Web.IHttpHandler" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Placez votre personnalisé `HttpHandler` de code dans le <xref:System.Web.IHttpHandler.ProcessRequest%2A> méthode virtuelle, comme illustré dans l’exemple suivant.  
  
   
  
## Examples  
 L’exemple de code suivant écrit quatre lignes de texte dans le flux de sortie HTTP en réponse à une demande du client pour une page nommée handler.aspx. Toutes les requêtes pour handler.aspx sont traitées par le `MyHttpHandler` classe dans l’espace de noms `HandlerExample` contenus dans l’assembly HandlerTest.dll.  
  
 [!code-csharp[Classic IHttpHandler.ProcessRequest Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic IHttpHandler.ProcessRequest Example/CS/source.cs#1)]
 [!code-vb[Classic IHttpHandler.ProcessRequest Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic IHttpHandler.ProcessRequest Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>