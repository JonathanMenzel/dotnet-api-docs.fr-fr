<Type Name="Strings" FullName="Microsoft.VisualBasic.Strings">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="db4fae13571ff6b7294ab82426f23ca45d4ba9ec" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37710582" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Strings" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Strings extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Strings" />
  <TypeSignature Language="VB.NET" Value="Public Module Strings" />
  <TypeSignature Language="C++ CLI" Value="public ref class Strings sealed" />
  <TypeSignature Language="F#" Value="type Strings = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>The <see langword="Strings" /> module contains procedures used to perform string operations.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce module prend en charge les mots clés du langage Visual Basic et les membres de bibliothèque Runtime qui manipulent des chaînes.  
  
   
  
## Examples  
 L’exemple suivant montre comment fractionner une chaîne à ses espaces.  
  
 [!code-vb[VbVbalrStrings#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#13)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="Asc">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Asc">
      <MemberSignature Language="C#" Value="public static int Asc (char String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Asc(char String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Asc(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Asc (String As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Asc(char String);" />
      <MemberSignature Language="F#" Value="static member Asc : char -&gt; int" Usage="Microsoft.VisualBasic.Strings.Asc String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="String">Required. Any valid <see langword="Char" /> or <see langword="String" /> expression. If <c>String</c> is a <see langword="String" /> expression, only the first character of the string is used for input. If <c>String</c> is <see langword="Nothing" /> or contains no characters, an <see cref="T:System.ArgumentException" /> error occurs.</param>
        <summary>Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</summary>
        <returns>Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc` Retourne le *point de code*, ou code de caractère, le caractère d’entrée. Cela peut être de 0 à 255 pour les valeurs les caractères codés sur un octet (SBCS) et entre-32 768 et 32 767 pour les valeurs sur deux octets (DBCS).  
  
 `AscW` Retourne le point de code Unicode du caractère d’entrée. Cela peut être 0 et 65 535. La valeur retournée est indépendante des culture et le code des paramètres de page pour le thread actuel.  
  
> [!NOTE]
>  Le `AscB` fonction des versions antérieures de Visual Basic retourne un code pour un octet, plutôt qu’un caractère. Il est utilisé principalement pour la conversion de chaînes dans les applications de jeu codés sur deux octets. Toutes les chaînes Visual Basic 2005 sont au format Unicode, et `AscB` n’est plus pris en charge.  
  
   
  
## Examples  
 L’exemple suivant utilise le `Asc` fonction pour retourner `Integer` codes correspondant à la première lettre de chaque chaîne de caractères.  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Asc">
      <MemberSignature Language="C#" Value="public static int Asc (string String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Asc(string String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Asc(System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Asc(System::String ^ String);" />
      <MemberSignature Language="F#" Value="static member Asc : string -&gt; int" Usage="Microsoft.VisualBasic.Strings.Asc String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="String">Required. Any valid <see langword="Char" /> or <see langword="String" /> expression. If <c>String</c> is a <see langword="String" /> expression, only the first character of the string is used for input. If <c>String</c> is <see langword="Nothing" /> or contains no characters, an <see cref="T:System.ArgumentException" /> error occurs.</param>
        <summary>Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</summary>
        <returns>Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc` Retourne le *point de code*, ou code de caractère, le caractère d’entrée. Cela peut être de 0 à 255 pour les valeurs les caractères codés sur un octet (SBCS) et entre-32 768 et 32 767 pour les valeurs sur deux octets (DBCS).  
  
 `AscW` Retourne le point de code Unicode du caractère d’entrée. Cela peut être 0 et 65 535. La valeur retournée est indépendante des culture et le code des paramètres de page pour le thread actuel.  
  
> [!NOTE]
>  Le `AscB` fonction des versions antérieures de Visual Basic retourne un code pour un octet, plutôt qu’un caractère. Il est utilisé principalement pour la conversion de chaînes dans les applications de jeu codés sur deux octets. Toutes les chaînes Visual Basic 2005 sont au format Unicode, et `AscB` n’est plus pris en charge.  
  
   
  
## Examples  
 L’exemple suivant utilise le `Asc` fonction pour retourner `Integer` codes correspondant à la première lettre de chaque chaîne de caractères.  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="AscW">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AscW">
      <MemberSignature Language="C#" Value="public static int AscW (char String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 AscW(char String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.AscW(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function AscW (String As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int AscW(char String);" />
      <MemberSignature Language="F#" Value="static member AscW : char -&gt; int" Usage="Microsoft.VisualBasic.Strings.AscW String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="String">Required. Any valid <see langword="Char" /> or <see langword="String" /> expression. If <c>String</c> is a <see langword="String" /> expression, only the first character of the string is used for input. If <c>String</c> is <see langword="Nothing" /> or contains no characters, an <see cref="T:System.ArgumentException" /> error occurs.</param>
        <summary>Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</summary>
        <returns>Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc` Retourne le *point de code*, ou code de caractère, le caractère d’entrée. Cela peut être de 0 à 255 pour les valeurs les caractères codés sur un octet (SBCS) et entre-32 768 et 32 767 pour les valeurs sur deux octets (DBCS).  
  
 `AscW` Retourne le point de code Unicode du caractère d’entrée. Cela peut être 0 et 65 535. La valeur retournée est indépendante des culture et le code des paramètres de page pour le thread actuel.  
  
> [!NOTE]
>  Le `AscB` fonction des versions antérieures de Visual Basic retourne un code pour un octet, plutôt qu’un caractère. Il est utilisé principalement pour la conversion de chaînes dans les applications de jeu codés sur deux octets. Toutes les chaînes Visual Basic 2005 sont au format Unicode, et `AscB` n’est plus pris en charge.  
  
   
  
## Examples  
 L’exemple suivant utilise le `Asc` fonction pour retourner `Integer` codes correspondant à la première lettre de chaque chaîne de caractères.  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="AscW">
      <MemberSignature Language="C#" Value="public static int AscW (string String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 AscW(string String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.AscW(System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int AscW(System::String ^ String);" />
      <MemberSignature Language="F#" Value="static member AscW : string -&gt; int" Usage="Microsoft.VisualBasic.Strings.AscW String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="String">Required. Any valid <see langword="Char" /> or <see langword="String" /> expression. If <c>String</c> is a <see langword="String" /> expression, only the first character of the string is used for input. If <c>String</c> is <see langword="Nothing" /> or contains no characters, an <see cref="T:System.ArgumentException" /> error occurs.</param>
        <summary>Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</summary>
        <returns>Returns an <see langword="Integer" /> value representing the character code corresponding to a character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc` Retourne le *point de code*, ou code de caractère, le caractère d’entrée. Cela peut être de 0 à 255 pour les valeurs les caractères codés sur un octet (SBCS) et entre-32 768 et 32 767 pour les valeurs sur deux octets (DBCS).  
  
 `AscW` Retourne le point de code Unicode du caractère d’entrée. Cela peut être 0 et 65 535. La valeur retournée est indépendante des culture et le code des paramètres de page pour le thread actuel.  
  
> [!NOTE]
>  Le `AscB` fonction des versions antérieures de Visual Basic retourne un code pour un octet, plutôt qu’un caractère. Il est utilisé principalement pour la conversion de chaînes dans les applications de jeu codés sur deux octets. Toutes les chaînes Visual Basic 2005 sont au format Unicode, et `AscB` n’est plus pris en charge.  
  
   
  
## Examples  
 L’exemple suivant utilise le `Asc` fonction pour retourner `Integer` codes correspondant à la première lettre de chaque chaîne de caractères.  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Chr">
      <MemberSignature Language="C#" Value="public static char Chr (int CharCode);" />
      <MemberSignature Language="ILAsm" Value=".method public static char Chr(int32 CharCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Chr (CharCode As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char Chr(int CharCode);" />
      <MemberSignature Language="F#" Value="static member Chr : int -&gt; char" Usage="Microsoft.VisualBasic.Strings.Chr CharCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="CharCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="CharCode">Required. An <see langword="Integer" /> expression representing the <c>code point</c>, or character code, for the character.</param>
        <summary>Returns the character associated with the specified character code.</summary>
        <returns>Returns the character associated with the specified character code.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La plage asymétrique autorisée pour `CharCode` compense les différences de stockage entre le `Short` et `Integer`. Par exemple,-29 183 est un `Short` mais + 36 353 est un `Integer`. Cela facilite également la compatibilité avec Visual Basic 6.0.  
  
 `Chr` utilise le <xref:System.Text.Encoding> classe dans le <xref:System.Text?displayProperty=nameWithType> (DBCS), espace de noms pour déterminer si le thread actuel utilise un jeu de caractères à un octet (SBCS) ou double-byte character set. Il prend ensuite `CharCode` comme un code de point dans l’ensemble approprié. La plage peut être de 0 à 255 pour les caractères SBCS et de-32 768 et 65 535 pour les caractères DBCS.  
  
 La valeur retournée dépend de la page de codes pour le thread actuel, qui est contenue dans le <xref:System.Globalization.TextInfo.ANSICodePage%2A> propriété de la <xref:System.Globalization.TextInfo> classe dans le <xref:System.Globalization> espace de noms. Vous pouvez obtenir <xref:System.Globalization.TextInfo.ANSICodePage%2A> en spécifiant `System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`.  
  
 `ChrW` prend `CharCode` point de code en tant qu’Unicode. La plage est indépendante des culture et le code des paramètres de page pour le thread actuel. Valeurs comprise entre -32768 et-1 sont traitées comme valeurs dans la plage + 32 768 et + 65 535.  
  
 Nombres de 0 à 31 sont les mêmes que les codes ASCII imprimables standard. Par exemple, `Chr(10)` renvoie un retour chariot.  
  
> [!NOTE]
>  Le `ChrB` fonction dans les versions antérieures de Visual Basic retourne un seul octet. Il est utilisé principalement pour la conversion de chaînes dans les applications de jeu codés sur deux octets. Toutes les chaînes en Visual Basic et .NET Framework sont au format Unicode, et `ChrB` n’est plus pris en charge.  
  
   
  
## Examples  
 L’exemple suivant utilise le `Chr` fonction pour retourner le caractère associé au code de caractère spécifié.  
  
 [!code-vb[VbVbalrStrings#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="CharCode" /> &lt; 0 or &gt; 255 for <see langword="Chr" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Asc" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.AscW" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="ChrW">
      <MemberSignature Language="C#" Value="public static char ChrW (int CharCode);" />
      <MemberSignature Language="ILAsm" Value=".method public static char ChrW(int32 CharCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChrW (CharCode As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ChrW(int CharCode);" />
      <MemberSignature Language="F#" Value="static member ChrW : int -&gt; char" Usage="Microsoft.VisualBasic.Strings.ChrW CharCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="CharCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="CharCode">Required. An <see langword="Integer" /> expression representing the <c>code point</c>, or character code, for the character.</param>
        <summary>Returns the character associated with the specified character code.</summary>
        <returns>Returns the character associated with the specified character code.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La plage asymétrique autorisée pour `CharCode` compense les différences de stockage entre le `Short` et `Integer`. Par exemple,-29 183 est un `Short` mais + 36 353 est un `Integer`. Cela facilite également la compatibilité avec Visual Basic 6.0.  
  
 `Chr` utilise le <xref:System.Text.Encoding> classe dans le <xref:System.Text?displayProperty=nameWithType> (DBCS), espace de noms pour déterminer si le thread actuel utilise un jeu de caractères à un octet (SBCS) ou double-byte character set. Il prend ensuite `CharCode` comme un code de point dans l’ensemble approprié. La plage peut être de 0 à 255 pour les caractères SBCS et de-32 768 et 65 535 pour les caractères DBCS.  
  
 La valeur retournée dépend de la page de codes pour le thread actuel, qui est contenue dans le <xref:System.Globalization.TextInfo.ANSICodePage%2A> propriété de la <xref:System.Globalization.TextInfo> classe dans le <xref:System.Globalization> espace de noms. Vous pouvez obtenir <xref:System.Globalization.TextInfo.ANSICodePage%2A> en spécifiant `System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`.  
  
 `ChrW` prend `CharCode` point de code en tant qu’Unicode. La plage est indépendante des culture et le code des paramètres de page pour le thread actuel. Valeurs comprise entre -32768 et-1 sont traitées comme valeurs dans la plage + 32 768 et + 65 535.  
  
 Nombres de 0 à 31 sont les mêmes que les codes ASCII imprimables standard. Par exemple, `Chr(10)` renvoie un retour chariot.  
  
> [!NOTE]
>  Le `ChrB` fonction dans les versions antérieures de Visual Basic retourne un seul octet. Il est utilisé principalement pour la conversion de chaînes dans les applications de jeu codés sur deux octets. Toutes les chaînes en Visual Basic et .NET Framework sont au format Unicode, et `ChrB` n’est plus pris en charge.  
  
   
  
## Examples  
 L’exemple suivant utilise le `Chr` fonction pour retourner le caractère associé au code de caractère spécifié.  
  
 [!code-vb[VbVbalrStrings#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="CharCode" /> &lt; -32768 or &gt; 65535 for <see langword="ChrW" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Asc" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.AscW" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Filter">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Returns a zero-based array containing a subset of a <see langword="String" /> array based on specified filter criteria.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public static string[] Filter (object[] Source, string Match, bool Include = true, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Filter(object[] Source, string Match, bool Include, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Filter (Source As Object(), Match As String, Optional Include As Boolean = true, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String()" />
      <MemberSignature Language="F#" Value="static member Filter : obj[] * string * bool * Microsoft.VisualBasic.CompareMethod -&gt; string[]" Usage="Microsoft.VisualBasic.Strings.Filter (Source, Match, Include, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.Object[]" />
        <Parameter Name="Match" Type="System.String" />
        <Parameter Name="Include" Type="System.Boolean" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Source">Required. One-dimensional array of strings to be searched.</param>
        <param name="Match">Required. String to search for.</param>
        <param name="Include">Optional. <see langword="Boolean" /> value indicating whether to return substrings that include or exclude <c>Match</c>. If <c>Include</c> is <see langword="True" />, the <see langword="Filter" /> function returns the subset of the array that contains <c>Match</c> as a substring. If <c>Include</c> is <see langword="False" />, the <see langword="Filter" /> function returns the subset of the array that does not contain <c>Match</c> as a substring.</param>
        <param name="Compare">Optional. Numeric value indicating the kind of string comparison to use. See "Settings" for values.</param>
        <summary>Returns a zero-based array containing a subset of a <see langword="String" /> array based on specified filter criteria.</summary>
        <returns>Returns a zero-based array containing a subset of a <see langword="String" /> array based on specified filter criteria.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si aucune correspondance de `Match` se trouvent dans `Source`, le `Filter` fonction retourne un tableau vide. Une erreur se produit si `Source` est défini sur `Nothing` ou n’est pas un tableau unidimensionnel.  
  
 Le tableau retourné par la `Filter` fonction contient suffisamment d’éléments pour contenir le nombre d’éléments de mise en correspondance.  
  
 Le `Compare` argument peut prendre les valeurs suivantes.  
  
|Constante|Description|  
|-|-|  
|Constante|Description|  
|`CompareMethod.Binary`|Effectue une comparaison binaire|  
|`CompareMethod.Text`|Effectue une comparaison textuelle|  
  
   
  
## Examples  
 Cet exemple illustre l’utilisation de la `Filter` (fonction).  
  
 [!code-vb[VbVbalrStrings#24](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Source" /> is <see langword="Nothing" /> or is not a one-dimensional array.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public static string[] Filter (string[] Source, string Match, bool Include = true, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Filter(string[] Source, string Match, bool Include, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Filter (Source As String(), Match As String, Optional Include As Boolean = true, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String()" />
      <MemberSignature Language="F#" Value="static member Filter : string[] * string * bool * Microsoft.VisualBasic.CompareMethod -&gt; string[]" Usage="Microsoft.VisualBasic.Strings.Filter (Source, Match, Include, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String[]" />
        <Parameter Name="Match" Type="System.String" />
        <Parameter Name="Include" Type="System.Boolean" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Source">Required. One-dimensional array of strings to be searched.</param>
        <param name="Match">Required. String to search for.</param>
        <param name="Include">Optional. <see langword="Boolean" /> value indicating whether to return substrings that include or exclude <c>Match</c>. If <c>Include</c> is <see langword="True" />, the <see langword="Filter" /> function returns the subset of the array that contains <c>Match</c> as a substring. If <c>Include</c> is <see langword="False" />, the <see langword="Filter" /> function returns the subset of the array that does not contain <c>Match</c> as a substring.</param>
        <param name="Compare">Optional. Numeric value indicating the kind of string comparison to use. See "Settings" for values.</param>
        <summary>Returns a zero-based array containing a subset of a <see langword="String" /> array based on specified filter criteria.</summary>
        <returns>Returns a zero-based array containing a subset of a <see langword="String" /> array based on specified filter criteria.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si aucune correspondance de `Match` se trouvent dans `Source`, le `Filter` fonction retourne un tableau vide. Une erreur se produit si `Source` est défini sur `Nothing` ou n’est pas un tableau unidimensionnel.  
  
 Le tableau retourné par la `Filter` fonction contient suffisamment d’éléments pour contenir le nombre d’éléments de mise en correspondance.  
  
 Le `Compare` argument peut prendre les valeurs suivantes.  
  
|Constante|Description|  
|-|-|  
|`CompareMethod.Binary`|Effectue une comparaison binaire|  
|`CompareMethod.Text`|Effectue une comparaison textuelle|  
  
   
  
## Examples  
 Cet exemple illustre l’utilisation de la `Filter` (fonction).  
  
 [!code-vb[VbVbalrStrings#24](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Source" /> is <see langword="Nothing" /> or is not a one-dimensional array.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static string Format (object Expression, string Style = &quot;&quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Format(object Expression, string Style) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Format (Expression As Object, Optional Style As String = &quot;&quot;) As String" />
      <MemberSignature Language="F#" Value="static member Format : obj * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Format (Expression, Style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="Style" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Expression">Required. Any valid expression.</param>
        <param name="Style">Optional. A valid named or user-defined format <see langword="String" /> expression.</param>
        <summary>Returns a string formatted according to instructions contained in a format <see langword="String" /> expression.</summary>
        <returns>Returns a string formatted according to instructions contained in a format <see langword="String" /> expression.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.String.Format%2A?displayProperty=nameWithType> méthode fournit également des fonctionnalités similaires.  
  
 Si vous mettez en forme une chaîne numérique non localisée, vous devez utiliser un format numérique défini par l’utilisateur pour vous assurer d’obtenir l’aspect souhaité.  
  
 Si vous essayez de mettre en forme un nombre sans spécifier `Style`, le `Format` fonction fournit une fonctionnalité similaire à la `Str` fonctionner, bien qu’il soit respectent les conventions internationales. Toutefois, les nombres positifs mis en forme sous forme de chaînes à l’aide de la `Format` fonction n’incluez pas un espace à gauche réservé pour le signe de la valeur ; ceux convertis à l’aide de la `Str` fonction conserver l’espace de début.  
  
## <a name="different-formats-for-different-numeric-values"></a>Formats différents pour différentes valeurs numériques  
 Pour les nombres, une expression de format défini par l’utilisateur peut avoir d’une à trois sections séparées par des points-virgules. Si le `Style` argument de la `Format` (fonction) contient l’un des formats numériques prédéfinis, qu’une seule section est autorisée.  
  
|Si vous utilisez|C’est le résultat|  
|-|-|  
|Une seule section|L’expression de format s’applique à toutes les valeurs.|  
|Deux sections|La première section s’applique aux valeurs positives et aux zéros ; la seconde s’applique aux valeurs négatives.|  
|Trois sections|La première section s’applique aux valeurs positives, la deuxième s’applique aux valeurs négatives, et la troisième aux zéros.|  
  
 L’exemple suivant comprend deux sections : la première définit le format des valeurs positives et aux zéros ; la deuxième section définit le format pour les valeurs négatives. Dans la mesure où le `Style` argument de la `Format` fonction prend une chaîne, il est placé entre guillemets.  
  
 [!code-vb[VbVbalrStrings#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#18)]  
  
 Si vous incluez des points-virgules sans rien entre eux, la section manquante est imprimée, en utilisant le format de la valeur positive. Par exemple, le format suivant affiche positif et négatif des valeurs en utilisant le format de la première section et affiche `Zero` si la valeur est égale à zéro.  
  
 [!code-vb[VbVbalrStrings#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#19)]  
  
## <a name="predefined-numeric-formats"></a>Formats numériques prédéfinis  
 Le tableau suivant identifie les noms de formats numériques prédéfinis. Ceux-ci peuvent être utilisés par nom comme le `Style` argument pour le `Format` (fonction) :  
  
|Nom du format|Description|  
|-|-|  
|`General Number`, `G`ou `g`|Affiche le nombre sans séparateur de milliers.<br /><br /> Par exemple, `Format(&H3FA, "g")` retourne `1018`.|  
|`Currency`, `C`ou `c`|Affiche le nombre avec séparateur de milliers, le cas échéant ; affiche deux chiffres à droite du séparateur décimal. Sortie est basée sur les paramètres régionaux du système.<br /><br /> Par exemple, `Format(1234567, "c")` retourne `$1,234,567.00`.|  
|`Fixed`, `F`ou `f`|Affiche au moins un chiffre à gauche et deux chiffres à droite du séparateur décimal.<br /><br /> Par exemple, `Format(1234567, "f")` retourne `1234567.00`.|  
|`Standard`, `N`ou `n`|Affiche le nombre avec séparateur des milliers, au moins un chiffre à gauche et deux chiffres à droite du séparateur décimal.<br /><br /> Par exemple, `Format(1234567, "n")` retourne `1,234,567.00`.|  
|`Percent`|Affiche le nombre multiplié par 100 avec un signe de pourcentage (%) ajouté immédiatement à droite ; affiche toujours deux chiffres à droite du séparateur décimal.<br /><br /> Par exemple, `Format(0.4744, "Percent")` retourne `47.44%`.|  
|`P`, ou `p`|Affiche le nombre avec séparateur de milliers multiplié par 100 avec un signe de pourcentage (%) ajouté à droite et séparé par un seul espace ; affiche toujours deux chiffres à droite du séparateur décimal.<br /><br /> Par exemple, `Format(0.80345, "p")` retourne `80.35 %`.|  
|`Scientific`|Utilise la notation scientifique standard, en fournissant deux chiffres significatifs.<br /><br /> Par exemple, `Format(1234567, "Scientific")` retourne `1.23E+06`.|  
|`E`, ou `e`|Utilise la notation scientifique standard, en fournissant six chiffres significatifs.<br /><br /> Par exemple, `Format(1234567, "e")` retourne `1.234567e+006`.|  
|`D`, ou `d`|Affiche le nombre sous forme de chaîne qui contient la valeur du nombre au format décimal (base 10). Cette option est prise en charge pour les types intégraux (`Byte`, `Short`, `Integer`, `Long`) uniquement.<br /><br /> Par exemple, `Format(&H7F, "d")` retourne `127`.|  
|`X`, ou `x`|Affiche le nombre sous forme de chaîne qui contient la valeur du nombre au format hexadécimal (base 16). Cette option est prise en charge pour les types intégraux (`Byte`, `Short`, `Integer`, `Long`) uniquement.<br /><br /> Par exemple, `Format(127, "x")` retourne `7f`.|  
|`Yes/No`|Affiche `No` si le nombre est 0 ; sinon, affiche `Yes`.<br /><br /> Par exemple, `Format(0, "Yes/No")` retourne `No`.|  
|`True/False`|Affiche `False` si le nombre est 0 ; sinon, affiche `True`.<br /><br /> Par exemple, `Format(1, "True/False")` retourne `True`.|  
|`On/Off`|Affiche `Off` si le nombre est 0 ; sinon, affiche `On`.<br /><br /> Par exemple, `Format(1, "On/Off")` retourne `On`.|  
  
### <a name="smart-device-developer-notes"></a>Remarques sur le développement Smart Device  
 Le `Yes/No`, `True/False`, et `On/Off` formats ne sont pas pris en charge.  
  
## <a name="user-defined-numeric-formats"></a>Formats numériques définis par l’utilisateur  
 Le tableau suivant identifie les caractères que vous pouvez utiliser pour créer des formats numériques définis par l’utilisateur. Ceux-ci peuvent être utilisés pour générer le `Style` argument pour le `Format` (fonction) :  
  
|Caractère|Description|  
|-|-|  
|Aucun.|Affiche le nombre sans mise en forme.|  
|(`0`)|Espace réservé de chiffre. Affiche un chiffre ou un zéro. Si l’expression a un chiffre dans la position où le zéro apparaît dans la chaîne de format, il est affiché ; Sinon, affiche un zéro dans cette position.<br /><br /> Si le nombre contient moins de chiffres que de zéros sont (chaque côté du séparateur décimal) dans l’expression de format, affiche des zéros à gauche et. Si le nombre comporte davantage de chiffres à droite du séparateur décimal qu’il existe des zéros à droite du séparateur décimal dans l’expression de format, arrondit les nombre à autant de décimales qu’il y a de zéros. Si le nombre comporte davantage de chiffres à gauche du séparateur décimal qu’il existe des zéros à gauche du séparateur décimal dans l’expression de format, les chiffres supplémentaires sans modification.|  
|(`#`)|Espace réservé de chiffre. Affiche un chiffre ou rien. Si l’expression a un chiffre dans la position où le `#` caractère apparaît dans la chaîne de format, il affiche ; sinon, n’affiche rien dans cette position.<br /><br /> Ce symbole fonctionne comme le `0` espace réservé de chiffre, à ceci près que zéros ne sont pas affichées si le nombre contient moins de chiffres qu’il n’y `#` caractères de chaque côté du séparateur décimal dans l’expression de format.|  
|(`.`)|Espace réservé de décimale. L’espace réservé de décimale détermine le nombre de chiffres affiché à gauche et à droite du séparateur décimal. Si l’expression de format contient uniquement `#` caractères à gauche de ce symbole ; les nombres inférieurs à 1 commencent par un séparateur décimal. Pour afficher un zéro non significatif avec des nombres fractionnaires, utilisez zéro comme le premier espace réservé de chiffre à gauche du séparateur décimal. Dans certains paramètres régionaux, une virgule est utilisée comme séparateur décimal. Le caractère réel utilisé comme séparateur décimal dans la sortie mise en forme dépend du format numérique reconnu par votre système. Par conséquent, vous devez utiliser la période en tant qu’espace réservé de décimale dans vos formats même si vous êtes dans les paramètres régionaux qui utilise une virgule comme séparateur décimal. La chaîne mise en forme s’affiche dans le format correct pour les paramètres régionaux.|  
|(`%`)|Espace réservé de pourcentage. Multiplie l’expression par 100. Le caractère de pourcentage (`%`) est inséré à la position où il apparaît dans la chaîne de format.|  
|(`,`)|Séparateur des milliers. Le séparateur de milliers sépare les milliers des centaines dans un nombre possédant quatre chiffres ou plus à gauche du séparateur décimal. L’utilisation standard du séparateur de milliers est spécifiée si le format contient un séparateur de milliers entouré par des espaces réservés de chiffres (`0` ou `#`).<br /><br /> Un séparateur de milliers juste à gauche du séparateur décimal (ou non une valeur décimale est spécifiée) ou en tant que le plus à droite de caractères dans la chaîne, signifie « mettre à l’échelle le nombre en le divisant par 1 000, arrondi en fonction des besoins. » Nombres inférieures à 1 000 mais supérieurs ou égaux à 500 sont affichés en tant que `1`et inférieure à 500 sont affichés sous forme de nombres `0`. Deux séparateurs des milliers adjacents dans cette position mise à l’échelle par un facteur de 1 million et un facteur supplémentaire de 1 000 pour chaque séparateur supplémentaire.<br /><br /> Plusieurs séparateurs placés dans toute position autre qu’immédiatement à gauche du séparateur décimal ou la position la plus à droite dans la chaîne sont traités simplement comme spécifiant l’utilisation d’un séparateur de milliers. Dans certains paramètres régionaux, un point est utilisé comme séparateur de milliers. Le caractère réel utilisé comme séparateur des milliers dans la sortie mise en forme dépend du Format numérique reconnu par votre système. Par conséquent, vous devez utiliser la virgule comme séparateur des milliers dans vos formats même si vous êtes dans les paramètres régionaux qui utilisent un point comme séparateur de milliers. La chaîne mise en forme s’affiche dans le format correct pour les paramètres régionaux.<br /><br /> Par exemple, considérez les trois chaînes de format suivant :<br /><br /> -   `"#,0."`, qui utilise les séparateur des milliers pour mettre en forme le nombre 100 millions comme chaîne « 100,000,000 ».<br />-   `"#0,."`, qui utilise la mise à l’échelle par un facteur de mille pour mettre en forme le nombre 100 millions comme chaîne « 100000 ».<br />-   `"#,0,."`, qui utilise les séparateur des milliers et mise à l’échelle par mille pour mettre en forme le nombre 100 millions comme chaîne « 100,000 ».|  
|(`:`)|Séparateur d’heure. Dans certains paramètres régionaux, les autres caractères peuvent être utilisés pour représenter le séparateur d’heure. Le séparateur horaire sépare les heures, minutes et secondes lors de la mise en forme des valeurs d’heure. Le caractère réel utilisé comme séparateur horaire dans la sortie mise en forme est déterminé par les paramètres système.|  
|(`/`)|Séparateur de date. Dans certains paramètres régionaux, les autres caractères peuvent être utilisés pour représenter le séparateur de date. Le séparateur de date sépare le jour, le mois et l’année lorsque les valeurs de date sont mises en forme. Le caractère réel utilisé comme séparateur de date dans la sortie mise en forme est déterminé par les paramètres système.|  
|(`E-``E+``e-``e+`)|Format scientifique. Si l’expression de format contient au moins un espace réservé de chiffre (`0` ou `#`) à gauche de `E-`, `E+`, `e-`, ou `e+`, le nombre est affiché au format scientifique et `E` ou `e` est inséré entre le nombre et son exposant. Le nombre d’espaces réservés de chiffres à gauche détermine le nombre de chiffres dans l’exposant. Utilisez `E-` ou `e-` pour placer un signe moins à côté des exposants négatifs. Utilisez `E+` ou `e+` pour placer un signe moins à côté des exposants négatifs et un signe plus à côté des exposants positifs. Vous devez également inclure des espaces réservés de chiffres à droite de ce symbole pour obtenir la mise en forme correcte.|  
|`-` `+` `$` ( )|Caractères littéraux. Ces caractères sont affichés exactement comme vous avez tapé dans la chaîne de format. Pour afficher un caractère autre que ceux répertoriés, faites-le précéder d’une barre oblique inverse (`\`) ou placez-le entre guillemets doubles ( » «).|  
|(`\`)|Affiche le caractère suivant dans la chaîne de format. Pour afficher un caractère ayant une signification spéciale en tant que caractère littéral, faites-le précéder d’une barre oblique inverse (`\`). La barre oblique inverse elle-même n’est pas affichée. À l’aide d’une barre oblique inverse est identique à placer le caractère suivant entre guillemets doubles. Pour afficher une barre oblique inverse, utilisez deux barres obliques inverses (`\\`).<br /><br /> Exemples de caractères qui ne peuvent pas être affichés comme caractères littéraux sont les caractères de mise en forme de date et heure de mise en forme (`a`, `c`, `d`, `h`, `m`, `n`, `p`, `q`, `s`, `t`, `w`, `y`, `/`, et `:`), les caractères de mise en forme numérique (`#`, `0`, `%`, `E`, `e`, virgule et point) et les caractères de mise en forme de chaîne (`@`, `&`, `<`, `>`, et `!`).|  
|(`"``ABC``"`)|Affiche la chaîne placée entre les guillemets doubles ( » «). Pour inclure une chaîne dans l’argument de style à partir de code, vous devez utiliser `Chr(34)` pour inclure le texte (`34` est le code de caractère pour un guillemet («)).|  
  
### <a name="legacy-code-example"></a>Exemple de code hérité  
 Le tableau suivant contient des exemples d’expressions de format pour les nombres. (Ces exemples supposent que les paramètres régionaux de votre système est anglais-US) La première colonne contient les chaînes de format pour le `Style` argument de la `Format` fonction ; les autres colonnes contiennent le résultat obtenu si les données mises en forme ont la valeur donnée dans les en-têtes de colonne.  
  
|Format (`Style`)|« 5 » sous la forme|sous la forme « -5 »|« 0,5 » sous la forme|  
|-|-|-|-|  
|`Zero-length string ("")`|`5`|`-5`|`0.5`|  
|`0`|`5`|`-5`|`1`|  
|`0.00`|`5.00`|`-5.00`|`0.50`|  
|`#,##0`|`5`|`-5`|`1`|  
|`$#,##0;($#,##0)`|`$5`|`($5)`|`$1`|  
|`$#,##0.00;($#,##0.00)`|`$5.00`|`($5.00)`|`$0.50`|  
|`0%`|`500%`|`-500%`|`50%`|  
|`0.00%`|`500.00%`|`-500.00%`|`50.00%`|  
|`0.00E+00`|`5.00E+00`|`-5.00E+00`|`5.00E-01`|  
|`0.00E-00`|`5.00E00`|`-5.00E00`|`5.00E-01`|  
  
## <a name="predefined-datetime-formats"></a>Formats de Date et d’heure prédéfinis  
 Le tableau suivant identifie les noms de format de temps et de date prédéfinies. Ceux-ci peuvent être utilisés par nom comme argument de style pour le `Format` (fonction) :  
  
|Nom de format|Description|  
|-|-|  
|`General Date`, ou `G`|Affiche une date et/ou une heure. Par exemple, `3/12/2008 11:07:31 AM`. Affichage de la date est déterminé par la valeur de culture actuelle de votre application.|  
|`Long Date`, `Medium Date`ou `D`|Affiche une date en fonction du format de date longue de la culture actuelle. Par exemple, `Wednesday, March 12, 2008`.|  
|`Short Date`, ou `d`|Affiche une date à l’aide du format de date courte de la culture actuelle. Par exemple, `3/12/2008`.<br /><br /> Le `d` caractère affiche le jour dans un format de date défini par l’utilisateur.|  
|`Long Time`, `Medium Time`ou `T`|Affiche une heure à l’aide du format d’heure longue de la culture actuelle ; inclut généralement les heures, minutes, secondes. Par exemple, `11:07:31 AM`.|  
|`Short Time` ou `t`|Affiche une heure à l’aide du format d’heure courte de la culture actuelle. Par exemple, `11:07 AM`.<br /><br /> Le `t` caractère affiche `AM` ou `PM` valeurs pour les paramètres régionaux qui utilisent une horloge de 12 heures dans un format d’heure défini par l’utilisateur.|  
|`f`|Affiche la date longue et heure courte d’après le format de votre la culture actuelle. Par exemple, `Wednesday, March 12, 2008 11:07 AM`.|  
|`F`|Affiche la date longue et heure longue d’après le format de votre la culture actuelle. Par exemple, `Wednesday, March 12, 2008 11:07:31 AM`.|  
|`g`|Affiche la date courte et heure courte d’après le format de votre la culture actuelle. Par exemple, `3/12/2008 11:07 AM`.|  
|`M`, `m`|Affiche le mois et le jour d’une date. Par exemple, `March 12`.<br /><br /> Le `M` caractère affiche le mois dans un format de date défini par l’utilisateur. Le `m` caractère affiche les minutes dans un format d’heure défini par l’utilisateur.|  
|`R`, `r`|Met en forme la date en fonction de la <xref:System.Globalization.DateTimeFormatInfo.RFC1123Pattern%2A> propriété. Par exemple, `Wed, 12 Mar 2008 11:07:31 GMT`. La date de mise en forme n’ajuste pas la valeur de date et d’heure. Vous devez ajuster la valeur de Date/heure à GMT avant d’appeler le `Format` (fonction).|  
|`s`|Met en forme la date et l’heure sous la forme d’un index pouvant être trié. Par exemple, `2008-03-12T11:07:31`.<br /><br /> Le `s` caractère affiche les secondes dans un format d’heure défini par l’utilisateur.|  
|`u`|Met en forme la date et l’heure en tant qu’index triable GMT. Par exemple, `2008-03-12 11:07:31Z`.|  
|`U`|Met en forme la date et heure avec la date et heure longues d’après GMT. Par exemple, `Wednesday, March 12, 2008 6:07:31 PM`.|  
|`Y`, `y`|Met en forme la date en tant qu’année et mois. Par exemple, `March, 2008`.<br /><br /> Le `Y` et `y` caractères affichent l’année dans un format de date défini par l’utilisateur.|  
  
 Pour plus d’informations sur les informations de culture actuelle de l’application, consultez [fonctionnement Culture affecte des chaînes en Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).  
  
## <a name="user-defined-datetime-formats"></a>Formats de Date/heure définis par l’utilisateur  
 Le tableau suivant présente les caractères que vous pouvez utiliser pour créer des formats de date/heure définis par l’utilisateur. Contrairement aux versions antérieures de Visual Basic, ces caractères de format respectent la casse.  
  
|Caractère|Description|  
|-|-|  
|(`:`)|Séparateur d’heure. Dans certains paramètres régionaux, les autres caractères peuvent être utilisés pour représenter le séparateur d’heure. Le séparateur horaire sépare les heures, minutes et secondes lors de la mise en forme des valeurs d’heure. Le caractère réel utilisé comme séparateur horaire dans le résultat mis en forme est déterminé par la valeur de culture actuelle de votre application.|  
|(`/`)|Séparateur de date. Dans certains paramètres régionaux, les autres caractères peuvent être utilisés pour représenter le séparateur de date. Le séparateur de date sépare le jour, le mois et l’année lorsque les valeurs de date sont mises en forme. Le caractère réel utilisé comme séparateur de date dans la sortie mise en forme est déterminé par la culture actuelle de votre application.|  
|(`%`)|Utilisé pour indiquer que le caractère suivant doit être lu comme un format de lettre unique sans tenir compte des éventuelles lettres de fin. Également utilisé pour indiquer qu’un format de lettre unique est lu comme un format défini par l’utilisateur. Consultez les rubriques suivantes pour plus d’informations.|  
|`d`|Affiche le jour sous la forme d’un nombre sans zéro non significatif (par exemple, `1`). Utilisez `%d` s’il s’agit du seul caractère dans votre format numérique défini par l’utilisateur.|  
|`dd`|Affiche le jour sous la forme d’un nombre avec un zéro non significatif (par exemple, `01`).|  
|`ddd`|Affiche le jour sous forme abrégée (par exemple, `Sun`).|  
|`dddd`|Affiche le jour sous forme non abrégée (par exemple, `Sunday`).|  
|`M`|Affiche le mois sous la forme d’un nombre sans zéro non significatif (par exemple, janvier est représenté en tant que `1`). Utilisez `%M` s’il s’agit du seul caractère dans votre format numérique défini par l’utilisateur.|  
|`MM`|Affiche le mois sous la forme d’un nombre avec un zéro non significatif (par exemple, `01/12/01`).|  
|`MMM`|Affiche le mois sous forme abrégée (par exemple, `Jan`).|  
|`MMMM`|Affiche le mois sous la forme d’un nom complet du mois (par exemple, `January`).|  
|`gg`|Affiche la chaîne de période/ère (par exemple, `A.D.`).|  
|`h`|Affiche l’heure sous la forme d’un nombre sans zéros non significatifs à l’aide de l’horloge de 12 heures (par exemple, `1:15:15 PM`). Utilisez `%h` s’il s’agit du seul caractère dans votre format numérique défini par l’utilisateur.|  
|`hh`|Affiche l’heure sous la forme d’un nombre avec des zéros non significatifs à l’aide de l’horloge de 12 heures (par exemple, `01:15:15 PM`).|  
|`H`|Affiche l’heure sous la forme d’un nombre sans zéros non significatifs à l’aide de l’horloge de 24 heures (par exemple, `1:15:15`). Utilisez `%H` s’il s’agit du seul caractère dans votre format numérique défini par l’utilisateur.|  
|`HH`|Affiche l’heure sous la forme d’un nombre avec des zéros non significatifs à l’aide de l’horloge de 24 heures (par exemple, `01:15:15`).|  
|`m`|Affiche la minute sous la forme d’un nombre sans zéro non significatif (par exemple, `12:1:15`). Utilisez `%m` s’il s’agit du seul caractère dans votre format numérique défini par l’utilisateur.|  
|`mm`|Affiche la minute sous la forme d’un nombre avec des zéros non significatifs (par exemple, `12:01:15`).|  
|`s`|Affiche la seconde sous la forme d’un nombre sans zéro non significatif (par exemple, `12:15:5`). Utilisez `%s` s’il s’agit du seul caractère dans votre format numérique défini par l’utilisateur.|  
|`ss`|Affiche la seconde sous la forme d’un nombre avec des zéros non significatifs (par exemple, `12:15:05`).|  
|`f`|Affiche les fractions de secondes. Par exemple `ff` affiche les centièmes de secondes, tandis que `ffff` affiche les dix millièmes de secondes. Vous pouvez utiliser jusqu'à sept `f` symboles dans votre format défini par l’utilisateur. Utilisez `%f` s’il s’agit du seul caractère dans votre format numérique défini par l’utilisateur.|  
|`t`|Utilise l’horloge de 12 heures et affiche une majuscule `A` pour toute heure avant midi ; affiche une majuscule `P` pour toute heure comprise entre midi et 11:59 P.M. Utilisez `%t` s’il s’agit du seul caractère dans votre format numérique défini par l’utilisateur.|  
|`tt`|Pour les paramètres régionaux qui utilisent une horloge de 12 heures, affiche une majuscule `AM` avec toute heure avant midi ; affiche une majuscule `PM` avec toute heure comprise entre midi et 11:59 P.M.<br /><br /> Pour les paramètres régionaux qui utilisent une horloge de 24 heures, n’affiche rien.|  
|`y`|Affiche le numéro de l’année (0-9) sans zéro non significatif. Utilisez `%y` s’il s’agit du seul caractère dans votre format numérique défini par l’utilisateur.|  
|`yy`|Affiche l’année au format à deux chiffres numérique avec un zéro non significatif, le cas échéant.|  
|`yyy`|Affiche l’année dans un format numérique à quatre chiffres.|  
|`yyyy`|Affiche l’année dans un format numérique à quatre chiffres.|  
|`z`|Affiche le décalage de fuseau horaire sans zéro non significatif (par exemple, `-8`). Utilisez `%z` s’il s’agit du seul caractère dans votre format numérique défini par l’utilisateur.|  
|`zz`|Affiche le décalage de fuseau horaire avec un zéro non significatif (par exemple, `-08`)|  
|`zzz`|Affiche le décalage de fuseau horaire complet (par exemple, `-08:00`)|  
  
### <a name="legacy-code-example"></a>Exemple de code hérité  
 Voici des exemples de date défini par l’utilisateur et les formats d’heure pour `December 7, 1958, 8:50 PM, 35 seconds`:  
  
|Format|Affiche|  
|-|-|  
|`M/d/yy`|`12/7/58`|  
|`d-MMM`|`7-Dec`|  
|`d-MMMM-yy`|`7-December-58`|  
|`d MMMM`|`7 December`|  
|`MMMM yy`|`December 58`|  
|`hh:mm tt`|`08:50 PM`|  
|`h:mm:ss t`|`8:50:35 P`|  
|`H:mm`|`20:50`|  
|`H:mm:ss`|`20:50:35`|  
|`M/d/yyyy H:mm`|`12/7/1958 20:50`|  
  
### <a name="smart-device-developer-notes"></a>Remarques sur le développement Smart Device  
 La résolution de temps minimal pour un appareil est déterminée par le fabricant de l’appareil. Si le temps de résolution de l’appareil est assez grossière le `f` caractère de format retourne 0 lorsque vous exécutez sur l’appareil.  
  
   
  
## Examples  
 Cet exemple illustre différentes utilisations de la `Format` fonction des valeurs de format à l’aide de deux `String` formats et les formats définis par l’utilisateur. Pour le séparateur de date (`/`), séparateur d’heure (`:`) et les indicateurs AM/PM (`t` et `tt`), la sortie mise en forme réelle affichée par votre système dépend des paramètres régionaux utilisés par le code. Lorsque heures et dates sont affichées dans l’environnement de développement, le format d’heure courte et le format de date courte des paramètres régionaux de code sont utilisés.  
  
> [!NOTE]
>  Pour les paramètres régionaux qui utilisent une horloge de 24 heures, les indicateurs AM/PM (`t` et `tt`) n’affichent rien.  
  
 [!code-vb[VbVbalrStrings#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#27)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.String.Format(System.String,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="FormatCurrency">
      <MemberSignature Language="C#" Value="public static string FormatCurrency (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatCurrency(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatCurrency (Expression As Object, Optional NumDigitsAfterDecimal As Integer = -1, Optional IncludeLeadingDigit As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional UseParensForNegativeNumbers As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional GroupDigits As TriState = Microsoft.VisualBasic.TriState.UseDefault) As String" />
      <MemberSignature Language="F#" Value="static member FormatCurrency : obj * int * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatCurrency (Expression, NumDigitsAfterDecimal, IncludeLeadingDigit, UseParensForNegativeNumbers, GroupDigits)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" />
      </Parameters>
      <Docs>
        <param name="Expression">Required. Expression to be formatted.</param>
        <param name="NumDigitsAfterDecimal">Optional. Numeric value indicating how many places are displayed to the right of the decimal. Default value is –1, which indicates that the computer's regional settings are used.</param>
        <param name="IncludeLeadingDigit">Optional. <see cref="T:Microsoft.VisualBasic.TriState" /> enumeration that indicates whether or not a leading zero is displayed for fractional values. See "Remarks" for values.</param>
        <param name="UseParensForNegativeNumbers">Optional. <see cref="T:Microsoft.VisualBasic.TriState" /> enumeration that indicates whether or not to place negative values within parentheses. See "Remarks" for values.</param>
        <param name="GroupDigits">Optional. <see cref="T:Microsoft.VisualBasic.TriState" /> enumeration that indicates whether or not numbers are grouped using the group delimiter specified in the computer's regional settings. See "Remarks" for values.</param>
        <summary>Returns an expression formatted as a currency value using the currency symbol defined in the system control panel.</summary>
        <returns>Returns an expression formatted as a currency value using the currency symbol defined in the system control panel.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsqu’un ou plusieurs arguments facultatifs sont omis, les valeurs de paramètres régionaux correspondants de l’ordinateur sont utilisés à la place.  
  
 La position du symbole de devise par rapport à la valeur de devise est déterminée par les paramètres régionaux du système.  
  
> [!NOTE]
>  Tous les paramètres sont les paramètres régionaux de l’application. Par défaut, il s’agit des paramètres régionaux définis dans le panneau de configuration. Toutefois, il peut-être être modifié par programme à l’aide de .NET Framework, à l’exception de zéro non significatif, qui provient de la `Number` onglet.  
  
 Le `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, et `GroupDigits` prennent les valeurs d’énumération trois états suivants.  
  
|Value|Description|  
|-|-|  
|`TriState.True`|True|  
|`TriState.False`|False|  
|`TriState.UseDefault`|Paramètres régionaux de l’ordinateur|  
  
   
  
## Examples  
 L'exemple ci-dessous illustre l'utilisation de la fonction `FormatCurrency`.  
  
 [!code-vb[VbVbalrStrings#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Number of digits after decimal point is greater than 99.</exception>
        <exception cref="T:System.InvalidCastException">Type is not numeric.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.InvalidCastException" />
      </Docs>
    </Member>
    <Member MemberName="FormatDateTime">
      <MemberSignature Language="C#" Value="public static string FormatDateTime (DateTime Expression, Microsoft.VisualBasic.DateFormat NamedFormat = Microsoft.VisualBasic.DateFormat.GeneralDate);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatDateTime(valuetype System.DateTime Expression, valuetype Microsoft.VisualBasic.DateFormat NamedFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatDateTime (Expression As DateTime, Optional NamedFormat As DateFormat = Microsoft.VisualBasic.DateFormat.GeneralDate) As String" />
      <MemberSignature Language="F#" Value="static member FormatDateTime : DateTime * Microsoft.VisualBasic.DateFormat -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatDateTime (Expression, NamedFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.DateTime" />
        <Parameter Name="NamedFormat" Type="Microsoft.VisualBasic.DateFormat" />
      </Parameters>
      <Docs>
        <param name="Expression">Required. <see langword="Date" /> expression to be formatted.</param>
        <param name="NamedFormat">Optional. Numeric value that indicates the date/time format used. If omitted, <see langword="DateFormat.GeneralDate" /> is used.</param>
        <summary>Returns a string expression representing a date/time value.</summary>
        <returns>Returns a string expression representing a date/time value.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `Date` type de données contient toujours des informations de date / heure. Dans le cadre de la conversion de type, Visual Basic considère 1/1/1 (le 1er janvier de l’année 1) comme une valeur neutre pour la date et 00:00:00 (minuit) comme une valeur neutre pour l’heure. Si vous formatez un `Date` valeur sous forme de chaîne date/heure, `FormatDateTime` n’inclut pas de valeurs neutres dans la chaîne résultante. Par exemple, si vous convertissez #1/1/0001 9:30:00 # en une chaîne, le résultat est « 9:30:00 AM » ; les informations de date sont supprimées. Toutefois, les informations de date sont toujours présentes dans la version d’origine `Date` valeur et peuvent être récupérées avec des fonctions telles que `DatePart`.  
  
> [!NOTE]
>  Si vous passez le `Expression` argument comme un `String` littéral, `FormatDateTime` interprète en fonction le <xref:System.Globalization.CultureInfo.CurrentCulture%2A> définition de votre application. Toutefois, si vous transmettez en tant qu’un `Date` littéral, utiliser le format #mm/dd/yyyy #, étant donné que `FormatDateTime` interprète toujours un `Date` littéral selon la culture anglais (États-Unis). Cela est nécessaire car, si une application est développée et codée à l’aide `Date` littéraux d’une culture, mais il est ensuite exécutée sur une plateforme avec une autre culture, le `Date` littéraux peuvent être analysés de manière incorrecte.  
  
 Le `NamedFormat` argument possède les paramètres suivants.  
  
|Constante|Description|  
|-|-|  
|`DateFormat.GeneralDate`|Afficher une date et/ou une heure. Afficher une partie de date comme une date courte. S’il existe une partie heure, affichez-la en tant que beaucoup de temps. Le cas échéant, les deux parties s’affiche.|  
|`DateFormat.LongDate`|Affiche une date en utilisant le format de date longue spécifié dans les paramètres régionaux de votre ordinateur.|  
|`DateFormat.ShortDate`|Affiche une date en utilisant le format de date courte spécifié dans les paramètres régionaux de votre ordinateur.|  
|`DateFormat.LongTime`|Affiche une heure au format spécifié dans les paramètres régionaux de votre ordinateur.|  
|`DateFormat.ShortTime`|Affiche une heure en utilisant le format de 24 heures (hh : mm).|  
  
   
  
## Examples  
 Cet exemple illustre l’utilisation de la `FormatDateTime` (fonction).  
  
 [!code-vb[VbVbalrStrings#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="NamedFormat" /> setting is not valid.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DatePart(Microsoft.VisualBasic.DateInterval,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
      </Docs>
    </Member>
    <Member MemberName="FormatNumber">
      <MemberSignature Language="C#" Value="public static string FormatNumber (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatNumber(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatNumber (Expression As Object, Optional NumDigitsAfterDecimal As Integer = -1, Optional IncludeLeadingDigit As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional UseParensForNegativeNumbers As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional GroupDigits As TriState = Microsoft.VisualBasic.TriState.UseDefault) As String" />
      <MemberSignature Language="F#" Value="static member FormatNumber : obj * int * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatNumber (Expression, NumDigitsAfterDecimal, IncludeLeadingDigit, UseParensForNegativeNumbers, GroupDigits)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" />
      </Parameters>
      <Docs>
        <param name="Expression">Required. Expression to be formatted.</param>
        <param name="NumDigitsAfterDecimal">Optional. Numeric value indicating how many places are displayed to the right of the decimal. The default value is –1, which indicates that the computer's regional settings are used.</param>
        <param name="IncludeLeadingDigit">Optional. <see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether a leading 0 is displayed for fractional values. See "Settings" for values.</param>
        <param name="UseParensForNegativeNumbers">Optional. <see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether to place negative values within parentheses. See "Settings" for values.</param>
        <param name="GroupDigits">Optional. <see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether or not numbers are grouped using the group delimiter specified in the locale settings. See "Settings" for values.</param>
        <summary>Returns an expression formatted as a number.</summary>
        <returns>Returns an expression formatted as a number.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsqu’un ou plusieurs arguments facultatifs sont omis, les valeurs de ces arguments sont fournis par les paramètres régionaux.  
  
> [!NOTE]
>  Tous les paramètres sont les paramètres régionaux de l’application. Par défaut, il s’agit des paramètres régionaux définis dans le panneau de configuration. Toutefois, il peut être modifié par programme à l’aide de .NET Framework.  
  
 Le `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, et `GroupDigits` arguments ont les paramètres suivants.  
  
|Constante|Description|  
|-|-|  
|`TriState.True`|True|  
|`TriState.False`|False|  
|`TriState.UseDefault`|Paramètres régionaux de l’ordinateur|  
  
   
  
## Examples  
 Cet exemple montre la `FormatNumber` (fonction).  
  
 [!code-vb[VbVbalrStrings#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">Type is not numeric.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="T:System.InvalidCastException" />
      </Docs>
    </Member>
    <Member MemberName="FormatPercent">
      <MemberSignature Language="C#" Value="public static string FormatPercent (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatPercent(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatPercent (Expression As Object, Optional NumDigitsAfterDecimal As Integer = -1, Optional IncludeLeadingDigit As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional UseParensForNegativeNumbers As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional GroupDigits As TriState = Microsoft.VisualBasic.TriState.UseDefault) As String" />
      <MemberSignature Language="F#" Value="static member FormatPercent : obj * int * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatPercent (Expression, NumDigitsAfterDecimal, IncludeLeadingDigit, UseParensForNegativeNumbers, GroupDigits)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" />
      </Parameters>
      <Docs>
        <param name="Expression">Required. Expression to be formatted.</param>
        <param name="NumDigitsAfterDecimal">Optional. Numeric value indicating how many places to the right of the decimal are displayed. Default value is –1, which indicates that the locale settings are used.</param>
        <param name="IncludeLeadingDigit">Optional. <see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether or not a leading zero displays for fractional values. See "Settings" for values.</param>
        <param name="UseParensForNegativeNumbers">Optional. <see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether or not to place negative values within parentheses. See "Settings" for values.</param>
        <param name="GroupDigits">Optional. <see cref="T:Microsoft.VisualBasic.TriState" /> constant that indicates whether or not numbers are grouped using the group delimiter specified in the locale settings. See "Settings" for values.</param>
        <summary>Returns an expression formatted as a percentage (that is, multiplied by 100) with a trailing % character.</summary>
        <returns>Returns an expression formatted as a percentage (that is, multiplied by 100) with a trailing % character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsqu’un ou plusieurs arguments facultatifs sont omis, les valeurs de ces arguments sont fournis par les paramètres régionaux.  
  
> [!NOTE]
>  Tous les paramètres sont les paramètres régionaux de l’application. Par défaut, il s’agit des paramètres régionaux définis dans le panneau de configuration. Toutefois, il peut être modifié par programme à l’aide de .NET Framework.  
  
 Le `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, et `GroupDigits` arguments ont les paramètres suivants.  
  
|Constante|Description|  
|-|-|  
|`TriState.True`|True|  
|`TriState.False`|False|  
|`TriState.Default`|Paramètres régionaux de l’ordinateur|  
  
   
  
## Examples  
 Cet exemple illustre l’utilisation de la `FormatPercent` (fonction).  
  
 [!code-vb[VbVbalrStrings#28](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">Type is not numeric.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="T:System.InvalidCastException" />
      </Docs>
    </Member>
    <Member MemberName="GetChar">
      <MemberSignature Language="C#" Value="public static char GetChar (string str, int Index);" />
      <MemberSignature Language="ILAsm" Value=".method public static char GetChar(string str, int32 Index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.GetChar(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetChar (str As String, Index As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char GetChar(System::String ^ str, int Index);" />
      <MemberSignature Language="F#" Value="static member GetChar : string * int -&gt; char" Usage="Microsoft.VisualBasic.Strings.GetChar (str, Index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">Required. Any valid <see langword="String" /> expression.</param>
        <param name="Index">Required. <see langword="Integer" /> expression. The (1-based) index of the character in <c>str</c> to be returned.</param>
        <summary>Returns a <see langword="Char" /> value representing the character from the specified index in the supplied string.</summary>
        <returns>
          <see langword="Char" /> value representing the character from the specified index in the supplied string.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si `Index` est inférieur à 1 ou supérieur à l’index du dernier caractère dans `str`, un `ArgumentException` est levée.  
  
   
  
## Examples  
 Cet exemple montre comment utiliser le `GetChar` fonction pour retourner un caractère à partir d’un index spécifié dans un `String`.  
  
 [!code-vb[VbVbalrStrings#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="str" /> is <see langword="Nothing" />, <paramref name="Index" /> &lt; 1, or <paramref name="Index" /> is greater than index of last character of <paramref name="str" />.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="InStr">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Returns an integer specifying the start position of the first occurrence of one string within another.  The integer is a one-based index if a match is found.  If no match is found, the function returns zero.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InStr">
      <MemberSignature Language="C#" Value="public static int InStr (string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStr(string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function InStr (String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberSignature Language="F#" Value="static member InStr : string * string * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.InStr (String1, String2, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String1" Type="System.String" />
        <Parameter Name="String2" Type="System.String" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="String1">Required. <see langword="String" /> expression being searched.</param>
        <param name="String2">Required. <see langword="String" /> expression sought.</param>
        <param name="Compare">Optional. Specifies the type of string comparison. If <c>Compare</c> is omitted, the <see langword="Option Compare" /> setting determines the type of comparison.</param>
        <summary>Returns an integer specifying the start position of the first occurrence of one string within another.</summary>
        <returns>
          <list type="table">
            <item>
              <term> If  </term>
              <description> InStr returns  </description>
            </item>
            <item>
              <term>
                <paramref name="String1" /> is zero length or <see langword="Nothing" /></term>
              <description> 0  </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> is zero length or <see langword="Nothing" /></term>
              <description> The starting position for the search, which defaults to the first character position.  </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> is not found  </term>
              <description> 0  </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> is found within <paramref name="String1" /></term>
              <description> Position where match begins  </description>
            </item>
            <item>
              <term></term>
              <description></description>
            </item>
          </list>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En règle générale, le `InStr` fonction est utilisée lors de l’analyse de chaînes.  
  
> [!NOTE]
>  Le `InStrB` (fonction) dans les versions précédentes de Visual Basic retourne un nombre d’octets plutôt qu’une position de caractère. Il est utilisé principalement pour la conversion de chaînes dans les applications de jeu codés sur deux octets. Toutes les chaînes Visual Basic 2005 sont au format Unicode, et `InStrB` n’est plus pris en charge.  
  
 Les paramètres de l’argument `Compare` sont :  
  
|Constante|Value|Description|  
|-|-|-|  
|`Binary`|0|Effectue une comparaison binaire|  
|`Text`|1|Effectue une comparaison de texte|  
  
   
  
## Examples  
 Cet exemple utilise le `InStr` fonction pour retourner la position de la première occurrence d’une chaîne dans une autre.  
  
 [!code-vb[VbVbalrStrings#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="InStr">
      <MemberSignature Language="C#" Value="public static int InStr (int Start, string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStr(int32 Start, string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function InStr (Start As Integer, String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberSignature Language="F#" Value="static member InStr : int * string * string * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.InStr (Start, String1, String2, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Start" Type="System.Int32" />
        <Parameter Name="String1" Type="System.String" />
        <Parameter Name="String2" Type="System.String" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Start">Optional. Numeric expression that sets the starting position for each search. If omitted, search begins at the first character position. The start index is 1-based.</param>
        <param name="String1">Required. <see langword="String" /> expression being searched.</param>
        <param name="String2">Required. <see langword="String" /> expression sought.</param>
        <param name="Compare">Optional. Specifies the type of string comparison. If <c>Compare</c> is omitted, the <see langword="Option Compare" /> setting determines the type of comparison.</param>
        <summary>Returns an integer specifying the start position of the first occurrence of one string within another.</summary>
        <returns>
          <list type="table">
            <item>
              <term> If  </term>
              <description> InStr returns  </description>
            </item>
            <item>
              <term>
                <paramref name="String1" /> is zero length or <see langword="Nothing" /></term>
              <description> 0  </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> is zero length or <see langword="Nothing" /></term>
              <description>
                <paramref name="start" />
              </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> is not found  </term>
              <description> 0  </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> is found within <paramref name="String1" /></term>
              <description> Position where match begins  </description>
            </item>
            <item>
              <term>
                <paramref name="Start" /> &gt; length of <paramref name="String1" /></term>
              <description> 0  </description>
            </item>
          </list>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En règle générale, le `InStr` fonction est utilisée lors de l’analyse de chaînes.  
  
> [!NOTE]
>  Le `InStrB` (fonction) dans les versions précédentes de Visual Basic retourne un nombre d’octets plutôt qu’une position de caractère. Il est utilisé principalement pour la conversion de chaînes dans les applications de jeu codés sur deux octets. Toutes les chaînes Visual Basic 2005 sont au format Unicode, et `InStrB` n’est plus pris en charge.  
  
 Les paramètres de l’argument `Compare` sont :  
  
|Constante|Value|Description|  
|-|-|-|  
|`Binary`|0|Effectue une comparaison binaire|  
|`Text`|1|Effectue une comparaison de texte|  
  
   
  
## Examples  
 Cet exemple utilise le `InStr` fonction pour retourner la position de la première occurrence d’une chaîne dans une autre.  
  
 [!code-vb[VbVbalrStrings#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Start" /> &lt; 1.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="InStrRev">
      <MemberSignature Language="C#" Value="public static int InStrRev (string StringCheck, string StringMatch, int Start = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStrRev(string StringCheck, string StringMatch, int32 Start, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function InStrRev (StringCheck As String, StringMatch As String, Optional Start As Integer = -1, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberSignature Language="F#" Value="static member InStrRev : string * string * int * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.InStrRev (StringCheck, StringMatch, Start, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="StringCheck" Type="System.String" />
        <Parameter Name="StringMatch" Type="System.String" />
        <Parameter Name="Start" Type="System.Int32" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="StringCheck">Required. String expression being searched.</param>
        <param name="StringMatch">Required. String expression being searched for.</param>
        <param name="Start">Optional. Numeric expression setting the one-based starting position for each search, starting from the left side of the string. If <c>Start</c> is omitted then –1 is used, meaning the search begins at the last character position. Search then proceeds from right to left.</param>
        <param name="Compare">Optional. Numeric value indicating the kind of comparison to use when evaluating substrings. If omitted, a binary comparison is performed. See Settings for values.</param>
        <summary>Returns the position of the first occurrence of one string within another, starting from the right side of the string.</summary>
        <returns>
          <list type="table">
            <item>
              <term> If  </term>
              <description> InStrRev returns  </description>
            </item>
            <item>
              <term>
                <paramref name="StringCheck" /> is zero-length  </term>
              <description> 0  </description>
            </item>
            <item>
              <term>
                <paramref name="StringMatch" /> is zero-length  </term>
              <description>
                <paramref name="Start" />
              </description>
            </item>
            <item>
              <term>
                <paramref name="StringMatch" /> is not found  </term>
              <description> 0  </description>
            </item>
            <item>
              <term>
                <paramref name="StringMatch" /> is found within <paramref name="StringCheck" /></term>
              <description> Position at which the first match is found, starting with the right side of the string.  </description>
            </item>
            <item>
              <term>
                <paramref name="Start" /> is greater than length of <paramref name="StringMatch" /></term>
              <description> 0  </description>
            </item>
          </list>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Notez que la syntaxe pour le `InStrRev` fonction n’est pas identique à la syntaxe pour le `InStr` (fonction).  
  
 Le `Compare` argument peut prendre les valeurs suivantes.  
  
|Constante|Description|  
|-|-|  
|`Binary`|Effectue une comparaison binaire.|  
|`Text`|Effectue une comparaison textuelle.|  
  
   
  
## Examples  
 Cet exemple illustre l’utilisation de la `InStrRev` (fonction).  
  
 [!code-vb[VbVbalrStrings#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Start" /> = 0 or <paramref name="Start" /> &lt; -1.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.InStr" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Join">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Returns a string created by joining a number of substrings contained in an array.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (object[] SourceArray, string Delimiter = &quot; &quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Join(object[] SourceArray, string Delimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Join(System.Object[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Join (SourceArray As Object(), Optional Delimiter As String = &quot; &quot;) As String" />
      <MemberSignature Language="F#" Value="static member Join : obj[] * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Join (SourceArray, Delimiter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="SourceArray" Type="System.Object[]" />
        <Parameter Name="Delimiter" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="SourceArray">Required. One-dimensional array containing substrings to be joined.</param>
        <param name="Delimiter">Optional. Any string, used to separate the substrings in the returned string. If omitted, the space character (" ") is used. If <c>Delimiter</c> is a zero-length string ("") or <see langword="Nothing" />, all items in the list are concatenated with no delimiters.</param>
        <summary>Returns a string created by joining a number of substrings contained in an array.</summary>
        <returns>Returns a string created by joining a number of substrings contained in an array.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il existe une parité entre le `Join` et `Split` fonctions. Le `Join` fonction accepte un tableau de chaînes et les joint à l’aide d’une chaîne de délimiteur, pour retourner une chaîne unique. Le `Split` fonction prend une chaîne et la sépare au niveau du délimiteur, pour retourner un tableau de chaînes. Toutefois, la principale différence est que `Join` peut concaténer des chaînes avec n’importe quelle chaîne de délimiteur, `Split` peut uniquement séparer des chaînes à l’aide d’un délimiteur de caractère unique.  
  
   
  
## Examples  
 L’exemple suivant montre comment utiliser le `Join` (fonction) pour créer une liste à partir de plusieurs chaînes.  
  
 [!code-vb[VbVbalrStrings#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="SourceArray" /> is not one dimensional.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (string[] SourceArray, string Delimiter = &quot; &quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Join(string[] SourceArray, string Delimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Join(System.String[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Join (SourceArray As String(), Optional Delimiter As String = &quot; &quot;) As String" />
      <MemberSignature Language="F#" Value="static member Join : string[] * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Join (SourceArray, Delimiter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="SourceArray" Type="System.String[]" />
        <Parameter Name="Delimiter" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="SourceArray">Required. One-dimensional array containing substrings to be joined.</param>
        <param name="Delimiter">Optional. Any string, used to separate the substrings in the returned string. If omitted, the space character (" ") is used. If <c>Delimiter</c> is a zero-length string ("") or <see langword="Nothing" />, all items in the list are concatenated with no delimiters.</param>
        <summary>Returns a string created by joining a number of substrings contained in an array.</summary>
        <returns>Returns a string created by joining a number of substrings contained in an array.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il existe une parité entre le `Join` et `Split` fonctions. Le `Join` fonction accepte un tableau de chaînes et les joint à l’aide d’une chaîne de délimiteur, pour retourner une chaîne unique. Le `Split` fonction prend une chaîne et la sépare au niveau du délimiteur, pour retourner un tableau de chaînes. Toutefois, la principale différence est que `Join` peut concaténer des chaînes avec n’importe quelle chaîne de délimiteur, `Split` peut uniquement séparer des chaînes à l’aide d’un délimiteur de caractère unique.  
  
   
  
## Examples  
 L’exemple suivant montre comment utiliser le `Join` (fonction) pour créer une liste à partir de plusieurs chaînes.  
  
 [!code-vb[VbVbalrStrings#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="SourceArray" /> is not one dimensional.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="LCase">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Returns a string or character converted to lowercase.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LCase">
      <MemberSignature Language="C#" Value="public static char LCase (char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static char LCase(char Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LCase(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function LCase (Value As Char) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char LCase(char Value);" />
      <MemberSignature Language="F#" Value="static member LCase : char -&gt; char" Usage="Microsoft.VisualBasic.Strings.LCase Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Value">Required. Any valid <see langword="String" /> or <see langword="Char" /> expression.</param>
        <summary>Returns a string or character converted to lowercase.</summary>
        <returns>Returns a string or character converted to lowercase.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uniquement des lettres majuscules sont convertis en minuscules ; toutes les lettres minuscules et les caractères restent inchangées.  
  
 Cette fonction utilise les informations de culture de l’application lors de la manipulation de la chaîne afin que les changements de casse sont appropriés pour les paramètres régionaux dans lequel l’application est utilisée.  
  
> [!IMPORTANT]
>  Si votre application prend des décisions de sécurité en fonction du résultat d’une comparaison ou d’une opération de changement de casse, l’opération doit utiliser le <xref:System.String.Compare%2A?displayProperty=nameWithType> (méthode), puis transmettez <xref:System.StringComparison.Ordinal> ou <xref:System.StringComparison.OrdinalIgnoreCase> pour le `comparisonType` argument. Pour plus d’informations, consultez [fonctionnement Culture affecte des chaînes en Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).  
  
   
  
## Examples  
 Cet exemple utilise le `LCase` fonction pour retourner une version en minuscules d’une chaîne.  
  
 [!code-vb[VbVbalrStrings#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.UCase" />
      </Docs>
    </Member>
    <Member MemberName="LCase">
      <MemberSignature Language="C#" Value="public static string LCase (string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LCase(string Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LCase(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LCase (Value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LCase(System::String ^ Value);" />
      <MemberSignature Language="F#" Value="static member LCase : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.LCase Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Value">Required. Any valid <see langword="String" /> or <see langword="Char" /> expression.</param>
        <summary>Returns a string or character converted to lowercase.</summary>
        <returns>Returns a string or character converted to lowercase.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uniquement des lettres majuscules sont convertis en minuscules ; toutes les lettres minuscules et les caractères restent inchangées.  
  
 Cette fonction utilise les informations de culture de l’application lors de la manipulation de la chaîne afin que les changements de casse sont appropriés pour les paramètres régionaux dans lequel l’application est utilisée.  
  
> [!IMPORTANT]
>  Si votre application prend des décisions de sécurité en fonction du résultat d’une comparaison ou d’une opération de changement de casse, l’opération doit utiliser le <xref:System.String.Compare%2A?displayProperty=nameWithType> (méthode), puis transmettez <xref:System.StringComparison.Ordinal> ou <xref:System.StringComparison.OrdinalIgnoreCase> pour le `comparisonType` argument. Pour plus d’informations, consultez [fonctionnement Culture affecte des chaînes en Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).  
  
   
  
## Examples  
 Cet exemple utilise le `LCase` fonction pour retourner une version en minuscules d’une chaîne.  
  
 [!code-vb[VbVbalrStrings#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.UCase" />
      </Docs>
    </Member>
    <Member MemberName="Left">
      <MemberSignature Language="C#" Value="public static string Left (string str, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Left(string str, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Left (str As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Left(System::String ^ str, int Length);" />
      <MemberSignature Language="F#" Value="static member Left : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Left (str, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">Required. <see langword="String" /> expression from which the leftmost characters are returned.</param>
        <param name="Length">Required. <see langword="Integer" /> expression. Numeric expression indicating how many characters to return. If 0, a zero-length string ("") is returned. If greater than or equal to the number of characters in <c>str</c>, the entire string is returned.</param>
        <summary>Returns a string containing a specified number of characters from the left side of a string.</summary>
        <returns>Returns a string containing a specified number of characters from the left side of a string.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour déterminer le nombre de caractères dans `str`, utilisez le `Len` (fonction). Si utilisé dans une application Windows Forms ou toute autre classe qui a un `Left` propriété, vous devez qualifier complètement la fonction avec `Microsoft.VisualBasic.Left`.  
  
> [!NOTE]
>  Le `LeftB` (fonction) dans les versions précédentes de Visual Basic retourne une chaîne en octets plutôt que des caractères. Il est utilisé principalement pour la conversion de chaînes dans les applications de jeu codés sur deux octets. Toutes les chaînes Visual Basic en cours sont au format Unicode, et `LeftB` n’est plus pris en charge.  
  
   
  
## Examples  
 Cet exemple illustre l’utilisation de la `Left` fonction pour retourner une sous-chaîne d’une donnée `String`. Dans une classe qui a un `Left` propriété, il peut être nécessaire de qualifier entièrement le `Left` (fonction).  
  
 [!code-vb[VbVbalrStrings#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Length" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Len">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (bool Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(bool Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(bool Expression);" />
      <MemberSignature Language="F#" Value="static member Len : bool -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
        <returns>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les types définis par l’utilisateur et `Object` variables, le `Len` fonction retourne la taille telle qu’elle sera écrite dans le fichier par le `FilePut` (fonction). Si un `Object` contient un `String`, il retourne la longueur de la chaîne. Si un `Object` contient un autre type, il retournera la taille de l’objet telle qu’elle sera écrite dans le fichier par le `FilePut` (fonction).  
  
 Le `VBFixedString` attribut peut être appliqué aux champs de chaîne dans les objets pour indiquer la taille de la chaîne, en octets, lors de l’écriture sur le disque. Le `Len` fonction utilise le `VBFixedString` d’attribut, si elle est disponible, lors de la détermination de la taille de `Object` variables.  
  
> [!NOTE]
>  Le `Len` fonction ne peut pas être en mesure de déterminer le nombre réel d’octets de stockage requis lorsqu’il est utilisé avec des chaînes de longueur variable dans des types de données définis par l’utilisateur.  
  
> [!NOTE]
>  Le `LenB` fonction dans les versions antérieures de Visual Basic retourne le nombre d’octets dans une chaîne plutôt que des caractères. Il est utilisé principalement pour la conversion de chaînes dans les applications de jeu codés sur deux octets. Toutes les chaînes Visual Basic en cours sont au format Unicode, et `LenB` n’est plus pris en charge.  
  
## <a name="smart-device-developer-notes"></a>Remarques sur le développement Smart Device  
 Le `Len` fonction accepte uniquement `String` et `Object` variables en tant que paramètres. Si un `Object` contient un `String`, elle retournera la longueur de la `String`. Si un paramètre est une valeur NULL `Object` référence, la fonction retourne zéro. Si un `Object` contient un autre type, une exception est levée.  
  
   
  
## Examples  
 Cet exemple utilise `Len` pour retourner le nombre de caractères dans une chaîne.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (byte Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int8 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Byte) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::Byte Expression);" />
      <MemberSignature Language="F#" Value="static member Len : byte -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
        <returns>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les types définis par l’utilisateur et `Object` variables, le `Len` fonction retourne la taille telle qu’elle sera écrite dans le fichier par le `FilePut` (fonction). Si un `Object` contient un `String`, il retourne la longueur de la chaîne. Si un `Object` contient un autre type, il retournera la taille de l’objet telle qu’elle sera écrite dans le fichier par le `FilePut` (fonction).  
  
 Le `VBFixedString` attribut peut être appliqué aux champs de chaîne dans les objets pour indiquer la taille de la chaîne, en octets, lors de l’écriture sur le disque. Le `Len` fonction utilise le `VBFixedString` d’attribut, si elle est disponible, lors de la détermination de la taille de `Object` variables.  
  
> [!NOTE]
>  Le `Len` fonction ne peut pas être en mesure de déterminer le nombre réel d’octets de stockage requis lorsqu’il est utilisé avec des chaînes de longueur variable dans des types de données définis par l’utilisateur.  
  
> [!NOTE]
>  Le `LenB` fonction dans les versions antérieures de Visual Basic retourne le nombre d’octets dans une chaîne plutôt que des caractères. Il est utilisé principalement pour la conversion de chaînes dans les applications de jeu codés sur deux octets. Toutes les chaînes Visual Basic en cours sont au format Unicode, et `LenB` n’est plus pris en charge.  
  
## <a name="smart-device-developer-notes"></a>Remarques sur le développement Smart Device  
 Le `Len` fonction accepte uniquement `String` et `Object` variables en tant que paramètres. Si un `Object` contient un `String`, elle retournera la longueur de la `String`. Si un paramètre est une valeur NULL `Object` référence, la fonction retourne zéro. Si un `Object` contient un autre type, une exception est levée.  
  
   
  
## Examples  
 Cet exemple utilise `Len` pour retourner le nombre de caractères dans une chaîne.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(char Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(char Expression);" />
      <MemberSignature Language="F#" Value="static member Len : char -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
        <returns>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les types définis par l’utilisateur et `Object` variables, le `Len` fonction retourne la taille telle qu’elle sera écrite dans le fichier par le `FilePut` (fonction). Si un `Object` contient un `String`, il retourne la longueur de la chaîne. Si un `Object` contient un autre type, il retournera la taille de l’objet telle qu’elle sera écrite dans le fichier par le `FilePut` (fonction).  
  
 Le `VBFixedString` attribut peut être appliqué aux champs de chaîne dans les objets pour indiquer la taille de la chaîne, en octets, lors de l’écriture sur le disque. Le `Len` fonction utilise le `VBFixedString` d’attribut, si elle est disponible, lors de la détermination de la taille de `Object` variables.  
  
> [!NOTE]
>  Le `Len` fonction ne peut pas être en mesure de déterminer le nombre réel d’octets de stockage requis lorsqu’il est utilisé avec des chaînes de longueur variable dans des types de données définis par l’utilisateur.  
  
> [!NOTE]
>  Le `LenB` fonction dans les versions antérieures de Visual Basic retourne le nombre d’octets dans une chaîne plutôt que des caractères. Il est utilisé principalement pour la conversion de chaînes dans les applications de jeu codés sur deux octets. Toutes les chaînes Visual Basic en cours sont au format Unicode, et `LenB` n’est plus pris en charge.  
  
## <a name="smart-device-developer-notes"></a>Remarques sur le développement Smart Device  
 Le `Len` fonction accepte uniquement `String` et `Object` variables en tant que paramètres. Si un `Object` contient un `String`, elle retournera la longueur de la `String`. Si un paramètre est une valeur NULL `Object` référence, la fonction retourne zéro. Si un `Object` contient un autre type, une exception est levée.  
  
   
  
## Examples  
 Cet exemple utilise `Len` pour retourner le nombre de caractères dans une chaîne.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (DateTime Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(valuetype System.DateTime Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(DateTime Expression);" />
      <MemberSignature Language="F#" Value="static member Len : DateTime -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
        <returns>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les types définis par l’utilisateur et `Object` variables, le `Len` fonction retourne la taille telle qu’elle sera écrite dans le fichier par le `FilePut` (fonction). Si un `Object` contient un `String`, il retourne la longueur de la chaîne. Si un `Object` contient un autre type, il retournera la taille de l’objet telle qu’elle sera écrite dans le fichier par le `FilePut` (fonction).  
  
 Le `VBFixedString` attribut peut être appliqué aux champs de chaîne dans les objets pour indiquer la taille de la chaîne, en octets, lors de l’écriture sur le disque. Le `Len` fonction utilise le `VBFixedString` d’attribut, si elle est disponible, lors de la détermination de la taille de `Object` variables.  
  
> [!NOTE]
>  Le `Len` fonction ne peut pas être en mesure de déterminer le nombre réel d’octets de stockage requis lorsqu’il est utilisé avec des chaînes de longueur variable dans des types de données définis par l’utilisateur.  
  
> [!NOTE]
>  Le `LenB` fonction dans les versions antérieures de Visual Basic retourne le nombre d’octets dans une chaîne plutôt que des caractères. Il est utilisé principalement pour la conversion de chaînes dans les applications de jeu codés sur deux octets. Toutes les chaînes Visual Basic en cours sont au format Unicode, et `LenB` n’est plus pris en charge.  
  
## <a name="smart-device-developer-notes"></a>Remarques sur le développement Smart Device  
 Le `Len` fonction accepte uniquement `String` et `Object` variables en tant que paramètres. Si un `Object` contient un `String`, elle retournera la longueur de la `String`. Si un paramètre est une valeur NULL `Object` référence, la fonction retourne zéro. Si un `Object` contient un autre type, une exception est levée.  
  
   
  
## Examples  
 Cet exemple utilise `Len` pour retourner le nombre de caractères dans une chaîne.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (decimal Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(valuetype System.Decimal Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Decimal) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::Decimal Expression);" />
      <MemberSignature Language="F#" Value="static member Len : decimal -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
        <returns>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les types définis par l’utilisateur et `Object` variables, le `Len` fonction retourne la taille telle qu’elle sera écrite dans le fichier par le `FilePut` (fonction). Si un `Object` contient un `String`, il retourne la longueur de la chaîne. Si un `Object` contient un autre type, il retournera la taille de l’objet telle qu’elle sera écrite dans le fichier par le `FilePut` (fonction).  
  
 Le `VBFixedString` attribut peut être appliqué aux champs de chaîne dans les objets pour indiquer la taille de la chaîne, en octets, lors de l’écriture sur le disque. Le `Len` fonction utilise le `VBFixedString` d’attribut, si elle est disponible, lors de la détermination de la taille de `Object` variables.  
  
> [!NOTE]
>  Le `Len` fonction ne peut pas être en mesure de déterminer le nombre réel d’octets de stockage requis lorsqu’il est utilisé avec des chaînes de longueur variable dans des types de données définis par l’utilisateur.  
  
> [!NOTE]
>  Le `LenB` fonction dans les versions antérieures de Visual Basic retourne le nombre d’octets dans une chaîne plutôt que des caractères. Il est utilisé principalement pour la conversion de chaînes dans les applications de jeu codés sur deux octets. Toutes les chaînes Visual Basic en cours sont au format Unicode, et `LenB` n’est plus pris en charge.  
  
## <a name="smart-device-developer-notes"></a>Remarques sur le développement Smart Device  
 Le `Len` fonction accepte uniquement `String` et `Object` variables en tant que paramètres. Si un `Object` contient un `String`, elle retournera la longueur de la `String`. Si un paramètre est une valeur NULL `Object` référence, la fonction retourne zéro. Si un `Object` contient un autre type, une exception est levée.  
  
   
  
## Examples  
 Cet exemple utilise `Len` pour retourner le nombre de caractères dans une chaîne.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (double Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(float64 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Double) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(double Expression);" />
      <MemberSignature Language="F#" Value="static member Len : double -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
        <returns>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les types définis par l’utilisateur et `Object` variables, le `Len` fonction retourne la taille telle qu’elle sera écrite dans le fichier par le `FilePut` (fonction). Si un `Object` contient un `String`, il retourne la longueur de la chaîne. Si un `Object` contient un autre type, il retournera la taille de l’objet telle qu’elle sera écrite dans le fichier par le `FilePut` (fonction).  
  
 Le `VBFixedString` attribut peut être appliqué aux champs de chaîne dans les objets pour indiquer la taille de la chaîne, en octets, lors de l’écriture sur le disque. Le `Len` fonction utilise le `VBFixedString` d’attribut, si elle est disponible, lors de la détermination de la taille de `Object` variables.  
  
> [!NOTE]
>  Le `Len` fonction ne peut pas être en mesure de déterminer le nombre réel d’octets de stockage requis lorsqu’il est utilisé avec des chaînes de longueur variable dans des types de données définis par l’utilisateur.  
  
> [!NOTE]
>  Le `LenB` fonction dans les versions antérieures de Visual Basic retourne le nombre d’octets dans une chaîne plutôt que des caractères. Il est utilisé principalement pour la conversion de chaînes dans les applications de jeu codés sur deux octets. Toutes les chaînes Visual Basic en cours sont au format Unicode, et `LenB` n’est plus pris en charge.  
  
## <a name="smart-device-developer-notes"></a>Remarques sur le développement Smart Device  
 Le `Len` fonction accepte uniquement `String` et `Object` variables en tant que paramètres. Si un `Object` contient un `String`, elle retournera la longueur de la `String`. Si un paramètre est une valeur NULL `Object` référence, la fonction retourne zéro. Si un `Object` contient un autre type, une exception est levée.  
  
   
  
## Examples  
 Cet exemple utilise `Len` pour retourner le nombre de caractères dans une chaîne.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (short Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int16 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Short) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(short Expression);" />
      <MemberSignature Language="F#" Value="static member Len : int16 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
        <returns>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les types définis par l’utilisateur et `Object` variables, le `Len` fonction retourne la taille telle qu’elle sera écrite dans le fichier par le `FilePut` (fonction). Si un `Object` contient un `String`, il retourne la longueur de la chaîne. Si un `Object` contient un autre type, il retournera la taille de l’objet telle qu’elle sera écrite dans le fichier par le `FilePut` (fonction).  
  
 Le `VBFixedString` attribut peut être appliqué aux champs de chaîne dans les objets pour indiquer la taille de la chaîne, en octets, lors de l’écriture sur le disque. Le `Len` fonction utilise le `VBFixedString` d’attribut, si elle est disponible, lors de la détermination de la taille de `Object` variables.  
  
> [!NOTE]
>  Le `Len` fonction ne peut pas être en mesure de déterminer le nombre réel d’octets de stockage requis lorsqu’il est utilisé avec des chaînes de longueur variable dans des types de données définis par l’utilisateur.  
  
> [!NOTE]
>  Le `LenB` fonction dans les versions antérieures de Visual Basic retourne le nombre d’octets dans une chaîne plutôt que des caractères. Il est utilisé principalement pour la conversion de chaînes dans les applications de jeu codés sur deux octets. Toutes les chaînes Visual Basic en cours sont au format Unicode, et `LenB` n’est plus pris en charge.  
  
## <a name="smart-device-developer-notes"></a>Remarques sur le développement Smart Device  
 Le `Len` fonction accepte uniquement `String` et `Object` variables en tant que paramètres. Si un `Object` contient un `String`, elle retournera la longueur de la `String`. Si un paramètre est une valeur NULL `Object` référence, la fonction retourne zéro. Si un `Object` contient un autre type, une exception est levée.  
  
   
  
## Examples  
 Cet exemple utilise `Len` pour retourner le nombre de caractères dans une chaîne.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (int Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int32 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(int Expression);" />
      <MemberSignature Language="F#" Value="static member Len : int -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
        <returns>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les types définis par l’utilisateur et `Object` variables, le `Len` fonction retourne la taille telle qu’elle sera écrite dans le fichier par le `FilePut` (fonction). Si un `Object` contient un `String`, il retourne la longueur de la chaîne. Si un `Object` contient un autre type, il retournera la taille de l’objet telle qu’elle sera écrite dans le fichier par le `FilePut` (fonction).  
  
 Le `VBFixedString` attribut peut être appliqué aux champs de chaîne dans les objets pour indiquer la taille de la chaîne, en octets, lors de l’écriture sur le disque. Le `Len` fonction utilise le `VBFixedString` d’attribut, si elle est disponible, lors de la détermination de la taille de `Object` variables.  
  
> [!NOTE]
>  Le `Len` fonction ne peut pas être en mesure de déterminer le nombre réel d’octets de stockage requis lorsqu’il est utilisé avec des chaînes de longueur variable dans des types de données définis par l’utilisateur.  
  
> [!NOTE]
>  Le `LenB` fonction dans les versions antérieures de Visual Basic retourne le nombre d’octets dans une chaîne plutôt que des caractères. Il est utilisé principalement pour la conversion de chaînes dans les applications de jeu codés sur deux octets. Toutes les chaînes Visual Basic en cours sont au format Unicode, et `LenB` n’est plus pris en charge.  
  
## <a name="smart-device-developer-notes"></a>Remarques sur le développement Smart Device  
 Le `Len` fonction accepte uniquement `String` et `Object` variables en tant que paramètres. Si un `Object` contient un `String`, elle retournera la longueur de la `String`. Si un paramètre est une valeur NULL `Object` référence, la fonction retourne zéro. Si un `Object` contient un autre type, une exception est levée.  
  
   
  
## Examples  
 Cet exemple utilise `Len` pour retourner le nombre de caractères dans une chaîne.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (long Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int64 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Long) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(long Expression);" />
      <MemberSignature Language="F#" Value="static member Len : int64 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
        <returns>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les types définis par l’utilisateur et `Object` variables, le `Len` fonction retourne la taille telle qu’elle sera écrite dans le fichier par le `FilePut` (fonction). Si un `Object` contient un `String`, il retourne la longueur de la chaîne. Si un `Object` contient un autre type, il retournera la taille de l’objet telle qu’elle sera écrite dans le fichier par le `FilePut` (fonction).  
  
 Le `VBFixedString` attribut peut être appliqué aux champs de chaîne dans les objets pour indiquer la taille de la chaîne, en octets, lors de l’écriture sur le disque. Le `Len` fonction utilise le `VBFixedString` d’attribut, si elle est disponible, lors de la détermination de la taille de `Object` variables.  
  
> [!NOTE]
>  Le `Len` fonction ne peut pas être en mesure de déterminer le nombre réel d’octets de stockage requis lorsqu’il est utilisé avec des chaînes de longueur variable dans des types de données définis par l’utilisateur.  
  
> [!NOTE]
>  Le `LenB` fonction dans les versions antérieures de Visual Basic retourne le nombre d’octets dans une chaîne plutôt que des caractères. Il est utilisé principalement pour la conversion de chaînes dans les applications de jeu codés sur deux octets. Toutes les chaînes Visual Basic en cours sont au format Unicode, et `LenB` n’est plus pris en charge.  
  
## <a name="smart-device-developer-notes"></a>Remarques sur le développement Smart Device  
 Le `Len` fonction accepte uniquement `String` et `Object` variables en tant que paramètres. Si un `Object` contient un `String`, elle retournera la longueur de la `String`. Si un paramètre est une valeur NULL `Object` référence, la fonction retourne zéro. Si un `Object` contient un autre type, une exception est levée.  
  
   
  
## Examples  
 Cet exemple utilise `Len` pour retourner le nombre de caractères dans une chaîne.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Len : obj -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
        <returns>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les types définis par l’utilisateur et `Object` variables, le `Len` fonction retourne la taille telle qu’elle sera écrite dans le fichier par le `FilePut` (fonction). Si un `Object` contient un `String`, il retourne la longueur de la chaîne. Si un `Object` contient un autre type, il retournera la taille de l’objet telle qu’elle sera écrite dans le fichier par le `FilePut` (fonction).  
  
 Le `VBFixedString` attribut peut être appliqué aux champs de chaîne dans les objets pour indiquer la taille de la chaîne, en octets, lors de l’écriture sur le disque. Le `Len` fonction utilise le `VBFixedString` d’attribut, si elle est disponible, lors de la détermination de la taille de `Object` variables.  
  
> [!NOTE]
>  Le `Len` fonction ne peut pas être en mesure de déterminer le nombre réel d’octets de stockage requis lorsqu’il est utilisé avec des chaînes de longueur variable dans des types de données définis par l’utilisateur.  
  
> [!NOTE]
>  Le `LenB` fonction dans les versions antérieures de Visual Basic retourne le nombre d’octets dans une chaîne plutôt que des caractères. Il est utilisé principalement pour la conversion de chaînes dans les applications de jeu codés sur deux octets. Toutes les chaînes Visual Basic en cours sont au format Unicode, et `LenB` n’est plus pris en charge.  
  
## <a name="smart-device-developer-notes"></a>Remarques sur le développement Smart Device  
 Le `Len` fonction accepte uniquement `String` et `Object` variables en tant que paramètres. Si un `Object` contient un `String`, elle retournera la longueur de la `String`. Si un paramètre est une valeur NULL `Object` référence, la fonction retourne zéro. Si un `Object` contient un autre type, une exception est levée.  
  
   
  
## Examples  
 Cet exemple utilise `Len` pour retourner le nombre de caractères dans une chaîne.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (sbyte Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int8 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As SByte) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::SByte Expression);" />
      <MemberSignature Language="F#" Value="static member Len : sbyte -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
        <returns>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les types définis par l’utilisateur et `Object` variables, le `Len` fonction retourne la taille telle qu’elle sera écrite dans le fichier par le `FilePut` (fonction). Si un `Object` contient un `String`, il retourne la longueur de la chaîne. Si un `Object` contient un autre type, il retournera la taille de l’objet telle qu’elle sera écrite dans le fichier par le `FilePut` (fonction).  
  
 Le `VBFixedString` attribut peut être appliqué aux champs de chaîne dans les objets pour indiquer la taille de la chaîne, en octets, lors de l’écriture sur le disque. Le `Len` fonction utilise le `VBFixedString` d’attribut, si elle est disponible, lors de la détermination de la taille de `Object` variables.  
  
> [!NOTE]
>  Le `Len` fonction ne peut pas être en mesure de déterminer le nombre réel d’octets de stockage requis lorsqu’il est utilisé avec des chaînes de longueur variable dans des types de données définis par l’utilisateur.  
  
> [!NOTE]
>  Le `LenB` fonction dans les versions antérieures de Visual Basic retourne le nombre d’octets dans une chaîne plutôt que des caractères. Il est utilisé principalement pour la conversion de chaînes dans les applications de jeu codés sur deux octets. Toutes les chaînes Visual Basic en cours sont au format Unicode, et `LenB` n’est plus pris en charge.  
  
## <a name="smart-device-developer-notes"></a>Remarques sur le développement Smart Device  
 Le `Len` fonction accepte uniquement `String` et `Object` variables en tant que paramètres. Si un `Object` contient un `String`, elle retournera la longueur de la `String`. Si un paramètre est une valeur NULL `Object` référence, la fonction retourne zéro. Si un `Object` contient un autre type, une exception est levée.  
  
   
  
## Examples  
 Cet exemple utilise `Len` pour retourner le nombre de caractères dans une chaîne.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Byte)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (float Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(float32 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Single) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(float Expression);" />
      <MemberSignature Language="F#" Value="static member Len : single -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
        <returns>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les types définis par l’utilisateur et `Object` variables, le `Len` fonction retourne la taille telle qu’elle sera écrite dans le fichier par le `FilePut` (fonction). Si un `Object` contient un `String`, il retourne la longueur de la chaîne. Si un `Object` contient un autre type, il retournera la taille de l’objet telle qu’elle sera écrite dans le fichier par le `FilePut` (fonction).  
  
 Le `VBFixedString` attribut peut être appliqué aux champs de chaîne dans les objets pour indiquer la taille de la chaîne, en octets, lors de l’écriture sur le disque. Le `Len` fonction utilise le `VBFixedString` d’attribut, si elle est disponible, lors de la détermination de la taille de `Object` variables.  
  
> [!NOTE]
>  Le `Len` fonction ne peut pas être en mesure de déterminer le nombre réel d’octets de stockage requis lorsqu’il est utilisé avec des chaînes de longueur variable dans des types de données définis par l’utilisateur.  
  
> [!NOTE]
>  Le `LenB` fonction dans les versions antérieures de Visual Basic retourne le nombre d’octets dans une chaîne plutôt que des caractères. Il est utilisé principalement pour la conversion de chaînes dans les applications de jeu codés sur deux octets. Toutes les chaînes Visual Basic en cours sont au format Unicode, et `LenB` n’est plus pris en charge.  
  
## <a name="smart-device-developer-notes"></a>Remarques sur le développement Smart Device  
 Le `Len` fonction accepte uniquement `String` et `Object` variables en tant que paramètres. Si un `Object` contient un `String`, elle retournera la longueur de la `String`. Si un paramètre est une valeur NULL `Object` référence, la fonction retourne zéro. Si un `Object` contient un autre type, une exception est levée.  
  
   
  
## Examples  
 Cet exemple utilise `Len` pour retourner le nombre de caractères dans une chaîne.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (string Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(string Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::String ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Len : string -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
        <returns>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les types définis par l’utilisateur et `Object` variables, le `Len` fonction retourne la taille telle qu’elle sera écrite dans le fichier par le `FilePut` (fonction). Si un `Object` contient un `String`, il retourne la longueur de la chaîne. Si un `Object` contient un autre type, il retournera la taille de l’objet telle qu’elle sera écrite dans le fichier par le `FilePut` (fonction).  
  
 Le `VBFixedString` attribut peut être appliqué aux champs de chaîne dans les objets pour indiquer la taille de la chaîne, en octets, lors de l’écriture sur le disque. Le `Len` fonction utilise le `VBFixedString` d’attribut, si elle est disponible, lors de la détermination de la taille de `Object` variables.  
  
> [!NOTE]
>  Le `Len` fonction ne peut pas être en mesure de déterminer le nombre réel d’octets de stockage requis lorsqu’il est utilisé avec des chaînes de longueur variable dans des types de données définis par l’utilisateur.  
  
> [!NOTE]
>  Le `LenB` fonction dans les versions antérieures de Visual Basic retourne le nombre d’octets dans une chaîne plutôt que des caractères. Il est utilisé principalement pour la conversion de chaînes dans les applications de jeu codés sur deux octets. Toutes les chaînes Visual Basic en cours sont au format Unicode, et `LenB` n’est plus pris en charge.  
  
## <a name="smart-device-developer-notes"></a>Remarques sur le développement Smart Device  
 Le `Len` fonction accepte uniquement `String` et `Object` variables en tant que paramètres. Si un `Object` contient un `String`, elle retournera la longueur de la `String`. Si un paramètre est une valeur NULL `Object` référence, la fonction retourne zéro. Si un `Object` contient un autre type, une exception est levée.  
  
   
  
## Examples  
 Cet exemple utilise `Len` pour retourner le nombre de caractères dans une chaîne.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (ushort Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int16 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As UShort) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::UInt16 Expression);" />
      <MemberSignature Language="F#" Value="static member Len : uint16 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
        <returns>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les types définis par l’utilisateur et `Object` variables, le `Len` fonction retourne la taille telle qu’elle sera écrite dans le fichier par le `FilePut` (fonction). Si un `Object` contient un `String`, il retourne la longueur de la chaîne. Si un `Object` contient un autre type, il retournera la taille de l’objet telle qu’elle sera écrite dans le fichier par le `FilePut` (fonction).  
  
 Le `VBFixedString` attribut peut être appliqué aux champs de chaîne dans les objets pour indiquer la taille de la chaîne, en octets, lors de l’écriture sur le disque. Le `Len` fonction utilise le `VBFixedString` d’attribut, si elle est disponible, lors de la détermination de la taille de `Object` variables.  
  
> [!NOTE]
>  Le `Len` fonction ne peut pas être en mesure de déterminer le nombre réel d’octets de stockage requis lorsqu’il est utilisé avec des chaînes de longueur variable dans des types de données définis par l’utilisateur.  
  
> [!NOTE]
>  Le `LenB` fonction dans les versions antérieures de Visual Basic retourne le nombre d’octets dans une chaîne plutôt que des caractères. Il est utilisé principalement pour la conversion de chaînes dans les applications de jeu codés sur deux octets. Toutes les chaînes Visual Basic en cours sont au format Unicode, et `LenB` n’est plus pris en charge.  
  
## <a name="smart-device-developer-notes"></a>Remarques sur le développement Smart Device  
 Le `Len` fonction accepte uniquement `String` et `Object` variables en tant que paramètres. Si un `Object` contient un `String`, elle retournera la longueur de la `String`. Si un paramètre est une valeur NULL `Object` référence, la fonction retourne zéro. Si un `Object` contient un autre type, une exception est levée.  
  
   
  
## Examples  
 Cet exemple utilise `Len` pour retourner le nombre de caractères dans une chaîne.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (uint Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int32 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As UInteger) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::UInt32 Expression);" />
      <MemberSignature Language="F#" Value="static member Len : uint32 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
        <returns>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les types définis par l’utilisateur et `Object` variables, le `Len` fonction retourne la taille telle qu’elle sera écrite dans le fichier par le `FilePut` (fonction). Si un `Object` contient un `String`, il retourne la longueur de la chaîne. Si un `Object` contient un autre type, il retournera la taille de l’objet telle qu’elle sera écrite dans le fichier par le `FilePut` (fonction).  
  
 Le `VBFixedString` attribut peut être appliqué aux champs de chaîne dans les objets pour indiquer la taille de la chaîne, en octets, lors de l’écriture sur le disque. Le `Len` fonction utilise le `VBFixedString` d’attribut, si elle est disponible, lors de la détermination de la taille de `Object` variables.  
  
> [!NOTE]
>  Le `Len` fonction ne peut pas être en mesure de déterminer le nombre réel d’octets de stockage requis lorsqu’il est utilisé avec des chaînes de longueur variable dans des types de données définis par l’utilisateur.  
  
> [!NOTE]
>  Le `LenB` fonction dans les versions antérieures de Visual Basic retourne le nombre d’octets dans une chaîne plutôt que des caractères. Il est utilisé principalement pour la conversion de chaînes dans les applications de jeu codés sur deux octets. Toutes les chaînes Visual Basic en cours sont au format Unicode, et `LenB` n’est plus pris en charge.  
  
## <a name="smart-device-developer-notes"></a>Remarques sur le développement Smart Device  
 Le `Len` fonction accepte uniquement `String` et `Object` variables en tant que paramètres. Si un `Object` contient un `String`, elle retournera la longueur de la `String`. Si un paramètre est une valeur NULL `Object` référence, la fonction retourne zéro. Si un `Object` contient un autre type, une exception est levée.  
  
   
  
## Examples  
 Cet exemple utilise `Len` pour retourner le nombre de caractères dans une chaîne.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (ulong Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int64 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As ULong) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::UInt64 Expression);" />
      <MemberSignature Language="F#" Value="static member Len : uint64 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Expression">Any valid <see langword="String" /> expression or variable name. If <c>Expression</c> is of type <see langword="Object" />, the <see langword="Len" /> function returns the size as it will be written to the file by the <see langword="FilePut" /> function.</param>
        <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
        <returns>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les types définis par l’utilisateur et `Object` variables, le `Len` fonction retourne la taille telle qu’elle sera écrite dans le fichier par le `FilePut` (fonction). Si un `Object` contient un `String`, il retourne la longueur de la chaîne. Si un `Object` contient un autre type, il retournera la taille de l’objet telle qu’elle sera écrite dans le fichier par le `FilePut` (fonction).  
  
 Le `VBFixedString` attribut peut être appliqué aux champs de chaîne dans les objets pour indiquer la taille de la chaîne, en octets, lors de l’écriture sur le disque. Le `Len` fonction utilise le `VBFixedString` d’attribut, si elle est disponible, lors de la détermination de la taille de `Object` variables.  
  
> [!NOTE]
>  Le `Len` fonction ne peut pas être en mesure de déterminer le nombre réel d’octets de stockage requis lorsqu’il est utilisé avec des chaînes de longueur variable dans des types de données définis par l’utilisateur.  
  
> [!NOTE]
>  Le `LenB` fonction dans les versions antérieures de Visual Basic retourne le nombre d’octets dans une chaîne plutôt que des caractères. Il est utilisé principalement pour la conversion de chaînes dans les applications de jeu codés sur deux octets. Toutes les chaînes Visual Basic en cours sont au format Unicode, et `LenB` n’est plus pris en charge.  
  
## <a name="smart-device-developer-notes"></a>Remarques sur le développement Smart Device  
 Le `Len` fonction accepte uniquement `String` et `Object` variables en tant que paramètres. Si un `Object` contient un `String`, elle retournera la longueur de la `String`. Si un paramètre est une valeur NULL `Object` référence, la fonction retourne zéro. Si un `Object` contient un autre type, une exception est levée.  
  
   
  
## Examples  
 Cet exemple utilise `Len` pour retourner le nombre de caractères dans une chaîne.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int64)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="LSet">
      <MemberSignature Language="C#" Value="public static string LSet (string Source, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LSet(string Source, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LSet (Source As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LSet(System::String ^ Source, int Length);" />
      <MemberSignature Language="F#" Value="static member LSet : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.LSet (Source, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Source">Required. <see langword="String" /> expression. Name of string variable.</param>
        <param name="Length">Required. <see langword="Integer" /> expression. Length of returned string.</param>
        <summary>Returns a left-aligned string containing the specified string adjusted to the specified length.</summary>
        <returns>Returns a left-aligned string containing the specified string adjusted to the specified length.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si la chaîne spécifiée est supérieure à la longueur spécifiée, la chaîne retournée est raccourcie à la longueur spécifiée. Si la chaîne spécifiée est inférieure à la longueur spécifiée, les espaces sont ajoutés à l’extrémité droite de la chaîne retournée pour obtenir la longueur appropriée.  
  
   
  
## Examples  
 Cet exemple illustre l’utilisation de la `LSet` (fonction).  
  
 [!code-vb[VbVbalrStrings#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="LTrim">
      <MemberSignature Language="C#" Value="public static string LTrim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LTrim(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LTrim (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LTrim(System::String ^ str);" />
      <MemberSignature Language="F#" Value="static member LTrim : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.LTrim str" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">Required. Any valid <see langword="String" /> expression.</param>
        <summary>Returns a string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</summary>
        <returns>Returns a string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `LTrim`, `RTrim`, et `Trim` fonctions suppriment les espaces à la fin des chaînes.  
  
   
  
## Examples  
 Cet exemple utilise le `LTrim` fonction pour supprimer les espaces de début et la `RTrim` des espaces à partir d’une variable de chaîne de fonction à la fin de la frange. Il utilise le `Trim` (fonction) pour supprimer les deux types d’espaces.  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Mid">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Returns a string that contains characters from a specified string.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Mid">
      <MemberSignature Language="C#" Value="public static string Mid (string str, int Start);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Mid(string str, int32 Start) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mid (str As String, Start As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Mid(System::String ^ str, int Start);" />
      <MemberSignature Language="F#" Value="static member Mid : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Mid (str, Start)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Start" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">Required. <see langword="String" /> expression from which characters are returned.</param>
        <param name="Start">Required. <see langword="Integer" /> expression. Starting position of the characters to return. If <c>Start</c> is greater than the number of characters in <c>str</c>, the <see langword="Mid" /> function returns a zero-length string (""). <c>Start</c> is one-based.</param>
        <summary>Returns a string that contains all the characters starting from a specified position in a string.</summary>
        <returns>A string that consists of all the characters starting from the specified position in the string.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour déterminer le nombre de caractères dans `str`, utilisez le `Len` (fonction).  
  
 Visual Basic a un `Mid` (fonction) et un `Mid` instruction. Ces éléments fonctionnent à la fois sur un nombre spécifié de caractères dans une chaîne, mais la `Mid` fonction retourne les caractères lors de la `Mid` instruction remplace les caractères. Pour plus d’informations, consultez [Mid, instruction](~/docs/visual-basic/language-reference/statements/mid-statement.md).  
  
> [!NOTE]
>  Le `MidB` (fonction) dans les versions précédentes de Visual Basic retourne une chaîne en octets plutôt que des caractères. Il est utilisé principalement pour la conversion de chaînes dans les applications de jeu codés sur deux octets. Toutes les chaînes Visual Basic sont au format Unicode, et `MidB` n’est plus pris en charge.  
  
   
  
## Examples  
 La dernière ligne dans cet exemple utilise cette surcharge de la `Mid` fonction pour retourner les caractères de la cinquième et ultérieures à partir d’une chaîne.  
  
 [!code-vb[VbVbalrStrings#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Start" /> &lt;= 0 or <paramref name="Length" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Mid">
      <MemberSignature Language="C#" Value="public static string Mid (string str, int Start, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Mid(string str, int32 Start, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mid (str As String, Start As Integer, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Mid(System::String ^ str, int Start, int Length);" />
      <MemberSignature Language="F#" Value="static member Mid : string * int * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Mid (str, Start, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Start" Type="System.Int32" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">Required. <see langword="String" /> expression from which characters are returned.</param>
        <param name="Start">Required. <see langword="Integer" /> expression. Starting position of the characters to return. If <c>Start</c> is greater than the number of characters in <c>str</c>, the <see langword="Mid" /> function returns a zero-length string (""). <c>Start</c> is one based.</param>
        <param name="Length">Optional. <see langword="Integer" /> expression. Number of characters to return. If omitted or if there are fewer than <c>Length</c> characters in the text (including the character at position <c>Start</c>), all characters from the start position to the end of the string are returned.</param>
        <summary>Returns a string that contains a specified number of characters starting from a specified position in a string.</summary>
        <returns>A string that consists of the specified number of characters starting from the specified position in the string.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour déterminer le nombre de caractères dans `str`, utilisez le `Len` (fonction).  
  
 Visual Basic a un `Mid` (fonction) et un `Mid` instruction. Ces éléments fonctionnent à la fois sur un nombre spécifié de caractères dans une chaîne, mais la `Mid` fonction retourne les caractères lors de la `Mid` instruction remplace les caractères. Pour plus d’informations, consultez [Mid, instruction](~/docs/visual-basic/language-reference/statements/mid-statement.md).  
  
> [!NOTE]
>  Le `MidB` (fonction) dans les versions précédentes de Visual Basic retourne une chaîne en octets plutôt que des caractères. Il est utilisé principalement pour la conversion de chaînes dans les applications de jeu codés sur deux octets. Toutes les chaînes Visual Basic sont au format Unicode, et `MidB` n’est plus pris en charge.  
  
   
  
## Examples  
 Les deux premiers `Mid` fonctions dans cet exemple renvoient le nombre spécifié de caractères à partir d’une chaîne, en commençant par la position donnée. (La dernière fonction illustre le <xref:Microsoft.VisualBasic.Strings.Mid%28System.String%2CSystem.Int32%29> surcharge et spécifie uniquement le point de départ pour l’extraction de chaîne.)  
  
 [!code-vb[VbVbalrStrings#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Start" /> &lt;= 0 or <paramref name="Length" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public static string Replace (string Expression, string Find, string Replacement, int Start = 1, int Count = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Replace(string Expression, string Find, string Replacement, int32 Start, int32 Count, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (Expression As String, Find As String, Replacement As String, Optional Start As Integer = 1, Optional Count As Integer = -1, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String" />
      <MemberSignature Language="F#" Value="static member Replace : string * string * string * int * int * Microsoft.VisualBasic.CompareMethod -&gt; string" Usage="Microsoft.VisualBasic.Strings.Replace (Expression, Find, Replacement, Start, Count, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" />
        <Parameter Name="Find" Type="System.String" />
        <Parameter Name="Replacement" Type="System.String" />
        <Parameter Name="Start" Type="System.Int32" />
        <Parameter Name="Count" Type="System.Int32" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Expression">Required. String expression containing substring to replace.</param>
        <param name="Find">Required. Substring being searched for.</param>
        <param name="Replacement">Required. Replacement substring.</param>
        <param name="Start">Optional. Position within <c>Expression</c> that starts a substring used for replacement. The return value of <see langword="Replace" /> is a string that begins at <c>Start</c>, with appropriate substitutions. If omitted, 1 is assumed.</param>
        <param name="Count">Optional. Number of substring substitutions to perform. If omitted, the default value is –1, which means "make all possible substitutions."</param>
        <param name="Compare">Optional. Numeric value indicating the kind of comparison to use when evaluating substrings. See Settings for values.</param>
        <summary>Returns a string in which a specified substring has been replaced with another substring a specified number of times.</summary>
        <returns>
          <see langword="Replace" /> returns the following values.  
  
 <list type="table"><item><term> If  </term><description> Replace returns  </description></item><item><term><paramref name="Find" /> is zero-length or <see langword="Nothing" /></term><description> Copy of <paramref name="Expression" /></description></item><item><term><paramref name="Replace" /> is zero-length  </term><description> Copy of <paramref name="Expression" /> with no occurrences of <paramref name="Find" /></description></item><item><term><paramref name="Expression" /> is zero-length or <see langword="Nothing" />, or <paramref name="Start" /> is greater than length of <paramref name="Expression" /></term><description><see langword="Nothing" /></description></item><item><term><paramref name="Count" /> is 0  </term><description> Copy of <paramref name="Expression" /></description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La valeur de retour de la `Replace` (fonction) est une chaîne qui commence à la position spécifiée par `Start` et se termine à la fin de la `Expression` chaîne, avec les substitutions sont effectuées comme spécifié par le `Find` et `Replace` valeurs.  
  
 Le `Compare` argument peut prendre les valeurs suivantes.  
  
|Constante|Description|  
|-|-|  
|`Binary`|Effectue une comparaison binaire|  
|`Text`|Effectue une comparaison textuelle|  
  
   
  
## Examples  
 Cet exemple montre la `Replace` (fonction).  
  
```vb  
Dim TestString As String = "Shopping List"  
' Returns "Shipping List".  
Dim aString As String = Replace(TestString, "o", "i")  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Count" /> &lt; -1 or <paramref name="Start" /> &lt;= 0.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Filter" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Right">
      <MemberSignature Language="C#" Value="public static string Right (string str, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Right(string str, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Right (str As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Right(System::String ^ str, int Length);" />
      <MemberSignature Language="F#" Value="static member Right : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Right (str, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">Required. <see langword="String" /> expression from which the rightmost characters are returned.</param>
        <param name="Length">Required. <see langword="Integer" />. Numeric expression indicating how many characters to return. If 0, a zero-length string ("") is returned. If greater than or equal to the number of characters in <c>str</c>, the entire string is returned.</param>
        <summary>Returns a string containing a specified number of characters from the right side of a string.</summary>
        <returns>Returns a string containing a specified number of characters from the right side of a string.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour déterminer le nombre de caractères dans `str`, utilisez le `Len` (fonction). Si utilisé dans un formulaire Windows ou toute autre classe qui a un `Right` propriété, vous devez qualifier complètement la fonction avec `Microsoft.VisualBasic.Strings.Right`.  
  
> [!NOTE]
>  Le `RightB` (fonction) dans les versions antérieures de Visual Basic retourne une chaîne en octets, plutôt que des caractères. Il est utilisé principalement pour la conversion de chaînes dans les applications de jeu codés sur deux octets. Toutes les chaînes Visual Basic en cours sont au format Unicode, et `RightB` n’est plus pris en charge.  
  
   
  
## Examples  
 Cet exemple illustre l’utilisation de la `Right` fonction pour retourner une sous-chaîne d’une donnée `String`. Dans une classe qui a un `Right` propriété, il peut être nécessaire de qualifier entièrement le `Right` (fonction).  
  
 [!code-vb[VbVbalrStrings#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#21)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Length" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="RSet">
      <MemberSignature Language="C#" Value="public static string RSet (string Source, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string RSet(string Source, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function RSet (Source As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ RSet(System::String ^ Source, int Length);" />
      <MemberSignature Language="F#" Value="static member RSet : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.RSet (Source, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Source">Required. <see langword="String" /> expression. Name of string variable.</param>
        <param name="Length">Required. <see langword="Integer" /> expression. Length of returned string.</param>
        <summary>Returns a right-aligned string containing the specified string adjusted to the specified length.</summary>
        <returns>Returns a right-aligned string containing the specified string adjusted to the specified length.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si `Source` dépasse `Length`, `RSet` place uniquement les caractères les plus à gauche, jusqu'à la longueur de `Source`, dans la chaîne retournée. Si la chaîne spécifiée est inférieure à la longueur spécifiée, les espaces sont ajoutés à l’extrémité gauche de la chaîne à obtenir la longueur appropriée. Si la chaîne spécifiée est supérieure à la longueur spécifiée, elle est raccourcie à la longueur spécifiée.  
  
   
  
## Examples  
 Cet exemple illustre l’utilisation de la `RSet` (fonction).  
  
 [!code-vb[VbVbalrStrings#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="RTrim">
      <MemberSignature Language="C#" Value="public static string RTrim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static string RTrim(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function RTrim (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ RTrim(System::String ^ str);" />
      <MemberSignature Language="F#" Value="static member RTrim : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.RTrim str" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">Required. Any valid <see langword="String" /> expression.</param>
        <summary>Returns a string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</summary>
        <returns>Returns a string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `LTrim`, `RTrim`, et `Trim` fonctions suppriment les espaces à la fin des chaînes.  
  
   
  
## Examples  
 Cet exemple utilise le `LTrim` fonction pour supprimer les espaces de début et la `RTrim` des espaces à partir d’une variable de chaîne de fonction à la fin de la frange. Il utilise le `Trim` (fonction) pour supprimer les deux types d’espaces.  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Space">
      <MemberSignature Language="C#" Value="public static string Space (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Space(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Space (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Space(int Number);" />
      <MemberSignature Language="F#" Value="static member Space : int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Space Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">Required. <see langword="Integer" /> expression. The number of spaces you want in the string.</param>
        <summary>Returns a string consisting of the specified number of spaces.</summary>
        <returns>Returns a string consisting of the specified number of spaces.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `Space` fonction est utile pour la mise en forme la sortie et effacer des données dans les chaînes de longueur fixe.  
  
   
  
## Examples  
 Cet exemple utilise le `Space` fonction pour retourner une chaîne composée d’un nombre spécifié d’espaces.  
  
 [!code-vb[VbVbalrStrings#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public static string[] Split (string Expression, string Delimiter = &quot; &quot;, int Limit = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Split(string Expression, string Delimiter, int32 Limit, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (Expression As String, Optional Delimiter As String = &quot; &quot;, Optional Limit As Integer = -1, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String()" />
      <MemberSignature Language="F#" Value="static member Split : string * string * int * Microsoft.VisualBasic.CompareMethod -&gt; string[]" Usage="Microsoft.VisualBasic.Strings.Split (Expression, Delimiter, Limit, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" />
        <Parameter Name="Delimiter" Type="System.String" />
        <Parameter Name="Limit" Type="System.Int32" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Expression">Required. <see langword="String" /> expression containing substrings and delimiters.</param>
        <param name="Delimiter">Optional. Any single character used to identify substring limits. If <c>Delimiter</c> is omitted, the space character (" ") is assumed to be the delimiter.</param>
        <param name="Limit">Optional. Maximum number of substrings into which the input string should be split. The default, –1, indicates that the input string should be split at every occurrence of the <c>Delimiter</c> string.</param>
        <param name="Compare">Optional. Numeric value indicating the comparison to use when evaluating substrings. See "Settings" for values.</param>
        <summary>Returns a zero-based, one-dimensional array containing a specified number of substrings.</summary>
        <returns>
          <see langword="String" /> array. If <paramref name="Expression" /> is a zero-length string (""), <see langword="Split" /> returns a single-element array containing a zero-length string. If <paramref name="Delimiter" /> is a zero-length string, or if it does not appear anywhere in <paramref name="Expression" />, <see langword="Split" /> returns a single-element array containing the entire <paramref name="Expression" /> string.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Par défaut, ou lorsque `Limit` est égal à -1, le `Split` fonction fractionne la chaîne d’entrée à chaque occurrence de la chaîne de délimiteur et retourne les sous-chaînes dans un tableau. Lorsque le `Limit` paramètre est supérieur à zéro, le `Split` fonction fractionne la chaîne au premier `Limit`occurrences de-1 du délimiteur et retourne un tableau avec les sous-chaînes résultantes. Par exemple, `Split("a:b:c", ":")` retourne le tableau `{"a", "b", "c"}`, tandis que `Split("a:b:c", ":", 2)` retourne le tableau `{"a", "b:c"}`.  
  
 Lorsque le `Split` fonction rencontre deux séparateurs dans une ligne ou un séparateur au début ou à la fin de la chaîne, elle les interprète comme entourant une chaîne vide ( » »). Par exemple, `Split("xx", "x")` retourne le tableau contenant trois chaînes vides : une située entre le début de la chaîne et le premier « x », une située entre les deux chaînes « x » et située entre le dernier « x » et la fin de la chaîne.  
  
 Ce tableau montre comment le paramètre facultatif `Delimiter`, `Limit`, et `Compare` paramètres peuvent modifier le comportement de la `Split` (fonction).  
  
|Appel de fractionnement|Valeur de retour|  
|-|-|  
|`Split("42, 12, 19")`|{"42," , "12," , "19"}|  
|`Split("42, 12, 19", ", ")`|{"42", "12", "19"}|  
|`Split("42, 12, 19", ", ", 2)`|{"42", "12, 19"}|  
|`Split("192.168.0.1", ".")`|{"192", "168", "0", "1"}|  
|`Split("Alice and Bob", " AND ")`|{« Alice et Bob »}|  
|`Split("Alice and Bob", " AND ", ,CompareMethod.Text)`|{"Alice", "Bob"}|  
|`Split("someone@example.com", "@",1)`|{"someone@example.com"}|  
|`Split("someone@example.com", "@",2)`|{« quelqu'un », « example.com »}|  
  
 Le `Compare` argument peut prendre les valeurs suivantes.  
  
|Constante|Description|Value|  
|-|-|-|  
|`CompareMethod.Binary`|Effectue une comparaison binaire|0|  
|`CompareMethod.Text`|Effectue une comparaison textuelle|1|  
  
   
  
## Examples  
 L’exemple suivant montre comment fractionner une chaîne à ses espaces.  
  
 [!code-vb[VbVbalrStrings#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#13)]  
  
 L’exemple suivant montre comment fractionner des chaînes avec plusieurs délimiteurs dans une ligne et éliminer les chaînes vides.  
  
 [!code-vb[VbVbalrStrings#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Join" />
        <altmember cref="T:Microsoft.VisualBasic.CompareMethod" />
      </Docs>
    </Member>
    <Member MemberName="StrComp">
      <MemberSignature Language="C#" Value="public static int StrComp (string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 StrComp(string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrComp (String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberSignature Language="F#" Value="static member StrComp : string * string * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.StrComp (String1, String2, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String1" Type="System.String" />
        <Parameter Name="String2" Type="System.String" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="String1">Required. Any valid <see langword="String" /> expression.</param>
        <param name="String2">Required. Any valid <see langword="String" /> expression.</param>
        <param name="Compare">Optional. Specifies the type of string comparison. If <c>Compare</c> is omitted, the <see langword="Option Compare" /> setting determines the type of comparison.</param>
        <summary>Returns -1, 0, or 1, based on the result of a string comparison.</summary>
        <returns>The <see langword="StrComp" /> function has the following return values.  
  
 <list type="table"><item><term> If  </term><description> StrComp returns  </description></item><item><term><paramref name="String1" /> sorts ahead of <paramref name="String2" /></term><description> -1  </description></item><item><term><paramref name="String1" /> is equal to <paramref name="String2" /></term><description> 0  </description></item><item><term><paramref name="String1" /> sorts after <paramref name="String2" /></term><description> 1  </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les chaînes sont comparées à des valeurs de tri alphanumérique commençant par le premier caractère. Pour plus d’informations sur les comparaisons binaires, les comparaisons textuelles et ordre de tri, consultez [instruction Option Compare](~/docs/visual-basic/language-reference/statements/option-compare-statement.md).  
  
 Les paramètres de l’argument `Compare` sont :  
  
|Constante|Description|  
|-|-|  
|`Binary`|Effectue une comparaison binaire, selon un ordre de tri dérivé des représentations binaires internes des caractères.|  
|`Text`|Effectue une comparaison de texte, selon un ordre de tri de texte respectant la casse déterminé par votre système `LocaleID` valeur.|  
  
   
  
## Examples  
 Cet exemple utilise le `StrComp` fonction pour retourner les résultats d’une comparaison de chaînes.  
  
 [!code-vb[VbVbalrStrings#22](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Compare" /> value is not valid.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.InStr" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="StrConv">
      <MemberSignature Language="C#" Value="public static string StrConv (string str, Microsoft.VisualBasic.VbStrConv Conversion, int LocaleID = 0);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrConv(string str, valuetype Microsoft.VisualBasic.VbStrConv Conversion, int32 LocaleID) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrConv (str As String, Conversion As VbStrConv, Optional LocaleID As Integer = 0) As String" />
      <MemberSignature Language="F#" Value="static member StrConv : string * Microsoft.VisualBasic.VbStrConv * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrConv (str, Conversion, LocaleID)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Conversion" Type="Microsoft.VisualBasic.VbStrConv" />
        <Parameter Name="LocaleID" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">Required. <see langword="String" /> expression to be converted.</param>
        <param name="Conversion">Required. <see cref="T:Microsoft.VisualBasic.VbStrConv" /> member. The enumeration value specifying the type of conversion to perform.</param>
        <param name="LocaleID">Optional. The <see langword="LocaleID" /> value, if different from the system <see langword="LocaleID" /> value. (The system <see langword="LocaleID" /> value is the default.)</param>
        <summary>Returns a string converted as specified.</summary>
        <returns>Returns a string converted as specified.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les constantes `VbStrConv.Wide`, `VbStrConv.Narrow`, `VbStrConv.SimplifiedChinese`, `VbStrConv.TraditionalChinese`, `VbStrConv.Katakana`, et `VbStrConv.Hiragana` peut provoquer des erreurs d’exécution lorsqu’il est utilisé dans les paramètres régionaux où elles ne s’appliquent pas, mais pas toujours : les constantes `VbStrConv.Katakana` et `VbStrConv.Hiragana`peut être utilisé dans un système non japonais avec le module linguistique japonais est installé. En outre, l’utilisation des constantes `VbStrConv.Wide` et `VbStrConv.Narrow` est pris en charge sur n’importe quel système avec une langue d’Extrême-Orient installée.  
  
 Cette fonction utilise les informations de culture de l’application lors de la manipulation de la chaîne afin que les changements de casse sont appropriés pour les paramètres régionaux dans lequel l’application est utilisée.  
  
> [!IMPORTANT]
>  Si votre application prend des décisions de sécurité en fonction du résultat d’une comparaison ou d’une opération de changement de casse, l’opération doit utiliser le <xref:System.String.Compare%2A?displayProperty=nameWithType> (méthode), puis transmettez <xref:System.StringComparison.Ordinal> ou <xref:System.StringComparison.OrdinalIgnoreCase> pour le `comparisonType` argument. Pour plus d’informations, consultez [fonctionnement Culture affecte des chaînes en Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).  
  
 Les paramètres de l’argument `Conversion` sont :  
  
|Membre d’énumération|Description|  
|-|-|  
|`VbStrConv.None`|N’exécute aucune conversion|  
|`VbStrConv.LinguisticCasing`|Utilise les règles linguistiques pour la casse, plutôt que le système de fichiers (par défaut). Valide avec `VbStrConv.UpperCase` et `VbStrConv.LowerCase` uniquement.|  
|`VbStrConv.UpperCase`|Convertit la chaîne spécifiée en majuscules.|  
|`VbStrConv.LowerCase`|Convertit la chaîne spécifiée en minuscules.|  
|`VbStrConv.ProperCase`|Convertit la première lettre de chaque mot dans la chaîne en majuscules.|  
|`VbStrConv.Wide` <sup>*</sup>|Convertit les caractères étroits (demi-chasse) les caractères dans la chaîne à caractères larges (pleine chasse). [!INCLUDE[vbstrconv-wide](~/includes/vbstrconv-wide-md.md)]|  
|`VbStrConv.Narrow` <sup>*</sup>|Convertit les caractères larges (pleine chasse) dans la chaîne de caractères étroits (demi-chasse) caractères.|  
|`VbStrConv.Katakana` <sup>**</sup>|Convertit les caractères Hiragana dans la chaîne en caractères Katakana.|  
|`VbStrConv.Hiragana` <sup>**</sup>|Convertit les caractères Katakana dans la chaîne en caractères Hiragana .|  
|`VbStrConv.SimplifiedChinese` <sup>*</sup>|Convertit des caractères en chinois traditionnel en chinois simplifié.|  
|`VbStrConv.TraditionalChinese` <sup>*</sup>|Convertit les caractères chinois simplifié en chinois traditionnel.|  
  
 <sup>*</sup> S’applique aux paramètres régionaux asiatiques.  
  
 <sup>**</sup> S’applique uniquement au Japon.  
  
> [!NOTE]
>  Ces constantes sont spécifiées dans le common language runtime du .NET Framework. Par conséquent, elles peuvent servir n’importe où dans votre code à la place les valeurs réelles. La plupart peut être combinée (par exemple, `UpperCase + Wide`), sauf lorsqu’elles s’excluent mutuellement (par exemple, `VbStrConv.Wide + VbStrConv.Narrow`).  
  
 Les éléments suivants sont des séparateurs de mots valides pour la casse adéquate : Null (`Chr$(0)`), tabulation horizontale (`Chr$(9)`), saut de ligne (`Chr$(10)`), tabulation verticale (`Chr$(11)`), saut de page (`Chr$(12)`), retour chariot (`Chr$(13)`), espace () jeu de caractères d’un octet) (`Chr$(32)`). La valeur réelle pour un espace, ce qui peut être full ou demi-chasse, varie par pays/région pour les cultures d’Extrême-Orient.  
  
   
  
## Examples  
 Cet exemple convertit le texte en lettres minuscules.  
  
 [!code-vb[VbVbalrStrings#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Unsupported <paramref name="LocaleID" />, <paramref name="Conversion" /> &lt; 0 or &gt; 2048, or unsupported conversion for specified locale.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="StrDup">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Returns a string or object consisting of the specified character repeated the specified number of times.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static string StrDup (int Number, char Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrDup(int32 Number, char Character) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrDup (Number As Integer, Character As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ StrDup(int Number, char Character);" />
      <MemberSignature Language="F#" Value="static member StrDup : int * char -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrDup (Number, Character)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
        <Parameter Name="Character" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Number">Required. <see langword="Integer" /> expression. The length to the string to be returned.</param>
        <param name="Character">Required. Any valid <see langword="Char" />, <see langword="String" />, or <see langword="Object" /> expression. Only the first character of the expression will be used. If Character is of type <see langword="Object" />, it must contain either a <see langword="Char" /> or a <see langword="String" /> value.</param>
        <summary>Returns a string or object consisting of the specified character repeated the specified number of times.</summary>
        <returns>Returns a string or object consisting of the specified character repeated the specified number of times.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette fonction retourne un `String` composé de caractères répétés. Le caractère qui constitue la chaîne est le premier caractère dans le `Character` argument et il est dupliqué `Number` nombre de fois.  
  
   
  
## Examples  
 Cet exemple utilise le `StrDup` fonction pour retourner une chaîne de caractères de dupliqués.  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> is less than 0 or <paramref name="Character" /> type is not valid.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="Character" /> is <see langword="Nothing" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static object StrDup (int Number, object Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static object StrDup(int32 Number, object Character) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrDup (Number As Integer, Character As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ StrDup(int Number, System::Object ^ Character);" />
      <MemberSignature Language="F#" Value="static member StrDup : int * obj -&gt; obj" Usage="Microsoft.VisualBasic.Strings.StrDup (Number, Character)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
        <Parameter Name="Character" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">Required. <see langword="Integer" /> expression. The length to the string to be returned.</param>
        <param name="Character">Required. Any valid <see langword="Char" />, <see langword="String" />, or <see langword="Object" /> expression. Only the first character of the expression will be used. If Character is of type <see langword="Object" />, it must contain either a <see langword="Char" /> or a <see langword="String" /> value.</param>
        <summary>Returns a string or object consisting of the specified character repeated the specified number of times.</summary>
        <returns>Returns a string or object consisting of the specified character repeated the specified number of times.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette fonction retourne un `String` composé de caractères répétés. Le caractère qui constitue la chaîne est le premier caractère dans le `Character` argument et il est dupliqué `Number` nombre de fois.  
  
   
  
## Examples  
 Cet exemple utilise le `StrDup` fonction pour retourner une chaîne de caractères de dupliqués.  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> is less than 0 or <paramref name="Character" /> type is not valid.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="Character" /> is <see langword="Nothing" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static string StrDup (int Number, string Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrDup(int32 Number, string Character) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrDup (Number As Integer, Character As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ StrDup(int Number, System::String ^ Character);" />
      <MemberSignature Language="F#" Value="static member StrDup : int * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrDup (Number, Character)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
        <Parameter Name="Character" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Number">Required. <see langword="Integer" /> expression. The length to the string to be returned.</param>
        <param name="Character">Required. Any valid <see langword="Char" />, <see langword="String" />, or <see langword="Object" /> expression. Only the first character of the expression will be used. If Character is of type <see langword="Object" />, it must contain either a <see langword="Char" /> or a <see langword="String" /> value.</param>
        <summary>Returns a string or object consisting of the specified character repeated the specified number of times.</summary>
        <returns>Returns a string or object consisting of the specified character repeated the specified number of times.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette fonction retourne un `String` composé de caractères répétés. Le caractère qui constitue la chaîne est le premier caractère dans le `Character` argument et il est dupliqué `Number` nombre de fois.  
  
   
  
## Examples  
 Cet exemple utilise le `StrDup` fonction pour retourner une chaîne de caractères de dupliqués.  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> is less than 0 or <paramref name="Character" /> type is not valid.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="Character" /> is <see langword="Nothing" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="StrReverse">
      <MemberSignature Language="C#" Value="public static string StrReverse (string Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrReverse(string Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrReverse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrReverse (Expression As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ StrReverse(System::String ^ Expression);" />
      <MemberSignature Language="F#" Value="static member StrReverse : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrReverse Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Expression">Required. String expression whose characters are to be reversed. If <c>Expression</c> is a zero-length string (""), a zero-length string is returned.</param>
        <summary>Returns a string in which the character order of a specified string is reversed.</summary>
        <returns>Returns a string in which the character order of a specified string is reversed.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `StrReverse` fonction retourne une chaîne qui contient les mêmes caractères que `Expression`, mais dans l’ordre inverse.  
  
   
  
## Examples  
 [!code-vb[VbVbalrStrings#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      </Docs>
    </Member>
    <Member MemberName="Trim">
      <MemberSignature Language="C#" Value="public static string Trim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Trim(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Trim (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Trim(System::String ^ str);" />
      <MemberSignature Language="F#" Value="static member Trim : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Trim str" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">Required. Any valid <see langword="String" /> expression.</param>
        <summary>Returns a string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</summary>
        <returns>Returns a string containing a copy of a specified string with no leading spaces (<see langword="LTrim" />), no trailing spaces (<see langword="RTrim" />), or no leading or trailing spaces (<see langword="Trim" />).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `LTrim`, `RTrim`, et `Trim` fonctions suppriment les espaces à la fin des chaînes.  
  
   
  
## Examples  
 Cet exemple utilise le `LTrim` fonction pour supprimer les espaces de début et la `RTrim` des espaces à partir d’une variable de chaîne de fonction à la fin de la frange. Il utilise le `Trim` (fonction) pour supprimer les deux types d’espaces.  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="UCase">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Returns a string or character containing the specified string converted to uppercase.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UCase">
      <MemberSignature Language="C#" Value="public static char UCase (char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static char UCase(char Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.UCase(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function UCase (Value As Char) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char UCase(char Value);" />
      <MemberSignature Language="F#" Value="static member UCase : char -&gt; char" Usage="Microsoft.VisualBasic.Strings.UCase Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Value">Required. Any valid <see langword="String" /> or <see langword="Char" /> expression.</param>
        <summary>Returns a string or character containing the specified string converted to uppercase.</summary>
        <returns>Returns a string or character containing the specified string converted to uppercase.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Seulement des lettres minuscules sont convertis en majuscules ; toutes les lettres majuscules et les caractères restent inchangées.  
  
 Cette fonction utilise les informations de culture de l’application lors de la manipulation de la chaîne afin que les changements de casse sont appropriés pour les paramètres régionaux dans lequel l’application est utilisée.  
  
> [!IMPORTANT]
>  Si votre application prend des décisions de sécurité en fonction du résultat d’une comparaison ou d’une opération de changement de casse, l’opération doit utiliser le <xref:System.String.Compare%2A?displayProperty=nameWithType> (méthode), puis transmettez <xref:System.StringComparison.Ordinal> ou <xref:System.StringComparison.OrdinalIgnoreCase> pour le `comparisonType` argument. Pour plus d’informations, consultez [fonctionnement Culture affecte des chaînes en Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).  
  
   
  
## Examples  
 Cet exemple utilise le `UCase` fonction pour retourner une version en majuscules d’une chaîne.  
  
 [!code-vb[VbVbalrStrings#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.LCase" />
      </Docs>
    </Member>
    <Member MemberName="UCase">
      <MemberSignature Language="C#" Value="public static string UCase (string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static string UCase(string Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.UCase(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UCase (Value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ UCase(System::String ^ Value);" />
      <MemberSignature Language="F#" Value="static member UCase : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.UCase Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Value">Required. Any valid <see langword="String" /> or <see langword="Char" /> expression.</param>
        <summary>Returns a string or character containing the specified string converted to uppercase.</summary>
        <returns>Returns a string or character containing the specified string converted to uppercase.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Seulement des lettres minuscules sont convertis en majuscules ; toutes les lettres majuscules et les caractères restent inchangées.  
  
 Cette fonction utilise les informations de culture de l’application lors de la manipulation de la chaîne afin que les changements de casse sont appropriés pour les paramètres régionaux dans lequel l’application est utilisée.  
  
> [!IMPORTANT]
>  Si votre application prend des décisions de sécurité en fonction du résultat d’une comparaison ou d’une opération de changement de casse, l’opération doit utiliser le <xref:System.String.Compare%2A?displayProperty=nameWithType> (méthode), puis transmettez <xref:System.StringComparison.Ordinal> ou <xref:System.StringComparison.OrdinalIgnoreCase> pour le `comparisonType` argument. Pour plus d’informations, consultez [fonctionnement Culture affecte des chaînes en Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).  
  
   
  
## Examples  
 Cet exemple utilise le `UCase` fonction pour retourner une version en majuscules d’une chaîne.  
  
 [!code-vb[VbVbalrStrings#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.LCase" />
      </Docs>
    </Member>
  </Members>
</Type>