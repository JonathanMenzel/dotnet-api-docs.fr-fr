<Type Name="Financial" FullName="Microsoft.VisualBasic.Financial">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="5bd91c0c7d16866ade9993c6ae68c0b87b12583d" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39860120" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Financial" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Financial extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Financial" />
  <TypeSignature Language="VB.NET" Value="Public Module Financial" />
  <TypeSignature Language="C++ CLI" Value="public ref class Financial sealed" />
  <TypeSignature Language="F#" Value="type Financial = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Le module <see langword="Financial" /> contient des procédures utilisées pour exécuter des opérations financières.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce module prend en charge les membres de bibliothèque Runtime Visual Basic qui effectuent des calculs financiers tels que l’amortissement, les valeurs présents et futurs, les taux d’intérêt, les taux de retour et les paiements.  
  
   
  
## Examples  
 Cet exemple utilise le `Rate` (fonction) pour calculer le taux d’intérêt d’un prêt, étant donné le nombre total de paiements (`TotPmts`), le montant du remboursement (`Payment`), la valeur actuelle ou le principal de l’emprunt (`PVal`), l’avenir valeur de l’emprunt (`FVal`), un nombre qui indique si le paiement est dû au début ou à la fin de la période de paiement (`PayType`) et une approximation du taux d’intérêt attendu (`Guess`).  
  
 [!code-vb[VbVbalrMath#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="DDB">
      <MemberSignature Language="C#" Value="public static double DDB (double Cost, double Salvage, double Life, double Period, double Factor = 2);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 DDB(float64 Cost, float64 Salvage, float64 Life, float64 Period, float64 Factor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.DDB(System.Double,System.Double,System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function DDB (Cost As Double, Salvage As Double, Life As Double, Period As Double, Optional Factor As Double = 2) As Double" />
      <MemberSignature Language="F#" Value="static member DDB : double * double * double * double * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.DDB (Cost, Salvage, Life, Period, Factor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Cost" Type="System.Double" />
        <Parameter Name="Salvage" Type="System.Double" />
        <Parameter Name="Life" Type="System.Double" />
        <Parameter Name="Period" Type="System.Double" />
        <Parameter Name="Factor" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Cost">Obligatoire. <see langword="Double" /> indiquant le coût initial du bien.</param>
        <param name="Salvage">Obligatoire. <see langword="Double" /> indiquant la valeur du bien à la fin de son cycle de vie.</param>
        <param name="Life">Obligatoire. <see langword="Double" /> indiquant la durée du cycle de vie du bien.</param>
        <param name="Period">Obligatoire. <see langword="Double" /> indiquant la période sur laquelle l'amortissement du bien est calculé.</param>
        <param name="Factor">Optionnel. <see langword="Double" /> indiquant le taux utilisé pour le calcul de l'amortissement. Si cet argument est omis, la valeur 2 (méthode d'amortissement dégressif à taux double) est utilisée par défaut.</param>
        <summary>Retourne une valeur <see langword="Double" /> indiquant la valeur d'amortissement d'un bien sur une période déterminée en utilisant la méthode d'amortissement dégressif à taux double ou toute autre méthode spécifiée.</summary>
        <returns>Retourne une valeur <see langword="Double" /> indiquant la valeur d'amortissement d'un bien sur une période déterminée en utilisant la méthode d'amortissement dégressif à taux double ou toute autre méthode spécifiée.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La méthode d’amortissement dégressif à taux double calcule l’amortissement à un taux accéléré. L’amortissement est la plus élevée dans la première période et diminue les périodes.  
  
 Le `Life` et `Period` arguments doivent être exprimées dans les mêmes unités. Par exemple, si `Life` est exprimé en mois, `Period` doit également être exprimé en mois. Tous les arguments doivent être des nombres positifs.  
  
 Le `DDB` fonction utilise la formule suivante pour calculer l’amortissement pour une période donnée :  
  
 Valeur d’amortissement / période = ((Cost – Salvage) * facteur) / durée de vie  
  
   
  
## Examples  
 Cet exemple utilise le `DDB` fonction pour retourner l’amortissement linéaire d’un élément multimédia pour une période donnée le coût initial (`InitCost`), la valeur résiduelle à la fin du cycle de vie de la ressource (`SalvageVal`), la durée de vie totale de l’actif en années (`LifeTime`) et la période pour laquelle l’amortissement du bien est calculé des années (`Depr`).  
  
 [!code-vb[VbVbalrMath#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Factor" /> &lt;= 0, <paramref name="Salvage" /> &lt; 0, <paramref name="Period" /> &lt;= 0 ou <paramref name="Period" /> &gt; <paramref name="Life." /></exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.SLN(System.Double,System.Double,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.SYD(System.Double,System.Double,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="FV">
      <MemberSignature Language="C#" Value="public static double FV (double Rate, double NPer, double Pmt, double PV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 FV(float64 Rate, float64 NPer, float64 Pmt, float64 PV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.FV(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function FV (Rate As Double, NPer As Double, Pmt As Double, Optional PV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member FV : double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.FV (Rate, NPer, Pmt, PV, Due)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="Pmt" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">Obligatoire. <see langword="Double" /> indiquant le taux d'intérêt par période. Par exemple, si vous obtenez un prêt à un taux d'intérêt annuel (TIA) de 10 pour cent et que vous effectuez des remboursements mensuels, le taux par échéance est de 0,1/12, soit 0,0083.</param>
        <param name="NPer">Obligatoire. <see langword="Double" /> indiquant le nombre total d'échéances de l'annuité. Par exemple, si vous effectuez des remboursements mensuels dans le cadre d'un emprunt d'une durée de quatre ans, votre emprunt comporte un total de 48 (4 x 12) échéances.</param>
        <param name="Pmt">Obligatoire. <see langword="Double" /> indiquant le versement à effectuer à chaque échéance. Les paiements comprennent généralement le capital et les intérêts qui ne sont pas modifiés au cours de l'annuité.</param>
        <param name="PV">Optionnel. <see langword="Double" /> indiquant la valeur actuelle (ou montant forfaitaire) d'une série de paiements futurs. Par exemple, lorsque vous empruntez de l'argent pour acheter une voiture, le montant du prêt correspond pour le prêteur à la valeur actuelle des remboursements mensuels que vous allez effectuer pour la voiture. Si cet argument est omis, la position 0 est utilisée par défaut.</param>
        <param name="Due">Optionnel. Objet de type <see cref="T:Microsoft.VisualBasic.DueDate" /> qui spécifie la date d'échéance des paiements. Cet argument doit avoir la valeur <see langword="DueDate.EndOfPeriod" /> si les paiements sont dus à terme échu ou <see langword="DueDate.BegOfPeriod" /> si les paiements sont dus à terme à échoir. En cas d'omission, <see langword="DueDate.EndOfPeriod" /> est utilisé par défaut.</param>
        <summary>Retourne une valeur <see langword="Double" /> indiquant le futur montant d'une annuité basée sur des versements constants et périodiques et sur un taux d'intérêt fixe.</summary>
        <returns>Retourne une valeur <see langword="Double" /> indiquant le futur montant d'une annuité basée sur des versements constants et périodiques et sur un taux d'intérêt fixe.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Une annuité est une série de versements constants effectués au fil du temps. Une annuité peut être un prêt (par exemple, un prêt immobilier) ou un placement (par exemple, un plan d’épargne).  
  
 Le `Rate` et `NPer` arguments doivent être calculées à l’aide d’échéances exprimées dans les mêmes unités. Par exemple, si `Rate` est exprimé en mois, `NPer` doit également être exprimé en mois.  
  
 Pour tous les arguments, sortie de trésorerie (par exemple, les dépôts d’économies) est représenté par des nombres négatifs. trésorerie reçu (par exemple, des dividendes) est représenté par des nombres positifs.  
  
   
  
## Examples  
 Cet exemple utilise le `FV` fonction pour retourner la valeur future d’un investissement selon le pourcentage de taux qui sont ajoutées par période (`APR / 12`), le nombre total des paiements (`TotPmts`), le paiement (`Payment`), la valeur actuelle de la placement (`PVal`) et un nombre qui indique si le paiement est effectué au début ou à la fin de la période de paiement (`PayType`). Étant donné que `Payment` représentant, c’est un nombre négatif.  
  
 [!code-vb[VbVbalrMath#22](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#22)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IPmt">
      <MemberSignature Language="C#" Value="public static double IPmt (double Rate, double Per, double NPer, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 IPmt(float64 Rate, float64 Per, float64 NPer, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.IPmt(System.Double,System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function IPmt (Rate As Double, Per As Double, NPer As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member IPmt : double * double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.IPmt (Rate, Per, NPer, PV, FV, Due)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="Per" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">Obligatoire. <see langword="Double" /> indiquant le taux d'intérêt par période. Par exemple, si vous obtenez un prêt à un taux d'intérêt annuel (TIA) de 10 pour cent et que vous effectuez des remboursements mensuels, le taux par échéance est de 0,1/12, soit 0,0083.</param>
        <param name="Per">Obligatoire. <see langword="Double" /> indiquant la période de remboursement dans la plage comprise entre 1 et <c>NPer</c>.</param>
        <param name="NPer">Obligatoire. <see langword="Double" /> indiquant le nombre total d'échéances de l'annuité. Par exemple, si vous effectuez des remboursements mensuels dans le cadre d'un emprunt d'une durée de quatre ans, votre emprunt comporte un total de 48 (4 x 12) échéances.</param>
        <param name="PV">Obligatoire. <see langword="Double" /> indiquant la valeur actuelle, ou valeur du jour, d'une série de paiements ou d'encaissements futurs. Par exemple, lorsque vous empruntez de l'argent pour acheter une voiture, le montant du prêt correspond pour le prêteur à la valeur actuelle des remboursements mensuels que vous allez effectuer pour la voiture.</param>
        <param name="FV">Optionnel. <see langword="Double" /> indiquant la valeur future ou le solde de caisse souhaité au terme du dernier remboursement. Par exemple, la valeur future d'un emprunt est de 0 € car il s'agit de sa valeur après le dernier remboursement. Toutefois, si vous souhaitez économiser 50 000 € sur 18 ans pour les études de votre enfant, ce montant constitue la valeur future. Si cet argument est omis, la position 0 est utilisée par défaut.</param>
        <param name="Due">Optionnel. Objet de type <see cref="T:Microsoft.VisualBasic.DueDate" /> qui spécifie la date d'échéance des paiements. Cet argument doit avoir la valeur <c>DueDate.EndOfPeriod</c> si les paiements sont dus à terme échu ou <c>DueDate.BegOfPeriod</c> si les paiements sont dus à terme à échoir. Si cet argument est omis, la valeur <c>DueDate.EndOfPeriod</c> est utilisée par défaut.</param>
        <summary>Retourne une valeur de type <see langword="Double" /> indiquant les intérêts, pour une période donnée, d'une annuité basée sur des versements constants et périodiques et sur un taux d'intérêt fixe.</summary>
        <returns>Retourne une valeur de type <see langword="Double" /> indiquant les intérêts, pour une période donnée, d'une annuité basée sur des versements constants et périodiques et sur un taux d'intérêt fixe.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Une annuité est une série de versements constants effectués au fil du temps. Une annuité peut être un prêt (par exemple, un prêt immobilier) ou un placement (par exemple, un plan d’épargne).  
  
 Le `Rate` et `NPer` arguments doivent être calculées à l’aide d’échéances exprimées dans les mêmes unités. Par exemple, si `Rate` est exprimé en mois, `NPer` doit également être exprimé en mois.  
  
 Pour tous les arguments, sortie de trésorerie (par exemple, les dépôts d’économies) est représenté par des nombres négatifs. trésorerie reçu (par exemple, des dividendes) est représenté par des nombres positifs.  
  
   
  
## Examples  
 Cet exemple utilise le `IPmt` fonction pour calculer la quantité d’un paiement intérêt lorsque tous les paiements sont de valeur égale. Étant donné sont le taux d’intérêt par période (`APR / 12`), la période de paiement dont vous souhaitez la partie qui vous intéresse (`Period`), le nombre total de paiements (`TotPmts`), la valeur actuelle ou le principal de l’emprunt (`PVal`), le la valeur future du prêt (`FVal`) et un nombre qui indique si le paiement est dû au début ou à la fin de la période de paiement (`PayType`).  
  
 [!code-vb[VbVbalrMath#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Per" /> &lt;= 0 ou <paramref name="Per" /> &gt; <paramref name="NPer" /></exception>
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="IRR">
      <MemberSignature Language="C#" Value="public static double IRR (ref double[] ValueArray, double Guess = 0.1);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 IRR(float64[]&amp; ValueArray, float64 Guess) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.IRR(System.Double[]@,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function IRR (ByRef ValueArray As Double(), Optional Guess As Double = 0.1) As Double" />
      <MemberSignature Language="F#" Value="static member IRR :  * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.IRR (ValueArray, Guess)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ValueArray" Type="System.Double[]" RefType="ref" />
        <Parameter Name="Guess" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="ValueArray">Obligatoire. Tableau de <see langword="Double" /> représentant les valeurs des liquidités. Le tableau doit contenir au moins une valeur négative (un paiement) et une valeur positive (un encaissement).</param>
        <param name="Guess">Optionnel. Objet indiquant la valeur qui devrait être retournée par <see langword="IRR" />. Si cet argument est omis, la valeur <c>Guess</c> 0,1 (10 pour cent) est utilisée par défaut.</param>
        <summary>Retourne une donnée de type <see langword="Double" /> indiquant le taux de rendement interne d'une série de liquidités périodiques (paiements et encaissements).</summary>
        <returns>Retourne une donnée de type <see langword="Double" /> indiquant le taux de rendement interne d'une série de liquidités périodiques (paiements et encaissements).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le taux de rendement interne est le taux d’intérêt reçu pour un investissement comprenant des paiements et encaissements qui se produisent à intervalles réguliers.  
  
 Le `IRR` fonction utilise l’ordre des valeurs dans le tableau pour interpréter l’ordre des paiements et encaissements. Veillez à entrer votre paiement et les valeurs de l’accusé de réception dans l’ordre approprié. Le flux de trésorerie pour chaque période n’a pas besoin être résolu, car il s’agit d’une annuité.  
  
 `IRR` est calculé par itération. En commençant par la valeur de `Guess`, `IRR` parcourt le calcul jusqu'à ce que le résultat soit précis à 0,00001 %. Si `IRR` ne peut pas trouver un résultat après 20 tentatives, elle échoue.  
  
   
  
## Examples  
 Dans cet exemple, le `IRR` fonction retourne le taux de retour pour une série de cinq liquidités contenues dans le tableau interne `Values()`. Le premier élément du tableau est un flux de trésorerie négatif représentant des frais d’établissement. Quatre liquidités restantes représentent des liquidités positives pour les quatre années suivantes. `Guess` est le taux de rendement interne estimé.  
  
 [!code-vb[VbVbalrMath#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Valeurs d’argument de tableau non valides ou <paramref name="Guess" /> &lt;= -1.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.NPV(System.Double,System.Double[]@)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.MIRR(System.Double[]@,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="MIRR">
      <MemberSignature Language="C#" Value="public static double MIRR (ref double[] ValueArray, double FinanceRate, double ReinvestRate);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 MIRR(float64[]&amp; ValueArray, float64 FinanceRate, float64 ReinvestRate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.MIRR(System.Double[]@,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function MIRR (ByRef ValueArray As Double(), FinanceRate As Double, ReinvestRate As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double MIRR(cli::array &lt;double&gt; ^ % ValueArray, double FinanceRate, double ReinvestRate);" />
      <MemberSignature Language="F#" Value="static member MIRR :  * double * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.MIRR (ValueArray, FinanceRate, ReinvestRate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ValueArray" Type="System.Double[]" RefType="ref" />
        <Parameter Name="FinanceRate" Type="System.Double" />
        <Parameter Name="ReinvestRate" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="ValueArray">Obligatoire. Tableau de <see langword="Double" /> représentant les valeurs des liquidités. Le tableau doit contenir au moins une valeur négative (un paiement) et une valeur positive (un encaissement).</param>
        <param name="FinanceRate">Obligatoire. <see langword="Double" /> indiquant le taux d'intérêt payé pour couvrir le coût du financement.</param>
        <param name="ReinvestRate">Obligatoire. <see langword="Double" /> indiquant le taux d'intérêt perçu sur les gains tirés des sommes réinvesties.</param>
        <summary>Retourne une donnée de type <see langword="Double" /> indiquant le taux de rendement interne modifié d'une série de liquidités périodiques (paiements et encaissements).</summary>
        <returns>Retourne une donnée de type <see langword="Double" /> indiquant le taux de rendement interne modifié d'une série de liquidités périodiques (paiements et encaissements).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le taux de rendement interne modifié est le taux de rendement interne lorsque les paiements et encaissements sont financés à des vitesses différentes. Le `MIRR` fonction prend en compte le coût de l’investissement (`FinanceRate`) et le taux d’intérêt perçu sur les sommes réinvesties (`ReinvestRate`).  
  
 Le `FinanceRate` et `ReinvestRatearguments` sont des pourcentages exprimés sous forme de valeurs décimales. Par exemple, 12 pour cent est exprimé sous la forme 0,12.  
  
 Le `MIRR` fonction utilise l’ordre des valeurs dans le tableau pour interpréter l’ordre des paiements et encaissements. Veillez à entrer votre paiement et les valeurs de l’accusé de réception dans l’ordre approprié.  
  
   
  
## Examples  
 Cet exemple utilise le `MIRR` fonction pour retourner le taux de retour pour une série de liquidités contenues dans le tableau interne modifié `Values()`. `LoanAPR` représente l’intérêt de financement et `InvAPR` représente le taux d’intérêt reçu sur le réinvestissement.  
  
 [!code-vb[VbVbalrMath#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Un rang de <paramref name="ValueArray" /> n'est pas égal à 1, <paramref name="FinanceRate" /> = -1 ou <paramref name="ReinvestRate" /> = -1</exception>
        <exception cref="T:System.DivideByZeroException">Une division par zéro s'est produite.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.IRR(System.Double[]@,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.NPV(System.Double,System.Double[]@)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.DivideByZeroException" />
      </Docs>
    </Member>
    <Member MemberName="NPer">
      <MemberSignature Language="C#" Value="public static double NPer (double Rate, double Pmt, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 NPer(float64 Rate, float64 Pmt, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.NPer(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function NPer (Rate As Double, Pmt As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member NPer : double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.NPer (Rate, Pmt, PV, FV, Due)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="Pmt" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">Obligatoire. <see langword="Double" /> indiquant le taux d'intérêt par période. Par exemple, si vous obtenez un prêt à un taux d'intérêt annuel (TIA) de 10 pour cent et que vous effectuez des remboursements mensuels, le taux par échéance est de 0,1/12, soit 0,0083.</param>
        <param name="Pmt">Obligatoire. <see langword="Double" /> indiquant le versement à effectuer à chaque échéance. Les paiements comprennent généralement le capital et les intérêts qui ne sont pas modifiés au cours de l'annuité.</param>
        <param name="PV">Obligatoire. <see langword="Double" /> indiquant la valeur actuelle, ou valeur du jour, d'une série de paiements ou d'encaissements futurs. Par exemple, lorsque vous empruntez de l'argent pour acheter une voiture, le montant du prêt correspond pour le prêteur à la valeur actuelle des remboursements mensuels que vous allez effectuer pour la voiture.</param>
        <param name="FV">Optionnel. <see langword="Double" /> indiquant la valeur future ou le solde de caisse souhaité au terme du dernier remboursement. Par exemple, la valeur future d'un emprunt est de 0 €, car il s'agit de sa valeur après le dernier remboursement. Toutefois, si vous souhaitez économiser 50 000 € sur 18 ans pour les études de votre enfant, ce montant constitue la valeur future. Si cet argument est omis, la position 0 est utilisée par défaut.</param>
        <param name="Due">Optionnel. Objet de type <see cref="T:Microsoft.VisualBasic.DueDate" /> qui spécifie la date d'échéance des paiements. Cet argument doit avoir la valeur <c>DueDate.EndOfPeriod</c> si les paiements sont dus à terme échu ou <c>DueDate.BegOfPeriod</c> si les paiements sont dus à terme à échoir. Si cet argument est omis, la valeur <c>DueDate.EndOfPeriod</c> est utilisée par défaut.</param>
        <summary>Retourne une valeur <see langword="Double" /> spécifiant le nombre d'échéances d'une annuité basée sur des versements constants et périodiques et sur un taux d'intérêt fixe.</summary>
        <returns>Retourne une valeur <see langword="Double" /> spécifiant le nombre d'échéances d'une annuité basée sur des versements constants et périodiques et sur un taux d'intérêt fixe.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Une annuité est une série de versements constants effectués sur une période de temps. Une annuité peut être un prêt (par exemple, un prêt immobilier) ou un placement (par exemple, un plan d’épargne).  
  
 Pour tous les arguments, sortie de trésorerie (par exemple, les dépôts d’économies) est représenté par des nombres négatifs. trésorerie reçu (par exemple, des dividendes) est représenté par des nombres positifs.  
  
   
  
## Examples  
 Cet exemple utilise le `NPer` pour retourner le nombre de périodes au cours de laquelle les paiements doivent être effectués pour rembourser un emprunt dont la valeur est contenue dans `PVal`. Le taux d’intérêt par période de sont également fournis (`APR / 12`), le paiement (`Payment`), la valeur future du prêt (`FVal`) et un nombre qui indique si le paiement est dû au début ou à la fin de la période de paiement (`PayType`).  
  
 [!code-vb[VbVbalrMath#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Rate" /> = 0 et <paramref name="Pmt" /> = 0</exception>
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="NPV">
      <MemberSignature Language="C#" Value="public static double NPV (double Rate, ref double[] ValueArray);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 NPV(float64 Rate, float64[]&amp; ValueArray) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.NPV(System.Double,System.Double[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Function NPV (Rate As Double, ByRef ValueArray As Double()) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double NPV(double Rate, cli::array &lt;double&gt; ^ % ValueArray);" />
      <MemberSignature Language="F#" Value="static member NPV : double *  -&gt; double" Usage="Microsoft.VisualBasic.Financial.NPV (Rate, ValueArray)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="ValueArray" Type="System.Double[]" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="Rate">Obligatoire. <see langword="Double" /> indiquant le taux d'escompte sur la période, exprimé sous la forme d'un nombre décimal.</param>
        <param name="ValueArray">Obligatoire. Tableau de <see langword="Double" /> représentant les valeurs des liquidités. Le tableau doit contenir au moins une valeur négative (un paiement) et une valeur positive (un encaissement).</param>
        <summary>Retourne une valeur de type <see langword="Double" /> indiquant la valeur nette actuelle d'un investissement, calculée en fonction d'une série de liquidités périodiques (paiements et encaissements) et d'un taux d'escompte.</summary>
        <returns>Retourne une valeur de type <see langword="Double" /> indiquant la valeur nette actuelle d'un investissement, calculée en fonction d'une série de liquidités périodiques (paiements et encaissements) et d'un taux d'escompte.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La valeur nette actuelle d’un investissement est la valeur actuelle d’une série de paiements et encaissements future.  
  
 Le `NPV` fonction utilise l’ordre des valeurs dans le tableau pour interpréter l’ordre des paiements et encaissements. Veillez à entrer votre paiement et les valeurs de l’accusé de réception dans l’ordre approprié.  
  
 Le `NPV` investissement commence une période avant la date de la première valeur de flux de trésorerie et se termine à la dernière valeur de flux de trésorerie dans le tableau.  
  
 Le calcul de valeur nette actuelle est basé sur les flux de trésorerie futurs. Si votre premier flux de trésorerie se produit au début de la première période, la première valeur doit être ajoutée à la valeur retournée par `NPV` et ne doit pas être inclus dans les valeurs de flux de trésorerie de `ValueArray`.  
  
 Le `NPV` fonction est similaire à la `PV` (fonction) (valeur actuelle), sauf que le `PV` fonction permet de flux de trésorerie en début ou à la fin ou le début d’une période. Contrairement à la variable `NPV` valeurs de flux de trésorerie, `PV` liquidités doivent être corrigées tout au long de l’investissement.  
  
   
  
## Examples  
 Cet exemple utilise le `NPV` fonction pour retourner la valeur actuelle nette d’une série de liquidités contenues dans le tableau `values()`. La valeur de retournée, stockée dans `FixedRetRate`, représente le taux de rendement interne fixe.  
  
 [!code-vb[VbVbalrMath#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="ValueArray" /> a la valeur <see langword="Nothing" />, rang de <paramref name="ValueArray" /> &lt;&gt; 1 ou <paramref name="Rate" /> = -1</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.IRR(System.Double[]@,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.MIRR(System.Double[]@,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Pmt">
      <MemberSignature Language="C#" Value="public static double Pmt (double Rate, double NPer, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Pmt(float64 Rate, float64 NPer, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.Pmt(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function Pmt (Rate As Double, NPer As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member Pmt : double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.Pmt (Rate, NPer, PV, FV, Due)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">Obligatoire. <see langword="Double" /> indique le taux d'intérêt par période. Par exemple, si vous obtenez un prêt à un taux d'intérêt annuel (TIA) de 10 pour cent et que vous effectuez des remboursements mensuels, le taux par échéance est de 0,1/12, soit 0,0083.</param>
        <param name="NPer">Obligatoire. <see langword="Double" /> indique le nombre total d'échéances de l'annuité. Par exemple, si vous effectuez des remboursements mensuels dans le cadre d'un emprunt d'une durée de quatre ans, votre emprunt comporte un total de 48 (4 x 12) échéances.</param>
        <param name="PV">Obligatoire. <see langword="Double" /> indique la valeur actuelle (ou montant forfaitaire) d'une série de paiements devant être effectués dans le futur. Par exemple, lorsque vous empruntez de l'argent pour acheter une voiture, le montant du prêt correspond pour le prêteur à la valeur actuelle des remboursements mensuels que vous allez effectuer pour la voiture.</param>
        <param name="FV">Optionnel. <see langword="Double" /> indiquant la valeur future ou le solde de caisse souhaité au terme du dernier remboursement. Par exemple, la valeur future d'un emprunt est de 0 €, car il s'agit de sa valeur après le dernier remboursement. Toutefois, si vous souhaitez économiser 50 000 € sur 18 ans pour les études de votre enfant, ce montant constitue la valeur future. Si cet argument est omis, la position 0 est utilisée par défaut.</param>
        <param name="Due">Optionnel. Objet de type <see cref="T:Microsoft.VisualBasic.DueDate" /> qui spécifie la date d'échéance des paiements. Cet argument doit avoir la valeur <c>DueDate.EndOfPeriod</c> si les paiements sont dus à terme échu ou <c>DueDate.BegOfPeriod</c> si les paiements sont dus à terme à échoir. Si cet argument est omis, la valeur <c>DueDate.EndOfPeriod</c> est utilisée par défaut.</param>
        <summary>Retourne une valeur de type <see langword="Double" /> indiquant le montant d'une annuité basée sur des versements constants et périodiques et sur un taux d'intérêt fixe.</summary>
        <returns>Retourne une valeur de type <see langword="Double" /> indiquant le montant d'une annuité basée sur des versements constants et périodiques et sur un taux d'intérêt fixe.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Une annuité est une série de versements constants effectués pendant une période de temps. Une annuité peut être un prêt (par exemple, un prêt immobilier) ou un placement (par exemple, un plan d’épargne).  
  
 Le `Rate` et `NPer` arguments doivent être calculées à l’aide d’échéances exprimées dans les mêmes unités. Par exemple, si `Rate` est exprimé en mois, `NPer` doit également être exprimé en mois.  
  
 Pour tous les arguments, trésorerie (par exemple, les dépôts d’économies) est représenté par des nombres négatifs. trésorerie reçu (par exemple, des dividendes) est représenté par des nombres positifs.  
  
   
  
## Examples  
 Cet exemple utilise le `Pmt` fonction pour retourner le remboursement mensuel d’un prêt pendant une période fixe. Étant donné sont le taux d’intérêt par période (`APR / 12`), le nombre total de paiements (`TotPmts`), la valeur actuelle ou le principal de l’emprunt (`PVal`), la valeur future du prêt (`FVal`) et un nombre qui indique si le échéance au début ou à la fin de la période de paiement `(PayType).`  
  
 [!code-vb[VbVbalrMath#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="NPer" /> = 0.</exception>
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="PPmt">
      <MemberSignature Language="C#" Value="public static double PPmt (double Rate, double Per, double NPer, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 PPmt(float64 Rate, float64 Per, float64 NPer, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.PPmt(System.Double,System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function PPmt (Rate As Double, Per As Double, NPer As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member PPmt : double * double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.PPmt (Rate, Per, NPer, PV, FV, Due)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="Per" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">Obligatoire. <see langword="Double" /> indique le taux d'intérêt par période. Par exemple, si vous obtenez un prêt à un taux d'intérêt annuel (TIA) de 10 pour cent et que vous effectuez des remboursements mensuels, le taux par échéance est de 0,1/12, soit 0,0083.</param>
        <param name="Per">Obligatoire. <see langword="Double" /> indique la période de remboursement dans la plage comprise entre 1 et <c>NPer</c>.</param>
        <param name="NPer">Obligatoire. <see langword="Double" /> indique le nombre total d'échéances de l'annuité. Par exemple, si vous effectuez des remboursements mensuels dans le cadre d'un emprunt d'une durée de quatre ans, votre emprunt comporte un total de 48 (4 x 12) échéances.</param>
        <param name="PV">Obligatoire. <see langword="Double" /> indique la valeur actuelle d'une série de paiements ou recettes futurs. Par exemple, lorsque vous empruntez de l'argent pour acheter une voiture, le montant du prêt correspond pour le prêteur à la valeur actuelle des remboursements mensuels que vous allez effectuer pour la voiture.</param>
        <param name="FV">Optionnel. <see langword="Double" /> indiquant la valeur future ou le solde de caisse souhaité au terme du dernier remboursement. Par exemple, la valeur future d'un emprunt est de 0 €, car il s'agit de sa valeur après le dernier remboursement. Toutefois, si vous souhaitez économiser 50 000 € sur 18 ans pour les études de votre enfant, ce montant constitue la valeur future. Si cet argument est omis, la position 0 est utilisée par défaut.</param>
        <param name="Due">Optionnel. Objet de type <see cref="T:Microsoft.VisualBasic.DueDate" /> qui spécifie la date d'échéance des paiements. Cet argument doit avoir la valeur <c>DueDate.EndOfPeriod</c> si les paiements sont dus à terme échu ou <c>DueDate.BegOfPeriod</c> si les paiements sont dus à terme à échoir. Si cet argument est omis, la valeur <c>DueDate.EndOfPeriod</c> est utilisée par défaut.</param>
        <summary>Retourne une valeur de type <see langword="Double" /> indiquant le remboursement du capital, pour une période donnée, d'une annuité basée sur des versements constants et périodiques et sur un taux d'intérêt fixe.</summary>
        <returns>Retourne une valeur de type <see langword="Double" /> indiquant le remboursement du capital, pour une période donnée, d'une annuité basée sur des versements constants et périodiques et sur un taux d'intérêt fixe.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Une annuité est une série de versements constants effectués sur une période de temps. Une annuité peut être un prêt (par exemple, un prêt immobilier) ou un placement (par exemple, un plan d’épargne).  
  
 Le `Rate` et `NPer` arguments doivent être calculées à l’aide d’échéances exprimées dans les mêmes unités. Par exemple, si `Rate` est exprimé en mois, `NPer` doit également être exprimé en mois.  
  
 Pour tous les arguments, trésorerie (par exemple, les dépôts d’économies) est représenté par des nombres négatifs. trésorerie reçu (par exemple, des dividendes) est représenté par des nombres positifs.  
  
   
  
## Examples  
 Cet exemple utilise le `PPmt` fonction pour calculer la quantité d’un paiement pour une période spécifique est le principal lorsque tous les paiements sont de valeur égale. Étant donné sont le taux d’intérêt par période (`APR / 12`), la période de paiement dont vous souhaitez la partie principale (`Period`), le nombre total de paiements (`TotPmts`), la valeur actuelle ou le principal de l’emprunt (`PVal`), le la valeur future du prêt (`FVal`) et un nombre qui indique si le paiement est dû au début ou à la fin de la période de paiement (`PayType`).  
  
 [!code-vb[VbVbalrMath#24](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Per" /> &lt;=0 ou <paramref name="Per" /> &gt; <paramref name="NPer" />.</exception>
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="PV">
      <MemberSignature Language="C#" Value="public static double PV (double Rate, double NPer, double Pmt, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 PV(float64 Rate, float64 NPer, float64 Pmt, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.PV(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function PV (Rate As Double, NPer As Double, Pmt As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member PV : double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.PV (Rate, NPer, Pmt, FV, Due)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="Pmt" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">Obligatoire. <see langword="Double" /> indique le taux d'intérêt par période. Par exemple, si vous obtenez un prêt à un taux d'intérêt annuel (TIA) de 10 pour cent et que vous effectuez des remboursements mensuels, le taux par échéance est de 0,1/12, soit 0,0083.</param>
        <param name="NPer">Obligatoire. <see langword="Double" /> indique le nombre total d'échéances de l'annuité. Par exemple, si vous effectuez des remboursements mensuels dans le cadre d'un emprunt d'une durée de quatre ans, votre emprunt comporte 48 (4 x 12) échéances.</param>
        <param name="Pmt">Obligatoire. <see langword="Double" /> indique le versement à effectuer à chaque échéance. Les paiements comprennent généralement le capital et les intérêts qui ne sont pas modifiés au cours de l'annuité.</param>
        <param name="FV">Optionnel. <see langword="Double" /> indique la valeur future ou le solde de caisse souhaité au terme du dernier remboursement. Par exemple, la valeur future d'un emprunt est de 0 €, car il s'agit de sa valeur après le dernier remboursement. Toutefois, si vous souhaitez économiser 50 000 € sur 18 ans pour les études de votre enfant, ce montant constitue la valeur future. Si cet argument est omis, la position 0 est utilisée par défaut.</param>
        <param name="Due">Optionnel. Objet de type <see cref="T:Microsoft.VisualBasic.DueDate" /> qui spécifie la date d'échéance des paiements. Cet argument doit avoir la valeur <c>DueDate.EndOfPeriod</c> si les paiements sont dus à terme échu ou <c>DueDate.BegOfPeriod</c> si les paiements sont dus à terme à échoir. Si cet argument est omis, la valeur <c>DueDate.EndOfPeriod</c> est utilisée par défaut.</param>
        <summary>Retourne une valeur de type <see langword="Double" /> indiquant le montant actuel d'une annuité basée sur des échéances futures constantes et périodiques et sur un taux d'intérêt fixe.</summary>
        <returns>Retourne une valeur de type <see langword="Double" /> indiquant le montant actuel d'une annuité basée sur des échéances futures constantes et périodiques et sur un taux d'intérêt fixe.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Une annuité est une série de versements constants effectués sur une période de temps. Une annuité peut être un prêt (par exemple, un prêt immobilier) ou un placement (par exemple, un plan d’épargne).  
  
 Le `Rate` et `NPer` arguments doivent être calculées à l’aide d’échéances exprimées dans les mêmes unités. Par exemple, si `Rate` est exprimé en mois, `NPer` doit également être exprimé en mois.  
  
 Pour tous les arguments, sortie de trésorerie (par exemple, les dépôts d’économies) est représenté par des nombres négatifs. trésorerie reçu (par exemple, des dividendes) est représenté par des nombres positifs.  
  
   
  
## Examples  
 Dans cet exemple, le `PV` fonction retourne la valeur actuelle d’une annuité de 1 000 000 $ qui fournira les 50 000 $ par an pendant 20 ans. Sont spécifiés le taux annuel prévu (`APR`), le nombre total de paiements (`TotPmts`), la quantité de chaque paiement (`YrIncome`), la valeur future totale de l’investissement (`FVal`) et un nombre qui indique si chaque paiement est effectué au début ou à la fin de la période de paiement (`PayType`). Notez que `YrIncome` est un nombre négatif, car il représente la somme payée à partir de l’annuité chaque année.  
  
 [!code-vb[VbVbalrMath#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rate">
      <MemberSignature Language="C#" Value="public static double Rate (double NPer, double Pmt, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod, double Guess = 0.1);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Rate(float64 NPer, float64 Pmt, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due, float64 Guess) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.Rate(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rate (NPer As Double, Pmt As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod, Optional Guess As Double = 0.1) As Double" />
      <MemberSignature Language="F#" Value="static member Rate : double * double * double * double * Microsoft.VisualBasic.DueDate * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.Rate (NPer, Pmt, PV, FV, Due, Guess)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="Pmt" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
        <Parameter Name="Guess" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="NPer">Obligatoire. <see langword="Double" /> indique le nombre total d'échéances de l'annuité. Par exemple, si vous effectuez des remboursements mensuels dans le cadre d'un emprunt d'une durée de quatre ans, votre emprunt comporte un total de 4 * 12 (soit 48) échéances.</param>
        <param name="Pmt">Obligatoire. <see langword="Double" /> indique le versement à effectuer à chaque échéance. Les paiements comprennent généralement le capital et les intérêts qui ne sont pas modifiés au cours de l'annuité.</param>
        <param name="PV">Obligatoire. <see langword="Double" /> indique la valeur actuelle, ou valeur du jour, d'une série de paiements ou d'encaissements futurs. Par exemple, lorsque vous empruntez de l'argent pour acheter une voiture, le montant du prêt correspond pour le prêteur à la valeur actuelle des remboursements mensuels que vous allez effectuer pour la voiture.</param>
        <param name="FV">Optionnel. <see langword="Double" /> indique la valeur future ou le solde de caisse souhaité au terme du dernier remboursement. Par exemple, la valeur future d'un emprunt est de 0 €, car il s'agit de sa valeur après le dernier remboursement. Toutefois, si vous souhaitez économiser 50 000 € sur 18 ans pour les études de votre enfant, ce montant constitue la valeur future. Si cet argument est omis, la position 0 est utilisée par défaut.</param>
        <param name="Due">Optionnel. Objet de type <see cref="T:Microsoft.VisualBasic.DueDate" /> qui spécifie la date d'échéance des paiements. Cet argument doit avoir la valeur <c>DueDate.EndOfPeriod</c> si les paiements sont dus à terme échu ou <c>DueDate.BegOfPeriod</c> si les paiements sont dus à terme à échoir. Si cet argument est omis, la valeur <c>DueDate.EndOfPeriod</c> est utilisée par défaut.</param>
        <param name="Guess">Optionnel. <see langword="Double" /> indiquant la valeur que vous estimez être retournée par <see langword="Rate" />. Si cet argument est omis, la valeur <c>Guess</c> 0,1 (10 pour cent) est utilisée par défaut.</param>
        <summary>Retourne une valeur de type <see langword="Double" /> indiquant le taux d'intérêt par échéance pour une annuité.</summary>
        <returns>Retourne une valeur de type <see langword="Double" /> indiquant le taux d'intérêt par échéance pour une annuité.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Une annuité est une série de versements constants effectués sur une période de temps. Une annuité peut être un prêt (par exemple, un prêt immobilier) ou un placement (par exemple, un plan d’épargne).  
  
 Pour tous les arguments, sortie de trésorerie (par exemple, les dépôts d’économies) est représenté par des nombres négatifs. trésorerie reçu (par exemple, des dividendes) est représenté par des nombres positifs.  
  
 `Rate` est calculé par itération. En commençant par la valeur de `Guess`, `Rate` parcourt le calcul jusqu'à ce que le résultat soit précis à 0,00001 %. Si `Rate` ne peut pas trouver un résultat après 20 tentatives, elle échoue. Si votre estimation est de 10 pour cent et `Rate` échoue, essayez une autre valeur pour `Guess`.  
  
   
  
## Examples  
 Cet exemple utilise le `Rate` (fonction) pour calculer le taux d’intérêt d’un prêt, étant donné le nombre total de paiements (`TotPmts`), le montant du remboursement (`Payment`), la valeur actuelle ou le principal de l’emprunt (`PVal`), l’avenir valeur de l’emprunt (`FVal`), un nombre qui indique si le paiement est dû au début ou à la fin de la période de paiement (`PayType`) et une approximation du taux d’intérêt attendu (`Guess`).  
  
 [!code-vb[VbVbalrMath#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="NPer" /> &lt;= 0.</exception>
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="SLN">
      <MemberSignature Language="C#" Value="public static double SLN (double Cost, double Salvage, double Life);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 SLN(float64 Cost, float64 Salvage, float64 Life) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.SLN(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function SLN (Cost As Double, Salvage As Double, Life As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double SLN(double Cost, double Salvage, double Life);" />
      <MemberSignature Language="F#" Value="static member SLN : double * double * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.SLN (Cost, Salvage, Life)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Cost" Type="System.Double" />
        <Parameter Name="Salvage" Type="System.Double" />
        <Parameter Name="Life" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Cost">Obligatoire. <see langword="Double" /> indiquant le coût initial du bien.</param>
        <param name="Salvage">Obligatoire. <see langword="Double" /> indiquant la valeur du bien à la fin de son cycle de vie.</param>
        <param name="Life">Obligatoire. <see langword="Double" /> indiquant la durée du cycle de vie du bien.</param>
        <summary>Retourne une valeur de type <see langword="Double" /> indiquant l'amortissement linéaire d'un bien pour une période donnée.</summary>
        <returns>Retourne une valeur de type <see langword="Double" /> indiquant l'amortissement linéaire d'un bien pour une période donnée.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La période d’amortissement doit être exprimée dans la même unité que le `Life` argument. Tous les arguments doivent être des nombres positifs.  
  
   
  
## Examples  
 Cet exemple utilise le `SLN` fonction pour retourner l’amortissement linéaire d’un élément multimédia pour une période déterminée du coût initial (`InitCost`), la valeur résiduelle à la fin du cycle de vie de la ressource (`SalvageVal`) et sa durée de l’élément multimédia dans les années (`LifeTime`).  
  
 [!code-vb[VbVbalrMath#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Life" /> = 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.SYD(System.Double,System.Double,System.Double,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.DDB(System.Double,System.Double,System.Double,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="SYD">
      <MemberSignature Language="C#" Value="public static double SYD (double Cost, double Salvage, double Life, double Period);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 SYD(float64 Cost, float64 Salvage, float64 Life, float64 Period) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.SYD(System.Double,System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function SYD (Cost As Double, Salvage As Double, Life As Double, Period As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double SYD(double Cost, double Salvage, double Life, double Period);" />
      <MemberSignature Language="F#" Value="static member SYD : double * double * double * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.SYD (Cost, Salvage, Life, Period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Cost" Type="System.Double" />
        <Parameter Name="Salvage" Type="System.Double" />
        <Parameter Name="Life" Type="System.Double" />
        <Parameter Name="Period" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Cost">Obligatoire. <see langword="Double" /> indiquant le coût initial du bien.</param>
        <param name="Salvage">Obligatoire. <see langword="Double" /> indiquant la valeur du bien à la fin de son cycle de vie.</param>
        <param name="Life">Obligatoire. <see langword="Double" /> indiquant la durée du cycle de vie du bien.</param>
        <param name="Period">Obligatoire. <see langword="Double" /> indiquant la période sur laquelle l'amortissement du bien est calculé.</param>
        <summary>Retourne une valeur de type <see langword="Double" /> indiquant l'amortissement global d'un bien sur une période donnée.</summary>
        <returns>Retourne une valeur de type <see langword="Double" /> indiquant l'amortissement global d'un bien sur une période donnée.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `Life` et `Period` arguments doivent être exprimées dans les mêmes unités. Par exemple, si `Life` est exprimé en mois, `Period` doit également être exprimé en mois. Tous les arguments doivent être des nombres positifs.  
  
   
  
## Examples  
 Cet exemple utilise le `SYD` fonction pour retourner l’amortissement linéaire d’un élément multimédia pour une période donnée du coût initial (`InitCost`), la valeur résiduelle à la fin du cycle de vie de la ressource (`SalvageVal`) et la durée de vie totale de l’élément multimédia années (`LifeTime`).  
  
 [!code-vb[VbVbalrMath#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Salvage" /> &lt; 0, <paramref name="Period" /> &gt; <paramref name="Life" /> or <paramref name="Period" /> &lt;=0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.DDB(System.Double,System.Double,System.Double,System.Double,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.SLN(System.Double,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
  </Members>
</Type>