<Type Name="DateAndTime" FullName="Microsoft.VisualBasic.DateAndTime">
  <Metadata><Meta Name="ms.openlocfilehash" Value="deadd67a892db7c9d1d1d3605adc1e0e3852ba22" /><Meta Name="ms.sourcegitcommit" Value="8e213bb5e6801f6e29861ba72664978ad00e34fa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="02/18/2019" /><Meta Name="ms.locfileid" Value="56354791" /></Metadata><TypeSignature Language="C#" Value="public sealed class DateAndTime" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DateAndTime extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.DateAndTime" />
  <TypeSignature Language="VB.NET" Value="Public Module DateAndTime" />
  <TypeSignature Language="C++ CLI" Value="public ref class DateAndTime sealed" />
  <TypeSignature Language="F#" Value="type DateAndTime = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Le module <see langword="DateAndTime" /> contient les procédures et propriétés utilisées pour les opérations de date et d'heure.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce module prend en charge les mots clés du langage Visual Basic et les membres de bibliothèque Runtime qui obtiennent la date actuelle ou l’heure, effectuent des calculs de date, retournent une date ou heure, définissent la date ou l’heure ou la durée d’un processus.  
  
   
  
## Examples  
 Cet exemple utilise le `Today` propriété pour retourner la date système actuelle.  
  
```vb  
Dim thisDate As Date  
thisDate = Today   
```  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/dates-and-times-summary.md">Liste des dates et heures</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md">Mots clés (Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">Membres de la bibliothèque d’exécution Visual Basic</related>
  </Docs>
  <Members>
    <MemberGroup MemberName="DateAdd">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Retourne une valeur <see langword="Date" /> contenant une valeur de date et d'heure auxquelles un intervalle de temps spécifié a été ajouté.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DateAdd">
      <MemberSignature Language="C#" Value="public static DateTime DateAdd (Microsoft.VisualBasic.DateInterval Interval, double Number, DateTime DateValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime DateAdd(valuetype Microsoft.VisualBasic.DateInterval Interval, float64 Number, valuetype System.DateTime DateValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DateAdd(Microsoft.VisualBasic.DateInterval,System.Double,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function DateAdd (Interval As DateInterval, Number As Double, DateValue As DateTime) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime DateAdd(Microsoft::VisualBasic::DateInterval Interval, double Number, DateTime DateValue);" />
      <MemberSignature Language="F#" Value="static member DateAdd : Microsoft.VisualBasic.DateInterval * double * DateTime -&gt; DateTime" Usage="Microsoft.VisualBasic.DateAndTime.DateAdd (Interval, Number, DateValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Interval" Type="Microsoft.VisualBasic.DateInterval" />
        <Parameter Name="Number" Type="System.Double" />
        <Parameter Name="DateValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="Interval">Obligatoire. Valeur d’énumération <see cref="T:Microsoft.VisualBasic.DateInterval" /> ou expression de chaîne représentant l’intervalle de temps que vous souhaitez ajouter.</param>
        <param name="Number">Obligatoire. Expression à virgule flottante représentant le nombre d'intervalles à ajouter. Peut être positif (pour obtenir des valeurs date/heure à venir) ou négatif (pour obtenir des valeurs date/heure passées). Elle peut contenir une partie décimale lorsque <paramref name="Interval" /> spécifie des heures, minutes ou secondes. Pour les autres valeurs de <paramref name="Interval" />, toute partie décimale de <paramref name="Number" /> est ignorée.</param>
        <param name="DateValue">Obligatoire. Expression représentant la date et l'heure auxquelles l'intervalle doit être ajouté. <paramref name="DateValue" /> proprement dit n'est pas modifié dans le programme appelant.</param>
        <summary>Retourne une valeur contenant une valeur de date et d’heure auxquelles un intervalle de temps spécifié a été ajouté.</summary>
        <returns>Valeur contenant une valeur de date et d’heure auxquelles un intervalle de temps spécifié a été ajouté.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez utiliser le `DateAdd` (fonction) pour ajouter ou soustraire un intervalle de temps spécifié à partir d’une date. Par exemple, vous pouvez calculer une date à 30 jours dès aujourd'hui ou une heure 45 minutes avant maintenant.  
  
 Pour ajouter des jours à `DateValue`, vous pouvez utiliser `DateInterval.Day`, `DateInterval.DayOfYear`, ou `DateInterval.Weekday`. Ces valeurs sont traitées comme équivalentes car `DayOfYear` et `Weekday` ne sont pas des intervalles de temps significatif.  
  
 Le `DateAdd` fonction ne retourne jamais une date non valide. Si nécessaire, la partie jour de la date résultante est ajustée vers le bas pour le dernier jour du mois qui en résulte dans l’année qui en résulte. L’exemple suivant ajoute un mois au 31 janvier :  
  
```vb  
Dim NextMonth As Date = DateAdd(DateInterval.Month, 1, #1/31/1995#)  
```  
  
 Dans cet exemple, `DateAdd` retourne `#2/28/1995#`, et non `#2/31/1995#`. Si `DateValue` est `#1/31/1996#`, elle retourne `#2/29/1996#` car 1996 est une année bissextile.  
  
> [!NOTE]
>  `DateAdd` utilise le paramètre de calendrier actuel à partir de la <xref:System.Globalization.CultureInfo.CurrentCulture%2A> propriété de la <xref:System.Globalization.CultureInfo> classe dans le <xref:System.Globalization> espace de noms. La valeur par défaut <xref:System.Globalization.CultureInfo.CurrentCulture%2A> valeurs sont déterminées par **le panneau de configuration** paramètres.  
  
 Dans la mesure où chaque `Date` valeur est prise en charge par un <xref:System.DateTime> structure, ses méthodes offrent des options supplémentaires pour ajouter des intervalles de temps. Par exemple, vous pouvez ajouter un nombre fractionnaire de jours, arrondi à la milliseconde la plus proche, à un `Date` variable comme suit :  
  
```vb  
Dim NextTime As Date = Now        ' Current date and time.  
NextTime = NextTime.AddDays(3.4)  ' Increment by 3 2/5 days.  
```  
  
 Le `Interval` argument peut prendre les paramètres suivants.  
  
|Valeur d’énumération|Chaîne|Unité d’intervalle de temps à ajouter.|  
|-----------------------|------------|----------------------------------|  
|`DateInterval.Day`|d|Jour ; tronqué à la valeur intégrale|  
|`DateInterval.DayOfYear`|o|Jour ; tronqué à la valeur intégrale|  
|`DateInterval.Hour`|h|Heure ; arrondi à la milliseconde la plus proche|  
|`DateInterval.Minute`|n|Minute ; arrondi à la milliseconde la plus proche|  
|`DateInterval.Month`|m|Mois ; tronqué à la valeur intégrale|  
|`DateInterval.Quarter`|q|Trimestre ; tronqué à la valeur intégrale|  
|`DateInterval.Second`|s|Seconde ; arrondi à la milliseconde la plus proche|  
|`DateInterval.Weekday`|s|Jour ; tronqué à la valeur intégrale|  
|`DateInterval.WeekOfYear`|ww|Semaine ; tronqué à la valeur intégrale|  
|`DateInterval.Year`|yyyy|Année ; tronqué à la valeur intégrale|  
  
   
  
## Examples  
 Cet exemple prend une date et à l’aide de la `DateAdd` de fonction, affiche une date correspondante à un nombre spécifié de mois à l’avenir.  
  
 [!code-vb[VbVbalrFunctions#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><paramref name="DateValue" /> ne peut pas être converti en <see langword="Date" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Interval" /> n'est pas valide.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">La date calculée est antérieure à 00:00:00 le 1er janvier de l'année 1 ou ultérieure à 23:59:59 le 31 décembre 9999.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateDiff" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Liste des types de données (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="DateAdd">
      <MemberSignature Language="C#" Value="public static DateTime DateAdd (string Interval, double Number, object DateValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime DateAdd(string Interval, float64 Number, object DateValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DateAdd(System.String,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DateAdd (Interval As String, Number As Double, DateValue As Object) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime DateAdd(System::String ^ Interval, double Number, System::Object ^ DateValue);" />
      <MemberSignature Language="F#" Value="static member DateAdd : string * double * obj -&gt; DateTime" Usage="Microsoft.VisualBasic.DateAndTime.DateAdd (Interval, Number, DateValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Interval" Type="System.String" />
        <Parameter Name="Number" Type="System.Double" />
        <Parameter Name="DateValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Interval">Obligatoire. Valeur d’énumération <see cref="T:Microsoft.VisualBasic.DateInterval" /> ou expression de chaîne représentant l’intervalle de temps que vous souhaitez ajouter.</param>
        <param name="Number">Obligatoire. Expression à virgule flottante représentant le nombre d'intervalles à ajouter. <paramref name="Number" /> peut être positif (pour obtenir des valeurs date/heure à venir) ou négatif (pour représenter des valeurs date/heure passées). Elle peut contenir une partie décimale lorsque <paramref name="Interval" /> spécifie des heures, minutes ou secondes. Pour les autres valeurs de <paramref name="Interval" />, toute partie décimale de <paramref name="Number" /> est ignorée.</param>
        <param name="DateValue">Obligatoire. Expression représentant la date et l'heure auxquelles l'intervalle doit être ajouté. <paramref name="DateValue" /> proprement dit n'est pas modifié dans le programme appelant.</param>
        <summary>Retourne une valeur contenant une valeur de date et d’heure auxquelles un intervalle de temps spécifié a été ajouté.</summary>
        <returns>Valeur contenant une valeur de date et d’heure auxquelles un intervalle de temps spécifié a été ajouté.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez utiliser le `DateAdd` (fonction) pour ajouter ou soustraire un intervalle de temps spécifié à partir d’une date. Par exemple, vous pouvez calculer une date à 30 jours dès aujourd'hui ou une heure 45 minutes avant maintenant.  
  
 Pour ajouter des jours à `DateValue`, vous pouvez utiliser `DateInterval.Day`, `DateInterval.DayOfYear`, ou `DateInterval.Weekday`. Ces valeurs sont traitées comme équivalentes car `DayOfYear` et `Weekday` ne sont pas des intervalles de temps significatif.  
  
 Le `DateAdd` fonction ne retourne jamais une date non valide. Si nécessaire, la partie jour de la date résultante est ajustée vers le bas pour le dernier jour du mois qui en résulte dans l’année qui en résulte. L’exemple suivant ajoute un mois au 31 janvier :  
  
```vb  
Dim NextMonth As Date = DateAdd(DateInterval.Month, 1, #1/31/1995#)  
```  
  
 Dans cet exemple, `DateAdd` retourne `#2/28/1995#`, et non `#2/31/1995#`. Si `DateValue` est `#1/31/1996#`, elle retourne `#2/29/1996#` car 1996 est une année bissextile.  
  
> [!NOTE]
>  `DateAdd` utilise le paramètre de calendrier actuel à partir de la <xref:System.Globalization.CultureInfo.CurrentCulture%2A> propriété de la <xref:System.Globalization.CultureInfo> classe dans le <xref:System.Globalization> espace de noms. La valeur par défaut <xref:System.Globalization.CultureInfo.CurrentCulture%2A> valeurs sont déterminées par **le panneau de configuration** paramètres.  
  
 Dans la mesure où chaque `Date` valeur est prise en charge par un <xref:System.DateTime> structure, ses méthodes offrent des options supplémentaires pour ajouter des intervalles de temps. Par exemple, vous pouvez ajouter un nombre fractionnaire de jours, arrondi à la milliseconde la plus proche, à un `Date` variable comme suit :  
  
```vb  
Dim NextTime As Date = Now        ' Current date and time.  
NextTime = NextTime.AddDays(3.4)  ' Increment by 3 2/5 days.  
```  
  
 Le `Interval` argument peut prendre les paramètres suivants.  
  
|Valeur d’énumération|Chaîne|Unité d’intervalle de temps à ajouter.|  
|-----------------------|------------|----------------------------------|  
|`DateInterval.Day`|d|Jour ; tronqué à la valeur intégrale|  
|`DateInterval.DayOfYear`|o|Jour ; tronqué à la valeur intégrale|  
|`DateInterval.Hour`|h|Heure ; arrondi à la milliseconde la plus proche|  
|`DateInterval.Minute`|n|Minute ; arrondi à la milliseconde la plus proche|  
|`DateInterval.Month`|m|Mois ; tronqué à la valeur intégrale|  
|`DateInterval.Quarter`|q|Trimestre ; tronqué à la valeur intégrale|  
|`DateInterval.Second`|s|Seconde ; arrondi à la milliseconde la plus proche|  
|`DateInterval.Weekday`|s|Jour ; tronqué à la valeur intégrale|  
|`DateInterval.WeekOfYear`|ww|Semaine ; tronqué à la valeur intégrale|  
|`DateInterval.Year`|yyyy|Année ; tronqué à la valeur intégrale|  
  
   
  
## Examples  
 Cet exemple prend une date et à l’aide de la `DateAdd` de fonction, affiche une date correspondante à un nombre spécifié de mois à l’avenir.  
  
 [!code-vb[VbVbalrFunctions#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><paramref name="DateValue" /> ne peut pas être converti en <see langword="Date" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Interval" /> n'est pas valide.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">La date calculée est antérieure à 00:00:00 le 1er janvier de l'année 1 ou ultérieure à 23:59:59 le 31 décembre 9999.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateDiff" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Liste des types de données (Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="DateDiff">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Retourne une valeur spécifiant le nombre d’intervalles de temps entre deux valeurs <see langword="Date" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DateDiff">
      <MemberSignature Language="C#" Value="public static long DateDiff (Microsoft.VisualBasic.DateInterval Interval, DateTime Date1, DateTime Date2, Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 DateDiff(valuetype Microsoft.VisualBasic.DateInterval Interval, valuetype System.DateTime Date1, valuetype System.DateTime Date2, valuetype Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek, valuetype Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DateDiff(Microsoft.VisualBasic.DateInterval,System.DateTime,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
      <MemberSignature Language="VB.NET" Value="Public Function DateDiff (Interval As DateInterval, Date1 As DateTime, Date2 As DateTime, Optional DayOfWeek As FirstDayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Optional WeekOfYear As FirstWeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1) As Long" />
      <MemberSignature Language="F#" Value="static member DateDiff : Microsoft.VisualBasic.DateInterval * DateTime * DateTime * Microsoft.VisualBasic.FirstDayOfWeek * Microsoft.VisualBasic.FirstWeekOfYear -&gt; int64" Usage="Microsoft.VisualBasic.DateAndTime.DateDiff (Interval, Date1, Date2, DayOfWeek, WeekOfYear)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Interval" Type="Microsoft.VisualBasic.DateInterval" />
        <Parameter Name="Date1" Type="System.DateTime" />
        <Parameter Name="Date2" Type="System.DateTime" />
        <Parameter Name="DayOfWeek" Type="Microsoft.VisualBasic.FirstDayOfWeek" />
        <Parameter Name="WeekOfYear" Type="Microsoft.VisualBasic.FirstWeekOfYear" />
      </Parameters>
      <Docs>
        <param name="Interval">Obligatoire. Valeur d’énumération <see cref="T:Microsoft.VisualBasic.DateInterval" /> ou expression de chaîne représentant l’intervalle de temps que vous souhaitez utiliser comme unité de différence entre <paramref name="Date1" /> et <paramref name="Date2" />.</param>
        <param name="Date1">Obligatoire. La première valeur de date/d'heure que vous souhaitez utiliser dans le calcul.</param>
        <param name="Date2">Obligatoire. La deuxième valeur de date/d'heure que vous souhaitez utiliser dans le calcul.</param>
        <param name="DayOfWeek">Optionnel. Valeur choisie dans l'énumération <see cref="T:Microsoft.VisualBasic.FirstDayOfWeek" /> qui spécifie le premier jour de la semaine. En l'absence de spécification, <see cref="F:Microsoft.VisualBasic.FirstDayOfWeek.Sunday" /> est utilisé.</param>
        <param name="WeekOfYear">Optionnel. Valeur choisie dans l'énumération <see cref="T:Microsoft.VisualBasic.FirstWeekOfYear" /> qui spécifie la première semaine de l'année. En l'absence de spécification, <see cref="F:Microsoft.VisualBasic.FirstWeekOfYear.Jan1" /> est utilisé.</param>
        <summary>Retourne une valeur longue spécifiant le nombre d’intervalles de temps entre deux valeurs <see langword="Date" />.</summary>
        <returns>Valeur longue spécifiant le nombre d’intervalles de temps entre deux valeurs <see langword="Date" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez utiliser le `DateDiff` fonction pour déterminer le nombre d’intervalles spécifiés entre deux valeurs de date/heure. Par exemple, vous pouvez utiliser `DateDiff` pour calculer le nombre de jours entre deux dates ou le nombre de semaines entre aujourd'hui et la fin de l’année.  
  
## <a name="behavior"></a>Comportement  
  
-   **Traitement des paramètres.** `DateDiff` Soustrait la valeur de `Date1` à partir de la valeur de `Date2` pour produire la différence. Aucune valeur n’est modifiée dans le programme appelant.  
  
-   **Valeurs de retour.** Étant donné que `Date1` et `Date2` sont de la `Date` type de données, ils contiennent les valeurs de date et heure précises en graduations de 100 nanosecondes sur l’horloge système. Toutefois, `DateDiff` retourne toujours le nombre d’intervalles de temps comme un `Long` valeur.  
  
     Si `Date1` représente une date et une heure qu’ultérieures `Date2`, `DateDiff` retourne un nombre négatif.  
  
-   **Intervalles de jours.** Si `Interval` a la valeur `DateInterval.DayOfYear`, il est traité identique `DateInterval.Day`, car `DayOfYear` n’est pas une unité appropriée pour un intervalle de temps.  
  
-   **Intervalles de la semaine.** Si `Interval` a la valeur `DateInterval.WeekOfYear`, la valeur de retour représente le nombre de semaines entre le premier jour de la semaine contenant `Date1` et le premier jour de la semaine contenant `Date2`. L’exemple suivant montre comment cela génère des résultats différents de `DateInterval.Weekday`.  
  
     [!code-vb[VbVbalrFunctions#60](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#60)]  
  
     Dans l’exemple précédent, `DateDiff` retourne 0 pour `wD` parce que la différence entre les deux dates est inférieure à sept jours, mais retourne 1 pour `wY` , car il existe une différence de sept jours entre les premiers jours du calendrier respectif semaines.  
  
-   **Intervalles plus grands.** Si `Interval` a la valeur `DateInterval.Year`, la valeur de retour est calculée exclusivement à partir des parties année de `Date1` et `Date2`. De même, la valeur de retour pour `DateInterval.Month` est calculée uniquement à partir des parties année et mois des arguments et pour `DateInterval.Quarter` à partir des trimestres contenant les deux dates.  
  
     Par exemple, lorsque vous comparez le 31 décembre au 1er janvier de l’année suivante, `DateDiff` retourne 1 pour `DateInterval.Year`, `DateInterval.Quarter`, ou `DateInterval.Month`, bien qu’au maximum un seul jour écoulé.  
  
     Pour les cultures telles que le japonais qui ont plusieurs ères, la `DateDiff` méthode ne retourne pas de différence en années Si la différence s’étend sur deux ou plusieurs ères. Au lieu de cela, vous pouvez calculer la différence entre les valeurs retournées par la <xref:System.DateTime.Year%2A> propriété, comme indiqué dans l’exemple suivant : `date2.Year - date1.Year`.  
  
-   **Autres intervalles.** Dans la mesure où chaque `Date` valeur est prise en charge par un <xref:System.DateTime> structure, ses méthodes offrent des options supplémentaires dans la recherche d’intervalles de temps. Par exemple, vous pouvez utiliser la `Subtract` méthode dans une de ses formes surchargées : <xref:System.DateTime.Subtract%2A?displayProperty=nameWithType> soustrait un <xref:System.TimeSpan> à partir d’un `Date` variable à retourner un autre `Date` valeur, et <xref:System.DateTime.Subtract%2A?displayProperty=nameWithType> soustrait un `Date` valeur pour retourner un <xref:System.TimeSpan>. Vous pouvez de temps un processus pour savoir comment en millisecondes, comme le montre l’exemple suivant.  
  
     [!code-vb[VbVbalrFunctions#61](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#61)]  
  
 Le `Interval` argument peut prendre les paramètres suivants.  
  
|Valeur d’énumération|Valeur de chaîne|Unité de différence de temps|  
|-----------------------|------------------|-----------------------------|  
|`DateInterval.Day`|"d"|Jour|  
|`DateInterval.DayOfYear`|"y"|Jour|  
|`DateInterval.Hour`|"h"|Heure|  
|`DateInterval.Minute`|"n"|Minute|  
|`DateInterval.Month`|"m"|Mois|  
|`DateInterval.Quarter`|"q"|Trimestre|  
|`DateInterval.Second`|"s"|Seconde|  
|`DateInterval.Weekday`|"w"|Semaine|  
|`DateInterval.WeekOfYear`|« ss »|Semaine du calendrier|  
|`DateInterval.Year`|"yyyy"|Année|  
  
 Le `DayOfWeek` argument peut prendre les paramètres suivants.  
  
|Valeur d’énumération|Value|Description |  
|-----------------------|-----------|-----------------|  
|`FirstDayOfWeek.System`|0|Premier jour de semaine spécifié dans les paramètres système|  
|`FirstDayOfWeek.Sunday`|1|Dimanche (par défaut)|  
|`FirstDayOfWeek.Monday`|2|Lundi (conformément à la norme ISO 8601, section 3.17)|  
|`FirstDayOfWeek.Tuesday`|3|Mardi|  
|`FirstDayOfWeek.Wednesday`|4|Le mercredi|  
|`FirstDayOfWeek.Thursday`|5|Jeudi|  
|`FirstDayOfWeek.Friday`|6|Le vendredi|  
|`FirstDayOfWeek.Saturday`|7|Saturday|  
  
 Le `WeekOfYear` argument peut prendre les paramètres suivants.  
  
|Valeur d’énumération|Value|Description |  
|-----------------------|-----------|-----------------|  
|`FirstWeekOfYear.System`|0|Première semaine de l’année spécifiée dans les paramètres système|  
|`FirstWeekOfYear.Jan1`|1|Semaine comprenant le 1er janvier (valeur par défaut)|  
|`FirstWeekOfYear.FirstFourDays`|2|Semaine comportant au moins quatre jours dans la nouvelle année (conformément à la norme ISO 8601, section 3.17)|  
|`FirstWeekOfYear.FirstFullWeek`|3|Première semaine complète de la nouvelle année|  
  
   
  
## Examples  
 Cet exemple utilise le `DateDiff` (fonction) pour afficher le nombre de jours entre une date donnée et aujourd'hui.  
  
 [!code-vb[VbVbalrFunctions#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Date1" />, <paramref name="Date2" />, or <paramref name="DayofWeek" /> est hors limites.</exception>
        <exception cref="T:System.InvalidCastException"><paramref name="Date1" /> ou <paramref name="Date2" /> est d'un type non valide.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateAdd" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.TimeSpan" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Liste des types de données (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="DateDiff">
      <MemberSignature Language="C#" Value="public static long DateDiff (string Interval, object Date1, object Date2, Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 DateDiff(string Interval, object Date1, object Date2, valuetype Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek, valuetype Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DateDiff(System.String,System.Object,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
      <MemberSignature Language="VB.NET" Value="Public Function DateDiff (Interval As String, Date1 As Object, Date2 As Object, Optional DayOfWeek As FirstDayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Optional WeekOfYear As FirstWeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1) As Long" />
      <MemberSignature Language="F#" Value="static member DateDiff : string * obj * obj * Microsoft.VisualBasic.FirstDayOfWeek * Microsoft.VisualBasic.FirstWeekOfYear -&gt; int64" Usage="Microsoft.VisualBasic.DateAndTime.DateDiff (Interval, Date1, Date2, DayOfWeek, WeekOfYear)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Interval" Type="System.String" />
        <Parameter Name="Date1" Type="System.Object" />
        <Parameter Name="Date2" Type="System.Object" />
        <Parameter Name="DayOfWeek" Type="Microsoft.VisualBasic.FirstDayOfWeek" />
        <Parameter Name="WeekOfYear" Type="Microsoft.VisualBasic.FirstWeekOfYear" />
      </Parameters>
      <Docs>
        <param name="Interval">Obligatoire. Valeur d’énumération <see cref="T:Microsoft.VisualBasic.DateInterval" /> ou expression de chaîne représentant l’intervalle de temps que vous souhaitez utiliser comme unité de différence entre <paramref name="Date1" /> et <paramref name="Date2" />.</param>
        <param name="Date1">Obligatoire. La première valeur de date/d'heure que vous souhaitez utiliser dans le calcul.</param>
        <param name="Date2">Obligatoire. La deuxième valeur de date/d'heure que vous souhaitez utiliser dans le calcul.</param>
        <param name="DayOfWeek">Optionnel. Valeur choisie dans l'énumération <see cref="T:Microsoft.VisualBasic.FirstDayOfWeek" /> qui spécifie le premier jour de la semaine. En l'absence de spécification, <see cref="F:Microsoft.VisualBasic.FirstDayOfWeek.Sunday" /> est utilisé.</param>
        <param name="WeekOfYear">Optionnel. Valeur choisie dans l'énumération <see cref="T:Microsoft.VisualBasic.FirstWeekOfYear" /> qui spécifie la première semaine de l'année. En l'absence de spécification, <see cref="F:Microsoft.VisualBasic.FirstWeekOfYear.Jan1" /> est utilisé.</param>
        <summary>Retourne une valeur longue spécifiant le nombre d’intervalles de temps entre deux valeurs <see langword="Date" />.</summary>
        <returns>Valeur longue spécifiant le nombre d’intervalles de temps entre deux valeurs <see langword="Date" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez utiliser le `DateDiff` fonction pour déterminer le nombre d’intervalles spécifiés entre deux valeurs de date/heure. Par exemple, vous pouvez utiliser `DateDiff` pour calculer le nombre de jours entre deux dates ou le nombre de semaines entre aujourd'hui et la fin de l’année.  
  
## <a name="behavior"></a>Comportement  
  
-   **Traitement des paramètres.** `DateDiff` Soustrait la valeur de `Date1` à partir de la valeur de `Date2` pour produire la différence. Aucune valeur n’est modifiée dans le programme appelant.  
  
-   **Valeurs de retour.** Étant donné que `Date1` et `Date2` sont de la `Date` type de données, ils contiennent les valeurs de date et heure précises en graduations de 100 nanosecondes sur l’horloge système. Toutefois, `DateDiff` retourne toujours le nombre d’intervalles de temps comme un `Long` valeur.  
  
     Si `Date1` représente une date et une heure qu’ultérieures `Date2`, `DateDiff` retourne un nombre négatif.  
  
-   **Intervalles de jours.** Si `Interval` a la valeur `DateInterval.DayOfYear`, il est traité identique `DateInterval.Day`, car `DayOfYear` n’est pas une unité appropriée pour un intervalle de temps.  
  
-   **Intervalles de la semaine.** Si `Interval` a la valeur `DateInterval.WeekOfYear`, la valeur de retour représente le nombre de semaines entre le premier jour de la semaine contenant `Date1` et le premier jour de la semaine contenant `Date2`. L’exemple suivant montre comment cela génère des résultats différents de `DateInterval.Weekday`.  
  
     [!code-vb[VbVbalrFunctions#60](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#60)]  
  
     Dans l’exemple précédent, `DateDiff` retourne 0 pour `wD` parce que la différence entre les deux dates est inférieure à sept jours, mais retourne 1 pour `wY` , car il existe une différence de sept jours entre les premiers jours du calendrier respectif semaines.  
  
-   **Intervalles plus grands.** Si `Interval` a la valeur `DateInterval.Year`, la valeur de retour est calculée exclusivement à partir des parties année de `Date1` et `Date2`. De même, la valeur de retour pour `DateInterval.Month` est calculée uniquement à partir des parties année et mois des arguments et pour `DateInterval.Quarter` à partir des trimestres contenant les deux dates.  
  
     Par exemple, lorsque vous comparez le 31 décembre au 1er janvier de l’année suivante, `DateDiff` retourne 1 pour `DateInterval.Year`, `DateInterval.Quarter`, ou `DateInterval.Month`, bien qu’au maximum un seul jour écoulé.  
  
     Pour les cultures telles que le japonais qui ont plusieurs ères, la `DateDiff` méthode ne retourne pas de différence en années Si la différence s’étend sur deux ou plusieurs ères. Au lieu de cela, vous pouvez calculer la différence entre les valeurs retournées par la <xref:System.DateTime.Year%2A> propriété, comme indiqué dans l’exemple suivant : `date2.Year - date1.Year`.  
  
-   **Autres intervalles.** Dans la mesure où chaque `Date` valeur est prise en charge par un <xref:System.DateTime> structure, ses méthodes offrent des options supplémentaires dans la recherche d’intervalles de temps. Par exemple, vous pouvez utiliser la `Subtract` méthode dans une de ses formes surchargées : <xref:System.DateTime.Subtract%2A?displayProperty=nameWithType> soustrait un <xref:System.TimeSpan> à partir d’un `Date` variable à retourner un autre `Date` valeur, et <xref:System.DateTime.Subtract%2A?displayProperty=nameWithType> soustrait un `Date` valeur pour retourner un <xref:System.TimeSpan>. Vous pouvez de temps un processus pour savoir comment en millisecondes, comme le montre l’exemple suivant.  
  
     [!code-vb[VbVbalrFunctions#61](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#61)]  
  
 Le `Interval` argument peut prendre les paramètres suivants.  
  
|Valeur d’énumération|Valeur de chaîne|Unité de différence de temps|  
|-----------------------|------------------|-----------------------------|  
|`DateInterval.Day`|"d"|Jour|  
|`DateInterval.DayOfYear`|"y"|Jour|  
|`DateInterval.Hour`|"h"|Heure|  
|`DateInterval.Minute`|"n"|Minute|  
|`DateInterval.Month`|"m"|Mois|  
|`DateInterval.Quarter`|"q"|Trimestre|  
|`DateInterval.Second`|"s"|Seconde|  
|`DateInterval.Weekday`|"w"|Semaine|  
|`DateInterval.WeekOfYear`|« ss »|Semaine du calendrier|  
|`DateInterval.Year`|"yyyy"|Année|  
  
 Le `DayOfWeek` argument peut prendre les paramètres suivants.  
  
|Valeur d’énumération|Value|Description |  
|-----------------------|-----------|-----------------|  
|`FirstDayOfWeek.System`|0|Premier jour de semaine spécifié dans les paramètres système|  
|`FirstDayOfWeek.Sunday`|1|Dimanche (par défaut)|  
|`FirstDayOfWeek.Monday`|2|Lundi (conformément à la norme ISO 8601, section 3.17)|  
|`FirstDayOfWeek.Tuesday`|3|Mardi|  
|`FirstDayOfWeek.Wednesday`|4|Le mercredi|  
|`FirstDayOfWeek.Thursday`|5|Jeudi|  
|`FirstDayOfWeek.Friday`|6|Le vendredi|  
|`FirstDayOfWeek.Saturday`|7|Saturday|  
  
 Le `WeekOfYear` argument peut prendre les paramètres suivants.  
  
|Valeur d’énumération|Value|Description |  
|-----------------------|-----------|-----------------|  
|`FirstWeekOfYear.System`|0|Première semaine de l’année spécifiée dans les paramètres système|  
|`FirstWeekOfYear.Jan1`|1|Semaine comprenant le 1er janvier (valeur par défaut)|  
|`FirstWeekOfYear.FirstFourDays`|2|Semaine comportant au moins quatre jours dans la nouvelle année (conformément à la norme ISO 8601, section 3.17)|  
|`FirstWeekOfYear.FirstFullWeek`|3|Première semaine complète de la nouvelle année|  
  
   
  
## Examples  
 Cet exemple utilise le `DateDiff` (fonction) pour afficher le nombre de jours entre une date donnée et aujourd'hui.  
  
 [!code-vb[VbVbalrFunctions#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Date1" />, <paramref name="Date2" />, or <paramref name="DayofWeek" /> est hors limites.</exception>
        <exception cref="T:System.InvalidCastException"><paramref name="Date1" /> ou <paramref name="Date2" /> est d'un type non valide.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateAdd" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.TimeSpan" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Liste des types de données (Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="DatePart">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Retourne une valeur entière contenant le composant spécifié d’une valeur <see langword="Date" /> donnée.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DatePart">
      <MemberSignature Language="C#" Value="public static int DatePart (Microsoft.VisualBasic.DateInterval Interval, DateTime DateValue, Microsoft.VisualBasic.FirstDayOfWeek FirstDayOfWeekValue = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Microsoft.VisualBasic.FirstWeekOfYear FirstWeekOfYearValue = Microsoft.VisualBasic.FirstWeekOfYear.Jan1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 DatePart(valuetype Microsoft.VisualBasic.DateInterval Interval, valuetype System.DateTime DateValue, valuetype Microsoft.VisualBasic.FirstDayOfWeek FirstDayOfWeekValue, valuetype Microsoft.VisualBasic.FirstWeekOfYear FirstWeekOfYearValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DatePart(Microsoft.VisualBasic.DateInterval,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
      <MemberSignature Language="VB.NET" Value="Public Function DatePart (Interval As DateInterval, DateValue As DateTime, Optional FirstDayOfWeekValue As FirstDayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Optional FirstWeekOfYearValue As FirstWeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1) As Integer" />
      <MemberSignature Language="F#" Value="static member DatePart : Microsoft.VisualBasic.DateInterval * DateTime * Microsoft.VisualBasic.FirstDayOfWeek * Microsoft.VisualBasic.FirstWeekOfYear -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.DatePart (Interval, DateValue, FirstDayOfWeekValue, FirstWeekOfYearValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Interval" Type="Microsoft.VisualBasic.DateInterval" />
        <Parameter Name="DateValue" Type="System.DateTime" />
        <Parameter Name="FirstDayOfWeekValue" Type="Microsoft.VisualBasic.FirstDayOfWeek" />
        <Parameter Name="FirstWeekOfYearValue" Type="Microsoft.VisualBasic.FirstWeekOfYear" />
      </Parameters>
      <Docs>
        <param name="Interval">Obligatoire. Valeur d’énumération <see cref="T:Microsoft.VisualBasic.DateInterval" /> ou expression de chaîne représentant la partie de la valeur de date/heure que vous souhaitez retourner.</param>
        <param name="DateValue">Obligatoire. Valeur <see langword="Date" /> que vous souhaitez évaluer.</param>
        <param name="FirstDayOfWeekValue">Optionnel. Valeur choisie dans l'énumération <see cref="T:Microsoft.VisualBasic.FirstDayOfWeek" /> qui spécifie le premier jour de la semaine. En l'absence de spécification, <see cref="F:Microsoft.VisualBasic.FirstDayOfWeek.Sunday" /> est utilisé.</param>
        <param name="FirstWeekOfYearValue">Optionnel. Valeur choisie dans l'énumération <see cref="T:Microsoft.VisualBasic.FirstWeekOfYear" /> qui spécifie la première semaine de l'année. En l'absence de spécification, <see cref="F:Microsoft.VisualBasic.FirstWeekOfYear.Jan1" /> est utilisé.</param>
        <summary>Retourne une valeur entière contenant le composant spécifié d’une valeur <see langword="Date" /> donnée.</summary>
        <returns>Valeur entière contenant le composant spécifié d’une valeur <see langword="Date" /> donnée.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez utiliser le `DatePart` fonction à évaluer une valeur date/heure et retourner un composant spécifique. Par exemple, vous pouvez utiliser `DatePart` pour calculer le jour de la semaine ou l’heure actuelle.  
  
 Si vous choisissez `DateInterval.Weekday` pour le `Interval` argument, la valeur retournée est cohérente avec les valeurs de la `FirstDayOfWeek` énumération. Si vous choisissez `DateInterval.WeekOfYear`, `DatePart` utilise le <xref:System.Globalization.Calendar> et <xref:System.Globalization.CultureInfo> classes de le <xref:System.Globalization> déterminer vos paramètres actuels de l’espace de noms.  
  
 Le `FirstDayOfWeekValue` argument affecte les calculs qui utilisent le `DateInterval.Weekday` et `DateInterval.WeekOfYear` `Interval` paramètres. Le `FirstWeekOfYearValue` argument affecte les calculs qui spécifient `DateInterval.WeekOfYear` pour `Interval`.  
  
 Dans la mesure où chaque `Date` valeur est prise en charge par un <xref:System.DateTime> structure, ses méthodes offrent des options supplémentaires lors de l’extraction de parties de date/heure. Par exemple, vous pouvez obtenir la valeur de date complète d’une `Date` variable, avec la valeur d’heure définie sur minuit, comme suit :  
  
```vb  
Dim CurrDatTim As Date = Now   ' Current date and time.  
Dim LastMidnight As Date = CurrDatTim.Date   ' At midnight.  
```  
  
 Le `Interval` argument peut prendre les paramètres suivants.  
  
|Valeur d’énumération|Chaîne|Partie de la valeur de date/heure à retourner|  
|-----------------------|------------|----------------------------------------|  
|`DateInterval.Day`|d|Jour du mois (1 à 31)|  
|`DateInterval.DayOfYear`|o|Jour de l’année (1 à 366)|  
|`DateInterval.Hour`|h|Heure|  
|`DateInterval.Minute`|n|Minute|  
|`DateInterval.Month`|m|Mois|  
|`DateInterval.Quarter`|q|Trimestre|  
|`DateInterval.Second`|s|Seconde|  
|`DateInterval.Weekday`|s|Jour de la semaine (1 à 7)|  
|`DateInterval.WeekOfYear`|ww|Semaine de l’année (1 à 53)|  
|`DateInterval.Year`|yyyy|Année|  
  
 Le `FirstDayOfWeekValue` argument peut prendre les paramètres suivants.  
  
|Valeur d’énumération|Value|Description |  
|-----------------------|-----------|-----------------|  
|`FirstDayOfWeek.System`|0|Premier jour de semaine spécifié dans les paramètres système|  
|`FirstDayOfWeek.Sunday`|1|Dimanche (par défaut)|  
|`FirstDayOfWeek.Monday`|2|Lundi (conformément à la norme ISO 8601, section 3.17)|  
|`FirstDayOfWeek.Tuesday`|3|Mardi|  
|`FirstDayOfWeek.Wednesday`|4|Le mercredi|  
|`FirstDayOfWeek.Thursday`|5|Jeudi|  
|`FirstDayOfWeek.Friday`|6|Le vendredi|  
|`FirstDayOfWeek.Saturday`|7|Saturday|  
  
 Le `FirstWeekOfYearValue` argument peut prendre les paramètres suivants.  
  
|Valeur d’énumération|Value|Description |  
|-----------------------|-----------|-----------------|  
|`FirstWeekOfYear.System`|0|Première semaine de l’année spécifiée dans les paramètres système|  
|`FirstWeekOfYear.Jan1`|1|Semaine comprenant le 1er janvier (valeur par défaut)|  
|`FirstWeekOfYear.FirstFourDays`|2|Semaine comportant au moins quatre jours dans la nouvelle année (conformément à la norme ISO 8601, section 3.17)|  
|`FirstWeekOfYear.FirstFullWeek`|3|Première semaine complète de la nouvelle année|  
  
   
  
## Examples  
 Cet exemple prend une date et à l’aide de la `DatePart` de fonction, affiche le trimestre de l’année dans laquelle elle se produit.  
  
 [!code-vb[VbVbalrFunctions#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#27)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Interval" /> n'est pas valide.</exception>
        <exception cref="T:System.InvalidCastException"><paramref name="DateValue" /> ne peut pas être converti en <see langword="Date" />.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateAdd" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateDiff" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="N:System" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Liste des types de données (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="DatePart">
      <MemberSignature Language="C#" Value="public static int DatePart (string Interval, object DateValue, Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 DatePart(string Interval, object DateValue, valuetype Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek, valuetype Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DatePart(System.String,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
      <MemberSignature Language="VB.NET" Value="Public Function DatePart (Interval As String, DateValue As Object, Optional DayOfWeek As FirstDayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Optional WeekOfYear As FirstWeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1) As Integer" />
      <MemberSignature Language="F#" Value="static member DatePart : string * obj * Microsoft.VisualBasic.FirstDayOfWeek * Microsoft.VisualBasic.FirstWeekOfYear -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.DatePart (Interval, DateValue, DayOfWeek, WeekOfYear)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Interval" Type="System.String" />
        <Parameter Name="DateValue" Type="System.Object" />
        <Parameter Name="DayOfWeek" Type="Microsoft.VisualBasic.FirstDayOfWeek" />
        <Parameter Name="WeekOfYear" Type="Microsoft.VisualBasic.FirstWeekOfYear" />
      </Parameters>
      <Docs>
        <param name="Interval">Obligatoire. Valeur d’énumération <see cref="T:Microsoft.VisualBasic.DateInterval" /> ou expression de chaîne représentant la partie de la valeur de date/heure que vous souhaitez retourner.</param>
        <param name="DateValue">Obligatoire. Valeur <see langword="Date" /> que vous souhaitez évaluer.</param>
        <param name="DayOfWeek">Optionnel. Valeur choisie dans l'énumération <see cref="T:Microsoft.VisualBasic.FirstDayOfWeek" /> qui spécifie le premier jour de la semaine. En l'absence de spécification, <see cref="F:Microsoft.VisualBasic.FirstDayOfWeek.Sunday" /> est utilisé.</param>
        <param name="WeekOfYear">Optionnel. Valeur choisie dans l'énumération <see cref="T:Microsoft.VisualBasic.FirstWeekOfYear" /> qui spécifie la première semaine de l'année. En l'absence de spécification, <see cref="F:Microsoft.VisualBasic.FirstWeekOfYear.Jan1" /> est utilisé.</param>
        <summary>Retourne une valeur contenant le composant spécifié d’une valeur <see langword="Date" /> donnée.</summary>
        <returns>Valeur entière contenant le composant spécifié d’une valeur <see langword="Date" /> donnée.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez utiliser le `DatePart` fonction à évaluer une valeur date/heure et retourner un composant spécifique. Par exemple, vous pouvez utiliser `DatePart` pour calculer le jour de la semaine ou l’heure actuelle.  
  
 Si vous choisissez `DateInterval.Weekday` pour le `Interval` argument, la valeur retournée est cohérente avec les valeurs de la `FirstDayOfWeek` énumération. Si vous choisissez `DateInterval.WeekOfYear`, `DatePart` utilise le <xref:System.Globalization.Calendar> et <xref:System.Globalization.CultureInfo> classes de le <xref:System.Globalization> déterminer vos paramètres actuels de l’espace de noms.  
  
 Le `FirstDayOfWeekValue` argument affecte les calculs qui utilisent le `DateInterval.Weekday` et `DateInterval.WeekOfYear` `Interval` paramètres. Le `FirstWeekOfYearValue` argument affecte les calculs qui spécifient `DateInterval.WeekOfYear` pour `Interval`.  
  
 Dans la mesure où chaque `Date` valeur est prise en charge par un <xref:System.DateTime> structure, ses méthodes offrent des options supplémentaires lors de l’extraction de parties de date/heure. Par exemple, vous pouvez obtenir la valeur de date complète d’une `Date` variable, avec la valeur d’heure définie sur minuit, comme suit :  
  
```vb  
Dim CurrDatTim As Date = Now   ' Current date and time.  
Dim LastMidnight As Date = CurrDatTim.Date   ' At midnight.  
```  
  
 Le `Interval` argument peut prendre les paramètres suivants.  
  
|Valeur d’énumération|Chaîne|Partie de la valeur de date/heure à retourner|  
|-----------------------|------------|----------------------------------------|  
|`DateInterval.Day`|d|Jour du mois (1 à 31)|  
|`DateInterval.DayOfYear`|o|Jour de l’année (1 à 366)|  
|`DateInterval.Hour`|h|Heure|  
|`DateInterval.Minute`|n|Minute|  
|`DateInterval.Month`|m|Mois|  
|`DateInterval.Quarter`|q|Trimestre|  
|`DateInterval.Second`|s|Seconde|  
|`DateInterval.Weekday`|s|Jour de la semaine (1 à 7)|  
|`DateInterval.WeekOfYear`|ww|Semaine de l’année (1 à 53)|  
|`DateInterval.Year`|yyyy|Année|  
  
 Le `FirstDayOfWeekValue` argument peut prendre les paramètres suivants.  
  
|Valeur d’énumération|Value|Description |  
|-----------------------|-----------|-----------------|  
|`FirstDayOfWeek.System`|0|Premier jour de semaine spécifié dans les paramètres système|  
|`FirstDayOfWeek.Sunday`|1|Dimanche (par défaut)|  
|`FirstDayOfWeek.Monday`|2|Lundi (conformément à la norme ISO 8601, section 3.17)|  
|`FirstDayOfWeek.Tuesday`|3|Mardi|  
|`FirstDayOfWeek.Wednesday`|4|Le mercredi|  
|`FirstDayOfWeek.Thursday`|5|Jeudi|  
|`FirstDayOfWeek.Friday`|6|Le vendredi|  
|`FirstDayOfWeek.Saturday`|7|Saturday|  
  
 Le `FirstWeekOfYearValue` argument peut prendre les paramètres suivants.  
  
|Valeur d’énumération|Value|Description |  
|-----------------------|-----------|-----------------|  
|`FirstWeekOfYear.System`|0|Première semaine de l’année spécifiée dans les paramètres système|  
|`FirstWeekOfYear.Jan1`|1|Semaine comprenant le 1er janvier (valeur par défaut)|  
|`FirstWeekOfYear.FirstFourDays`|2|Semaine comportant au moins quatre jours dans la nouvelle année (conformément à la norme ISO 8601, section 3.17)|  
|`FirstWeekOfYear.FirstFullWeek`|3|Première semaine complète de la nouvelle année|  
  
   
  
## Examples  
 Cet exemple prend une date et à l’aide de la `DatePart` de fonction, affiche le trimestre de l’année dans laquelle elle se produit.  
  
 [!code-vb[VbVbalrFunctions#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#27)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Interval" /> n'est pas valide.</exception>
        <exception cref="T:System.InvalidCastException"><paramref name="DateValue" /> ne peut pas être converti en <see langword="Date" />.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateAdd" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateDiff" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="N:System" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Liste des types de données (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="DateSerial">
      <MemberSignature Language="C#" Value="public static DateTime DateSerial (int Year, int Month, int Day);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime DateSerial(int32 Year, int32 Month, int32 Day) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DateSerial(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function DateSerial (Year As Integer, Month As Integer, Day As Integer) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime DateSerial(int Year, int Month, int Day);" />
      <MemberSignature Language="F#" Value="static member DateSerial : int * int * int -&gt; DateTime" Usage="Microsoft.VisualBasic.DateAndTime.DateSerial (Year, Month, Day)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Year" Type="System.Int32" />
        <Parameter Name="Month" Type="System.Int32" />
        <Parameter Name="Day" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Year">Obligatoire. Expression entière comprise entre 1 et 9999. Toutefois, les valeurs inférieures à cette plage sont également acceptées. Si <paramref name="Year" /> à une valeur entre 0 et 99, celle-ci est interprétée comme étant comprise entre 1930 et 2029, comme expliqué dans la section « Notes » ci-après. Si <paramref name="Year" /> est inférieure à 1, elle est soustraite de l'année actuelle.</param>
        <param name="Month">Obligatoire. Expression entière comprise entre 1 et 12. Cependant, les valeurs non comprises dans cette plage sont également acceptées. La valeur de <paramref name="Month" /> est décalée de 1 et appliquée au mois de janvier de l'année calculée. En d'autres termes, (<paramref name="Month" /> - 1) est ajouté à janvier. L'année est recalculée si nécessaire. Les résultats suivants illustrent cet effet : 
Si <paramref name="Month" /> a la valeur 1, le résultat est le mois de janvier de l'année calculée.  
  
Si <paramref name="Month" /> a la valeur 0, le résultat est décembre de l'année précédente.  
  
Si <paramref name="Month" /> a la valeur -1, le résultat est novembre de l'année précédente.  
  
Si <paramref name="Month" /> a la valeur 13, le résultat est le mois de janvier de l'année suivante.</param>
        <param name="Day">Obligatoire. Expression entière comprise entre 1 et 31. Cependant, les valeurs non comprises dans cette plage sont également acceptées. La valeur de <paramref name="Day" /> est décalée de 1 et appliquée au premier jour du mois calculé. En d'autres termes, (<paramref name="Day" /> - 1) est ajouté au premier du mois. Le mois et l'année sont recalculés si nécessaire. Les résultats suivants illustrent cet effet : 
Si <paramref name="Day" /> a la valeur 1, le résultat est le premier jour du mois calculé.  
  
Si <paramref name="Day" /> a la valeur 0, le résultat est le dernier jour du mois précédent.  
  
Si <paramref name="Day" /> a la valeur -1, le résultat est l'avant-dernier jour du mois précédent.  
  
Si <paramref name="Day" /> est ultérieur à la fin du mois en cours, le résultat est le jour correspondant du mois suivant. Par exemple, si <paramref name="Month" /> a la valeur 4 et <paramref name="Day" /> la valeur 31, le résultat est le 1er mai.</param>
        <summary>Retourne une valeur <see langword="Date" /> représentant une année, un mois et un jour spécifiés, l'indication d'heure ayant la valeur minuit (00:00:00).</summary>
        <returns>Valeur <see langword="Date" /> représentant une année, un mois et un jour spécifiés, l’indication d’heure ayant la valeur minuit (00:00:00).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sous Windows 98 ou Windows 2000, les années à deux chiffres pour le `Year` argument sont interprétés en fonction des paramètres de l’ordinateur défini par l’utilisateur. Les paramètres par défaut sont que les valeurs de 0 à 29 sont interprétées comme les années 2000-2029, et entre 30 et 99 sont interprétées comme les années 1930 1999. Pour tous les autres `Year` arguments, une année à quatre chiffres d’utilisation ; par exemple, 1924.  
  
 Les versions antérieures de Windows interprètent les années à deux chiffres selon les valeurs par défaut décrites précédemment. Pour être sûr que la fonction retourne la valeur appropriée, utilisez un à quatre chiffres `Year`.  
  
 L’exemple suivant montre la négative, zéro et les valeurs d’argument positif. Ici, le `DateSerial` fonction renvoie une `Date` représentant le jour précédant le premier jour du mois de mars de l’année 10 ans avant l’année en cours ; en d’autres termes, le dernier jour de février il y a dix ans.  
  
```vb  
Dim EndFeb As Date = DateSerial(-10, 3, 0)  
```  
  
 Si `Month` ou `Day` dépasse la plage normale, il est appliqué à l’unité supérieure comme il convient. Par exemple, si vous spécifiez 32 jours, elle est évaluée comme un mois et d’un à quatre jours, selon la valeur de `Month`. Si `Year` est supérieur à 9999, ou si un argument est en dehors de la plage 2,147,483,648 et 2 147 483 647, une <xref:System.ArgumentException> erreur se produit. Si la date spécifiée par les trois arguments est antérieure à 00:00:00 le 1er janvier de l’année 1 ou ultérieure à 23:59:59 le 31 décembre 9999, une <xref:System.ArgumentOutOfRangeException> erreur se produit.  
  
 Le `Date` type de données inclut des composants heure. `DateSerial` définit toutes les 0, donc la valeur retournée représente le début du jour calculé.  
  
 Dans la mesure où chaque `Date` valeur est prise en charge par un <xref:System.DateTime> structure, ses méthodes offrent des options supplémentaires pour assembler une `Date` valeur. Par exemple, vous pouvez utiliser l’une des <xref:System.DateTime.%23ctor%2A> constructeurs pour remplir un `Date` variable à l’aide de la combinaison de composants souhaitée. L’exemple suivant définit `NewDateTime` à 6 mai 1978 à un dixième de seconde avant 8 h 30 le matin :  
  
```vb  
Dim NewDateTime As Date = New Date(1978, 5, 6, 8, 29, 59, 900)  
```  
  
   
  
## Examples  
 Cet exemple utilise le `DateSerial` fonction pour retourner la date de l’année spécifiée, le mois et le jour.  
  
 [!code-vb[VbVbalrFunctions#28](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#28)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateValue(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.TimeSerial(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.TimeValue(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="N:System" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Liste des types de données (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="DateString">
      <MemberSignature Language="C#" Value="public static string DateString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property string DateString" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.DateAndTime.DateString" />
      <MemberSignature Language="VB.NET" Value="Public Property DateString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ DateString { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DateString : string with get, set" Usage="Microsoft.VisualBasic.DateAndTime.DateString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Retourne ou définit une valeur de chaîne représentant la date actuelle indiquée par votre système.</summary>
        <value>Retourne ou définit une valeur de chaîne représentant la date actuelle indiquée par votre système.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `DateString` Retourne la date système au format MM-jj-aaaa, qui utilise le nom de mois abrégé. Les formats acceptés pour la date sont M-d-yyyy, M-d-y, j/aaaa et j/y. Cela est vrai pour tous les paramètres régionaux système, à l’exception de celles qui utilisent un jeu de caractères de deux octets (DBCS). Si les paramètres régionaux système utilisent un jeu de caractères de deux octets, `DateString` retourne la date système au format AAAA-MM-JJ. Les paramètres régionaux système sont définie à l’aide de la **horloge, langue et région** élément **le panneau de configuration**.  
  
 **Remarque** le `DateString` propriété retourne la date système uniquement au format AAAA-MM-jj pour les `zh` (chinois simplifié), `ko` (coréen), et `ja` des paramètres régionaux système (japonais) si vous exécutez Visual Basic dans Silverlight.  
  
 Pour obtenir ou définir l’heure système actuelle comme un `String`, utilisez le <xref:Microsoft.VisualBasic.DateAndTime.TimeString%2A> propriété.  
  
 Pour obtenir la date ou l’heure du système actuels dans le format de vos paramètres régionaux, ou dans un format personnalisé, fournissez la <xref:Microsoft.VisualBasic.DateAndTime.Now%2A> propriété le <xref:Microsoft.VisualBasic.Strings.Format%2A> function, en spécifiant un format de date/heure prédéfini ou défini par l’utilisateur. Cela est illustré par l'exemple suivant.  
  
```vb  
MsgBox("The formatted date is " & Format(Now, "dddd, d MMM yyyy"))  
```  
  
 Pour accéder à la date système actuelle comme un `Date`, utilisez le <xref:Microsoft.VisualBasic.DateAndTime.Today%2A> propriété.  
  
> [!IMPORTANT]
>  Définition de la date ou heure système nécessite une autorisation de code non managé, qui peut affecter son exécution dans les situations de confiance partielle. Pour plus d’informations, consultez <xref:System.Security.Permissions.SecurityPermission> et [autorisations d’accès de Code](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).  
  
   
  
## Examples  
 L’exemple suivant utilise le `DateString` propriété pour afficher la date système actuelle.  
  
 [!code-vb[VbVbalrDateProperties#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrDateProperties/VB/Module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">Format non valide utilisé pour définir la valeur de <see cref="T:Microsoft.VisualBasic.DateAndTime.DateString" />.</exception>
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.TimeString" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Today" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="DateValue">
      <MemberSignature Language="C#" Value="public static DateTime DateValue (string StringDate);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime DateValue(string StringDate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DateValue(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DateValue (StringDate As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime DateValue(System::String ^ StringDate);" />
      <MemberSignature Language="F#" Value="static member DateValue : string -&gt; DateTime" Usage="Microsoft.VisualBasic.DateAndTime.DateValue StringDate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="StringDate" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="StringDate">Obligatoire. Expression de chaîne représentant une valeur de date/heure comprise entre 00:00:00 le 1er janvier de l’an 1 et 23:59:59 le 31 décembre 9999.</param>
        <summary>Retourne une valeur <see langword="Date" /> contenant l'indication de date représentée par une chaîne, l'indication d'heure ayant la valeur minuit (00:00:00).</summary>
        <returns>Valeur <see langword="Date" /> contenant l’indication de date représentée par une chaîne, l’indication d’heure ayant la valeur minuit (00:00:00).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si `StringDate` comprend uniquement des nombres de 1 à 12 séparés par des séparateurs de date valide, `DateValue` reconnaît l’ordre mois, jour et année selon le format de Date courte spécifié pour votre système. `DateValue` utilise le paramètre de calendrier actuel à partir de la <xref:System.Globalization.CultureInfo.CurrentCulture%2A> propriété de la <xref:System.Globalization.CultureInfo> classe dans le <xref:System.Globalization> espace de noms. La valeur par défaut <xref:System.Globalization.CultureInfo.CurrentCulture%2A> valeurs sont déterminées par **le panneau de configuration** paramètres. Vous pouvez remplacer le format de Date courte en définissant le <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A> propriété de la <xref:System.Globalization.DateTimeFormatInfo> classe dans le <xref:System.Globalization> espace de noms.  
  
 `DateValue` reconnaît les noms de mois sous forme longue, abrégée et numérique. Par exemple, en plus de 30/12/1991 et 12/30/91, `DateValue` reconnaît le 30 décembre 1991 et le 30 décembre 1991.  
  
 Si la partie année de `StringDate` est omis, `DateValue` utilise l’année en cours à partir de la date de votre ordinateur.  
  
 Si le `StringDate` argument inclut des informations de temps, `DateValue` ne l’inclut pas dans la valeur retournée. Toutefois, si `StringDate` inclut des informations d’heure non valide, tel que « 89 : 98 », un <xref:System.InvalidCastException> erreur se produit.  
  
   
  
## Examples  
 Cet exemple utilise le `DateValue` fonction pour convertir une chaîne en date. Vous pouvez également utiliser des littéraux de date pour attribuer directement une date à une `Object` ou `Date` variable, par exemple, `oldDate = #2/12/69#`.  
  
 [!code-vb[VbVbalrFunctions#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><paramref name="StringDate" /> comprend une indication d'heure non valide.</exception>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateSerial(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.TimeSerial(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.TimeValue(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="T:System.DateTime" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Liste des types de données (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Day">
      <MemberSignature Language="C#" Value="public static int Day (DateTime DateValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Day(valuetype System.DateTime DateValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Day (DateValue As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Day(DateTime DateValue);" />
      <MemberSignature Language="F#" Value="static member Day : DateTime -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Day DateValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="DateValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="DateValue">Obligatoire. Valeur <see langword="Date" /> de laquelle vous souhaitez extraire le jour.</param>
        <summary>Retourne une valeur entière comprise entre 1 et 31 représentant le jour du mois.</summary>
        <returns>Valeur entière comprise entre 1 et 31 représentant le jour du mois.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si vous utilisez le `Day` (fonction), vous devrez peut-être qualifier avec le `Microsoft.VisualBasic` espace de noms, car le <xref:System.Windows.Forms> espace de noms définit <xref:System.Windows.Forms.Day> en tant qu’énumération. L’exemple suivant montre comment la qualification `Day` résout cette ambiguïté :  
  
```vb  
Dim thisDay As Integer = Microsoft.VisualBasic.DateAndTime.Day(Now)  
```  
  
 Vous pouvez également obtenir le jour du mois en appelant `DatePart` et en spécifiant `DateInterval.Day` pour le *intervalle* argument.  
  
   
  
## Examples  
 L’exemple suivant utilise le `Day` fonction pour obtenir le jour du mois à partir d’une date spécifiée. Dans l’environnement de développement, le littéral de date s’affiche dans le format de date courte (par exemple, « 02/12/1969 ») à l’aide des paramètres régionaux de votre code.  
  
 [!code-vb[VbVbalrFunctions#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#30)]  
  
 `Day` est qualifiée de façon à établir une distinction le <xref:System.Windows.Forms.Day?displayProperty=nameWithType> énumération.  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
    <Member MemberName="Hour">
      <MemberSignature Language="C#" Value="public static int Hour (DateTime TimeValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Hour(valuetype System.DateTime TimeValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hour (TimeValue As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Hour(DateTime TimeValue);" />
      <MemberSignature Language="F#" Value="static member Hour : DateTime -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Hour TimeValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="TimeValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="TimeValue">Obligatoire. Valeur <see langword="Date" /> de laquelle vous souhaitez extraire l’heure.</param>
        <summary>Retourne une valeur entière comprise entre 0 et 23 représentant l’heure du jour.</summary>
        <returns>Valeur entière comprise entre 0 et 23 représentant l’heure du jour.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez également obtenir l’heure de la journée en appelant `DatePart` et en spécifiant `DateInterval.Hour` pour le `Interval` argument.  
  
   
  
## Examples  
 Cet exemple utilise le `Hour` fonction pour obtenir l’heure à partir d’une heure spécifiée. Dans l’environnement de développement, le littéral d’heure s’affiche au format abrégé à l’aide des paramètres régionaux de votre code.  
  
 [!code-vb[VbVbalrFunctions#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="N:System" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
    <Member MemberName="Minute">
      <MemberSignature Language="C#" Value="public static int Minute (DateTime TimeValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Minute(valuetype System.DateTime TimeValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Minute (TimeValue As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Minute(DateTime TimeValue);" />
      <MemberSignature Language="F#" Value="static member Minute : DateTime -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Minute TimeValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="TimeValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="TimeValue">Obligatoire. Valeur <see langword="Date" /> de laquelle vous souhaitez extraire la minute.</param>
        <summary>Retourne une valeur entière comprise entre 0 et 59 représentant la minute de l’heure.</summary>
        <returns>Valeur entière comprise entre 0 et 59 représentant la minute de l’heure.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez également obtenir la minute de l’heure en appelant `DatePart` et en spécifiant `DateInterval.Minute` pour le `Interval` argument.  
  
   
  
## Examples  
 Cet exemple utilise le `Minute` fonction pour obtenir la minute de l’heure à partir d’une heure spécifiée. Dans l’environnement de développement, le littéral d’heure s’affiche au format abrégé à l’aide des paramètres régionaux de votre code.  
  
 [!code-vb[VbVbalrFunctions#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="N:System" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
    <Member MemberName="Month">
      <MemberSignature Language="C#" Value="public static int Month (DateTime DateValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Month(valuetype System.DateTime DateValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Month (DateValue As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Month(DateTime DateValue);" />
      <MemberSignature Language="F#" Value="static member Month : DateTime -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Month DateValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="DateValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="DateValue">Obligatoire. Valeur <see langword="Date" /> de laquelle vous souhaitez extraire le mois.</param>
        <summary>Retourne une valeur entière comprise entre 1 et 12 représentant le mois de l’année.</summary>
        <returns>Valeur entière comprise entre 1 et 12 représentant le mois de l’année.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez également obtenir le mois de l’année en appelant `DatePart` et en spécifiant `DateInterval.Month` pour le `Interval` argument.  
  
   
  
## Examples  
 Cet exemple utilise le `Month` fonction pour obtenir le mois à partir d’une date spécifiée. Dans l’environnement de développement, le littéral date est affiché en format abrégé à l’aide des paramètres régionaux de votre code.  
  
 [!code-vb[VbVbalrFunctions#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#43)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="N:System" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
    <Member MemberName="MonthName">
      <MemberSignature Language="C#" Value="public static string MonthName (int Month, bool Abbreviate = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static string MonthName(int32 Month, bool Abbreviate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.MonthName(System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function MonthName (Month As Integer, Optional Abbreviate As Boolean = false) As String" />
      <MemberSignature Language="F#" Value="static member MonthName : int * bool -&gt; string" Usage="Microsoft.VisualBasic.DateAndTime.MonthName (Month, Abbreviate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Month" Type="System.Int32" />
        <Parameter Name="Abbreviate" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Month">Obligatoire. Désignation numérique du mois, entre 1 et 13 ; 1 représente janvier et 12, décembre. Vous pouvez utiliser la valeur 13 avec un calendrier de 13 mois. Si votre système utilise un calendrier de 12 mois et si la valeur de <paramref name="Month" /> est 13, <c>MonthName</c> retourne une chaîne vide.</param>
        <param name="Abbreviate">Optionnel. <see langword="True" /> pour abréger le nom du mois ; sinon, <see langword="False" />. La valeur par défaut est <see langword="False" />.</param>
        <summary>Retourne une valeur de chaîne contenant le nom du mois spécifié.</summary>
        <returns>Valeur de chaîne contenant le nom du mois spécifié.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La chaîne retournée par `MonthName` dépend non seulement sur les arguments d’entrée, mais également le **Options régionales** paramètres spécifiés dans le Windows **le panneau de configuration**.  
  
> [!NOTE]
>  `MonthName` utilise le paramètre de calendrier actuel à partir de la <xref:System.Globalization.CultureInfo.CurrentCulture%2A> propriété de la <xref:System.Globalization.CultureInfo> classe dans le <xref:System.Globalization> espace de noms. La valeur par défaut <xref:System.Globalization.CultureInfo.CurrentCulture%2A> valeurs sont déterminées par **le panneau de configuration** paramètres.  
  
   
  
## Examples  
 Cet exemple utilise le `MonthName` fonction permettant de déterminer le nom du mois, par l’entier spécifié. La valeur booléenne déterminera si le nom complet (`False`) ou le nom abrégé (`True`) s’affiche.  
  
 [!code-vb[VbVbalrFunctions#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#44)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Month" /> est inférieur à 1 ou supérieur à 13.</exception>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.WeekdayName(System.Int32,System.Boolean,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="N:System" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="Now">
      <MemberSignature Language="C#" Value="public static DateTime Now { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime Now" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.DateAndTime.Now" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Now As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime Now { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.Now : DateTime" Usage="Microsoft.VisualBasic.DateAndTime.Now" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Retourne une valeur contenant la date et l’heure en cours indiquées par votre système.</summary>
        <value>La date et heure actuelles en fonction de votre système.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour définir la date système, utilisez le <xref:Microsoft.VisualBasic.DateAndTime.Today%2A> propriété. Pour définir l’heure système, utilisez le <xref:Microsoft.VisualBasic.DateAndTime.TimeOfDay%2A> propriété.  
  
   
  
## Examples  
 L’exemple suivant utilise le `Now` propriété pour retourner la date système actuelle et l’heure.  
  
 [!code-vb[VbVbalrDateProperties#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrDateProperties/VB/Module1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="Second">
      <MemberSignature Language="C#" Value="public static int Second (DateTime TimeValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Second(valuetype System.DateTime TimeValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Second (TimeValue As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Second(DateTime TimeValue);" />
      <MemberSignature Language="F#" Value="static member Second : DateTime -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Second TimeValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="TimeValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="TimeValue">Obligatoire. Valeur <see langword="Date" /> de laquelle vous souhaitez extraire la seconde.</param>
        <summary>Retourne une valeur entière comprise entre 0 et 59 représentant la seconde de la minute.</summary>
        <returns>Valeur entière comprise entre 0 et 59 représentant la seconde de la minute.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez également obtenir la seconde de la minute en appelant `DatePart` et en spécifiant `DateInterval.Second` pour le `Interval` argument.  
  
   
  
## Examples  
 L’exemple suivant utilise le `Second` fonction pour obtenir la seconde de la minute à partir d’une heure spécifiée. Dans l’environnement de développement, le littéral d’heure s’affiche au format abrégé à l’aide des paramètres régionaux de votre code.  
  
 [!code-vb[VbVbalrFunctions#46](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#46)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="N:System" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
    <Member MemberName="TimeOfDay">
      <MemberSignature Language="C#" Value="public static DateTime TimeOfDay { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime TimeOfDay" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
      <MemberSignature Language="VB.NET" Value="Public Property TimeOfDay As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime TimeOfDay { DateTime get(); void set(DateTime value); };" />
      <MemberSignature Language="F#" Value="member this.TimeOfDay : DateTime with get, set" Usage="Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Retourne ou définit une valeur <see langword="Date" /> contenant l'heure en cours indiquée par votre système.</summary>
        <value>Retourne ou définit une valeur <see langword="Date" /> contenant l'heure en cours indiquée par votre système.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `Date` type de données inclut des composants de date. Lors du retour de l’heure système, `TimeOfDay` affecte la valeur 1, de sorte que la valeur retournée représente le premier jour de l’année 1. Lors de la définition de l’heure système, `TimeOfDay` ignore les composants date.  
  
 Pour accéder à l’heure système actuelle comme un `String`, utilisez le <xref:Microsoft.VisualBasic.DateAndTime.TimeString%2A> propriété.  
  
 Pour obtenir ou définir la date système actuelle, utilisez le <xref:Microsoft.VisualBasic.DateAndTime.Today%2A> propriété.  
  
> [!IMPORTANT]
>  Définition de la date ou heure système nécessite une autorisation de code non managé, qui peut affecter son exécution dans les situations de confiance partielle. Pour plus d’informations, consultez <xref:System.Security.Permissions.SecurityPermission> et [autorisations d’accès de Code](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).  
  
   
  
## Examples  
 Cet exemple utilise le `TimeOfDay` propriété à retourner l’heure système actuelle.  
  
 [!code-vb[VbVbalrDateProperties#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrDateProperties/VB/Module1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Timer" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="Timer">
      <MemberSignature Language="C#" Value="public static double Timer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property float64 Timer" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.DateAndTime.Timer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Timer As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property double Timer { double get(); };" />
      <MemberSignature Language="F#" Value="member this.Timer : double" Usage="Microsoft.VisualBasic.DateAndTime.Timer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Retourne une valeur de type <see cref="T:System.Double" /> représentant le nombre de secondes écoulées depuis minuit.</summary>
        <value>Une valeur représentant le nombre de secondes écoulées depuis minuit.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `Timer` propriété retourne les secondes et les millisecondes depuis minuit plus récente. Les secondes sont dans la partie intégrante de la valeur de retour et les millisecondes sont dans la partie fractionnaire.  
  
   
  
## Examples  
 Cet exemple utilise le `Timer` propriété pour suspendre l’application. Il peut effectuer d’autres traitements pendant la pause.  
  
 [!code-vb[VbVbalrTimerProperty#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTimerProperty/VB/Form1.vb#1)]  
  
 Notez que vous devez qualifier le `Timer` propriété avec le <xref:Microsoft.VisualBasic?displayProperty=nameWithType> espace de noms, étant donné que `Timer` est également une classe définie dans le <xref:System.Threading?displayProperty=nameWithType>, <xref:System.Timers?displayProperty=nameWithType>, et <xref:System.Windows.Forms?displayProperty=nameWithType> espaces de noms.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.VBMath.Randomize" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Today" />
        <altmember cref="N:System" />
        <altmember cref="N:System.Windows.Forms" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
    <Member MemberName="TimeSerial">
      <MemberSignature Language="C#" Value="public static DateTime TimeSerial (int Hour, int Minute, int Second);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime TimeSerial(int32 Hour, int32 Minute, int32 Second) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.TimeSerial(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function TimeSerial (Hour As Integer, Minute As Integer, Second As Integer) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime TimeSerial(int Hour, int Minute, int Second);" />
      <MemberSignature Language="F#" Value="static member TimeSerial : int * int * int -&gt; DateTime" Usage="Microsoft.VisualBasic.DateAndTime.TimeSerial (Hour, Minute, Second)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Hour" Type="System.Int32" />
        <Parameter Name="Minute" Type="System.Int32" />
        <Parameter Name="Second" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Hour">Obligatoire. Expression entière comprise entre 0 et 23. Cependant, les valeurs non comprises dans cette plage sont également acceptées.</param>
        <param name="Minute">Obligatoire. Expression entière comprise entre 0 et 59. Cependant, les valeurs non comprises dans cette plage sont également acceptées. La valeur de <paramref name="Minute" /> est ajoutée à l'heure calculée, ce qui signifie qu'une valeur négative spécifie les minutes avant cette heure.</param>
        <param name="Second">Obligatoire. Expression entière comprise entre 0 et 59. Cependant, les valeurs non comprises dans cette plage sont également acceptées. La valeur de <paramref name="Second" /> est ajoutée à la minute calculée, ce qui signifie qu'une valeur négative spécifie les secondes avant cette minute.</param>
        <summary>Retourne une valeur <see langword="Date" /> représentant une heure, une minute et une seconde spécifiées, l'indication de date ayant la valeur 1er janvier de l'année 1.</summary>
        <returns>Valeur <see langword="Date" /> représentant une heure, une minute et une seconde spécifiées, l’indication de date ayant la valeur 1er janvier de l’an 1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’exemple suivant montre la négative, zéro et les valeurs d’argument positif. Le `TimeSerial` fonction retourne une heure correspondant à 15 minutes avant trois heures avant midi ou 8:45:00 AM.  
  
```vb  
Dim alarmTime As Date = TimeSerial(12 - 3, -15, 0)  
```  
  
 Si `Minute` ou `Second` dépasse la plage normale, il est appliqué à l’unité supérieure comme il convient. Par exemple, si vous spécifiez 75 minutes, elle est évaluée comme une heure et 15 minutes.  
  
 `TimeSerial` permet de réduire les secondes totales modulo 86 400, qui correspond au nombre de secondes en une journée. Par conséquent, l’heure retournée est toujours entre 00:00:00 et 23:59:59.  
  
 Le `Date` type de données inclut des composants de date. `TimeSerial` définit toutes les 1, de sorte que la valeur retournée représente le premier jour de l’année 1. Toutefois, si les valeurs des arguments entraînent l’heure calculée pouvant excéder 24 heures, le jour est incrémenté si nécessaire. Dans l’exemple suivant, les valeurs de `Hour` et `Minute` entraîne un temps combiné de plus de 24 heures.  
  
```vb  
MsgBox(TimeSerial(23, 75, 0))   
' The preceding statement displays "1/2/0001 12:15:00 AM".  
```  
  
 Si les valeurs des arguments entraînent une heure calculée négative, l’indication de date est définie à 1/1/0001 et l’indication d’heure est ajustée pour être comprise entre 00:00:00 et 23:59:59. Toutefois, si l’heure calculée est inférieure à-24 heures, un <xref:System.ArgumentOutOfRangeException> erreur se produit.  
  
 Dans la mesure où chaque `Date` valeur est prise en charge par un <xref:System.DateTime?displayProperty=nameWithType> structure, ses méthodes offrent des options supplémentaires pour assembler une `Date` valeur. Par exemple, vous pouvez employer l’une des <xref:System.DateTime.%23ctor%2A> constructeurs pour remplir un `Date` variable à l’aide de la combinaison de composants souhaitée. L’exemple suivant définit `newDateTime` à 6 mai 1978 à un dixième de seconde avant 8 h 30 le matin :  
  
```vb  
Dim newDateTime As Date = New Date(1978, 5, 6, 8, 29, 59, 900)  
```  
  
   
  
## Examples  
 L’exemple suivant utilise le `TimeSerial` fonction pour retourner une heure pour l’heure spécifiée, la minute et la seconde.  
  
 [!code-vb[VbVbalrFunctions#50](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#50)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Un argument se trouve en dehors de la plage s'étendant de -2 147 483 648 à 2 147 483 647</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">L'heure calculée est inférieure à -24 heures.</exception>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateSerial(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateValue(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.TimeValue(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="TimeString">
      <MemberSignature Language="C#" Value="public static string TimeString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property string TimeString" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.DateAndTime.TimeString" />
      <MemberSignature Language="VB.NET" Value="Public Property TimeString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ TimeString { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TimeString : string with get, set" Usage="Microsoft.VisualBasic.DateAndTime.TimeString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Retourne ou définit une valeur de chaîne représentant l’heure actuelle indiquée par votre système.</summary>
        <value>Retourne ou définit une valeur de chaîne représentant l’heure actuelle indiquée par votre système.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `TimeString` Retourne toujours l’heure système en tant que « Hh », qui est un format de 24 heures. Ce format est la culture dite indifférente, ce qui signifie qu’il ne change pas même si vous modifiez le **Options régionales** dans **le panneau de configuration**.  
  
 Pour obtenir ou définir la date système actuelle comme un `String`, utilisez le <xref:Microsoft.VisualBasic.DateAndTime.DateString%2A> propriété.  
  
 Pour obtenir la date ou l’heure du système actuels dans le format de vos paramètres régionaux, ou dans un format personnalisé, fournissez la <xref:Microsoft.VisualBasic.DateAndTime.Now%2A> propriété le <xref:Microsoft.VisualBasic.Strings.Format%2A> function, en spécifiant un format de date/heure prédéfini ou défini par l’utilisateur. Cela est illustré par l'exemple suivant.  
  
```vb  
MsgBox("The formatted time is " & Format(Now, "hh.mm.ss.fff tt"))  
```  
  
 Pour accéder à l’heure système actuelle comme un `Date`, utilisez le <xref:Microsoft.VisualBasic.DateAndTime.TimeOfDay%2A> propriété.  
  
> [!IMPORTANT]
>  Définition de la date ou heure système nécessite une autorisation de code non managé, qui peut affecter son exécution dans les situations de confiance partielle. Pour plus d’informations, consultez <xref:System.Security.Permissions.SecurityPermission> et [autorisations d’accès de Code](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).  
  
   
  
## Examples  
 Cet exemple utilise le `TimeString` propriété pour afficher l’heure système actuelle.  
  
 [!code-vb[VbVbalrDateProperties#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrDateProperties/VB/Module1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">Format non valide utilisé pour définir la valeur de <see langword="TimeString" />.</exception>
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.DateString" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="TimeValue">
      <MemberSignature Language="C#" Value="public static DateTime TimeValue (string StringTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime TimeValue(string StringTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.TimeValue(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function TimeValue (StringTime As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime TimeValue(System::String ^ StringTime);" />
      <MemberSignature Language="F#" Value="static member TimeValue : string -&gt; DateTime" Usage="Microsoft.VisualBasic.DateAndTime.TimeValue StringTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="StringTime" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="StringTime">Obligatoire. Expression de chaîne représentant une valeur de date/heure comprise entre 00:00:00 le 1er janvier de l’an 1 et 23:59:59 le 31 décembre 9999.</param>
        <summary>Retourne une valeur <see langword="Date" /> contenant l'indication d'heure représentée par une chaîne, l'indication de date ayant la valeur 1er janvier de l'année 1.</summary>
        <returns>Valeur <see langword="Date" /> contenant l’indication d’heure représentée par une chaîne, l’indication de date ayant la valeur 1er janvier de l’an 1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez entrer des heures valides à l’aide d’une horloge de 12 heures ou 24 heures. Par exemple, `"2:24 P.M."` et `"14:24"` sont tous deux valides `StringTime` arguments.  
  
 Si le `StringTime` argument inclut des informations de date `TimeValue` ne l’inclut pas dans la valeur retournée. Toutefois, si `StringTime` inclut des informations de date non valide, par exemple « 32 janvier », un <xref:System.InvalidCastException> erreur se produit.  
  
   
  
## Examples  
 L’exemple suivant utilise le `TimeValue` fonction pour convertir une chaîne en une heure. Vous pouvez également utiliser des littéraux de date pour attribuer directement une heure à un `Date` variable.  
  
 [!code-vb[VbVbalrFunctions#51](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#51)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><paramref name="StringTime" /> inclut des informations de date non valides.</exception>
        <altmember cref="T:System.DateTime" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateSerial(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateValue(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.TimeSerial(System.Int32,System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Today">
      <MemberSignature Language="C#" Value="public static DateTime Today { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime Today" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.DateAndTime.Today" />
      <MemberSignature Language="VB.NET" Value="Public Property Today As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime Today { DateTime get(); void set(DateTime value); };" />
      <MemberSignature Language="F#" Value="member this.Today : DateTime with get, set" Usage="Microsoft.VisualBasic.DateAndTime.Today" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Retourne ou définit une valeur <see langword="Date" /> représentant la date actuelle indiquée par votre système.</summary>
        <value>Retourne ou définit une valeur <see langword="Date" /> représentant la date actuelle indiquée par votre système.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `Date` type de données inclut des composants heure. Lors du retour de la date système, `Today` définit toutes les 0, de sorte que la valeur retournée représente minuit (00 : 00:00). Lors de la définition de la date système, `Today` ignore les composants heure.  
  
 Pour accéder à la date système actuelle comme un `String`, utilisez le <xref:Microsoft.VisualBasic.DateAndTime.DateString%2A> propriété.  
  
 Pour obtenir ou définir l’heure système actuelle, utilisez le <xref:Microsoft.VisualBasic.DateAndTime.TimeOfDay%2A> propriété.  
  
> [!IMPORTANT]
>  Définition de la date ou heure système nécessite une autorisation de code non managé, qui peut affecter son exécution dans les situations de confiance partielle. Pour plus d’informations, consultez <xref:System.Security.Permissions.SecurityPermission> et [autorisations d’accès de Code](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).  
  
   
  
## Examples  
 Cet exemple utilise le `Today` propriété pour retourner la date système actuelle.  
  
 [!code-vb[VbVbalrDateProperties#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrDateProperties/VB/Module1.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="Weekday">
      <MemberSignature Language="C#" Value="public static int Weekday (DateTime DateValue, Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Weekday(valuetype System.DateTime DateValue, valuetype Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
      <MemberSignature Language="VB.NET" Value="Public Function Weekday (DateValue As DateTime, Optional DayOfWeek As FirstDayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday) As Integer" />
      <MemberSignature Language="F#" Value="static member Weekday : DateTime * Microsoft.VisualBasic.FirstDayOfWeek -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Weekday (DateValue, DayOfWeek)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="DateValue" Type="System.DateTime" />
        <Parameter Name="DayOfWeek" Type="Microsoft.VisualBasic.FirstDayOfWeek" />
      </Parameters>
      <Docs>
        <param name="DateValue">Obligatoire. Valeur <see langword="Date" /> pour laquelle vous souhaitez déterminer le jour de la semaine.</param>
        <param name="DayOfWeek">Optionnel. Valeur choisie dans l'énumération <see cref="T:Microsoft.VisualBasic.FirstDayOfWeek" /> qui spécifie le premier jour de la semaine. En l'absence de spécification, <see cref="F:Microsoft.VisualBasic.FirstDayOfWeek.Sunday" /> est utilisé.</param>
        <summary>Retourne une valeur entière contenant un nombre représentant le jour de la semaine.</summary>
        <returns>Valeur entière contenant un nombre représentant le jour de la semaine.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La valeur retournée par la `Weekday` fonction correspond aux valeurs de la `FirstDayOfWeek` énumération ; autrement dit, 1 indique dimanche et 7 indique samedi.  
  
> [!NOTE]
>  `Weekday` utilise le paramètre de calendrier actuel à partir de la <xref:System.Globalization.CultureInfo.CurrentCulture%2A> propriété de la <xref:System.Globalization.CultureInfo> classe dans le <xref:System.Globalization> espace de noms. La valeur par défaut <xref:System.Globalization.CultureInfo.CurrentCulture%2A> valeurs sont déterminées par **le panneau de configuration** paramètres.  
  
 Le `DayOfWeek` argument peut prendre les paramètres suivants.  
  
|Valeur d’énumération|Value|Description |  
|-----------------------|-----------|-----------------|  
|`FirstDayOfWeek.System`|0|Premier jour de semaine spécifié dans les paramètres système|  
|`FirstDayOfWeek.Sunday`|1|Dimanche (par défaut)|  
|`FirstDayOfWeek.Monday`|2|Lundi (conformément à la norme ISO 8601, section 3.17)|  
|`FirstDayOfWeek.Tuesday`|3|Mardi|  
|`FirstDayOfWeek.Wednesday`|4|Le mercredi|  
|`FirstDayOfWeek.Thursday`|5|Jeudi|  
|`FirstDayOfWeek.Friday`|6|Le vendredi|  
|`FirstDayOfWeek.Saturday`|7|Saturday|  
  
   
  
## Examples  
 L’exemple suivant utilise le `Weekday` fonction pour obtenir le jour de la semaine à partir d’une date spécifiée.  
  
 [!code-vb[VbVbalrFunctions#57](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#57)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="DayOfWeek" /> est inférieur à 0 ou supérieur à 7.</exception>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.WeekdayName(System.Int32,System.Boolean,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="WeekdayName">
      <MemberSignature Language="C#" Value="public static string WeekdayName (int Weekday, bool Abbreviate = false, Microsoft.VisualBasic.FirstDayOfWeek FirstDayOfWeekValue = Microsoft.VisualBasic.FirstDayOfWeek.System);" />
      <MemberSignature Language="ILAsm" Value=".method public static string WeekdayName(int32 Weekday, bool Abbreviate, valuetype Microsoft.VisualBasic.FirstDayOfWeek FirstDayOfWeekValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.WeekdayName(System.Int32,System.Boolean,Microsoft.VisualBasic.FirstDayOfWeek)" />
      <MemberSignature Language="VB.NET" Value="Public Function WeekdayName (Weekday As Integer, Optional Abbreviate As Boolean = false, Optional FirstDayOfWeekValue As FirstDayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.System) As String" />
      <MemberSignature Language="F#" Value="static member WeekdayName : int * bool * Microsoft.VisualBasic.FirstDayOfWeek -&gt; string" Usage="Microsoft.VisualBasic.DateAndTime.WeekdayName (Weekday, Abbreviate, FirstDayOfWeekValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Weekday" Type="System.Int32" />
        <Parameter Name="Abbreviate" Type="System.Boolean" />
        <Parameter Name="FirstDayOfWeekValue" Type="Microsoft.VisualBasic.FirstDayOfWeek" />
      </Parameters>
      <Docs>
        <param name="Weekday">Obligatoire. Integer. Désignation numérique du jour de la semaine, de 1 à 7 ; 1 représente le premier jour de la semaine et 7 le dernier. Les identités du premier et du dernier jour dépendent du paramètre de <paramref name="FirstDayOfWeekValue" />.</param>
        <param name="Abbreviate">Optionnel. Valeur <see langword="Boolean" /> qui indique si le nom du jour de la semaine sera abrégé. Si elle n'est pas spécifiée, la valeur par défaut est <see langword="False" />, ce qui signifie que le nom du jour de la semaine n'est pas abrégé.</param>
        <param name="FirstDayOfWeekValue">Optionnel. Valeur choisie dans l'énumération <see cref="T:Microsoft.VisualBasic.FirstDayOfWeek" /> qui spécifie le premier jour de la semaine. En l'absence de spécification, <see langword="FirstDayOfWeek.System" /> est utilisé.</param>
        <summary>Retourne une valeur de chaîne contenant le nom du jour de la semaine spécifié.</summary>
        <returns>Valeur de chaîne contenant le nom du jour de la semaine spécifié.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La chaîne retournée par `WeekdayName` dépend non seulement sur les arguments d’entrée, mais également le **Options régionales** paramètres spécifiés dans le Windows **le panneau de configuration**.  
  
> [!NOTE]
>  `WeekdayName` utilise le paramètre de calendrier actuel à partir de la <xref:System.Globalization.CultureInfo.CurrentCulture%2A> propriété de la <xref:System.Globalization.CultureInfo> classe dans le <xref:System.Globalization> espace de noms. La valeur par défaut <xref:System.Globalization.CultureInfo.CurrentCulture%2A> valeurs sont déterminées par **le panneau de configuration** paramètres.  
  
 Le `FirstDayOfWeekValue` argument peut prendre les paramètres suivants.  
  
|Valeur d’énumération|Value|Description |  
|-----------------------|-----------|-----------------|  
|`FirstDayOfWeek.System`|0|Premier jour de semaine spécifié dans le système de paramètres (par défaut)|  
|`FirstDayOfWeek.Sunday`|1|Dimanche|  
|`FirstDayOfWeek.Monday`|2|Lundi (conformément à la norme ISO 8601, section 3.17)|  
|`FirstDayOfWeek.Tuesday`|3|Mardi|  
|`FirstDayOfWeek.Wednesday`|4|Le mercredi|  
|`FirstDayOfWeek.Thursday`|5|Jeudi|  
|`FirstDayOfWeek.Friday`|6|Le vendredi|  
|`FirstDayOfWeek.Saturday`|7|Saturday|  
  
   
  
## Examples  
 L’exemple suivant utilise le `Weekday` fonction pour obtenir le jour de la semaine à partir d’une date spécifiée, puis le `WeekDayName` fonction pour obtenir le nom du jour de la semaine à partir de son numéro.  
  
 [!code-vb[VbVbalrFunctions#58](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Weekday" /> est inférieur à 1 ou supérieur à 7 ou <paramref name="FirstDayOfWeekValue" /> est inférieur à 0 ou supérieur à 7.</exception>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="Year">
      <MemberSignature Language="C#" Value="public static int Year (DateTime DateValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Year(valuetype System.DateTime DateValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Year (DateValue As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Year(DateTime DateValue);" />
      <MemberSignature Language="F#" Value="static member Year : DateTime -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Year DateValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="DateValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="DateValue">Obligatoire. Valeur <see langword="Date" /> de laquelle vous souhaitez extraire l’année.</param>
        <summary>Retourne une valeur entière comprise entre 1 et 9999 représentant l’année.</summary>
        <returns>Valeur entière comprise entre 1 et 9999 représentant l’année.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez également obtenir l’année en appelant `DatePart` et en spécifiant `DateInterval.Year` pour le `Interval` argument.  
  
   
  
## Examples  
 L’exemple suivant utilise le `Year` fonction pour obtenir l’année à partir d’une date spécifiée. Dans l’environnement de développement, le littéral date est affiché en format abrégé à l’aide des paramètres régionaux de votre code.  
  
 [!code-vb[VbVbalrFunctions#59](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#59)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
  </Members>
</Type>