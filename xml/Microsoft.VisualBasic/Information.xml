<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Information.xml" source-language="en-US" target-language="fr-FR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5c57dd6007d6c60bd212b9cf55d27c4a45966b12e.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c57dd6007d6c60bd212b9cf55d27c4a45966b12e</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualBasic.Information">
          <source>The <ph id="ph1">&lt;see langword="Information" /&gt;</ph> module contains the procedures used to return, test for, or verify information.</source>
          <target state="translated">Le module <ph id="ph1">&lt;see langword="Information" /&gt;</ph> contient les procédures utilisées pour retourner, tester ou vérifier les informations.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Information">
          <source>This module supports the Visual Basic language keywords and run-time library members that provide error information, validate data, determine array bounds, and retrieve data type and color information.</source>
          <target state="translated">Ce module prend en charge les mots clés du langage Visual Basic et les membres de bibliothèque Runtime qui fournissent des informations d’erreur, valident des données, déterminent les limites du tableau et extraire des informations de type et la couleur des données.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Information">
          <source>The following example uses the <ph id="ph1">`VbTypeName`</ph> function to return data type names for several variables.</source>
          <target state="translated">L’exemple suivant utilise le <ph id="ph1">`VbTypeName`</ph> fonction pour retourner les noms de type de données de plusieurs variables.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.Erl">
          <source>Returns an integer indicating the line number of the last executed statement.</source>
          <target state="translated">Retourne un entier indiquant le numéro de ligne de la dernière instruction exécutée.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.Erl">
          <source>Read-only.</source>
          <target state="translated">Lecture seule.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.Erl">
          <source>Returns an integer indicating the line number of the last executed statement.</source>
          <target state="translated">Retourne un entier indiquant le numéro de ligne de la dernière instruction exécutée.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.Erl">
          <source>Read-only.</source>
          <target state="translated">Lecture seule.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.Erl">
          <source>If Visual Basic encounters no line numbers, it returns 0.</source>
          <target state="translated">Si Visual Basic ne rencontre aucun numéro de ligne, il retourne 0.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.Erl">
          <source>This example uses the <ph id="ph1">`Erl`</ph> property to indicate the line number.</source>
          <target state="translated">Cet exemple utilise le <ph id="ph1">`Erl`</ph> propriété pour indiquer le numéro de ligne.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.Err">
          <source>Contains information about run-time errors.</source>
          <target state="translated">Contient des informations relatives aux erreurs d’exécution.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.Err">
          <source>Contains information about run-time errors.</source>
          <target state="translated">Contient des informations relatives aux erreurs d’exécution.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.Err">
          <source>The properties of the <ph id="ph1">`Err`</ph> object are set by the generator of an error—Visual Basic, an object, or the programmer.</source>
          <target state="translated">Les propriétés de la <ph id="ph1">`Err`</ph> objet sont définies par le Générateur d’une erreur, Visual Basic, un objet ou le programmeur.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.Err">
          <source>When a run-time error occurs, the properties of the <ph id="ph1">`Err`</ph> object are filled with information that uniquely identifies the error and that you can use to handle the error.</source>
          <target state="translated">Lorsqu’une erreur d’exécution se produit, les propriétés de la <ph id="ph1">`Err`</ph> sont remplis avec des informations qui identifient l’erreur de l’objet et que vous pouvez utiliser pour gérer l’erreur.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.Err">
          <source>To generate a run-time error in your code, use the <ph id="ph1">`Raise`</ph> method.</source>
          <target state="translated">Pour générer une erreur d’exécution dans votre code, utilisez le <ph id="ph1">`Raise`</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.Err">
          <source>The <ph id="ph1">`Err`</ph> object's properties are reset to zero or zero-length strings ("") after an <ph id="ph2">`Exit Sub`</ph>, <ph id="ph3">`Exit Function`</ph>, <ph id="ph4">`Exit Property`</ph>, or <ph id="ph5">`Resume Next`</ph> statement within an error-handling routine.</source>
          <target state="translated">Le <ph id="ph1">`Err`</ph> propriétés de l’objet sont rétablies à zéro ou des chaînes de longueur nulle (« ») après une <ph id="ph2">`Exit Sub`</ph>, <ph id="ph3">`Exit Function`</ph>, <ph id="ph4">`Exit Property`</ph>, ou <ph id="ph5">`Resume Next`</ph> instruction dans une routine de gestion des erreurs.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.Err">
          <source>Using any form of the <ph id="ph1">`Resume`</ph> statement outside of an error-handling routine will not reset the <ph id="ph2">`Err`</ph> object's properties.</source>
          <target state="translated">À l’aide de n’importe quel écran de la <ph id="ph1">`Resume`</ph> instruction en dehors d’une routine de gestion des erreurs ne réinitialise pas le <ph id="ph2">`Err`</ph> propriétés de l’objet.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.Err">
          <source>You can use the <ph id="ph1">`Clear`</ph> method to explicitly reset <ph id="ph2">`Err`</ph>.</source>
          <target state="translated">Vous pouvez utiliser la <ph id="ph1">`Clear`</ph> méthode pour réinitialiser explicitement <ph id="ph2">`Err`</ph>.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.Err">
          <source>Use the <ph id="ph1">`Raise`</ph> method rather than the <ph id="ph2">`Error`</ph> statement to generate run-time errors for system errors and class modules.</source>
          <target state="translated">Utilisez le <ph id="ph1">`Raise`</ph> méthode plutôt que la <ph id="ph2">`Error`</ph> instruction pour générer des erreurs d’exécution pour les erreurs système et de modules de classe.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.Err">
          <source>Your decision about whether to use the <ph id="ph1">`Raise`</ph> method in other code depends on the richness of the information you want to return.</source>
          <target state="translated">Décider s’il faut utiliser le <ph id="ph1">`Raise`</ph> méthode dans un autre code dépend de la richesse des informations que vous souhaitez retourner.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.Err">
          <source>The <ph id="ph1">`Err`</ph> object is an intrinsic object with global scope.</source>
          <target state="translated">Le <ph id="ph1">`Err`</ph> objet est un objet intrinsèque avec une portée globale.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.Err">
          <source>Therefore, you do not need to create an instance of it in your code.</source>
          <target state="translated">Par conséquent, vous n’avez pas besoin de créer une instance de celui-ci dans votre code.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.Err">
          <source>This example uses the properties of the <ph id="ph1">`Err`</ph> object in constructing an error-message dialog box.</source>
          <target state="translated">Cet exemple utilise les propriétés de la <ph id="ph1">`Err`</ph> objet lors de la construction d’une boîte de dialogue de message d’erreur.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.Err">
          <source>Notice that if you use the <ph id="ph1">`Clear`</ph> method first, when you generate a Visual Basic error with the <ph id="ph2">`Raise`</ph> method, Visual Basic's default values become the properties of the <ph id="ph3">`Err`</ph> object.</source>
          <target state="translated">Notez que si vous utilisez la <ph id="ph1">`Clear`</ph> méthode première, lorsque vous générez une erreur Visual Basic avec le <ph id="ph2">`Raise`</ph> (méthode), les valeurs par défaut de Visual Basic deviennent les propriétés de la <ph id="ph3">`Err`</ph> objet.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.IsArray(System.Object)">
          <source>Required.</source>
          <target state="translated">Obligatoire.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.IsArray(System.Object)">
          <source><ph id="ph1">&lt;see langword="Object" /&gt;</ph> variable.</source>
          <target state="translated">Variable <ph id="ph1">&lt;see langword="Object" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.IsArray(System.Object)">
          <source>Returns a <ph id="ph1">&lt;see langword="Boolean" /&gt;</ph> value indicating whether a variable points to an array.</source>
          <target state="translated">Retourne une valeur <ph id="ph1">&lt;see langword="Boolean" /&gt;</ph> indiquant si une variable pointe vers un tableau.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.IsArray(System.Object)">
          <source>Returns a <ph id="ph1">&lt;see langword="Boolean" /&gt;</ph> value indicating whether a variable points to an array.</source>
          <target state="translated">Retourne une valeur <ph id="ph1">&lt;see langword="Boolean" /&gt;</ph> indiquant si une variable pointe vers un tableau.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.IsArray(System.Object)">
          <source><ph id="ph1">`IsArray`</ph> returns <ph id="ph2">`True`</ph> if the variable points to an array; otherwise, it returns <ph id="ph3">`False`</ph>.</source>
          <target state="translated"><ph id="ph1">`IsArray`</ph> Retourne <ph id="ph2">`True`</ph> si la variable pointe vers un tableau ; sinon, elle retourne <ph id="ph3">`False`</ph>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.IsArray(System.Object)">
          <source><ph id="ph1">`IsArray`</ph> is especially useful with objects that might contain arrays.</source>
          <target state="translated"><ph id="ph1">`IsArray`</ph> est particulièrement utile avec des objets qui peuvent contenir des tableaux.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.IsArray(System.Object)">
          <source>This example uses the <ph id="ph1">`IsArray`</ph> function to check if several variables refer to an array.</source>
          <target state="translated">Cet exemple utilise le <ph id="ph1">`IsArray`</ph> afin de vérifier si plusieurs variables font référence à un tableau.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.IsDate(System.Object)">
          <source>Required.</source>
          <target state="translated">Obligatoire.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.IsDate(System.Object)">
          <source><ph id="ph1">&lt;see langword="Object" /&gt;</ph> expression.</source>
          <target state="translated">Expression <ph id="ph1">&lt;see langword="Object" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.IsDate(System.Object)">
          <source>Returns a <ph id="ph1">&lt;see langword="Boolean" /&gt;</ph> value indicating whether an expression represents a valid <ph id="ph2">&lt;see langword="Date" /&gt;</ph> value.</source>
          <target state="translated">Retourne une valeur <ph id="ph1">&lt;see langword="Boolean" /&gt;</ph> indiquant si une expression représente une valeur <ph id="ph2">&lt;see langword="Date" /&gt;</ph> valide.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.IsDate(System.Object)">
          <source>Returns a <ph id="ph1">&lt;see langword="Boolean" /&gt;</ph> value indicating whether an expression represents a valid <ph id="ph2">&lt;see langword="Date" /&gt;</ph> value.</source>
          <target state="translated">Retourne une valeur <ph id="ph1">&lt;see langword="Boolean" /&gt;</ph> indiquant si une expression représente une valeur <ph id="ph2">&lt;see langword="Date" /&gt;</ph> valide.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.IsDate(System.Object)">
          <source><ph id="ph1">`IsDate`</ph> returns <ph id="ph2">`True`</ph> if <ph id="ph3">`Expression`</ph> is of the <ph id="ph4">&lt;xref:System.DateTime&gt;</ph> data type or can be converted to it; otherwise, it returns <ph id="ph5">`False`</ph>.</source>
          <target state="translated"><ph id="ph1">`IsDate`</ph> Retourne <ph id="ph2">`True`</ph> si <ph id="ph3">`Expression`</ph> est de le <ph id="ph4">&lt;xref:System.DateTime&gt;</ph> données de type ou peuvent être converties en lui ; sinon, elle retourne <ph id="ph5">`False`</ph>.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.IsDate(System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> data type holds both a date value and a time value.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> type de données contient une valeur de date et une valeur d’heure.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.IsDate(System.Object)">
          <source><ph id="ph1">`IsDate`</ph> returns <ph id="ph2">`True`</ph> if <ph id="ph3">`Expression`</ph> represents a valid date, a valid time, or a valid date and time.</source>
          <target state="translated"><ph id="ph1">`IsDate`</ph> Retourne <ph id="ph2">`True`</ph> si <ph id="ph3">`Expression`</ph> représente une date valide, une heure valide, ou une date valide et une heure.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.IsDate(System.Object)">
          <source>The following example uses the <ph id="ph1">`IsDate`</ph> function to determine if several variables represent valid <ph id="ph2">&lt;xref:System.DateTime&gt;</ph> values.</source>
          <target state="translated">L’exemple suivant utilise le <ph id="ph1">`IsDate`</ph> fonction pour déterminer si plusieurs variables représentent valide <ph id="ph2">&lt;xref:System.DateTime&gt;</ph> valeurs.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.IsDate(System.Object)">
          <source>In the preceding example, <ph id="ph1">`IsDate`</ph> returns <ph id="ph2">`True`</ph> for the first four calls and <ph id="ph3">`False`</ph> for the last call.</source>
          <target state="translated">Dans l’exemple précédent, <ph id="ph1">`IsDate`</ph> retourne <ph id="ph2">`True`</ph> pour les quatre premiers appels et <ph id="ph3">`False`</ph> pour le dernier appel.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)">
          <source>Required.</source>
          <target state="translated">Obligatoire.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)">
          <source><ph id="ph1">&lt;see langword="Object" /&gt;</ph> expression.</source>
          <target state="translated">Expression <ph id="ph1">&lt;see langword="Object" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)">
          <source>Returns a <ph id="ph1">&lt;see langword="Boolean" /&gt;</ph> value indicating whether an expression evaluates to the <ph id="ph2">&lt;see cref="T:System.DBNull" /&gt;</ph> class.</source>
          <target state="translated">Retourne une valeur <ph id="ph1">&lt;see langword="Boolean" /&gt;</ph> indiquant si une expression correspond à la classe <ph id="ph2">&lt;see cref="T:System.DBNull" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)">
          <source>Returns a <ph id="ph1">&lt;see langword="Boolean" /&gt;</ph> value indicating whether an expression evaluates to the <ph id="ph2">&lt;see cref="T:System.DBNull" /&gt;</ph> class.</source>
          <target state="translated">Retourne une valeur <ph id="ph1">&lt;see langword="Boolean" /&gt;</ph> indiquant si une expression correspond à la classe <ph id="ph2">&lt;see cref="T:System.DBNull" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)">
          <source><ph id="ph1">`IsDBNull`</ph> returns <ph id="ph2">`True`</ph> if the data type of <ph id="ph3">`Expression`</ph> evaluates to the <ph id="ph4">&lt;xref:System.DBNull&gt;</ph> type; otherwise, <ph id="ph5">`IsDBNull`</ph> returns <ph id="ph6">`False`</ph>.</source>
          <target state="translated"><ph id="ph1">`IsDBNull`</ph> Retourne <ph id="ph2">`True`</ph> si le type de données de <ph id="ph3">`Expression`</ph> prend la valeur de la <ph id="ph4">&lt;xref:System.DBNull&gt;</ph> type ; sinon, <ph id="ph5">`IsDBNull`</ph> retourne <ph id="ph6">`False`</ph>.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.DBNull?displayProperty=nameWithType&gt;</ph> value indicates that the <ph id="ph2">`Object`</ph> represents missing or nonexistent data.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.DBNull?displayProperty=nameWithType&gt;</ph> valeur indique que la <ph id="ph2">`Object`</ph> représente des données manquantes ou inexistantes.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)">
          <source><ph id="ph1">`DBNull`</ph> is not the same as <ph id="ph2">`Nothing`</ph>, which indicates that a variable has not yet been initialized.</source>
          <target state="translated"><ph id="ph1">`DBNull`</ph> n’est pas le même que <ph id="ph2">`Nothing`</ph>, ce qui indique qu’une variable n’a pas encore été initialisée.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)">
          <source><ph id="ph1">`DBNull`</ph> is also not the same as a zero-length string (<ph id="ph2">`""`</ph>), which is sometimes referred to as a null string.</source>
          <target state="translated"><ph id="ph1">`DBNull`</ph> n’est également pas identique à une chaîne de longueur nulle (<ph id="ph2">`""`</ph>), qui est parfois appelée une chaîne null.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)">
          <source>This example uses the <ph id="ph1">`IsDBNull`</ph> function to determine if a variable evaluates to <ph id="ph2">`DBNull`</ph>.</source>
          <target state="translated">Cet exemple utilise le <ph id="ph1">`IsDBNull`</ph> fonction pour déterminer si une variable a la valeur <ph id="ph2">`DBNull`</ph>.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.IsError(System.Object)">
          <source>Required.</source>
          <target state="translated">Obligatoire.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.IsError(System.Object)">
          <source><ph id="ph1">&lt;see langword="Object" /&gt;</ph> expression.</source>
          <target state="translated">Expression <ph id="ph1">&lt;see langword="Object" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.IsError(System.Object)">
          <source>Returns a <ph id="ph1">&lt;see langword="Boolean" /&gt;</ph> value indicating whether an expression is an exception type.</source>
          <target state="translated">Retourne une valeur <ph id="ph1">&lt;see langword="Boolean" /&gt;</ph> indiquant si une expression est un type d'exception.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.IsError(System.Object)">
          <source>Returns a <ph id="ph1">&lt;see langword="Boolean" /&gt;</ph> value indicating whether an expression is an exception type.</source>
          <target state="translated">Retourne une valeur <ph id="ph1">&lt;see langword="Boolean" /&gt;</ph> indiquant si une expression est un type d'exception.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.IsError(System.Object)">
          <source><ph id="ph1">`IsError`</ph> returns <ph id="ph2">`True`</ph> if the expression represents an <ph id="ph3">`Object`</ph> variable that derives from the <ph id="ph4">&lt;xref:System.Exception&gt;</ph> class in the <ph id="ph5">&lt;xref:System&gt;</ph> namespace.</source>
          <target state="translated"><ph id="ph1">`IsError`</ph> Retourne <ph id="ph2">`True`</ph> si l’expression représente une <ph id="ph3">`Object`</ph> variable qui dérive de la <ph id="ph4">&lt;xref:System.Exception&gt;</ph> classe dans le <ph id="ph5">&lt;xref:System&gt;</ph> espace de noms.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.IsError(System.Object)">
          <source>An exception that derives from <ph id="ph1">&lt;xref:System.Exception?displayProperty=nameWithType&gt;</ph> can be caught with the <ph id="ph2">`Try...Catch...Finally`</ph> statements.</source>
          <target state="translated">Une exception qui dérive de <ph id="ph1">&lt;xref:System.Exception?displayProperty=nameWithType&gt;</ph> peut être interceptée avec le <ph id="ph2">`Try...Catch...Finally`</ph> instructions.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.IsError(System.Object)">
          <source>The following example uses the <ph id="ph1">`IsError`</ph> function to check if an expression represents a system exception.</source>
          <target state="translated">L’exemple suivant utilise le <ph id="ph1">`IsError`</ph> afin de vérifier si une expression représente une exception système.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)">
          <source>Required.</source>
          <target state="translated">Obligatoire.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)">
          <source><ph id="ph1">&lt;see langword="Object" /&gt;</ph> expression.</source>
          <target state="translated">Expression <ph id="ph1">&lt;see langword="Object" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)">
          <source>Returns a <ph id="ph1">&lt;see langword="Boolean" /&gt;</ph> value indicating whether an expression has no object assigned to it.</source>
          <target state="translated">Retourne une valeur <ph id="ph1">&lt;see langword="Boolean" /&gt;</ph> indiquant si aucun objet n'est assigné à une expression.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)">
          <source>Returns a <ph id="ph1">&lt;see langword="Boolean" /&gt;</ph> value indicating whether an expression has no object assigned to it.</source>
          <target state="translated">Retourne une valeur <ph id="ph1">&lt;see langword="Boolean" /&gt;</ph> indiquant si aucun objet n'est assigné à une expression.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)">
          <source><ph id="ph1">`IsNothing`</ph> returns <ph id="ph2">`True`</ph> if the expression represents an object variable that currently has no object assigned to it; otherwise, it returns <ph id="ph3">`False`</ph>.</source>
          <target state="translated"><ph id="ph1">`IsNothing`</ph> Retourne <ph id="ph2">`True`</ph> si l’expression représente une variable objet qui n’a actuellement aucun objet assigné à ce dernier ; sinon, elle retourne <ph id="ph3">`False`</ph>.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)">
          <source><ph id="ph1">`IsNothing`</ph> is intended to work on reference types.</source>
          <target state="translated"><ph id="ph1">`IsNothing`</ph> est prévu pour fonctionner sur les types référence.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)">
          <source>A value type cannot hold a value of  and reverts to its default value if you assign <ph id="ph1">`Nothing`</ph> to it.</source>
          <target state="translated">Un type valeur ne peut pas contenir la valeur et revient à sa valeur par défaut si vous affectez <ph id="ph1">`Nothing`</ph> à celui-ci.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)">
          <source>If you supply a value type in <ph id="ph1">`Expression`</ph>, <ph id="ph2">`IsNothing`</ph> always returns <ph id="ph3">`False`</ph>.</source>
          <target state="translated">Si vous fournissez un type valeur dans <ph id="ph1">`Expression`</ph>, <ph id="ph2">`IsNothing`</ph> retourne toujours <ph id="ph3">`False`</ph>.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)">
          <source>The following example uses the <ph id="ph1">`IsNothing`</ph> function to determine if an object variable is associated with any object instance.</source>
          <target state="translated">L’exemple suivant utilise le <ph id="ph1">`IsNothing`</ph> fonction pour déterminer si une variable objet est associée à une instance d’objet.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)">
          <source>Required.</source>
          <target state="translated">Obligatoire.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)">
          <source><ph id="ph1">&lt;see langword="Object" /&gt;</ph> expression.</source>
          <target state="translated">Expression <ph id="ph1">&lt;see langword="Object" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)">
          <source>Returns a <ph id="ph1">&lt;see langword="Boolean" /&gt;</ph> value indicating whether an expression can be evaluated as a number.</source>
          <target state="translated">Retourne une valeur <ph id="ph1">&lt;see langword="Boolean" /&gt;</ph> indiquant si une expression peut être évaluée comme un nombre.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)">
          <source>Returns a <ph id="ph1">&lt;see langword="Boolean" /&gt;</ph> value indicating whether an expression can be evaluated as a number.</source>
          <target state="translated">Retourne une valeur <ph id="ph1">&lt;see langword="Boolean" /&gt;</ph> indiquant si une expression peut être évaluée comme un nombre.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)">
          <source><ph id="ph1">`IsNumeric`</ph> returns <ph id="ph2">`True`</ph> if the data type of <ph id="ph3">`Expression`</ph> is <ph id="ph4">`Boolean`</ph>, <ph id="ph5">`Byte`</ph>, <ph id="ph6">`Decimal`</ph>, <ph id="ph7">`Double`</ph>, <ph id="ph8">`Integer`</ph>, <ph id="ph9">`Long`</ph>, <ph id="ph10">`SByte`</ph>, <ph id="ph11">`Short`</ph>, <ph id="ph12">`Single`</ph>, <ph id="ph13">`UInteger`</ph>, <ph id="ph14">`ULong`</ph>, or <ph id="ph15">`UShort`</ph>.</source>
          <target state="translated"><ph id="ph1">`IsNumeric`</ph> Retourne <ph id="ph2">`True`</ph> si le type de données de <ph id="ph3">`Expression`</ph> est <ph id="ph4">`Boolean`</ph>, <ph id="ph5">`Byte`</ph>, <ph id="ph6">`Decimal`</ph>, <ph id="ph7">`Double`</ph>, <ph id="ph8">`Integer`</ph>, <ph id="ph9">`Long`</ph>, <ph id="ph10">`SByte`</ph>, <ph id="ph11">`Short`</ph>, <ph id="ph12">`Single`</ph>, <ph id="ph13">`UInteger`</ph>, <ph id="ph14">`ULong`</ph>, ou <ph id="ph15">`UShort`</ph>.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)">
          <source>It also returns <ph id="ph1">`True`</ph> if <ph id="ph2">`Expression`</ph> is a <ph id="ph3">`Char`</ph>, <ph id="ph4">`String`</ph>, or <ph id="ph5">`Object`</ph> that can be successfully converted to a number.</source>
          <target state="translated">Il renvoie également <ph id="ph1">`True`</ph> si <ph id="ph2">`Expression`</ph> est un <ph id="ph3">`Char`</ph>, <ph id="ph4">`String`</ph>, ou <ph id="ph5">`Object`</ph> qui peut être correctement converti en un nombre.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)">
          <source><ph id="ph1">`Expression`</ph> can contain non-numeric characters.</source>
          <target state="translated"><ph id="ph1">`Expression`</ph> peut contenir des caractères non numériques.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)">
          <source><ph id="ph1">`IsNumeric`</ph> returns <ph id="ph2">`True`</ph> if <ph id="ph3">`Expression`</ph> is a string that contains a valid hexadecimal or octal number.</source>
          <target state="translated"><ph id="ph1">`IsNumeric`</ph> Retourne <ph id="ph2">`True`</ph> si <ph id="ph3">`Expression`</ph> est une chaîne qui contient un nombre hexadécimal ou octal valide.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)">
          <source><ph id="ph1">`IsNumeric`</ph> also returns <ph id="ph2">`True`</ph> if <ph id="ph3">`Expression`</ph> contains a valid numeric expression that begins with a + or - character or contains commas.</source>
          <target state="translated"><ph id="ph1">`IsNumeric`</ph> retourne également <ph id="ph2">`True`</ph> si <ph id="ph3">`Expression`</ph> contient une expression numérique valide qui commence par un + ou - de caractères ou contient des virgules.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)">
          <source><ph id="ph1">`IsNumeric`</ph> returns <ph id="ph2">`False`</ph> if <ph id="ph3">`Expression`</ph> is of data type <ph id="ph4">`Date`</ph>.</source>
          <target state="translated"><ph id="ph1">`IsNumeric`</ph> Retourne <ph id="ph2">`False`</ph> si <ph id="ph3">`Expression`</ph> est de type de données <ph id="ph4">`Date`</ph>.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)">
          <source>It returns <ph id="ph1">`False`</ph> if <ph id="ph2">`Expression`</ph> is a <ph id="ph3">`Char`</ph>, <ph id="ph4">`String`</ph>, or <ph id="ph5">`Object`</ph> that cannot be successfully converted to a number.</source>
          <target state="translated">Elle retourne <ph id="ph1">`False`</ph> si <ph id="ph2">`Expression`</ph> est un <ph id="ph3">`Char`</ph>, <ph id="ph4">`String`</ph>, ou <ph id="ph5">`Object`</ph> qui ne peut pas être correctement converti en un nombre.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)">
          <source>The following example uses the <ph id="ph1">`IsNumeric`</ph> function to determine if the contents of a variable can be evaluated as a number.</source>
          <target state="translated">L’exemple suivant utilise le <ph id="ph1">`IsNumeric`</ph> fonction pour déterminer si le contenu d’une variable peut être évalué comme un nombre.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.IsReference(System.Object)">
          <source>Required.</source>
          <target state="translated">Obligatoire.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.IsReference(System.Object)">
          <source><ph id="ph1">&lt;see langword="Object" /&gt;</ph> expression.</source>
          <target state="translated">Expression <ph id="ph1">&lt;see langword="Object" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.IsReference(System.Object)">
          <source>Returns a <ph id="ph1">&lt;see langword="Boolean" /&gt;</ph> value indicating whether an expression evaluates to a reference type.</source>
          <target state="translated">Retourne une valeur <ph id="ph1">&lt;see langword="Boolean" /&gt;</ph> indiquant si une expression correspond à un type référence.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.IsReference(System.Object)">
          <source>Returns a <ph id="ph1">&lt;see langword="Boolean" /&gt;</ph> value indicating whether an expression evaluates to a reference type.</source>
          <target state="translated">Retourne une valeur <ph id="ph1">&lt;see langword="Boolean" /&gt;</ph> indiquant si une expression correspond à un type référence.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.IsReference(System.Object)">
          <source><ph id="ph1">`IsReference`</ph> returns <ph id="ph2">`True`</ph> if <ph id="ph3">`Expression`</ph> represents a reference type, such as a class instance, a <ph id="ph4">`String`</ph> type, or an array of any type; otherwise, it returns <ph id="ph5">`False`</ph>.</source>
          <target state="translated"><ph id="ph1">`IsReference`</ph> Retourne <ph id="ph2">`True`</ph> si <ph id="ph3">`Expression`</ph> représente un type de référence, comme une instance de classe, un <ph id="ph4">`String`</ph> type, ou un tableau de n’importe quel type ; sinon, elle retourne <ph id="ph5">`False`</ph>.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.IsReference(System.Object)">
          <source>A reference type contains a pointer to data stored elsewhere in memory.</source>
          <target state="translated">Un type référence contient un pointeur vers les données stockées dans la mémoire.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.IsReference(System.Object)">
          <source>A value type contains its own data.</source>
          <target state="translated">Un type valeur contient ses propres données.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.IsReference(System.Object)">
          <source>This example uses the <ph id="ph1">`IsReference`</ph> function to check if several variables refer to reference types.</source>
          <target state="translated">Cet exemple utilise le <ph id="ph1">`IsReference`</ph> fonction pour vérifier si plusieurs variables font référence aux types référence.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.IsReference(System.Object)">
          <source>In the preceding example, the first three calls to <ph id="ph1">`IsReference`</ph> return <ph id="ph2">`True`</ph>.</source>
          <target state="translated">Dans l’exemple précédent, les trois premiers appels à <ph id="ph1">`IsReference`</ph> retourner <ph id="ph2">`True`</ph>.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.IsReference(System.Object)">
          <source>The last call returns <ph id="ph1">`False`</ph>, because <ph id="ph2">`Integer`</ph> is a value type, not a reference type.</source>
          <target state="translated">Le dernier appel retourne <ph id="ph1">`False`</ph>, car <ph id="ph2">`Integer`</ph> est un type valeur, et non un type référence.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)">
          <source>Required.</source>
          <target state="translated">Obligatoire.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)">
          <source>Array of any data type.</source>
          <target state="translated">Tableau de tout type de données.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)">
          <source>The array in which you want to find the lowest possible subscript of a dimension.</source>
          <target state="translated">Tableau dans lequel vous voulez trouver le plus petit indice possible d'une dimension.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)">
          <source>Optional.</source>
          <target state="translated">Optionnel.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;see langword="Integer" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Integer" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)">
          <source>The dimension for which the lowest possible subscript is to be returned.</source>
          <target state="translated">Dimension pour laquelle le plus petit indice possible doit être retourné.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)">
          <source>Use 1 for the first dimension, 2 for the second, and so on.</source>
          <target state="translated">Utilisez la valeur 1 pour la première dimension, la valeur 2 pour la deuxième, etc.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>Rank<ept id="p1">&lt;/c&gt;</ept> is omitted, 1 is assumed.</source>
          <target state="translated">Si <bpt id="p1">&lt;c&gt;</bpt>Rank<ept id="p1">&lt;/c&gt;</ept> est omis, la valeur 1 est utilisée par défaut.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)">
          <source>Returns the lowest available subscript for the indicated dimension of an array.</source>
          <target state="translated">Retourne le plus petit indice disponible pour la dimension indiquée d'un tableau.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;see langword="Integer" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Integer" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)">
          <source>The lowest value the subscript for the specified dimension can contain.</source>
          <target state="translated">Valeur la plus basse que l'indice de la dimension spécifiée peut contenir.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;see langword="LBound" /&gt;</ph> always returns 0 as long as <ph id="ph2">&lt;paramref name="Array" /&gt;</ph> has been initialized, even if it has no elements, for example if it is a zero-length string.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="LBound" /&gt;</ph> retourne toujours 0 à condition que <ph id="ph2">&lt;paramref name="Array" /&gt;</ph> ait été initialisé, même s'il n'a pas d'éléments, par exemple s'il s'agit d'une chaîne de longueur nulle.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)">
          <source>If <ph id="ph1">&lt;paramref name="Array" /&gt;</ph> is <ph id="ph2">&lt;see langword="Nothing" /&gt;</ph>, <ph id="ph3">&lt;see langword="LBound" /&gt;</ph> throws an <ph id="ph4">&lt;see cref="T:System.ArgumentNullException" /&gt;</ph>.</source>
          <target state="translated">Si <ph id="ph1">&lt;paramref name="Array" /&gt;</ph> est <ph id="ph2">&lt;see langword="Nothing" /&gt;</ph>, <ph id="ph3">&lt;see langword="LBound" /&gt;</ph> lève une <ph id="ph4">&lt;see cref="T:System.ArgumentNullException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)">
          <source>Since array subscripts start at 0, the lowest available subscript for every dimension is always 0.</source>
          <target state="translated">Compte tenu que les indices de tableau commencent à 0, le plus petit indice disponible pour chaque dimension est toujours 0.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)">
          <source>For an array with the following dimensions, <ph id="ph1">`LBound`</ph> returns the values in the following table:</source>
          <target state="translated">Pour un tableau avec les dimensions suivantes, <ph id="ph1">`LBound`</ph> renvoie les valeurs dans le tableau suivant :</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)">
          <source>Call to LBound</source>
          <target state="translated">Appel à LBound</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)">
          <source>Return value</source>
          <target state="translated">Valeur de retour</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)">
          <source>0</source>
          <target state="translated">0</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)">
          <source>0</source>
          <target state="translated">0</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)">
          <source>0</source>
          <target state="translated">0</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)">
          <source>The following example uses the <ph id="ph1">`LBound`</ph> function to determine the lowest available subscript for the indicated dimension of an array.</source>
          <target state="translated">L’exemple suivant utilise le <ph id="ph1">`LBound`</ph> afin de déterminer le plus petit indice disponible pour la dimension indiquée d’un tableau.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="Array" /&gt;</ph> is <ph id="ph2">&lt;see langword="Nothing" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="Array" /&gt;</ph> est <ph id="ph2">&lt;see langword="Nothing" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="Rank" /&gt;</ph> less than 1, or <ph id="ph2">&lt;paramref name="Rank" /&gt;</ph> is greater than the rank of <ph id="ph3">&lt;paramref name="Array" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="Rank" /&gt;</ph> est inférieur à 1 ou <ph id="ph2">&lt;paramref name="Rank" /&gt;</ph> est supérieur au rang de <ph id="ph3">&lt;paramref name="Array" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)">
          <source>Required.</source>
          <target state="translated">Obligatoire.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)">
          <source>A whole number in the range 0–15.</source>
          <target state="translated">Nombre entier compris entre 0 et 15.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)">
          <source>Returns an <ph id="ph1">&lt;see langword="Integer" /&gt;</ph> value representing the RGB color code corresponding to the specified color number.</source>
          <target state="translated">Retourne une valeur <ph id="ph1">&lt;see langword="Integer" /&gt;</ph> représentant le code couleur RVB correspondant au nombre de couleurs spécifié.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)">
          <source>Returns an <ph id="ph1">&lt;see langword="Integer" /&gt;</ph> value representing the RGB color code corresponding to the specified color number.</source>
          <target state="translated">Retourne une valeur <ph id="ph1">&lt;see langword="Integer" /&gt;</ph> représentant le code couleur RVB correspondant au nombre de couleurs spécifié.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)">
          <source>Starting with the least-significant byte, the returned value specifies the red, green, and blue values used to set the appropriate color in the RGB system used by the Visual Basic language.</source>
          <target state="translated">À compter de l’octet le moins significatif, la valeur retournée spécifie les valeurs de rouges, verts et bleus utilisées pour définir la couleur appropriée dans le système RVB utilisé par le langage Visual Basic.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)">
          <source>The <ph id="ph1">`Color`</ph> argument has these settings.</source>
          <target state="translated">Le <ph id="ph1">`Color`</ph> argument possède les paramètres.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)">
          <source>Number</source>
          <target state="translated">Nombre</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)">
          <source>Color</source>
          <target state="translated">Color</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)">
          <source>Number</source>
          <target state="translated">nombre</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)">
          <source>Color</source>
          <target state="translated">Color</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)">
          <source>0</source>
          <target state="translated">0</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)">
          <source>Black</source>
          <target state="translated">Noir</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)">
          <source>8</source>
          <target state="translated">8</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)">
          <source>Gray</source>
          <target state="translated">Gris</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)">
          <source>1</source>
          <target state="translated">1</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)">
          <source>Blue</source>
          <target state="translated">Bleu</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)">
          <source>9</source>
          <target state="translated">9</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)">
          <source>Light blue</source>
          <target state="translated">Bleu clair</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)">
          <source>2</source>
          <target state="translated">2</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)">
          <source>Green</source>
          <target state="translated">Vert</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)">
          <source>10</source>
          <target state="translated">10</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)">
          <source>Light green</source>
          <target state="translated">Vert clair</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)">
          <source>3</source>
          <target state="translated">3</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)">
          <source>Cyan</source>
          <target state="translated">cyan</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)">
          <source>11</source>
          <target state="translated">11</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)">
          <source>Light cyan</source>
          <target state="translated">Cyan clair</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)">
          <source>4</source>
          <target state="translated">4</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)">
          <source>Red</source>
          <target state="translated">Rouge</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)">
          <source>12</source>
          <target state="translated">12</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)">
          <source>Light red</source>
          <target state="translated">Rouge clair</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)">
          <source>5</source>
          <target state="translated">5</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)">
          <source>Magenta</source>
          <target state="translated">Magenta</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)">
          <source>13</source>
          <target state="translated">13</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)">
          <source>Light magenta</source>
          <target state="translated">Magenta clair</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)">
          <source>6</source>
          <target state="translated">6</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)">
          <source>Yellow</source>
          <target state="translated">Jaune</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)">
          <source>14</source>
          <target state="translated">14</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)">
          <source>Light yellow</source>
          <target state="translated">Jaune clair</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)">
          <source>7</source>
          <target state="translated">7</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)">
          <source>White</source>
          <target state="translated">Blanc</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)">
          <source>15</source>
          <target state="translated">15</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)">
          <source>Bright white</source>
          <target state="translated">Blanc brillant</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)">
          <source>This example uses the <ph id="ph1">`QBColor`</ph> function to change to the color indicated by <ph id="ph2">`colorInteger`</ph>.</source>
          <target state="translated">Cet exemple utilise le <ph id="ph1">`QBColor`</ph> fonction à modifier la couleur indiquée par <ph id="ph2">`colorInteger`</ph>.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)">
          <source><ph id="ph1">`QBColor`</ph> accepts integer values between 0 and 15.</source>
          <target state="translated"><ph id="ph1">`QBColor`</ph> accepte les valeurs de nombre entier compris entre 0 et 15.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="Color" /&gt;</ph> is outside of range 0 to 15, inclusive.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="Color" /&gt;</ph> est en dehors de la plage comprise entre 0 et 15 inclus.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)">
          <source>Required.</source>
          <target state="translated">Obligatoire.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;see langword="Integer" /&gt;</ph> in the range 0–255, inclusive, that represents the intensity of the red component of the color.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Integer" /&gt;</ph> de 0 à 255 inclus représentant l'intensité de la composante rouge de la couleur.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)">
          <source>Required.</source>
          <target state="translated">Obligatoire.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;see langword="Integer" /&gt;</ph> in the range 0–255, inclusive, that represents the intensity of the green component of the color.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Integer" /&gt;</ph> de 0 à 255 inclus représentant l'intensité de la composante verte de la couleur.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)">
          <source>Required.</source>
          <target state="translated">Obligatoire.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;see langword="Integer" /&gt;</ph> in the range 0–255, inclusive, that represents the intensity of the blue component of the color.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Integer" /&gt;</ph> de 0 à 255 inclus représentant l'intensité de la composante bleue de la couleur.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)">
          <source>Returns an <ph id="ph1">&lt;see langword="Integer" /&gt;</ph> value representing an RGB color value from a set of red, green and blue color components.</source>
          <target state="translated">Retourne une valeur <ph id="ph1">&lt;see langword="Integer" /&gt;</ph> représentant une valeur de couleur RVB à partir d'un ensemble de composantes de couleur rouge, vert et bleu.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)">
          <source>Returns an <ph id="ph1">&lt;see langword="Integer" /&gt;</ph> value representing an RGB color value from a set of red, green and blue color components.</source>
          <target state="translated">Retourne une valeur <ph id="ph1">&lt;see langword="Integer" /&gt;</ph> représentant une valeur de couleur RVB à partir d'un ensemble de composantes de couleur rouge, vert et bleu.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)">
          <source>Application methods and properties that accept a color specification expect that specification to be a number representing an RGB color value.</source>
          <target state="translated">Méthodes de l’application et les propriétés qui acceptent une spécification s’attendre à être un nombre représentant un RVB de couleur.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)">
          <source>An RGB color value specifies the relative intensity of red, green, and blue to cause a specific color to be displayed.</source>
          <target state="translated">Une valeur de couleur RVB Spécifie l’intensité relative du rouge, vert et bleu dans une couleur spécifique à afficher.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)">
          <source>If the value for any argument to <ph id="ph1">`RGB`</ph> is greater than 255, 255 is used.</source>
          <target state="translated">Si la valeur d’un argument <ph id="ph1">`RGB`</ph> est supérieur à 255, 255 est utilisée.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)">
          <source>The following table lists some standard colors and the red, green, and blue values they include.</source>
          <target state="translated">Le tableau suivant répertorie les couleurs standard et les valeurs de rouges, verts et bleus, qu'ils comprennent.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)">
          <source>Color</source>
          <target state="translated">Color</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)">
          <source>Red value</source>
          <target state="translated">Valeur rouge</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)">
          <source>Green value</source>
          <target state="translated">Valeur de vert</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)">
          <source>Blue value</source>
          <target state="translated">Valeur de bleu</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)">
          <source>Black</source>
          <target state="translated">Noir</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)">
          <source>0</source>
          <target state="translated">0</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)">
          <source>0</source>
          <target state="translated">0</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)">
          <source>0</source>
          <target state="translated">0</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)">
          <source>Blue</source>
          <target state="translated">Bleu</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)">
          <source>0</source>
          <target state="translated">0</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)">
          <source>0</source>
          <target state="translated">0</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)">
          <source>255</source>
          <target state="translated">255</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)">
          <source>Green</source>
          <target state="translated">Vert</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)">
          <source>0</source>
          <target state="translated">0</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)">
          <source>255</source>
          <target state="translated">255</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)">
          <source>0</source>
          <target state="translated">0</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)">
          <source>Cyan</source>
          <target state="translated">cyan</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)">
          <source>0</source>
          <target state="translated">0</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)">
          <source>255</source>
          <target state="translated">255</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)">
          <source>255</source>
          <target state="translated">255</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)">
          <source>Red</source>
          <target state="translated">Rouge</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)">
          <source>255</source>
          <target state="translated">255</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)">
          <source>0</source>
          <target state="translated">0</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)">
          <source>0</source>
          <target state="translated">0</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)">
          <source>Magenta</source>
          <target state="translated">Magenta</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)">
          <source>255</source>
          <target state="translated">255</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)">
          <source>0</source>
          <target state="translated">0</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)">
          <source>255</source>
          <target state="translated">255</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)">
          <source>Yellow</source>
          <target state="translated">Jaune</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)">
          <source>255</source>
          <target state="translated">255</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)">
          <source>255</source>
          <target state="translated">255</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)">
          <source>0</source>
          <target state="translated">0</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)">
          <source>White</source>
          <target state="translated">Blanc</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)">
          <source>255</source>
          <target state="translated">255</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)">
          <source>255</source>
          <target state="translated">255</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)">
          <source>255</source>
          <target state="translated">255</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)">
          <source>This example shows how the <ph id="ph1">`RGB`</ph> function is used to return a whole number representing an <ph id="ph2">`RGB`</ph> color value.</source>
          <target state="translated">Cet exemple montre comment la <ph id="ph1">`RGB`</ph> fonction est utilisée pour retourner un nombre entier représentant un <ph id="ph2">`RGB`</ph> valeur de couleur.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="Green" /&gt;</ph>, <ph id="ph2">&lt;paramref name="Blue" /&gt;</ph>, or <ph id="ph3">&lt;paramref name="Red" /&gt;</ph> is outside of range 0 to 255, inclusive.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="Green" /&gt;</ph>, <ph id="ph2">&lt;paramref name="Blue" /&gt;</ph> ou <ph id="ph3">&lt;paramref name="Red" /&gt;</ph> est en dehors de la plage comprise entre 0 et 255 inclus.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.SystemTypeName(System.String)">
          <source>Required.</source>
          <target state="translated">Obligatoire.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.SystemTypeName(System.String)">
          <source>A <ph id="ph1">&lt;see langword="String" /&gt;</ph> variable containing a Visual Basic type name.</source>
          <target state="translated">Variable <ph id="ph1">&lt;see langword="String" /&gt;</ph> contenant un nom de type Visual Basic.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.SystemTypeName(System.String)">
          <source>Returns a <ph id="ph1">&lt;see langword="String" /&gt;</ph> value containing the system data type name of a variable.</source>
          <target state="translated">Retourne une valeur <ph id="ph1">&lt;see langword="String" /&gt;</ph> contenant le nom du type de données système d'une variable.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.SystemTypeName(System.String)">
          <source>Returns a <ph id="ph1">&lt;see langword="String" /&gt;</ph> value containing the system data type name of a variable.</source>
          <target state="translated">Retourne une valeur <ph id="ph1">&lt;see langword="String" /&gt;</ph> contenant le nom du type de données système d'une variable.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.SystemTypeName(System.String)">
          <source><ph id="ph1">`SystemTypeName`</ph> returns the fully qualified common language runtime (CLR) type name corresponding to the Visual Basic type name.</source>
          <target state="translated"><ph id="ph1">`SystemTypeName`</ph> Retourne le nom qualifié complet common language runtime (CLR) type correspondant au nom de type Visual Basic.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.SystemTypeName(System.String)">
          <source>For example, if <ph id="ph1">`VbName`</ph> contains "Date", <ph id="ph2">`SystemTypeName`</ph> returns "System.DateTime".</source>
          <target state="translated">Par exemple, si <ph id="ph1">`VbName`</ph> contient « Date », <ph id="ph2">`SystemTypeName`</ph> retourne « System.DateTime ».</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.SystemTypeName(System.String)">
          <source>If <ph id="ph1">`SystemTypeName`</ph> does not recognize the value of <ph id="ph2">`VbName`</ph>, it returns <ph id="ph3">`Nothing`</ph> (not the string "Nothing").</source>
          <target state="translated">Si <ph id="ph1">`SystemTypeName`</ph> ne reconnaît pas la valeur de <ph id="ph2">`VbName`</ph>, elle retourne <ph id="ph3">`Nothing`</ph> (pas la chaîne « Nothing »).</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.SystemTypeName(System.String)">
          <source>The following example uses the <ph id="ph1">`SystemTypeName`</ph> function to return data type names for several variables.</source>
          <target state="translated">L’exemple suivant utilise le <ph id="ph1">`SystemTypeName`</ph> fonction pour retourner les noms de type de données de plusieurs variables.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.TypeName(System.Object)">
          <source>Required.</source>
          <target state="translated">Obligatoire.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.TypeName(System.Object)">
          <source><ph id="ph1">&lt;see langword="Object" /&gt;</ph> variable.</source>
          <target state="translated">Variable <ph id="ph1">&lt;see langword="Object" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.TypeName(System.Object)">
          <source>If <ph id="ph1">&lt;see langword="Option Strict" /&gt;</ph> is <ph id="ph2">&lt;see langword="Off" /&gt;</ph>, you can pass a variable of any data type except a structure.</source>
          <target state="translated">Si <ph id="ph1">&lt;see langword="Option Strict" /&gt;</ph> est <ph id="ph2">&lt;see langword="Off" /&gt;</ph>, vous pouvez passer une variable de tout type de données, à l'exception d'une structure.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.TypeName(System.Object)">
          <source>Returns a <ph id="ph1">&lt;see langword="String" /&gt;</ph> value containing data-type information about a variable.</source>
          <target state="translated">Retourne une valeur <ph id="ph1">&lt;see langword="String" /&gt;</ph> contenant des informations sur le type de données d'une variable.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.TypeName(System.Object)">
          <source>Returns a <ph id="ph1">&lt;see langword="String" /&gt;</ph> value containing data-type information about a variable.</source>
          <target state="translated">Retourne une valeur <ph id="ph1">&lt;see langword="String" /&gt;</ph> contenant des informations sur le type de données d'une variable.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.TypeName(System.Object)">
          <source>The following table shows the <ph id="ph1">`String`</ph> values returned by <ph id="ph2">`TypeName`</ph> for different contents of <ph id="ph3">`VarName`</ph>.</source>
          <target state="translated">Le tableau suivant présente la <ph id="ph1">`String`</ph> valeurs retournées par <ph id="ph2">`TypeName`</ph> pour divers contenus de <ph id="ph3">`VarName`</ph>.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.TypeName(System.Object)">
          <source><ph id="ph1">`VarName`</ph> contents</source>
          <target state="translated"><ph id="ph1">`VarName`</ph> Contenu</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.TypeName(System.Object)">
          <source>String returned</source>
          <target state="translated">Chaîne retournée</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.TypeName(System.Object)">
          <source>16-bit <ph id="ph1">`True`</ph> or <ph id="ph2">`False`</ph> value type</source>
          <target state="translated">16 bits <ph id="ph1">`True`</ph> ou <ph id="ph2">`False`</ph> type valeur</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.TypeName(System.Object)">
          <source>"Boolean"</source>
          <target state="translated">« Boolean »</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.TypeName(System.Object)">
          <source>8-bit binary value type</source>
          <target state="translated">type de valeur binaire 8 bits</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.TypeName(System.Object)">
          <source>"Byte"</source>
          <target state="translated">"Byte"</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.TypeName(System.Object)">
          <source>16-bit character value type</source>
          <target state="translated">type de valeur de caractère 16 bits</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.TypeName(System.Object)">
          <source>"Char"</source>
          <target state="translated">"Char"</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.TypeName(System.Object)">
          <source>64-bit date and time value type</source>
          <target state="translated">type de valeur 64 bits date et heure</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.TypeName(System.Object)">
          <source>"Date"</source>
          <target state="translated">« Date »</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.TypeName(System.Object)">
          <source>Reference type indicating missing or nonexistent data</source>
          <target state="translated">Type de référence indiquant des données manquantes ou inexistantes</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.TypeName(System.Object)">
          <source>"DBNull"</source>
          <target state="translated">"DBNull"</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.TypeName(System.Object)">
          <source>128-bit fixed-point numeric value type</source>
          <target state="translated">type de valeur numérique de 128 bits à virgule fixe</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.TypeName(System.Object)">
          <source>"Decimal"</source>
          <target state="translated">« Décimal »</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.TypeName(System.Object)">
          <source>64-bit floating-point numeric value type</source>
          <target state="translated">type de valeur numérique à virgule flottante de 64 bits</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.TypeName(System.Object)">
          <source>"Double"</source>
          <target state="translated">"Double"</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.TypeName(System.Object)">
          <source>32-bit integer value type</source>
          <target state="translated">type de valeur d’entier 32 bits</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.TypeName(System.Object)">
          <source>"Integer"</source>
          <target state="translated">Le type « integer »</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.TypeName(System.Object)">
          <source>Reference type pointing to an unspecialized object</source>
          <target state="translated">Type référence pointant vers un objet non spécialisé</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.TypeName(System.Object)">
          <source>"Object"</source>
          <target state="translated">"Object"</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.TypeName(System.Object)">
          <source>Reference type pointing to a specialized object created from class <bpt id="p1">*</bpt>objectclass<ept id="p1">*</ept></source>
          <target state="translated">Type de référence qui pointe vers un objet spécialisé créé à partir de la classe <bpt id="p1">*</bpt>objectclass<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.TypeName(System.Object)">
          <source>"<bpt id="p1">*</bpt>objectclass<ept id="p1">*</ept>"</source>
          <target state="translated">"<bpt id="p1">*</bpt>objectclass<ept id="p1">*</ept>"</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.TypeName(System.Object)">
          <source>64-bit integer value type</source>
          <target state="translated">type de valeur d’entier 64 bits</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.TypeName(System.Object)">
          <source>"Long"</source>
          <target state="translated">« Long »</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.TypeName(System.Object)">
          <source>Reference type with no object currently assigned to it</source>
          <target state="translated">Type de référence à aucun objet actuellement assigné</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.TypeName(System.Object)">
          <source>"Nothing"</source>
          <target state="translated">« Nothing »</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.TypeName(System.Object)">
          <source>8-bit signed integer value type</source>
          <target state="translated">type de valeur d’entier signé 8 bits</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.TypeName(System.Object)">
          <source>"SByte"</source>
          <target state="translated">"SByte"</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.TypeName(System.Object)">
          <source>16-bit integer value type</source>
          <target state="translated">type de valeur d’entier 16 bits</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.TypeName(System.Object)">
          <source>"Short"</source>
          <target state="translated">"Short"</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.TypeName(System.Object)">
          <source>32-bit floating-point numeric value type</source>
          <target state="translated">type de valeur numérique à virgule flottante de 32 bits</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.TypeName(System.Object)">
          <source>"Single"</source>
          <target state="translated">« Unique »</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.TypeName(System.Object)">
          <source>Reference type pointing to a string of 16-bit characters</source>
          <target state="translated">Type référence pointant vers une chaîne de caractères de 16 bits</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.TypeName(System.Object)">
          <source>"String"</source>
          <target state="translated">« Chaîne »</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.TypeName(System.Object)">
          <source>32-bit unsigned integer value type</source>
          <target state="translated">type de valeur d’entier non signé 32 bits</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.TypeName(System.Object)">
          <source>"UInteger"</source>
          <target state="translated">« UInteger »</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.TypeName(System.Object)">
          <source>64-bit unsigned integer value type</source>
          <target state="translated">type de valeur d’entier non signé 64 bits</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.TypeName(System.Object)">
          <source>"ULong"</source>
          <target state="translated">« ULong »</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.TypeName(System.Object)">
          <source>16-bit unsigned integer value type</source>
          <target state="translated">type de valeur d’entier non signé 16 bits.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.TypeName(System.Object)">
          <source>"UShort"</source>
          <target state="translated">« UShort »</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.TypeName(System.Object)">
          <source>If <ph id="ph1">`VarName`</ph> is an array, the returned string can be any one of the strings in the preceding table with empty parentheses appended.</source>
          <target state="translated">Si <ph id="ph1">`VarName`</ph> est un tableau, la chaîne retournée peut être l’une des chaînes dans le tableau précédent avec des parenthèses vides.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.TypeName(System.Object)">
          <source>For example, if <ph id="ph1">`VarName`</ph> points to an array of integers, <ph id="ph2">`TypeName`</ph> returns "Integer()".</source>
          <target state="translated">Par exemple, si <ph id="ph1">`VarName`</ph> pointe vers un tableau d’entiers, <ph id="ph2">`TypeName`</ph> retourne « Integer() ».</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.TypeName(System.Object)">
          <source>When <ph id="ph1">`TypeName`</ph> returns the name of a reference type such as a class, it returns only the name itself, not the qualified name.</source>
          <target state="translated">Lorsque <ph id="ph1">`TypeName`</ph> renvoie le nom d’un type référence tel qu’une classe, elle retourne uniquement le nom lui-même, pas le nom qualifié.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.TypeName(System.Object)">
          <source>For example, if <ph id="ph1">`VarName`</ph> points to an object of class <ph id="ph2">&lt;xref:System.Drawing.Printing.PaperSource?displayProperty=nameWithType&gt;</ph>, <ph id="ph3">`TypeName`</ph> returns "PaperSource".</source>
          <target state="translated">Par exemple, si <ph id="ph1">`VarName`</ph> pointe vers un objet de classe <ph id="ph2">&lt;xref:System.Drawing.Printing.PaperSource?displayProperty=nameWithType&gt;</ph>, <ph id="ph3">`TypeName`</ph> retourne « PaperSource ».</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.TypeName(System.Object)">
          <source>Note that if the variable is declared to be of a certain class type but does not have an object assigned to it, <ph id="ph1">`TypeName`</ph> returns "Nothing".</source>
          <target state="translated">Notez que si la variable est déclarée comme étant d’un certain type de classe, mais n’a pas d’un objet qui lui est affecté, <ph id="ph1">`TypeName`</ph> renvoie « Nothing ».</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.TypeName(System.Object)">
          <source>The following example uses the <ph id="ph1">`TypeName`</ph> function to return data type information about several variables.</source>
          <target state="translated">L’exemple suivant utilise le <ph id="ph1">`TypeName`</ph> fonction pour retourner des informations de type de données concernant plusieurs variables.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)">
          <source>Required.</source>
          <target state="translated">Obligatoire.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)">
          <source>Array of any data type.</source>
          <target state="translated">Tableau de tout type de données.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)">
          <source>The array in which you want to find the highest possible subscript of a dimension.</source>
          <target state="translated">Tableau dans lequel vous voulez trouver le plus grand indice possible d'une dimension.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)">
          <source>Optional.</source>
          <target state="translated">Optionnel.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;see langword="Integer" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Integer" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)">
          <source>The dimension for which the highest possible subscript is to be returned.</source>
          <target state="translated">Dimension pour laquelle le plus grand indice possible doit être retourné.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)">
          <source>Use 1 for the first dimension, 2 for the second, and so on.</source>
          <target state="translated">Utilisez la valeur 1 pour la première dimension, la valeur 2 pour la deuxième, etc.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>Rank<ept id="p1">&lt;/c&gt;</ept> is omitted, 1 is assumed.</source>
          <target state="translated">Si <bpt id="p1">&lt;c&gt;</bpt>Rank<ept id="p1">&lt;/c&gt;</ept> est omis, la valeur 1 est utilisée par défaut.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)">
          <source>Returns the highest available subscript for the indicated dimension of an array.</source>
          <target state="translated">Retourne le plus grand indice disponible pour la dimension indiquée d'un tableau.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;see langword="Integer" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Integer" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)">
          <source>The highest value the subscript for the specified dimension can contain.</source>
          <target state="translated">Valeur la plus élevée que l'indice pour la dimension spécifiée peut contenir.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)">
          <source>If <ph id="ph1">&lt;paramref name="Array" /&gt;</ph> has only one element, <ph id="ph2">&lt;see langword="UBound" /&gt;</ph> returns 0.</source>
          <target state="translated">Si <ph id="ph1">&lt;paramref name="Array" /&gt;</ph> a un seul élément, <ph id="ph2">&lt;see langword="UBound" /&gt;</ph> retourne 0.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)">
          <source>If <ph id="ph1">&lt;paramref name="Array" /&gt;</ph> has no elements, for example if it is a zero-length string, <ph id="ph2">&lt;see langword="UBound" /&gt;</ph> returns -1.</source>
          <target state="translated">Si <ph id="ph1">&lt;paramref name="Array" /&gt;</ph> n'a pas d'éléments, par exemple si c'est une chaîne de longueur nulle, <ph id="ph2">&lt;see langword="UBound" /&gt;</ph> retourne -1.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)">
          <source>Since array subscripts start at 0, the length of a dimension is greater by one than the highest available subscript for that dimension.</source>
          <target state="translated">Étant donné que les indices de tableau commencent à 0, la longueur d’une dimension est supérieure d’un à l’indice le plus élevé disponible pour cette dimension.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)">
          <source>For an array with the following dimensions, <ph id="ph1">`UBound`</ph> returns the values in the following table:</source>
          <target state="translated">Pour un tableau avec les dimensions suivantes, <ph id="ph1">`UBound`</ph> renvoie les valeurs dans le tableau suivant :</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)">
          <source>Call to UBound</source>
          <target state="translated">Appel à UBound</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)">
          <source>Return value</source>
          <target state="translated">Valeur de retour</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)">
          <source>100</source>
          <target state="translated">100</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)">
          <source>5</source>
          <target state="translated">5</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)">
          <source>4</source>
          <target state="translated">4</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)">
          <source>You can use <ph id="ph1">`UBound`</ph> to determine the total number of elements in an array, but you must adjust the value it returns to account for the fact that the subscripts start at 0.</source>
          <target state="translated">Vous pouvez utiliser <ph id="ph1">`UBound`</ph> pour déterminer le total nombre d’éléments dans un tableau, mais vous devez ajuster la valeur de retour pour tenir compte du fait que les indices commencent à 0.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)">
          <source>The following example calculates the total size of the array <ph id="ph1">`a`</ph> in the preceding example:</source>
          <target state="translated">L’exemple suivant calcule la taille totale du tableau <ph id="ph1">`a`</ph> dans l’exemple précédent :</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)">
          <source>The value calculated for <ph id="ph1">`total`</ph> is 3030, which is 101 * 6 * 5.</source>
          <target state="translated">La valeur calculée pour <ph id="ph1">`total`</ph> est 3030, c'est-à-dire 101 * 6 * 5.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)">
          <source>The following example uses the <ph id="ph1">`UBound`</ph> function to determine the highest available subscript for the indicated dimension of an array.</source>
          <target state="translated">L’exemple suivant utilise le <ph id="ph1">`UBound`</ph> afin de déterminer le plus grand indice disponible pour la dimension indiquée d’un tableau.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="Array" /&gt;</ph> is <ph id="ph2">&lt;see langword="Nothing" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="Array" /&gt;</ph> est <ph id="ph2">&lt;see langword="Nothing" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="Rank" /&gt;</ph> is less than 1, or <ph id="ph2">&lt;paramref name="Rank" /&gt;</ph> is greater than the rank of <ph id="ph3">&lt;paramref name="Array" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="Rank" /&gt;</ph> est inférieur à 1 ou <ph id="ph2">&lt;paramref name="Rank" /&gt;</ph> est supérieur au rang de <ph id="ph3">&lt;paramref name="Array" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.VarType(System.Object)">
          <source>Required.</source>
          <target state="translated">Obligatoire.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.VarType(System.Object)">
          <source><ph id="ph1">&lt;see langword="Object" /&gt;</ph> variable.</source>
          <target state="translated">Variable <ph id="ph1">&lt;see langword="Object" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.VarType(System.Object)">
          <source>If <ph id="ph1">&lt;see langword="Option Strict" /&gt;</ph> is <ph id="ph2">&lt;see langword="Off" /&gt;</ph>, you can pass a variable of any data type except a structure.</source>
          <target state="translated">Si <ph id="ph1">&lt;see langword="Option Strict" /&gt;</ph> est <ph id="ph2">&lt;see langword="Off" /&gt;</ph>, vous pouvez passer une variable de tout type de données, à l'exception d'une structure.</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.VarType(System.Object)">
          <source>Returns an <ph id="ph1">&lt;see langword="Integer" /&gt;</ph> value containing the data type classification of a variable.</source>
          <target state="translated">Retourne une valeur <ph id="ph1">&lt;see langword="Integer" /&gt;</ph> contenant la classification de type de données d'une variable.</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.VarType(System.Object)">
          <source>Returns an <ph id="ph1">&lt;see langword="Integer" /&gt;</ph> value containing the data type classification of a variable.</source>
          <target state="translated">Retourne une valeur <ph id="ph1">&lt;see langword="Integer" /&gt;</ph> contenant la classification de type de données d'une variable.</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.VarType(System.Object)">
          <source>The integer value returned by <ph id="ph1">`VarType`</ph> is a member of the <ph id="ph2">&lt;xref:Microsoft.VisualBasic.VariantType&gt;</ph>.</source>
          <target state="translated">La valeur entière retournée par <ph id="ph1">`VarType`</ph> est un membre de la <ph id="ph2">&lt;xref:Microsoft.VisualBasic.VariantType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.VarType(System.Object)">
          <source>The following table shows the values returned by <ph id="ph1">`VarType`</ph> for special cases of <ph id="ph2">`VarName`</ph>.</source>
          <target state="translated">Le tableau suivant montre les valeurs retournées par <ph id="ph1">`VarType`</ph> pour les cas spéciaux de <ph id="ph2">`VarName`</ph>.</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.VarType(System.Object)">
          <source>Data type represented by <ph id="ph1">`VarName`</ph></source>
          <target state="translated">Type de données représenté par <ph id="ph1">`VarName`</ph></target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.VarType(System.Object)">
          <source>Value returned by <ph id="ph1">`VarType`</ph></source>
          <target state="translated">Valeur retournée par <ph id="ph1">`VarType`</ph></target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.VarType(System.Object)">
          <source><bpt id="p1">[</bpt>Nothing<ept id="p1">](~/docs/visual-basic/language-reference/nothing.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Nothing<ept id="p1">](~/docs/visual-basic/language-reference/nothing.md)</ept></target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.VarType(System.Object)">
          <source>Enumeration</source>
          <target state="translated">Énumération</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.VarType(System.Object)">
          <source>Underlying data type (<ph id="ph1">`SByte`</ph>, <ph id="ph2">`Byte`</ph>, <ph id="ph3">`Short`</ph>, <ph id="ph4">`UShort`</ph>, <ph id="ph5">`Integer`</ph>, <ph id="ph6">`UInteger`</ph>, <ph id="ph7">`Long`</ph>, or <ph id="ph8">`ULong`</ph>)</source>
          <target state="translated">Type de données sous-jacent (<ph id="ph1">`SByte`</ph>, <ph id="ph2">`Byte`</ph>, <ph id="ph3">`Short`</ph>, <ph id="ph4">`UShort`</ph>, <ph id="ph5">`Integer`</ph>, <ph id="ph6">`UInteger`</ph>, <ph id="ph7">`Long`</ph>, ou <ph id="ph8">`ULong`</ph>)</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.VarType(System.Object)">
          <source>Array</source>
          <target state="translated">Tableau</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.VarType(System.Object)">
          <source>Bitwise OR of array element type and <ph id="ph1">`VariantType.Array`</ph></source>
          <target state="translated">Opérateur de bits OR de type d’élément de tableau et <ph id="ph1">`VariantType.Array`</ph></target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.VarType(System.Object)">
          <source>Array of arrays</source>
          <target state="translated">Tableau de tableaux</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.VarType(System.Object)">
          <source>Bitwise OR of <ph id="ph1">`VariantType.Object`</ph> and <ph id="ph2">`VariantType.Array`</ph></source>
          <target state="translated">Opération de bit OR <ph id="ph1">`VariantType.Object`</ph> et <ph id="ph2">`VariantType.Array`</ph></target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.VarType(System.Object)">
          <source>Structure (<ph id="ph1">&lt;xref:System.ValueType?displayProperty=nameWithType&gt;</ph>)</source>
          <target state="translated">Structure (<ph id="ph1">&lt;xref:System.ValueType?displayProperty=nameWithType&gt;</ph>)</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.VarType(System.Object)">
          <source>Unknown</source>
          <target state="translated">Inconnu</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.VarType(System.Object)">
          <source>The following example uses the <ph id="ph1">`VarType`</ph> function to return data type classification information about several variables.</source>
          <target state="translated">L’exemple suivant utilise le <ph id="ph1">`VarType`</ph> fonction pour retourner les informations de classification de type de données concernant plusieurs variables.</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.VbTypeName(System.String)">
          <source>Required.</source>
          <target state="translated">Obligatoire.</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.VbTypeName(System.String)">
          <source><ph id="ph1">&lt;see langword="String" /&gt;</ph> variable containing a type name used by the common language runtime.</source>
          <target state="translated">Variable <ph id="ph1">&lt;see langword="String" /&gt;</ph> contenant un nom de type utilisé par le common language runtime.</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.VbTypeName(System.String)">
          <source>Returns a <ph id="ph1">&lt;see langword="String" /&gt;</ph> value containing the Visual Basic data type name of a variable.</source>
          <target state="translated">Retourne une valeur <ph id="ph1">&lt;see langword="String" /&gt;</ph> contenant le nom du type de données Visual Basic d'une variable.</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Information.VbTypeName(System.String)">
          <source>Returns a <ph id="ph1">&lt;see langword="String" /&gt;</ph> value containing the Visual Basic data type name of a variable.</source>
          <target state="translated">Retourne une valeur <ph id="ph1">&lt;see langword="String" /&gt;</ph> contenant le nom du type de données Visual Basic d'une variable.</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.VbTypeName(System.String)">
          <source><ph id="ph1">`VbTypeName`</ph> returns the Visual Basic type name corresponding to the common language runtime type name.</source>
          <target state="translated"><ph id="ph1">`VbTypeName`</ph> Retourne le nom de type Visual Basic correspondant au nom de type du common language runtime.</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.VbTypeName(System.String)">
          <source>For example, if <ph id="ph1">`UrtName`</ph> contains "Int32" or "System.Int32", <ph id="ph2">`VbTypeName`</ph> returns "Integer".</source>
          <target state="translated">Par exemple, si <ph id="ph1">`UrtName`</ph> contient « Int32 » ou « System.Int32 », <ph id="ph2">`VbTypeName`</ph> retourne « Integer ».</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.VbTypeName(System.String)">
          <source>If <ph id="ph1">`VbTypeName`</ph> does not recognize the value of <ph id="ph2">`UrtName`</ph>, it returns <ph id="ph3">`Nothing`</ph> (not the string "Nothing").</source>
          <target state="translated">Si <ph id="ph1">`VbTypeName`</ph> ne reconnaît pas la valeur de <ph id="ph2">`UrtName`</ph>, elle retourne <ph id="ph3">`Nothing`</ph> (pas la chaîne « Nothing »).</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.VbTypeName(System.String)">
          <source>The type name in <ph id="ph1">`UrtName`</ph> can be obtained from various sources, for example from the <ph id="ph2">&lt;xref:System.Reflection.MemberInfo.Name%2A&gt;</ph> property in the <ph id="ph3">&lt;xref:System.Reflection.MemberInfo&gt;</ph> array of the <ph id="ph4">&lt;xref:System.Type&gt;</ph> class.</source>
          <target state="translated">Le nom de type dans <ph id="ph1">`UrtName`</ph> peut être obtenu à partir de diverses sources, par exemple à partir de la <ph id="ph2">&lt;xref:System.Reflection.MemberInfo.Name%2A&gt;</ph> propriété dans le <ph id="ph3">&lt;xref:System.Reflection.MemberInfo&gt;</ph> tableau de la <ph id="ph4">&lt;xref:System.Type&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Information.VbTypeName(System.String)">
          <source>The following example uses the <ph id="ph1">`VbTypeName`</ph> function to return data type names for several variables.</source>
          <target state="translated">L’exemple suivant utilise le <ph id="ph1">`VbTypeName`</ph> fonction pour retourner les noms de type de données de plusieurs variables.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>