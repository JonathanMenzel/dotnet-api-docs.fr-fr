<Type Name="Collection" FullName="Microsoft.VisualBasic.Collection">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c128e3c8ddbb10572b5b450c8169583d1bcb284d" /><Meta Name="ms.sourcegitcommit" Value="8e213bb5e6801f6e29861ba72664978ad00e34fa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="02/18/2019" /><Meta Name="ms.locfileid" Value="56404147" /></Metadata><TypeSignature Language="C#" Value="public sealed class Collection : System.Collections.IList, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed Collection extends System.Object implements class System.Collections.ICollection, class System.Collections.IList, class System.Runtime.Serialization.IDeserializationCallback, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Collection" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Collection&#xA;Implements IDeserializationCallback, IList, ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Collection sealed : System::Collections::IList, System::Runtime::Serialization::IDeserializationCallback, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type Collection = class&#xA;    interface ICollection&#xA;    interface IList&#xA;    interface ISerializable&#xA;    interface IDeserializationCallback" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IList</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.IDeserializationCallback</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("Count = {Count}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(Microsoft.VisualBasic.Collection/CollectionDebugView))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="8ef50-101">Une <see langword="Collection" /> Visual Basic est un jeu ordonné d’éléments qui peut être considéré collectivement comme une unité.</span><span class="sxs-lookup"><span data-stu-id="8ef50-101">A Visual Basic <see langword="Collection" /> is an ordered set of items that can be referred to as a unit.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="8ef50-102">Si possible, vous devez utiliser les collections génériques dans le <xref:System.Collections.Generic?displayProperty=nameWithType> espace de noms ou le <xref:System.Collections.Concurrent> espace de noms au lieu de Visual Basic `Collection`.</span><span class="sxs-lookup"><span data-stu-id="8ef50-102">Whenever possible, you should use the generic collections in the <xref:System.Collections.Generic?displayProperty=nameWithType> namespace or the <xref:System.Collections.Concurrent> namespace instead of a Visual Basic `Collection`.</span></span> <span data-ttu-id="8ef50-103">Pour plus d’informations, consultez [Collections](https://msdn.microsoft.com/library/e76533a9-5033-4a0b-b003-9c2be60d185b).</span><span class="sxs-lookup"><span data-stu-id="8ef50-103">For more information, see [Collections](https://msdn.microsoft.com/library/e76533a9-5033-4a0b-b003-9c2be60d185b).</span></span>  
  
 <span data-ttu-id="8ef50-104">Visual Basic `Collection` objet offre un moyen pratique pour faire référence à un groupe d’éléments connexes comme un objet unique.</span><span class="sxs-lookup"><span data-stu-id="8ef50-104">The Visual Basic `Collection` object provides a convenient way to refer to a related group of items as a single object.</span></span> <span data-ttu-id="8ef50-105">Les éléments, ou *éléments*, dans une collection doivent seulement être associée par le fait qu’elles existent dans la collection.</span><span class="sxs-lookup"><span data-stu-id="8ef50-105">The items, or *elements*, in a collection need only be related by the fact that they exist in the collection.</span></span> <span data-ttu-id="8ef50-106">Éléments d’une collection n’est pas ont de partager le même type de données.</span><span class="sxs-lookup"><span data-stu-id="8ef50-106">Elements of a collection do not have to share the same data type.</span></span>  
  
 <span data-ttu-id="8ef50-107">Vous pouvez créer une collection de la même façon que vous créez d’autres objets, comme l’illustre l’exemple suivant.</span><span class="sxs-lookup"><span data-stu-id="8ef50-107">You can create a collection the same way you create other objects, as the following example illustrates.</span></span>  
  
```vb  
Dim coll As New Microsoft.VisualBasic.Collection()  
```  
  
 <span data-ttu-id="8ef50-108">Une fois que vous avez créé une collection, vous pouvez effectuer les opérations suivantes :</span><span class="sxs-lookup"><span data-stu-id="8ef50-108">Once you have created a collection, you can do any of the following:</span></span>  
  
-   <span data-ttu-id="8ef50-109">Ajoutez un élément avec la <xref:Microsoft.VisualBasic.Collection.Add%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="8ef50-109">Add an element with the <xref:Microsoft.VisualBasic.Collection.Add%2A> method.</span></span>  
  
-   <span data-ttu-id="8ef50-110">Supprimer un élément avec la <xref:Microsoft.VisualBasic.Collection.Remove%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="8ef50-110">Remove an element with the <xref:Microsoft.VisualBasic.Collection.Remove%2A> method.</span></span>  
  
-   <span data-ttu-id="8ef50-111">Supprimer tous les éléments avec le <xref:Microsoft.VisualBasic.Collection.Clear%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="8ef50-111">Remove all elements with the <xref:Microsoft.VisualBasic.Collection.Clear%2A> method.</span></span>  
  
-   <span data-ttu-id="8ef50-112">Rechercher le nombre d’éléments contenus dans la collection avec le <xref:Microsoft.VisualBasic.Collection.Count%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="8ef50-112">Find out how many elements the collection contains with the <xref:Microsoft.VisualBasic.Collection.Count%2A> property.</span></span>  
  
-   <span data-ttu-id="8ef50-113">Vérifiez si un élément spécifique est présent avec la <xref:Microsoft.VisualBasic.Collection.Contains%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="8ef50-113">Check whether a specific element is present with the <xref:Microsoft.VisualBasic.Collection.Contains%2A> method.</span></span>  
  
-   <span data-ttu-id="8ef50-114">Retourner un élément spécifique de la collection avec le <xref:Microsoft.VisualBasic.Collection.Item%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="8ef50-114">Return a specific element from the collection with the <xref:Microsoft.VisualBasic.Collection.Item%2A> property.</span></span>  
  
-   <span data-ttu-id="8ef50-115">Effectuer une itération dans la collection entière avec le [For Each... L’instruction suivante](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md).</span><span class="sxs-lookup"><span data-stu-id="8ef50-115">Iterate through the entire collection with the [For Each...Next Statement](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md).</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="8ef50-116">Bien que Visual Basic `Collection` objet possède des fonctionnalités identiques à la `Collection` de l’objet dans Visual Basic 6.0, les deux ne peut pas interagir dans un environnement COM.</span><span class="sxs-lookup"><span data-stu-id="8ef50-116">Although the Visual Basic `Collection` object has functionality identical to the `Collection` object in Visual Basic 6.0, the two cannot interoperate in a COM environment.</span></span>  
  
    > [!CAUTION]
    >  <span data-ttu-id="8ef50-117">Itération dans Visual Basic `Collection` n’est pas une procédure thread-safe.</span><span class="sxs-lookup"><span data-stu-id="8ef50-117">Iterating through a Visual Basic `Collection` is not a thread-safe procedure.</span></span> <span data-ttu-id="8ef50-118">Même si la collection est synchronisée, les autres threads peuvent toujours modifier la collection, à l’origine de l’énumérateur à lever une exception.</span><span class="sxs-lookup"><span data-stu-id="8ef50-118">Even if the collection is synchronized, other threads can still modify the collection, causing the enumerator to throw an exception.</span></span> <span data-ttu-id="8ef50-119">Pour garantir la sécurité des threads pendant l’énumération, soit verrouiller la collection ou d’intercepter les exceptions résultant des modifications apportées par d’autres threads.</span><span class="sxs-lookup"><span data-stu-id="8ef50-119">To guarantee thread safety during enumeration, either lock the collection or catch the exceptions resulting from changes made by other threads.</span></span> <span data-ttu-id="8ef50-120">Pour plus d’informations sur le verrouillage d’un élément de programmation, consultez [instruction SyncLock](~/docs/visual-basic/language-reference/statements/synclock-statement.md).</span><span class="sxs-lookup"><span data-stu-id="8ef50-120">For more information on locking a programming element, see [SyncLock Statement](~/docs/visual-basic/language-reference/statements/synclock-statement.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef50-121">L’exemple suivant crée la `Collection` objet `names` et une boîte de dialogue avec laquelle un utilisateur peut ajouter des objets (noms) à la collection.</span><span class="sxs-lookup"><span data-stu-id="8ef50-121">The following example creates the `Collection` object `names` and a dialog box with which a user can add objects (names) to the collection.</span></span> <span data-ttu-id="8ef50-122">Il affiche ensuite les noms dans la collection et enfin vide la collection sans effacer la `Collection` objet lui-même.</span><span class="sxs-lookup"><span data-stu-id="8ef50-122">It then displays the names in the collection, and finally empties the collection without disposing of the `Collection` object itself.</span></span>  
  
 <span data-ttu-id="8ef50-123">Pour voir comment cela fonctionne, choisissez la **ajouter une classe** commande à partir de la **projet** menu et déclarez une variable publique appelée `instanceName` au niveau du module de `nameClass` (type `Public instanceName`) pour contenir les noms de chaque instance.</span><span class="sxs-lookup"><span data-stu-id="8ef50-123">To see how this works, choose the **Add Class** command from the **Project** menu and declare a public variable called `instanceName` at the module level of `nameClass` (type `Public instanceName`) to hold the names of each instance.</span></span> <span data-ttu-id="8ef50-124">Conservez le nom par défaut `nameClass`.</span><span class="sxs-lookup"><span data-stu-id="8ef50-124">Leave the default name as `nameClass`.</span></span> <span data-ttu-id="8ef50-125">Copiez et collez le code suivant dans le **général** section d’un autre module, puis démarrez-le avec l’instruction `classNamer` dans une autre procédure.</span><span class="sxs-lookup"><span data-stu-id="8ef50-125">Copy and paste the following code into the **General** section of another module, and then start it with the statement `classNamer` in another procedure.</span></span> <span data-ttu-id="8ef50-126">(Cet exemple fonctionne uniquement avec les applications hôtes qui prennent en charge de classes).</span><span class="sxs-lookup"><span data-stu-id="8ef50-126">(This example works only with host applications that support classes.)</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Collection ();" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Collection();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8ef50-127">Crée et retourne un objet <see cref="T:Microsoft.VisualBasic.Collection" /> Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="8ef50-127">Creates and returns a new Visual Basic <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef50-128">La collection de Visual Basic retournée par ce constructeur est vide et n’a pas aucune capacité initiale allouée.</span><span class="sxs-lookup"><span data-stu-id="8ef50-128">The Visual Basic collection returned by this constructor is empty and does not have any initial capacity allocated.</span></span>  
  
 <span data-ttu-id="8ef50-129">Collections de Visual Basic ne sont pas compatibles avec le [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] collections disponibles dans le <xref:System.Collections?displayProperty=nameWithType>, <xref:System.Collections.Generic?displayProperty=nameWithType>, et <xref:System.Collections.Specialized?displayProperty=nameWithType> espaces de noms.</span><span class="sxs-lookup"><span data-stu-id="8ef50-129">Visual Basic collections are not compatible with the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] collections available in the <xref:System.Collections?displayProperty=nameWithType>, <xref:System.Collections.Generic?displayProperty=nameWithType>, and <xref:System.Collections.Specialized?displayProperty=nameWithType> namespaces.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef50-130">L’exemple suivant crée une nouvelle collection de Visual Basic et l’assigne à la variable `coll`:</span><span class="sxs-lookup"><span data-stu-id="8ef50-130">The following example creates a new Visual Basic collection and assigns it to the variable `coll`:</span></span>  
  
```vb  
Dim coll As New Microsoft.VisualBasic.Collection()  
```  
  
 <span data-ttu-id="8ef50-131">Cela `Collection` objet est basé sur 1, ce qui signifie que les valeurs d’index de la plage d’éléments compris entre 1 et la valeur de la `Count` propriété.</span><span class="sxs-lookup"><span data-stu-id="8ef50-131">This `Collection` object is one-based, which means that the index values of the elements range from 1 through the value of the `Count` property.</span></span> <span data-ttu-id="8ef50-132">Les collections Visual Basic contiennent des éléments de type <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="8ef50-132">Visual Basic collections hold elements of type <xref:System.Object>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (object Item, string Key = null, object Before = null, object After = null);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void Add(object Item, string Key, object Before, object After) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (Item As Object, Optional Key As String = null, Optional Before As Object = null, Optional After As Object = null)" />
      <MemberSignature Language="F#" Value="member this.Add : obj * string * obj * obj -&gt; unit" Usage="collection.Add (Item, Key, Before, After)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Item" Type="System.Object" />
        <Parameter Name="Key" Type="System.String" />
        <Parameter Name="Before" Type="System.Object" />
        <Parameter Name="After" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Item"><span data-ttu-id="8ef50-133">Obligatoire.</span><span class="sxs-lookup"><span data-stu-id="8ef50-133">Required.</span></span> <span data-ttu-id="8ef50-134">Objet de tout type qui spécifie les erreurs à ajouter à la collection.</span><span class="sxs-lookup"><span data-stu-id="8ef50-134">An object of any type that specifies the element to add to the collection.</span></span></param>
        <param name="Key"><span data-ttu-id="8ef50-135">Optionnel.</span><span class="sxs-lookup"><span data-stu-id="8ef50-135">Optional.</span></span> <span data-ttu-id="8ef50-136">Expression <see langword="String" /> unique qui spécifie une chaîne clé qui peut être utilisée au lieu d'un index de position pour accéder à ce nouvel élément dans la collection.</span><span class="sxs-lookup"><span data-stu-id="8ef50-136">A unique <see langword="String" /> expression that specifies a key string that can be used instead of a positional index to access this new element in the collection.</span></span></param>
        <param name="Before"><span data-ttu-id="8ef50-137">Optionnel.</span><span class="sxs-lookup"><span data-stu-id="8ef50-137">Optional.</span></span> <span data-ttu-id="8ef50-138">Expression qui spécifie une position relative dans la collection.</span><span class="sxs-lookup"><span data-stu-id="8ef50-138">An expression that specifies a relative position in the collection.</span></span> <span data-ttu-id="8ef50-139">L'élément à ajouter est placé dans la collection avant l'élément identifié par l'argument <paramref name="Before" />.</span><span class="sxs-lookup"><span data-stu-id="8ef50-139">The element to be added is placed in the collection before the element identified by the <paramref name="Before" /> argument.</span></span> <span data-ttu-id="8ef50-140">Si <paramref name="Before" /> est une expression numérique, ce doit être un nombre entre 1 et la valeur de la propriété <see cref="P:Microsoft.VisualBasic.Collection.Count" /> de la collection.</span><span class="sxs-lookup"><span data-stu-id="8ef50-140">If <paramref name="Before" /> is a numeric expression, it must be a number from 1 through the value of the collection's <see cref="P:Microsoft.VisualBasic.Collection.Count" /> property.</span></span> <span data-ttu-id="8ef50-141">Si <paramref name="Before" /> est une expression <see langword="String" />, il doit correspondre à la chaîne clé spécifiée au moment où l'élément auquel il est fait référence a été ajouté à la collection.</span><span class="sxs-lookup"><span data-stu-id="8ef50-141">If <paramref name="Before" /> is a <see langword="String" /> expression, it must correspond to the key string specified when the element being referred to was added to the collection.</span></span> <span data-ttu-id="8ef50-142">Vous ne pouvez pas spécifier <paramref name="Before" /> et <paramref name="After" />.</span><span class="sxs-lookup"><span data-stu-id="8ef50-142">You cannot specify both <paramref name="Before" /> and <paramref name="After" />.</span></span></param>
        <param name="After"><span data-ttu-id="8ef50-143">Optionnel.</span><span class="sxs-lookup"><span data-stu-id="8ef50-143">Optional.</span></span> <span data-ttu-id="8ef50-144">Expression qui spécifie une position relative dans la collection.</span><span class="sxs-lookup"><span data-stu-id="8ef50-144">An expression that specifies a relative position in the collection.</span></span> <span data-ttu-id="8ef50-145">L'élément à ajouter est placé dans la collection après l'élément identifié par l'argument <paramref name="After" />.</span><span class="sxs-lookup"><span data-stu-id="8ef50-145">The element to be added is placed in the collection after the element identified by the <paramref name="After" /> argument.</span></span> <span data-ttu-id="8ef50-146">Si <paramref name="After" /> est une expression numérique, ce doit être un nombre entre 1 et la valeur de la propriété <see langword="Count" /> de la collection.</span><span class="sxs-lookup"><span data-stu-id="8ef50-146">If <paramref name="After" /> is a numeric expression, it must be a number from 1 through the value of the collection's <see langword="Count" /> property.</span></span> <span data-ttu-id="8ef50-147">Si <paramref name="After" /> est une expression <see langword="String" />, il doit correspondre à la chaîne clé spécifiée au moment où l'élément auquel il est fait référence a été ajouté à la collection.</span><span class="sxs-lookup"><span data-stu-id="8ef50-147">If <paramref name="After" /> is a <see langword="String" /> expression, it must correspond to the key string specified when the element referred to was added to the collection.</span></span> <span data-ttu-id="8ef50-148">Vous ne pouvez pas spécifier <paramref name="Before" /> et <paramref name="After" />.</span><span class="sxs-lookup"><span data-stu-id="8ef50-148">You cannot specify both <paramref name="Before" /> and <paramref name="After" />.</span></span></param>
        <summary><span data-ttu-id="8ef50-149">Ajoute un élément à un objet <see langword="Collection" />.</span><span class="sxs-lookup"><span data-stu-id="8ef50-149">Adds an element to a <see langword="Collection" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef50-150">Le `Before` ou `After` argument doit faire référence à un élément existant de la collection ; sinon, une erreur se produit.</span><span class="sxs-lookup"><span data-stu-id="8ef50-150">The `Before` or `After` argument must refer to an existing element of the collection; otherwise, an error occurs.</span></span>  
  
 <span data-ttu-id="8ef50-151">Si les deux le `Before` et `After` arguments sont omis, le nouvel objet est ajouté à la fin de la collection.</span><span class="sxs-lookup"><span data-stu-id="8ef50-151">If both the `Before` and `After` arguments are omitted, the new object is added to the end of the collection.</span></span>  
  
 <span data-ttu-id="8ef50-152">Une erreur se produit également si une certaine `Key` valeur correspond à la clé pour un élément existant de la collection.</span><span class="sxs-lookup"><span data-stu-id="8ef50-152">An error also occurs if a specified `Key` value matches the key for an existing element of the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef50-153">L’exemple suivant utilise le `Add` méthode pour ajouter `child` objets - instances d’une classe appelée `child` contenant un `Public` propriété `name` - pour une collection appelée `family`.</span><span class="sxs-lookup"><span data-stu-id="8ef50-153">The following example uses the `Add` method to add `child` objects - instances of a class called `child` containing a `Public` property `name` - to a collection called `family`.</span></span> <span data-ttu-id="8ef50-154">Pour voir comment cela fonctionne, créez un <xref:System.Windows.Forms.Form> avec deux <xref:System.Windows.Forms.Button> contrôles et définir leur <xref:System.Windows.Forms.Control.Text%2A> propriétés à `Add` et `List`.</span><span class="sxs-lookup"><span data-stu-id="8ef50-154">To see how this works, create a <xref:System.Windows.Forms.Form> with two <xref:System.Windows.Forms.Button> controls and set their <xref:System.Windows.Forms.Control.Text%2A> properties to `Add` and `List`.</span></span> <span data-ttu-id="8ef50-155">Ajouter le `child` définition de classe et le `family` déclaration au code du formulaire.</span><span class="sxs-lookup"><span data-stu-id="8ef50-155">Add the `child` class definition and the `family` declaration to the form code.</span></span> <span data-ttu-id="8ef50-156">Modifier le `_Click` gestionnaires d’événements pour le **ajouter** et **liste** boutons comme indiqué.</span><span class="sxs-lookup"><span data-stu-id="8ef50-156">Modify the `_Click` event handlers for the **Add** and **List** buttons as shown.</span></span> <span data-ttu-id="8ef50-157">Le **ajouter** bouton, vous pouvez ajouter des enfants.</span><span class="sxs-lookup"><span data-stu-id="8ef50-157">The **Add** button allows you to add children.</span></span> <span data-ttu-id="8ef50-158">Le **liste** bouton affiche les noms de tous les enfants.</span><span class="sxs-lookup"><span data-stu-id="8ef50-158">The **List** button displays the names of all the children.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="collection.Clear " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8ef50-159">Supprime tous les éléments d'un objet Visual Basic <see langword="Collection" />.</span><span class="sxs-lookup"><span data-stu-id="8ef50-159">Deletes all elements of a Visual Basic <see langword="Collection" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef50-160">Le `Clear` méthode vide la collection et réinitialise sa <xref:Microsoft.VisualBasic.Collection.Count%2A> 0 à la propriété.</span><span class="sxs-lookup"><span data-stu-id="8ef50-160">The `Clear` method empties the collection and resets its <xref:Microsoft.VisualBasic.Collection.Count%2A> property to 0.</span></span>  
  
   
  
## Examples  
 [!code-vb[VbVbalrCollectionObject#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (string Key);" />
      <MemberSignature Language="ILAsm" Value=".method public instance bool Contains(string Key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.Contains(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (Key As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::String ^ Key);" />
      <MemberSignature Language="F#" Value="member this.Contains : string -&gt; bool" Usage="collection.Contains Key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Key"><span data-ttu-id="8ef50-161">Obligatoire.</span><span class="sxs-lookup"><span data-stu-id="8ef50-161">Required.</span></span> <span data-ttu-id="8ef50-162">Une expression <see langword="String" /> qui spécifie la clé à rechercher dans les éléments de la collection.</span><span class="sxs-lookup"><span data-stu-id="8ef50-162">A <see langword="String" /> expression that specifies the key for which to search the elements of the collection.</span></span></param>
        <summary><span data-ttu-id="8ef50-163">Retourne une valeur indiquant si un objet Visual Basic <see langword="Collection" /> contient un élément avec une clé spécifique.</span><span class="sxs-lookup"><span data-stu-id="8ef50-163">Returns a value that indicates whether a Visual Basic <see langword="Collection" /> object contains an element with a specific key.</span></span></summary>
        <returns><span data-ttu-id="8ef50-164"><see langword="true" /> si un objet Visual Basic <see langword="Collection" /> contient un élément avec une clé spécifique ; sinon <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="8ef50-164"><see langword="true" /> if Visual Basic <see langword="Collection" /> object contains an element with a specific key; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef50-165">`Contains` Retourne `True` si la collection contient un élément avec une clé correspondant exactement `Key`.</span><span class="sxs-lookup"><span data-stu-id="8ef50-165">`Contains` returns `True` if the collection contains an element with a key exactly matching `Key`.</span></span> <span data-ttu-id="8ef50-166">Sinon, `Contains` retourne `False`.</span><span class="sxs-lookup"><span data-stu-id="8ef50-166">Otherwise, `Contains` returns `False`.</span></span> <span data-ttu-id="8ef50-167">Casse est ignorée lors de la correspondance des valeurs de clé.</span><span class="sxs-lookup"><span data-stu-id="8ef50-167">Case is ignored when matching key values.</span></span>  
  
 <span data-ttu-id="8ef50-168">Visual Basic `Collection` peut contenir des éléments qui ont des clés et autres éléments sans clés.</span><span class="sxs-lookup"><span data-stu-id="8ef50-168">A Visual Basic `Collection` can hold some elements that have keys and other elements without keys.</span></span> <span data-ttu-id="8ef50-169">Cela varie selon que l’appel à la <xref:Microsoft.VisualBasic.Collection.Add%2A> méthode fournit un argument pour le paramètre facultatif `Key` paramètre.</span><span class="sxs-lookup"><span data-stu-id="8ef50-169">This depends on whether the call to the <xref:Microsoft.VisualBasic.Collection.Add%2A> method supplies an argument to the optional `Key` parameter.</span></span>  
  
   
  
## Examples  
 [!code-vb[VbVbalrCollectionObject#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#4)]  
  
 <span data-ttu-id="8ef50-170">Si vous souhaitez rechercher dans la collection d’éléments à l’aide de leurs clés, pensez à fournir le `Key` argument chaque fois que vous appelez le `Add` (méthode).</span><span class="sxs-lookup"><span data-stu-id="8ef50-170">If you intend to search the collection for elements using their keys, remember to supply the `Key` argument every time you call the `Add` method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="Microsoft.VisualBasic.Collection.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8ef50-171">Obtient le nombre d’éléments d’une collection.</span><span class="sxs-lookup"><span data-stu-id="8ef50-171">Gets the number of elements in a collection.</span></span></summary>
        <value><span data-ttu-id="8ef50-172">Nombre d'éléments d'une collection.</span><span class="sxs-lookup"><span data-stu-id="8ef50-172">The number of elements in a collection.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef50-173">Utilisez le `Count` propriété afin de déterminer le nombre d’éléments dans un `Collection` objet.</span><span class="sxs-lookup"><span data-stu-id="8ef50-173">Use the `Count` property to determine the number of elements in a `Collection` object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef50-174">Cet exemple illustre l’utilisation de la `Count` propriété pour afficher le nombre d’éléments dans un <xref:Microsoft.VisualBasic.Collection> objet dans la variable `birthdays`.</span><span class="sxs-lookup"><span data-stu-id="8ef50-174">This example illustrates the use of the `Count` property to display the number of elements in a <xref:Microsoft.VisualBasic.Collection> object in the variable `birthdays`.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#5)]  
[!code-vb[VbVbalrCollectionObject#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#6)]  
  
 <span data-ttu-id="8ef50-175">Le `Collection` objet est basé sur 1, ce qui signifie que les valeurs d’index de la plage d’éléments compris entre 1 et la valeur de la `Count` propriété.</span><span class="sxs-lookup"><span data-stu-id="8ef50-175">The `Collection` object is one-based, which means that the index values of the elements range from 1 through the value of the `Count` property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="member this.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="collection.GetEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8ef50-176">Retourne un énumérateur qui itère au sein de la collection.</span><span class="sxs-lookup"><span data-stu-id="8ef50-176">Returns an enumerator that iterates through the collection.</span></span></summary>
        <returns><span data-ttu-id="8ef50-177">Énumérateur permettant d'effectuer une itération au sein de la collection.</span><span class="sxs-lookup"><span data-stu-id="8ef50-177">An enumerator that can be used to iterate through the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef50-178">Le [For Each... L’instruction suivante](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md) appelle `GetEnumerator` pour obtenir un objet énumérateur pour prendre en charge d’itération sur les éléments d’une collection.</span><span class="sxs-lookup"><span data-stu-id="8ef50-178">The [For Each...Next Statement](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md) calls `GetEnumerator` to obtain an enumerator object to support iteration over a collection's elements.</span></span> <span data-ttu-id="8ef50-179">Normalement, vous utilisez un `For Each`... `Next` pour parcourir une collection ou un tableau, et vous n’avez pas besoin d’appeler `GetEnumerator` explicitement.</span><span class="sxs-lookup"><span data-stu-id="8ef50-179">Normally, you use a `For Each`...`Next` loop to traverse a collection or array, and you do not need to call `GetEnumerator` explicitly.</span></span>  
  
 <span data-ttu-id="8ef50-180">Si vous avez besoin de contrôle plus précis sur l’itération à la `For Each`... `Next` fournissent des instructions, vous pouvez utiliser la `GetEnumerator` méthode pour effectuer un parcours personnalisé.</span><span class="sxs-lookup"><span data-stu-id="8ef50-180">If you need closer control over the iteration than the `For Each`...`Next` statements provide, you can use the `GetEnumerator` method to perform a customized traversal.</span></span> <span data-ttu-id="8ef50-181">Voici certains cas dans lesquels vous devrez peut-être pour ce faire.</span><span class="sxs-lookup"><span data-stu-id="8ef50-181">The following are some cases in which you might need to do this.</span></span>  
  
-   <span data-ttu-id="8ef50-182">Vous pouvez souhaiter retourner au début de la collection et redémarrer l’itération avant qu’elle est terminée.</span><span class="sxs-lookup"><span data-stu-id="8ef50-182">You might want to return to the beginning of the collection and start the iteration again before it is finished.</span></span>  
  
-   <span data-ttu-id="8ef50-183">Vous souhaiterez peut-être ignorer un ou plusieurs éléments pour diverses raisons.</span><span class="sxs-lookup"><span data-stu-id="8ef50-183">You might want to skip over one or more elements for a variety of reasons.</span></span>  
  
-   <span data-ttu-id="8ef50-184">Vous devrez peut-être modifier les éléments de la collection au milieu d’un parcours.</span><span class="sxs-lookup"><span data-stu-id="8ef50-184">You might need to change the elements of the collection in the middle of a traversal.</span></span> <span data-ttu-id="8ef50-185">Dans ce cas, vous devez obtenir un nouvel objet énumérateur, car le précédent est invalidé.</span><span class="sxs-lookup"><span data-stu-id="8ef50-185">In this case you must obtain a new enumerator object because the previous one is invalidated.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef50-186">L’exemple suivant montre comment utiliser `GetEnumerator` pour récupérer tous les éléments d’un `Collection` objet.</span><span class="sxs-lookup"><span data-stu-id="8ef50-186">The following example shows how to use `GetEnumerator` to retrieve all the elements of a `Collection` object.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#7)]  
  
 <span data-ttu-id="8ef50-187">`GetEnumerator` construit et retourne un objet énumérateur, qui implémente le <xref:System.Collections.IEnumerator> interface de la <xref:System.Collections> espace de noms.</span><span class="sxs-lookup"><span data-stu-id="8ef50-187">`GetEnumerator` constructs and returns an enumerator object, which implements the <xref:System.Collections.IEnumerator> interface of the <xref:System.Collections> namespace.</span></span> <span data-ttu-id="8ef50-188">L’objet énumérateur expose la <xref:System.Collections.IEnumerator.Current%2A> propriété et la <xref:System.Collections.IEnumerator.MoveNext%2A> et <xref:System.Collections.IEnumerator.Reset%2A> méthodes.</span><span class="sxs-lookup"><span data-stu-id="8ef50-188">The enumerator object exposes the <xref:System.Collections.IEnumerator.Current%2A> property and the <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Reset%2A> methods.</span></span> <span data-ttu-id="8ef50-189">Pour plus d’informations, consultez [For Each... L’instruction suivante](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md).</span><span class="sxs-lookup"><span data-stu-id="8ef50-189">For more information, see [For Each...Next Statement](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Item">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8ef50-190">Obtient un élément spécifique d’un objet <see langword="Collection" /> en fonction de sa position ou de sa clé.</span><span class="sxs-lookup"><span data-stu-id="8ef50-190">Gets a specific element of a <see langword="Collection" /> object either by position or by key.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object this[int Index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(int32)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(Index As Integer) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ default[int] { System::Object ^ get(int Index); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : obj" Usage="Microsoft.VisualBasic.Collection.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Index"><span data-ttu-id="8ef50-191">Expression numérique qui spécifie la position d'un élément de la collection.</span><span class="sxs-lookup"><span data-stu-id="8ef50-191">A numeric expression that specifies the position of an element of the collection.</span></span> <span data-ttu-id="8ef50-192"><paramref name="Index" /> doit être un nombre compris entre 1 et la valeur de la propriété <see cref="P:Microsoft.VisualBasic.Collection.Count" /> de la collection.</span><span class="sxs-lookup"><span data-stu-id="8ef50-192"><paramref name="Index" /> must be a number from 1 through the value of the collection's <see cref="P:Microsoft.VisualBasic.Collection.Count" /> property.</span></span> <span data-ttu-id="8ef50-193">Ou (B) Une expression <see langword="Object" /> qui spécifie la position ou la chaîne clé d'un élément de la collection.</span><span class="sxs-lookup"><span data-stu-id="8ef50-193">Or (B) An <see langword="Object" /> expression that specifies the position or key string of an element of the collection.</span></span></param>
        <summary><span data-ttu-id="8ef50-194">Obtient un élément spécifique d’un objet <see langword="Collection" /> en fonction de sa position ou de sa clé.</span><span class="sxs-lookup"><span data-stu-id="8ef50-194">Gets a specific element of a <see langword="Collection" /> object either by position or by key.</span></span></summary>
        <value><span data-ttu-id="8ef50-195">Un élément spécifique d’un <see langword="Collection" /> objet par position ou par clé.</span><span class="sxs-lookup"><span data-stu-id="8ef50-195">A specific element of a <see langword="Collection" /> object either by position or by key.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef50-196">Si `Index` est de type `Object`, le `Item` propriété tente de le traiter comme un `String`, `Char`, `Char` tableau ou la valeur entière.</span><span class="sxs-lookup"><span data-stu-id="8ef50-196">If `Index` is of type `Object`, the `Item` property attempts to treat it as a `String`, `Char`, `Char` array, or integer value.</span></span> <span data-ttu-id="8ef50-197">Si `Item` Impossible de convertir `Index` à `String` ou `Integer`, elle lève une <xref:System.ArgumentException> exception.</span><span class="sxs-lookup"><span data-stu-id="8ef50-197">If `Item` cannot convert `Index` to `String` or `Integer`, it throws an <xref:System.ArgumentException> exception.</span></span>  
  
 <span data-ttu-id="8ef50-198">Le `Item` propriété est la propriété par défaut pour une collection.</span><span class="sxs-lookup"><span data-stu-id="8ef50-198">The `Item` property is the default property for a collection.</span></span> <span data-ttu-id="8ef50-199">Par conséquent, les lignes de code suivantes sont équivalentes.</span><span class="sxs-lookup"><span data-stu-id="8ef50-199">Therefore, the following lines of code are equivalent.</span></span>  
  
```vb
MsgBox(CStr(customers.Item(1)))  
MsgBox(CStr(customers(1)))  
```  
  
   
  
## Examples  
 <span data-ttu-id="8ef50-200">L’exemple suivant utilise le `Item` propriété à récupérer une référence à un objet dans une collection.</span><span class="sxs-lookup"><span data-stu-id="8ef50-200">The following example uses the `Item` property to retrieve a reference to an object in a collection.</span></span> <span data-ttu-id="8ef50-201">Il crée `birthdays` comme un `Collection` de l’objet, puis récupère l’objet représentant l’anniversaire de Bill, à l’aide de la clé `"Bill"` comme le `Index` argument.</span><span class="sxs-lookup"><span data-stu-id="8ef50-201">It creates `birthdays` as a `Collection` object and then retrieves the object representing Bill's birthday, using the key `"Bill"` as the `Index` argument.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#5)]  
[!code-vb[VbVbalrCollectionObject#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#8)]  
  
 <span data-ttu-id="8ef50-202">Notez que le premier appel spécifie explicitement le `Item` propriété, mais la seconde est pas le cas.</span><span class="sxs-lookup"><span data-stu-id="8ef50-202">Note that the first call explicitly specifies the `Item` property, but the second does not.</span></span> <span data-ttu-id="8ef50-203">Les deux appels fonctionnent, car le `Item` propriété est la propriété par défaut pour un `Collection` objet.</span><span class="sxs-lookup"><span data-stu-id="8ef50-203">Both calls work because the `Item` property is the default property for a `Collection` object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object this[object Index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(object)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.Item(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(Index As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ default[System::Object ^] { System::Object ^ get(System::Object ^ Index); };" />
      <MemberSignature Language="F#" Value="member this.Item(obj) : obj" Usage="Microsoft.VisualBasic.Collection.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Index" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Index"><span data-ttu-id="8ef50-204">Expression numérique qui spécifie la position d'un élément de la collection.</span><span class="sxs-lookup"><span data-stu-id="8ef50-204">A numeric expression that specifies the position of an element of the collection.</span></span> <span data-ttu-id="8ef50-205"><paramref name="Index" /> doit être un nombre compris entre 1 et la valeur de la propriété <see cref="P:Microsoft.VisualBasic.Collection.Count" /> de la collection.</span><span class="sxs-lookup"><span data-stu-id="8ef50-205"><paramref name="Index" /> must be a number from 1 through the value of the collection's <see cref="P:Microsoft.VisualBasic.Collection.Count" /> property.</span></span> <span data-ttu-id="8ef50-206">Ou (B) Une expression <see langword="Object" /> qui spécifie la position ou la chaîne clé d'un élément de la collection.</span><span class="sxs-lookup"><span data-stu-id="8ef50-206">Or (B) An <see langword="Object" /> expression that specifies the position or key string of an element of the collection.</span></span></param>
        <summary><span data-ttu-id="8ef50-207">Obtient un élément spécifique d’un objet <see langword="Collection" /> en fonction de sa position ou de sa clé.</span><span class="sxs-lookup"><span data-stu-id="8ef50-207">Gets a specific element of a <see langword="Collection" /> object either by position or by key.</span></span></summary>
        <value><span data-ttu-id="8ef50-208">Un élément spécifique d’un <see langword="Collection" /> objet par position ou par clé.</span><span class="sxs-lookup"><span data-stu-id="8ef50-208">A specific element of a <see langword="Collection" /> object either by position or by key.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef50-209">Si `Index` est de type `Object`, le `Item` propriété tente de le traiter comme un `String`, `Char`, `Char` tableau ou la valeur entière.</span><span class="sxs-lookup"><span data-stu-id="8ef50-209">If `Index` is of type `Object`, the `Item` property attempts to treat it as a `String`, `Char`, `Char` array, or integer value.</span></span> <span data-ttu-id="8ef50-210">Si `Item` Impossible de convertir `Index` à `String` ou `Integer`, elle lève une <xref:System.ArgumentException> exception.</span><span class="sxs-lookup"><span data-stu-id="8ef50-210">If `Item` cannot convert `Index` to `String` or `Integer`, it throws an <xref:System.ArgumentException> exception.</span></span>  
  
 <span data-ttu-id="8ef50-211">Le `Item` propriété est la propriété par défaut pour une collection.</span><span class="sxs-lookup"><span data-stu-id="8ef50-211">The `Item` property is the default property for a collection.</span></span> <span data-ttu-id="8ef50-212">Par conséquent, les lignes de code suivantes sont équivalentes.</span><span class="sxs-lookup"><span data-stu-id="8ef50-212">Therefore, the following lines of code are equivalent.</span></span>  
  
```vb
MsgBox(CStr(customers.Item(1)))  
MsgBox(CStr(customers(1)))  
```  
  
   
  
## Examples  
 <span data-ttu-id="8ef50-213">L’exemple suivant utilise le `Item` propriété à récupérer une référence à un objet dans une collection.</span><span class="sxs-lookup"><span data-stu-id="8ef50-213">The following example uses the `Item` property to retrieve a reference to an object in a collection.</span></span> <span data-ttu-id="8ef50-214">Il crée `birthdays` comme un `Collection` de l’objet, puis récupère l’objet représentant l’anniversaire de Bill, à l’aide de la clé `"Bill"` comme le `Index` argument.</span><span class="sxs-lookup"><span data-stu-id="8ef50-214">It creates `birthdays` as a `Collection` object and then retrieves the object representing Bill's birthday, using the key `"Bill"` as the `Index` argument.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#5)]  
[!code-vb[VbVbalrCollectionObject#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#8)]  
  
 <span data-ttu-id="8ef50-215">Notez que le premier appel spécifie explicitement le `Item` propriété, mais la seconde est pas le cas.</span><span class="sxs-lookup"><span data-stu-id="8ef50-215">Note that the first call explicitly specifies the `Item` property, but the second does not.</span></span> <span data-ttu-id="8ef50-216">Les deux appels fonctionnent, car le `Item` propriété est la propriété par défaut pour un `Collection` objet.</span><span class="sxs-lookup"><span data-stu-id="8ef50-216">Both calls work because the `Item` property is the default property for a `Collection` object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object this[string Key] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(string)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.Item(System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(Key As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ default[System::String ^] { System::Object ^ get(System::String ^ Key); };" />
      <MemberSignature Language="F#" Value="member this.Item(string) : obj" Usage="Microsoft.VisualBasic.Collection.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Key"><span data-ttu-id="8ef50-217">Expression <see langword="String" /> unique qui spécifie une chaîne clé qui peut être utilisée au lieu d'un index de position pour accéder à un élément de la collection.</span><span class="sxs-lookup"><span data-stu-id="8ef50-217">A unique <see langword="String" /> expression that specifies a key string that can be used, instead of a positional index, to access an element of the collection.</span></span> <span data-ttu-id="8ef50-218"><paramref name="Key" /> doit correspondre à l'argument <paramref name="Key" /> spécifié lorsque l'élément a été ajouté à la collection.</span><span class="sxs-lookup"><span data-stu-id="8ef50-218"><paramref name="Key" /> must correspond to the <paramref name="Key" /> argument specified when the element was added to the collection.</span></span></param>
        <summary><span data-ttu-id="8ef50-219">Obtient un élément spécifique d’un objet <see langword="Collection" /> en fonction de sa position ou de sa clé.</span><span class="sxs-lookup"><span data-stu-id="8ef50-219">Gets a specific element of a <see langword="Collection" /> object either by position or by key.</span></span></summary>
        <value><span data-ttu-id="8ef50-220">Un élément spécifique d’un <see langword="Collection" /> objet par position ou par clé.</span><span class="sxs-lookup"><span data-stu-id="8ef50-220">A specific element of a <see langword="Collection" /> object either by position or by key.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef50-221">Si `Index` est de type `Object`, le `Item` propriété tente de le traiter comme un `String`, `Char`, `Char` tableau ou la valeur entière.</span><span class="sxs-lookup"><span data-stu-id="8ef50-221">If `Index` is of type `Object`, the `Item` property attempts to treat it as a `String`, `Char`, `Char` array, or integer value.</span></span> <span data-ttu-id="8ef50-222">Si `Item` Impossible de convertir `Index` à `String` ou `Integer`, elle lève une <xref:System.ArgumentException> exception.</span><span class="sxs-lookup"><span data-stu-id="8ef50-222">If `Item` cannot convert `Index` to `String` or `Integer`, it throws an <xref:System.ArgumentException> exception.</span></span>  
  
 <span data-ttu-id="8ef50-223">Le `Item` propriété est la propriété par défaut pour une collection.</span><span class="sxs-lookup"><span data-stu-id="8ef50-223">The `Item` property is the default property for a collection.</span></span> <span data-ttu-id="8ef50-224">Par conséquent, les lignes de code suivantes sont équivalentes.</span><span class="sxs-lookup"><span data-stu-id="8ef50-224">Therefore, the following lines of code are equivalent.</span></span>  
  
```vb
MsgBox(CStr(customers.Item(1)))  
MsgBox(CStr(customers(1)))  
```  
  
   
  
## Examples  
 <span data-ttu-id="8ef50-225">L’exemple suivant utilise le `Item` propriété à récupérer une référence à un objet dans une collection.</span><span class="sxs-lookup"><span data-stu-id="8ef50-225">The following example uses the `Item` property to retrieve a reference to an object in a collection.</span></span> <span data-ttu-id="8ef50-226">Il crée `birthdays` comme un `Collection` de l’objet, puis récupère l’objet représentant l’anniversaire de Bill, à l’aide de la clé `"Bill"` comme le `Index` argument.</span><span class="sxs-lookup"><span data-stu-id="8ef50-226">It creates `birthdays` as a `Collection` object and then retrieves the object representing Bill's birthday, using the key `"Bill"` as the `Index` argument.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#5)]  
[!code-vb[VbVbalrCollectionObject#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#8)]  
  
 <span data-ttu-id="8ef50-227">Notez que le premier appel spécifie explicitement le `Item` propriété, mais la seconde est pas le cas.</span><span class="sxs-lookup"><span data-stu-id="8ef50-227">Note that the first call explicitly specifies the `Item` property, but the second does not.</span></span> <span data-ttu-id="8ef50-228">Les deux appels fonctionnent, car le `Item` propriété est la propriété par défaut pour un `Collection` objet.</span><span class="sxs-lookup"><span data-stu-id="8ef50-228">Both calls work because the `Item` property is the default property for a `Collection` object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Remove">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8ef50-229">Supprime un élément d'un objet <see langword="Collection" />.</span><span class="sxs-lookup"><span data-stu-id="8ef50-229">Removes an element from a <see langword="Collection" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (int Index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(int32 Index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.Remove(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (Index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(int Index);" />
      <MemberSignature Language="F#" Value="member this.Remove : int -&gt; unit" Usage="collection.Remove Index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Index"><span data-ttu-id="8ef50-230">Expression numérique qui spécifie la position d'un élément de la collection.</span><span class="sxs-lookup"><span data-stu-id="8ef50-230">A numeric expression that specifies the position of an element of the collection.</span></span> <span data-ttu-id="8ef50-231"><paramref name="Index" /> doit être un nombre compris entre 1 et la valeur de la propriété <see cref="P:Microsoft.VisualBasic.Collection.Count" /> de la collection.</span><span class="sxs-lookup"><span data-stu-id="8ef50-231"><paramref name="Index" /> must be a number from 1 through the value of the collection's <see cref="P:Microsoft.VisualBasic.Collection.Count" /> property.</span></span></param>
        <summary><span data-ttu-id="8ef50-232">Supprime un élément d'un objet <see langword="Collection" />.</span><span class="sxs-lookup"><span data-stu-id="8ef50-232">Removes an element from a <see langword="Collection" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef50-233">Lorsque `Remove` supprime un élément d’une collection, il décrémente la collection <xref:Microsoft.VisualBasic.Collection.Count%2A> propriété d’une unité.</span><span class="sxs-lookup"><span data-stu-id="8ef50-233">When `Remove` deletes an element from a collection, it decrements the collection's <xref:Microsoft.VisualBasic.Collection.Count%2A> property by one.</span></span> <span data-ttu-id="8ef50-234">Il décrémente également la `Index` valeur de chaque élément qui suivait l’élément supprimé dans la collection.</span><span class="sxs-lookup"><span data-stu-id="8ef50-234">It also decrements the `Index` value of every element that formerly followed the deleted element in the collection.</span></span>  
  
 <span data-ttu-id="8ef50-235">Si un élément a été ajouté à la collection sans un `Key`, vous devez utiliser son `Index` pour le supprimer.</span><span class="sxs-lookup"><span data-stu-id="8ef50-235">If an element was added to the collection without a `Key`, you must use its `Index` to remove it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef50-236">Cet exemple illustre l’utilisation de la `Remove` méthode pour supprimer des objets à partir d’un <xref:Microsoft.VisualBasic.Collection> objet dans la variable `birthdays`.</span><span class="sxs-lookup"><span data-stu-id="8ef50-236">This example illustrates the use of the `Remove` method to remove objects from a <xref:Microsoft.VisualBasic.Collection> object in the variable `birthdays`.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#5)]  
[!code-vb[VbVbalrCollectionObject#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#9)]  
  
 <span data-ttu-id="8ef50-237">La suite des quatre appels à la `Add` (méthode), le `Count` propriété contient 4, élément `"Bill"` a la valeur d’index 1 et élément `"Pete"` a la valeur d’index 4.</span><span class="sxs-lookup"><span data-stu-id="8ef50-237">Following the four calls to the `Add` method, the `Count` property contains 4, element `"Bill"` has index value 1, and element `"Pete"` has index value 4.</span></span>  
  
 <span data-ttu-id="8ef50-238">Suivant le premier appel à `Remove`, `Count` est 3, élément `"Bill"` est supprimé et l’élément `"Pete"` a la valeur d’index 3.</span><span class="sxs-lookup"><span data-stu-id="8ef50-238">Following the first call to `Remove`, `Count` is 3, element `"Bill"` is deleted, and element `"Pete"` has index value 3.</span></span>  
  
 <span data-ttu-id="8ef50-239">Après le deuxième appel à `Remove`, `Count` est 2, élément `"Mike"` est supprimé et l’élément `"Pete"` a la valeur d’index 2.</span><span class="sxs-lookup"><span data-stu-id="8ef50-239">Following the second call to `Remove`, `Count` is 2, element `"Mike"` is deleted, and element `"Pete"` has index value 2.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (string Key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(string Key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.Remove(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (Key As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::String ^ Key);" />
      <MemberSignature Language="F#" Value="member this.Remove : string -&gt; unit" Usage="collection.Remove Key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Key"><span data-ttu-id="8ef50-240">Expression <see langword="String" /> unique qui spécifie une chaîne clé qui peut être utilisée au lieu d'un index de position pour accéder à un élément de la collection.</span><span class="sxs-lookup"><span data-stu-id="8ef50-240">A unique <see langword="String" /> expression that specifies a key string that can be used, instead of a positional index, to access an element of the collection.</span></span> <span data-ttu-id="8ef50-241"><paramref name="Key" /> doit correspondre à l'argument <paramref name="Key" /> spécifié lorsque l'élément a été ajouté à la collection.</span><span class="sxs-lookup"><span data-stu-id="8ef50-241"><paramref name="Key" /> must correspond to the <paramref name="Key" /> argument specified when the element was added to the collection.</span></span></param>
        <summary><span data-ttu-id="8ef50-242">Supprime un élément d'un objet <see langword="Collection" />.</span><span class="sxs-lookup"><span data-stu-id="8ef50-242">Removes an element from a <see langword="Collection" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef50-243">Lorsque `Remove` supprime un élément d’une collection, il décrémente la collection <xref:Microsoft.VisualBasic.Collection.Count%2A> propriété d’une unité.</span><span class="sxs-lookup"><span data-stu-id="8ef50-243">When `Remove` deletes an element from a collection, it decrements the collection's <xref:Microsoft.VisualBasic.Collection.Count%2A> property by one.</span></span> <span data-ttu-id="8ef50-244">Il décrémente également la `Index` valeur de chaque élément qui suivait l’élément supprimé dans la collection.</span><span class="sxs-lookup"><span data-stu-id="8ef50-244">It also decrements the `Index` value of every element that formerly followed the deleted element in the collection.</span></span>  
  
 <span data-ttu-id="8ef50-245">Si un élément a été ajouté à la collection sans un `Key`, vous devez utiliser son `Index` pour le supprimer.</span><span class="sxs-lookup"><span data-stu-id="8ef50-245">If an element was added to the collection without a `Key`, you must use its `Index` to remove it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef50-246">Cet exemple illustre l’utilisation de la `Remove` méthode pour supprimer des objets à partir d’un <xref:Microsoft.VisualBasic.Collection> objet dans la variable `birthdays`.</span><span class="sxs-lookup"><span data-stu-id="8ef50-246">This example illustrates the use of the `Remove` method to remove objects from a <xref:Microsoft.VisualBasic.Collection> object in the variable `birthdays`.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#5)]  
[!code-vb[VbVbalrCollectionObject#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#9)]  
  
 <span data-ttu-id="8ef50-247">La suite des quatre appels à la `Add` (méthode), le `Count` propriété contient 4, élément `"Bill"` a la valeur d’index 1 et élément `"Pete"` a la valeur d’index 4.</span><span class="sxs-lookup"><span data-stu-id="8ef50-247">Following the four calls to the `Add` method, the `Count` property contains 4, element `"Bill"` has index value 1, and element `"Pete"` has index value 4.</span></span>  
  
 <span data-ttu-id="8ef50-248">Suivant le premier appel à `Remove`, `Count` est 3, élément `"Bill"` est supprimé et l’élément `"Pete"` a la valeur d’index 3.</span><span class="sxs-lookup"><span data-stu-id="8ef50-248">Following the first call to `Remove`, `Count` is 3, element `"Bill"` is deleted, and element `"Pete"` has index value 3.</span></span>  
  
 <span data-ttu-id="8ef50-249">Après le deuxième appel à `Remove`, `Count` est 2, élément `"Mike"` est supprimé et l’élément `"Pete"` a la valeur d’index 2.</span><span class="sxs-lookup"><span data-stu-id="8ef50-249">Following the second call to `Remove`, `Count` is 2, element `"Mike"` is deleted, and element `"Pete"` has index value 2.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo" ExplicitInterfaceMemberName="ICollectionCopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void ICollectionCopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.ICollectionCopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void ICollectionCopyTo(Array ^ array, int index) = System::Collections::ICollection::CopyTo;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="8ef50-250"><see cref="T:System.Array" /> unidimensionnel correspondant à la destination des éléments copiés à partir de l'objet <see cref="T:Microsoft.VisualBasic.Collection" />.</span><span class="sxs-lookup"><span data-stu-id="8ef50-250">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span> <span data-ttu-id="8ef50-251"><see cref="T:System.Array" /> doit avoir une indexation de base zéro.</span><span class="sxs-lookup"><span data-stu-id="8ef50-251">The <see cref="T:System.Array" /> must have zero-based indexing.</span></span></param>
        <param name="index"><span data-ttu-id="8ef50-252">Index de base zéro dans l'<paramref name="array" /> à partir duquel la copie commence.</span><span class="sxs-lookup"><span data-stu-id="8ef50-252">The zero-based index in <paramref name="array" /> at which copying begins.</span></span></param>
        <summary><span data-ttu-id="8ef50-253">Copie les éléments de <see cref="T:Microsoft.VisualBasic.Collection" /> dans <see cref="T:System.Array" />, à partir d'un index particulier de <see cref="T:System.Array" />.</span><span class="sxs-lookup"><span data-stu-id="8ef50-253">Copies the elements of the <see cref="T:Microsoft.VisualBasic.Collection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef50-254">Les éléments sont copiés dans le <xref:System.Array> dans le même ordre que celui dans lequel l’énumérateur itère au sein du <xref:Microsoft.VisualBasic.Collection> objet.</span><span class="sxs-lookup"><span data-stu-id="8ef50-254">The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:Microsoft.VisualBasic.Collection> object.</span></span>  
  
 <span data-ttu-id="8ef50-255">Cette méthode est un O (`n`) opération, où `n` est obtenu à partir de la <xref:Microsoft.VisualBasic.Collection.System%23Collections%23ICollection%23Count>.</span><span class="sxs-lookup"><span data-stu-id="8ef50-255">This method is an O(`n`) operation, where `n` is obtained from the <xref:Microsoft.VisualBasic.Collection.System%23Collections%23ICollection%23Count>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8ef50-256"><paramref name="array" /> est <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="8ef50-256"><paramref name="array" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8ef50-257"><paramref name="index" /> est inférieur à zéro.</span><span class="sxs-lookup"><span data-stu-id="8ef50-257"><paramref name="index" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8ef50-258"><paramref name="array" /> est multidimensionnel.</span><span class="sxs-lookup"><span data-stu-id="8ef50-258"><paramref name="array" /> is multidimensional.</span></span>  
  
<span data-ttu-id="8ef50-259">ou</span><span class="sxs-lookup"><span data-stu-id="8ef50-259">-or-</span></span> 
<span data-ttu-id="8ef50-260">Le nombre d'éléments de l'objet <see cref="T:Microsoft.VisualBasic.Collection" /> source est supérieur à la quantité d'espace disponible entre <paramref name="index" /> et la fin du <paramref name="array" /> de destination.</span><span class="sxs-lookup"><span data-stu-id="8ef50-260">The number of elements in the source <see cref="T:Microsoft.VisualBasic.Collection" /> object is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="8ef50-261">Le type de l'objet <see cref="T:Microsoft.VisualBasic.Collection" /> source ne peut pas être casté automatiquement en type de <paramref name="array" /> de destination.</span><span class="sxs-lookup"><span data-stu-id="8ef50-261">The type of the source <see cref="T:Microsoft.VisualBasic.Collection" /> object cannot be cast automatically to the type of the destination <paramref name="array" />.</span></span></exception>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.ICollection" />
        <altmember cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />
        <altmember cref="T:System.Array" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.Count" ExplicitInterfaceMemberName="ICollectionCount">
      <MemberSignature Language="C#" Value="int System.Collections.ICollection.Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ICollectionCount" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.ICollectionCount" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ICollectionCount As Integer Implements ICollection.Count" />
      <MemberSignature Language="C++ CLI" Value="property int System::Collections::ICollection::Count { int get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8ef50-262">Obtient le nombre d’éléments de cette collection.</span><span class="sxs-lookup"><span data-stu-id="8ef50-262">Gets the number of items in this collection.</span></span></summary>
        <value><span data-ttu-id="8ef50-263">Nombre d’éléments dans cette collection.</span><span class="sxs-lookup"><span data-stu-id="8ef50-263">The number of items in this collection.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized" ExplicitInterfaceMemberName="ICollectionIsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ICollectionIsSynchronized" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.ICollectionIsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ICollectionIsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::ICollection::IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8ef50-264">Obtient une valeur qui indique si l’accès à l’objet <see cref="T:Microsoft.VisualBasic.Collection" /> est synchronisé (thread-safe).</span><span class="sxs-lookup"><span data-stu-id="8ef50-264">Gets a value that indicates whether access to the <see cref="T:Microsoft.VisualBasic.Collection" /> object is synchronized (thread-safe).</span></span></summary>
        <value><span data-ttu-id="8ef50-265"><see langword="true" /> Si l’accès à la <see cref="T:Microsoft.VisualBasic.Collection" /> objet est synchronisé ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="8ef50-265"><see langword="true" /> if access to the <see cref="T:Microsoft.VisualBasic.Collection" /> object is synchronized; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot" ExplicitInterfaceMemberName="ICollectionSyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ICollectionSyncRoot" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.ICollectionSyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ICollectionSyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::ICollection::SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8ef50-266">Obtient un objet qui peut être utilisé pour synchroniser l'accès à l'objet <see cref="T:Microsoft.VisualBasic.Collection" />.</span><span class="sxs-lookup"><span data-stu-id="8ef50-266">Gets an object that can be used to synchronize access to the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></summary>
        <value><span data-ttu-id="8ef50-267">Objet pouvant être utilisé pour synchroniser l'accès à l'objet <see cref="T:Microsoft.VisualBasic.Collection" />.</span><span class="sxs-lookup"><span data-stu-id="8ef50-267">An object that can be used to synchronize access to the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator" ExplicitInterfaceMemberName="ICollectionGetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance class System.Collections.IEnumerator ICollectionGetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function ICollectionGetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ ICollectionGetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8ef50-268">Obtient un énumérateur qui itère au sein de la collection.</span><span class="sxs-lookup"><span data-stu-id="8ef50-268">Gets an enumerator that iterates through the collection.</span></span></summary>
        <returns><span data-ttu-id="8ef50-269">Objet <see cref="T:System.Collections.IEnumerator" /> pouvant être utilisé pour itérer au sein de la collection.</span><span class="sxs-lookup"><span data-stu-id="8ef50-269">An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef50-270">[Visual Basic, C#]</span><span class="sxs-lookup"><span data-stu-id="8ef50-270">[Visual Basic, C#]</span></span>  
  
 <span data-ttu-id="8ef50-271">L'instruction `foreach` du langage C# (`for each` en Visual Basic) se charge de la complexité des énumérateurs.</span><span class="sxs-lookup"><span data-stu-id="8ef50-271">The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.</span></span> <span data-ttu-id="8ef50-272">Il est donc recommandé d'utiliser `foreach` plutôt que de manipuler l'énumérateur directement.</span><span class="sxs-lookup"><span data-stu-id="8ef50-272">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="8ef50-273">Les énumérateurs peuvent être utilisés pour lire les données de la collection, mais ils ne permettent pas de modifier la collection sous-jacente.</span><span class="sxs-lookup"><span data-stu-id="8ef50-273">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="8ef50-274">Au départ, l'énumérateur est positionné avant le premier élément de la collection.</span><span class="sxs-lookup"><span data-stu-id="8ef50-274">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="8ef50-275">Le <xref:System.Collections.IEnumerator.Reset%2A> méthode Replace également l’énumérateur à cette position.</span><span class="sxs-lookup"><span data-stu-id="8ef50-275">The <xref:System.Collections.IEnumerator.Reset%2A> method also brings the enumerator back to this position.</span></span> <span data-ttu-id="8ef50-276">À cette position, la <xref:System.Collections.IEnumerator.Current%2A> propriété n’est pas définie.</span><span class="sxs-lookup"><span data-stu-id="8ef50-276">At this position, the <xref:System.Collections.IEnumerator.Current%2A> property is undefined.</span></span> <span data-ttu-id="8ef50-277">Par conséquent, vous devez appeler la <xref:System.Collections.IEnumerator.MoveNext%2A> méthode pour avancer l’énumérateur vers le premier élément de la collection avant de lire la valeur de <xref:System.Collections.IEnumerator.Current%2A>.</span><span class="sxs-lookup"><span data-stu-id="8ef50-277">Therefore, you must call the <xref:System.Collections.IEnumerator.MoveNext%2A> method to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="8ef50-278"><xref:System.Collections.IEnumerator.Current%2A> retourne le même objet tant que <xref:System.Collections.IEnumerator.MoveNext%2A> ou <xref:System.Collections.IEnumerator.Reset%2A> n'est pas appelé.</span><span class="sxs-lookup"><span data-stu-id="8ef50-278"><xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span> <span data-ttu-id="8ef50-279"><xref:System.Collections.IEnumerator.MoveNext%2A> affecte l'élément suivant à <xref:System.Collections.IEnumerator.Current%2A>.</span><span class="sxs-lookup"><span data-stu-id="8ef50-279"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="8ef50-280">Si <xref:System.Collections.IEnumerator.MoveNext%2A> passe à la fin de la collection, l’énumérateur est positionnée après le dernier élément dans la collection et <xref:System.Collections.IEnumerator.MoveNext%2A> retourne `false`.</span><span class="sxs-lookup"><span data-stu-id="8ef50-280">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="8ef50-281">Lorsque l’énumérateur se trouve à cette position, les appels suivants à <xref:System.Collections.IEnumerator.MoveNext%2A> également retourner `false`.</span><span class="sxs-lookup"><span data-stu-id="8ef50-281">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="8ef50-282">Si le dernier appel à <xref:System.Collections.IEnumerator.MoveNext%2A> retourne `false`, <xref:System.Collections.IEnumerator.Current%2A> n’est pas défini.</span><span class="sxs-lookup"><span data-stu-id="8ef50-282">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="8ef50-283">Pour attribuer une nouvelle fois <xref:System.Collections.IEnumerator.Current%2A> au premier élément de la collection, vous pouvez appeler <xref:System.Collections.IEnumerator.Reset%2A> suivi de <xref:System.Collections.IEnumerator.MoveNext%2A>.</span><span class="sxs-lookup"><span data-stu-id="8ef50-283">To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.</span></span>  
  
 <span data-ttu-id="8ef50-284">Un énumérateur est valide tant que la collection demeure inchangée.</span><span class="sxs-lookup"><span data-stu-id="8ef50-284">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="8ef50-285">Si des modifications sont apportées à la collection, telles que l'ajout, la modification ou la suppression d'éléments, l'énumérateur est définitivement invalidé et son comportement n'est pas défini.</span><span class="sxs-lookup"><span data-stu-id="8ef50-285">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</span></span>  
  
 <span data-ttu-id="8ef50-286">Comme l’énumérateur ne dispose pas d’un accès exclusif à la collection, l’énumération d’une collection n’est pas intrinsèquement une procédure thread-safe.</span><span class="sxs-lookup"><span data-stu-id="8ef50-286">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="8ef50-287">Pour garantir la sécurité des threads pendant l’énumération, vous pouvez verrouiller la collection tout au long de cette opération.</span><span class="sxs-lookup"><span data-stu-id="8ef50-287">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span> <span data-ttu-id="8ef50-288">Pour permettre à plusieurs threads d’accéder en lecture et en écriture à la collection, vous devez implémenter votre propre synchronisation.</span><span class="sxs-lookup"><span data-stu-id="8ef50-288">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.ICollection" />
        <altmember cref="T:System.Collections.IEnumerable" />
        <altmember cref="M:System.Collections.IEnumerable.GetEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Add" ExplicitInterfaceMemberName="IListAdd">
      <MemberSignature Language="C#" Value="int IList.Add (object value);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance int32 IListAdd(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListAdd(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IListAdd (value As Object) As Integer Implements IList.Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual int IListAdd(System::Object ^ value) = System::Collections::IList::Add;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Clear" ExplicitInterfaceMemberName="IListClear">
      <MemberSignature Language="C#" Value="void IList.Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void IListClear() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListClear" />
      <MemberSignature Language="VB.NET" Value="Sub IListClear () Implements IList.Clear" />
      <MemberSignature Language="C++ CLI" Value=" virtual void IListClear() = System::Collections::IList::Clear;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8ef50-289">Supprime tous les éléments de l'objet <see cref="T:Microsoft.VisualBasic.Collection" />.</span><span class="sxs-lookup"><span data-stu-id="8ef50-289">Removes all items from the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef50-290">Cette méthode supprime tous les éléments de la <xref:Microsoft.VisualBasic.Collection> objet.</span><span class="sxs-lookup"><span data-stu-id="8ef50-290">This method removes all items from the <xref:Microsoft.VisualBasic.Collection> object.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="8ef50-291"><see cref="T:System.Collections.IList" /> est en lecture seule.</span><span class="sxs-lookup"><span data-stu-id="8ef50-291">The <see cref="T:System.Collections.IList" /> is read-only.</span></span></exception>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.Hashtable.Clear" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Contains" ExplicitInterfaceMemberName="IListContains">
      <MemberSignature Language="C#" Value="bool IList.Contains (object value);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance bool IListContains(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListContains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IListContains (value As Object) As Boolean Implements IList.Contains" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool IListContains(System::Object ^ value) = System::Collections::IList::Contains;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8ef50-292"><see cref="T:System.Object" /> à trouver dans l'objet <see cref="T:Microsoft.VisualBasic.Collection" />.</span><span class="sxs-lookup"><span data-stu-id="8ef50-292">The <see cref="T:System.Object" /> to locate in the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></param>
        <summary><span data-ttu-id="8ef50-293">Détermine si l'objet <see cref="T:Microsoft.VisualBasic.Collection" /> contient une valeur spécifique.</span><span class="sxs-lookup"><span data-stu-id="8ef50-293">Determines whether the <see cref="T:Microsoft.VisualBasic.Collection" /> object contains a specific value.</span></span></summary>
        <returns><span data-ttu-id="8ef50-294">Retourne <see langword="True" /> si le <see cref="T:System.Object" /> est trouvé dans l'objet <see cref="T:Microsoft.VisualBasic.Collection" />, sinon <see langword="False" />.</span><span class="sxs-lookup"><span data-stu-id="8ef50-294">Returns <see langword="True" /> if the <see cref="T:System.Object" /> is found in the <see cref="T:Microsoft.VisualBasic.Collection" /> object; otherwise, <see langword="False" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef50-295">Cette méthode détermine si le <xref:Microsoft.VisualBasic.Collection> objet contient une valeur spécifique.</span><span class="sxs-lookup"><span data-stu-id="8ef50-295">This method determines whether the <xref:Microsoft.VisualBasic.Collection> object contains a specific value.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.IList.Contains(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IndexOf" ExplicitInterfaceMemberName="IListIndexOf">
      <MemberSignature Language="C#" Value="int IList.IndexOf (object value);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance int32 IListIndexOf(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListIndexOf(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IListIndexOf (value As Object) As Integer Implements IList.IndexOf" />
      <MemberSignature Language="C++ CLI" Value=" virtual int IListIndexOf(System::Object ^ value) = System::Collections::IList::IndexOf;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8ef50-296"><see cref="T:System.Object" /> à trouver dans l'objet <see cref="T:Microsoft.VisualBasic.Collection" />.</span><span class="sxs-lookup"><span data-stu-id="8ef50-296">The <see cref="T:System.Object" /> to locate in the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></param>
        <summary><span data-ttu-id="8ef50-297">Détermine l'index d'un élément spécifique dans l'objet <see cref="T:Microsoft.VisualBasic.Collection" />.</span><span class="sxs-lookup"><span data-stu-id="8ef50-297">Determines the index of a specific item in the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></summary>
        <returns><span data-ttu-id="8ef50-298">Index de <paramref name="value" /> si celui-ci figure dans la collection, sinon -1.</span><span class="sxs-lookup"><span data-stu-id="8ef50-298">The index of <paramref name="value" /> if found in the collection; otherwise, -1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef50-299">Cette méthode détermine l’index d’un élément spécifique dans le <xref:Microsoft.VisualBasic.Collection> objet.</span><span class="sxs-lookup"><span data-stu-id="8ef50-299">This method determines the index of a specific item in the <xref:Microsoft.VisualBasic.Collection> object.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.IList.IndexOf(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Insert" ExplicitInterfaceMemberName="IListInsert">
      <MemberSignature Language="C#" Value="void IList.Insert (int index, object value);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void IListInsert(int32 index, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListInsert(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub IListInsert (index As Integer, value As Object) Implements IList.Insert" />
      <MemberSignature Language="C++ CLI" Value=" virtual void IListInsert(int index, System::Object ^ value) = System::Collections::IList::Insert;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="8ef50-300">Index de base zéro au niveau duquel <paramref name="value" /> doit être inséré.</span><span class="sxs-lookup"><span data-stu-id="8ef50-300">The zero-based index at which <paramref name="value" /> should be inserted.</span></span></param>
        <param name="value"><span data-ttu-id="8ef50-301"><see cref="T:System.Object" /> à insérer dans l'objet <see cref="T:Microsoft.VisualBasic.Collection" />.</span><span class="sxs-lookup"><span data-stu-id="8ef50-301">The <see cref="T:System.Object" /> to insert into the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></param>
        <summary><span data-ttu-id="8ef50-302">Insère un élément dans l'objet <see cref="T:Microsoft.VisualBasic.Collection" /> au niveau de l'index spécifié.</span><span class="sxs-lookup"><span data-stu-id="8ef50-302">Inserts an item to the <see cref="T:Microsoft.VisualBasic.Collection" /> object at the specified index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef50-303">Si `index` est égal au nombre d’éléments dans le <xref:Microsoft.VisualBasic.Collection> de l’objet, puis `value` est ajouté à la fin.</span><span class="sxs-lookup"><span data-stu-id="8ef50-303">If `index` equals the number of items in the <xref:Microsoft.VisualBasic.Collection> object, then `value` is appended to the end.</span></span>  
  
 <span data-ttu-id="8ef50-304">Dans des collections d’éléments contigus, telles que les listes, les éléments situés après le point d’insertion descendent afin de prendre en compte le nouvel élément.</span><span class="sxs-lookup"><span data-stu-id="8ef50-304">In collections of contiguous elements, such as lists, the elements that follow the insertion point move down to accommodate the new element.</span></span> <span data-ttu-id="8ef50-305">Si la collection est indexée, les index des éléments déplacés sont également mis à jour.</span><span class="sxs-lookup"><span data-stu-id="8ef50-305">If the collection is indexed, the indexes of the elements that are moved are also updated.</span></span> <span data-ttu-id="8ef50-306">Ce comportement ne s’applique pas aux collections dont les éléments sont regroupés de manière conceptuelle en compartiments, comme par exemple les tables de hachage.</span><span class="sxs-lookup"><span data-stu-id="8ef50-306">This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8ef50-307"><paramref name="index" /> n'est pas un index valide dans l'objet <see cref="T:Microsoft.VisualBasic.Collection" />.</span><span class="sxs-lookup"><span data-stu-id="8ef50-307"><paramref name="index" /> is not a valid index in the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="8ef50-308">L'objet <see cref="T:Microsoft.VisualBasic.Collection" /> est en lecture seule.</span><span class="sxs-lookup"><span data-stu-id="8ef50-308">The <see cref="T:Microsoft.VisualBasic.Collection" /> object is read-only.</span></span>  
  
<span data-ttu-id="8ef50-309">ou</span><span class="sxs-lookup"><span data-stu-id="8ef50-309">-or-</span></span> 
<span data-ttu-id="8ef50-310">L'objet <see cref="T:Microsoft.VisualBasic.Collection" /> est de taille fixe.</span><span class="sxs-lookup"><span data-stu-id="8ef50-310">The <see cref="T:Microsoft.VisualBasic.Collection" /> object has a fixed size.</span></span></exception>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="8ef50-311"><paramref name="value" /> est une référence null dans l'objet <see cref="T:Microsoft.VisualBasic.Collection" />.</span><span class="sxs-lookup"><span data-stu-id="8ef50-311"><paramref name="value" /> is null reference in the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></exception>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.IList.Insert(System.Int32,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsFixedSize" ExplicitInterfaceMemberName="IListIsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IListIsFixedSize" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.IListIsFixedSize" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IListIsFixedSize As Boolean Implements IList.IsFixedSize" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::IList::IsFixedSize { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IList.IsFixedSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8ef50-312">Obtient une valeur qui indique si l'objet <see cref="T:Microsoft.VisualBasic.Collection" /> est de taille fixe.</span><span class="sxs-lookup"><span data-stu-id="8ef50-312">Gets a value that indicates whether the <see cref="T:Microsoft.VisualBasic.Collection" /> object has a fixed size.</span></span></summary>
        <value><span data-ttu-id="8ef50-313"><see langword="true" /> si l'objet <see cref="T:Microsoft.VisualBasic.Collection" /> est de taille fixe ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="8ef50-313"><see langword="true" /> if the <see cref="T:Microsoft.VisualBasic.Collection" /> object has a fixed size; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsReadOnly" ExplicitInterfaceMemberName="IListIsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IListIsReadOnly" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.IListIsReadOnly" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IListIsReadOnly As Boolean Implements IList.IsReadOnly" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::IList::IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IList.IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8ef50-314">Obtient une valeur qui indique si l’objet <see cref="T:Microsoft.VisualBasic.Collection" /> est en lecture seule.</span><span class="sxs-lookup"><span data-stu-id="8ef50-314">Gets a value that indicates whether the <see cref="T:Microsoft.VisualBasic.Collection" /> object is.</span></span></summary>
        <value><span data-ttu-id="8ef50-315"><see langword="true" /> si l'objet <see cref="T:Microsoft.VisualBasic.Collection" /> est en lecture seule ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="8ef50-315"><see langword="true" /> if the <see cref="T:Microsoft.VisualBasic.Collection" /> object is read-only; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Item" ExplicitInterfaceMemberName="IListItem">
      <MemberSignature Language="C#" Value="object System.Collections.IList.IListItem[int Index] { get; set; }" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="ILAsm" Value=".property instance object IListItem(int32)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.IListItem(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" Property IListItem(Index As Integer) As Object Implements IList.IListItem" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.IList.IListItem[int] { System::Object ^ get(int Index); void set(int Index, System::Object ^ value); };" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="F#" Usage="Microsoft.VisualBasic.Collection.IListItem" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C#" Value="object System.Collections.IList.IListItem[int index] { get; set; }" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="VB.NET" Value=" Property IListItem(index As Integer) As Object Implements IList.IListItem" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.IList.IListItem[int] { System::Object ^ get(int index); void set(int index, System::Object ^ value); };" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="F#" Usage="Microsoft.VisualBasic.Collection.IListItem" FrameworkAlternate="netframework-2.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Index" Type="System.Int32" Index="0" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="index" Type="System.Int32" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Index"><span data-ttu-id="8ef50-316">Index de base zéro de l'élément à obtenir ou à définir.</span><span class="sxs-lookup"><span data-stu-id="8ef50-316">The zero-based index of the element to get or set.</span></span></param>
        <param name="index">To be added.</param>
        <summary><span data-ttu-id="8ef50-317">Obtient ou définit l'élément au niveau de l'index spécifié.</span><span class="sxs-lookup"><span data-stu-id="8ef50-317">Gets or sets the element at the specified index.</span></span></summary>
        <value><span data-ttu-id="8ef50-318">Élément au niveau de l'index spécifié.</span><span class="sxs-lookup"><span data-stu-id="8ef50-318">The element at the specified index.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8ef50-319"><paramref name="index" /> n'est pas un index valide dans l'objet <see cref="T:Microsoft.VisualBasic.Collection" />.</span><span class="sxs-lookup"><span data-stu-id="8ef50-319"><paramref name="index" /> is not a valid index in the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="8ef50-320">La propriété est définie et l'objet <see cref="T:Microsoft.VisualBasic.Collection" /> est en lecture seule.</span><span class="sxs-lookup"><span data-stu-id="8ef50-320">The property is set and the <see cref="T:Microsoft.VisualBasic.Collection" /> object is read-only.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Remove" ExplicitInterfaceMemberName="IListRemove">
      <MemberSignature Language="C#" Value="void IList.Remove (object value);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void IListRemove(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListRemove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub IListRemove (value As Object) Implements IList.Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual void IListRemove(System::Object ^ value) = System::Collections::IList::Remove;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8ef50-321">Objet <see cref="T:System.Object" /> à supprimer de l'objet <see cref="T:Microsoft.VisualBasic.Collection" />.</span><span class="sxs-lookup"><span data-stu-id="8ef50-321">The <see cref="T:System.Object" /> to remove from the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></param>
        <summary><span data-ttu-id="8ef50-322">Supprime la première occurrence d'un objet spécifique de l'objet <see cref="T:Microsoft.VisualBasic.Collection" />.</span><span class="sxs-lookup"><span data-stu-id="8ef50-322">Removes the first occurrence of a specific object from the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef50-323">Dans des collections d’éléments contigus, telles que les listes, les éléments qui suivent l’élément supprimé remontent pour occuper l’espace libéré.</span><span class="sxs-lookup"><span data-stu-id="8ef50-323">In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.</span></span> <span data-ttu-id="8ef50-324">Si la collection est indexée, les index des éléments déplacés sont également mis à jour.</span><span class="sxs-lookup"><span data-stu-id="8ef50-324">If the collection is indexed, the indexes of the elements that are moved are also updated.</span></span> <span data-ttu-id="8ef50-325">Ce comportement ne s’applique pas aux collections dont les éléments sont regroupés de manière conceptuelle en compartiments, comme par exemple les tables de hachage.</span><span class="sxs-lookup"><span data-stu-id="8ef50-325">This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</span></span> <span data-ttu-id="8ef50-326">Si `value` est introuvable dans le <xref:Microsoft.VisualBasic.Collection> objet, le <xref:Microsoft.VisualBasic.Collection> reste inchangé et aucune exception n’est levée.</span><span class="sxs-lookup"><span data-stu-id="8ef50-326">If `value` is not found in the <xref:Microsoft.VisualBasic.Collection> object, the <xref:Microsoft.VisualBasic.Collection> object remains unchanged and no exception is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="8ef50-327">L'objet <see cref="T:Microsoft.VisualBasic.Collection" /> est en lecture seule.</span><span class="sxs-lookup"><span data-stu-id="8ef50-327">The <see cref="T:Microsoft.VisualBasic.Collection" /> object is read-only.</span></span>  
  
<span data-ttu-id="8ef50-328">ou</span><span class="sxs-lookup"><span data-stu-id="8ef50-328">-or-</span></span> 
<span data-ttu-id="8ef50-329">L'objet <see cref="T:Microsoft.VisualBasic.Collection" /> est de taille fixe.</span><span class="sxs-lookup"><span data-stu-id="8ef50-329">The <see cref="T:Microsoft.VisualBasic.Collection" /> object has a fixed size.</span></span></exception>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.IList.Remove(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.RemoveAt" ExplicitInterfaceMemberName="IListRemoveAt">
      <MemberSignature Language="C#" Value="void IList.RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void IListRemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListRemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Sub IListRemoveAt (index As Integer) Implements IList.RemoveAt" />
      <MemberSignature Language="C++ CLI" Value=" virtual void IListRemoveAt(int index) = System::Collections::IList::RemoveAt;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="8ef50-330">Index de base zéro de l'élément à supprimer.</span><span class="sxs-lookup"><span data-stu-id="8ef50-330">The zero-based index of the item to remove.</span></span></param>
        <summary><span data-ttu-id="8ef50-331">Supprime l'élément d'objet <see cref="T:Microsoft.VisualBasic.Collection" /> au niveau de l'index spécifié.</span><span class="sxs-lookup"><span data-stu-id="8ef50-331">Removes the <see cref="T:Microsoft.VisualBasic.Collection" /> object item at the specified index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef50-332">Dans des collections d’éléments contigus, telles que les listes, les éléments qui suivent l’élément supprimé remontent pour occuper l’espace libéré.</span><span class="sxs-lookup"><span data-stu-id="8ef50-332">In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.</span></span> <span data-ttu-id="8ef50-333">Si la collection est indexée, les index des éléments déplacés sont également mis à jour.</span><span class="sxs-lookup"><span data-stu-id="8ef50-333">If the collection is indexed, the indexes of the elements that are moved are also updated.</span></span> <span data-ttu-id="8ef50-334">Ce comportement ne s’applique pas aux collections dont les éléments sont regroupés de manière conceptuelle en compartiments, comme par exemple les tables de hachage.</span><span class="sxs-lookup"><span data-stu-id="8ef50-334">This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8ef50-335"><paramref name="index" /> n'est pas un index valide dans l'objet <see cref="T:Microsoft.VisualBasic.Collection" />.</span><span class="sxs-lookup"><span data-stu-id="8ef50-335"><paramref name="index" /> is not a valid index in the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="8ef50-336">L'objet <see cref="T:Microsoft.VisualBasic.Collection" /> est en lecture seule.</span><span class="sxs-lookup"><span data-stu-id="8ef50-336">The <see cref="T:Microsoft.VisualBasic.Collection" /> object is read-only.</span></span>  
  
<span data-ttu-id="8ef50-337">ou</span><span class="sxs-lookup"><span data-stu-id="8ef50-337">-or-</span></span> 
<span data-ttu-id="8ef50-338">L'objet <see cref="T:Microsoft.VisualBasic.Collection" /> est de taille fixe.</span><span class="sxs-lookup"><span data-stu-id="8ef50-338">The <see cref="T:Microsoft.VisualBasic.Collection" /> object has a fixed size.</span></span></exception>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.IList.RemoveAt(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.IDeserializationCallback.OnDeserialization" ExplicitInterfaceMemberName="OnDeserialization">
      <MemberSignature Language="C#" Value="void IDeserializationCallback.OnDeserialization (object sender);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void OnDeserialization(object sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.OnDeserialization(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub OnDeserialization (sender As Object) Implements IDeserializationCallback.OnDeserialization" />
      <MemberSignature Language="C++ CLI" Value=" virtual void OnDeserialization(System::Object ^ sender) = System::Runtime::Serialization::IDeserializationCallback::OnDeserialization;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="sender"><span data-ttu-id="8ef50-339">Objet qui a initié le rappel.</span><span class="sxs-lookup"><span data-stu-id="8ef50-339">The object that initiated the callback.</span></span></param>
        <summary><span data-ttu-id="8ef50-340">S'exécute une fois la totalité du graphique d'objets <see cref="T:Microsoft.VisualBasic.Collection" /> désérialisée.</span><span class="sxs-lookup"><span data-stu-id="8ef50-340">Runs after the entire <see cref="T:Microsoft.VisualBasic.Collection" /> object graph has been deserialized.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef50-341">Cette méthode est appelée une fois la totalité <xref:Microsoft.VisualBasic.Collection> graphique d’objet a été désérialisé.</span><span class="sxs-lookup"><span data-stu-id="8ef50-341">This method is called after the entire <xref:Microsoft.VisualBasic.Collection> object graph has been deserialized.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Runtime.Serialization.IDeserializationCallback" />
        <altmember cref="M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData" ExplicitInterfaceMemberName="GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info"><span data-ttu-id="8ef50-342">Objet <see cref="T:System.Runtime.Serialization.SerializationInfo" /> contenant les informations nécessaires pour sérialiser <see cref="T:Microsoft.VisualBasic.Collection" />.</span><span class="sxs-lookup"><span data-stu-id="8ef50-342">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object containing the information required to serialize the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></param>
        <param name="context"><span data-ttu-id="8ef50-343">Un objet <see cref="T:System.Runtime.Serialization.StreamingContext" /> contenant la source et la destination du flux sérialisé associé à l'objet <see cref="T:Microsoft.VisualBasic.Collection" />.</span><span class="sxs-lookup"><span data-stu-id="8ef50-343">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object containing the source and destination of the serialized stream associated with the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></param>
        <summary><span data-ttu-id="8ef50-344">Retourne les données nécessaires à la sérialisation de l'objet <see cref="T:Microsoft.VisualBasic.Collection" />.</span><span class="sxs-lookup"><span data-stu-id="8ef50-344">Returns the data needed to serialize the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef50-345">Cette méthode retourne les données nécessaires pour sérialiser le <xref:Microsoft.VisualBasic.Collection> objet.</span><span class="sxs-lookup"><span data-stu-id="8ef50-345">This method returns the data needed to serialize the <xref:Microsoft.VisualBasic.Collection> object.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Runtime.Serialization.ISerializable" />
        <altmember cref="T:System.Runtime.Serialization.SerializationInfo" />
        <altmember cref="T:System.Runtime.Serialization.StreamingContext" />
        <altmember cref="M:System.Collections.Hashtable.OnDeserialization(System.Object)" />
      </Docs>
    </Member>
  </Members>
</Type>