<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Collection.xml" source-language="en-US" target-language="fr-FR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-efd8310" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ae25fbb5-14a8-44f2-90c2-3c6d6fcaae7fdc3197f07c8bdb1f40ab81744fc26dfcfd1dc2b5.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dc3197f07c8bdb1f40ab81744fc26dfcfd1dc2b5</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1b899505ed6d42225f2b3c9150bfdc080d0d1f9b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/28/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualBasic.Collection">
          <source>A Visual Basic <ph id="ph1">&lt;see langword="Collection" /&gt;</ph> is an ordered set of items that can be referred to as a unit.</source>
          <target state="translated">Une <ph id="ph1">&lt;see langword="Collection" /&gt;</ph> Visual Basic est un jeu ordonné d’éléments qui peut être considéré collectivement comme une unité.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>Whenever possible, you should use the generic collections in the <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> namespace or the <ph id="ph2">&lt;xref:System.Collections.Concurrent&gt;</ph> namespace instead of a Visual Basic <ph id="ph3">`Collection`</ph>.</source>
          <target state="translated">Si possible, vous devez utiliser les collections génériques dans le <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> espace de noms ou le <ph id="ph2">&lt;xref:System.Collections.Concurrent&gt;</ph> à la place un Visual Basic <ph id="ph3">`Collection`</ph>.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>For more information, see <bpt id="p1">[</bpt>Collections<ept id="p1">](http://msdn.microsoft.com/library/e76533a9-5033-4a0b-b003-9c2be60d185b)</ept>.</source>
          <target state="translated">Pour plus d’informations, consultez <bpt id="p1">[</bpt>Collections<ept id="p1">](http://msdn.microsoft.com/library/e76533a9-5033-4a0b-b003-9c2be60d185b)</ept>.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>The Visual Basic <ph id="ph1">`Collection`</ph> object provides a convenient way to refer to a related group of items as a single object.</source>
          <target state="translated">Visual Basic <ph id="ph1">`Collection`</ph> objet offre un moyen pratique pour faire référence à un groupe connexe d’éléments en tant qu’objet unique.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>The items, or <bpt id="p1">*</bpt>elements<ept id="p1">*</ept>, in a collection need only be related by the fact that they exist in the collection.</source>
          <target state="translated">Les éléments, ou <bpt id="p1">*</bpt>éléments<ept id="p1">*</ept>, dans une collection doivent seulement être associée par le fait qu’ils existent dans la collection.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>Elements of a collection do not have to share the same data type.</source>
          <target state="translated">Éléments d’une collection n’est pas ont de partagent le même type de données.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>You can create a collection the same way you create other objects, as the following example illustrates.</source>
          <target state="translated">Vous pouvez créer une collection de la même façon que vous créez d’autres objets, comme l’illustre l’exemple suivant.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>Once you have created a collection, you can do any of the following:</source>
          <target state="translated">Une fois que vous avez créé une collection, vous pouvez effectuer les opérations suivantes :</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>Add an element with the <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection.Add%2A&gt;</ph> method.</source>
          <target state="translated">Ajoutez un élément avec la <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection.Add%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>Remove an element with the <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection.Remove%2A&gt;</ph> method.</source>
          <target state="translated">Supprimer un élément avec la <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection.Remove%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>Remove all elements with the <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection.Clear%2A&gt;</ph> method.</source>
          <target state="translated">Supprimer tous les éléments dont le <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection.Clear%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>Find out how many elements the collection contains with the <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection.Count%2A&gt;</ph> property.</source>
          <target state="translated">Rechercher le nombre d’éléments contenus dans la collection avec le <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection.Count%2A&gt;</ph> propriété.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>Check whether a specific element is present with the <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection.Contains%2A&gt;</ph> method.</source>
          <target state="translated">Vérifiez si un élément spécifique est présent avec la <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection.Contains%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>Return a specific element from the collection with the <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection.Item%2A&gt;</ph> property.</source>
          <target state="translated">Retourner un élément spécifique de la collection avec le <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection.Item%2A&gt;</ph> propriété.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>Iterate through the entire collection with the <bpt id="p1">[</bpt>For Each...Next Statement<ept id="p1">](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md)</ept>.</source>
          <target state="translated">Une itération au sein de la collection entière avec le <bpt id="p1">[</bpt>For Each... L’instruction suivante<ept id="p1">](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md)</ept>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>Although the Visual Basic <ph id="ph1">`Collection`</ph> object has functionality identical to the <ph id="ph2">`Collection`</ph> object in Visual Basic 6.0, the two cannot interoperate in a COM environment.</source>
          <target state="translated">Bien que Visual Basic <ph id="ph1">`Collection`</ph> objet possède des fonctionnalités identiques pour le <ph id="ph2">`Collection`</ph> de l’objet dans Visual Basic 6.0, les deux ne peuvent pas interagir dans un environnement COM.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>Iterating through a Visual Basic <ph id="ph1">`Collection`</ph> is not a thread-safe procedure.</source>
          <target state="translated">Itération au sein d’un Visual Basic <ph id="ph1">`Collection`</ph> n’est pas une procédure thread-safe.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>Even if the collection is synchronized, other threads can still modify the collection, causing the enumerator to throw an exception.</source>
          <target state="translated">Même si la collection est synchronisée, d’autres threads peuvent toujours la modifier, à l’origine de l’énumérateur à lever une exception.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>To guarantee thread safety during enumeration, either lock the collection or catch the exceptions resulting from changes made by other threads.</source>
          <target state="translated">Pour garantir la sécurité des threads pendant l’énumération, verrouiller la collection, ou bien intercepter les exceptions résultant des modifications apportées par les autres threads.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>For more information on locking a programming element, see <bpt id="p1">[</bpt>SyncLock Statement<ept id="p1">](~/docs/visual-basic/language-reference/statements/synclock-statement.md)</ept>.</source>
          <target state="translated">Pour plus d’informations sur le verrouillage d’un élément de programmation, consultez <bpt id="p1">[</bpt>SyncLock, instruction<ept id="p1">](~/docs/visual-basic/language-reference/statements/synclock-statement.md)</ept>.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>The following example creates the <ph id="ph1">`Collection`</ph> object <ph id="ph2">`names`</ph> and a dialog box with which a user can add objects (names) to the collection.</source>
          <target state="translated">L’exemple suivant crée la <ph id="ph1">`Collection`</ph> objet <ph id="ph2">`names`</ph> et une boîte de dialogue avec laquelle un utilisateur peut ajouter des objets (noms) à la collection.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>It then displays the names in the collection, and finally empties the collection without disposing of the <ph id="ph1">`Collection`</ph> object itself.</source>
          <target state="translated">Il affiche ensuite les noms dans la collection et enfin vide la collection sans effacer la <ph id="ph1">`Collection`</ph> objet lui-même.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>To see how this works, choose the <bpt id="p1">**</bpt>Add Class<ept id="p1">**</ept> command from the <bpt id="p2">**</bpt>Project<ept id="p2">**</ept> menu and declare a public variable called <ph id="ph1">`instanceName`</ph> at the module level of <ph id="ph2">`nameClass`</ph> (type <ph id="ph3">`Public instanceName`</ph>) to hold the names of each instance.</source>
          <target state="translated">Pour voir comment cela fonctionne, choisissez la <bpt id="p1">**</bpt>ajouter une classe<ept id="p1">**</ept> commande à partir de la <bpt id="p2">**</bpt>projet<ept id="p2">**</ept> menu et déclarez une variable publique appelée <ph id="ph1">`instanceName`</ph> au niveau du module de <ph id="ph2">`nameClass`</ph> (type <ph id="ph3">`Public instanceName`</ph>) pour contenir les noms de chaque instance.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>Leave the default name as <ph id="ph1">`nameClass`</ph>.</source>
          <target state="translated">Conservez le nom par défaut <ph id="ph1">`nameClass`</ph>.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>Copy and paste the following code into the <bpt id="p1">**</bpt>General<ept id="p1">**</ept> section of another module, and then start it with the statement <ph id="ph1">`classNamer`</ph> in another procedure.</source>
          <target state="translated">Copiez et collez le code suivant dans le <bpt id="p1">**</bpt>général<ept id="p1">**</ept> section d’un autre module, puis démarrez-le avec l’instruction <ph id="ph1">`classNamer`</ph> dans une autre procédure.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.Collection">
          <source>(This example works only with host applications that support classes.)</source>
          <target state="translated">(Cet exemple fonctionne uniquement avec les applications hôtes qui prennent en charge des classes.)</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.#ctor">
          <source>Creates and returns a new Visual Basic <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object.</source>
          <target state="translated">Crée et retourne un objet <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> Visual Basic.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.#ctor">
          <source>The Visual Basic collection returned by this constructor is empty and does not have any initial capacity allocated.</source>
          <target state="translated">La collection Visual Basic retournée par ce constructeur est vide et n’a pas aucune capacité initiale allouée.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.#ctor">
          <source>Visual Basic collections are not compatible with the <ph id="ph1">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph> collections available in the <ph id="ph2">&lt;xref:System.Collections?displayProperty=nameWithType&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph>, and <ph id="ph4">&lt;xref:System.Collections.Specialized?displayProperty=nameWithType&gt;</ph> namespaces.</source>
          <target state="translated">Collections de Visual Basic ne sont pas compatibles avec la <ph id="ph1">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph> collections disponibles dans le <ph id="ph2">&lt;xref:System.Collections?displayProperty=nameWithType&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph>, et <ph id="ph4">&lt;xref:System.Collections.Specialized?displayProperty=nameWithType&gt;</ph> espaces de noms.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.#ctor">
          <source>The following example creates a new Visual Basic collection and assigns it to the variable <ph id="ph1">`coll`</ph>:</source>
          <target state="translated">L’exemple suivant crée une nouvelle collection de Visual Basic et l’affecte à la variable <ph id="ph1">`coll`</ph>:</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.#ctor">
          <source>This <ph id="ph1">`Collection`</ph> object is one-based, which means that the index values of the elements range from 1 through the value of the <ph id="ph2">`Count`</ph> property.</source>
          <target state="translated">Cela <ph id="ph1">`Collection`</ph> objet est basé sur un, ce qui signifie que les valeurs d’index de la plage d’éléments compris entre 1 et la valeur de la <ph id="ph2">`Count`</ph> propriété.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.#ctor">
          <source>Visual Basic collections hold elements of type <ph id="ph1">&lt;xref:System.Object&gt;</ph>.</source>
          <target state="translated">Collections de Visual Basic contiennent des éléments de type <ph id="ph1">&lt;xref:System.Object&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>Required.</source>
          <target state="translated">Obligatoire.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>An object of any type that specifies the element to add to the collection.</source>
          <target state="translated">Objet de tout type qui spécifie les erreurs à ajouter à la collection.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>Optional.</source>
          <target state="translated">Optionnel.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>A unique <ph id="ph1">&lt;see langword="String" /&gt;</ph> expression that specifies a key string that can be used instead of a positional index to access this new element in the collection.</source>
          <target state="translated">Expression <ph id="ph1">&lt;see langword="String" /&gt;</ph> unique qui spécifie une chaîne clé qui peut être utilisée au lieu d'un index de position pour accéder à ce nouvel élément dans la collection.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>Optional.</source>
          <target state="translated">Optionnel.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>An expression that specifies a relative position in the collection.</source>
          <target state="translated">Expression qui spécifie une position relative dans la collection.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>The element to be added is placed in the collection before the element identified by the <bpt id="p1">&lt;c&gt;</bpt>Before<ept id="p1">&lt;/c&gt;</ept> argument.</source>
          <target state="translated">L’élément à ajouter est placé dans la collection avant l’élément identifié par l’argument <bpt id="p1">&lt;c&gt;</bpt>Before<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>Before<ept id="p1">&lt;/c&gt;</ept> is a numeric expression, it must be a number from 1 through the value of the collection's <ph id="ph1">&lt;see cref="P:Microsoft.VisualBasic.Collection.Count" /&gt;</ph> property.</source>
          <target state="translated">Si <bpt id="p1">&lt;c&gt;</bpt>Before<ept id="p1">&lt;/c&gt;</ept> est une expression numérique, ce doit être un nombre entre 1 et la valeur de la propriété <ph id="ph1">&lt;see cref="P:Microsoft.VisualBasic.Collection.Count" /&gt;</ph> de la collection.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>Before<ept id="p1">&lt;/c&gt;</ept> is a <ph id="ph1">&lt;see langword="String" /&gt;</ph> expression, it must correspond to the key string specified when the element being referred to was added to the collection.</source>
          <target state="translated">Si <bpt id="p1">&lt;c&gt;</bpt>Before<ept id="p1">&lt;/c&gt;</ept> est une expression <ph id="ph1">&lt;see langword="String" /&gt;</ph>, il doit correspondre à la chaîne clé spécifiée au moment où l’élément auquel il est fait référence a été ajouté à la collection.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>You cannot specify both <bpt id="p1">&lt;c&gt;</bpt>Before<ept id="p1">&lt;/c&gt;</ept> and <bpt id="p2">&lt;c&gt;</bpt>After<ept id="p2">&lt;/c&gt;</ept>.</source>
          <target state="translated">Vous ne pouvez pas spécifier à la fois les arguments <bpt id="p1">&lt;c&gt;</bpt>Before<ept id="p1">&lt;/c&gt;</ept> et <bpt id="p2">&lt;c&gt;</bpt>After<ept id="p2">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>Optional.</source>
          <target state="translated">Optionnel.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>An expression that specifies a relative position in the collection.</source>
          <target state="translated">Expression qui spécifie une position relative dans la collection.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>The element to be added is placed in the collection after the element identified by the <bpt id="p1">&lt;c&gt;</bpt>After<ept id="p1">&lt;/c&gt;</ept> argument.</source>
          <target state="translated">L’élément à ajouter est placé dans la collection après l’élément identifié par l’argument <bpt id="p1">&lt;c&gt;</bpt>After<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>After<ept id="p1">&lt;/c&gt;</ept> is a numeric expression, it must be a number from 1 through the value of the collection's <ph id="ph1">&lt;see langword="Count" /&gt;</ph> property.</source>
          <target state="translated">Si <bpt id="p1">&lt;c&gt;</bpt>After<ept id="p1">&lt;/c&gt;</ept> est une expression numérique, ce doit être un nombre entre 1 et la valeur de la propriété <ph id="ph1">&lt;see langword="Count" /&gt;</ph> de la collection.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>After<ept id="p1">&lt;/c&gt;</ept> is a <ph id="ph1">&lt;see langword="String" /&gt;</ph> expression, it must correspond to the key string specified when the element referred to was added to the collection.</source>
          <target state="translated">Si <bpt id="p1">&lt;c&gt;</bpt>After<ept id="p1">&lt;/c&gt;</ept> est une expression <ph id="ph1">&lt;see langword="String" /&gt;</ph>, il doit correspondre à la chaîne clé spécifiée au moment où l’élément auquel il est fait référence a été ajouté à la collection.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>You cannot specify both <bpt id="p1">&lt;c&gt;</bpt>Before<ept id="p1">&lt;/c&gt;</ept> and <bpt id="p2">&lt;c&gt;</bpt>After<ept id="p2">&lt;/c&gt;</ept>.</source>
          <target state="translated">Vous ne pouvez pas spécifier à la fois les arguments <bpt id="p1">&lt;c&gt;</bpt>Before<ept id="p1">&lt;/c&gt;</ept> et <bpt id="p2">&lt;c&gt;</bpt>After<ept id="p2">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>Adds an element to a <ph id="ph1">&lt;see langword="Collection" /&gt;</ph> object.</source>
          <target state="translated">Ajoute un élément à un objet <ph id="ph1">&lt;see langword="Collection" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>The <ph id="ph1">`Before`</ph> or <ph id="ph2">`After`</ph> argument must refer to an existing element of the collection; otherwise, an error occurs.</source>
          <target state="translated">Le <ph id="ph1">`Before`</ph> ou <ph id="ph2">`After`</ph> argument doit faire référence à un élément existant de la collection ; sinon, une erreur se produit.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>If both the <ph id="ph1">`Before`</ph> and <ph id="ph2">`After`</ph> arguments are omitted, the new object is added to the end of the collection.</source>
          <target state="translated">Si les deux le <ph id="ph1">`Before`</ph> et <ph id="ph2">`After`</ph> arguments sont omis, le nouvel objet est ajouté à la fin de la collection.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>An error also occurs if a specified <ph id="ph1">`Key`</ph> value matches the key for an existing element of the collection.</source>
          <target state="translated">Une erreur se produit également si un <ph id="ph1">`Key`</ph> valeur correspond à la clé pour un élément existant de la collection.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>The following example uses the <ph id="ph1">`Add`</ph> method to add <ph id="ph2">`child`</ph> objects — instances of a class called <ph id="ph3">`child`</ph> containing a <ph id="ph4">`Public`</ph> property <ph id="ph5">`name`</ph> — to a collection called <ph id="ph6">`family`</ph>.</source>
          <target state="translated">L’exemple suivant utilise le <ph id="ph1">`Add`</ph> méthode pour ajouter <ph id="ph2">`child`</ph> objets : instances d’une classe appelée <ph id="ph3">`child`</ph> contenant un <ph id="ph4">`Public`</ph> propriété <ph id="ph5">`name`</ph> — à une collection appelée <ph id="ph6">`family`</ph>.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>To see how this works, create a <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> with two <ph id="ph2">&lt;xref:System.Windows.Forms.Button&gt;</ph> controls and set their <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> properties to <ph id="ph4">`Add`</ph> and <ph id="ph5">`List`</ph>.</source>
          <target state="translated">Pour voir comment cela fonctionne, créez un <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> avec deux <ph id="ph2">&lt;xref:System.Windows.Forms.Button&gt;</ph> contrôles et définir leurs <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> propriétés <ph id="ph4">`Add`</ph> et <ph id="ph5">`List`</ph>.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>Add the <ph id="ph1">`child`</ph> class definition and the <ph id="ph2">`family`</ph> declaration to the form code.</source>
          <target state="translated">Ajouter le <ph id="ph1">`child`</ph> définition de classe et le <ph id="ph2">`family`</ph> déclaration au code du formulaire.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>Modify the <ph id="ph1">`_Click`</ph> event handlers for the <bpt id="p1">**</bpt>Add<ept id="p1">**</ept> and <bpt id="p2">**</bpt>List<ept id="p2">**</ept> buttons as shown.</source>
          <target state="translated">Modifier la <ph id="ph1">`_Click`</ph> gestionnaires d’événements pour le <bpt id="p1">**</bpt>ajouter<ept id="p1">**</ept> et <bpt id="p2">**</bpt>liste<ept id="p2">**</ept> boutons comme indiqué.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>The <bpt id="p1">**</bpt>Add<ept id="p1">**</ept> button allows you to add children.</source>
          <target state="translated">Le <bpt id="p1">**</bpt>ajouter<ept id="p1">**</ept> bouton vous permet d’ajouter des enfants.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
          <source>The <bpt id="p1">**</bpt>List<ept id="p1">**</ept> button displays the names of all the children.</source>
          <target state="translated">Le <bpt id="p1">**</bpt>liste<ept id="p1">**</ept> bouton affiche les noms de tous les enfants.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Clear">
          <source>Deletes all elements of a Visual Basic <ph id="ph1">&lt;see langword="Collection" /&gt;</ph> object.</source>
          <target state="translated">Supprime tous les éléments d'un objet Visual Basic <ph id="ph1">&lt;see langword="Collection" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Clear">
          <source>The <ph id="ph1">`Clear`</ph> method empties the collection and resets its <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection.Count%2A&gt;</ph> property to 0.</source>
          <target state="translated">Le <ph id="ph1">`Clear`</ph> méthode vide la collection et réinitialise sa <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection.Count%2A&gt;</ph> 0 à la propriété.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Contains(System.String)">
          <source>Required.</source>
          <target state="translated">Obligatoire.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Contains(System.String)">
          <source>A <ph id="ph1">&lt;see langword="String" /&gt;</ph> expression that specifies the key for which to search the elements of the collection.</source>
          <target state="translated">Une expression <ph id="ph1">&lt;see langword="String" /&gt;</ph> qui spécifie la clé à rechercher dans les éléments de la collection.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Contains(System.String)">
          <source>Returns a <ph id="ph1">&lt;see langword="Boolean" /&gt;</ph> value indicating whether a Visual Basic <ph id="ph2">&lt;see langword="Collection" /&gt;</ph> object contains an element with a specific key.</source>
          <target state="translated">Retourne une valeur <ph id="ph1">&lt;see langword="Boolean" /&gt;</ph> indiquant si un objet Visual Basic <ph id="ph2">&lt;see langword="Collection" /&gt;</ph> contient un élément avec une clé spécifique.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Contains(System.String)">
          <source>Returns a <ph id="ph1">&lt;see langword="Boolean" /&gt;</ph> value indicating whether a Visual Basic <ph id="ph2">&lt;see langword="Collection" /&gt;</ph> object contains an element with a specific key.</source>
          <target state="translated">Retourne une valeur <ph id="ph1">&lt;see langword="Boolean" /&gt;</ph> indiquant si un objet Visual Basic <ph id="ph2">&lt;see langword="Collection" /&gt;</ph> contient un élément avec une clé spécifique.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Contains(System.String)">
          <source><ph id="ph1">`Contains`</ph> returns <ph id="ph2">`True`</ph> if the collection contains an element with a key exactly matching <ph id="ph3">`Key`</ph>.</source>
          <target state="translated"><ph id="ph1">`Contains`</ph> Retourne <ph id="ph2">`True`</ph> si la collection contient un élément avec une clé correspondant exactement <ph id="ph3">`Key`</ph>.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Contains(System.String)">
          <source>Otherwise, <ph id="ph1">`Contains`</ph> returns <ph id="ph2">`False`</ph>.</source>
          <target state="translated">Dans le cas contraire, <ph id="ph1">`Contains`</ph> retourne <ph id="ph2">`False`</ph>.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Contains(System.String)">
          <source>Case is ignored when matching key values.</source>
          <target state="translated">La casse est ignorée lors de la correspondance des valeurs de clé.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Contains(System.String)">
          <source>A Visual Basic <ph id="ph1">`Collection`</ph> can hold some elements that have keys and other elements without keys.</source>
          <target state="translated">Un Visual Basic <ph id="ph1">`Collection`</ph> peut contenir des éléments qui ont des clés et autres éléments sans clés.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Contains(System.String)">
          <source>This depends on whether the call to the <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection.Add%2A&gt;</ph> method supplies an argument to the optional <ph id="ph2">`Key`</ph> parameter.</source>
          <target state="translated">Cela dépend de si l’appel à la <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection.Add%2A&gt;</ph> méthode fournit un argument pour le paramètre facultatif <ph id="ph2">`Key`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Contains(System.String)">
          <source>If you intend to search the collection for elements using their keys, remember to supply the <ph id="ph1">`Key`</ph> argument every time you call the <ph id="ph2">`Add`</ph> method.</source>
          <target state="translated">Si vous souhaitez rechercher dans la collection d’éléments à l’aide de leurs clés, pensez à fournir le <ph id="ph1">`Key`</ph> argument chaque fois que vous appelez le <ph id="ph2">`Add`</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualBasic.Collection.Count">
          <source>Returns an <ph id="ph1">&lt;see langword="Integer" /&gt;</ph> containing the number of elements in a collection.</source>
          <target state="translated">Retourne un <ph id="ph1">&lt;see langword="Integer" /&gt;</ph> contenant le nombre d'éléments dans une collection.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualBasic.Collection.Count">
          <source>Read-only.</source>
          <target state="translated">Lecture seule.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Count">
          <source>Returns an <ph id="ph1">&lt;see langword="Integer" /&gt;</ph> containing the number of elements in a collection.</source>
          <target state="translated">Retourne un <ph id="ph1">&lt;see langword="Integer" /&gt;</ph> contenant le nombre d'éléments dans une collection.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Count">
          <source>Read-only.</source>
          <target state="translated">Lecture seule.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Count">
          <source>Use the <ph id="ph1">`Count`</ph> property to determine the number of elements in a <ph id="ph2">`Collection`</ph> object.</source>
          <target state="translated">Utilisez le <ph id="ph1">`Count`</ph> propriété pour déterminer le nombre d’éléments dans un <ph id="ph2">`Collection`</ph> objet.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Count">
          <source>This example illustrates the use of the <ph id="ph1">`Count`</ph> property to display the number of elements in a <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> object in the variable <ph id="ph3">`birthdays`</ph>.</source>
          <target state="translated">Cet exemple illustre l’utilisation de la <ph id="ph1">`Count`</ph> propriété pour afficher le nombre d’éléments dans un <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> objet dans la variable <ph id="ph3">`birthdays`</ph>.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Count">
          <source>The <ph id="ph1">`Collection`</ph> object is one-based, which means that the index values of the elements range from 1 through the value of the <ph id="ph2">`Count`</ph> property.</source>
          <target state="translated">Le <ph id="ph1">`Collection`</ph> objet est basé sur un, ce qui signifie que les valeurs d’index de la plage d’éléments compris entre 1 et la valeur de la <ph id="ph2">`Count`</ph> propriété.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.GetEnumerator">
          <source>Returns a reference to an enumerator object, which is used to iterate over a <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object.</source>
          <target state="translated">Récupère une référence à un objet d'énumérateur, qui est utilisée pour itérer au sein d'un objet <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.GetEnumerator">
          <source>Returns a reference to an enumerator object, which is used to iterate over a <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object.</source>
          <target state="translated">Récupère une référence à un objet d'énumérateur, qui est utilisée pour itérer au sein d'un objet <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.GetEnumerator">
          <source>The <bpt id="p1">[</bpt>For Each...Next Statement<ept id="p1">](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md)</ept> calls <ph id="ph1">`GetEnumerator`</ph> to obtain an enumerator object to support iteration over a collection's elements.</source>
          <target state="translated">Le <bpt id="p1">[</bpt>pour chaque... L’instruction suivante<ept id="p1">](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md)</ept> appelle <ph id="ph1">`GetEnumerator`</ph> pour obtenir un objet énumérateur pour prendre en charge d’itération sur les éléments d’une collection.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.GetEnumerator">
          <source>Normally, you use a <ph id="ph1">`For Each`</ph>...<ph id="ph2">`Next`</ph> loop to traverse a collection or array, and you do not need to call <ph id="ph3">`GetEnumerator`</ph> explicitly.</source>
          <target state="translated">Normalement, vous utilisez un <ph id="ph1">`For Each`</ph>... <ph id="ph2">`Next`</ph> pour parcourir une collection ou un tableau, et vous n’avez pas besoin d’appeler <ph id="ph3">`GetEnumerator`</ph> explicitement.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.GetEnumerator">
          <source>If you need closer control over the iteration than the <ph id="ph1">`For Each`</ph>...<ph id="ph2">`Next`</ph> statements provide, you can use the <ph id="ph3">`GetEnumerator`</ph> method to perform a customized traversal.</source>
          <target state="translated">Si vous avez besoin de contrôle plus précis sur l’itération à la <ph id="ph1">`For Each`</ph>... <ph id="ph2">`Next`</ph> fournissent des instructions, vous pouvez utiliser la <ph id="ph3">`GetEnumerator`</ph> méthode pour effectuer un parcours personnalisé.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.GetEnumerator">
          <source>The following are some cases in which you might need to do this.</source>
          <target state="translated">Voici certains cas dans lesquels vous devrez peut-être pour ce faire.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.GetEnumerator">
          <source>You might want to return to the beginning of the collection and start the iteration again before it is finished.</source>
          <target state="translated">Vous pouvez souhaiter retourner au début de la collection et redémarrer l’itération avant qu’elle est terminée.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.GetEnumerator">
          <source>You might want to skip over one or more elements for a variety of reasons.</source>
          <target state="translated">Vous pouvez souhaiter ignorer un ou plusieurs éléments pour diverses raisons.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.GetEnumerator">
          <source>You might need to change the elements of the collection in the middle of a traversal.</source>
          <target state="translated">Vous devrez peut-être modifier les éléments de la collection au milieu d’un parcours.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.GetEnumerator">
          <source>In this case you must obtain a new enumerator object because the previous one is invalidated.</source>
          <target state="translated">Dans ce cas, vous devez obtenir un nouvel objet énumérateur, car le précédent est invalidé.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.GetEnumerator">
          <source>The following example shows how to use <ph id="ph1">`GetEnumerator`</ph> to retrieve all the elements of a <ph id="ph2">`Collection`</ph> object.</source>
          <target state="translated">L’exemple suivant montre comment utiliser <ph id="ph1">`GetEnumerator`</ph> pour récupérer tous les éléments d’un <ph id="ph2">`Collection`</ph> objet.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.GetEnumerator">
          <source><ph id="ph1">`GetEnumerator`</ph> constructs and returns an enumerator object, which implements the <ph id="ph2">&lt;xref:System.Collections.IEnumerator&gt;</ph> interface of the <ph id="ph3">&lt;xref:System.Collections&gt;</ph> namespace.</source>
          <target state="translated"><ph id="ph1">`GetEnumerator`</ph> construit et retourne un objet énumérateur, qui implémente le <ph id="ph2">&lt;xref:System.Collections.IEnumerator&gt;</ph> interface de le <ph id="ph3">&lt;xref:System.Collections&gt;</ph> espace de noms.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.GetEnumerator">
          <source>The enumerator object exposes the <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> property and the <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> methods.</source>
          <target state="translated">L’objet énumérateur expose la <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> propriété et la <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> et <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> méthodes.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.GetEnumerator">
          <source>For more information, see <bpt id="p1">[</bpt>For Each...Next Statement<ept id="p1">](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md)</ept>.</source>
          <target state="translated">Pour plus d’informations, consultez <bpt id="p1">[</bpt>For Each... L’instruction suivante<ept id="p1">](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md)</ept>.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualBasic.Collection">
          <source>Returns a specific element of a <ph id="ph1">&lt;see langword="Collection" /&gt;</ph> object either by position or by key.</source>
          <target state="translated">Retourne un élément spécifique d'un objet <ph id="ph1">&lt;see langword="Collection" /&gt;</ph> en fonction de sa position ou de sa clé.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualBasic.Collection">
          <source>Read-only.</source>
          <target state="translated">Lecture seule.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualBasic.Collection.Item(System.Int32)">
          <source>(A) A numeric expression that specifies the position of an element of the collection.</source>
          <target state="translated">(A) Expression numérique qui spécifie la position d'un élément de la collection.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualBasic.Collection.Item(System.Int32)">
          <source><bpt id="p1">&lt;c&gt;</bpt>Index<ept id="p1">&lt;/c&gt;</ept> must be a number from 1 through the value of the collection's <ph id="ph1">&lt;see cref="P:Microsoft.VisualBasic.Collection.Count" /&gt;</ph> property.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>Index<ept id="p1">&lt;/c&gt;</ept> doit être un nombre compris entre 1 et la valeur de la propriété <ph id="ph1">&lt;see cref="P:Microsoft.VisualBasic.Collection.Count" /&gt;</ph> de la collection.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualBasic.Collection.Item(System.Int32)">
          <source>Or (B) An <ph id="ph1">&lt;see langword="Object" /&gt;</ph> expression that specifies the position or key string of an element of the collection.</source>
          <target state="translated">Ou (B) Une expression <ph id="ph1">&lt;see langword="Object" /&gt;</ph> qui spécifie la position ou la chaîne clé d'un élément de la collection.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualBasic.Collection.Item(System.Int32)">
          <source>Returns a specific element of a <ph id="ph1">&lt;see langword="Collection" /&gt;</ph> object either by position or by key.</source>
          <target state="translated">Retourne un élément spécifique d'un objet <ph id="ph1">&lt;see langword="Collection" /&gt;</ph> en fonction de sa position ou de sa clé.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualBasic.Collection.Item(System.Int32)">
          <source>Read-only.</source>
          <target state="translated">Lecture seule.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.Int32)">
          <source>Returns a specific element of a <ph id="ph1">&lt;see langword="Collection" /&gt;</ph> object either by position or by key.</source>
          <target state="translated">Retourne un élément spécifique d'un objet <ph id="ph1">&lt;see langword="Collection" /&gt;</ph> en fonction de sa position ou de sa clé.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.Int32)">
          <source>Read-only.</source>
          <target state="translated">Lecture seule.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.Int32)">
          <source>If <ph id="ph1">`Index`</ph> is of type <ph id="ph2">`Object`</ph>, the <ph id="ph3">`Item`</ph> property attempts to treat it as a <ph id="ph4">`String`</ph>, <ph id="ph5">`Char`</ph>, <ph id="ph6">`Char`</ph> array, or integer value.</source>
          <target state="translated">Si <ph id="ph1">`Index`</ph> est de type <ph id="ph2">`Object`</ph>, le <ph id="ph3">`Item`</ph> propriété tente de le traiter comme un <ph id="ph4">`String`</ph>, <ph id="ph5">`Char`</ph>, <ph id="ph6">`Char`</ph> tableau ou la valeur entière.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.Int32)">
          <source>If <ph id="ph1">`Item`</ph> cannot convert <ph id="ph2">`Index`</ph> to <ph id="ph3">`String`</ph> or <ph id="ph4">`Integer`</ph>, it throws an <ph id="ph5">&lt;xref:System.ArgumentException&gt;</ph> exception.</source>
          <target state="translated">Si <ph id="ph1">`Item`</ph> Impossible de convertir <ph id="ph2">`Index`</ph> à <ph id="ph3">`String`</ph> ou <ph id="ph4">`Integer`</ph>, elle lève une <ph id="ph5">&lt;xref:System.ArgumentException&gt;</ph> exception.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.Int32)">
          <source>The <ph id="ph1">`Item`</ph> property is the default property for a collection.</source>
          <target state="translated">Le <ph id="ph1">`Item`</ph> propriété est la propriété par défaut pour une collection.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.Int32)">
          <source>Therefore, the following lines of code are equivalent.</source>
          <target state="translated">Par conséquent, les lignes de code suivantes sont équivalentes.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.Int32)">
          <source>The following example uses the <ph id="ph1">`Item`</ph> property to retrieve a reference to an object in a collection.</source>
          <target state="translated">L’exemple suivant utilise le <ph id="ph1">`Item`</ph> propriété à récupérer une référence à un objet dans une collection.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.Int32)">
          <source>It creates <ph id="ph1">`birthdays`</ph> as a <ph id="ph2">`Collection`</ph> object and then retrieves the object representing Bill's birthday, using the key <ph id="ph3">`"Bill"`</ph> as the <ph id="ph4">`Index`</ph> argument.</source>
          <target state="translated">Il crée <ph id="ph1">`birthdays`</ph> comme un <ph id="ph2">`Collection`</ph> de l’objet, puis récupère l’objet représentant l’anniversaire de Bill, à l’aide de la clé <ph id="ph3">`"Bill"`</ph> comme le <ph id="ph4">`Index`</ph> argument.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.Int32)">
          <source>Note that the first call explicitly specifies the <ph id="ph1">`Item`</ph> property, but the second does not.</source>
          <target state="translated">Notez que le premier appel spécifie explicitement le <ph id="ph1">`Item`</ph> propriété, mais la seconde n’est pas.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.Int32)">
          <source>Both calls work because the <ph id="ph1">`Item`</ph> property is the default property for a <ph id="ph2">`Collection`</ph> object.</source>
          <target state="translated">Les deux appels fonctionnent, car le <ph id="ph1">`Item`</ph> propriété est la propriété par défaut pour un <ph id="ph2">`Collection`</ph> objet.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualBasic.Collection.Item(System.Object)">
          <source>(A) A numeric expression that specifies the position of an element of the collection.</source>
          <target state="translated">(A) Expression numérique qui spécifie la position d'un élément de la collection.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualBasic.Collection.Item(System.Object)">
          <source><bpt id="p1">&lt;c&gt;</bpt>Index<ept id="p1">&lt;/c&gt;</ept> must be a number from 1 through the value of the collection's <ph id="ph1">&lt;see cref="P:Microsoft.VisualBasic.Collection.Count" /&gt;</ph> property.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>Index<ept id="p1">&lt;/c&gt;</ept> doit être un nombre compris entre 1 et la valeur de la propriété <ph id="ph1">&lt;see cref="P:Microsoft.VisualBasic.Collection.Count" /&gt;</ph> de la collection.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualBasic.Collection.Item(System.Object)">
          <source>Or (B) An <ph id="ph1">&lt;see langword="Object" /&gt;</ph> expression that specifies the position or key string of an element of the collection.</source>
          <target state="translated">Ou (B) Une expression <ph id="ph1">&lt;see langword="Object" /&gt;</ph> qui spécifie la position ou la chaîne clé d'un élément de la collection.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualBasic.Collection.Item(System.Object)">
          <source>Returns a specific element of a <ph id="ph1">&lt;see langword="Collection" /&gt;</ph> object either by position or by key.</source>
          <target state="translated">Retourne un élément spécifique d'un objet <ph id="ph1">&lt;see langword="Collection" /&gt;</ph> en fonction de sa position ou de sa clé.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualBasic.Collection.Item(System.Object)">
          <source>Read-only.</source>
          <target state="translated">Lecture seule.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.Object)">
          <source>Returns a specific element of a <ph id="ph1">&lt;see langword="Collection" /&gt;</ph> object either by position or by key.</source>
          <target state="translated">Retourne un élément spécifique d'un objet <ph id="ph1">&lt;see langword="Collection" /&gt;</ph> en fonction de sa position ou de sa clé.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.Object)">
          <source>Read-only.</source>
          <target state="translated">Lecture seule.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.Object)">
          <source>If <ph id="ph1">`Index`</ph> is of type <ph id="ph2">`Object`</ph>, the <ph id="ph3">`Item`</ph> property attempts to treat it as a <ph id="ph4">`String`</ph>, <ph id="ph5">`Char`</ph>, <ph id="ph6">`Char`</ph> array, or integer value.</source>
          <target state="translated">Si <ph id="ph1">`Index`</ph> est de type <ph id="ph2">`Object`</ph>, le <ph id="ph3">`Item`</ph> propriété tente de le traiter comme un <ph id="ph4">`String`</ph>, <ph id="ph5">`Char`</ph>, <ph id="ph6">`Char`</ph> tableau ou la valeur entière.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.Object)">
          <source>If <ph id="ph1">`Item`</ph> cannot convert <ph id="ph2">`Index`</ph> to <ph id="ph3">`String`</ph> or <ph id="ph4">`Integer`</ph>, it throws an <ph id="ph5">&lt;xref:System.ArgumentException&gt;</ph> exception.</source>
          <target state="translated">Si <ph id="ph1">`Item`</ph> Impossible de convertir <ph id="ph2">`Index`</ph> à <ph id="ph3">`String`</ph> ou <ph id="ph4">`Integer`</ph>, elle lève une <ph id="ph5">&lt;xref:System.ArgumentException&gt;</ph> exception.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.Object)">
          <source>The <ph id="ph1">`Item`</ph> property is the default property for a collection.</source>
          <target state="translated">Le <ph id="ph1">`Item`</ph> propriété est la propriété par défaut pour une collection.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.Object)">
          <source>Therefore, the following lines of code are equivalent.</source>
          <target state="translated">Par conséquent, les lignes de code suivantes sont équivalentes.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.Object)">
          <source>The following example uses the <ph id="ph1">`Item`</ph> property to retrieve a reference to an object in a collection.</source>
          <target state="translated">L’exemple suivant utilise le <ph id="ph1">`Item`</ph> propriété à récupérer une référence à un objet dans une collection.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.Object)">
          <source>It creates <ph id="ph1">`birthdays`</ph> as a <ph id="ph2">`Collection`</ph> object and then retrieves the object representing Bill's birthday, using the key <ph id="ph3">`"Bill"`</ph> as the <ph id="ph4">`Index`</ph> argument.</source>
          <target state="translated">Il crée <ph id="ph1">`birthdays`</ph> comme un <ph id="ph2">`Collection`</ph> de l’objet, puis récupère l’objet représentant l’anniversaire de Bill, à l’aide de la clé <ph id="ph3">`"Bill"`</ph> comme le <ph id="ph4">`Index`</ph> argument.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.Object)">
          <source>Note that the first call explicitly specifies the <ph id="ph1">`Item`</ph> property, but the second does not.</source>
          <target state="translated">Notez que le premier appel spécifie explicitement le <ph id="ph1">`Item`</ph> propriété, mais la seconde n’est pas.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.Object)">
          <source>Both calls work because the <ph id="ph1">`Item`</ph> property is the default property for a <ph id="ph2">`Collection`</ph> object.</source>
          <target state="translated">Les deux appels fonctionnent, car le <ph id="ph1">`Item`</ph> propriété est la propriété par défaut pour un <ph id="ph2">`Collection`</ph> objet.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualBasic.Collection.Item(System.String)">
          <source>A unique <ph id="ph1">&lt;see langword="String" /&gt;</ph> expression that specifies a key string that can be used, instead of a positional index, to access an element of the collection.</source>
          <target state="translated">Expression <ph id="ph1">&lt;see langword="String" /&gt;</ph> unique qui spécifie une chaîne clé qui peut être utilisée au lieu d'un index de position pour accéder à un élément de la collection.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualBasic.Collection.Item(System.String)">
          <source><bpt id="p1">&lt;c&gt;</bpt>Key<ept id="p1">&lt;/c&gt;</ept> must correspond to the <bpt id="p2">&lt;c&gt;</bpt>Key<ept id="p2">&lt;/c&gt;</ept> argument specified when the element was added to the collection.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>Key<ept id="p1">&lt;/c&gt;</ept> doit correspondre à l’argument <bpt id="p2">&lt;c&gt;</bpt>Key<ept id="p2">&lt;/c&gt;</ept> spécifié lorsque l’élément a été ajouté à la collection.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualBasic.Collection.Item(System.String)">
          <source>Returns a specific element of a <ph id="ph1">&lt;see langword="Collection" /&gt;</ph> object either by position or by key.</source>
          <target state="translated">Retourne un élément spécifique d'un objet <ph id="ph1">&lt;see langword="Collection" /&gt;</ph> en fonction de sa position ou de sa clé.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualBasic.Collection.Item(System.String)">
          <source>Read-only.</source>
          <target state="translated">Lecture seule.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.String)">
          <source>Returns a specific element of a <ph id="ph1">&lt;see langword="Collection" /&gt;</ph> object either by position or by key.</source>
          <target state="translated">Retourne un élément spécifique d'un objet <ph id="ph1">&lt;see langword="Collection" /&gt;</ph> en fonction de sa position ou de sa clé.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.String)">
          <source>Read-only.</source>
          <target state="translated">Lecture seule.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.String)">
          <source>If <ph id="ph1">`Index`</ph> is of type <ph id="ph2">`Object`</ph>, the <ph id="ph3">`Item`</ph> property attempts to treat it as a <ph id="ph4">`String`</ph>, <ph id="ph5">`Char`</ph>, <ph id="ph6">`Char`</ph> array, or integer value.</source>
          <target state="translated">Si <ph id="ph1">`Index`</ph> est de type <ph id="ph2">`Object`</ph>, le <ph id="ph3">`Item`</ph> propriété tente de le traiter comme un <ph id="ph4">`String`</ph>, <ph id="ph5">`Char`</ph>, <ph id="ph6">`Char`</ph> tableau ou la valeur entière.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.String)">
          <source>If <ph id="ph1">`Item`</ph> cannot convert <ph id="ph2">`Index`</ph> to <ph id="ph3">`String`</ph> or <ph id="ph4">`Integer`</ph>, it throws an <ph id="ph5">&lt;xref:System.ArgumentException&gt;</ph> exception.</source>
          <target state="translated">Si <ph id="ph1">`Item`</ph> Impossible de convertir <ph id="ph2">`Index`</ph> à <ph id="ph3">`String`</ph> ou <ph id="ph4">`Integer`</ph>, elle lève une <ph id="ph5">&lt;xref:System.ArgumentException&gt;</ph> exception.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.String)">
          <source>The <ph id="ph1">`Item`</ph> property is the default property for a collection.</source>
          <target state="translated">Le <ph id="ph1">`Item`</ph> propriété est la propriété par défaut pour une collection.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.String)">
          <source>Therefore, the following lines of code are equivalent.</source>
          <target state="translated">Par conséquent, les lignes de code suivantes sont équivalentes.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.String)">
          <source>The following example uses the <ph id="ph1">`Item`</ph> property to retrieve a reference to an object in a collection.</source>
          <target state="translated">L’exemple suivant utilise le <ph id="ph1">`Item`</ph> propriété à récupérer une référence à un objet dans une collection.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.String)">
          <source>It creates <ph id="ph1">`birthdays`</ph> as a <ph id="ph2">`Collection`</ph> object and then retrieves the object representing Bill's birthday, using the key <ph id="ph3">`"Bill"`</ph> as the <ph id="ph4">`Index`</ph> argument.</source>
          <target state="translated">Il crée <ph id="ph1">`birthdays`</ph> comme un <ph id="ph2">`Collection`</ph> de l’objet, puis récupère l’objet représentant l’anniversaire de Bill, à l’aide de la clé <ph id="ph3">`"Bill"`</ph> comme le <ph id="ph4">`Index`</ph> argument.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.String)">
          <source>Note that the first call explicitly specifies the <ph id="ph1">`Item`</ph> property, but the second does not.</source>
          <target state="translated">Notez que le premier appel spécifie explicitement le <ph id="ph1">`Item`</ph> propriété, mais la seconde n’est pas.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.Collection.Item(System.String)">
          <source>Both calls work because the <ph id="ph1">`Item`</ph> property is the default property for a <ph id="ph2">`Collection`</ph> object.</source>
          <target state="translated">Les deux appels fonctionnent, car le <ph id="ph1">`Item`</ph> propriété est la propriété par défaut pour un <ph id="ph2">`Collection`</ph> objet.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualBasic.Collection">
          <source>Removes an element from a <ph id="ph1">&lt;see langword="Collection" /&gt;</ph> object.</source>
          <target state="translated">Supprime un élément d'un objet <ph id="ph1">&lt;see langword="Collection" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Remove(System.Int32)">
          <source>A numeric expression that specifies the position of an element of the collection.</source>
          <target state="translated">Expression numérique qui spécifie la position d'un élément de la collection.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Remove(System.Int32)">
          <source><bpt id="p1">&lt;c&gt;</bpt>Index<ept id="p1">&lt;/c&gt;</ept> must be a number from 1 through the value of the collection's <ph id="ph1">&lt;see cref="P:Microsoft.VisualBasic.Collection.Count" /&gt;</ph> property.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>Index<ept id="p1">&lt;/c&gt;</ept> doit être un nombre compris entre 1 et la valeur de la propriété <ph id="ph1">&lt;see cref="P:Microsoft.VisualBasic.Collection.Count" /&gt;</ph> de la collection.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Remove(System.Int32)">
          <source>Removes an element from a <ph id="ph1">&lt;see langword="Collection" /&gt;</ph> object.</source>
          <target state="translated">Supprime un élément d'un objet <ph id="ph1">&lt;see langword="Collection" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Remove(System.Int32)">
          <source>When <ph id="ph1">`Remove`</ph> deletes an element from a collection, it decrements the collection's <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection.Count%2A&gt;</ph> property by one.</source>
          <target state="translated">Lorsque <ph id="ph1">`Remove`</ph> supprime un élément d’une collection, il décrémente la collection <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection.Count%2A&gt;</ph> propriété d’une unité.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Remove(System.Int32)">
          <source>It also decrements the <ph id="ph1">`Index`</ph> value of every element that formerly followed the deleted element in the collection.</source>
          <target state="translated">Il décrémente également la <ph id="ph1">`Index`</ph> la valeur de chaque élément qui suivait l’élément supprimé de la collection.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Remove(System.Int32)">
          <source>If an element was added to the collection without a <ph id="ph1">`Key`</ph>, you must use its <ph id="ph2">`Index`</ph> to remove it.</source>
          <target state="translated">Si un élément a été ajouté à la collection sans un <ph id="ph1">`Key`</ph>, vous devez utiliser son <ph id="ph2">`Index`</ph> à supprimer.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Remove(System.Int32)">
          <source>This example illustrates the use of the <ph id="ph1">`Remove`</ph> method to remove objects from a <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> object in the variable <ph id="ph3">`birthdays`</ph>.</source>
          <target state="translated">Cet exemple illustre l’utilisation de la <ph id="ph1">`Remove`</ph> méthode pour supprimer des objets d’un <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> objet dans la variable <ph id="ph3">`birthdays`</ph>.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Remove(System.Int32)">
          <source>Following the four calls to the <ph id="ph1">`Add`</ph> method, the <ph id="ph2">`Count`</ph> property contains 4, element <ph id="ph3">`"Bill"`</ph> has index value 1, and element <ph id="ph4">`"Pete"`</ph> has index value 4.</source>
          <target state="translated">La suite des quatre appels à la <ph id="ph1">`Add`</ph> (méthode), la <ph id="ph2">`Count`</ph> propriété contient 4, élément <ph id="ph3">`"Bill"`</ph> a la valeur d’index 1 et élément <ph id="ph4">`"Pete"`</ph> a la valeur d’index 4.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Remove(System.Int32)">
          <source>Following the first call to <ph id="ph1">`Remove`</ph>, <ph id="ph2">`Count`</ph> is 3, element <ph id="ph3">`"Bill"`</ph> is deleted, and element <ph id="ph4">`"Pete"`</ph> has index value 3.</source>
          <target state="translated">Après le premier appel à <ph id="ph1">`Remove`</ph>, <ph id="ph2">`Count`</ph> est 3, élément <ph id="ph3">`"Bill"`</ph> est supprimé et l’élément <ph id="ph4">`"Pete"`</ph> a la valeur d’index 3.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Remove(System.Int32)">
          <source>Following the second call to <ph id="ph1">`Remove`</ph>, <ph id="ph2">`Count`</ph> is 2, element <ph id="ph3">`"Mike"`</ph> is deleted, and element <ph id="ph4">`"Pete"`</ph> has index value 2.</source>
          <target state="translated">Suivant le deuxième appel à <ph id="ph1">`Remove`</ph>, <ph id="ph2">`Count`</ph> est 2, élément <ph id="ph3">`"Mike"`</ph> est supprimé et l’élément <ph id="ph4">`"Pete"`</ph> a la valeur d’index 2.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Remove(System.String)">
          <source>A unique <ph id="ph1">&lt;see langword="String" /&gt;</ph> expression that specifies a key string that can be used, instead of a positional index, to access an element of the collection.</source>
          <target state="translated">Expression <ph id="ph1">&lt;see langword="String" /&gt;</ph> unique qui spécifie une chaîne clé qui peut être utilisée au lieu d'un index de position pour accéder à un élément de la collection.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Remove(System.String)">
          <source><bpt id="p1">&lt;c&gt;</bpt>Key<ept id="p1">&lt;/c&gt;</ept> must correspond to the <bpt id="p2">&lt;c&gt;</bpt>Key<ept id="p2">&lt;/c&gt;</ept> argument specified when the element was added to the collection.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>Key<ept id="p1">&lt;/c&gt;</ept> doit correspondre à l’argument <bpt id="p2">&lt;c&gt;</bpt>Key<ept id="p2">&lt;/c&gt;</ept> spécifié lorsque l’élément a été ajouté à la collection.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.Remove(System.String)">
          <source>Removes an element from a <ph id="ph1">&lt;see langword="Collection" /&gt;</ph> object.</source>
          <target state="translated">Supprime un élément d'un objet <ph id="ph1">&lt;see langword="Collection" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Remove(System.String)">
          <source>When <ph id="ph1">`Remove`</ph> deletes an element from a collection, it decrements the collection's <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection.Count%2A&gt;</ph> property by one.</source>
          <target state="translated">Lorsque <ph id="ph1">`Remove`</ph> supprime un élément d’une collection, il décrémente la collection <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection.Count%2A&gt;</ph> propriété d’une unité.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Remove(System.String)">
          <source>It also decrements the <ph id="ph1">`Index`</ph> value of every element that formerly followed the deleted element in the collection.</source>
          <target state="translated">Il décrémente également la <ph id="ph1">`Index`</ph> la valeur de chaque élément qui suivait l’élément supprimé de la collection.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Remove(System.String)">
          <source>If an element was added to the collection without a <ph id="ph1">`Key`</ph>, you must use its <ph id="ph2">`Index`</ph> to remove it.</source>
          <target state="translated">Si un élément a été ajouté à la collection sans un <ph id="ph1">`Key`</ph>, vous devez utiliser son <ph id="ph2">`Index`</ph> à supprimer.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Remove(System.String)">
          <source>This example illustrates the use of the <ph id="ph1">`Remove`</ph> method to remove objects from a <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> object in the variable <ph id="ph3">`birthdays`</ph>.</source>
          <target state="translated">Cet exemple illustre l’utilisation de la <ph id="ph1">`Remove`</ph> méthode pour supprimer des objets d’un <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> objet dans la variable <ph id="ph3">`birthdays`</ph>.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Remove(System.String)">
          <source>Following the four calls to the <ph id="ph1">`Add`</ph> method, the <ph id="ph2">`Count`</ph> property contains 4, element <ph id="ph3">`"Bill"`</ph> has index value 1, and element <ph id="ph4">`"Pete"`</ph> has index value 4.</source>
          <target state="translated">La suite des quatre appels à la <ph id="ph1">`Add`</ph> (méthode), la <ph id="ph2">`Count`</ph> propriété contient 4, élément <ph id="ph3">`"Bill"`</ph> a la valeur d’index 1 et élément <ph id="ph4">`"Pete"`</ph> a la valeur d’index 4.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Remove(System.String)">
          <source>Following the first call to <ph id="ph1">`Remove`</ph>, <ph id="ph2">`Count`</ph> is 3, element <ph id="ph3">`"Bill"`</ph> is deleted, and element <ph id="ph4">`"Pete"`</ph> has index value 3.</source>
          <target state="translated">Après le premier appel à <ph id="ph1">`Remove`</ph>, <ph id="ph2">`Count`</ph> est 3, élément <ph id="ph3">`"Bill"`</ph> est supprimé et l’élément <ph id="ph4">`"Pete"`</ph> a la valeur d’index 3.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.Remove(System.String)">
          <source>Following the second call to <ph id="ph1">`Remove`</ph>, <ph id="ph2">`Count`</ph> is 2, element <ph id="ph3">`"Mike"`</ph> is deleted, and element <ph id="ph4">`"Pete"`</ph> has index value 2.</source>
          <target state="translated">Suivant le deuxième appel à <ph id="ph1">`Remove`</ph>, <ph id="ph2">`Count`</ph> est 2, élément <ph id="ph3">`"Mike"`</ph> est supprimé et l’élément <ph id="ph4">`"Pete"`</ph> a la valeur d’index 2.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.ICollectionCopyTo(System.Array,System.Int32)">
          <source>The one-dimensional <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> that is the destination of the elements copied from <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> unidimensionnel correspondant à la destination des éléments copiés à partir de l'objet <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.ICollectionCopyTo(System.Array,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> must have zero-based indexing.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> doit avoir une indexation de base zéro.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.ICollectionCopyTo(System.Array,System.Int32)">
          <source>The zero-based index in <bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> at which copying begins.</source>
          <target state="translated">Index de base zéro dans un <bpt id="p1">&lt;c&gt;</bpt>tableau<ept id="p1">&lt;/c&gt;</ept> auquel commencer la copie.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.ICollectionCopyTo(System.Array,System.Int32)">
          <source>Copies the elements of the <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> to an <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph>, starting at a particular <ph id="ph3">&lt;see cref="T:System.Array" /&gt;</ph> index.</source>
          <target state="translated">Copie les éléments de <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> dans <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph>, à partir d'un index particulier de <ph id="ph3">&lt;see cref="T:System.Array" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.ICollectionCopyTo(System.Array,System.Int32)">
          <source>Implements the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> interface.</source>
          <target state="translated">Implémente l'interface <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionCopyTo(System.Array,System.Int32)">
          <source>The elements are copied to the <ph id="ph1">&lt;xref:System.Array&gt;</ph> in the same order in which the enumerator iterates through the <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> object.</source>
          <target state="translated">Les éléments sont copiés dans le <ph id="ph1">&lt;xref:System.Array&gt;</ph> dans le même ordre que celui dans lequel l’énumérateur itère au sein du <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> objet.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionCopyTo(System.Array,System.Int32)">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is obtained from the <ph id="ph3">&lt;xref:Microsoft.VisualBasic.Collection.System%23Collections%23ICollection%23Count&gt;</ph>.</source>
          <target state="translated">Cette méthode est un O (<ph id="ph1">`n`</ph>) opération, où <ph id="ph2">`n`</ph> est obtenu à partir de la <ph id="ph3">&lt;xref:Microsoft.VisualBasic.Collection.System%23Collections%23ICollection%23Count&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.ICollectionCopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.ICollectionCopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> est inférieur à zéro.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.ICollectionCopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is multidimensional.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> est multidimensionnel.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.ICollectionCopyTo(System.Array,System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.ICollectionCopyTo(System.Array,System.Int32)">
          <source>The number of elements in the source <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object is greater than the available space from <ph id="ph2">&lt;paramref name="index" /&gt;</ph> to the end of the destination <ph id="ph3">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated">Le nombre d'éléments de l'objet <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> source est supérieur à la quantité d'espace disponible entre <ph id="ph2">&lt;paramref name="index" /&gt;</ph> et la fin du <ph id="ph3">&lt;paramref name="array" /&gt;</ph> de destination.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.ICollectionCopyTo(System.Array,System.Int32)">
          <source>The type of the source <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object cannot be cast automatically to the type of the destination <ph id="ph2">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated">Le type de l'objet <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> source ne peut pas être casté automatiquement en type de <ph id="ph2">&lt;paramref name="array" /&gt;</ph> de destination.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source>Returns an enumerator that iterates through the collection.</source>
          <target state="translated">Retourne un énumérateur qui itère au sein de la collection.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source>Implements the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> interface.</source>
          <target state="translated">Implémente l'interface <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> object that can be used to iterate through the collection.</source>
          <target state="translated">Objet <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> pouvant être utilisé pour itérer au sein de la collection.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source>[Visual Basic, C#]</source>
          <target state="translated">(Visual Basic, c#)</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source>The <ph id="ph1">`foreach`</ph> statement of the C# language (<ph id="ph2">`for each`</ph> in Visual Basic) hides the complexity of the enumerators.</source>
          <target state="translated">L'instruction <ph id="ph1">`foreach`</ph> du langage C# (<ph id="ph2">`for each`</ph> en Visual Basic) se charge de la complexité des énumérateurs.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source>Therefore, using <ph id="ph1">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.</source>
          <target state="translated">Il est donc recommandé d'utiliser <ph id="ph1">`foreach`</ph> plutôt que de manipuler l'énumérateur directement.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</source>
          <target state="translated">Les énumérateurs peuvent être utilisés pour lire les données de la collection, mais ils ne permettent pas de modifier la collection sous-jacente.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source>Initially, the enumerator is positioned before the first element in the collection.</source>
          <target state="translated">Au départ, l’énumérateur est positionné avant le premier élément de la collection.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source>The <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> method also brings the enumerator back to this position.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> méthode Replace également l’énumérateur à cette position.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source>At this position, the <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> property is undefined.</source>
          <target state="translated">À cette position, la <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> propriété n’est pas définie.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source>Therefore, you must call the <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> method to advance the enumerator to the first element of the collection before reading the value of <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>.</source>
          <target state="translated">Par conséquent, vous devez appeler la <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> méthode pour avancer l’énumérateur jusqu’au premier élément de la collection avant de lire la valeur de <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> returns the same object until either <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> is called.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> retourne le même objet tant que <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> ou <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> n'est pas appelé.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> sets <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the next element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> affecte l'élément suivant à <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source>If <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> passes the end of the collection, the enumerator is positioned after the last element in the collection and <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returns <ph id="ph3">`false`</ph>.</source>
          <target state="translated">Si <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> dépasse la fin de la collection, l’énumérateur est placée après le dernier élément dans la collection et <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> retourne <ph id="ph3">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source>When the enumerator is at this position, subsequent calls to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> also return <ph id="ph2">`false`</ph>.</source>
          <target state="translated">Lorsque l’énumérateur est à cette position, les appels suivants à <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> également retourner <ph id="ph2">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source>If the last call to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returns <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">Si le dernier appel à <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> retourne <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> n’est pas défini.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source>To set <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the first element of the collection again, you can call <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> followed by <ph id="ph3">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>.</source>
          <target state="translated">Pour attribuer une nouvelle fois <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> au premier élément de la collection, vous pouvez appeler <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> suivi de <ph id="ph3">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">Un énumérateur est valide tant que la collection demeure inchangée.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source>If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</source>
          <target state="translated">Si des modifications sont apportées à la collection, telles que l'ajout, la modification ou la suppression d'éléments, l'énumérateur est définitivement invalidé et son comportement n'est pas défini.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">Comme l’énumérateur ne dispose pas d’un accès exclusif à la collection, l’énumération d’une collection n’est pas intrinsèquement une procédure thread-safe.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">Pour garantir la sécurité des threads pendant l’énumération, vous pouvez verrouiller la collection tout au long de cette opération.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">Pour permettre à plusieurs threads d’accéder en lecture et en écriture à la collection, vous devez implémenter votre propre synchronisation.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListAdd(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to add to the <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> à ajouter à l'objet <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListAdd(System.Object)">
          <source>Adds an item to the <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object.</source>
          <target state="translated">Ajoute un élément à l'objet <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListAdd(System.Object)">
          <source>Implements the <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> interface.</source>
          <target state="translated">Implémente l'interface <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListAdd(System.Object)">
          <source>The position into which the new element was inserted.</source>
          <target state="translated">Position à laquelle le nouvel élément est inséré.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.IListAdd(System.Object)">
          <source>You can also use the <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection.Item%2A&gt;</ph> property to add new elements by setting the value of a key that does not exist in the <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> object.</source>
          <target state="translated">Vous pouvez également utiliser le <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection.Item%2A&gt;</ph> propriété à ajouter de nouveaux éléments en définissant la valeur d’une clé qui n’existe pas dans le <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> objet.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListAdd(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object is read-only.</source>
          <target state="translated">L'objet <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> est en lecture seule.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListAdd(System.Object)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListAdd(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object has a fixed size.</source>
          <target state="translated">L'objet <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> est de taille fixe.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListClear">
          <source>Removes all items from the <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object.</source>
          <target state="translated">Supprime tous les éléments de l'objet <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListClear">
          <source>Implements the <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> interface.</source>
          <target state="translated">Implémente l'interface <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.IListClear">
          <source>This method removes all items from the <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> object.</source>
          <target state="translated">Cette méthode supprime tous les éléments de la <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> objet.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListClear">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> is read-only.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> est en lecture seule.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListContains(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to locate in the <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> à trouver dans l'objet <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListContains(System.Object)">
          <source>Determines whether the <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object contains a specific value.</source>
          <target state="translated">Détermine si l'objet <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> contient une valeur spécifique.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListContains(System.Object)">
          <source>Implements the <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> interface.</source>
          <target state="translated">Implémente l'interface <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListContains(System.Object)">
          <source>Returns <ph id="ph1">&lt;see langword="True" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Object" /&gt;</ph> is found in the <ph id="ph3">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object; otherwise, <ph id="ph4">&lt;see langword="False" /&gt;</ph>.</source>
          <target state="translated">Retourne <ph id="ph1">&lt;see langword="True" /&gt;</ph> si le <ph id="ph2">&lt;see cref="T:System.Object" /&gt;</ph> est trouvé dans l'objet <ph id="ph3">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph>, sinon <ph id="ph4">&lt;see langword="False" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.IListContains(System.Object)">
          <source>This method determines whether the <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> object contains a specific value.</source>
          <target state="translated">Cette méthode détermine si le <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> objet contient une valeur spécifique.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListIndexOf(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to locate in the <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> à trouver dans l'objet <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListIndexOf(System.Object)">
          <source>Determines the index of a specific item in the <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object.</source>
          <target state="translated">Détermine l'index d'un élément spécifique dans l'objet <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListIndexOf(System.Object)">
          <source>Implements the <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> interface.</source>
          <target state="translated">Implémente l'interface <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListIndexOf(System.Object)">
          <source>The index of <ph id="ph1">&lt;paramref name="value" /&gt;</ph> if found in the collection; otherwise, -1.</source>
          <target state="translated">Index de <ph id="ph1">&lt;paramref name="value" /&gt;</ph> si celui-ci figure dans la collection, sinon -1.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.IListIndexOf(System.Object)">
          <source>This method determines the index of a specific item in the <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> object.</source>
          <target state="translated">Cette méthode détermine l’index d’un élément spécifique dans le <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> objet.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListInsert(System.Int32,System.Object)">
          <source>The zero-based index at which <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept> should be inserted.</source>
          <target state="translated">Index de base zéro auquel la <bpt id="p1">&lt;c&gt;</bpt>valeur<ept id="p1">&lt;/c&gt;</ept> doit être insérée.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListInsert(System.Int32,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to insert into the <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> à insérer dans l'objet <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListInsert(System.Int32,System.Object)">
          <source>Inserts an item to the <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object at the specified index.</source>
          <target state="translated">Insère un élément dans l'objet <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> au niveau de l'index spécifié.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListInsert(System.Int32,System.Object)">
          <source>Implements the <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> interface.</source>
          <target state="translated">Implémente l'interface <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.IListInsert(System.Int32,System.Object)">
          <source>If <ph id="ph1">`index`</ph> equals the number of items in the <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> object, then <ph id="ph3">`value`</ph> is appended to the end.</source>
          <target state="translated">Si <ph id="ph1">`index`</ph> est égal au nombre d’éléments dans le <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> de l’objet, puis <ph id="ph3">`value`</ph> est ajouté à la fin.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.IListInsert(System.Int32,System.Object)">
          <source>In collections of contiguous elements, such as lists, the elements that follow the insertion point move down to accommodate the new element.</source>
          <target state="translated">Dans des collections d’éléments contigus, telles que les listes, les éléments situés après le point d’insertion descendent afin de prendre en compte le nouvel élément.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.IListInsert(System.Int32,System.Object)">
          <source>If the collection is indexed, the indexes of the elements that are moved are also updated.</source>
          <target state="translated">Si la collection est indexée, les index des éléments déplacés sont également mis à jour.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.IListInsert(System.Int32,System.Object)">
          <source>This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</source>
          <target state="translated">Ce comportement ne s’applique pas aux collections dont les éléments sont regroupés de manière conceptuelle en compartiments, comme par exemple les tables de hachage.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListInsert(System.Int32,System.Object)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is not a valid index in the <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> n'est pas un index valide dans l'objet <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListInsert(System.Int32,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object is read-only.</source>
          <target state="translated">L'objet <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> est en lecture seule.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListInsert(System.Int32,System.Object)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListInsert(System.Int32,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object has a fixed size.</source>
          <target state="translated">L'objet <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> est de taille fixe.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListInsert(System.Int32,System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is null reference in the <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> est une référence null dans l'objet <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListRemove(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to remove from the <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object.</source>
          <target state="translated">Objet <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> à supprimer de l'objet <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListRemove(System.Object)">
          <source>Removes the first occurrence of a specific object from the <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object.</source>
          <target state="translated">Supprime la première occurrence d'un objet spécifique de l'objet <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListRemove(System.Object)">
          <source>Implements the <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> interface.</source>
          <target state="translated">Implémente l'interface <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.IListRemove(System.Object)">
          <source>In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.</source>
          <target state="translated">Dans des collections d’éléments contigus, telles que les listes, les éléments qui suivent l’élément supprimé remontent pour occuper l’espace libéré.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.IListRemove(System.Object)">
          <source>If the collection is indexed, the indexes of the elements that are moved are also updated.</source>
          <target state="translated">Si la collection est indexée, les index des éléments déplacés sont également mis à jour.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.IListRemove(System.Object)">
          <source>This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</source>
          <target state="translated">Ce comportement ne s’applique pas aux collections dont les éléments sont regroupés de manière conceptuelle en compartiments, comme par exemple les tables de hachage.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.IListRemove(System.Object)">
          <source>If <ph id="ph1">`value`</ph> is not found in the <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> object, the <ph id="ph3">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> object remains unchanged and no exception is thrown.</source>
          <target state="translated">Si <ph id="ph1">`value`</ph> est introuvable dans le <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> objet, le <ph id="ph3">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> reste inchangé et aucune exception n’est levée.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListRemove(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object is read-only.</source>
          <target state="translated">L'objet <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> est en lecture seule.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListRemove(System.Object)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListRemove(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object has a fixed size.</source>
          <target state="translated">L'objet <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> est de taille fixe.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListRemoveAt(System.Int32)">
          <source>The zero-based index of the item to remove.</source>
          <target state="translated">Index de base zéro de l'élément à supprimer.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListRemoveAt(System.Int32)">
          <source>Removes the <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object item at the specified index.</source>
          <target state="translated">Supprime l'élément d'objet <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> au niveau de l'index spécifié.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListRemoveAt(System.Int32)">
          <source>Implements the <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> interface.</source>
          <target state="translated">Implémente l'interface <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.IListRemoveAt(System.Int32)">
          <source>In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.</source>
          <target state="translated">Dans des collections d’éléments contigus, telles que les listes, les éléments qui suivent l’élément supprimé remontent pour occuper l’espace libéré.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.IListRemoveAt(System.Int32)">
          <source>If the collection is indexed, the indexes of the elements that are moved are also updated.</source>
          <target state="translated">Si la collection est indexée, les index des éléments déplacés sont également mis à jour.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.IListRemoveAt(System.Int32)">
          <source>This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</source>
          <target state="translated">Ce comportement ne s’applique pas aux collections dont les éléments sont regroupés de manière conceptuelle en compartiments, comme par exemple les tables de hachage.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListRemoveAt(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is not a valid index in the <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> n'est pas un index valide dans l'objet <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListRemoveAt(System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object is read-only.</source>
          <target state="translated">L'objet <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> est en lecture seule.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListRemoveAt(System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.IListRemoveAt(System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object has a fixed size.</source>
          <target state="translated">L'objet <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> est de taille fixe.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.OnDeserialization(System.Object)">
          <source>The object that initiated the callback.</source>
          <target state="translated">Objet qui a initié le rappel.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.OnDeserialization(System.Object)">
          <source>Runs after the entire <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object graph has been deserialized.</source>
          <target state="translated">S'exécute une fois la totalité du graphique d'objets <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> désérialisée.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.OnDeserialization(System.Object)">
          <source>Implements the <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.IDeserializationCallback" /&gt;</ph> interface.</source>
          <target state="translated">Implémente l'interface <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.IDeserializationCallback" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.OnDeserialization(System.Object)">
          <source>This method is called after the entire <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> object graph has been deserialized.</source>
          <target state="translated">Cette méthode est appelée une fois la totalité <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> graphique d’objet a été désérialisé.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> object containing the information required to serialize the <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object.</source>
          <target state="translated">Objet <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> contenant les informations nécessaires pour sérialiser <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.StreamingContext" /&gt;</ph> object containing the source and destination of the serialized stream associated with the <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object.</source>
          <target state="translated">Un objet <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.StreamingContext" /&gt;</ph> contenant la source et la destination du flux sérialisé associé à l'objet <ph id="ph2">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Returns the data needed to serialize the <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph> object.</source>
          <target state="translated">Retourne les données nécessaires à la sérialisation de l'objet <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.Collection" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.Collection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Implements the <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.ISerializable" /&gt;</ph> interface.</source>
          <target state="translated">Implémente l'interface <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.ISerializable" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.Collection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>This method returns the data needed to serialize the <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> object.</source>
          <target state="translated">Cette méthode retourne les données nécessaires pour sérialiser le <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection&gt;</ph> objet.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>