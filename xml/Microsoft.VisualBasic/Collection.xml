<Type Name="Collection" FullName="Microsoft.VisualBasic.Collection">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d61baf321e8319662e9f74cd4985bdfbcf7d3e0f" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36727321" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Collection : System.Collections.IList, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed Collection extends System.Object implements class System.Collections.ICollection, class System.Collections.IList, class System.Runtime.Serialization.IDeserializationCallback, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Collection" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Collection&#xA;Implements IDeserializationCallback, IList, ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Collection sealed : System::Collections::IList, System::Runtime::Serialization::IDeserializationCallback, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type Collection = class&#xA;    interface ICollection&#xA;    interface IList&#xA;    interface ISerializable&#xA;    interface IDeserializationCallback" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IList</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.IDeserializationCallback</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("Count = {Count}")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(Microsoft.VisualBasic.Collection/CollectionDebugView))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="da5ed-101">Une <see langword="Collection" /> Visual Basic est un jeu ordonné d’éléments qui peut être considéré collectivement comme une unité.</span>
      <span class="sxs-lookup">
        <span data-stu-id="da5ed-101">A Visual Basic <see langword="Collection" /> is an ordered set of items that can be referred to as a unit.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="da5ed-102">Si possible, vous devez utiliser les collections génériques dans le <xref:System.Collections.Generic?displayProperty=nameWithType> espace de noms ou le <xref:System.Collections.Concurrent> à la place un Visual Basic `Collection`.</span><span class="sxs-lookup"><span data-stu-id="da5ed-102">Whenever possible, you should use the generic collections in the <xref:System.Collections.Generic?displayProperty=nameWithType> namespace or the <xref:System.Collections.Concurrent> namespace instead of a Visual Basic `Collection`.</span></span> <span data-ttu-id="da5ed-103">Pour plus d’informations, consultez [Collections](http://msdn.microsoft.com/library/e76533a9-5033-4a0b-b003-9c2be60d185b).</span><span class="sxs-lookup"><span data-stu-id="da5ed-103">For more information, see [Collections](http://msdn.microsoft.com/library/e76533a9-5033-4a0b-b003-9c2be60d185b).</span></span>  
  
 <span data-ttu-id="da5ed-104">Visual Basic `Collection` objet offre un moyen pratique pour faire référence à un groupe connexe d’éléments en tant qu’objet unique.</span><span class="sxs-lookup"><span data-stu-id="da5ed-104">The Visual Basic `Collection` object provides a convenient way to refer to a related group of items as a single object.</span></span> <span data-ttu-id="da5ed-105">Les éléments, ou *éléments*, dans une collection doivent seulement être associée par le fait qu’ils existent dans la collection.</span><span class="sxs-lookup"><span data-stu-id="da5ed-105">The items, or *elements*, in a collection need only be related by the fact that they exist in the collection.</span></span> <span data-ttu-id="da5ed-106">Éléments d’une collection n’est pas ont de partagent le même type de données.</span><span class="sxs-lookup"><span data-stu-id="da5ed-106">Elements of a collection do not have to share the same data type.</span></span>  
  
 <span data-ttu-id="da5ed-107">Vous pouvez créer une collection de la même façon que vous créez d’autres objets, comme l’illustre l’exemple suivant.</span><span class="sxs-lookup"><span data-stu-id="da5ed-107">You can create a collection the same way you create other objects, as the following example illustrates.</span></span>  
  
```vb  
Dim coll As New Microsoft.VisualBasic.Collection()  
```  
  
 <span data-ttu-id="da5ed-108">Une fois que vous avez créé une collection, vous pouvez effectuer les opérations suivantes :</span><span class="sxs-lookup"><span data-stu-id="da5ed-108">Once you have created a collection, you can do any of the following:</span></span>  
  
-   <span data-ttu-id="da5ed-109">Ajoutez un élément avec la <xref:Microsoft.VisualBasic.Collection.Add%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="da5ed-109">Add an element with the <xref:Microsoft.VisualBasic.Collection.Add%2A> method.</span></span>  
  
-   <span data-ttu-id="da5ed-110">Supprimer un élément avec la <xref:Microsoft.VisualBasic.Collection.Remove%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="da5ed-110">Remove an element with the <xref:Microsoft.VisualBasic.Collection.Remove%2A> method.</span></span>  
  
-   <span data-ttu-id="da5ed-111">Supprimer tous les éléments dont le <xref:Microsoft.VisualBasic.Collection.Clear%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="da5ed-111">Remove all elements with the <xref:Microsoft.VisualBasic.Collection.Clear%2A> method.</span></span>  
  
-   <span data-ttu-id="da5ed-112">Rechercher le nombre d’éléments contenus dans la collection avec le <xref:Microsoft.VisualBasic.Collection.Count%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="da5ed-112">Find out how many elements the collection contains with the <xref:Microsoft.VisualBasic.Collection.Count%2A> property.</span></span>  
  
-   <span data-ttu-id="da5ed-113">Vérifiez si un élément spécifique est présent avec la <xref:Microsoft.VisualBasic.Collection.Contains%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="da5ed-113">Check whether a specific element is present with the <xref:Microsoft.VisualBasic.Collection.Contains%2A> method.</span></span>  
  
-   <span data-ttu-id="da5ed-114">Retourner un élément spécifique de la collection avec le <xref:Microsoft.VisualBasic.Collection.Item%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="da5ed-114">Return a specific element from the collection with the <xref:Microsoft.VisualBasic.Collection.Item%2A> property.</span></span>  
  
-   <span data-ttu-id="da5ed-115">Une itération au sein de la collection entière avec le [For Each... L’instruction suivante](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md).</span><span class="sxs-lookup"><span data-stu-id="da5ed-115">Iterate through the entire collection with the [For Each...Next Statement](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md).</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="da5ed-116">Bien que Visual Basic `Collection` objet possède des fonctionnalités identiques pour le `Collection` de l’objet dans Visual Basic 6.0, les deux ne peuvent pas interagir dans un environnement COM.</span><span class="sxs-lookup"><span data-stu-id="da5ed-116">Although the Visual Basic `Collection` object has functionality identical to the `Collection` object in Visual Basic 6.0, the two cannot interoperate in a COM environment.</span></span>  
  
    > [!CAUTION]
    >  <span data-ttu-id="da5ed-117">Itération au sein d’un Visual Basic `Collection` n’est pas une procédure thread-safe.</span><span class="sxs-lookup"><span data-stu-id="da5ed-117">Iterating through a Visual Basic `Collection` is not a thread-safe procedure.</span></span> <span data-ttu-id="da5ed-118">Même si la collection est synchronisée, d’autres threads peuvent toujours la modifier, à l’origine de l’énumérateur à lever une exception.</span><span class="sxs-lookup"><span data-stu-id="da5ed-118">Even if the collection is synchronized, other threads can still modify the collection, causing the enumerator to throw an exception.</span></span> <span data-ttu-id="da5ed-119">Pour garantir la sécurité des threads pendant l’énumération, verrouiller la collection, ou bien intercepter les exceptions résultant des modifications apportées par les autres threads.</span><span class="sxs-lookup"><span data-stu-id="da5ed-119">To guarantee thread safety during enumeration, either lock the collection or catch the exceptions resulting from changes made by other threads.</span></span> <span data-ttu-id="da5ed-120">Pour plus d’informations sur le verrouillage d’un élément de programmation, consultez [SyncLock, instruction](~/docs/visual-basic/language-reference/statements/synclock-statement.md).</span><span class="sxs-lookup"><span data-stu-id="da5ed-120">For more information on locking a programming element, see [SyncLock Statement](~/docs/visual-basic/language-reference/statements/synclock-statement.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da5ed-121">L’exemple suivant crée la `Collection` objet `names` et une boîte de dialogue avec laquelle un utilisateur peut ajouter des objets (noms) à la collection.</span><span class="sxs-lookup"><span data-stu-id="da5ed-121">The following example creates the `Collection` object `names` and a dialog box with which a user can add objects (names) to the collection.</span></span> <span data-ttu-id="da5ed-122">Il affiche ensuite les noms dans la collection et enfin vide la collection sans effacer la `Collection` objet lui-même.</span><span class="sxs-lookup"><span data-stu-id="da5ed-122">It then displays the names in the collection, and finally empties the collection without disposing of the `Collection` object itself.</span></span>  
  
 <span data-ttu-id="da5ed-123">Pour voir comment cela fonctionne, choisissez la **ajouter une classe** commande à partir de la **projet** menu et déclarez une variable publique appelée `instanceName` au niveau du module de `nameClass` (type `Public instanceName`) pour contenir les noms de chaque instance.</span><span class="sxs-lookup"><span data-stu-id="da5ed-123">To see how this works, choose the **Add Class** command from the **Project** menu and declare a public variable called `instanceName` at the module level of `nameClass` (type `Public instanceName`) to hold the names of each instance.</span></span> <span data-ttu-id="da5ed-124">Conservez le nom par défaut `nameClass`.</span><span class="sxs-lookup"><span data-stu-id="da5ed-124">Leave the default name as `nameClass`.</span></span> <span data-ttu-id="da5ed-125">Copiez et collez le code suivant dans le **général** section d’un autre module, puis démarrez-le avec l’instruction `classNamer` dans une autre procédure.</span><span class="sxs-lookup"><span data-stu-id="da5ed-125">Copy and paste the following code into the **General** section of another module, and then start it with the statement `classNamer` in another procedure.</span></span> <span data-ttu-id="da5ed-126">(Cet exemple fonctionne uniquement avec les applications hôtes qui prennent en charge des classes.)</span><span class="sxs-lookup"><span data-stu-id="da5ed-126">(This example works only with host applications that support classes.)</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Collection ();" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Collection();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="da5ed-127">Crée et retourne un objet <see cref="T:Microsoft.VisualBasic.Collection" /> Visual Basic.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-127">Creates and returns a new Visual Basic <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da5ed-128">La collection Visual Basic retournée par ce constructeur est vide et n’a pas aucune capacité initiale allouée.</span><span class="sxs-lookup"><span data-stu-id="da5ed-128">The Visual Basic collection returned by this constructor is empty and does not have any initial capacity allocated.</span></span>  
  
 <span data-ttu-id="da5ed-129">Collections de Visual Basic ne sont pas compatibles avec la [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] collections disponibles dans le <xref:System.Collections?displayProperty=nameWithType>, <xref:System.Collections.Generic?displayProperty=nameWithType>, et <xref:System.Collections.Specialized?displayProperty=nameWithType> espaces de noms.</span><span class="sxs-lookup"><span data-stu-id="da5ed-129">Visual Basic collections are not compatible with the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] collections available in the <xref:System.Collections?displayProperty=nameWithType>, <xref:System.Collections.Generic?displayProperty=nameWithType>, and <xref:System.Collections.Specialized?displayProperty=nameWithType> namespaces.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da5ed-130">L’exemple suivant crée une nouvelle collection de Visual Basic et l’affecte à la variable `coll`:</span><span class="sxs-lookup"><span data-stu-id="da5ed-130">The following example creates a new Visual Basic collection and assigns it to the variable `coll`:</span></span>  
  
```vb  
Dim coll As New Microsoft.VisualBasic.Collection()  
```  
  
 <span data-ttu-id="da5ed-131">Cela `Collection` objet est basé sur un, ce qui signifie que les valeurs d’index de la plage d’éléments compris entre 1 et la valeur de la `Count` propriété.</span><span class="sxs-lookup"><span data-stu-id="da5ed-131">This `Collection` object is one-based, which means that the index values of the elements range from 1 through the value of the `Count` property.</span></span> <span data-ttu-id="da5ed-132">Collections de Visual Basic contiennent des éléments de type <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="da5ed-132">Visual Basic collections hold elements of type <xref:System.Object>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (object Item, string Key = null, object Before = null, object After = null);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void Add(object Item, string Key, object Before, object After) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (Item As Object, Optional Key As String = null, Optional Before As Object = null, Optional After As Object = null)" />
      <MemberSignature Language="F#" Value="member this.Add : obj * string * obj * obj -&gt; unit" Usage="collection.Add (Item, Key, Before, After)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Item" Type="System.Object" />
        <Parameter Name="Key" Type="System.String" />
        <Parameter Name="Before" Type="System.Object" />
        <Parameter Name="After" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Item">
          <span data-ttu-id="da5ed-133">Obligatoire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-133">Required.</span>
          </span>
          <span data-ttu-id="da5ed-134">Objet de tout type qui spécifie les erreurs à ajouter à la collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-134">An object of any type that specifies the element to add to the collection.</span>
          </span>
        </param>
        <param name="Key">
          <span data-ttu-id="da5ed-135">Optionnel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-135">Optional.</span>
          </span>
          <span data-ttu-id="da5ed-136">Expression <see langword="String" /> unique qui spécifie une chaîne clé qui peut être utilisée au lieu d'un index de position pour accéder à ce nouvel élément dans la collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-136">A unique <see langword="String" /> expression that specifies a key string that can be used instead of a positional index to access this new element in the collection.</span>
          </span>
        </param>
        <param name="Before">
          <span data-ttu-id="da5ed-137">Optionnel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-137">Optional.</span>
          </span>
          <span data-ttu-id="da5ed-138">Expression qui spécifie une position relative dans la collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-138">An expression that specifies a relative position in the collection.</span>
          </span>
          <span data-ttu-id="da5ed-139">L’élément à ajouter est placé dans la collection avant l’élément identifié par l’argument <c>Before</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-139">The element to be added is placed in the collection before the element identified by the <c>Before</c> argument.</span>
          </span>
          <span data-ttu-id="da5ed-140">Si <c>Before</c> est une expression numérique, ce doit être un nombre entre 1 et la valeur de la propriété <see cref="P:Microsoft.VisualBasic.Collection.Count" /> de la collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-140">If <c>Before</c> is a numeric expression, it must be a number from 1 through the value of the collection's <see cref="P:Microsoft.VisualBasic.Collection.Count" /> property.</span>
          </span>
          <span data-ttu-id="da5ed-141">Si <c>Before</c> est une expression <see langword="String" />, il doit correspondre à la chaîne clé spécifiée au moment où l’élément auquel il est fait référence a été ajouté à la collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-141">If <c>Before</c> is a <see langword="String" /> expression, it must correspond to the key string specified when the element being referred to was added to the collection.</span>
          </span>
          <span data-ttu-id="da5ed-142">Vous ne pouvez pas spécifier à la fois les arguments <c>Before</c> et <c>After</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-142">You cannot specify both <c>Before</c> and <c>After</c>.</span>
          </span>
        </param>
        <param name="After">
          <span data-ttu-id="da5ed-143">Optionnel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-143">Optional.</span>
          </span>
          <span data-ttu-id="da5ed-144">Expression qui spécifie une position relative dans la collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-144">An expression that specifies a relative position in the collection.</span>
          </span>
          <span data-ttu-id="da5ed-145">L’élément à ajouter est placé dans la collection après l’élément identifié par l’argument <c>After</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-145">The element to be added is placed in the collection after the element identified by the <c>After</c> argument.</span>
          </span>
          <span data-ttu-id="da5ed-146">Si <c>After</c> est une expression numérique, ce doit être un nombre entre 1 et la valeur de la propriété <see langword="Count" /> de la collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-146">If <c>After</c> is a numeric expression, it must be a number from 1 through the value of the collection's <see langword="Count" /> property.</span>
          </span>
          <span data-ttu-id="da5ed-147">Si <c>After</c> est une expression <see langword="String" />, il doit correspondre à la chaîne clé spécifiée au moment où l’élément auquel il est fait référence a été ajouté à la collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-147">If <c>After</c> is a <see langword="String" /> expression, it must correspond to the key string specified when the element referred to was added to the collection.</span>
          </span>
          <span data-ttu-id="da5ed-148">Vous ne pouvez pas spécifier à la fois les arguments <c>Before</c> et <c>After</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-148">You cannot specify both <c>Before</c> and <c>After</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da5ed-149">Ajoute un élément à un objet <see langword="Collection" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-149">Adds an element to a <see langword="Collection" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da5ed-150">Le `Before` ou `After` argument doit faire référence à un élément existant de la collection ; sinon, une erreur se produit.</span><span class="sxs-lookup"><span data-stu-id="da5ed-150">The `Before` or `After` argument must refer to an existing element of the collection; otherwise, an error occurs.</span></span>  
  
 <span data-ttu-id="da5ed-151">Si les deux le `Before` et `After` arguments sont omis, le nouvel objet est ajouté à la fin de la collection.</span><span class="sxs-lookup"><span data-stu-id="da5ed-151">If both the `Before` and `After` arguments are omitted, the new object is added to the end of the collection.</span></span>  
  
 <span data-ttu-id="da5ed-152">Une erreur se produit également si un `Key` valeur correspond à la clé pour un élément existant de la collection.</span><span class="sxs-lookup"><span data-stu-id="da5ed-152">An error also occurs if a specified `Key` value matches the key for an existing element of the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da5ed-153">L’exemple suivant utilise le `Add` méthode pour ajouter `child` objets : instances d’une classe appelée `child` contenant un `Public` propriété `name` — à une collection appelée `family`.</span><span class="sxs-lookup"><span data-stu-id="da5ed-153">The following example uses the `Add` method to add `child` objects — instances of a class called `child` containing a `Public` property `name` — to a collection called `family`.</span></span> <span data-ttu-id="da5ed-154">Pour voir comment cela fonctionne, créez un <xref:System.Windows.Forms.Form> avec deux <xref:System.Windows.Forms.Button> contrôles et définir leurs <xref:System.Windows.Forms.Control.Text%2A> propriétés `Add` et `List`.</span><span class="sxs-lookup"><span data-stu-id="da5ed-154">To see how this works, create a <xref:System.Windows.Forms.Form> with two <xref:System.Windows.Forms.Button> controls and set their <xref:System.Windows.Forms.Control.Text%2A> properties to `Add` and `List`.</span></span> <span data-ttu-id="da5ed-155">Ajouter le `child` définition de classe et le `family` déclaration au code du formulaire.</span><span class="sxs-lookup"><span data-stu-id="da5ed-155">Add the `child` class definition and the `family` declaration to the form code.</span></span> <span data-ttu-id="da5ed-156">Modifier la `_Click` gestionnaires d’événements pour le **ajouter** et **liste** boutons comme indiqué.</span><span class="sxs-lookup"><span data-stu-id="da5ed-156">Modify the `_Click` event handlers for the **Add** and **List** buttons as shown.</span></span> <span data-ttu-id="da5ed-157">Le **ajouter** bouton vous permet d’ajouter des enfants.</span><span class="sxs-lookup"><span data-stu-id="da5ed-157">The **Add** button allows you to add children.</span></span> <span data-ttu-id="da5ed-158">Le **liste** bouton affiche les noms de tous les enfants.</span><span class="sxs-lookup"><span data-stu-id="da5ed-158">The **List** button displays the names of all the children.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="collection.Clear " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="da5ed-159">Supprime tous les éléments d'un objet Visual Basic <see langword="Collection" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-159">Deletes all elements of a Visual Basic <see langword="Collection" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da5ed-160">Le `Clear` méthode vide la collection et réinitialise sa <xref:Microsoft.VisualBasic.Collection.Count%2A> 0 à la propriété.</span><span class="sxs-lookup"><span data-stu-id="da5ed-160">The `Clear` method empties the collection and resets its <xref:Microsoft.VisualBasic.Collection.Count%2A> property to 0.</span></span>  
  
   
  
## Examples  
 [!code-vb[VbVbalrCollectionObject#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (string Key);" />
      <MemberSignature Language="ILAsm" Value=".method public instance bool Contains(string Key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.Contains(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (Key As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::String ^ Key);" />
      <MemberSignature Language="F#" Value="member this.Contains : string -&gt; bool" Usage="collection.Contains Key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Key">
          <span data-ttu-id="da5ed-161">Obligatoire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-161">Required.</span>
          </span>
          <span data-ttu-id="da5ed-162">Une expression <see langword="String" /> qui spécifie la clé à rechercher dans les éléments de la collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-162">A <see langword="String" /> expression that specifies the key for which to search the elements of the collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da5ed-163">Retourne une valeur <see langword="Boolean" /> indiquant si un objet Visual Basic <see langword="Collection" /> contient un élément avec une clé spécifique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-163">Returns a <see langword="Boolean" /> value indicating whether a Visual Basic <see langword="Collection" /> object contains an element with a specific key.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da5ed-164">Retourne une valeur <see langword="Boolean" /> indiquant si un objet Visual Basic <see langword="Collection" /> contient un élément avec une clé spécifique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-164">Returns a <see langword="Boolean" /> value indicating whether a Visual Basic <see langword="Collection" /> object contains an element with a specific key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da5ed-165">`Contains` Retourne `True` si la collection contient un élément avec une clé correspondant exactement `Key`.</span><span class="sxs-lookup"><span data-stu-id="da5ed-165">`Contains` returns `True` if the collection contains an element with a key exactly matching `Key`.</span></span> <span data-ttu-id="da5ed-166">Dans le cas contraire, `Contains` retourne `False`.</span><span class="sxs-lookup"><span data-stu-id="da5ed-166">Otherwise, `Contains` returns `False`.</span></span> <span data-ttu-id="da5ed-167">La casse est ignorée lors de la correspondance des valeurs de clé.</span><span class="sxs-lookup"><span data-stu-id="da5ed-167">Case is ignored when matching key values.</span></span>  
  
 <span data-ttu-id="da5ed-168">Un Visual Basic `Collection` peut contenir des éléments qui ont des clés et autres éléments sans clés.</span><span class="sxs-lookup"><span data-stu-id="da5ed-168">A Visual Basic `Collection` can hold some elements that have keys and other elements without keys.</span></span> <span data-ttu-id="da5ed-169">Cela dépend de si l’appel à la <xref:Microsoft.VisualBasic.Collection.Add%2A> méthode fournit un argument pour le paramètre facultatif `Key` paramètre.</span><span class="sxs-lookup"><span data-stu-id="da5ed-169">This depends on whether the call to the <xref:Microsoft.VisualBasic.Collection.Add%2A> method supplies an argument to the optional `Key` parameter.</span></span>  
  
   
  
## Examples  
 [!code-vb[VbVbalrCollectionObject#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#4)]  
  
 <span data-ttu-id="da5ed-170">Si vous souhaitez rechercher dans la collection d’éléments à l’aide de leurs clés, pensez à fournir le `Key` argument chaque fois que vous appelez le `Add` (méthode).</span><span class="sxs-lookup"><span data-stu-id="da5ed-170">If you intend to search the collection for elements using their keys, remember to supply the `Key` argument every time you call the `Add` method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="Microsoft.VisualBasic.Collection.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="da5ed-171">Retourne un <see langword="Integer" /> contenant le nombre d'éléments dans une collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-171">Returns an <see langword="Integer" /> containing the number of elements in a collection.</span>
          </span>
          <span data-ttu-id="da5ed-172">Lecture seule.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-172">Read-only.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="da5ed-173">Retourne un <see langword="Integer" /> contenant le nombre d'éléments dans une collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-173">Returns an <see langword="Integer" /> containing the number of elements in a collection.</span>
          </span>
          <span data-ttu-id="da5ed-174">Lecture seule.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-174">Read-only.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da5ed-175">Utilisez le `Count` propriété pour déterminer le nombre d’éléments dans un `Collection` objet.</span><span class="sxs-lookup"><span data-stu-id="da5ed-175">Use the `Count` property to determine the number of elements in a `Collection` object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da5ed-176">Cet exemple illustre l’utilisation de la `Count` propriété pour afficher le nombre d’éléments dans un <xref:Microsoft.VisualBasic.Collection> objet dans la variable `birthdays`.</span><span class="sxs-lookup"><span data-stu-id="da5ed-176">This example illustrates the use of the `Count` property to display the number of elements in a <xref:Microsoft.VisualBasic.Collection> object in the variable `birthdays`.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#5)]  
[!code-vb[VbVbalrCollectionObject#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#6)]  
  
 <span data-ttu-id="da5ed-177">Le `Collection` objet est basé sur un, ce qui signifie que les valeurs d’index de la plage d’éléments compris entre 1 et la valeur de la `Count` propriété.</span><span class="sxs-lookup"><span data-stu-id="da5ed-177">The `Collection` object is one-based, which means that the index values of the elements range from 1 through the value of the `Count` property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="member this.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="collection.GetEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="da5ed-178">Récupère une référence à un objet d'énumérateur, qui est utilisée pour itérer au sein d'un objet <see cref="T:Microsoft.VisualBasic.Collection" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-178">Returns a reference to an enumerator object, which is used to iterate over a <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da5ed-179">Récupère une référence à un objet d'énumérateur, qui est utilisée pour itérer au sein d'un objet <see cref="T:Microsoft.VisualBasic.Collection" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-179">Returns a reference to an enumerator object, which is used to iterate over a <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da5ed-180">Le [pour chaque... L’instruction suivante](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md) appelle `GetEnumerator` pour obtenir un objet énumérateur pour prendre en charge d’itération sur les éléments d’une collection.</span><span class="sxs-lookup"><span data-stu-id="da5ed-180">The [For Each...Next Statement](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md) calls `GetEnumerator` to obtain an enumerator object to support iteration over a collection's elements.</span></span> <span data-ttu-id="da5ed-181">Normalement, vous utilisez un `For Each`... `Next` pour parcourir une collection ou un tableau, et vous n’avez pas besoin d’appeler `GetEnumerator` explicitement.</span><span class="sxs-lookup"><span data-stu-id="da5ed-181">Normally, you use a `For Each`...`Next` loop to traverse a collection or array, and you do not need to call `GetEnumerator` explicitly.</span></span>  
  
 <span data-ttu-id="da5ed-182">Si vous avez besoin de contrôle plus précis sur l’itération à la `For Each`... `Next` fournissent des instructions, vous pouvez utiliser la `GetEnumerator` méthode pour effectuer un parcours personnalisé.</span><span class="sxs-lookup"><span data-stu-id="da5ed-182">If you need closer control over the iteration than the `For Each`...`Next` statements provide, you can use the `GetEnumerator` method to perform a customized traversal.</span></span> <span data-ttu-id="da5ed-183">Voici certains cas dans lesquels vous devrez peut-être pour ce faire.</span><span class="sxs-lookup"><span data-stu-id="da5ed-183">The following are some cases in which you might need to do this.</span></span>  
  
-   <span data-ttu-id="da5ed-184">Vous pouvez souhaiter retourner au début de la collection et redémarrer l’itération avant qu’elle est terminée.</span><span class="sxs-lookup"><span data-stu-id="da5ed-184">You might want to return to the beginning of the collection and start the iteration again before it is finished.</span></span>  
  
-   <span data-ttu-id="da5ed-185">Vous pouvez souhaiter ignorer un ou plusieurs éléments pour diverses raisons.</span><span class="sxs-lookup"><span data-stu-id="da5ed-185">You might want to skip over one or more elements for a variety of reasons.</span></span>  
  
-   <span data-ttu-id="da5ed-186">Vous devrez peut-être modifier les éléments de la collection au milieu d’un parcours.</span><span class="sxs-lookup"><span data-stu-id="da5ed-186">You might need to change the elements of the collection in the middle of a traversal.</span></span> <span data-ttu-id="da5ed-187">Dans ce cas, vous devez obtenir un nouvel objet énumérateur, car le précédent est invalidé.</span><span class="sxs-lookup"><span data-stu-id="da5ed-187">In this case you must obtain a new enumerator object because the previous one is invalidated.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da5ed-188">L’exemple suivant montre comment utiliser `GetEnumerator` pour récupérer tous les éléments d’un `Collection` objet.</span><span class="sxs-lookup"><span data-stu-id="da5ed-188">The following example shows how to use `GetEnumerator` to retrieve all the elements of a `Collection` object.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#7)]  
  
 <span data-ttu-id="da5ed-189">`GetEnumerator` construit et retourne un objet énumérateur, qui implémente le <xref:System.Collections.IEnumerator> interface de le <xref:System.Collections> espace de noms.</span><span class="sxs-lookup"><span data-stu-id="da5ed-189">`GetEnumerator` constructs and returns an enumerator object, which implements the <xref:System.Collections.IEnumerator> interface of the <xref:System.Collections> namespace.</span></span> <span data-ttu-id="da5ed-190">L’objet énumérateur expose la <xref:System.Collections.IEnumerator.Current%2A> propriété et la <xref:System.Collections.IEnumerator.MoveNext%2A> et <xref:System.Collections.IEnumerator.Reset%2A> méthodes.</span><span class="sxs-lookup"><span data-stu-id="da5ed-190">The enumerator object exposes the <xref:System.Collections.IEnumerator.Current%2A> property and the <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Reset%2A> methods.</span></span> <span data-ttu-id="da5ed-191">Pour plus d’informations, consultez [For Each... L’instruction suivante](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md).</span><span class="sxs-lookup"><span data-stu-id="da5ed-191">For more information, see [For Each...Next Statement](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Item">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="da5ed-192">Retourne un élément spécifique d'un objet <see langword="Collection" /> en fonction de sa position ou de sa clé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-192">Returns a specific element of a <see langword="Collection" /> object either by position or by key.</span>
          </span>
          <span data-ttu-id="da5ed-193">Lecture seule.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-193">Read-only.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object this[int Index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(int32)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(Index As Integer) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ default[int] { System::Object ^ get(int Index); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : obj" Usage="Microsoft.VisualBasic.Collection.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Index">
          <span data-ttu-id="da5ed-194">(A) Expression numérique qui spécifie la position d'un élément de la collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-194">(A) A numeric expression that specifies the position of an element of the collection.</span>
          </span>
          <span data-ttu-id="da5ed-195">
            <c>Index</c> doit être un nombre compris entre 1 et la valeur de la propriété <see cref="P:Microsoft.VisualBasic.Collection.Count" /> de la collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-195">
              <c>Index</c> must be a number from 1 through the value of the collection's <see cref="P:Microsoft.VisualBasic.Collection.Count" /> property.</span>
          </span>
          <span data-ttu-id="da5ed-196">Ou (B) Une expression <see langword="Object" /> qui spécifie la position ou la chaîne clé d'un élément de la collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-196">Or (B) An <see langword="Object" /> expression that specifies the position or key string of an element of the collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da5ed-197">Retourne un élément spécifique d'un objet <see langword="Collection" /> en fonction de sa position ou de sa clé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-197">Returns a specific element of a <see langword="Collection" /> object either by position or by key.</span>
          </span>
          <span data-ttu-id="da5ed-198">Lecture seule.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-198">Read-only.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="da5ed-199">Retourne un élément spécifique d'un objet <see langword="Collection" /> en fonction de sa position ou de sa clé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-199">Returns a specific element of a <see langword="Collection" /> object either by position or by key.</span>
          </span>
          <span data-ttu-id="da5ed-200">Lecture seule.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-200">Read-only.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da5ed-201">Si `Index` est de type `Object`, le `Item` propriété tente de le traiter comme un `String`, `Char`, `Char` tableau ou la valeur entière.</span><span class="sxs-lookup"><span data-stu-id="da5ed-201">If `Index` is of type `Object`, the `Item` property attempts to treat it as a `String`, `Char`, `Char` array, or integer value.</span></span> <span data-ttu-id="da5ed-202">Si `Item` Impossible de convertir `Index` à `String` ou `Integer`, elle lève une <xref:System.ArgumentException> exception.</span><span class="sxs-lookup"><span data-stu-id="da5ed-202">If `Item` cannot convert `Index` to `String` or `Integer`, it throws an <xref:System.ArgumentException> exception.</span></span>  
  
 <span data-ttu-id="da5ed-203">Le `Item` propriété est la propriété par défaut pour une collection.</span><span class="sxs-lookup"><span data-stu-id="da5ed-203">The `Item` property is the default property for a collection.</span></span> <span data-ttu-id="da5ed-204">Par conséquent, les lignes de code suivantes sont équivalentes.</span><span class="sxs-lookup"><span data-stu-id="da5ed-204">Therefore, the following lines of code are equivalent.</span></span>  
  
```  
MsgBox(CStr(customers.Item(1)))  
MsgBox(CStr(customers(1)))  
```  
  
   
  
## Examples  
 <span data-ttu-id="da5ed-205">L’exemple suivant utilise le `Item` propriété à récupérer une référence à un objet dans une collection.</span><span class="sxs-lookup"><span data-stu-id="da5ed-205">The following example uses the `Item` property to retrieve a reference to an object in a collection.</span></span> <span data-ttu-id="da5ed-206">Il crée `birthdays` comme un `Collection` de l’objet, puis récupère l’objet représentant l’anniversaire de Bill, à l’aide de la clé `"Bill"` comme le `Index` argument.</span><span class="sxs-lookup"><span data-stu-id="da5ed-206">It creates `birthdays` as a `Collection` object and then retrieves the object representing Bill's birthday, using the key `"Bill"` as the `Index` argument.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#5)]  
[!code-vb[VbVbalrCollectionObject#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#8)]  
  
 <span data-ttu-id="da5ed-207">Notez que le premier appel spécifie explicitement le `Item` propriété, mais la seconde n’est pas.</span><span class="sxs-lookup"><span data-stu-id="da5ed-207">Note that the first call explicitly specifies the `Item` property, but the second does not.</span></span> <span data-ttu-id="da5ed-208">Les deux appels fonctionnent, car le `Item` propriété est la propriété par défaut pour un `Collection` objet.</span><span class="sxs-lookup"><span data-stu-id="da5ed-208">Both calls work because the `Item` property is the default property for a `Collection` object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object this[object Index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(object)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.Item(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(Index As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ default[System::Object ^] { System::Object ^ get(System::Object ^ Index); };" />
      <MemberSignature Language="F#" Value="member this.Item(obj) : obj" Usage="Microsoft.VisualBasic.Collection.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Index" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Index">
          <span data-ttu-id="da5ed-209">(A) Expression numérique qui spécifie la position d'un élément de la collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-209">(A) A numeric expression that specifies the position of an element of the collection.</span>
          </span>
          <span data-ttu-id="da5ed-210">
            <c>Index</c> doit être un nombre compris entre 1 et la valeur de la propriété <see cref="P:Microsoft.VisualBasic.Collection.Count" /> de la collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-210">
              <c>Index</c> must be a number from 1 through the value of the collection's <see cref="P:Microsoft.VisualBasic.Collection.Count" /> property.</span>
          </span>
          <span data-ttu-id="da5ed-211">Ou (B) Une expression <see langword="Object" /> qui spécifie la position ou la chaîne clé d'un élément de la collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-211">Or (B) An <see langword="Object" /> expression that specifies the position or key string of an element of the collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da5ed-212">Retourne un élément spécifique d'un objet <see langword="Collection" /> en fonction de sa position ou de sa clé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-212">Returns a specific element of a <see langword="Collection" /> object either by position or by key.</span>
          </span>
          <span data-ttu-id="da5ed-213">Lecture seule.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-213">Read-only.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="da5ed-214">Retourne un élément spécifique d'un objet <see langword="Collection" /> en fonction de sa position ou de sa clé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-214">Returns a specific element of a <see langword="Collection" /> object either by position or by key.</span>
          </span>
          <span data-ttu-id="da5ed-215">Lecture seule.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-215">Read-only.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da5ed-216">Si `Index` est de type `Object`, le `Item` propriété tente de le traiter comme un `String`, `Char`, `Char` tableau ou la valeur entière.</span><span class="sxs-lookup"><span data-stu-id="da5ed-216">If `Index` is of type `Object`, the `Item` property attempts to treat it as a `String`, `Char`, `Char` array, or integer value.</span></span> <span data-ttu-id="da5ed-217">Si `Item` Impossible de convertir `Index` à `String` ou `Integer`, elle lève une <xref:System.ArgumentException> exception.</span><span class="sxs-lookup"><span data-stu-id="da5ed-217">If `Item` cannot convert `Index` to `String` or `Integer`, it throws an <xref:System.ArgumentException> exception.</span></span>  
  
 <span data-ttu-id="da5ed-218">Le `Item` propriété est la propriété par défaut pour une collection.</span><span class="sxs-lookup"><span data-stu-id="da5ed-218">The `Item` property is the default property for a collection.</span></span> <span data-ttu-id="da5ed-219">Par conséquent, les lignes de code suivantes sont équivalentes.</span><span class="sxs-lookup"><span data-stu-id="da5ed-219">Therefore, the following lines of code are equivalent.</span></span>  
  
```  
MsgBox(CStr(customers.Item(1)))  
MsgBox(CStr(customers(1)))  
```  
  
   
  
## Examples  
 <span data-ttu-id="da5ed-220">L’exemple suivant utilise le `Item` propriété à récupérer une référence à un objet dans une collection.</span><span class="sxs-lookup"><span data-stu-id="da5ed-220">The following example uses the `Item` property to retrieve a reference to an object in a collection.</span></span> <span data-ttu-id="da5ed-221">Il crée `birthdays` comme un `Collection` de l’objet, puis récupère l’objet représentant l’anniversaire de Bill, à l’aide de la clé `"Bill"` comme le `Index` argument.</span><span class="sxs-lookup"><span data-stu-id="da5ed-221">It creates `birthdays` as a `Collection` object and then retrieves the object representing Bill's birthday, using the key `"Bill"` as the `Index` argument.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#5)]  
[!code-vb[VbVbalrCollectionObject#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#8)]  
  
 <span data-ttu-id="da5ed-222">Notez que le premier appel spécifie explicitement le `Item` propriété, mais la seconde n’est pas.</span><span class="sxs-lookup"><span data-stu-id="da5ed-222">Note that the first call explicitly specifies the `Item` property, but the second does not.</span></span> <span data-ttu-id="da5ed-223">Les deux appels fonctionnent, car le `Item` propriété est la propriété par défaut pour un `Collection` objet.</span><span class="sxs-lookup"><span data-stu-id="da5ed-223">Both calls work because the `Item` property is the default property for a `Collection` object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object this[string Key] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(string)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.Item(System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(Key As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ default[System::String ^] { System::Object ^ get(System::String ^ Key); };" />
      <MemberSignature Language="F#" Value="member this.Item(string) : obj" Usage="Microsoft.VisualBasic.Collection.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Key">
          <span data-ttu-id="da5ed-224">Expression <see langword="String" /> unique qui spécifie une chaîne clé qui peut être utilisée au lieu d'un index de position pour accéder à un élément de la collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-224">A unique <see langword="String" /> expression that specifies a key string that can be used, instead of a positional index, to access an element of the collection.</span>
          </span>
          <span data-ttu-id="da5ed-225">
            <c>Key</c> doit correspondre à l’argument <c>Key</c> spécifié lorsque l’élément a été ajouté à la collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-225">
              <c>Key</c> must correspond to the <c>Key</c> argument specified when the element was added to the collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da5ed-226">Retourne un élément spécifique d'un objet <see langword="Collection" /> en fonction de sa position ou de sa clé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-226">Returns a specific element of a <see langword="Collection" /> object either by position or by key.</span>
          </span>
          <span data-ttu-id="da5ed-227">Lecture seule.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-227">Read-only.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="da5ed-228">Retourne un élément spécifique d'un objet <see langword="Collection" /> en fonction de sa position ou de sa clé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-228">Returns a specific element of a <see langword="Collection" /> object either by position or by key.</span>
          </span>
          <span data-ttu-id="da5ed-229">Lecture seule.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-229">Read-only.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da5ed-230">Si `Index` est de type `Object`, le `Item` propriété tente de le traiter comme un `String`, `Char`, `Char` tableau ou la valeur entière.</span><span class="sxs-lookup"><span data-stu-id="da5ed-230">If `Index` is of type `Object`, the `Item` property attempts to treat it as a `String`, `Char`, `Char` array, or integer value.</span></span> <span data-ttu-id="da5ed-231">Si `Item` Impossible de convertir `Index` à `String` ou `Integer`, elle lève une <xref:System.ArgumentException> exception.</span><span class="sxs-lookup"><span data-stu-id="da5ed-231">If `Item` cannot convert `Index` to `String` or `Integer`, it throws an <xref:System.ArgumentException> exception.</span></span>  
  
 <span data-ttu-id="da5ed-232">Le `Item` propriété est la propriété par défaut pour une collection.</span><span class="sxs-lookup"><span data-stu-id="da5ed-232">The `Item` property is the default property for a collection.</span></span> <span data-ttu-id="da5ed-233">Par conséquent, les lignes de code suivantes sont équivalentes.</span><span class="sxs-lookup"><span data-stu-id="da5ed-233">Therefore, the following lines of code are equivalent.</span></span>  
  
```  
MsgBox(CStr(customers.Item(1)))  
MsgBox(CStr(customers(1)))  
```  
  
   
  
## Examples  
 <span data-ttu-id="da5ed-234">L’exemple suivant utilise le `Item` propriété à récupérer une référence à un objet dans une collection.</span><span class="sxs-lookup"><span data-stu-id="da5ed-234">The following example uses the `Item` property to retrieve a reference to an object in a collection.</span></span> <span data-ttu-id="da5ed-235">Il crée `birthdays` comme un `Collection` de l’objet, puis récupère l’objet représentant l’anniversaire de Bill, à l’aide de la clé `"Bill"` comme le `Index` argument.</span><span class="sxs-lookup"><span data-stu-id="da5ed-235">It creates `birthdays` as a `Collection` object and then retrieves the object representing Bill's birthday, using the key `"Bill"` as the `Index` argument.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#5)]  
[!code-vb[VbVbalrCollectionObject#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#8)]  
  
 <span data-ttu-id="da5ed-236">Notez que le premier appel spécifie explicitement le `Item` propriété, mais la seconde n’est pas.</span><span class="sxs-lookup"><span data-stu-id="da5ed-236">Note that the first call explicitly specifies the `Item` property, but the second does not.</span></span> <span data-ttu-id="da5ed-237">Les deux appels fonctionnent, car le `Item` propriété est la propriété par défaut pour un `Collection` objet.</span><span class="sxs-lookup"><span data-stu-id="da5ed-237">Both calls work because the `Item` property is the default property for a `Collection` object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Remove">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="da5ed-238">Supprime un élément d'un objet <see langword="Collection" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-238">Removes an element from a <see langword="Collection" /> object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (int Index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(int32 Index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.Remove(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (Index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(int Index);" />
      <MemberSignature Language="F#" Value="member this.Remove : int -&gt; unit" Usage="collection.Remove Index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Index">
          <span data-ttu-id="da5ed-239">Expression numérique qui spécifie la position d'un élément de la collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-239">A numeric expression that specifies the position of an element of the collection.</span>
          </span>
          <span data-ttu-id="da5ed-240">
            <c>Index</c> doit être un nombre compris entre 1 et la valeur de la propriété <see cref="P:Microsoft.VisualBasic.Collection.Count" /> de la collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-240">
              <c>Index</c> must be a number from 1 through the value of the collection's <see cref="P:Microsoft.VisualBasic.Collection.Count" /> property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da5ed-241">Supprime un élément d'un objet <see langword="Collection" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-241">Removes an element from a <see langword="Collection" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da5ed-242">Lorsque `Remove` supprime un élément d’une collection, il décrémente la collection <xref:Microsoft.VisualBasic.Collection.Count%2A> propriété d’une unité.</span><span class="sxs-lookup"><span data-stu-id="da5ed-242">When `Remove` deletes an element from a collection, it decrements the collection's <xref:Microsoft.VisualBasic.Collection.Count%2A> property by one.</span></span> <span data-ttu-id="da5ed-243">Il décrémente également la `Index` la valeur de chaque élément qui suivait l’élément supprimé de la collection.</span><span class="sxs-lookup"><span data-stu-id="da5ed-243">It also decrements the `Index` value of every element that formerly followed the deleted element in the collection.</span></span>  
  
 <span data-ttu-id="da5ed-244">Si un élément a été ajouté à la collection sans un `Key`, vous devez utiliser son `Index` à supprimer.</span><span class="sxs-lookup"><span data-stu-id="da5ed-244">If an element was added to the collection without a `Key`, you must use its `Index` to remove it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da5ed-245">Cet exemple illustre l’utilisation de la `Remove` méthode pour supprimer des objets d’un <xref:Microsoft.VisualBasic.Collection> objet dans la variable `birthdays`.</span><span class="sxs-lookup"><span data-stu-id="da5ed-245">This example illustrates the use of the `Remove` method to remove objects from a <xref:Microsoft.VisualBasic.Collection> object in the variable `birthdays`.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#5)]  
[!code-vb[VbVbalrCollectionObject#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#9)]  
  
 <span data-ttu-id="da5ed-246">La suite des quatre appels à la `Add` (méthode), la `Count` propriété contient 4, élément `"Bill"` a la valeur d’index 1 et élément `"Pete"` a la valeur d’index 4.</span><span class="sxs-lookup"><span data-stu-id="da5ed-246">Following the four calls to the `Add` method, the `Count` property contains 4, element `"Bill"` has index value 1, and element `"Pete"` has index value 4.</span></span>  
  
 <span data-ttu-id="da5ed-247">Après le premier appel à `Remove`, `Count` est 3, élément `"Bill"` est supprimé et l’élément `"Pete"` a la valeur d’index 3.</span><span class="sxs-lookup"><span data-stu-id="da5ed-247">Following the first call to `Remove`, `Count` is 3, element `"Bill"` is deleted, and element `"Pete"` has index value 3.</span></span>  
  
 <span data-ttu-id="da5ed-248">Suivant le deuxième appel à `Remove`, `Count` est 2, élément `"Mike"` est supprimé et l’élément `"Pete"` a la valeur d’index 2.</span><span class="sxs-lookup"><span data-stu-id="da5ed-248">Following the second call to `Remove`, `Count` is 2, element `"Mike"` is deleted, and element `"Pete"` has index value 2.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (string Key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(string Key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.Remove(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (Key As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::String ^ Key);" />
      <MemberSignature Language="F#" Value="member this.Remove : string -&gt; unit" Usage="collection.Remove Key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Key">
          <span data-ttu-id="da5ed-249">Expression <see langword="String" /> unique qui spécifie une chaîne clé qui peut être utilisée au lieu d'un index de position pour accéder à un élément de la collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-249">A unique <see langword="String" /> expression that specifies a key string that can be used, instead of a positional index, to access an element of the collection.</span>
          </span>
          <span data-ttu-id="da5ed-250">
            <c>Key</c> doit correspondre à l’argument <c>Key</c> spécifié lorsque l’élément a été ajouté à la collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-250">
              <c>Key</c> must correspond to the <c>Key</c> argument specified when the element was added to the collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da5ed-251">Supprime un élément d'un objet <see langword="Collection" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-251">Removes an element from a <see langword="Collection" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da5ed-252">Lorsque `Remove` supprime un élément d’une collection, il décrémente la collection <xref:Microsoft.VisualBasic.Collection.Count%2A> propriété d’une unité.</span><span class="sxs-lookup"><span data-stu-id="da5ed-252">When `Remove` deletes an element from a collection, it decrements the collection's <xref:Microsoft.VisualBasic.Collection.Count%2A> property by one.</span></span> <span data-ttu-id="da5ed-253">Il décrémente également la `Index` la valeur de chaque élément qui suivait l’élément supprimé de la collection.</span><span class="sxs-lookup"><span data-stu-id="da5ed-253">It also decrements the `Index` value of every element that formerly followed the deleted element in the collection.</span></span>  
  
 <span data-ttu-id="da5ed-254">Si un élément a été ajouté à la collection sans un `Key`, vous devez utiliser son `Index` à supprimer.</span><span class="sxs-lookup"><span data-stu-id="da5ed-254">If an element was added to the collection without a `Key`, you must use its `Index` to remove it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da5ed-255">Cet exemple illustre l’utilisation de la `Remove` méthode pour supprimer des objets d’un <xref:Microsoft.VisualBasic.Collection> objet dans la variable `birthdays`.</span><span class="sxs-lookup"><span data-stu-id="da5ed-255">This example illustrates the use of the `Remove` method to remove objects from a <xref:Microsoft.VisualBasic.Collection> object in the variable `birthdays`.</span></span>  
  
 [!code-vb[VbVbalrCollectionObject#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#5)]  
[!code-vb[VbVbalrCollectionObject#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#9)]  
  
 <span data-ttu-id="da5ed-256">La suite des quatre appels à la `Add` (méthode), la `Count` propriété contient 4, élément `"Bill"` a la valeur d’index 1 et élément `"Pete"` a la valeur d’index 4.</span><span class="sxs-lookup"><span data-stu-id="da5ed-256">Following the four calls to the `Add` method, the `Count` property contains 4, element `"Bill"` has index value 1, and element `"Pete"` has index value 4.</span></span>  
  
 <span data-ttu-id="da5ed-257">Après le premier appel à `Remove`, `Count` est 3, élément `"Bill"` est supprimé et l’élément `"Pete"` a la valeur d’index 3.</span><span class="sxs-lookup"><span data-stu-id="da5ed-257">Following the first call to `Remove`, `Count` is 3, element `"Bill"` is deleted, and element `"Pete"` has index value 3.</span></span>  
  
 <span data-ttu-id="da5ed-258">Suivant le deuxième appel à `Remove`, `Count` est 2, élément `"Mike"` est supprimé et l’élément `"Pete"` a la valeur d’index 2.</span><span class="sxs-lookup"><span data-stu-id="da5ed-258">Following the second call to `Remove`, `Count` is 2, element `"Mike"` is deleted, and element `"Pete"` has index value 2.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void ICollectionCopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.ICollectionCopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void ICollectionCopyTo(Array ^ array, int index) = System::Collections::ICollection::CopyTo;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="da5ed-259">
            <see cref="T:System.Array" /> unidimensionnel correspondant à la destination des éléments copiés à partir de l'objet <see cref="T:Microsoft.VisualBasic.Collection" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-259">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span>
          </span>
          <span data-ttu-id="da5ed-260">
            <see cref="T:System.Array" /> doit avoir une indexation de base zéro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-260">The <see cref="T:System.Array" /> must have zero-based indexing.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="da5ed-261">Index de base zéro dans un <c>tableau</c> auquel commencer la copie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-261">The zero-based index in <c>array</c> at which copying begins.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da5ed-262">Copie les éléments de <see cref="T:Microsoft.VisualBasic.Collection" /> dans <see cref="T:System.Array" />, à partir d'un index particulier de <see cref="T:System.Array" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-262">Copies the elements of the <see cref="T:Microsoft.VisualBasic.Collection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</span>
          </span>
          <span data-ttu-id="da5ed-263">Implémente l'interface <see cref="T:System.Collections.ICollection" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-263">Implements the <see cref="T:System.Collections.ICollection" /> interface.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da5ed-264">Les éléments sont copiés dans le <xref:System.Array> dans le même ordre que celui dans lequel l’énumérateur itère au sein du <xref:Microsoft.VisualBasic.Collection> objet.</span><span class="sxs-lookup"><span data-stu-id="da5ed-264">The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:Microsoft.VisualBasic.Collection> object.</span></span>  
  
 <span data-ttu-id="da5ed-265">Cette méthode est un O (`n`) opération, où `n` est obtenu à partir de la <xref:Microsoft.VisualBasic.Collection.System%23Collections%23ICollection%23Count>.</span><span class="sxs-lookup"><span data-stu-id="da5ed-265">This method is an O(`n`) operation, where `n` is obtained from the <xref:Microsoft.VisualBasic.Collection.System%23Collections%23ICollection%23Count>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="da5ed-266">
            <paramref name="array" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-266">
              <paramref name="array" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="da5ed-267">
            <paramref name="index" /> est inférieur à zéro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-267">
              <paramref name="index" /> is less than zero.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="da5ed-268">
            <paramref name="array" /> est multidimensionnel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-268">
              <paramref name="array" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="da5ed-269">-ou- Le nombre d’éléments de l’objet <see cref="T:Microsoft.VisualBasic.Collection" /> source est supérieur à la quantité d’espace disponible entre <paramref name="index" /> et la fin du <paramref name="array" /> de destination.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-269">-or-  The number of elements in the source <see cref="T:Microsoft.VisualBasic.Collection" /> object is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="da5ed-270">Le type de l'objet <see cref="T:Microsoft.VisualBasic.Collection" /> source ne peut pas être casté automatiquement en type de <paramref name="array" /> de destination.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-270">The type of the source <see cref="T:Microsoft.VisualBasic.Collection" /> object cannot be cast automatically to the type of the destination <paramref name="array" />.</span>
          </span>
        </exception>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.ICollection" />
        <altmember cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />
        <altmember cref="T:System.Array" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.ICollectionCount">
      <MemberSignature Language="C#" Value="int System.Collections.ICollection.ICollectionCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ICollectionCount" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.ICollectionCount" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ICollectionCount As Integer Implements ICollection.ICollectionCount" />
      <MemberSignature Language="C++ CLI" Value="property int System.Collections.ICollection.ICollectionCount { int get(); };" />
      <MemberSignature Language="F#" Usage="Microsoft.VisualBasic.Collection.ICollectionCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.ICollectionIsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.ICollectionIsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ICollectionIsSynchronized" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.ICollectionIsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ICollectionIsSynchronized As Boolean Implements ICollection.ICollectionIsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.ICollection.ICollectionIsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Usage="Microsoft.VisualBasic.Collection.ICollectionIsSynchronized" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.ICollectionSyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.ICollectionSyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ICollectionSyncRoot" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.ICollectionSyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ICollectionSyncRoot As Object Implements ICollection.ICollectionSyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.ICollection.ICollectionSyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="Microsoft.VisualBasic.Collection.ICollectionSyncRoot" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance class System.Collections.IEnumerator ICollectionGetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function ICollectionGetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ ICollectionGetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="da5ed-271">Retourne un énumérateur qui itère au sein de la collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-271">Returns an enumerator that iterates through the collection.</span>
          </span>
          <span data-ttu-id="da5ed-272">Implémente l'interface <see cref="T:System.Collections.ICollection" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-272">Implements the <see cref="T:System.Collections.ICollection" /> interface.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da5ed-273">Objet <see cref="T:System.Collections.IEnumerator" /> pouvant être utilisé pour itérer au sein de la collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-273">An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da5ed-274">(Visual Basic, c#)</span><span class="sxs-lookup"><span data-stu-id="da5ed-274">[Visual Basic, C#]</span></span>  
  
 <span data-ttu-id="da5ed-275">L'instruction `foreach` du langage C# (`for each` en Visual Basic) se charge de la complexité des énumérateurs.</span><span class="sxs-lookup"><span data-stu-id="da5ed-275">The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.</span></span> <span data-ttu-id="da5ed-276">Il est donc recommandé d'utiliser `foreach` plutôt que de manipuler l'énumérateur directement.</span><span class="sxs-lookup"><span data-stu-id="da5ed-276">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="da5ed-277">Les énumérateurs peuvent être utilisés pour lire les données de la collection, mais ils ne permettent pas de modifier la collection sous-jacente.</span><span class="sxs-lookup"><span data-stu-id="da5ed-277">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="da5ed-278">Au départ, l’énumérateur est positionné avant le premier élément de la collection.</span><span class="sxs-lookup"><span data-stu-id="da5ed-278">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="da5ed-279">Le <xref:System.Collections.IEnumerator.Reset%2A> méthode Replace également l’énumérateur à cette position.</span><span class="sxs-lookup"><span data-stu-id="da5ed-279">The <xref:System.Collections.IEnumerator.Reset%2A> method also brings the enumerator back to this position.</span></span> <span data-ttu-id="da5ed-280">À cette position, la <xref:System.Collections.IEnumerator.Current%2A> propriété n’est pas définie.</span><span class="sxs-lookup"><span data-stu-id="da5ed-280">At this position, the <xref:System.Collections.IEnumerator.Current%2A> property is undefined.</span></span> <span data-ttu-id="da5ed-281">Par conséquent, vous devez appeler la <xref:System.Collections.IEnumerator.MoveNext%2A> méthode pour avancer l’énumérateur jusqu’au premier élément de la collection avant de lire la valeur de <xref:System.Collections.IEnumerator.Current%2A>.</span><span class="sxs-lookup"><span data-stu-id="da5ed-281">Therefore, you must call the <xref:System.Collections.IEnumerator.MoveNext%2A> method to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="da5ed-282"><xref:System.Collections.IEnumerator.Current%2A> retourne le même objet tant que <xref:System.Collections.IEnumerator.MoveNext%2A> ou <xref:System.Collections.IEnumerator.Reset%2A> n'est pas appelé.</span><span class="sxs-lookup"><span data-stu-id="da5ed-282"><xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span> <span data-ttu-id="da5ed-283"><xref:System.Collections.IEnumerator.MoveNext%2A> affecte l'élément suivant à <xref:System.Collections.IEnumerator.Current%2A>.</span><span class="sxs-lookup"><span data-stu-id="da5ed-283"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="da5ed-284">Si <xref:System.Collections.IEnumerator.MoveNext%2A> dépasse la fin de la collection, l’énumérateur est placée après le dernier élément dans la collection et <xref:System.Collections.IEnumerator.MoveNext%2A> retourne `false`.</span><span class="sxs-lookup"><span data-stu-id="da5ed-284">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="da5ed-285">Lorsque l’énumérateur est à cette position, les appels suivants à <xref:System.Collections.IEnumerator.MoveNext%2A> également retourner `false`.</span><span class="sxs-lookup"><span data-stu-id="da5ed-285">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="da5ed-286">Si le dernier appel à <xref:System.Collections.IEnumerator.MoveNext%2A> retourne `false`, <xref:System.Collections.IEnumerator.Current%2A> n’est pas défini.</span><span class="sxs-lookup"><span data-stu-id="da5ed-286">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="da5ed-287">Pour attribuer une nouvelle fois <xref:System.Collections.IEnumerator.Current%2A> au premier élément de la collection, vous pouvez appeler <xref:System.Collections.IEnumerator.Reset%2A> suivi de <xref:System.Collections.IEnumerator.MoveNext%2A>.</span><span class="sxs-lookup"><span data-stu-id="da5ed-287">To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.</span></span>  
  
 <span data-ttu-id="da5ed-288">Un énumérateur est valide tant que la collection demeure inchangée.</span><span class="sxs-lookup"><span data-stu-id="da5ed-288">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="da5ed-289">Si des modifications sont apportées à la collection, telles que l'ajout, la modification ou la suppression d'éléments, l'énumérateur est définitivement invalidé et son comportement n'est pas défini.</span><span class="sxs-lookup"><span data-stu-id="da5ed-289">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</span></span>  
  
 <span data-ttu-id="da5ed-290">Comme l’énumérateur ne dispose pas d’un accès exclusif à la collection, l’énumération d’une collection n’est pas intrinsèquement une procédure thread-safe.</span><span class="sxs-lookup"><span data-stu-id="da5ed-290">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="da5ed-291">Pour garantir la sécurité des threads pendant l’énumération, vous pouvez verrouiller la collection tout au long de cette opération.</span><span class="sxs-lookup"><span data-stu-id="da5ed-291">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span> <span data-ttu-id="da5ed-292">Pour permettre à plusieurs threads d’accéder en lecture et en écriture à la collection, vous devez implémenter votre propre synchronisation.</span><span class="sxs-lookup"><span data-stu-id="da5ed-292">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.ICollection" />
        <altmember cref="T:System.Collections.IEnumerable" />
        <altmember cref="M:System.Collections.IEnumerable.GetEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Add">
      <MemberSignature Language="C#" Value="int IList.Add (object value);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance int32 IListAdd(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListAdd(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IListAdd (value As Object) As Integer Implements IList.Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual int IListAdd(System::Object ^ value) = System::Collections::IList::Add;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da5ed-293">
            <see cref="T:System.Object" /> à ajouter à l'objet <see cref="T:Microsoft.VisualBasic.Collection" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-293">The <see cref="T:System.Object" /> to add to the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da5ed-294">Ajoute un élément à l'objet <see cref="T:Microsoft.VisualBasic.Collection" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-294">Adds an item to the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span>
          </span>
          <span data-ttu-id="da5ed-295">Implémente l'interface <see cref="T:System.Collections.IList" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-295">Implements the <see cref="T:System.Collections.IList" /> interface.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da5ed-296">Position à laquelle le nouvel élément est inséré.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-296">The position into which the new element was inserted.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da5ed-297">Vous pouvez également utiliser le <xref:Microsoft.VisualBasic.Collection.Item%2A> propriété à ajouter de nouveaux éléments en définissant la valeur d’une clé qui n’existe pas dans le <xref:Microsoft.VisualBasic.Collection> objet.</span><span class="sxs-lookup"><span data-stu-id="da5ed-297">You can also use the <xref:Microsoft.VisualBasic.Collection.Item%2A> property to add new elements by setting the value of a key that does not exist in the <xref:Microsoft.VisualBasic.Collection> object.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="da5ed-298">L'objet <see cref="T:Microsoft.VisualBasic.Collection" /> est en lecture seule.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-298">The <see cref="T:Microsoft.VisualBasic.Collection" /> object is read-only.</span>
          </span>
          <span data-ttu-id="da5ed-299">-ou- L’objet <see cref="T:Microsoft.VisualBasic.Collection" /> a une taille fixe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-299">-or-  The <see cref="T:Microsoft.VisualBasic.Collection" /> object has a fixed size.</span>
          </span>
        </exception>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.IList.Add(System.Object)" />
        <altmember cref="P:Microsoft.VisualBasic.Collection.Item(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Clear">
      <MemberSignature Language="C#" Value="void IList.Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void IListClear() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListClear" />
      <MemberSignature Language="VB.NET" Value="Sub IListClear () Implements IList.Clear" />
      <MemberSignature Language="C++ CLI" Value=" virtual void IListClear() = System::Collections::IList::Clear;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="da5ed-300">Supprime tous les éléments de l'objet <see cref="T:Microsoft.VisualBasic.Collection" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-300">Removes all items from the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span>
          </span>
          <span data-ttu-id="da5ed-301">Implémente l'interface <see cref="T:System.Collections.IList" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-301">Implements the <see cref="T:System.Collections.IList" /> interface.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da5ed-302">Cette méthode supprime tous les éléments de la <xref:Microsoft.VisualBasic.Collection> objet.</span><span class="sxs-lookup"><span data-stu-id="da5ed-302">This method removes all items from the <xref:Microsoft.VisualBasic.Collection> object.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="da5ed-303">
            <see cref="T:System.Collections.IList" /> est en lecture seule.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-303">The <see cref="T:System.Collections.IList" /> is read-only.</span>
          </span>
        </exception>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.Hashtable.Clear" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Contains">
      <MemberSignature Language="C#" Value="bool IList.Contains (object value);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance bool IListContains(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListContains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IListContains (value As Object) As Boolean Implements IList.Contains" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool IListContains(System::Object ^ value) = System::Collections::IList::Contains;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da5ed-304">
            <see cref="T:System.Object" /> à trouver dans l'objet <see cref="T:Microsoft.VisualBasic.Collection" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-304">The <see cref="T:System.Object" /> to locate in the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da5ed-305">Détermine si l'objet <see cref="T:Microsoft.VisualBasic.Collection" /> contient une valeur spécifique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-305">Determines whether the <see cref="T:Microsoft.VisualBasic.Collection" /> object contains a specific value.</span>
          </span>
          <span data-ttu-id="da5ed-306">Implémente l'interface <see cref="T:System.Collections.IList" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-306">Implements the <see cref="T:System.Collections.IList" /> interface.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da5ed-307">Retourne <see langword="True" /> si le <see cref="T:System.Object" /> est trouvé dans l'objet <see cref="T:Microsoft.VisualBasic.Collection" />, sinon <see langword="False" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-307">Returns <see langword="True" /> if the <see cref="T:System.Object" /> is found in the <see cref="T:Microsoft.VisualBasic.Collection" /> object; otherwise, <see langword="False" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da5ed-308">Cette méthode détermine si le <xref:Microsoft.VisualBasic.Collection> objet contient une valeur spécifique.</span><span class="sxs-lookup"><span data-stu-id="da5ed-308">This method determines whether the <xref:Microsoft.VisualBasic.Collection> object contains a specific value.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.IList.Contains(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IListIsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IListIsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IListIsFixedSize" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.IListIsFixedSize" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IListIsFixedSize As Boolean Implements IList.IListIsFixedSize" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.IList.IListIsFixedSize { bool get(); };" />
      <MemberSignature Language="F#" Usage="Microsoft.VisualBasic.Collection.IListIsFixedSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IListIsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IListIsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IListIsReadOnly" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.IListIsReadOnly" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IListIsReadOnly As Boolean Implements IList.IListIsReadOnly" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.IList.IListIsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Usage="Microsoft.VisualBasic.Collection.IListIsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IListItem">
      <MemberSignature Language="C#" Value="object System.Collections.IList.IListItem[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object IListItem(int32)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.IListItem(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" Property IListItem(index As Integer) As Object Implements IList.IListItem" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.IList.IListItem[int] { System::Object ^ get(int index); void set(int index, System::Object ^ value); };" />
      <MemberSignature Language="F#" Usage="Microsoft.VisualBasic.Collection.IListItem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IndexOf">
      <MemberSignature Language="C#" Value="int IList.IndexOf (object value);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance int32 IListIndexOf(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListIndexOf(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IListIndexOf (value As Object) As Integer Implements IList.IndexOf" />
      <MemberSignature Language="C++ CLI" Value=" virtual int IListIndexOf(System::Object ^ value) = System::Collections::IList::IndexOf;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da5ed-309">
            <see cref="T:System.Object" /> à trouver dans l'objet <see cref="T:Microsoft.VisualBasic.Collection" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-309">The <see cref="T:System.Object" /> to locate in the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da5ed-310">Détermine l'index d'un élément spécifique dans l'objet <see cref="T:Microsoft.VisualBasic.Collection" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-310">Determines the index of a specific item in the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span>
          </span>
          <span data-ttu-id="da5ed-311">Implémente l'interface <see cref="T:System.Collections.IList" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-311">Implements the <see cref="T:System.Collections.IList" /> interface.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da5ed-312">Index de <paramref name="value" /> si celui-ci figure dans la collection, sinon -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-312">The index of <paramref name="value" /> if found in the collection; otherwise, -1.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da5ed-313">Cette méthode détermine l’index d’un élément spécifique dans le <xref:Microsoft.VisualBasic.Collection> objet.</span><span class="sxs-lookup"><span data-stu-id="da5ed-313">This method determines the index of a specific item in the <xref:Microsoft.VisualBasic.Collection> object.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.IList.IndexOf(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Insert">
      <MemberSignature Language="C#" Value="void IList.Insert (int index, object value);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void IListInsert(int32 index, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListInsert(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub IListInsert (index As Integer, value As Object) Implements IList.Insert" />
      <MemberSignature Language="C++ CLI" Value=" virtual void IListInsert(int index, System::Object ^ value) = System::Collections::IList::Insert;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="da5ed-314">Index de base zéro auquel la <c>valeur</c> doit être insérée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-314">The zero-based index at which <c>value</c> should be inserted.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="da5ed-315">
            <see cref="T:System.Object" /> à insérer dans l'objet <see cref="T:Microsoft.VisualBasic.Collection" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-315">The <see cref="T:System.Object" /> to insert into the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da5ed-316">Insère un élément dans l'objet <see cref="T:Microsoft.VisualBasic.Collection" /> au niveau de l'index spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-316">Inserts an item to the <see cref="T:Microsoft.VisualBasic.Collection" /> object at the specified index.</span>
          </span>
          <span data-ttu-id="da5ed-317">Implémente l'interface <see cref="T:System.Collections.IList" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-317">Implements the <see cref="T:System.Collections.IList" /> interface.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da5ed-318">Si `index` est égal au nombre d’éléments dans le <xref:Microsoft.VisualBasic.Collection> de l’objet, puis `value` est ajouté à la fin.</span><span class="sxs-lookup"><span data-stu-id="da5ed-318">If `index` equals the number of items in the <xref:Microsoft.VisualBasic.Collection> object, then `value` is appended to the end.</span></span>  
  
 <span data-ttu-id="da5ed-319">Dans des collections d’éléments contigus, telles que les listes, les éléments situés après le point d’insertion descendent afin de prendre en compte le nouvel élément.</span><span class="sxs-lookup"><span data-stu-id="da5ed-319">In collections of contiguous elements, such as lists, the elements that follow the insertion point move down to accommodate the new element.</span></span> <span data-ttu-id="da5ed-320">Si la collection est indexée, les index des éléments déplacés sont également mis à jour.</span><span class="sxs-lookup"><span data-stu-id="da5ed-320">If the collection is indexed, the indexes of the elements that are moved are also updated.</span></span> <span data-ttu-id="da5ed-321">Ce comportement ne s’applique pas aux collections dont les éléments sont regroupés de manière conceptuelle en compartiments, comme par exemple les tables de hachage.</span><span class="sxs-lookup"><span data-stu-id="da5ed-321">This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="da5ed-322">
            <paramref name="index" /> n'est pas un index valide dans l'objet <see cref="T:Microsoft.VisualBasic.Collection" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-322">
              <paramref name="index" /> is not a valid index in the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="da5ed-323">L'objet <see cref="T:Microsoft.VisualBasic.Collection" /> est en lecture seule.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-323">The <see cref="T:Microsoft.VisualBasic.Collection" /> object is read-only.</span>
          </span>
          <span data-ttu-id="da5ed-324">-ou- L’objet <see cref="T:Microsoft.VisualBasic.Collection" /> a une taille fixe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-324">-or-  The <see cref="T:Microsoft.VisualBasic.Collection" /> object has a fixed size.</span>
          </span>
        </exception>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="da5ed-325">
            <paramref name="value" /> est une référence null dans l'objet <see cref="T:Microsoft.VisualBasic.Collection" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-325">
              <paramref name="value" /> is null reference in the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span>
          </span>
        </exception>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.IList.Insert(System.Int32,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Remove">
      <MemberSignature Language="C#" Value="void IList.Remove (object value);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void IListRemove(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListRemove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub IListRemove (value As Object) Implements IList.Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual void IListRemove(System::Object ^ value) = System::Collections::IList::Remove;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da5ed-326">Objet <see cref="T:System.Object" /> à supprimer de l'objet <see cref="T:Microsoft.VisualBasic.Collection" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-326">The <see cref="T:System.Object" /> to remove from the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da5ed-327">Supprime la première occurrence d'un objet spécifique de l'objet <see cref="T:Microsoft.VisualBasic.Collection" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-327">Removes the first occurrence of a specific object from the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span>
          </span>
          <span data-ttu-id="da5ed-328">Implémente l'interface <see cref="T:System.Collections.IList" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-328">Implements the <see cref="T:System.Collections.IList" /> interface.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da5ed-329">Dans des collections d’éléments contigus, telles que les listes, les éléments qui suivent l’élément supprimé remontent pour occuper l’espace libéré.</span><span class="sxs-lookup"><span data-stu-id="da5ed-329">In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.</span></span> <span data-ttu-id="da5ed-330">Si la collection est indexée, les index des éléments déplacés sont également mis à jour.</span><span class="sxs-lookup"><span data-stu-id="da5ed-330">If the collection is indexed, the indexes of the elements that are moved are also updated.</span></span> <span data-ttu-id="da5ed-331">Ce comportement ne s’applique pas aux collections dont les éléments sont regroupés de manière conceptuelle en compartiments, comme par exemple les tables de hachage.</span><span class="sxs-lookup"><span data-stu-id="da5ed-331">This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</span></span> <span data-ttu-id="da5ed-332">Si `value` est introuvable dans le <xref:Microsoft.VisualBasic.Collection> objet, le <xref:Microsoft.VisualBasic.Collection> reste inchangé et aucune exception n’est levée.</span><span class="sxs-lookup"><span data-stu-id="da5ed-332">If `value` is not found in the <xref:Microsoft.VisualBasic.Collection> object, the <xref:Microsoft.VisualBasic.Collection> object remains unchanged and no exception is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="da5ed-333">L'objet <see cref="T:Microsoft.VisualBasic.Collection" /> est en lecture seule.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-333">The <see cref="T:Microsoft.VisualBasic.Collection" /> object is read-only.</span>
          </span>
          <span data-ttu-id="da5ed-334">-ou- L’objet <see cref="T:Microsoft.VisualBasic.Collection" /> a une taille fixe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-334">-or-  The <see cref="T:Microsoft.VisualBasic.Collection" /> object has a fixed size.</span>
          </span>
        </exception>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.IList.Remove(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.RemoveAt">
      <MemberSignature Language="C#" Value="void IList.RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void IListRemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListRemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Sub IListRemoveAt (index As Integer) Implements IList.RemoveAt" />
      <MemberSignature Language="C++ CLI" Value=" virtual void IListRemoveAt(int index) = System::Collections::IList::RemoveAt;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="da5ed-335">Index de base zéro de l'élément à supprimer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-335">The zero-based index of the item to remove.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da5ed-336">Supprime l'élément d'objet <see cref="T:Microsoft.VisualBasic.Collection" /> au niveau de l'index spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-336">Removes the <see cref="T:Microsoft.VisualBasic.Collection" /> object item at the specified index.</span>
          </span>
          <span data-ttu-id="da5ed-337">Implémente l'interface <see cref="T:System.Collections.IList" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-337">Implements the <see cref="T:System.Collections.IList" /> interface.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da5ed-338">Dans des collections d’éléments contigus, telles que les listes, les éléments qui suivent l’élément supprimé remontent pour occuper l’espace libéré.</span><span class="sxs-lookup"><span data-stu-id="da5ed-338">In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.</span></span> <span data-ttu-id="da5ed-339">Si la collection est indexée, les index des éléments déplacés sont également mis à jour.</span><span class="sxs-lookup"><span data-stu-id="da5ed-339">If the collection is indexed, the indexes of the elements that are moved are also updated.</span></span> <span data-ttu-id="da5ed-340">Ce comportement ne s’applique pas aux collections dont les éléments sont regroupés de manière conceptuelle en compartiments, comme par exemple les tables de hachage.</span><span class="sxs-lookup"><span data-stu-id="da5ed-340">This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="da5ed-341">
            <paramref name="index" /> n'est pas un index valide dans l'objet <see cref="T:Microsoft.VisualBasic.Collection" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-341">
              <paramref name="index" /> is not a valid index in the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="da5ed-342">L'objet <see cref="T:Microsoft.VisualBasic.Collection" /> est en lecture seule.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-342">The <see cref="T:Microsoft.VisualBasic.Collection" /> object is read-only.</span>
          </span>
          <span data-ttu-id="da5ed-343">-ou- L’objet <see cref="T:Microsoft.VisualBasic.Collection" /> a une taille fixe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-343">-or-  The <see cref="T:Microsoft.VisualBasic.Collection" /> object has a fixed size.</span>
          </span>
        </exception>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.IList.RemoveAt(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.IDeserializationCallback.OnDeserialization">
      <MemberSignature Language="C#" Value="void IDeserializationCallback.OnDeserialization (object sender);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void OnDeserialization(object sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.OnDeserialization(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub OnDeserialization (sender As Object) Implements IDeserializationCallback.OnDeserialization" />
      <MemberSignature Language="C++ CLI" Value=" virtual void OnDeserialization(System::Object ^ sender) = System::Runtime::Serialization::IDeserializationCallback::OnDeserialization;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="sender">
          <span data-ttu-id="da5ed-344">Objet qui a initié le rappel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-344">The object that initiated the callback.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da5ed-345">S'exécute une fois la totalité du graphique d'objets <see cref="T:Microsoft.VisualBasic.Collection" /> désérialisée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-345">Runs after the entire <see cref="T:Microsoft.VisualBasic.Collection" /> object graph has been deserialized.</span>
          </span>
          <span data-ttu-id="da5ed-346">Implémente l'interface <see cref="T:System.Runtime.Serialization.IDeserializationCallback" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-346">Implements the <see cref="T:System.Runtime.Serialization.IDeserializationCallback" /> interface.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da5ed-347">Cette méthode est appelée une fois la totalité <xref:Microsoft.VisualBasic.Collection> graphique d’objet a été désérialisé.</span><span class="sxs-lookup"><span data-stu-id="da5ed-347">This method is called after the entire <xref:Microsoft.VisualBasic.Collection> object graph has been deserialized.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Runtime.Serialization.IDeserializationCallback" />
        <altmember cref="M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">
          <span data-ttu-id="da5ed-348">Objet <see cref="T:System.Runtime.Serialization.SerializationInfo" /> contenant les informations nécessaires pour sérialiser <see cref="T:Microsoft.VisualBasic.Collection" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-348">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object containing the information required to serialize the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="da5ed-349">Un objet <see cref="T:System.Runtime.Serialization.StreamingContext" /> contenant la source et la destination du flux sérialisé associé à l'objet <see cref="T:Microsoft.VisualBasic.Collection" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-349">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object containing the source and destination of the serialized stream associated with the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da5ed-350">Retourne les données nécessaires à la sérialisation de l'objet <see cref="T:Microsoft.VisualBasic.Collection" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-350">Returns the data needed to serialize the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</span>
          </span>
          <span data-ttu-id="da5ed-351">Implémente l'interface <see cref="T:System.Runtime.Serialization.ISerializable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da5ed-351">Implements the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da5ed-352">Cette méthode retourne les données nécessaires pour sérialiser le <xref:Microsoft.VisualBasic.Collection> objet.</span><span class="sxs-lookup"><span data-stu-id="da5ed-352">This method returns the data needed to serialize the <xref:Microsoft.VisualBasic.Collection> object.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Runtime.Serialization.ISerializable" />
        <altmember cref="T:System.Runtime.Serialization.SerializationInfo" />
        <altmember cref="T:System.Runtime.Serialization.StreamingContext" />
        <altmember cref="M:System.Collections.Hashtable.OnDeserialization(System.Object)" />
      </Docs>
    </Member>
  </Members>
</Type>