<Type Name="VBMath" FullName="Microsoft.VisualBasic.VBMath">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3839187e325901ad3f3f4d5e81304055450240f2" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30348413" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class VBMath" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed VBMath extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.VBMath" />
  <TypeSignature Language="VB.NET" Value="Public Module VBMath" />
  <TypeSignature Language="C++ CLI" Value="public ref class VBMath sealed" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Le module <see langword="VbMath" /> contient les procédures utilisées pour effectuer des opérations mathématiques.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce module prend en charge les mots clés du langage Visual Basic et les membres de la bibliothèque Runtime pour la génération de nombres aléatoires.  
  
   
  
## Examples  
 Cet exemple utilise le `Rnd` fonction à générer un entier aléatoire compris dans la plage de 1 à 6.  
  
 [!code-vb[VbVbalrMath#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#21)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="Randomize">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialise le générateur de nombres aléatoires.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Randomize">
      <MemberSignature Language="C#" Value="public static void Randomize ();" />
      <MemberSignature Language="ILAsm" Value=".method public static void Randomize() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.VBMath.Randomize" />
      <MemberSignature Language="VB.NET" Value="Public Sub Randomize ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Randomize();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Initialise le générateur de nombres aléatoires.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette surcharge de la `Randomize` méthode ne prend pas une valeur de départ. Au lieu de cela, la valeur retournée par l’horloge système est utilisée en tant que la nouvelle valeur de départ.  
  
 Si `Randomize` n’est pas utilisé, le `Rnd` fonction (sans argument) utilise le même nombre comme valeur initiale la première fois, elle est appelée et par la suite utilise le nombre généré par le dernier comme une valeur de départ.  
  
> [!NOTE]
>  Pour répéter des séquences de nombres aléatoires, appelez `Rnd` avec un argument négatif juste avant d’utiliser `Randomize` avec un argument numérique.  
  
> [!IMPORTANT]
>  Étant donné que la `Random` instruction et `Rnd` fonction commencent par une valeur initiale et génèrent des nombres qui se trouvent dans une plage finie, les résultats peuvent être prévus par toute personne connaissant l’algorithme utilisé pour générer les. Par conséquent, le `Random` instruction et `Rnd` fonction ne doit pas être utilisée pour générer des nombres aléatoires à utiliser dans le chiffrement. Pour plus d'informations, consultez <xref:System.Security.Cryptography.RandomNumberGenerator>.  
  
   
  
## Examples  
 Cet exemple utilise la `Randomize` instruction pour initialiser le Générateur de nombres aléatoires. L’argument de nombre a été omis, `Randomize` utilise la valeur de retournée de la `Timer` de fonction en tant que la nouvelle valeur de départ.  
  
 [!code-vb[VbVbalrMath#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#21)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.VBMath.Rnd" />
      </Docs>
    </Member>
    <Member MemberName="Randomize">
      <MemberSignature Language="C#" Value="public static void Randomize (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Randomize(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.VBMath.Randomize(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Randomize (Number As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Randomize(double Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number">Optionnel. <see langword="Object" /> ou toute expression numérique valide.</param>
        <summary>Initialise le générateur de nombres aléatoires.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Randomize` utilise `Number` pour initialiser le `Rnd` Générateur de nombres aléatoires de la fonction, en lui donnant une nouvelle valeur de départ. Si vous omettez `Number`, la valeur retournée par l’horloge système est utilisée en tant que la nouvelle valeur de départ.  
  
 Si `Randomize` n’est pas utilisé, le `Rnd` fonction (sans argument) utilise le même nombre comme valeur initiale la première fois, elle est appelée et par la suite utilise le nombre généré par le dernier comme une valeur de départ.  
  
> [!NOTE]
>  Pour répéter des séquences de nombres aléatoires, appelez `Rnd` avec un argument négatif juste avant d’utiliser `Randomize` avec un argument numérique. À l’aide de `Randomize` avec la même valeur pour `Number` ne se répète pas la séquence précédente.  
  
> [!IMPORTANT]
>  Étant donné que la `Random` instruction et `Rnd` fonction commencent par une valeur initiale et génèrent des nombres qui se trouvent dans une plage finie, les résultats peuvent être prévus par toute personne connaissant l’algorithme utilisé pour générer les. Par conséquent, le `Random` instruction et `Rnd` fonction ne doit pas être utilisée pour générer des nombres aléatoires à utiliser dans le chiffrement. Pour plus d'informations, consultez <xref:System.Security.Cryptography.RandomNumberGenerator>.  
  
   
  
## Examples  
 Cet exemple utilise la `Randomize` instruction pour initialiser le Générateur de nombres aléatoires. L’argument de nombre a été omis, `Randomize` utilise la valeur de retournée de la `Timer` de fonction en tant que la nouvelle valeur de départ.  
  
 [!code-vb[VbVbalrMath#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#21)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.VBMath.Rnd" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Rnd">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Retourne un nombre aléatoire de type <see langword="Single" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Rnd">
      <MemberSignature Language="C#" Value="public static float Rnd ();" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Rnd() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.VBMath.Rnd" />
      <MemberSignature Language="VB.NET" Value="Public Function Rnd () As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Rnd();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retourne un nombre aléatoire de type <see langword="Single" />.</summary>
        <returns>Le nombre aléatoire suivant dans la série.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `Rnd` fonction retourne une valeur inférieure à 1, mais supérieur ou égal à zéro.  
  
 Avant d’appeler `Rnd`, utilisez la `Randomize` instruction sans argument pour initialiser le Générateur de nombres aléatoires avec une valeur initiale basée sur l’horloge système.  
  
 Pour générer des entiers aléatoires dans une plage donnée, utilisez la formule suivante.  
  
 [!code-vb[VbVbalrMath#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#30)]  
  
 Ici, `upperbound` est le nombre le plus élevé dans la plage, et `lowerbound` est le nombre le plus bas dans la plage.  
  
> [!NOTE]
>  Pour répéter des séquences de nombres aléatoires, appelez `Rnd` avec un argument négatif juste avant d’utiliser `Randomize` avec un argument numérique.  
  
> [!IMPORTANT]
>  Étant donné que la `Random` instruction et `Rnd` fonction commencent par une valeur initiale et génèrent des nombres qui se trouvent dans une plage finie, les résultats peuvent être prévus par toute personne connaissant l’algorithme utilisé pour générer les. Par conséquent, le `Random` instruction et `Rnd` fonction ne doit pas être utilisée pour générer des nombres aléatoires à utiliser dans le chiffrement.  
  
   
  
## Examples  
 Cet exemple utilise le `Rnd` fonction à générer un entier aléatoire compris dans la plage de 1 à 6.  
  
 [!code-vb[VbVbalrMath#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#21)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.VBMath.Randomize" />
      </Docs>
    </Member>
    <Member MemberName="Rnd">
      <MemberSignature Language="C#" Value="public static float Rnd (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Rnd(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.VBMath.Rnd(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rnd (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Rnd(float Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number">Optionnel. Une valeur <see langword="Single" /> ou toute expression <see langword="Single" /> valide.</param>
        <summary>Retourne un nombre aléatoire de type <see langword="Single" />.</summary>
        <returns>Si le nombre est inférieur à zéro, Rnd génère même nombre à chaque fois, en utilisant l'argument <paramref name="Number" />comme valeur initiale. Si le nombre est supérieur à zéro, Rnd génère le nombre aléatoire suivant dans la séquence. Si le nombre est égal à zéro, Rnd génère le dernier nombre généré. Si le nombre n'est pas fourni, Rnd génère le nombre aléatoire suivant dans la séquence.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `Rnd` fonction retourne une valeur inférieure à 1, mais supérieur ou égal à zéro.  
  
 La valeur de `Number` détermine comment `Rnd` génère un nombre aléatoire.  
  
 Toute valeur initiale donnée, la même séquence de nombres est générée, car chaque appel à la `Rnd` fonction utilise le nombre généré précédemment comme valeur de départ pour le numéro suivant dans la séquence.  
  
 Avant d’appeler `Rnd`, utilisez la `Randomize` instruction sans argument pour initialiser le Générateur de nombres aléatoires avec une valeur initiale basée sur l’horloge système.  
  
 Pour générer des entiers aléatoires dans une plage donnée, utilisez la formule suivante.  
  
 [!code-vb[VbVbalrMath#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#30)]  
  
 Ici, `upperbound` est le nombre le plus élevé dans la plage, et `lowerbound` est le nombre le plus bas dans la plage.  
  
> [!NOTE]
>  Pour répéter des séquences de nombres aléatoires, appelez `Rnd` avec un argument négatif juste avant d’utiliser `Randomize` avec un argument numérique. À l’aide de `Randomize` avec la même valeur pour `Number` ne se répète pas la séquence précédente.  
  
> [!IMPORTANT]
>  Étant donné que la `Random` instruction et `Rnd` fonction commencent par une valeur initiale et génèrent des nombres qui se trouvent dans une plage finie, les résultats peuvent être prévus par toute personne connaissant l’algorithme utilisé pour générer les. Par conséquent, le `Random` instruction et `Rnd` fonction ne doit pas être utilisée pour générer des nombres aléatoires à utiliser dans le chiffrement.  
  
   
  
## Examples  
 Cet exemple utilise le `Rnd` fonction à générer un entier aléatoire compris dans la plage de 1 à 6.  
  
 [!code-vb[VbVbalrMath#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#21)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.VBMath.Randomize" />
      </Docs>
    </Member>
  </Members>
</Type>