<Type Name="Conversion" FullName="Microsoft.VisualBasic.Conversion">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="fc28c5733fb9f77e132ec584a6f025b3048ad10b" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48643506" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Conversion" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Conversion extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Conversion" />
  <TypeSignature Language="VB.NET" Value="Public Module Conversion" />
  <TypeSignature Language="C++ CLI" Value="public ref class Conversion sealed" />
  <TypeSignature Language="F#" Value="type Conversion = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="ed12f-101">Le module <see langword="Conversion" /> contient les procédures utilisées pour exécuter différentes opérations de conversion.</span>
      <span class="sxs-lookup">
        <span data-stu-id="ed12f-101">The <see langword="Conversion" /> module contains the procedures used to perform various conversion operations.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ed12f-102">Ce module prend en charge les mots clés du langage Visual Basic et les membres de bibliothèque Runtime qui convertissent des nombres décimaux en d’autres bases, les nombres en chaînes, des chaînes en nombres et données d’un type vers un autre.</span><span class="sxs-lookup"><span data-stu-id="ed12f-102">This module supports the Visual Basic language keywords and run-time library members that convert decimal numbers to other bases, numbers to strings, strings to numbers, and one data type to another.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ed12f-103">Cet exemple utilise le `Hex` fonction pour retourner la valeur hexadécimale d’un nombre.</span><span class="sxs-lookup"><span data-stu-id="ed12f-103">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
      <span data-ttu-id="ed12f-104">Résumé de la conversion</span>
      <span class="sxs-lookup">
        <span data-stu-id="ed12f-104">Conversion Summary</span>
      </span>
    </related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md">
      <span data-ttu-id="ed12f-105">Mots clés (Visual Basic)</span>
      <span class="sxs-lookup">
        <span data-stu-id="ed12f-105">Keywords (Visual Basic)</span>
      </span>
    </related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">
      <span data-ttu-id="ed12f-106">Membres de la bibliothèque d’exécution Visual Basic</span>
      <span class="sxs-lookup">
        <span data-stu-id="ed12f-106">Visual Basic Run-Time Library Members</span>
      </span>
    </related>
  </Docs>
  <Members>
    <Member MemberName="CTypeDynamic">
      <MemberSignature Language="C#" Value="public static object CTypeDynamic (object Expression, Type TargetType);" />
      <MemberSignature Language="ILAsm" Value=".method public static object CTypeDynamic(object Expression, class System.Type TargetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic (Expression As Object, TargetType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CTypeDynamic(System::Object ^ Expression, Type ^ TargetType);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj * Type -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic (Expression, TargetType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="TargetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="ed12f-107">Objet à convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-107">The object to convert.</span>
          </span>
        </param>
        <param name="TargetType">
          <span data-ttu-id="ed12f-108">Type dans lequel convertir l'objet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-108">The type to which to convert the object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ed12f-109">Convertit un objet dans le type spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-109">Converts an object to the specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ed12f-110">Objet dont le type au moment de l'exécution est le type cible demandé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-110">An object whose type at run time is the requested target type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ed12f-111">Le `CTypeDynamic` méthode convertit l’objet passé comme le `Expression` paramètre vers le type spécifié par le `TargetType` paramètre.</span><span class="sxs-lookup"><span data-stu-id="ed12f-111">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the `TargetType` parameter.</span></span> <span data-ttu-id="ed12f-112">Si l’objet est un objet dynamique, le `CTypeDynamic` méthode applique les conversions dynamiques disponibles.</span><span class="sxs-lookup"><span data-stu-id="ed12f-112">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="ed12f-113">Le `CTypeDynamic` méthode applique les conversions dynamiques conformément à la sémantique de conversion définie par l’objet lui-même.</span><span class="sxs-lookup"><span data-stu-id="ed12f-113">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="ed12f-114">Si un objet dynamique hérite <xref:System.Dynamic.DynamicObject>, le `CTypeDynamic` méthode tente tout d’abord effectuer la conversion à l’aide d’une conversion statique définie par l’utilisateur.</span><span class="sxs-lookup"><span data-stu-id="ed12f-114">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="ed12f-115">Si la conversion statique définie par l’utilisateur échoue, la `CTypeDynamic` méthode tente d’effectuer la conversion à l’aide des conversions dynamiques.</span><span class="sxs-lookup"><span data-stu-id="ed12f-115">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="ed12f-116">Si un objet dynamique implémente <xref:System.Dynamic.IDynamicMetaObjectProvider>, le `CTypeDynamic` méthode donne la priorité aux conversions dynamiques sur les conversions définies par l’utilisateur, statiques.</span><span class="sxs-lookup"><span data-stu-id="ed12f-116">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ed12f-117">L’exemple suivant utilise la `CTypeDynamic` méthode pour convertir une chaîne à l’aide de la conversion définie par l’objet dynamique dans un objet dynamique.</span><span class="sxs-lookup"><span data-stu-id="ed12f-117">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim sampleString = CTypeDynamic(dyn, GetType(String))  
        Console.WriteLine(sampleString)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/early-late-binding/working-with-dynamic-objects.md">
          <span data-ttu-id="ed12f-118">Utilisation d'objets dynamiques (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-118">Working with Dynamic Objects (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md">
          <span data-ttu-id="ed12f-119">Procédure pas à pas : création et utilisation d'objets dynamiques (C# et Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-119">Walkthrough: Creating and Using Dynamic Objects (C# and Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="CTypeDynamic&lt;TargetType&gt;">
      <MemberSignature Language="C#" Value="public static TargetType CTypeDynamic&lt;TargetType&gt; (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!TargetType CTypeDynamic&lt;TargetType&gt;(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic(Of TargetType) (Expression As Object) As TargetType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TargetType&gt;&#xA; static TargetType CTypeDynamic(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj -&gt; 'argetType" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TargetType</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TargetType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TargetType">
          <span data-ttu-id="ed12f-120">Type dans lequel convertir l'objet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-120">The type to which to convert the object.</span>
          </span>
        </typeparam>
        <param name="Expression">
          <span data-ttu-id="ed12f-121">Objet à convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-121">The object to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ed12f-122">Convertit un objet dans le type générique spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-122">Converts an object to the specified generic type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ed12f-123">Objet typé statiquement comme type générique demandé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-123">An object statically typed as the requested generic type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ed12f-124">Le `CTypeDynamic` méthode convertit l’objet passé comme le `Expression` paramètre vers le type spécifié par le type du paramètre générique.</span><span class="sxs-lookup"><span data-stu-id="ed12f-124">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the type of the generic parameter.</span></span> <span data-ttu-id="ed12f-125">Si l’objet est un objet dynamique, le `CTypeDynamic` méthode applique les conversions dynamiques disponibles.</span><span class="sxs-lookup"><span data-stu-id="ed12f-125">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="ed12f-126">Le `CTypeDynamic` méthode applique les conversions dynamiques conformément à la sémantique de conversion définie par l’objet lui-même.</span><span class="sxs-lookup"><span data-stu-id="ed12f-126">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="ed12f-127">Si un objet dynamique hérite <xref:System.Dynamic.DynamicObject>, le `CTypeDynamic` méthode tente tout d’abord effectuer la conversion à l’aide d’une conversion statique définie par l’utilisateur.</span><span class="sxs-lookup"><span data-stu-id="ed12f-127">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="ed12f-128">Si la conversion statique définie par l’utilisateur échoue, la `CTypeDynamic` méthode tente d’effectuer la conversion à l’aide des conversions dynamiques.</span><span class="sxs-lookup"><span data-stu-id="ed12f-128">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="ed12f-129">Si un objet dynamique implémente <xref:System.Dynamic.IDynamicMetaObjectProvider>, le `CTypeDynamic` méthode donne la priorité aux conversions dynamiques sur les conversions définies par l’utilisateur, statiques.</span><span class="sxs-lookup"><span data-stu-id="ed12f-129">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ed12f-130">L’exemple suivant utilise la `CTypeDynamic` méthode pour convertir une chaîne à l’aide de la conversion définie par l’objet dynamique dans un objet dynamique.</span><span class="sxs-lookup"><span data-stu-id="ed12f-130">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim str = CTypeDynamic(Of String)(dyn)  
        Console.WriteLine(str)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/early-late-binding/working-with-dynamic-objects.md">
          <span data-ttu-id="ed12f-131">Utilisation d'objets dynamiques (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-131">Working with Dynamic Objects (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md">
          <span data-ttu-id="ed12f-132">Procédure pas à pas : création et utilisation d'objets dynamiques (C# et Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-132">Walkthrough: Creating and Using Dynamic Objects (C# and Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ErrorToString">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ed12f-133">Retourne le message d'erreur qui correspond à un numéro d'erreur donné.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-133">Returns the error message that corresponds to a given error number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString();" />
      <MemberSignature Language="F#" Value="static member ErrorToString : unit -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ed12f-134">Retourne le message d'erreur qui correspond à un numéro d'erreur donné.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-134">Returns the error message that corresponds to a given error number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ed12f-135">Message d'erreur qui correspond à l'erreur d'exécution la plus récente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-135">The error message that corresponds to the most recent run-time error.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ed12f-136">Le `ErrorToString` fonction examine les paramètres de propriété de la `Err` objet pour identifier l’erreur d’exécution la plus récente.</span><span class="sxs-lookup"><span data-stu-id="ed12f-136">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="ed12f-137">La valeur de retour de la `ErrorToString` fonction correspond à la `Description` propriété de la `Err` objet.</span><span class="sxs-lookup"><span data-stu-id="ed12f-137">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="ed12f-138">Si aucune erreur d’exécution se n’est produite, `ErrorToString` retourne une chaîne de longueur nulle ( » »).</span><span class="sxs-lookup"><span data-stu-id="ed12f-138">If no run-time error has occurred, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="ed12f-139">Dans la version 6.0 et versions antérieure de Visual Basic, cette fonctionnalité a été fournie par le `Error` (fonction).</span><span class="sxs-lookup"><span data-stu-id="ed12f-139">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ed12f-140">Le code suivant utilise la `ErrorToString` (fonction) pour afficher les messages d’erreur qui correspondent aux numéros d’erreur spécifié.</span><span class="sxs-lookup"><span data-stu-id="ed12f-140">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ed12f-141">
            <paramref name="ErrorNumber" /> est hors limites.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-141">
              <paramref name="ErrorNumber" /> is out of range.</span>
          </span>
        </exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString (int ErrorNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString(int32 ErrorNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString (ErrorNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString(int ErrorNumber);" />
      <MemberSignature Language="F#" Value="static member ErrorToString : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString ErrorNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ErrorNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ErrorNumber">
          <span data-ttu-id="ed12f-142">Optionnel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-142">Optional.</span>
          </span>
          <span data-ttu-id="ed12f-143">Tout numéro d'erreur valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-143">Any valid error number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ed12f-144">Retourne le message d'erreur qui correspond à un numéro d'erreur donné.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-144">Returns the error message that corresponds to a given error number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ed12f-145">Message d'erreur qui correspond à un numéro d'erreur donné.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-145">The error message that corresponds to a given error number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ed12f-146">Le `ErrorToString` fonction examine les paramètres de propriété de la `Err` objet pour identifier l’erreur d’exécution la plus récente.</span><span class="sxs-lookup"><span data-stu-id="ed12f-146">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="ed12f-147">La valeur de retour de la `ErrorToString` fonction correspond à la `Description` propriété de la `Err` objet.</span><span class="sxs-lookup"><span data-stu-id="ed12f-147">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="ed12f-148">Si `ErrorNumber` est un numéro d’erreur valide mais n’est pas défini, `ErrorToString` retourne la chaîne `"Application-defined or object-defined error."` si `ErrorNumber` n’est pas valide, une erreur se produit.</span><span class="sxs-lookup"><span data-stu-id="ed12f-148">If `ErrorNumber` is a valid error number but is not defined, `ErrorToString` returns the string `"Application-defined or object-defined error."` If `ErrorNumber` is not valid, an error occurs.</span></span> <span data-ttu-id="ed12f-149">Si `ErrorNumber` est omis, le message correspondant à la dernière erreur d’exécution est retournée.</span><span class="sxs-lookup"><span data-stu-id="ed12f-149">If `ErrorNumber` is omitted, the message corresponding to the most recent run-time error is returned.</span></span> <span data-ttu-id="ed12f-150">Si aucune erreur d’exécution se n’est produite ou `ErrorNumber` est 0, `ErrorToString` retourne une chaîne de longueur nulle ( » »).</span><span class="sxs-lookup"><span data-stu-id="ed12f-150">If no run-time error has occurred or `ErrorNumber` is 0, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="ed12f-151">Dans la version 6.0 et versions antérieure de Visual Basic, cette fonctionnalité a été fournie par le `Error` (fonction).</span><span class="sxs-lookup"><span data-stu-id="ed12f-151">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ed12f-152">Le code suivant utilise la `ErrorToString` (fonction) pour afficher les messages d’erreur qui correspondent aux numéros d’erreur spécifié.</span><span class="sxs-lookup"><span data-stu-id="ed12f-152">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ed12f-153">
            <paramref name="ErrorNumber" /> est hors limites.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-153">
              <paramref name="ErrorNumber" /> is out of range.</span>
          </span>
        </exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Fix">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ed12f-154">Retournent la partie entière d'un nombre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-154">Return the integer portion of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static decimal Fix (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Fix(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Fix(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Fix : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ed12f-155">Obligatoire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-155">Required.</span>
          </span>
          <span data-ttu-id="ed12f-156">Nombre de type <see langword="Double" /> ou toute expression numérique valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-156">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="ed12f-157">Si <c>Number</c> contient <see langword="Nothing" />, <see langword="Nothing" /> est retourné.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-157">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ed12f-158">Retournent la partie entière d'un nombre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-158">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ed12f-159">Retournent la partie entière d'un nombre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-159">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ed12f-160">À la fois le `Int` et `Fix` fonctions suppriment la partie fractionnaire des `Number` et retourner la valeur entière résultante.</span><span class="sxs-lookup"><span data-stu-id="ed12f-160">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="ed12f-161">La différence entre `Int` et `Fix` fonctions est que si `Number` est négatif, `Int` retourne le premier entier négatif inférieur ou égal à `Number`, tandis que `Fix` retourne le premier entier négatif supérieur ou égal à `Number`.</span><span class="sxs-lookup"><span data-stu-id="ed12f-161">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="ed12f-162">Par exemple, `Int` convertit-8,4 en -9, et `Fix` convertit-8,4 en -8.</span><span class="sxs-lookup"><span data-stu-id="ed12f-162">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="ed12f-163">`Fix(number)` équivaut à `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="ed12f-163">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ed12f-164">Cet exemple illustre comment la `Int` et `Fix` fonctions retournent la partie entière des nombres.</span><span class="sxs-lookup"><span data-stu-id="ed12f-164">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="ed12f-165">Dans le cas d’un argument est négatif, le `Int` fonction retourne le premier entier négatif inférieur ou égal au nombre ; le `Fix` fonction retourne le premier entier négatif supérieur ou égal au nombre.</span><span class="sxs-lookup"><span data-stu-id="ed12f-165">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="ed12f-166">L’exemple suivant, vous devez spécifier `Option Strict Off` , car les conversions implicites du type `Double` à taper `Integer` ne sont pas autorisés sous `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="ed12f-166">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="ed12f-167">Vous pouvez utiliser la `CInt` fonction pour convertir explicitement les autres types de données en type `Integer` avec `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="ed12f-167">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="ed12f-168">Toutefois, `CInt` est arrondi à l’entier le plus proche au lieu de tronquer la partie fractionnaire des nombres.</span><span class="sxs-lookup"><span data-stu-id="ed12f-168">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="ed12f-169">Exemple :</span><span class="sxs-lookup"><span data-stu-id="ed12f-169">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="ed12f-170">Vous pouvez utiliser la `CInt` fonction sur le résultat d’un appel à `Fix` ou `Int` pour effectuer une conversion explicite en entier sans arrondi.</span><span class="sxs-lookup"><span data-stu-id="ed12f-170">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="ed12f-171">Exemple :</span><span class="sxs-lookup"><span data-stu-id="ed12f-171">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="ed12f-172">Pour plus d’informations sur `CInt`, consultez [les fonctions de Conversion de Type](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="ed12f-172">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ed12f-173">Number n'est pas spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-173">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ed12f-174">Number n'est pas un type numérique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-174">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="ed12f-175">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-175">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="ed12f-176">Liste des types de données (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-176">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="ed12f-177">Liste des mots clés mathématiques</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-177">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="ed12f-178">Fonctions mathématiques (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-178">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="ed12f-179">Résumé de la conversion</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-179">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static double Fix (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Fix(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Fix(double Number);" />
      <MemberSignature Language="F#" Value="static member Fix : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ed12f-180">Obligatoire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-180">Required.</span>
          </span>
          <span data-ttu-id="ed12f-181">Nombre de type <see langword="Double" /> ou toute expression numérique valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-181">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="ed12f-182">Si <c>Number</c> contient <see langword="Nothing" />, <see langword="Nothing" /> est retourné.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-182">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ed12f-183">Retournent la partie entière d'un nombre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-183">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ed12f-184">Retournent la partie entière d'un nombre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-184">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ed12f-185">À la fois le `Int` et `Fix` fonctions suppriment la partie fractionnaire des `Number` et retourner la valeur entière résultante.</span><span class="sxs-lookup"><span data-stu-id="ed12f-185">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="ed12f-186">La différence entre `Int` et `Fix` fonctions est que si `Number` est négatif, `Int` retourne le premier entier négatif inférieur ou égal à `Number`, tandis que `Fix` retourne le premier entier négatif supérieur ou égal à `Number`.</span><span class="sxs-lookup"><span data-stu-id="ed12f-186">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="ed12f-187">Par exemple, `Int` convertit-8,4 en -9, et `Fix` convertit-8,4 en -8.</span><span class="sxs-lookup"><span data-stu-id="ed12f-187">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="ed12f-188">`Fix(number)` équivaut à `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="ed12f-188">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ed12f-189">Cet exemple illustre comment la `Int` et `Fix` fonctions retournent la partie entière des nombres.</span><span class="sxs-lookup"><span data-stu-id="ed12f-189">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="ed12f-190">Dans le cas d’un argument est négatif, le `Int` fonction retourne le premier entier négatif inférieur ou égal au nombre ; le `Fix` fonction retourne le premier entier négatif supérieur ou égal au nombre.</span><span class="sxs-lookup"><span data-stu-id="ed12f-190">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="ed12f-191">L’exemple suivant, vous devez spécifier `Option Strict Off` , car les conversions implicites du type `Double` à taper `Integer` ne sont pas autorisés sous `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="ed12f-191">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="ed12f-192">Vous pouvez utiliser la `CInt` fonction pour convertir explicitement les autres types de données en type `Integer` avec `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="ed12f-192">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="ed12f-193">Toutefois, `CInt` est arrondi à l’entier le plus proche au lieu de tronquer la partie fractionnaire des nombres.</span><span class="sxs-lookup"><span data-stu-id="ed12f-193">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="ed12f-194">Exemple :</span><span class="sxs-lookup"><span data-stu-id="ed12f-194">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="ed12f-195">Vous pouvez utiliser la `CInt` fonction sur le résultat d’un appel à `Fix` ou `Int` pour effectuer une conversion explicite en entier sans arrondi.</span><span class="sxs-lookup"><span data-stu-id="ed12f-195">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="ed12f-196">Exemple :</span><span class="sxs-lookup"><span data-stu-id="ed12f-196">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="ed12f-197">Pour plus d’informations sur `CInt`, consultez [les fonctions de Conversion de Type](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="ed12f-197">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ed12f-198">Number n'est pas spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-198">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ed12f-199">Number n'est pas un type numérique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-199">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="ed12f-200">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-200">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="ed12f-201">Liste des types de données (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-201">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="ed12f-202">Liste des mots clés mathématiques</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-202">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="ed12f-203">Fonctions mathématiques (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-203">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="ed12f-204">Résumé de la conversion</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-204">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static short Fix (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Fix(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Fix(short Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ed12f-205">Obligatoire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-205">Required.</span>
          </span>
          <span data-ttu-id="ed12f-206">Nombre de type <see langword="Double" /> ou toute expression numérique valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-206">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="ed12f-207">Si <c>Number</c> contient <see langword="Nothing" />, <see langword="Nothing" /> est retourné.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-207">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ed12f-208">Retournent la partie entière d'un nombre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-208">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ed12f-209">Retournent la partie entière d'un nombre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-209">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ed12f-210">À la fois le `Int` et `Fix` fonctions suppriment la partie fractionnaire des `Number` et retourner la valeur entière résultante.</span><span class="sxs-lookup"><span data-stu-id="ed12f-210">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="ed12f-211">La différence entre `Int` et `Fix` fonctions est que si `Number` est négatif, `Int` retourne le premier entier négatif inférieur ou égal à `Number`, tandis que `Fix` retourne le premier entier négatif supérieur ou égal à `Number`.</span><span class="sxs-lookup"><span data-stu-id="ed12f-211">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="ed12f-212">Par exemple, `Int` convertit-8,4 en -9, et `Fix` convertit-8,4 en -8.</span><span class="sxs-lookup"><span data-stu-id="ed12f-212">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="ed12f-213">`Fix(number)` équivaut à `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="ed12f-213">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ed12f-214">Cet exemple illustre comment la `Int` et `Fix` fonctions retournent la partie entière des nombres.</span><span class="sxs-lookup"><span data-stu-id="ed12f-214">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="ed12f-215">Dans le cas d’un argument est négatif, le `Int` fonction retourne le premier entier négatif inférieur ou égal au nombre ; le `Fix` fonction retourne le premier entier négatif supérieur ou égal au nombre.</span><span class="sxs-lookup"><span data-stu-id="ed12f-215">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="ed12f-216">L’exemple suivant, vous devez spécifier `Option Strict Off` , car les conversions implicites du type `Double` à taper `Integer` ne sont pas autorisés sous `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="ed12f-216">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="ed12f-217">Vous pouvez utiliser la `CInt` fonction pour convertir explicitement les autres types de données en type `Integer` avec `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="ed12f-217">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="ed12f-218">Toutefois, `CInt` est arrondi à l’entier le plus proche au lieu de tronquer la partie fractionnaire des nombres.</span><span class="sxs-lookup"><span data-stu-id="ed12f-218">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="ed12f-219">Exemple :</span><span class="sxs-lookup"><span data-stu-id="ed12f-219">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="ed12f-220">Vous pouvez utiliser la `CInt` fonction sur le résultat d’un appel à `Fix` ou `Int` pour effectuer une conversion explicite en entier sans arrondi.</span><span class="sxs-lookup"><span data-stu-id="ed12f-220">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="ed12f-221">Exemple :</span><span class="sxs-lookup"><span data-stu-id="ed12f-221">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="ed12f-222">Pour plus d’informations sur `CInt`, consultez [les fonctions de Conversion de Type](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="ed12f-222">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ed12f-223">Number n'est pas spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-223">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ed12f-224">Number n'est pas un type numérique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-224">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="ed12f-225">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-225">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="ed12f-226">Liste des types de données (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-226">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="ed12f-227">Liste des mots clés mathématiques</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-227">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="ed12f-228">Fonctions mathématiques (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-228">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="ed12f-229">Résumé de la conversion</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-229">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static int Fix (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Fix(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Fix(int Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ed12f-230">Obligatoire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-230">Required.</span>
          </span>
          <span data-ttu-id="ed12f-231">Nombre de type <see langword="Double" /> ou toute expression numérique valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-231">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="ed12f-232">Si <c>Number</c> contient <see langword="Nothing" />, <see langword="Nothing" /> est retourné.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-232">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ed12f-233">Retournent la partie entière d'un nombre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-233">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ed12f-234">Retournent la partie entière d'un nombre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-234">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ed12f-235">À la fois le `Int` et `Fix` fonctions suppriment la partie fractionnaire des `Number` et retourner la valeur entière résultante.</span><span class="sxs-lookup"><span data-stu-id="ed12f-235">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="ed12f-236">La différence entre `Int` et `Fix` fonctions est que si `Number` est négatif, `Int` retourne le premier entier négatif inférieur ou égal à `Number`, tandis que `Fix` retourne le premier entier négatif supérieur ou égal à `Number`.</span><span class="sxs-lookup"><span data-stu-id="ed12f-236">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="ed12f-237">Par exemple, `Int` convertit-8,4 en -9, et `Fix` convertit-8,4 en -8.</span><span class="sxs-lookup"><span data-stu-id="ed12f-237">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="ed12f-238">`Fix(number)` équivaut à `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="ed12f-238">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ed12f-239">Cet exemple illustre comment la `Int` et `Fix` fonctions retournent la partie entière des nombres.</span><span class="sxs-lookup"><span data-stu-id="ed12f-239">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="ed12f-240">Dans le cas d’un argument est négatif, le `Int` fonction retourne le premier entier négatif inférieur ou égal au nombre ; le `Fix` fonction retourne le premier entier négatif supérieur ou égal au nombre.</span><span class="sxs-lookup"><span data-stu-id="ed12f-240">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="ed12f-241">L’exemple suivant, vous devez spécifier `Option Strict Off` , car les conversions implicites du type `Double` à taper `Integer` ne sont pas autorisés sous `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="ed12f-241">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="ed12f-242">Vous pouvez utiliser la `CInt` fonction pour convertir explicitement les autres types de données en type `Integer` avec `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="ed12f-242">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="ed12f-243">Toutefois, `CInt` est arrondi à l’entier le plus proche au lieu de tronquer la partie fractionnaire des nombres.</span><span class="sxs-lookup"><span data-stu-id="ed12f-243">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="ed12f-244">Exemple :</span><span class="sxs-lookup"><span data-stu-id="ed12f-244">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="ed12f-245">Vous pouvez utiliser la `CInt` fonction sur le résultat d’un appel à `Fix` ou `Int` pour effectuer une conversion explicite en entier sans arrondi.</span><span class="sxs-lookup"><span data-stu-id="ed12f-245">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="ed12f-246">Exemple :</span><span class="sxs-lookup"><span data-stu-id="ed12f-246">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="ed12f-247">Pour plus d’informations sur `CInt`, consultez [les fonctions de Conversion de Type](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="ed12f-247">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ed12f-248">Number n'est pas spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-248">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ed12f-249">Number n'est pas un type numérique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-249">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="ed12f-250">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-250">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="ed12f-251">Liste des types de données (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-251">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="ed12f-252">Liste des mots clés mathématiques</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-252">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="ed12f-253">Fonctions mathématiques (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-253">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="ed12f-254">Résumé de la conversion</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-254">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static long Fix (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Fix(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Fix(long Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ed12f-255">Obligatoire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-255">Required.</span>
          </span>
          <span data-ttu-id="ed12f-256">Nombre de type <see langword="Double" /> ou toute expression numérique valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-256">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="ed12f-257">Si <c>Number</c> contient <see langword="Nothing" />, <see langword="Nothing" /> est retourné.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-257">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ed12f-258">Retournent la partie entière d'un nombre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-258">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ed12f-259">Retournent la partie entière d'un nombre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-259">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ed12f-260">À la fois le `Int` et `Fix` fonctions suppriment la partie fractionnaire des `Number` et retourner la valeur entière résultante.</span><span class="sxs-lookup"><span data-stu-id="ed12f-260">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="ed12f-261">La différence entre `Int` et `Fix` fonctions est que si `Number` est négatif, `Int` retourne le premier entier négatif inférieur ou égal à `Number`, tandis que `Fix` retourne le premier entier négatif supérieur ou égal à `Number`.</span><span class="sxs-lookup"><span data-stu-id="ed12f-261">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="ed12f-262">Par exemple, `Int` convertit-8,4 en -9, et `Fix` convertit-8,4 en -8.</span><span class="sxs-lookup"><span data-stu-id="ed12f-262">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="ed12f-263">`Fix(number)` équivaut à `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="ed12f-263">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ed12f-264">Cet exemple illustre comment la `Int` et `Fix` fonctions retournent la partie entière des nombres.</span><span class="sxs-lookup"><span data-stu-id="ed12f-264">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="ed12f-265">Dans le cas d’un argument est négatif, le `Int` fonction retourne le premier entier négatif inférieur ou égal au nombre ; le `Fix` fonction retourne le premier entier négatif supérieur ou égal au nombre.</span><span class="sxs-lookup"><span data-stu-id="ed12f-265">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="ed12f-266">L’exemple suivant, vous devez spécifier `Option Strict Off` , car les conversions implicites du type `Double` à taper `Integer` ne sont pas autorisés sous `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="ed12f-266">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="ed12f-267">Vous pouvez utiliser la `CInt` fonction pour convertir explicitement les autres types de données en type `Integer` avec `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="ed12f-267">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="ed12f-268">Toutefois, `CInt` est arrondi à l’entier le plus proche au lieu de tronquer la partie fractionnaire des nombres.</span><span class="sxs-lookup"><span data-stu-id="ed12f-268">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="ed12f-269">Exemple :</span><span class="sxs-lookup"><span data-stu-id="ed12f-269">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="ed12f-270">Vous pouvez utiliser la `CInt` fonction sur le résultat d’un appel à `Fix` ou `Int` pour effectuer une conversion explicite en entier sans arrondi.</span><span class="sxs-lookup"><span data-stu-id="ed12f-270">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="ed12f-271">Exemple :</span><span class="sxs-lookup"><span data-stu-id="ed12f-271">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="ed12f-272">Pour plus d’informations sur `CInt`, consultez [les fonctions de Conversion de Type](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="ed12f-272">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ed12f-273">Number n'est pas spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-273">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ed12f-274">Number n'est pas un type numérique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-274">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="ed12f-275">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-275">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="ed12f-276">Liste des types de données (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-276">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="ed12f-277">Liste des mots clés mathématiques</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-277">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="ed12f-278">Fonctions mathématiques (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-278">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="ed12f-279">Résumé de la conversion</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-279">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static object Fix (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Fix(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Fix(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Fix : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ed12f-280">Obligatoire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-280">Required.</span>
          </span>
          <span data-ttu-id="ed12f-281">Nombre de type <see langword="Double" /> ou toute expression numérique valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-281">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="ed12f-282">Si <c>Number</c> contient <see langword="Nothing" />, <see langword="Nothing" /> est retourné.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-282">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ed12f-283">Retournent la partie entière d'un nombre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-283">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ed12f-284">Retournent la partie entière d'un nombre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-284">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ed12f-285">À la fois le `Int` et `Fix` fonctions suppriment la partie fractionnaire des `Number` et retourner la valeur entière résultante.</span><span class="sxs-lookup"><span data-stu-id="ed12f-285">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="ed12f-286">La différence entre `Int` et `Fix` fonctions est que si `Number` est négatif, `Int` retourne le premier entier négatif inférieur ou égal à `Number`, tandis que `Fix` retourne le premier entier négatif supérieur ou égal à `Number`.</span><span class="sxs-lookup"><span data-stu-id="ed12f-286">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="ed12f-287">Par exemple, `Int` convertit-8,4 en -9, et `Fix` convertit-8,4 en -8.</span><span class="sxs-lookup"><span data-stu-id="ed12f-287">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="ed12f-288">`Fix(number)` équivaut à `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="ed12f-288">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ed12f-289">Cet exemple illustre comment la `Int` et `Fix` fonctions retournent la partie entière des nombres.</span><span class="sxs-lookup"><span data-stu-id="ed12f-289">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="ed12f-290">Dans le cas d’un argument est négatif, le `Int` fonction retourne le premier entier négatif inférieur ou égal au nombre ; le `Fix` fonction retourne le premier entier négatif supérieur ou égal au nombre.</span><span class="sxs-lookup"><span data-stu-id="ed12f-290">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="ed12f-291">L’exemple suivant, vous devez spécifier `Option Strict Off` , car les conversions implicites du type `Double` à taper `Integer` ne sont pas autorisés sous `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="ed12f-291">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="ed12f-292">Vous pouvez utiliser la `CInt` fonction pour convertir explicitement les autres types de données en type `Integer` avec `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="ed12f-292">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="ed12f-293">Toutefois, `CInt` est arrondi à l’entier le plus proche au lieu de tronquer la partie fractionnaire des nombres.</span><span class="sxs-lookup"><span data-stu-id="ed12f-293">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="ed12f-294">Exemple :</span><span class="sxs-lookup"><span data-stu-id="ed12f-294">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="ed12f-295">Vous pouvez utiliser la `CInt` fonction sur le résultat d’un appel à `Fix` ou `Int` pour effectuer une conversion explicite en entier sans arrondi.</span><span class="sxs-lookup"><span data-stu-id="ed12f-295">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="ed12f-296">Exemple :</span><span class="sxs-lookup"><span data-stu-id="ed12f-296">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="ed12f-297">Pour plus d’informations sur `CInt`, consultez [les fonctions de Conversion de Type](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="ed12f-297">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ed12f-298">Number n'est pas spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-298">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ed12f-299">Number n'est pas un type numérique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-299">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="ed12f-300">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-300">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="ed12f-301">Liste des types de données (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-301">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="ed12f-302">Liste des mots clés mathématiques</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-302">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="ed12f-303">Fonctions mathématiques (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-303">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="ed12f-304">Résumé de la conversion</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-304">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static float Fix (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Fix(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Fix(float Number);" />
      <MemberSignature Language="F#" Value="static member Fix : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ed12f-305">Obligatoire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-305">Required.</span>
          </span>
          <span data-ttu-id="ed12f-306">Nombre de type <see langword="Double" /> ou toute expression numérique valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-306">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="ed12f-307">Si <c>Number</c> contient <see langword="Nothing" />, <see langword="Nothing" /> est retourné.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-307">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ed12f-308">Retournent la partie entière d'un nombre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-308">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ed12f-309">Retournent la partie entière d'un nombre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-309">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ed12f-310">À la fois le `Int` et `Fix` fonctions suppriment la partie fractionnaire des `Number` et retourner la valeur entière résultante.</span><span class="sxs-lookup"><span data-stu-id="ed12f-310">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="ed12f-311">La différence entre `Int` et `Fix` fonctions est que si `Number` est négatif, `Int` retourne le premier entier négatif inférieur ou égal à `Number`, tandis que `Fix` retourne le premier entier négatif supérieur ou égal à `Number`.</span><span class="sxs-lookup"><span data-stu-id="ed12f-311">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="ed12f-312">Par exemple, `Int` convertit-8,4 en -9, et `Fix` convertit-8,4 en -8.</span><span class="sxs-lookup"><span data-stu-id="ed12f-312">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="ed12f-313">`Fix(number)` équivaut à `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="ed12f-313">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ed12f-314">Cet exemple illustre comment la `Int` et `Fix` fonctions retournent la partie entière des nombres.</span><span class="sxs-lookup"><span data-stu-id="ed12f-314">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="ed12f-315">Dans le cas d’un argument est négatif, le `Int` fonction retourne le premier entier négatif inférieur ou égal au nombre ; le `Fix` fonction retourne le premier entier négatif supérieur ou égal au nombre.</span><span class="sxs-lookup"><span data-stu-id="ed12f-315">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="ed12f-316">L’exemple suivant, vous devez spécifier `Option Strict Off` , car les conversions implicites du type `Double` à taper `Integer` ne sont pas autorisés sous `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="ed12f-316">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="ed12f-317">Vous pouvez utiliser la `CInt` fonction pour convertir explicitement les autres types de données en type `Integer` avec `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="ed12f-317">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="ed12f-318">Toutefois, `CInt` est arrondi à l’entier le plus proche au lieu de tronquer la partie fractionnaire des nombres.</span><span class="sxs-lookup"><span data-stu-id="ed12f-318">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="ed12f-319">Exemple :</span><span class="sxs-lookup"><span data-stu-id="ed12f-319">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="ed12f-320">Vous pouvez utiliser la `CInt` fonction sur le résultat d’un appel à `Fix` ou `Int` pour effectuer une conversion explicite en entier sans arrondi.</span><span class="sxs-lookup"><span data-stu-id="ed12f-320">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="ed12f-321">Exemple :</span><span class="sxs-lookup"><span data-stu-id="ed12f-321">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="ed12f-322">Pour plus d’informations sur `CInt`, consultez [les fonctions de Conversion de Type](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="ed12f-322">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ed12f-323">Number n'est pas spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-323">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ed12f-324">Number n'est pas un type numérique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-324">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="ed12f-325">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-325">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="ed12f-326">Liste des types de données (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-326">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="ed12f-327">Liste des mots clés mathématiques</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-327">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="ed12f-328">Fonctions mathématiques (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-328">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="ed12f-329">Résumé de la conversion</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-329">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Hex">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ed12f-330">Retourne une chaîne représentant la valeur hexadécimale d'un nombre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-330">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ed12f-331">Obligatoire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-331">Required.</span>
          </span>
          <span data-ttu-id="ed12f-332">Toute expression numérique ou expression <see langword="String" /> valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-332">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ed12f-333">Retourne une chaîne représentant la valeur hexadécimale d'un nombre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-333">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ed12f-334">Retourne une chaîne représentant la valeur hexadécimale d'un nombre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-334">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ed12f-335">Si `Number` n’est pas déjà un nombre entier, il est arrondi au nombre entier le plus proche avant d’être évalué.</span><span class="sxs-lookup"><span data-stu-id="ed12f-335">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="ed12f-336">Si `Number` est</span><span class="sxs-lookup"><span data-stu-id="ed12f-336">If `Number` is</span></span>|<span data-ttu-id="ed12f-337">Hex retourne</span><span class="sxs-lookup"><span data-stu-id="ed12f-337">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="ed12f-338">Empty</span><span class="sxs-lookup"><span data-stu-id="ed12f-338">Empty</span></span>|<span data-ttu-id="ed12f-339">zéro (0)</span><span class="sxs-lookup"><span data-stu-id="ed12f-339">Zero (0)</span></span>|  
|<span data-ttu-id="ed12f-340">N’importe quelle valeur numérique</span><span class="sxs-lookup"><span data-stu-id="ed12f-340">Any numeric value</span></span>|<span data-ttu-id="ed12f-341">Seize caractères hexadécimaux</span><span class="sxs-lookup"><span data-stu-id="ed12f-341">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="ed12f-342">Vous pouvez représenter des nombres hexadécimaux directement en faisant précéder les nombres dans la plage correcte avec `&H`.</span><span class="sxs-lookup"><span data-stu-id="ed12f-342">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="ed12f-343">Par exemple, `&H10` représente le 16 décimal en notation hexadécimale.</span><span class="sxs-lookup"><span data-stu-id="ed12f-343">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ed12f-344">Cet exemple utilise le `Hex` fonction pour retourner la valeur hexadécimale d’un nombre.</span><span class="sxs-lookup"><span data-stu-id="ed12f-344">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ed12f-345">
            <paramref name="Number" /> n'est pas spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-345">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ed12f-346">
            <paramref name="Number" /> n'est pas un type numérique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-346">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="ed12f-347">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-347">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="ed12f-348">Comment : convertir des chaînes hexadécimales en nombres</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-348">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(short Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ed12f-349">Obligatoire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-349">Required.</span>
          </span>
          <span data-ttu-id="ed12f-350">Toute expression numérique ou expression <see langword="String" /> valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-350">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ed12f-351">Retourne une chaîne représentant la valeur hexadécimale d'un nombre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-351">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ed12f-352">Retourne une chaîne représentant la valeur hexadécimale d'un nombre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-352">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ed12f-353">Si `Number` n’est pas déjà un nombre entier, il est arrondi au nombre entier le plus proche avant d’être évalué.</span><span class="sxs-lookup"><span data-stu-id="ed12f-353">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="ed12f-354">Si `Number` est</span><span class="sxs-lookup"><span data-stu-id="ed12f-354">If `Number` is</span></span>|<span data-ttu-id="ed12f-355">Hex retourne</span><span class="sxs-lookup"><span data-stu-id="ed12f-355">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="ed12f-356">Empty</span><span class="sxs-lookup"><span data-stu-id="ed12f-356">Empty</span></span>|<span data-ttu-id="ed12f-357">zéro (0)</span><span class="sxs-lookup"><span data-stu-id="ed12f-357">Zero (0)</span></span>|  
|<span data-ttu-id="ed12f-358">N’importe quelle valeur numérique</span><span class="sxs-lookup"><span data-stu-id="ed12f-358">Any numeric value</span></span>|<span data-ttu-id="ed12f-359">Seize caractères hexadécimaux</span><span class="sxs-lookup"><span data-stu-id="ed12f-359">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="ed12f-360">Vous pouvez représenter des nombres hexadécimaux directement en faisant précéder les nombres dans la plage correcte avec `&H`.</span><span class="sxs-lookup"><span data-stu-id="ed12f-360">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="ed12f-361">Par exemple, `&H10` représente le 16 décimal en notation hexadécimale.</span><span class="sxs-lookup"><span data-stu-id="ed12f-361">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ed12f-362">Cet exemple utilise le `Hex` fonction pour retourner la valeur hexadécimale d’un nombre.</span><span class="sxs-lookup"><span data-stu-id="ed12f-362">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ed12f-363">
            <paramref name="Number" /> n'est pas spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-363">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ed12f-364">
            <paramref name="Number" /> n'est pas un type numérique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-364">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="ed12f-365">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-365">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="ed12f-366">Comment : convertir des chaînes hexadécimales en nombres</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-366">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(int Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ed12f-367">Obligatoire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-367">Required.</span>
          </span>
          <span data-ttu-id="ed12f-368">Toute expression numérique ou expression <see langword="String" /> valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-368">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ed12f-369">Retourne une chaîne représentant la valeur hexadécimale d'un nombre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-369">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ed12f-370">Retourne une chaîne représentant la valeur hexadécimale d'un nombre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-370">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ed12f-371">Si `Number` n’est pas déjà un nombre entier, il est arrondi au nombre entier le plus proche avant d’être évalué.</span><span class="sxs-lookup"><span data-stu-id="ed12f-371">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="ed12f-372">Si `Number` est</span><span class="sxs-lookup"><span data-stu-id="ed12f-372">If `Number` is</span></span>|<span data-ttu-id="ed12f-373">Hex retourne</span><span class="sxs-lookup"><span data-stu-id="ed12f-373">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="ed12f-374">Empty</span><span class="sxs-lookup"><span data-stu-id="ed12f-374">Empty</span></span>|<span data-ttu-id="ed12f-375">zéro (0)</span><span class="sxs-lookup"><span data-stu-id="ed12f-375">Zero (0)</span></span>|  
|<span data-ttu-id="ed12f-376">N’importe quelle valeur numérique</span><span class="sxs-lookup"><span data-stu-id="ed12f-376">Any numeric value</span></span>|<span data-ttu-id="ed12f-377">Seize caractères hexadécimaux</span><span class="sxs-lookup"><span data-stu-id="ed12f-377">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="ed12f-378">Vous pouvez représenter des nombres hexadécimaux directement en faisant précéder les nombres dans la plage correcte avec `&H`.</span><span class="sxs-lookup"><span data-stu-id="ed12f-378">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="ed12f-379">Par exemple, `&H10` représente le 16 décimal en notation hexadécimale.</span><span class="sxs-lookup"><span data-stu-id="ed12f-379">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ed12f-380">Cet exemple utilise le `Hex` fonction pour retourner la valeur hexadécimale d’un nombre.</span><span class="sxs-lookup"><span data-stu-id="ed12f-380">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ed12f-381">
            <paramref name="Number" /> n'est pas spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-381">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ed12f-382">
            <paramref name="Number" /> n'est pas un type numérique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-382">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="ed12f-383">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-383">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="ed12f-384">Comment : convertir des chaînes hexadécimales en nombres</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-384">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(long Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ed12f-385">Obligatoire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-385">Required.</span>
          </span>
          <span data-ttu-id="ed12f-386">Toute expression numérique ou expression <see langword="String" /> valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-386">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ed12f-387">Retourne une chaîne représentant la valeur hexadécimale d'un nombre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-387">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ed12f-388">Retourne une chaîne représentant la valeur hexadécimale d'un nombre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-388">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ed12f-389">Si `Number` n’est pas déjà un nombre entier, il est arrondi au nombre entier le plus proche avant d’être évalué.</span><span class="sxs-lookup"><span data-stu-id="ed12f-389">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="ed12f-390">Si `Number` est</span><span class="sxs-lookup"><span data-stu-id="ed12f-390">If `Number` is</span></span>|<span data-ttu-id="ed12f-391">Hex retourne</span><span class="sxs-lookup"><span data-stu-id="ed12f-391">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="ed12f-392">Empty</span><span class="sxs-lookup"><span data-stu-id="ed12f-392">Empty</span></span>|<span data-ttu-id="ed12f-393">zéro (0)</span><span class="sxs-lookup"><span data-stu-id="ed12f-393">Zero (0)</span></span>|  
|<span data-ttu-id="ed12f-394">N’importe quelle valeur numérique</span><span class="sxs-lookup"><span data-stu-id="ed12f-394">Any numeric value</span></span>|<span data-ttu-id="ed12f-395">Seize caractères hexadécimaux</span><span class="sxs-lookup"><span data-stu-id="ed12f-395">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="ed12f-396">Vous pouvez représenter des nombres hexadécimaux directement en faisant précéder les nombres dans la plage correcte avec `&H`.</span><span class="sxs-lookup"><span data-stu-id="ed12f-396">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="ed12f-397">Par exemple, `&H10` représente le 16 décimal en notation hexadécimale.</span><span class="sxs-lookup"><span data-stu-id="ed12f-397">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ed12f-398">Cet exemple utilise le `Hex` fonction pour retourner la valeur hexadécimale d’un nombre.</span><span class="sxs-lookup"><span data-stu-id="ed12f-398">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ed12f-399">
            <paramref name="Number" /> n'est pas spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-399">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ed12f-400">
            <paramref name="Number" /> n'est pas un type numérique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-400">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="ed12f-401">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-401">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="ed12f-402">Comment : convertir des chaînes hexadécimales en nombres</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-402">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Hex : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ed12f-403">Obligatoire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-403">Required.</span>
          </span>
          <span data-ttu-id="ed12f-404">Toute expression numérique ou expression <see langword="String" /> valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-404">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ed12f-405">Retourne une chaîne représentant la valeur hexadécimale d'un nombre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-405">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ed12f-406">Retourne une chaîne représentant la valeur hexadécimale d'un nombre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-406">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ed12f-407">Si `Number` n’est pas déjà un nombre entier, il est arrondi au nombre entier le plus proche avant d’être évalué.</span><span class="sxs-lookup"><span data-stu-id="ed12f-407">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="ed12f-408">Si `Number` est</span><span class="sxs-lookup"><span data-stu-id="ed12f-408">If `Number` is</span></span>|<span data-ttu-id="ed12f-409">Hex retourne</span><span class="sxs-lookup"><span data-stu-id="ed12f-409">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="ed12f-410">Empty</span><span class="sxs-lookup"><span data-stu-id="ed12f-410">Empty</span></span>|<span data-ttu-id="ed12f-411">zéro (0)</span><span class="sxs-lookup"><span data-stu-id="ed12f-411">Zero (0)</span></span>|  
|<span data-ttu-id="ed12f-412">N’importe quelle valeur numérique</span><span class="sxs-lookup"><span data-stu-id="ed12f-412">Any numeric value</span></span>|<span data-ttu-id="ed12f-413">Seize caractères hexadécimaux</span><span class="sxs-lookup"><span data-stu-id="ed12f-413">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="ed12f-414">Vous pouvez représenter des nombres hexadécimaux directement en faisant précéder les nombres dans la plage correcte avec `&H`.</span><span class="sxs-lookup"><span data-stu-id="ed12f-414">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="ed12f-415">Par exemple, `&H10` représente le 16 décimal en notation hexadécimale.</span><span class="sxs-lookup"><span data-stu-id="ed12f-415">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ed12f-416">Cet exemple utilise le `Hex` fonction pour retourner la valeur hexadécimale d’un nombre.</span><span class="sxs-lookup"><span data-stu-id="ed12f-416">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ed12f-417">
            <paramref name="Number" /> n'est pas spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-417">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ed12f-418">
            <paramref name="Number" /> n'est pas un type numérique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-418">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="ed12f-419">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-419">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="ed12f-420">Comment : convertir des chaînes hexadécimales en nombres</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-420">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ed12f-421">Obligatoire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-421">Required.</span>
          </span>
          <span data-ttu-id="ed12f-422">Toute expression numérique ou expression <see langword="String" /> valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-422">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ed12f-423">Retourne une chaîne représentant la valeur hexadécimale d'un nombre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-423">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ed12f-424">Retourne une chaîne représentant la valeur hexadécimale d'un nombre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-424">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ed12f-425">Si `Number` n’est pas déjà un nombre entier, il est arrondi au nombre entier le plus proche avant d’être évalué.</span><span class="sxs-lookup"><span data-stu-id="ed12f-425">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="ed12f-426">Si `Number` est</span><span class="sxs-lookup"><span data-stu-id="ed12f-426">If `Number` is</span></span>|<span data-ttu-id="ed12f-427">Hex retourne</span><span class="sxs-lookup"><span data-stu-id="ed12f-427">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="ed12f-428">Empty</span><span class="sxs-lookup"><span data-stu-id="ed12f-428">Empty</span></span>|<span data-ttu-id="ed12f-429">zéro (0)</span><span class="sxs-lookup"><span data-stu-id="ed12f-429">Zero (0)</span></span>|  
|<span data-ttu-id="ed12f-430">N’importe quelle valeur numérique</span><span class="sxs-lookup"><span data-stu-id="ed12f-430">Any numeric value</span></span>|<span data-ttu-id="ed12f-431">Seize caractères hexadécimaux</span><span class="sxs-lookup"><span data-stu-id="ed12f-431">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="ed12f-432">Vous pouvez représenter des nombres hexadécimaux directement en faisant précéder les nombres dans la plage correcte avec `&H`.</span><span class="sxs-lookup"><span data-stu-id="ed12f-432">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="ed12f-433">Par exemple, `&H10` représente le 16 décimal en notation hexadécimale.</span><span class="sxs-lookup"><span data-stu-id="ed12f-433">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ed12f-434">Cet exemple utilise le `Hex` fonction pour retourner la valeur hexadécimale d’un nombre.</span><span class="sxs-lookup"><span data-stu-id="ed12f-434">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ed12f-435">
            <paramref name="Number" /> n'est pas spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-435">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ed12f-436">
            <paramref name="Number" /> n'est pas un type numérique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-436">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="ed12f-437">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-437">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="ed12f-438">Comment : convertir des chaînes hexadécimales en nombres</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-438">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ed12f-439">Obligatoire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-439">Required.</span>
          </span>
          <span data-ttu-id="ed12f-440">Toute expression numérique ou expression <see langword="String" /> valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-440">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ed12f-441">Retourne une chaîne représentant la valeur hexadécimale d'un nombre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-441">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ed12f-442">Retourne une chaîne représentant la valeur hexadécimale d'un nombre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-442">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ed12f-443">Si `Number` n’est pas déjà un nombre entier, il est arrondi au nombre entier le plus proche avant d’être évalué.</span><span class="sxs-lookup"><span data-stu-id="ed12f-443">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="ed12f-444">Si `Number` est</span><span class="sxs-lookup"><span data-stu-id="ed12f-444">If `Number` is</span></span>|<span data-ttu-id="ed12f-445">Hex retourne</span><span class="sxs-lookup"><span data-stu-id="ed12f-445">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="ed12f-446">Empty</span><span class="sxs-lookup"><span data-stu-id="ed12f-446">Empty</span></span>|<span data-ttu-id="ed12f-447">zéro (0)</span><span class="sxs-lookup"><span data-stu-id="ed12f-447">Zero (0)</span></span>|  
|<span data-ttu-id="ed12f-448">N’importe quelle valeur numérique</span><span class="sxs-lookup"><span data-stu-id="ed12f-448">Any numeric value</span></span>|<span data-ttu-id="ed12f-449">Seize caractères hexadécimaux</span><span class="sxs-lookup"><span data-stu-id="ed12f-449">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="ed12f-450">Vous pouvez représenter des nombres hexadécimaux directement en faisant précéder les nombres dans la plage correcte avec `&H`.</span><span class="sxs-lookup"><span data-stu-id="ed12f-450">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="ed12f-451">Par exemple, `&H10` représente le 16 décimal en notation hexadécimale.</span><span class="sxs-lookup"><span data-stu-id="ed12f-451">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ed12f-452">Cet exemple utilise le `Hex` fonction pour retourner la valeur hexadécimale d’un nombre.</span><span class="sxs-lookup"><span data-stu-id="ed12f-452">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ed12f-453">
            <paramref name="Number" /> n'est pas spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-453">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ed12f-454">
            <paramref name="Number" /> n'est pas un type numérique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-454">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="ed12f-455">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-455">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="ed12f-456">Comment : convertir des chaînes hexadécimales en nombres</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-456">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ed12f-457">Obligatoire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-457">Required.</span>
          </span>
          <span data-ttu-id="ed12f-458">Toute expression numérique ou expression <see langword="String" /> valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-458">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ed12f-459">Retourne une chaîne représentant la valeur hexadécimale d'un nombre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-459">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ed12f-460">Retourne une chaîne représentant la valeur hexadécimale d'un nombre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-460">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ed12f-461">Si `Number` n’est pas déjà un nombre entier, il est arrondi au nombre entier le plus proche avant d’être évalué.</span><span class="sxs-lookup"><span data-stu-id="ed12f-461">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="ed12f-462">Si `Number` est</span><span class="sxs-lookup"><span data-stu-id="ed12f-462">If `Number` is</span></span>|<span data-ttu-id="ed12f-463">Hex retourne</span><span class="sxs-lookup"><span data-stu-id="ed12f-463">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="ed12f-464">Empty</span><span class="sxs-lookup"><span data-stu-id="ed12f-464">Empty</span></span>|<span data-ttu-id="ed12f-465">zéro (0)</span><span class="sxs-lookup"><span data-stu-id="ed12f-465">Zero (0)</span></span>|  
|<span data-ttu-id="ed12f-466">N’importe quelle valeur numérique</span><span class="sxs-lookup"><span data-stu-id="ed12f-466">Any numeric value</span></span>|<span data-ttu-id="ed12f-467">Seize caractères hexadécimaux</span><span class="sxs-lookup"><span data-stu-id="ed12f-467">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="ed12f-468">Vous pouvez représenter des nombres hexadécimaux directement en faisant précéder les nombres dans la plage correcte avec `&H`.</span><span class="sxs-lookup"><span data-stu-id="ed12f-468">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="ed12f-469">Par exemple, `&H10` représente le 16 décimal en notation hexadécimale.</span><span class="sxs-lookup"><span data-stu-id="ed12f-469">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ed12f-470">Cet exemple utilise le `Hex` fonction pour retourner la valeur hexadécimale d’un nombre.</span><span class="sxs-lookup"><span data-stu-id="ed12f-470">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ed12f-471">
            <paramref name="Number" /> n'est pas spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-471">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ed12f-472">
            <paramref name="Number" /> n'est pas un type numérique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-472">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="ed12f-473">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-473">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="ed12f-474">Comment : convertir des chaînes hexadécimales en nombres</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-474">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ed12f-475">Obligatoire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-475">Required.</span>
          </span>
          <span data-ttu-id="ed12f-476">Toute expression numérique ou expression <see langword="String" /> valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-476">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ed12f-477">Retourne une chaîne représentant la valeur hexadécimale d'un nombre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-477">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ed12f-478">Retourne une chaîne représentant la valeur hexadécimale d'un nombre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-478">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ed12f-479">Si `Number` n’est pas déjà un nombre entier, il est arrondi au nombre entier le plus proche avant d’être évalué.</span><span class="sxs-lookup"><span data-stu-id="ed12f-479">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="ed12f-480">Si `Number` est</span><span class="sxs-lookup"><span data-stu-id="ed12f-480">If `Number` is</span></span>|<span data-ttu-id="ed12f-481">Hex retourne</span><span class="sxs-lookup"><span data-stu-id="ed12f-481">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="ed12f-482">Empty</span><span class="sxs-lookup"><span data-stu-id="ed12f-482">Empty</span></span>|<span data-ttu-id="ed12f-483">zéro (0)</span><span class="sxs-lookup"><span data-stu-id="ed12f-483">Zero (0)</span></span>|  
|<span data-ttu-id="ed12f-484">N’importe quelle valeur numérique</span><span class="sxs-lookup"><span data-stu-id="ed12f-484">Any numeric value</span></span>|<span data-ttu-id="ed12f-485">Seize caractères hexadécimaux</span><span class="sxs-lookup"><span data-stu-id="ed12f-485">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="ed12f-486">Vous pouvez représenter des nombres hexadécimaux directement en faisant précéder les nombres dans la plage correcte avec `&H`.</span><span class="sxs-lookup"><span data-stu-id="ed12f-486">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="ed12f-487">Par exemple, `&H10` représente le 16 décimal en notation hexadécimale.</span><span class="sxs-lookup"><span data-stu-id="ed12f-487">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ed12f-488">Cet exemple utilise le `Hex` fonction pour retourner la valeur hexadécimale d’un nombre.</span><span class="sxs-lookup"><span data-stu-id="ed12f-488">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ed12f-489">
            <paramref name="Number" /> n'est pas spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-489">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ed12f-490">
            <paramref name="Number" /> n'est pas un type numérique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-490">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="ed12f-491">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-491">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="ed12f-492">Comment : convertir des chaînes hexadécimales en nombres</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-492">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Int">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ed12f-493">Retournent la partie entière d'un nombre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-493">Return the integer portion of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static decimal Int (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Int(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Int(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Int : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ed12f-494">Obligatoire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-494">Required.</span>
          </span>
          <span data-ttu-id="ed12f-495">Nombre de type <see langword="Double" /> ou toute expression numérique valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-495">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="ed12f-496">Si <c>Number</c> contient <see langword="Nothing" />, <see langword="Nothing" /> est retourné.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-496">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ed12f-497">Retournent la partie entière d'un nombre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-497">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ed12f-498">Retournent la partie entière d'un nombre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-498">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ed12f-499">À la fois le `Int` et `Fix` fonctions suppriment la partie fractionnaire des `Number` et retourner la valeur entière résultante.</span><span class="sxs-lookup"><span data-stu-id="ed12f-499">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="ed12f-500">La différence entre `Int` et `Fix` fonctions est que si `Number` est négatif, `Int` retourne le premier entier négatif inférieur ou égal à `Number`, tandis que `Fix` retourne le premier entier négatif supérieur ou égal à `Number`.</span><span class="sxs-lookup"><span data-stu-id="ed12f-500">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="ed12f-501">Par exemple, `Int` convertit-8,4 en -9, et `Fix` convertit-8,4 en -8.</span><span class="sxs-lookup"><span data-stu-id="ed12f-501">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="ed12f-502">`Fix(number)` équivaut à `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="ed12f-502">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ed12f-503">Cet exemple illustre comment la `Int` et `Fix` fonctions retournent la partie entière des nombres.</span><span class="sxs-lookup"><span data-stu-id="ed12f-503">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="ed12f-504">Dans le cas d’un argument est négatif, le `Int` fonction retourne le premier entier négatif inférieur ou égal au nombre ; le `Fix` fonction retourne le premier entier négatif supérieur ou égal au nombre.</span><span class="sxs-lookup"><span data-stu-id="ed12f-504">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="ed12f-505">L’exemple suivant, vous devez spécifier `Option Strict Off` , car les conversions implicites du type `Double` à taper `Integer` ne sont pas autorisés sous `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="ed12f-505">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="ed12f-506">Vous pouvez utiliser la `CInt` fonction pour convertir explicitement les autres types de données en type `Integer` avec `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="ed12f-506">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="ed12f-507">Toutefois, `CInt` est arrondi à l’entier le plus proche au lieu de tronquer la partie fractionnaire des nombres.</span><span class="sxs-lookup"><span data-stu-id="ed12f-507">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="ed12f-508">Exemple :</span><span class="sxs-lookup"><span data-stu-id="ed12f-508">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="ed12f-509">Vous pouvez utiliser la `CInt` fonction sur le résultat d’un appel à `Fix` ou `Int` pour effectuer une conversion explicite en entier sans arrondi.</span><span class="sxs-lookup"><span data-stu-id="ed12f-509">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="ed12f-510">Exemple :</span><span class="sxs-lookup"><span data-stu-id="ed12f-510">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="ed12f-511">Pour plus d’informations sur `CInt`, consultez [les fonctions de Conversion de Type](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="ed12f-511">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ed12f-512">Number n'est pas spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-512">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ed12f-513">Number n'est pas un type numérique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-513">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="ed12f-514">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-514">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="ed12f-515">Liste des types de données (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-515">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="ed12f-516">Liste des mots clés mathématiques</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-516">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="ed12f-517">Fonctions mathématiques (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-517">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="ed12f-518">Résumé de la conversion</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-518">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static double Int (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Int(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Int(double Number);" />
      <MemberSignature Language="F#" Value="static member Int : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ed12f-519">Obligatoire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-519">Required.</span>
          </span>
          <span data-ttu-id="ed12f-520">Nombre de type <see langword="Double" /> ou toute expression numérique valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-520">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="ed12f-521">Si <c>Number</c> contient <see langword="Nothing" />, <see langword="Nothing" /> est retourné.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-521">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ed12f-522">Retournent la partie entière d'un nombre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-522">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ed12f-523">Retournent la partie entière d'un nombre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-523">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ed12f-524">À la fois le `Int` et `Fix` fonctions suppriment la partie fractionnaire des `Number` et retourner la valeur entière résultante.</span><span class="sxs-lookup"><span data-stu-id="ed12f-524">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="ed12f-525">La différence entre `Int` et `Fix` fonctions est que si `Number` est négatif, `Int` retourne le premier entier négatif inférieur ou égal à `Number`, tandis que `Fix` retourne le premier entier négatif supérieur ou égal à `Number`.</span><span class="sxs-lookup"><span data-stu-id="ed12f-525">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="ed12f-526">Par exemple, `Int` convertit-8,4 en -9, et `Fix` convertit-8,4 en -8.</span><span class="sxs-lookup"><span data-stu-id="ed12f-526">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="ed12f-527">`Fix(number)` équivaut à `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="ed12f-527">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ed12f-528">Cet exemple illustre comment la `Int` et `Fix` fonctions retournent la partie entière des nombres.</span><span class="sxs-lookup"><span data-stu-id="ed12f-528">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="ed12f-529">Dans le cas d’un argument est négatif, le `Int` fonction retourne le premier entier négatif inférieur ou égal au nombre ; le `Fix` fonction retourne le premier entier négatif supérieur ou égal au nombre.</span><span class="sxs-lookup"><span data-stu-id="ed12f-529">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="ed12f-530">L’exemple suivant, vous devez spécifier `Option Strict Off` , car les conversions implicites du type `Double` à taper `Integer` ne sont pas autorisés sous `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="ed12f-530">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="ed12f-531">Vous pouvez utiliser la `CInt` fonction pour convertir explicitement les autres types de données en type `Integer` avec `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="ed12f-531">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="ed12f-532">Toutefois, `CInt` est arrondi à l’entier le plus proche au lieu de tronquer la partie fractionnaire des nombres.</span><span class="sxs-lookup"><span data-stu-id="ed12f-532">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="ed12f-533">Exemple :</span><span class="sxs-lookup"><span data-stu-id="ed12f-533">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="ed12f-534">Vous pouvez utiliser la `CInt` fonction sur le résultat d’un appel à `Fix` ou `Int` pour effectuer une conversion explicite en entier sans arrondi.</span><span class="sxs-lookup"><span data-stu-id="ed12f-534">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="ed12f-535">Exemple :</span><span class="sxs-lookup"><span data-stu-id="ed12f-535">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="ed12f-536">Pour plus d’informations sur `CInt`, consultez [les fonctions de Conversion de Type](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="ed12f-536">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ed12f-537">Number n'est pas spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-537">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ed12f-538">Number n'est pas un type numérique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-538">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="ed12f-539">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-539">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="ed12f-540">Liste des types de données (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-540">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="ed12f-541">Liste des mots clés mathématiques</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-541">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="ed12f-542">Fonctions mathématiques (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-542">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="ed12f-543">Résumé de la conversion</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-543">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static short Int (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Int(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Int(short Number);" />
      <MemberSignature Language="F#" Value="static member Int : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ed12f-544">Obligatoire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-544">Required.</span>
          </span>
          <span data-ttu-id="ed12f-545">Nombre de type <see langword="Double" /> ou toute expression numérique valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-545">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="ed12f-546">Si <c>Number</c> contient <see langword="Nothing" />, <see langword="Nothing" /> est retourné.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-546">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ed12f-547">Retournent la partie entière d'un nombre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-547">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ed12f-548">Retournent la partie entière d'un nombre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-548">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ed12f-549">À la fois le `Int` et `Fix` fonctions suppriment la partie fractionnaire des `Number` et retourner la valeur entière résultante.</span><span class="sxs-lookup"><span data-stu-id="ed12f-549">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="ed12f-550">La différence entre `Int` et `Fix` fonctions est que si `Number` est négatif, `Int` retourne le premier entier négatif inférieur ou égal à `Number`, tandis que `Fix` retourne le premier entier négatif supérieur ou égal à `Number`.</span><span class="sxs-lookup"><span data-stu-id="ed12f-550">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="ed12f-551">Par exemple, `Int` convertit-8,4 en -9, et `Fix` convertit-8,4 en -8.</span><span class="sxs-lookup"><span data-stu-id="ed12f-551">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="ed12f-552">`Fix(number)` équivaut à `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="ed12f-552">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ed12f-553">Cet exemple illustre comment la `Int` et `Fix` fonctions retournent la partie entière des nombres.</span><span class="sxs-lookup"><span data-stu-id="ed12f-553">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="ed12f-554">Dans le cas d’un argument est négatif, le `Int` fonction retourne le premier entier négatif inférieur ou égal au nombre ; le `Fix` fonction retourne le premier entier négatif supérieur ou égal au nombre.</span><span class="sxs-lookup"><span data-stu-id="ed12f-554">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="ed12f-555">L’exemple suivant, vous devez spécifier `Option Strict Off` , car les conversions implicites du type `Double` à taper `Integer` ne sont pas autorisés sous `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="ed12f-555">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="ed12f-556">Vous pouvez utiliser la `CInt` fonction pour convertir explicitement les autres types de données en type `Integer` avec `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="ed12f-556">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="ed12f-557">Toutefois, `CInt` est arrondi à l’entier le plus proche au lieu de tronquer la partie fractionnaire des nombres.</span><span class="sxs-lookup"><span data-stu-id="ed12f-557">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="ed12f-558">Exemple :</span><span class="sxs-lookup"><span data-stu-id="ed12f-558">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="ed12f-559">Vous pouvez utiliser la `CInt` fonction sur le résultat d’un appel à `Fix` ou `Int` pour effectuer une conversion explicite en entier sans arrondi.</span><span class="sxs-lookup"><span data-stu-id="ed12f-559">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="ed12f-560">Exemple :</span><span class="sxs-lookup"><span data-stu-id="ed12f-560">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="ed12f-561">Pour plus d’informations sur `CInt`, consultez [les fonctions de Conversion de Type](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="ed12f-561">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ed12f-562">Number n'est pas spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-562">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ed12f-563">Number n'est pas un type numérique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-563">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="ed12f-564">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-564">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="ed12f-565">Liste des types de données (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-565">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="ed12f-566">Liste des mots clés mathématiques</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-566">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="ed12f-567">Fonctions mathématiques (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-567">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="ed12f-568">Résumé de la conversion</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-568">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static int Int (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Int(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Int(int Number);" />
      <MemberSignature Language="F#" Value="static member Int : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ed12f-569">Obligatoire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-569">Required.</span>
          </span>
          <span data-ttu-id="ed12f-570">Nombre de type <see langword="Double" /> ou toute expression numérique valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-570">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="ed12f-571">Si <c>Number</c> contient <see langword="Nothing" />, <see langword="Nothing" /> est retourné.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-571">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ed12f-572">Retournent la partie entière d'un nombre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-572">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ed12f-573">Retournent la partie entière d'un nombre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-573">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ed12f-574">À la fois le `Int` et `Fix` fonctions suppriment la partie fractionnaire des `Number` et retourner la valeur entière résultante.</span><span class="sxs-lookup"><span data-stu-id="ed12f-574">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="ed12f-575">La différence entre `Int` et `Fix` fonctions est que si `Number` est négatif, `Int` retourne le premier entier négatif inférieur ou égal à `Number`, tandis que `Fix` retourne le premier entier négatif supérieur ou égal à `Number`.</span><span class="sxs-lookup"><span data-stu-id="ed12f-575">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="ed12f-576">Par exemple, `Int` convertit-8,4 en -9, et `Fix` convertit-8,4 en -8.</span><span class="sxs-lookup"><span data-stu-id="ed12f-576">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="ed12f-577">`Fix(number)` équivaut à `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="ed12f-577">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ed12f-578">Cet exemple illustre comment la `Int` et `Fix` fonctions retournent la partie entière des nombres.</span><span class="sxs-lookup"><span data-stu-id="ed12f-578">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="ed12f-579">Dans le cas d’un argument est négatif, le `Int` fonction retourne le premier entier négatif inférieur ou égal au nombre ; le `Fix` fonction retourne le premier entier négatif supérieur ou égal au nombre.</span><span class="sxs-lookup"><span data-stu-id="ed12f-579">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="ed12f-580">L’exemple suivant, vous devez spécifier `Option Strict Off` , car les conversions implicites du type `Double` à taper `Integer` ne sont pas autorisés sous `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="ed12f-580">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="ed12f-581">Vous pouvez utiliser la `CInt` fonction pour convertir explicitement les autres types de données en type `Integer` avec `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="ed12f-581">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="ed12f-582">Toutefois, `CInt` est arrondi à l’entier le plus proche au lieu de tronquer la partie fractionnaire des nombres.</span><span class="sxs-lookup"><span data-stu-id="ed12f-582">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="ed12f-583">Exemple :</span><span class="sxs-lookup"><span data-stu-id="ed12f-583">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="ed12f-584">Vous pouvez utiliser la `CInt` fonction sur le résultat d’un appel à `Fix` ou `Int` pour effectuer une conversion explicite en entier sans arrondi.</span><span class="sxs-lookup"><span data-stu-id="ed12f-584">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="ed12f-585">Exemple :</span><span class="sxs-lookup"><span data-stu-id="ed12f-585">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="ed12f-586">Pour plus d’informations sur `CInt`, consultez [les fonctions de Conversion de Type](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="ed12f-586">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ed12f-587">Number n'est pas spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-587">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ed12f-588">Number n'est pas un type numérique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-588">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="ed12f-589">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-589">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="ed12f-590">Liste des types de données (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-590">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="ed12f-591">Liste des mots clés mathématiques</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-591">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="ed12f-592">Fonctions mathématiques (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-592">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="ed12f-593">Résumé de la conversion</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-593">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static long Int (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Int(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Int(long Number);" />
      <MemberSignature Language="F#" Value="static member Int : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ed12f-594">Obligatoire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-594">Required.</span>
          </span>
          <span data-ttu-id="ed12f-595">Nombre de type <see langword="Double" /> ou toute expression numérique valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-595">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="ed12f-596">Si <c>Number</c> contient <see langword="Nothing" />, <see langword="Nothing" /> est retourné.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-596">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ed12f-597">Retournent la partie entière d'un nombre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-597">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ed12f-598">Retournent la partie entière d'un nombre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-598">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ed12f-599">À la fois le `Int` et `Fix` fonctions suppriment la partie fractionnaire des `Number` et retourner la valeur entière résultante.</span><span class="sxs-lookup"><span data-stu-id="ed12f-599">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="ed12f-600">La différence entre `Int` et `Fix` fonctions est que si `Number` est négatif, `Int` retourne le premier entier négatif inférieur ou égal à `Number`, tandis que `Fix` retourne le premier entier négatif supérieur ou égal à `Number`.</span><span class="sxs-lookup"><span data-stu-id="ed12f-600">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="ed12f-601">Par exemple, `Int` convertit-8,4 en -9, et `Fix` convertit-8,4 en -8.</span><span class="sxs-lookup"><span data-stu-id="ed12f-601">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="ed12f-602">`Fix(number)` équivaut à `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="ed12f-602">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ed12f-603">Cet exemple illustre comment la `Int` et `Fix` fonctions retournent la partie entière des nombres.</span><span class="sxs-lookup"><span data-stu-id="ed12f-603">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="ed12f-604">Dans le cas d’un argument est négatif, le `Int` fonction retourne le premier entier négatif inférieur ou égal au nombre ; le `Fix` fonction retourne le premier entier négatif supérieur ou égal au nombre.</span><span class="sxs-lookup"><span data-stu-id="ed12f-604">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="ed12f-605">L’exemple suivant, vous devez spécifier `Option Strict Off` , car les conversions implicites du type `Double` à taper `Integer` ne sont pas autorisés sous `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="ed12f-605">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="ed12f-606">Vous pouvez utiliser la `CInt` fonction pour convertir explicitement les autres types de données en type `Integer` avec `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="ed12f-606">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="ed12f-607">Toutefois, `CInt` est arrondi à l’entier le plus proche au lieu de tronquer la partie fractionnaire des nombres.</span><span class="sxs-lookup"><span data-stu-id="ed12f-607">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="ed12f-608">Exemple :</span><span class="sxs-lookup"><span data-stu-id="ed12f-608">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="ed12f-609">Vous pouvez utiliser la `CInt` fonction sur le résultat d’un appel à `Fix` ou `Int` pour effectuer une conversion explicite en entier sans arrondi.</span><span class="sxs-lookup"><span data-stu-id="ed12f-609">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="ed12f-610">Exemple :</span><span class="sxs-lookup"><span data-stu-id="ed12f-610">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="ed12f-611">Pour plus d’informations sur `CInt`, consultez [les fonctions de Conversion de Type](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="ed12f-611">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ed12f-612">Number n'est pas spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-612">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ed12f-613">Number n'est pas un type numérique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-613">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="ed12f-614">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-614">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="ed12f-615">Liste des types de données (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-615">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="ed12f-616">Liste des mots clés mathématiques</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-616">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="ed12f-617">Fonctions mathématiques (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-617">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="ed12f-618">Résumé de la conversion</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-618">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static object Int (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Int(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Int(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Int : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ed12f-619">Obligatoire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-619">Required.</span>
          </span>
          <span data-ttu-id="ed12f-620">Nombre de type <see langword="Double" /> ou toute expression numérique valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-620">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="ed12f-621">Si <c>Number</c> contient <see langword="Nothing" />, <see langword="Nothing" /> est retourné.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-621">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ed12f-622">Retournent la partie entière d'un nombre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-622">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ed12f-623">Retournent la partie entière d'un nombre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-623">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ed12f-624">À la fois le `Int` et `Fix` fonctions suppriment la partie fractionnaire des `Number` et retourner la valeur entière résultante.</span><span class="sxs-lookup"><span data-stu-id="ed12f-624">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="ed12f-625">La différence entre `Int` et `Fix` fonctions est que si `Number` est négatif, `Int` retourne le premier entier négatif inférieur ou égal à `Number`, tandis que `Fix` retourne le premier entier négatif supérieur ou égal à `Number`.</span><span class="sxs-lookup"><span data-stu-id="ed12f-625">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="ed12f-626">Par exemple, `Int` convertit-8,4 en -9, et `Fix` convertit-8,4 en -8.</span><span class="sxs-lookup"><span data-stu-id="ed12f-626">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="ed12f-627">`Fix(number)` équivaut à `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="ed12f-627">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ed12f-628">Cet exemple illustre comment la `Int` et `Fix` fonctions retournent la partie entière des nombres.</span><span class="sxs-lookup"><span data-stu-id="ed12f-628">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="ed12f-629">Dans le cas d’un argument est négatif, le `Int` fonction retourne le premier entier négatif inférieur ou égal au nombre ; le `Fix` fonction retourne le premier entier négatif supérieur ou égal au nombre.</span><span class="sxs-lookup"><span data-stu-id="ed12f-629">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="ed12f-630">L’exemple suivant, vous devez spécifier `Option Strict Off` , car les conversions implicites du type `Double` à taper `Integer` ne sont pas autorisés sous `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="ed12f-630">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="ed12f-631">Vous pouvez utiliser la `CInt` fonction pour convertir explicitement les autres types de données en type `Integer` avec `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="ed12f-631">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="ed12f-632">Toutefois, `CInt` est arrondi à l’entier le plus proche au lieu de tronquer la partie fractionnaire des nombres.</span><span class="sxs-lookup"><span data-stu-id="ed12f-632">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="ed12f-633">Exemple :</span><span class="sxs-lookup"><span data-stu-id="ed12f-633">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="ed12f-634">Vous pouvez utiliser la `CInt` fonction sur le résultat d’un appel à `Fix` ou `Int` pour effectuer une conversion explicite en entier sans arrondi.</span><span class="sxs-lookup"><span data-stu-id="ed12f-634">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="ed12f-635">Exemple :</span><span class="sxs-lookup"><span data-stu-id="ed12f-635">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="ed12f-636">Pour plus d’informations sur `CInt`, consultez [les fonctions de Conversion de Type](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="ed12f-636">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ed12f-637">Number n'est pas spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-637">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ed12f-638">Number n'est pas un type numérique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-638">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="ed12f-639">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-639">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="ed12f-640">Liste des types de données (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-640">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="ed12f-641">Liste des mots clés mathématiques</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-641">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="ed12f-642">Fonctions mathématiques (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-642">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="ed12f-643">Résumé de la conversion</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-643">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static float Int (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Int(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Int(float Number);" />
      <MemberSignature Language="F#" Value="static member Int : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ed12f-644">Obligatoire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-644">Required.</span>
          </span>
          <span data-ttu-id="ed12f-645">Nombre de type <see langword="Double" /> ou toute expression numérique valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-645">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="ed12f-646">Si <c>Number</c> contient <see langword="Nothing" />, <see langword="Nothing" /> est retourné.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-646">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ed12f-647">Retournent la partie entière d'un nombre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-647">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ed12f-648">Retournent la partie entière d'un nombre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-648">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ed12f-649">À la fois le `Int` et `Fix` fonctions suppriment la partie fractionnaire des `Number` et retourner la valeur entière résultante.</span><span class="sxs-lookup"><span data-stu-id="ed12f-649">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="ed12f-650">La différence entre `Int` et `Fix` fonctions est que si `Number` est négatif, `Int` retourne le premier entier négatif inférieur ou égal à `Number`, tandis que `Fix` retourne le premier entier négatif supérieur ou égal à `Number`.</span><span class="sxs-lookup"><span data-stu-id="ed12f-650">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="ed12f-651">Par exemple, `Int` convertit-8,4 en -9, et `Fix` convertit-8,4 en -8.</span><span class="sxs-lookup"><span data-stu-id="ed12f-651">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="ed12f-652">`Fix(number)` équivaut à `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="ed12f-652">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ed12f-653">Cet exemple illustre comment la `Int` et `Fix` fonctions retournent la partie entière des nombres.</span><span class="sxs-lookup"><span data-stu-id="ed12f-653">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="ed12f-654">Dans le cas d’un argument est négatif, le `Int` fonction retourne le premier entier négatif inférieur ou égal au nombre ; le `Fix` fonction retourne le premier entier négatif supérieur ou égal au nombre.</span><span class="sxs-lookup"><span data-stu-id="ed12f-654">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="ed12f-655">L’exemple suivant, vous devez spécifier `Option Strict Off` , car les conversions implicites du type `Double` à taper `Integer` ne sont pas autorisés sous `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="ed12f-655">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="ed12f-656">Vous pouvez utiliser la `CInt` fonction pour convertir explicitement les autres types de données en type `Integer` avec `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="ed12f-656">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="ed12f-657">Toutefois, `CInt` est arrondi à l’entier le plus proche au lieu de tronquer la partie fractionnaire des nombres.</span><span class="sxs-lookup"><span data-stu-id="ed12f-657">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="ed12f-658">Exemple :</span><span class="sxs-lookup"><span data-stu-id="ed12f-658">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="ed12f-659">Vous pouvez utiliser la `CInt` fonction sur le résultat d’un appel à `Fix` ou `Int` pour effectuer une conversion explicite en entier sans arrondi.</span><span class="sxs-lookup"><span data-stu-id="ed12f-659">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="ed12f-660">Exemple :</span><span class="sxs-lookup"><span data-stu-id="ed12f-660">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="ed12f-661">Pour plus d’informations sur `CInt`, consultez [les fonctions de Conversion de Type](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="ed12f-661">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ed12f-662">Number n'est pas spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-662">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ed12f-663">Number n'est pas un type numérique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-663">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="ed12f-664">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-664">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="ed12f-665">Liste des types de données (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-665">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="ed12f-666">Liste des mots clés mathématiques</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-666">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="ed12f-667">Fonctions mathématiques (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-667">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="ed12f-668">Résumé de la conversion</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-668">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Oct">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ed12f-669">Retourne une chaîne représentant la valeur octale d'un nombre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-669">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ed12f-670">Obligatoire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-670">Required.</span>
          </span>
          <span data-ttu-id="ed12f-671">Toute expression numérique ou expression <see langword="String" /> valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-671">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ed12f-672">Retourne une chaîne représentant la valeur octale d'un nombre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-672">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ed12f-673">Retourne une chaîne représentant la valeur octale d'un nombre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-673">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ed12f-674">Si `Number` n’est pas déjà un nombre entier, il est arrondi au nombre entier le plus proche avant d’être évalué.</span><span class="sxs-lookup"><span data-stu-id="ed12f-674">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="ed12f-675">Si le nombre est</span><span class="sxs-lookup"><span data-stu-id="ed12f-675">If Number is</span></span>|<span data-ttu-id="ed12f-676">Oct retourne</span><span class="sxs-lookup"><span data-stu-id="ed12f-676">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="ed12f-677">Empty</span><span class="sxs-lookup"><span data-stu-id="ed12f-677">Empty</span></span>|<span data-ttu-id="ed12f-678">zéro (0)</span><span class="sxs-lookup"><span data-stu-id="ed12f-678">Zero (0)</span></span>|  
|<span data-ttu-id="ed12f-679">Nombre quelconque</span><span class="sxs-lookup"><span data-stu-id="ed12f-679">Any other number</span></span>|<span data-ttu-id="ed12f-680">22 caractères octaux</span><span class="sxs-lookup"><span data-stu-id="ed12f-680">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="ed12f-681">Vous pouvez représenter des nombres octaux directement en faisant précéder les nombres dans la plage appropriée de `&O`.</span><span class="sxs-lookup"><span data-stu-id="ed12f-681">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="ed12f-682">Par exemple, `&O10` est la notation octale décimal 8.</span><span class="sxs-lookup"><span data-stu-id="ed12f-682">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ed12f-683">Cet exemple utilise le `Oct` fonction pour retourner la valeur octale d’un nombre.</span><span class="sxs-lookup"><span data-stu-id="ed12f-683">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ed12f-684">
            <paramref name="Number" /> n'est pas spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-684">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ed12f-685">
            <paramref name="Number" /> n'est pas un type numérique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-685">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="ed12f-686">Résumé de la conversion</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-686">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="ed12f-687">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-687">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(short Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ed12f-688">Obligatoire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-688">Required.</span>
          </span>
          <span data-ttu-id="ed12f-689">Toute expression numérique ou expression <see langword="String" /> valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-689">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ed12f-690">Retourne une chaîne représentant la valeur octale d'un nombre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-690">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ed12f-691">Retourne une chaîne représentant la valeur octale d'un nombre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-691">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ed12f-692">Si `Number` n’est pas déjà un nombre entier, il est arrondi au nombre entier le plus proche avant d’être évalué.</span><span class="sxs-lookup"><span data-stu-id="ed12f-692">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="ed12f-693">Si le nombre est</span><span class="sxs-lookup"><span data-stu-id="ed12f-693">If Number is</span></span>|<span data-ttu-id="ed12f-694">Oct retourne</span><span class="sxs-lookup"><span data-stu-id="ed12f-694">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="ed12f-695">Empty</span><span class="sxs-lookup"><span data-stu-id="ed12f-695">Empty</span></span>|<span data-ttu-id="ed12f-696">zéro (0)</span><span class="sxs-lookup"><span data-stu-id="ed12f-696">Zero (0)</span></span>|  
|<span data-ttu-id="ed12f-697">Nombre quelconque</span><span class="sxs-lookup"><span data-stu-id="ed12f-697">Any other number</span></span>|<span data-ttu-id="ed12f-698">22 caractères octaux</span><span class="sxs-lookup"><span data-stu-id="ed12f-698">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="ed12f-699">Vous pouvez représenter des nombres octaux directement en faisant précéder les nombres dans la plage appropriée de `&O`.</span><span class="sxs-lookup"><span data-stu-id="ed12f-699">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="ed12f-700">Par exemple, `&O10` est la notation octale décimal 8.</span><span class="sxs-lookup"><span data-stu-id="ed12f-700">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ed12f-701">Cet exemple utilise le `Oct` fonction pour retourner la valeur octale d’un nombre.</span><span class="sxs-lookup"><span data-stu-id="ed12f-701">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ed12f-702">
            <paramref name="Number" /> n'est pas spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-702">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ed12f-703">
            <paramref name="Number" /> n'est pas un type numérique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-703">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="ed12f-704">Résumé de la conversion</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-704">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="ed12f-705">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-705">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(int Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ed12f-706">Obligatoire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-706">Required.</span>
          </span>
          <span data-ttu-id="ed12f-707">Toute expression numérique ou expression <see langword="String" /> valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-707">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ed12f-708">Retourne une chaîne représentant la valeur octale d'un nombre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-708">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ed12f-709">Retourne une chaîne représentant la valeur octale d'un nombre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-709">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ed12f-710">Si `Number` n’est pas déjà un nombre entier, il est arrondi au nombre entier le plus proche avant d’être évalué.</span><span class="sxs-lookup"><span data-stu-id="ed12f-710">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="ed12f-711">Si le nombre est</span><span class="sxs-lookup"><span data-stu-id="ed12f-711">If Number is</span></span>|<span data-ttu-id="ed12f-712">Oct retourne</span><span class="sxs-lookup"><span data-stu-id="ed12f-712">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="ed12f-713">Empty</span><span class="sxs-lookup"><span data-stu-id="ed12f-713">Empty</span></span>|<span data-ttu-id="ed12f-714">zéro (0)</span><span class="sxs-lookup"><span data-stu-id="ed12f-714">Zero (0)</span></span>|  
|<span data-ttu-id="ed12f-715">Nombre quelconque</span><span class="sxs-lookup"><span data-stu-id="ed12f-715">Any other number</span></span>|<span data-ttu-id="ed12f-716">22 caractères octaux</span><span class="sxs-lookup"><span data-stu-id="ed12f-716">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="ed12f-717">Vous pouvez représenter des nombres octaux directement en faisant précéder les nombres dans la plage appropriée de `&O`.</span><span class="sxs-lookup"><span data-stu-id="ed12f-717">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="ed12f-718">Par exemple, `&O10` est la notation octale décimal 8.</span><span class="sxs-lookup"><span data-stu-id="ed12f-718">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ed12f-719">Cet exemple utilise le `Oct` fonction pour retourner la valeur octale d’un nombre.</span><span class="sxs-lookup"><span data-stu-id="ed12f-719">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ed12f-720">
            <paramref name="Number" /> n'est pas spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-720">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ed12f-721">
            <paramref name="Number" /> n'est pas un type numérique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-721">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="ed12f-722">Résumé de la conversion</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-722">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="ed12f-723">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-723">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(long Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ed12f-724">Obligatoire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-724">Required.</span>
          </span>
          <span data-ttu-id="ed12f-725">Toute expression numérique ou expression <see langword="String" /> valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-725">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ed12f-726">Retourne une chaîne représentant la valeur octale d'un nombre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-726">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ed12f-727">Retourne une chaîne représentant la valeur octale d'un nombre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-727">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ed12f-728">Si `Number` n’est pas déjà un nombre entier, il est arrondi au nombre entier le plus proche avant d’être évalué.</span><span class="sxs-lookup"><span data-stu-id="ed12f-728">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="ed12f-729">Si le nombre est</span><span class="sxs-lookup"><span data-stu-id="ed12f-729">If Number is</span></span>|<span data-ttu-id="ed12f-730">Oct retourne</span><span class="sxs-lookup"><span data-stu-id="ed12f-730">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="ed12f-731">Empty</span><span class="sxs-lookup"><span data-stu-id="ed12f-731">Empty</span></span>|<span data-ttu-id="ed12f-732">zéro (0)</span><span class="sxs-lookup"><span data-stu-id="ed12f-732">Zero (0)</span></span>|  
|<span data-ttu-id="ed12f-733">Nombre quelconque</span><span class="sxs-lookup"><span data-stu-id="ed12f-733">Any other number</span></span>|<span data-ttu-id="ed12f-734">22 caractères octaux</span><span class="sxs-lookup"><span data-stu-id="ed12f-734">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="ed12f-735">Vous pouvez représenter des nombres octaux directement en faisant précéder les nombres dans la plage appropriée de `&O`.</span><span class="sxs-lookup"><span data-stu-id="ed12f-735">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="ed12f-736">Par exemple, `&O10` est la notation octale décimal 8.</span><span class="sxs-lookup"><span data-stu-id="ed12f-736">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ed12f-737">Cet exemple utilise le `Oct` fonction pour retourner la valeur octale d’un nombre.</span><span class="sxs-lookup"><span data-stu-id="ed12f-737">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ed12f-738">
            <paramref name="Number" /> n'est pas spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-738">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ed12f-739">
            <paramref name="Number" /> n'est pas un type numérique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-739">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="ed12f-740">Résumé de la conversion</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-740">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="ed12f-741">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-741">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Oct : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ed12f-742">Obligatoire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-742">Required.</span>
          </span>
          <span data-ttu-id="ed12f-743">Toute expression numérique ou expression <see langword="String" /> valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-743">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ed12f-744">Retourne une chaîne représentant la valeur octale d'un nombre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-744">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ed12f-745">Retourne une chaîne représentant la valeur octale d'un nombre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-745">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ed12f-746">Si `Number` n’est pas déjà un nombre entier, il est arrondi au nombre entier le plus proche avant d’être évalué.</span><span class="sxs-lookup"><span data-stu-id="ed12f-746">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="ed12f-747">Si le nombre est</span><span class="sxs-lookup"><span data-stu-id="ed12f-747">If Number is</span></span>|<span data-ttu-id="ed12f-748">Oct retourne</span><span class="sxs-lookup"><span data-stu-id="ed12f-748">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="ed12f-749">Empty</span><span class="sxs-lookup"><span data-stu-id="ed12f-749">Empty</span></span>|<span data-ttu-id="ed12f-750">zéro (0)</span><span class="sxs-lookup"><span data-stu-id="ed12f-750">Zero (0)</span></span>|  
|<span data-ttu-id="ed12f-751">Nombre quelconque</span><span class="sxs-lookup"><span data-stu-id="ed12f-751">Any other number</span></span>|<span data-ttu-id="ed12f-752">22 caractères octaux</span><span class="sxs-lookup"><span data-stu-id="ed12f-752">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="ed12f-753">Vous pouvez représenter des nombres octaux directement en faisant précéder les nombres dans la plage appropriée de `&O`.</span><span class="sxs-lookup"><span data-stu-id="ed12f-753">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="ed12f-754">Par exemple, `&O10` est la notation octale décimal 8.</span><span class="sxs-lookup"><span data-stu-id="ed12f-754">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ed12f-755">Cet exemple utilise le `Oct` fonction pour retourner la valeur octale d’un nombre.</span><span class="sxs-lookup"><span data-stu-id="ed12f-755">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ed12f-756">
            <paramref name="Number" /> n'est pas spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-756">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ed12f-757">
            <paramref name="Number" /> n'est pas un type numérique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-757">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="ed12f-758">Résumé de la conversion</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-758">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="ed12f-759">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-759">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ed12f-760">Obligatoire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-760">Required.</span>
          </span>
          <span data-ttu-id="ed12f-761">Toute expression numérique ou expression <see langword="String" /> valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-761">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ed12f-762">Retourne une chaîne représentant la valeur octale d'un nombre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-762">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ed12f-763">Retourne une chaîne représentant la valeur octale d'un nombre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-763">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ed12f-764">Si `Number` n’est pas déjà un nombre entier, il est arrondi au nombre entier le plus proche avant d’être évalué.</span><span class="sxs-lookup"><span data-stu-id="ed12f-764">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="ed12f-765">Si le nombre est</span><span class="sxs-lookup"><span data-stu-id="ed12f-765">If Number is</span></span>|<span data-ttu-id="ed12f-766">Oct retourne</span><span class="sxs-lookup"><span data-stu-id="ed12f-766">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="ed12f-767">Empty</span><span class="sxs-lookup"><span data-stu-id="ed12f-767">Empty</span></span>|<span data-ttu-id="ed12f-768">zéro (0)</span><span class="sxs-lookup"><span data-stu-id="ed12f-768">Zero (0)</span></span>|  
|<span data-ttu-id="ed12f-769">Nombre quelconque</span><span class="sxs-lookup"><span data-stu-id="ed12f-769">Any other number</span></span>|<span data-ttu-id="ed12f-770">22 caractères octaux</span><span class="sxs-lookup"><span data-stu-id="ed12f-770">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="ed12f-771">Vous pouvez représenter des nombres octaux directement en faisant précéder les nombres dans la plage appropriée de `&O`.</span><span class="sxs-lookup"><span data-stu-id="ed12f-771">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="ed12f-772">Par exemple, `&O10` est la notation octale décimal 8.</span><span class="sxs-lookup"><span data-stu-id="ed12f-772">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ed12f-773">Cet exemple utilise le `Oct` fonction pour retourner la valeur octale d’un nombre.</span><span class="sxs-lookup"><span data-stu-id="ed12f-773">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ed12f-774">
            <paramref name="Number" /> n'est pas spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-774">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ed12f-775">
            <paramref name="Number" /> n'est pas un type numérique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-775">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="ed12f-776">Résumé de la conversion</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-776">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="ed12f-777">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-777">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ed12f-778">Obligatoire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-778">Required.</span>
          </span>
          <span data-ttu-id="ed12f-779">Toute expression numérique ou expression <see langword="String" /> valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-779">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ed12f-780">Retourne une chaîne représentant la valeur octale d'un nombre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-780">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ed12f-781">Retourne une chaîne représentant la valeur octale d'un nombre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-781">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ed12f-782">Si `Number` n’est pas déjà un nombre entier, il est arrondi au nombre entier le plus proche avant d’être évalué.</span><span class="sxs-lookup"><span data-stu-id="ed12f-782">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="ed12f-783">Si le nombre est</span><span class="sxs-lookup"><span data-stu-id="ed12f-783">If Number is</span></span>|<span data-ttu-id="ed12f-784">Oct retourne</span><span class="sxs-lookup"><span data-stu-id="ed12f-784">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="ed12f-785">Empty</span><span class="sxs-lookup"><span data-stu-id="ed12f-785">Empty</span></span>|<span data-ttu-id="ed12f-786">zéro (0)</span><span class="sxs-lookup"><span data-stu-id="ed12f-786">Zero (0)</span></span>|  
|<span data-ttu-id="ed12f-787">Nombre quelconque</span><span class="sxs-lookup"><span data-stu-id="ed12f-787">Any other number</span></span>|<span data-ttu-id="ed12f-788">22 caractères octaux</span><span class="sxs-lookup"><span data-stu-id="ed12f-788">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="ed12f-789">Vous pouvez représenter des nombres octaux directement en faisant précéder les nombres dans la plage appropriée de `&O`.</span><span class="sxs-lookup"><span data-stu-id="ed12f-789">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="ed12f-790">Par exemple, `&O10` est la notation octale décimal 8.</span><span class="sxs-lookup"><span data-stu-id="ed12f-790">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ed12f-791">Cet exemple utilise le `Oct` fonction pour retourner la valeur octale d’un nombre.</span><span class="sxs-lookup"><span data-stu-id="ed12f-791">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ed12f-792">
            <paramref name="Number" /> n'est pas spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-792">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ed12f-793">
            <paramref name="Number" /> n'est pas un type numérique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-793">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="ed12f-794">Résumé de la conversion</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-794">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="ed12f-795">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-795">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ed12f-796">Obligatoire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-796">Required.</span>
          </span>
          <span data-ttu-id="ed12f-797">Toute expression numérique ou expression <see langword="String" /> valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-797">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ed12f-798">Retourne une chaîne représentant la valeur octale d'un nombre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-798">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ed12f-799">Retourne une chaîne représentant la valeur octale d'un nombre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-799">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ed12f-800">Si `Number` n’est pas déjà un nombre entier, il est arrondi au nombre entier le plus proche avant d’être évalué.</span><span class="sxs-lookup"><span data-stu-id="ed12f-800">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="ed12f-801">Si le nombre est</span><span class="sxs-lookup"><span data-stu-id="ed12f-801">If Number is</span></span>|<span data-ttu-id="ed12f-802">Oct retourne</span><span class="sxs-lookup"><span data-stu-id="ed12f-802">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="ed12f-803">Empty</span><span class="sxs-lookup"><span data-stu-id="ed12f-803">Empty</span></span>|<span data-ttu-id="ed12f-804">zéro (0)</span><span class="sxs-lookup"><span data-stu-id="ed12f-804">Zero (0)</span></span>|  
|<span data-ttu-id="ed12f-805">Nombre quelconque</span><span class="sxs-lookup"><span data-stu-id="ed12f-805">Any other number</span></span>|<span data-ttu-id="ed12f-806">22 caractères octaux</span><span class="sxs-lookup"><span data-stu-id="ed12f-806">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="ed12f-807">Vous pouvez représenter des nombres octaux directement en faisant précéder les nombres dans la plage appropriée de `&O`.</span><span class="sxs-lookup"><span data-stu-id="ed12f-807">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="ed12f-808">Par exemple, `&O10` est la notation octale décimal 8.</span><span class="sxs-lookup"><span data-stu-id="ed12f-808">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ed12f-809">Cet exemple utilise le `Oct` fonction pour retourner la valeur octale d’un nombre.</span><span class="sxs-lookup"><span data-stu-id="ed12f-809">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ed12f-810">
            <paramref name="Number" /> n'est pas spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-810">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ed12f-811">
            <paramref name="Number" /> n'est pas un type numérique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-811">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="ed12f-812">Résumé de la conversion</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-812">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="ed12f-813">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-813">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ed12f-814">Obligatoire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-814">Required.</span>
          </span>
          <span data-ttu-id="ed12f-815">Toute expression numérique ou expression <see langword="String" /> valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-815">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ed12f-816">Retourne une chaîne représentant la valeur octale d'un nombre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-816">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ed12f-817">Retourne une chaîne représentant la valeur octale d'un nombre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-817">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ed12f-818">Si `Number` n’est pas déjà un nombre entier, il est arrondi au nombre entier le plus proche avant d’être évalué.</span><span class="sxs-lookup"><span data-stu-id="ed12f-818">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="ed12f-819">Si le nombre est</span><span class="sxs-lookup"><span data-stu-id="ed12f-819">If Number is</span></span>|<span data-ttu-id="ed12f-820">Oct retourne</span><span class="sxs-lookup"><span data-stu-id="ed12f-820">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="ed12f-821">Empty</span><span class="sxs-lookup"><span data-stu-id="ed12f-821">Empty</span></span>|<span data-ttu-id="ed12f-822">zéro (0)</span><span class="sxs-lookup"><span data-stu-id="ed12f-822">Zero (0)</span></span>|  
|<span data-ttu-id="ed12f-823">Nombre quelconque</span><span class="sxs-lookup"><span data-stu-id="ed12f-823">Any other number</span></span>|<span data-ttu-id="ed12f-824">22 caractères octaux</span><span class="sxs-lookup"><span data-stu-id="ed12f-824">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="ed12f-825">Vous pouvez représenter des nombres octaux directement en faisant précéder les nombres dans la plage appropriée de `&O`.</span><span class="sxs-lookup"><span data-stu-id="ed12f-825">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="ed12f-826">Par exemple, `&O10` est la notation octale décimal 8.</span><span class="sxs-lookup"><span data-stu-id="ed12f-826">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ed12f-827">Cet exemple utilise le `Oct` fonction pour retourner la valeur octale d’un nombre.</span><span class="sxs-lookup"><span data-stu-id="ed12f-827">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ed12f-828">
            <paramref name="Number" /> n'est pas spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-828">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ed12f-829">
            <paramref name="Number" /> n'est pas un type numérique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-829">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="ed12f-830">Résumé de la conversion</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-830">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="ed12f-831">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-831">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Str">
      <MemberSignature Language="C#" Value="public static string Str (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Str(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Str (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Str(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Str : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Str Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="ed12f-832">Obligatoire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-832">Required.</span>
          </span>
          <span data-ttu-id="ed12f-833">
            <see langword="Object" /> contenant toute expression numérique valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-833">An <see langword="Object" /> containing any valid numeric expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ed12f-834">Retourne une représentation <see langword="String" /> d'un nombre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-834">Returns a <see langword="String" /> representation of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ed12f-835">Retourne une représentation <see langword="String" /> d'un nombre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-835">Returns a <see langword="String" /> representation of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ed12f-836">Lorsque les nombres sont convertis en chaînes, un espace à gauche est toujours réservé pour le signe de `Number`.</span><span class="sxs-lookup"><span data-stu-id="ed12f-836">When numbers are converted to strings, a leading space is always reserved for the sign of `Number`.</span></span> <span data-ttu-id="ed12f-837">Si `Number` est un nombre positif, la chaîne retournée contient un espace à gauche et le signe est implicite.</span><span class="sxs-lookup"><span data-stu-id="ed12f-837">If `Number` is positive, the returned string contains a leading space, and the plus sign is implied.</span></span> <span data-ttu-id="ed12f-838">Un nombre négatif inclura le signe moins (-) et aucun espace à gauche.</span><span class="sxs-lookup"><span data-stu-id="ed12f-838">A negative number will include the minus sign (-) and no leading space.</span></span>  
  
 <span data-ttu-id="ed12f-839">Utilisez le `Format` fonction pour convertir des valeurs numériques à formater en tant que dates, heures ou monnaie ou dans d’autres formats définis par l’utilisateur.</span><span class="sxs-lookup"><span data-stu-id="ed12f-839">Use the `Format` function to convert numeric values you want formatted as dates, times, or currency or in other user-defined formats.</span></span> <span data-ttu-id="ed12f-840">Contrairement à la `Str` (fonction), le `Format` fonction n’inclut pas d’espace à gauche pour le signe de `Number`.</span><span class="sxs-lookup"><span data-stu-id="ed12f-840">Unlike the `Str` function, the `Format` function does not include a leading space for the sign of `Number`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ed12f-841">Le `Str` fonction ne reconnaît que le point (`.`) comme séparateur décimal valide.</span><span class="sxs-lookup"><span data-stu-id="ed12f-841">The `Str` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="ed12f-842">Si des séparateurs décimaux différents sont utilisés (par exemple, dans des applications internationales), utilisez le `CStr` ou `Format` fonctions pour convertir un nombre en une chaîne.</span><span class="sxs-lookup"><span data-stu-id="ed12f-842">If different decimal separators are used (for example, in international applications), use the `CStr` or `Format` functions to convert a number to a string.</span></span> <span data-ttu-id="ed12f-843">Pour obtenir la représentation sous forme de chaîne d’un nombre dans une culture particulière, utilisez le nombre `ToString(IFormatProvider)` (méthode).</span><span class="sxs-lookup"><span data-stu-id="ed12f-843">To get the string representation of a number in a particular culture, use the number's `ToString(IFormatProvider)` method.</span></span> <span data-ttu-id="ed12f-844">Par exemple, utilisez <xref:System.Double.ToString%2A> lors de la conversion d’une valeur de type `Double` vers une chaîne.</span><span class="sxs-lookup"><span data-stu-id="ed12f-844">For example, use <xref:System.Double.ToString%2A> when converting a value of type `Double` to a string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ed12f-845">Cet exemple utilise le `Str` fonction pour retourner un `String` représentation d’un nombre.</span><span class="sxs-lookup"><span data-stu-id="ed12f-845">This example uses the `Str` function to return a `String` representation of a number.</span></span> <span data-ttu-id="ed12f-846">Lorsqu’un nombre positif est converti en une chaîne, un espace à gauche est toujours réservé pour son signe.</span><span class="sxs-lookup"><span data-stu-id="ed12f-846">When a positive number is converted to a string, a leading space is always reserved for its sign.</span></span>  
  
 [!code-vb[VbVbalrStrings#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ed12f-847">
            <paramref name="Number" /> n'est pas spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-847">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="ed12f-848">
            <paramref name="Number" /> n'est pas un type numérique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-848">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Val" />
        <altmember cref="T:System.ArgumentNullException" />
        <altmember cref="T:System.InvalidCastException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="ed12f-849">Résumé de la conversion</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-849">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="ed12f-850">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-850">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Val">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ed12f-851">Renvoie les nombres contenus dans une chaîne en tant que valeur numérique du type adéquat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-851">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static int Val (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Val(char Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Val(char Expression);" />
      <MemberSignature Language="F#" Value="static member Val : char -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="ed12f-852">Obligatoire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-852">Required.</span>
          </span>
          <span data-ttu-id="ed12f-853">Toute expression <see langword="String" />, variable <see langword="Object" /> ou valeur <see langword="Char" /> valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-853">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span>
          </span>
          <span data-ttu-id="ed12f-854">Si <c>Expression</c> est de type <see langword="Object" />, sa valeur doit être convertible en <see langword="String" />, ou une erreur <see cref="T:System.ArgumentException" /> se produit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-854">If <c>Expression</c> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ed12f-855">Renvoie les nombres contenus dans une chaîne en tant que valeur numérique du type adéquat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-855">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ed12f-856">Renvoie les nombres contenus dans une chaîne en tant que valeur numérique du type adéquat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-856">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ed12f-857">Le `Val` fonction arrête la lecture de la chaîne au premier caractère qu’il ne peut pas identifier comme partie d’un nombre.</span><span class="sxs-lookup"><span data-stu-id="ed12f-857">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="ed12f-858">Les caractères qui sont souvent considérés comme parties des valeurs numériques, telles que les signes dollar et les virgules et les symboles ne sont pas reconnus.</span><span class="sxs-lookup"><span data-stu-id="ed12f-858">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="ed12f-859">Toutefois, la fonction reconnaît les préfixes `&O` (pour octal) et `&H` (pour hexadécimal).</span><span class="sxs-lookup"><span data-stu-id="ed12f-859">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="ed12f-860">Les espaces, les onglets et les caractères de saut de ligne sont supprimés de l’argument.</span><span class="sxs-lookup"><span data-stu-id="ed12f-860">Blanks, tabs, and linefeed characters are stripped from the argument.</span></span>  
  
 <span data-ttu-id="ed12f-861">L’appel suivant retourne la valeur 1615198.</span><span class="sxs-lookup"><span data-stu-id="ed12f-861">The following call returns the value 1615198.</span></span>  
  
```  
  
Val(" 1615 198th Street N.E.")   
```  
  
 <span data-ttu-id="ed12f-862">L’appel suivant retourne la valeur décimale -1.</span><span class="sxs-lookup"><span data-stu-id="ed12f-862">The following call returns the decimal value -1.</span></span>  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="ed12f-863">Le `Val` fonction ne reconnaît que le point (`.`) comme séparateur décimal valide.</span><span class="sxs-lookup"><span data-stu-id="ed12f-863">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="ed12f-864">Lorsque des séparateurs décimaux différents sont utilisés, comme dans les applications internationales, utilisez `CDbl` ou `CInt` à la place pour convertir une chaîne en un nombre.</span><span class="sxs-lookup"><span data-stu-id="ed12f-864">When different decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="ed12f-865">Pour convertir la représentation sous forme de chaîne d’un nombre dans une culture particulière en une valeur numérique, utilisez le type numérique `Parse(String, IFormatProvider)` (méthode).</span><span class="sxs-lookup"><span data-stu-id="ed12f-865">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="ed12f-866">Par exemple, utilisez <xref:System.Double.Parse%2A?displayProperty=nameWithType> lors de la conversion d’une chaîne à un `Double`.</span><span class="sxs-lookup"><span data-stu-id="ed12f-866">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ed12f-867">Un <xref:System.InvalidCastException> exception peut être levée en réponse à certains formats numériques rares.</span><span class="sxs-lookup"><span data-stu-id="ed12f-867">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="ed12f-868">Par exemple, le code suivant lève cette exception.</span><span class="sxs-lookup"><span data-stu-id="ed12f-868">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="ed12f-869">Le conflit entre le nombre sous la forme un `Double` et `Integer` et `Long` caractères de type seraient interceptées par le compilateur si elle n’était pas contenue dans une chaîne.</span><span class="sxs-lookup"><span data-stu-id="ed12f-869">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if it were not contained in a string.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="ed12f-870">L’exemple suivant utilise le `Val` fonction pour retourner les nombres contenus dans chaque chaîne.</span><span class="sxs-lookup"><span data-stu-id="ed12f-870">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="ed12f-871">`Val` arrête la conversion au premier caractère qui ne peut pas être interprété comme un chiffre, modificateur numérique, une ponctuation numérique ou d’espace blanc.</span><span class="sxs-lookup"><span data-stu-id="ed12f-871">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="ed12f-872">
            <paramref name="InputStr" /> est trop grand.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-872">
              <paramref name="InputStr" /> is too large.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ed12f-873">
            <paramref name="Expression" /> est une expression de type <see langword="Object" /> non convertible en <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-873">
              <paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="ed12f-874">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-874">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Val : obj -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="ed12f-875">Obligatoire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-875">Required.</span>
          </span>
          <span data-ttu-id="ed12f-876">Toute expression <see langword="String" />, variable <see langword="Object" /> ou valeur <see langword="Char" /> valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-876">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span>
          </span>
          <span data-ttu-id="ed12f-877">Si <c>Expression</c> est de type <see langword="Object" />, sa valeur doit être convertible en <see langword="String" />, ou une erreur <see cref="T:System.ArgumentException" /> se produit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-877">If <c>Expression</c> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ed12f-878">Renvoie les nombres contenus dans une chaîne en tant que valeur numérique du type adéquat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-878">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ed12f-879">Renvoie les nombres contenus dans une chaîne en tant que valeur numérique du type adéquat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-879">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ed12f-880">Le `Val` fonction arrête la lecture de la chaîne au premier caractère qu’il ne peut pas identifier comme partie d’un nombre.</span><span class="sxs-lookup"><span data-stu-id="ed12f-880">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="ed12f-881">Les caractères qui sont souvent considérés comme parties des valeurs numériques, telles que les signes dollar et les virgules et les symboles ne sont pas reconnus.</span><span class="sxs-lookup"><span data-stu-id="ed12f-881">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="ed12f-882">Toutefois, la fonction reconnaît les préfixes `&O` (pour octal) et `&H` (pour hexadécimal).</span><span class="sxs-lookup"><span data-stu-id="ed12f-882">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="ed12f-883">Les espaces, les onglets et les caractères de saut de ligne sont supprimés à partir de l’argument.</span><span class="sxs-lookup"><span data-stu-id="ed12f-883">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="ed12f-884">L’appel suivant renvoie la valeur 1234123.</span><span class="sxs-lookup"><span data-stu-id="ed12f-884">The following call returns the value 1234123.</span></span>  
  
```  
  
Val(" 1234 123th Street N.E.")   
```  
  
 <span data-ttu-id="ed12f-885">L’appel suivant retourne la valeur décimale -1.</span><span class="sxs-lookup"><span data-stu-id="ed12f-885">The following call returns the decimal value -1.</span></span>  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="ed12f-886">Le `Val` fonction ne reconnaît que le point (`.`) comme séparateur décimal valide.</span><span class="sxs-lookup"><span data-stu-id="ed12f-886">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="ed12f-887">Lorsque d’autres séparateurs décimaux sont utilisés, comme dans les applications internationales, utilisez `CDbl` ou `CInt` à la place pour convertir une chaîne en un nombre.</span><span class="sxs-lookup"><span data-stu-id="ed12f-887">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="ed12f-888">Pour convertir la représentation sous forme de chaîne d’un nombre dans une culture particulière en une valeur numérique, utilisez le type numérique `Parse(String, IFormatProvider)` (méthode).</span><span class="sxs-lookup"><span data-stu-id="ed12f-888">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="ed12f-889">Par exemple, utilisez <xref:System.Double.Parse%2A?displayProperty=nameWithType> lors de la conversion d’une chaîne à un `Double`.</span><span class="sxs-lookup"><span data-stu-id="ed12f-889">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ed12f-890">Un <xref:System.InvalidCastException> exception peut être levée en réponse à certains formats numériques rares.</span><span class="sxs-lookup"><span data-stu-id="ed12f-890">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="ed12f-891">Par exemple, le code suivant lève cette exception.</span><span class="sxs-lookup"><span data-stu-id="ed12f-891">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="ed12f-892">Le conflit entre le nombre sous la forme un `Double` et `Integer` et `Long` caractères de type seraient interceptées par le compilateur si le conflit n’était pas contenu dans les chaînes.</span><span class="sxs-lookup"><span data-stu-id="ed12f-892">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="ed12f-893">L’exemple suivant utilise le `Val` fonction pour retourner les nombres contenus dans chaque chaîne.</span><span class="sxs-lookup"><span data-stu-id="ed12f-893">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="ed12f-894">`Val` arrête la conversion au premier caractère qui ne peut pas être interprété comme un chiffre, modificateur numérique, une ponctuation numérique ou d’espace blanc.</span><span class="sxs-lookup"><span data-stu-id="ed12f-894">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="ed12f-895">
            <paramref name="InputStr" /> est trop grand.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-895">
              <paramref name="InputStr" /> is too large.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ed12f-896">
            <paramref name="Expression" /> est une expression de type <see langword="Object" /> non convertible en <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-896">
              <paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="ed12f-897">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-897">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (string InputStr);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(string InputStr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (InputStr As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::String ^ InputStr);" />
      <MemberSignature Language="F#" Value="static member Val : string -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val InputStr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="InputStr" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="InputStr">
          <span data-ttu-id="ed12f-898">Obligatoire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-898">Required.</span>
          </span>
          <span data-ttu-id="ed12f-899">Toute expression <see langword="String" />, variable <see langword="Object" /> ou valeur <see langword="Char" /> valide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-899">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span>
          </span>
          <span data-ttu-id="ed12f-900">Si <c>Expression</c> est de type <see langword="Object" />, sa valeur doit être convertible en <see langword="String" />, ou une erreur <see cref="T:System.ArgumentException" /> se produit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-900">If <c>Expression</c> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ed12f-901">Renvoie les nombres contenus dans une chaîne en tant que valeur numérique du type adéquat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-901">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ed12f-902">Renvoie les nombres contenus dans une chaîne en tant que valeur numérique du type adéquat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-902">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ed12f-903">Le `Val` fonction arrête la lecture de la chaîne au premier caractère qu’il ne peut pas identifier comme partie d’un nombre.</span><span class="sxs-lookup"><span data-stu-id="ed12f-903">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="ed12f-904">Les caractères qui sont souvent considérés comme parties des valeurs numériques, telles que les signes dollar et les virgules et les symboles ne sont pas reconnus.</span><span class="sxs-lookup"><span data-stu-id="ed12f-904">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="ed12f-905">Toutefois, la fonction reconnaît les préfixes `&O` (pour octal) et `&H` (pour hexadécimal).</span><span class="sxs-lookup"><span data-stu-id="ed12f-905">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="ed12f-906">Les espaces, les onglets et les caractères de saut de ligne sont supprimés à partir de l’argument.</span><span class="sxs-lookup"><span data-stu-id="ed12f-906">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="ed12f-907">L’appel suivant renvoie la valeur 1234123.</span><span class="sxs-lookup"><span data-stu-id="ed12f-907">The following call returns the value 1234123.</span></span>  
  
```  
  
Val(" 1234 123th Street N.E.")   
```  
  
 <span data-ttu-id="ed12f-908">L’appel suivant retourne la valeur décimale -1.</span><span class="sxs-lookup"><span data-stu-id="ed12f-908">The following call returns the decimal value -1.</span></span>  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="ed12f-909">Le `Val` fonction ne reconnaît que le point (`.`) comme séparateur décimal valide.</span><span class="sxs-lookup"><span data-stu-id="ed12f-909">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="ed12f-910">Lorsque d’autres séparateurs décimaux sont utilisés, comme dans les applications internationales, utilisez `CDbl` ou `CInt` à la place pour convertir une chaîne en un nombre.</span><span class="sxs-lookup"><span data-stu-id="ed12f-910">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="ed12f-911">Pour convertir la représentation sous forme de chaîne d’un nombre dans une culture particulière en une valeur numérique, utilisez le type numérique `Parse(String, IFormatProvider)` (méthode).</span><span class="sxs-lookup"><span data-stu-id="ed12f-911">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="ed12f-912">Par exemple, utilisez <xref:System.Double.Parse%2A?displayProperty=nameWithType> lors de la conversion d’une chaîne à un `Double`.</span><span class="sxs-lookup"><span data-stu-id="ed12f-912">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ed12f-913">Un <xref:System.InvalidCastException> exception peut être levée en réponse à certains formats numériques rares.</span><span class="sxs-lookup"><span data-stu-id="ed12f-913">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="ed12f-914">Par exemple, le code suivant lève cette exception.</span><span class="sxs-lookup"><span data-stu-id="ed12f-914">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="ed12f-915">Le conflit entre le nombre sous la forme un `Double` et `Integer` et `Long` caractères de type seraient interceptées par le compilateur si le conflit n’était pas contenu dans les chaînes.</span><span class="sxs-lookup"><span data-stu-id="ed12f-915">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="ed12f-916">L’exemple suivant utilise le `Val` fonction pour retourner les nombres contenus dans chaque chaîne.</span><span class="sxs-lookup"><span data-stu-id="ed12f-916">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="ed12f-917">`Val` arrête la conversion au premier caractère qui ne peut pas être interprété comme un chiffre, modificateur numérique, une ponctuation numérique ou d’espace blanc.</span><span class="sxs-lookup"><span data-stu-id="ed12f-917">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="ed12f-918">
            <paramref name="InputStr" /> est trop grand.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-918">
              <paramref name="InputStr" /> is too large.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ed12f-919">
            <paramref name="Expression" /> est une expression de type <see langword="Object" /> non convertible en <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-919">
              <paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="ed12f-920">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="ed12f-920">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
  </Members>
</Type>