<Type Name="ResourceReader" FullName="System.Resources.ResourceReader">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f2814539bf76d998ae0f4c7bdb789f22102804ce" /><Meta Name="ms.sourcegitcommit" Value="1654a92bac785a221098172d9cacd405ceaac9b7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="12/01/2018" /><Meta Name="ms.locfileid" Value="52734771" /></Metadata><TypeSignature Language="C#" Value="public sealed class ResourceReader : System.Resources.IResourceReader" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ResourceReader extends System.Object implements class System.Collections.IEnumerable, class System.IDisposable, class System.Resources.IResourceReader" />
  <TypeSignature Language="DocId" Value="T:System.Resources.ResourceReader" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ResourceReader&#xA;Implements IResourceReader" />
  <TypeSignature Language="C++ CLI" Value="public ref class ResourceReader sealed : System::Resources::IResourceReader" />
  <TypeSignature Language="F#" Value="type ResourceReader = class&#xA;    interface IResourceReader&#xA;    interface IEnumerable&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Resources.Reader</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Resources.ResourceManager</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Resources.IResourceReader</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="1cf55-101">Énumère les ressources dans un fichier de ressources binaire (.resources) en lisant les paires nom/valeur séquentielles de ressources.</span><span class="sxs-lookup"><span data-stu-id="1cf55-101">Enumerates the resources in a binary resources (.resources) file by reading sequential resource name/value pairs.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  

[!INCLUDE [untrusted-data-class-note](~/includes/untrusted-data-class-note.md)]

 <span data-ttu-id="1cf55-102">Le <xref:System.Resources.ResourceReader> classe fournit une implémentation standard de le <xref:System.Resources.IResourceReader> interface.</span><span class="sxs-lookup"><span data-stu-id="1cf55-102">The <xref:System.Resources.ResourceReader> class provides a standard implementation of the <xref:System.Resources.IResourceReader> interface.</span></span> <span data-ttu-id="1cf55-103">Un <xref:System.Resources.ResourceReader> instance représente un fichier .resources ou un fichier .resources incorporé dans un assembly.</span><span class="sxs-lookup"><span data-stu-id="1cf55-103">A <xref:System.Resources.ResourceReader> instance represents either a standalone .resources file or a .resources file that is embedded in an assembly.</span></span> <span data-ttu-id="1cf55-104">Il est utilisé pour énumérer les ressources dans un fichier .resources et récupérer ses paires nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="1cf55-104">It is used to enumerate the resources in a .resources file and retrieve its name/value pairs.</span></span> <span data-ttu-id="1cf55-105">Il diffère de la <xref:System.Resources.ResourceManager> (classe), qui est utilisée pour récupérer des ressources nommées spécifiés à partir d’un fichier .resources incorporé dans un assembly.</span><span class="sxs-lookup"><span data-stu-id="1cf55-105">It differs from the <xref:System.Resources.ResourceManager> class, which is used to retrieve specified named resources from a .resources file that is embedded in an assembly.</span></span> <span data-ttu-id="1cf55-106">Le <xref:System.Resources.ResourceManager> classe est utilisée pour récupérer des ressources dont les noms sont connus d’avance, tandis que la <xref:System.Resources.ResourceReader> classe est utile pour extraire des ressources dont nombre ou les noms exacts ne sont pas connus au moment de la compilation.</span><span class="sxs-lookup"><span data-stu-id="1cf55-106">The <xref:System.Resources.ResourceManager> class is used to retrieve resources whose names are known in advance, whereas the <xref:System.Resources.ResourceReader> class is useful for retrieving resources whose number or precise names are not known at compile time.</span></span> <span data-ttu-id="1cf55-107">Par exemple, une application peut utiliser un fichier de ressources pour stocker les informations de configuration qui sont organisées en sections et des éléments dans une section, où le nombre de sections ou des éléments dans une section n’est pas connu d’avance.</span><span class="sxs-lookup"><span data-stu-id="1cf55-107">For example, an application may use a resources file to store configuration information that is organized into sections and items in a section, where the number of sections or items in a section is not known in advance.</span></span> <span data-ttu-id="1cf55-108">Ressources peuvent ensuite être nommés de manière générique (tel que `Section1`, `Section1Item1`, `Section1Item2`, et ainsi de suite) et récupérées à l’aide un <xref:System.Resources.ResourceReader> objet.</span><span class="sxs-lookup"><span data-stu-id="1cf55-108">Resources can then be named generically (such as `Section1`, `Section1Item1`, `Section1Item2`, and so on) and retrieved by using a <xref:System.Resources.ResourceReader> object.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1cf55-109">Ce type implémente le <xref:System.IDisposable> interface.</span><span class="sxs-lookup"><span data-stu-id="1cf55-109">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="1cf55-110">Lorsque vous avez fini d’utiliser le type, vous devez supprimer il directement ou indirectement.</span><span class="sxs-lookup"><span data-stu-id="1cf55-110">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="1cf55-111">Pour supprimer le type directement, appelez sa <xref:System.IDisposable.Dispose%2A> méthode dans un `try` / `catch` bloc.</span><span class="sxs-lookup"><span data-stu-id="1cf55-111">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="1cf55-112">Pour supprimer indirectement, utiliser une construction de langage tel que `using` (en c#) ou `Using` (en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="1cf55-112">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="1cf55-113">Pour plus d’informations, consultez la section « À l’aide un objet qui implémente IDisposable » dans le <xref:System.IDisposable> rubrique de l’interface.</span><span class="sxs-lookup"><span data-stu-id="1cf55-113">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="1cf55-114">Pour plus d’informations sur l’utilisation de la <xref:System.Resources.ResourceReader> de classe, consultez les sections suivantes :</span><span class="sxs-lookup"><span data-stu-id="1cf55-114">For more information about using the <xref:System.Resources.ResourceReader> class, see the following sections:</span></span>  
  
-   [<span data-ttu-id="1cf55-115">Instanciation d’un objet ResourceReader</span><span class="sxs-lookup"><span data-stu-id="1cf55-115">Instantiating a ResourceReader object</span></span>](#instantiate)  
  
-   [<span data-ttu-id="1cf55-116">L’énumération des ressources d’un objet ResourceReader</span><span class="sxs-lookup"><span data-stu-id="1cf55-116">Enumerating a ResourceReader object's resources</span></span>](#enumerate)  
  
    -   [<span data-ttu-id="1cf55-117">Récupérer des ressources à l’aide des propriétés de IDictionaryEnumerator</span><span class="sxs-lookup"><span data-stu-id="1cf55-117">Retrieving resources by using IDictionaryEnumerator properties</span></span>](#idictionaryenumerator)  
  
    -   [<span data-ttu-id="1cf55-118">Récupération de ressources par nom avec GetResourceData</span><span class="sxs-lookup"><span data-stu-id="1cf55-118">Retrieving resources by name with GetResourceData</span></span>](#getresourcedata)  
  
<a name="instantiate"></a>   
## <a name="instantiating-a-resourcereader-object"></a><span data-ttu-id="1cf55-119">Instanciation d’un objet ResourceReader</span><span class="sxs-lookup"><span data-stu-id="1cf55-119">Instantiating a ResourceReader Object</span></span>  
 <span data-ttu-id="1cf55-120">Un fichier .resources est un fichier binaire qui a été compilé à partir d’un fichier texte ou un fichier .resx XML par [Resgen.exe (Resource File Generator)](~/docs/framework/tools/resgen-exe-resource-file-generator.md).</span><span class="sxs-lookup"><span data-stu-id="1cf55-120">A .resources file is a binary file that has been compiled from either a text file or an XML .resx file by [Resgen.exe (Resource File Generator)](~/docs/framework/tools/resgen-exe-resource-file-generator.md).</span></span> <span data-ttu-id="1cf55-121">Un <xref:System.Resources.ResourceReader> objet peut représenter un fichier .resources ou un fichier .resources incorporé dans un assembly.</span><span class="sxs-lookup"><span data-stu-id="1cf55-121">A <xref:System.Resources.ResourceReader> object can represent either a standalone .resources file or a .resources file that has been embedded in an assembly.</span></span>  
  
 <span data-ttu-id="1cf55-122">Pour instancier un <xref:System.Resources.ResourceReader> de l’objet que les lectures à partir d’un fichier .resources, utilisez le <xref:System.Resources.ResourceReader> constructeur de classe avec un flux d’entrée ou une chaîne qui contient le nom du fichier .resources.</span><span class="sxs-lookup"><span data-stu-id="1cf55-122">To instantiate a <xref:System.Resources.ResourceReader> object that reads from a standalone .resources file, use the <xref:System.Resources.ResourceReader> class constructor with either an input stream or a string that contains the .resources file name.</span></span> <span data-ttu-id="1cf55-123">L’exemple suivant illustre les deux approches.</span><span class="sxs-lookup"><span data-stu-id="1cf55-123">The following example illustrates both approaches.</span></span> <span data-ttu-id="1cf55-124">Le premier instancie un <xref:System.Resources.ResourceReader> objet qui représente un fichier .resources nommé `Resources1.resources` à l’aide de son nom de fichier.</span><span class="sxs-lookup"><span data-stu-id="1cf55-124">The first instantiates a <xref:System.Resources.ResourceReader> object that represents a .resources file named `Resources1.resources` by using its file name.</span></span> <span data-ttu-id="1cf55-125">La seconde instancie un <xref:System.Resources.ResourceReader> objet qui représente un fichier .resources nommé `Resources2.resources` à l’aide d’un flux de données créé à partir du fichier.</span><span class="sxs-lookup"><span data-stu-id="1cf55-125">The second instantiates a <xref:System.Resources.ResourceReader> object that represents a .resources file named `Resources2.resources` by using a stream created from the file.</span></span>  
  
 [!code-csharp[System.Resources.ResourceReader.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/ctor1.cs#2)]
 [!code-vb[System.Resources.ResourceReader.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/ctor1.vb#2)]  
  
 <span data-ttu-id="1cf55-126">Pour créer un <xref:System.Resources.ResourceReader> objet qui représente un fichier .resources incorporé, instanciez un <xref:System.Reflection.Assembly> objet à partir de l’assembly dans lequel le fichier .resources est incorporé.</span><span class="sxs-lookup"><span data-stu-id="1cf55-126">To create a <xref:System.Resources.ResourceReader> object that represents an embedded .resources file, instantiate an <xref:System.Reflection.Assembly> object from the assembly in which the .resources file is embedded.</span></span> <span data-ttu-id="1cf55-127">Son <xref:System.Reflection.Assembly.GetManifestResourceStream%2A?displayProperty=nameWithType> méthode retourne un <xref:System.IO.Stream> objet qui peut être passé à la <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> constructeur.</span><span class="sxs-lookup"><span data-stu-id="1cf55-127">Its <xref:System.Reflection.Assembly.GetManifestResourceStream%2A?displayProperty=nameWithType> method returns a <xref:System.IO.Stream> object that can be passed to the <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> constructor.</span></span> <span data-ttu-id="1cf55-128">L’exemple suivant instancie un <xref:System.Resources.ResourceReader> objet qui représente un fichier .resources incorporé.</span><span class="sxs-lookup"><span data-stu-id="1cf55-128">The following example instantiates a <xref:System.Resources.ResourceReader> object that represents an embedded .resources file.</span></span>  
  
 [!code-csharp[System.Resources.ResourceReader.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/ctor1.cs#3)]
 [!code-vb[System.Resources.ResourceReader.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/ctor1.vb#3)]  
  
<a name="enumerate"></a>   
## <a name="enumerating-a-resourcereader-objects-resources"></a><span data-ttu-id="1cf55-129">L’énumération des ressources d’un objet ResourceReader</span><span class="sxs-lookup"><span data-stu-id="1cf55-129">Enumerating a ResourceReader Object's Resources</span></span>  
 <span data-ttu-id="1cf55-130">Pour énumérer les ressources dans un fichier .resources, vous appelez le <xref:System.Resources.ResourceReader.GetEnumerator%2A> (méthode), qui retourne un <xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType> objet.</span><span class="sxs-lookup"><span data-stu-id="1cf55-130">To enumerate the resources in a .resources file, you call the <xref:System.Resources.ResourceReader.GetEnumerator%2A> method, which returns an <xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType> object.</span></span> <span data-ttu-id="1cf55-131">Vous appelez le `IDictionaryEnumerator.MoveNext` méthode pour passer d’une ressource à l’autre.</span><span class="sxs-lookup"><span data-stu-id="1cf55-131">You call the `IDictionaryEnumerator.MoveNext` method to move from one resource to the next.</span></span> <span data-ttu-id="1cf55-132">La méthode retourne `false` lorsque toutes les ressources dans le fichier .resources ont été énumérés.</span><span class="sxs-lookup"><span data-stu-id="1cf55-132">The method returns `false` when all the resources in the .resources file have been enumerated.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1cf55-133">Bien que le <xref:System.Resources.ResourceReader> la classe implémente le <xref:System.Collections.IEnumerable> interface et le <xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=nameWithType> (méthode), le <xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType> ne fournit pas de méthode le <xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=nameWithType> implémentation.</span><span class="sxs-lookup"><span data-stu-id="1cf55-133">Although the <xref:System.Resources.ResourceReader> class implements the <xref:System.Collections.IEnumerable> interface and the <xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=nameWithType> method, the <xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType> method does not provide the <xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=nameWithType> implementation.</span></span> <span data-ttu-id="1cf55-134">Au lieu de cela, le <xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType> méthode retourne un <xref:System.Collections.IDictionaryEnumerator> objet d’interface qui fournit l’accès à la paire nom/valeur de chaque ressource.</span><span class="sxs-lookup"><span data-stu-id="1cf55-134">Instead, the <xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType> method  returns an <xref:System.Collections.IDictionaryEnumerator> interface object that provides access to each resource's name/value pair.</span></span>  
  
 <span data-ttu-id="1cf55-135">Vous pouvez récupérer les ressources individuelles dans la collection de deux manières :</span><span class="sxs-lookup"><span data-stu-id="1cf55-135">You can retrieve the individual resources in the collection in two ways:</span></span>  
  
-   <span data-ttu-id="1cf55-136">Vous pouvez effectuer une itération de chaque ressource dans le <xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType> collecte et utilisation <xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType> propriétés à récupérer le nom de la ressource et la valeur.</span><span class="sxs-lookup"><span data-stu-id="1cf55-136">You can iterate each resource in the <xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType> collection and use <xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType> properties to retrieve the resource name and value.</span></span> <span data-ttu-id="1cf55-137">Nous recommandons cette technique lorsque toutes les ressources sont du même type, ou si vous connaissez le type de données de chaque ressource.</span><span class="sxs-lookup"><span data-stu-id="1cf55-137">We recommend this technique when all the resources are of the same type, or you know the data type of each resource.</span></span>  
  
-   <span data-ttu-id="1cf55-138">Vous pouvez récupérer le nom de chaque ressource lorsque vous itérez les <xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType> collection et appeler le <xref:System.Resources.ResourceReader.GetResourceData%2A> méthode pour récupérer les données de la ressource.</span><span class="sxs-lookup"><span data-stu-id="1cf55-138">You can retrieve the name of each resource when you iterate the <xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType> collection and call the <xref:System.Resources.ResourceReader.GetResourceData%2A> method to retrieve the resource's data.</span></span> <span data-ttu-id="1cf55-139">Nous recommandons cette approche lorsque vous ne connaissez pas le type de données de chaque ressource ou si l’approche précédente lève des exceptions.</span><span class="sxs-lookup"><span data-stu-id="1cf55-139">We recommend this approach when you do not know the data type of each resource or if the previous approach throws exceptions.</span></span>  
  
<a name="idictionaryenumerator"></a>   
### <a name="retrieving-resources-by-using-idictionaryenumerator-properties"></a><span data-ttu-id="1cf55-140">Récupérer des ressources à l’aide des propriétés de IDictionaryEnumerator</span><span class="sxs-lookup"><span data-stu-id="1cf55-140">Retrieving Resources by Using IDictionaryEnumerator Properties</span></span>  
 <span data-ttu-id="1cf55-141">La première méthode d’énumérer les ressources dans un fichier .resources implique de récupérer directement la paire nom/valeur de chaque ressource.</span><span class="sxs-lookup"><span data-stu-id="1cf55-141">The first method of enumerating the resources in a .resources file involves directly retrieving each resource's name/value pair.</span></span> <span data-ttu-id="1cf55-142">Après avoir appelé la `IDictionaryEnumerator.MoveNext` nom de méthode pour déplacer vers chaque ressource dans la collection, vous pouvez récupérer la ressource à partir de la <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> propriété et les données de ressources à partir de la <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> propriété.</span><span class="sxs-lookup"><span data-stu-id="1cf55-142">After you call the `IDictionaryEnumerator.MoveNext` method to move to each resource in the collection, you can retrieve the resource name from the <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> property and the resource data from the <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="1cf55-143">L’exemple suivant montre comment récupérer le nom et la valeur de chaque ressource dans un fichier .resources à l’aide de la <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> et <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> propriétés.</span><span class="sxs-lookup"><span data-stu-id="1cf55-143">The following example shows how to retrieve the name and value of each resource in a .resources file by using the <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> and <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> properties.</span></span> <span data-ttu-id="1cf55-144">Pour exécuter l’exemple, créez le fichier texte suivant, nommé ApplicationResources.txt pour définir des ressources de type chaîne.</span><span class="sxs-lookup"><span data-stu-id="1cf55-144">To run the example, create the following text file named ApplicationResources.txt to define string resources.</span></span>  
  
```  
Title="Contact Information"  
Label1="First Name:"  
Label2="Middle Name:"  
Label3="Last Name:"  
Label4="SSN:"  
Label5="Street Address:"  
Label6="City:"  
Label7="State:"  
Label8="Zip Code:"  
Label9="Home Phone:"  
Label10="Business Phone:"  
Label11="Mobile Phone:"  
Label12="Other Phone:"  
Label13="Fax:"  
Label14="Email Address:"  
Label15="Alternate Email Address:"  
```  
  
 <span data-ttu-id="1cf55-145">Vous pouvez ensuite convertir le fichier de ressources de texte dans un fichier binaire nommé ApplicationResources.resources à l’aide de la commande suivante :</span><span class="sxs-lookup"><span data-stu-id="1cf55-145">You can then convert the text resource file to a binary file named ApplicationResources.resources by using the following command:</span></span>  
  
 <span data-ttu-id="1cf55-146">**Resgen ApplicationResources.txt**</span><span class="sxs-lookup"><span data-stu-id="1cf55-146">**resgen ApplicationResources.txt**</span></span>  
  
 <span data-ttu-id="1cf55-147">L’exemple suivant utilise ensuite la <xref:System.Resources.ResourceReader> classe énumérer chaque ressource dans le fichier .resources binaire et afficher son nom de la clé et sa valeur correspondante.</span><span class="sxs-lookup"><span data-stu-id="1cf55-147">The following example then uses the <xref:System.Resources.ResourceReader> class to enumerate each resource in the standalone binary .resources file and to display its key name and corresponding value.</span></span>  
  
 [!code-csharp[System.Resources.ResourceReader.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/class1.cs#1)]
 [!code-vb[System.Resources.ResourceReader.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/class1.vb#1)]  
  
 <span data-ttu-id="1cf55-148">La tentative d’extraction de données de ressources à partir de la <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> propriété peut lever les exceptions suivantes :</span><span class="sxs-lookup"><span data-stu-id="1cf55-148">The attempt to retrieve resource data from the <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> property can throw the following exceptions:</span></span>  
  
-   <span data-ttu-id="1cf55-149">Un <xref:System.FormatException> si les données ne sont pas au format attendu.</span><span class="sxs-lookup"><span data-stu-id="1cf55-149">A <xref:System.FormatException> if the data is not in the expected format.</span></span>  
  
-   <span data-ttu-id="1cf55-150">Un <xref:System.IO.FileNotFoundException> si l’assembly qui contient le type auquel appartiennent les données ne peut pas être trouvé.</span><span class="sxs-lookup"><span data-stu-id="1cf55-150">A <xref:System.IO.FileNotFoundException> if the assembly that contains the type to which the data belongs cannot be found.</span></span>  
  
-   <span data-ttu-id="1cf55-151">Un <xref:System.TypeLoadException> si le type auquel appartiennent les données ne peut pas être est introuvable.</span><span class="sxs-lookup"><span data-stu-id="1cf55-151">A <xref:System.TypeLoadException> if the type to which the data belongs cannot be cannot be found.</span></span>  
  
 <span data-ttu-id="1cf55-152">En règle générale, ces exceptions sont levées si le fichier .resources a été modifié manuellement, si l’assembly dans lequel un type est défini n’a ne pas été inclus dans une application ou a été supprimé par inadvertance, ou si l’assembly est une ancienne version est antérieure à un type.</span><span class="sxs-lookup"><span data-stu-id="1cf55-152">Typically, these exceptions are thrown if the .resources file has been modified manually, if the assembly in which a type is defined has either not been included with an application or has been inadvertently deleted, or if the assembly is an older version that predates a type.</span></span> <span data-ttu-id="1cf55-153">Si une de ces exceptions est levée, vous pouvez récupérer des ressources en énumérant chaque ressource et en appelant le <xref:System.Resources.ResourceReader.GetResourceData%2A> méthode, comme indiqué dans la section suivant.</span><span class="sxs-lookup"><span data-stu-id="1cf55-153">If one of these exceptions is thrown, you can retrieve resources by enumerating each resource and calling the <xref:System.Resources.ResourceReader.GetResourceData%2A> method, as the following section shows.</span></span> <span data-ttu-id="1cf55-154">Cette approche fournit des informations sur les données frappe qui le <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> propriété a tenté de retourner.</span><span class="sxs-lookup"><span data-stu-id="1cf55-154">This approach provides you with some information about the data type that the <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> property attempted to return.</span></span>  
  
<a name="getresourcedata"></a>   
### <a name="retrieving-resources-by-name-with-getresourcedata"></a><span data-ttu-id="1cf55-155">Récupération de ressources par nom avec GetResourceData</span><span class="sxs-lookup"><span data-stu-id="1cf55-155">Retrieving Resources by Name with GetResourceData</span></span>  
 <span data-ttu-id="1cf55-156">La deuxième approche de l’énumération des ressources dans un fichier .resources implique également de parcourir les ressources dans le fichier en appelant le `IDictionaryEnumerator.MoveNext` (méthode).</span><span class="sxs-lookup"><span data-stu-id="1cf55-156">The second approach to enumerating resources in a .resources file also involves navigating through the resources in the file by calling the `IDictionaryEnumerator.MoveNext` method.</span></span> <span data-ttu-id="1cf55-157">Pour chaque ressource, vous récupérez le nom de ressource à partir de la <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> propriété, qui est ensuite transmise à la <xref:System.Resources.ResourceReader.GetResourceData%28System.String%2CSystem.String%40%2CSystem.Byte%5B%5D%40%29> méthode pour récupérer les données de la ressource.</span><span class="sxs-lookup"><span data-stu-id="1cf55-157">For each resource, you retrieve the resource's name from the <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> property, which is then passed to the <xref:System.Resources.ResourceReader.GetResourceData%28System.String%2CSystem.String%40%2CSystem.Byte%5B%5D%40%29> method to retrieve the resource's data.</span></span> <span data-ttu-id="1cf55-158">Cette valeur est retournée en tant que tableau d’octets dans le `resourceData` argument.</span><span class="sxs-lookup"><span data-stu-id="1cf55-158">This is returned as a byte array in the `resourceData` argument.</span></span>  
  
 <span data-ttu-id="1cf55-159">Cette approche est plus délicat à récupérer le nom de la ressource et la valeur à partir de la <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> et <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> propriétés, car elle retourne les octets réels qui forment la valeur de ressource.</span><span class="sxs-lookup"><span data-stu-id="1cf55-159">This approach is more awkward than retrieving the resource name and value from the <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> and <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> properties, because it returns the actual bytes that form the resource value.</span></span> <span data-ttu-id="1cf55-160">Toutefois, si la tentative d’extraction de la ressource lève une exception, le <xref:System.Resources.ResourceReader.GetResourceData%2A> méthode permet d’identifier la source de l’exception en fournissant des informations sur le type de données de la ressource.</span><span class="sxs-lookup"><span data-stu-id="1cf55-160">However, if the attempt to retrieve the resource throws an exception, the <xref:System.Resources.ResourceReader.GetResourceData%2A> method can help identify the source of the exception by supplying information about the resource's data type.</span></span> <span data-ttu-id="1cf55-161">Pour plus d’informations sur la chaîne qui indique le type de données de la ressource, consultez <xref:System.Resources.ResourceReader.GetResourceData%2A>.</span><span class="sxs-lookup"><span data-stu-id="1cf55-161">For more information about the string that indicates the resource's data type, see <xref:System.Resources.ResourceReader.GetResourceData%2A>.</span></span>  
  
 <span data-ttu-id="1cf55-162">L’exemple suivant illustre comment utiliser cette approche pour récupérer des ressources et pour gérer les exceptions sont levées.</span><span class="sxs-lookup"><span data-stu-id="1cf55-162">The following example illustrates how to use this approach to retrieve resources and to handle any exceptions that are thrown.</span></span> <span data-ttu-id="1cf55-163">Il crée par programmation un fichier .resources binaire qui contient quatre chaînes, une valeur booléenne, un entier, une seule bitmap et une personnalisée `DateTimeTZI` objet.</span><span class="sxs-lookup"><span data-stu-id="1cf55-163">It programmatically creates a binary .resources file that contains four strings, one Boolean, one integer, one bitmap, and one custom `DateTimeTZI` object.</span></span> <span data-ttu-id="1cf55-164">Pour exécuter l’exemple, procédez comme suit :</span><span class="sxs-lookup"><span data-stu-id="1cf55-164">To run the example, do the following:</span></span>  
  
1.  <span data-ttu-id="1cf55-165">Créer un assembly nommé Library.dll qui contient le `DateTimeTZI` structure.</span><span class="sxs-lookup"><span data-stu-id="1cf55-165">Create an assembly named Library.dll that contains the `DateTimeTZI` structure.</span></span> <span data-ttu-id="1cf55-166">Voici le code source pour l’assembly.</span><span class="sxs-lookup"><span data-stu-id="1cf55-166">The following is the source code for the assembly.</span></span>  
  
     [!code-csharp[System.Resources.ResourceReader.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/library.cs#4)]
     [!code-vb[System.Resources.ResourceReader.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/library.vb#4)]  
  
     <span data-ttu-id="1cf55-167">Compilez le code source en c# à l’aide de la commande suivante :</span><span class="sxs-lookup"><span data-stu-id="1cf55-167">Compile the source code in C# by using the following command:</span></span>  
  
    ```  
    csc /t:library library.cs  
    ```  
  
     <span data-ttu-id="1cf55-168">Ou bien, vous pouvez les compiler dans Visual Basic à l’aide de la commande suivante :</span><span class="sxs-lookup"><span data-stu-id="1cf55-168">Or, you can compile it in Visual Basic by using the following command:</span></span>  
  
    ```  
    vbc library.vb /t:library  
    ```  
  
2.  <span data-ttu-id="1cf55-169">Compilez et exécutez le code source suivant, qui crée un fichier .resources nommé ContactResources.resources.</span><span class="sxs-lookup"><span data-stu-id="1cf55-169">Compile and execute the following source code, which creates a .resources file named ContactResources.resources.</span></span>  
  
     [!code-csharp[System.Resources.ResourceReader.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/createresourceex1.cs#5)]
     [!code-vb[System.Resources.ResourceReader.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/createresourceex1.vb#5)]  
  
     <span data-ttu-id="1cf55-170">Le fichier de code source est nommé CreateResources.cs.</span><span class="sxs-lookup"><span data-stu-id="1cf55-170">The source code file is named CreateResources.cs.</span></span> <span data-ttu-id="1cf55-171">Vous pouvez compiler qu’il en c# à l’aide de la commande suivante :</span><span class="sxs-lookup"><span data-stu-id="1cf55-171">You can compile it in C# by using the following command:</span></span>  
  
    ```  
    csc CreateResources.cs /r:library.dll  
    ```  
  
     <span data-ttu-id="1cf55-172">Ou bien, vous pouvez les compiler dans Visual Basic à l’aide de la commande suivante :</span><span class="sxs-lookup"><span data-stu-id="1cf55-172">Or, you can compile it in Visual Basic by using the following command:</span></span>  
  
    ```  
    vbc CreateResources.vb /r:library.dll  
    ```  
  
3.  <span data-ttu-id="1cf55-173">Compilez et exécutez le code suivant pour énumérer les ressources dans le fichier ContactResources.resources.</span><span class="sxs-lookup"><span data-stu-id="1cf55-173">Compile and run the following code to enumerate the resources in the ContactResources.resources file.</span></span>  
  
     [!code-csharp[System.Resources.ResourceReader.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/readresourceex1.cs#6)]
     [!code-vb[System.Resources.ResourceReader.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/readresourceex1.vb#6)]  
  
     <span data-ttu-id="1cf55-174">Après avoir modifié le code source (par exemple, en levant délibérément un <xref:System.FormatException> à la fin de la `try` bloc) ou de la modification du nom de l’assembly Library.dll afin qu’il n’est pas disponible lors de l’exécution, vous pouvez exécuter l’exemple pour voir comment les appels à <xref:System.Resources.ResourceReader.GetResourceData%2A> permettent de récupérer ou recréer des informations de ressource.</span><span class="sxs-lookup"><span data-stu-id="1cf55-174">After modifying the source code (for example, by deliberately throwing a <xref:System.FormatException> at the end of the `try` block) or renaming the Library.dll assembly so that it is unavailable at runtime, you can run the example to see how calls to <xref:System.Resources.ResourceReader.GetResourceData%2A> enable you to retrieve or recreate some resource information.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="1cf55-175">Initialise une nouvelle instance de la classe <see cref="T:System.Resources.ResourceReader" />.</span><span class="sxs-lookup"><span data-stu-id="1cf55-175">Initializes a new instance of the <see cref="T:System.Resources.ResourceReader" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="1cf55-176">[!INCLUDE [untrusted-data-instance-note](~/includes/untrusted-data-instance-note.md)].</span><span class="sxs-lookup"><span data-stu-id="1cf55-176">[!INCLUDE [untrusted-data-instance-note](~/includes/untrusted-data-instance-note.md)].</span></span>
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ResourceReader (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ResourceReader(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="new System.Resources.ResourceReader : System.IO.Stream -&gt; System.Resources.ResourceReader" Usage="new System.Resources.ResourceReader stream" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="1cf55-177">Flux d'entrée pour lire des ressources.</span><span class="sxs-lookup"><span data-stu-id="1cf55-177">The input stream for reading resources.</span></span></param>
        <summary><span data-ttu-id="1cf55-178">Initialise une nouvelle instance de la classe <see cref="T:System.Resources.ResourceReader" /> pour le flux spécifié.</span><span class="sxs-lookup"><span data-stu-id="1cf55-178">Initializes a new instance of the <see cref="T:System.Resources.ResourceReader" /> class for the specified stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1cf55-179">Le <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> constructeur instancie un <xref:System.Resources.ResourceReader> objet qui Récupère les ressources à partir d’un fichier .resources ou de .resources fichier qui est incorporé dans un assembly.</span><span class="sxs-lookup"><span data-stu-id="1cf55-179">The <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> constructor instantiates a <xref:System.Resources.ResourceReader> object that retrieves resources either from a standalone .resources file or from a .resources file that is embedded in an assembly.</span></span> <span data-ttu-id="1cf55-180">Pour lire à partir d’un fichier .resources, instanciez un <xref:System.IO.Stream> de l’objet et transmettez-le à la <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> constructeur.</span><span class="sxs-lookup"><span data-stu-id="1cf55-180">To read from a standalone .resources file, instantiate a <xref:System.IO.Stream> object and pass it to the <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> constructor.</span></span> <span data-ttu-id="1cf55-181">Pour lire à partir d’un fichier .resources incorporé, appelez le <xref:System.Reflection.Assembly.GetManifestResourceStream%2A?displayProperty=nameWithType> méthode portant le nom de la casse du fichier .resources et pass retourné <xref:System.IO.Stream> de l’objet à le <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> constructeur.</span><span class="sxs-lookup"><span data-stu-id="1cf55-181">To read from an embedded .resources file, call the <xref:System.Reflection.Assembly.GetManifestResourceStream%2A?displayProperty=nameWithType> method with the case-sensitive name of the .resources file, and pass the returned <xref:System.IO.Stream> object to the <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> constructor.</span></span>  
  
[!INCLUDE [untrusted-data-instance-note](~/includes/untrusted-data-instance-note.md)]
  
## Examples  
 <span data-ttu-id="1cf55-182">L’exemple dans cette section utilise le fichier .txt suivant nommé `PatientForm.txt` pour définir les ressources utilisées par une application.</span><span class="sxs-lookup"><span data-stu-id="1cf55-182">The example in this section uses the following .txt file named `PatientForm.txt` to define the resources used by an application.</span></span>  
  
```  
  
Title="Top Pet Animal Clinic"  
Label1="Patient Number:"  
Label2="Pet Name:"  
Label3="Species:"  
Label4="Breed:"  
Label5="Date of Birth:"  
Label6="Age:"  
Label7="Owner:"  
Label8="Address:"  
Label9="Home Phone:"  
Label10="Work Phone:"  
Label11="Mobile Phone:"  
  
```  
  
 <span data-ttu-id="1cf55-183">Vous pouvez compiler le fichier .txt en fichier .resources en émettant la commande suivante :</span><span class="sxs-lookup"><span data-stu-id="1cf55-183">You can compile the .txt file into a .resources file by issuing the following command:</span></span>  
  
 <span data-ttu-id="1cf55-184">**Resgen PatientForm.txt**</span><span class="sxs-lookup"><span data-stu-id="1cf55-184">**resgen PatientForm.txt**</span></span>  
  
 <span data-ttu-id="1cf55-185">L’exemple suivant suppose que le fichier de ressources est incorporé dans l’assembly qui contient le code exécutable de l’application.</span><span class="sxs-lookup"><span data-stu-id="1cf55-185">The following example assumes that the resource file is embedded in the assembly that contains the application's executable code.</span></span> <span data-ttu-id="1cf55-186">Il récupère un fichier de ressources nommé `PatientForm.resources` à partir des assemblys en cours d’exécution et affiche le nom et la valeur de chacune de ses ressources.</span><span class="sxs-lookup"><span data-stu-id="1cf55-186">It retrieves a resource file named `PatientForm.resources` from the currently executing assemblies and displays the name and value of each of its resources.</span></span>  
  
 [!code-csharp[System.Resources.ResourceReader.Ctor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/cs/stream1.cs#1)]
 [!code-vb[System.Resources.ResourceReader.Ctor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/vb/stream1.vb#1)]  
  
 <span data-ttu-id="1cf55-187">Si l’exemple c# est nommé `Example.cs`, vous pouvez la compiler à l’aide de la commande suivante :</span><span class="sxs-lookup"><span data-stu-id="1cf55-187">If the C# example is named `Example.cs`, you can compile it by using the following command:</span></span>  
  
 <span data-ttu-id="1cf55-188">**csc Example.cs /res:PatientForm.resources**</span><span class="sxs-lookup"><span data-stu-id="1cf55-188">**csc Example.cs /res:PatientForm.resources**</span></span>  
  
 <span data-ttu-id="1cf55-189">Si l’exemple Visual Basic se nomme `Example.vb`, vous pouvez la compiler à l’aide de la commande suivante :</span><span class="sxs-lookup"><span data-stu-id="1cf55-189">If the Visual Basic example is named `Example.vb`, you can compile it by using the following command:</span></span>  
  
 <span data-ttu-id="1cf55-190">**vbc Example.vb /res:PatientForm.resources**</span><span class="sxs-lookup"><span data-stu-id="1cf55-190">**vbc Example.vb /res:PatientForm.resources**</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1cf55-191">Le paramètre <paramref name="stream" /> n'est pas accessible en lecture.</span><span class="sxs-lookup"><span data-stu-id="1cf55-191">The <paramref name="stream" /> parameter is not readable.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1cf55-192">Le paramètre <paramref name="stream" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="1cf55-192">The <paramref name="stream" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="1cf55-193">Une erreur d'E/S s'est produite lors de l'accès à <paramref name="stream" />.</span><span class="sxs-lookup"><span data-stu-id="1cf55-193">An I/O error has occurred while accessing <paramref name="stream" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="1cf55-194">pour fournir des services de sérialisation.</span><span class="sxs-lookup"><span data-stu-id="1cf55-194">for providing serialization services.</span></span> <span data-ttu-id="1cf55-195">Action de sécurité : <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span><span class="sxs-lookup"><span data-stu-id="1cf55-195">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span></span> <span data-ttu-id="1cf55-196">Énumération associée : <see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" /></span><span class="sxs-lookup"><span data-stu-id="1cf55-196">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" /></span></span></permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="1cf55-197">requiert une confiance totale pour l’appelant immédiat.</span><span class="sxs-lookup"><span data-stu-id="1cf55-197">requires full trust for the immediate caller.</span></span> <span data-ttu-id="1cf55-198">Ce membre ne peut pas être utilisé par le code de confiance partielle ou transparent.</span><span class="sxs-lookup"><span data-stu-id="1cf55-198">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Reflection.Assembly.GetManifestResourceStream(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ResourceReader (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ResourceReader(System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="new System.Resources.ResourceReader : string -&gt; System.Resources.ResourceReader" Usage="new System.Resources.ResourceReader fileName" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName"><span data-ttu-id="1cf55-199">Chemin d’accès et nom du fichier de ressources à lire.</span><span class="sxs-lookup"><span data-stu-id="1cf55-199">The path and name of the resource file to read.</span></span> <span data-ttu-id="1cf55-200"><c>filename</c> ne respecte pas la casse.</span><span class="sxs-lookup"><span data-stu-id="1cf55-200"><c>filename</c> is not case-sensitive.</span></span></param>
        <summary><span data-ttu-id="1cf55-201">Initialise une nouvelle instance de la classe <see cref="T:System.Resources.ResourceReader" /> pour le fichier de ressources nommé spécifié.</span><span class="sxs-lookup"><span data-stu-id="1cf55-201">Initializes a new instance of the <see cref="T:System.Resources.ResourceReader" /> class for the specified named resource file.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1cf55-202">Le <xref:System.Resources.ResourceReader.%23ctor%28System.String%29> constructeur instancie un <xref:System.Resources.ResourceReader> objet qui Récupère les ressources à partir d’un fichier .resources.</span><span class="sxs-lookup"><span data-stu-id="1cf55-202">The <xref:System.Resources.ResourceReader.%23ctor%28System.String%29> constructor instantiates a <xref:System.Resources.ResourceReader> object that retrieves resources from a standalone .resources file.</span></span> <span data-ttu-id="1cf55-203">Pour récupérer des ressources à partir d’un fichier .resources incorporé, utilisez la <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> constructeur.</span><span class="sxs-lookup"><span data-stu-id="1cf55-203">To retrieve resources from an embedded .resources file, use the <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> constructor.</span></span>  

[!INCLUDE [untrusted-data-instance-note](~/includes/untrusted-data-instance-note.md)]

## Examples  
 <span data-ttu-id="1cf55-204">L’exemple dans cette section utilise le fichier .txt suivant nommé `PatientForm.txt` pour définir les ressources utilisées par une application.</span><span class="sxs-lookup"><span data-stu-id="1cf55-204">The example in this section uses the following .txt file named `PatientForm.txt` to define the resources used by an application.</span></span>  
  
```  
  
Title="Top Pet Animal Clinic"  
Label1="Patient Number:"  
Label2="Pet Name:"  
Label3="Species:"  
Label4="Breed:"  
Label5="Date of Birth:"  
Label6="Age:"  
Label7="Owner:"  
Label8="Address:"  
Label9="Home Phone:"  
Label10="Work Phone:"  
Label11="Mobile Phone:"  
  
```  
  
 <span data-ttu-id="1cf55-205">Vous pouvez compiler ce fichier .txt en fichier .resources en émettant la commande suivante :</span><span class="sxs-lookup"><span data-stu-id="1cf55-205">You can compile this .txt file into a .resources file by issuing the following command:</span></span>  
  
 <span data-ttu-id="1cf55-206">**Resgen PatientForm.txt**</span><span class="sxs-lookup"><span data-stu-id="1cf55-206">**resgen PatientForm.txt**</span></span>  
  
 <span data-ttu-id="1cf55-207">L’exemple suivant énumère les ressources dans `PatientForm.resources` et affiche le nom et la valeur de chacun d’eux.</span><span class="sxs-lookup"><span data-stu-id="1cf55-207">The following example enumerates the resources in `PatientForm.resources` and displays the name and value of each.</span></span>  
  
 [!code-csharp[System.Resources.ResourceReader.Ctor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/cs/stream2.cs#2)]
 [!code-vb[System.Resources.ResourceReader.Ctor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/vb/stream2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1cf55-208">Le paramètre <paramref name="fileName" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="1cf55-208">The <paramref name="fileName" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="1cf55-209">Impossible de trouver le fichier.</span><span class="sxs-lookup"><span data-stu-id="1cf55-209">The file cannot be found.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="1cf55-210">Une erreur d’E/S s’est produite.</span><span class="sxs-lookup"><span data-stu-id="1cf55-210">An I/O error has occurred.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="1cf55-211">Le format du fichier de ressources n'est pas valide.</span><span class="sxs-lookup"><span data-stu-id="1cf55-211">The resource file has an invalid format.</span></span> <span data-ttu-id="1cf55-212">Par exemple, la longueur du fichier peut être égale à zéro.</span><span class="sxs-lookup"><span data-stu-id="1cf55-212">For example, the length of the file may be zero.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Close();" />
      <MemberSignature Language="F#" Value="abstract member Close : unit -&gt; unit&#xA;override this.Close : unit -&gt; unit" Usage="resourceReader.Close " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Resources.IResourceReader.Close</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1cf55-213">Libère toutes les ressources du système d'exploitation associées à cet objet <see cref="T:System.Resources.ResourceReader" />.</span><span class="sxs-lookup"><span data-stu-id="1cf55-213">Releases all operating system resources associated with this <see cref="T:System.Resources.ResourceReader" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1cf55-214"><xref:System.Resources.ResourceReader.Close%2A> peut être appelée en toute sécurité plusieurs fois.</span><span class="sxs-lookup"><span data-stu-id="1cf55-214"><xref:System.Resources.ResourceReader.Close%2A> can be safely called multiple times.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1cf55-215">L’exemple suivant déplace via des ressources d’un fichier et affiche toutes les paires clé/valeur qu’il trouve.</span><span class="sxs-lookup"><span data-stu-id="1cf55-215">The following example moves through a file's resources and displays all the key/value pairs it finds.</span></span> <span data-ttu-id="1cf55-216">Le code utilise ensuite la <xref:System.Resources.ResourceReader.Close%2A> méthode pour arrêter le <xref:System.Resources.ResourceReader> et libérer toutes les ressources utilisées par ce dernier.</span><span class="sxs-lookup"><span data-stu-id="1cf55-216">The code then uses the <xref:System.Resources.ResourceReader.Close%2A> method to shut down the <xref:System.Resources.ResourceReader> and to release all resources used by it.</span></span>  
  
 [!code-cpp[System.Resources.ResourceReader.GetEnumerator Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Resources.ResourceReader.GetEnumerator Example/CPP/getenumerator.cpp#1)]
 [!code-csharp[System.Resources.ResourceReader.GetEnumerator Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Resources.ResourceReader.GetEnumerator Example/CS/getenumerator.cs#1)]
 [!code-vb[System.Resources.ResourceReader.GetEnumerator Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Resources.ResourceReader.GetEnumerator Example/VB/getenumerator.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="resourceReader.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1cf55-217">Libère toutes les ressources utilisées par l'instance actuelle de la classe <see cref="T:System.Resources.ResourceReader" />.</span><span class="sxs-lookup"><span data-stu-id="1cf55-217">Releases all resources used by the current instance of the <see cref="T:System.Resources.ResourceReader" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1cf55-218">Lorsque vous avez terminé à l’aide de cette instance de <xref:System.Resources.ResourceReader>, appelez <xref:System.Resources.ResourceReader.Dispose%2A> pour libérer toutes les ressources utilisées par cette instance.</span><span class="sxs-lookup"><span data-stu-id="1cf55-218">When you are finished using this instance of <xref:System.Resources.ResourceReader>, call <xref:System.Resources.ResourceReader.Dispose%2A> to release all resources used by this instance.</span></span> <span data-ttu-id="1cf55-219">Vous devez supprimer les références à ce <xref:System.Resources.ResourceReader> afin que le garbage collector puisse récupérer la mémoire de l’instance au lieu de garder actif pour la finalisation de l’instance.</span><span class="sxs-lookup"><span data-stu-id="1cf55-219">You should eliminate further references to this <xref:System.Resources.ResourceReader> instance so that the garbage collector can reclaim the memory of the instance instead of keeping it alive for finalization.</span></span>  
  
 <span data-ttu-id="1cf55-220"><xref:System.Resources.ResourceReader.Dispose%2A> appelle la méthode Dispose (Boolean) privée, qui contient le code pour libérer les ressources managées et non managées.</span><span class="sxs-lookup"><span data-stu-id="1cf55-220"><xref:System.Resources.ResourceReader.Dispose%2A> calls the private Dispose(Boolean) method, which contains the code to release managed and unmanaged resources.</span></span> <span data-ttu-id="1cf55-221">Pour plus d’informations, consultez [implémentation d’une méthode Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).</span><span class="sxs-lookup"><span data-stu-id="1cf55-221">For more information, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IDictionaryEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IDictionaryEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IDictionaryEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IDictionaryEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.IDictionaryEnumerator&#xA;override this.GetEnumerator : unit -&gt; System.Collections.IDictionaryEnumerator" Usage="resourceReader.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Resources.IResourceReader.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionaryEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1cf55-222">Retourne un énumérateur pour cet objet <see cref="T:System.Resources.ResourceReader" />.</span><span class="sxs-lookup"><span data-stu-id="1cf55-222">Returns an enumerator for this <see cref="T:System.Resources.ResourceReader" /> object.</span></span></summary>
        <returns><span data-ttu-id="1cf55-223">Énumérateur pour cet objet <see cref="T:System.Resources.ResourceReader" />.</span><span class="sxs-lookup"><span data-stu-id="1cf55-223">An enumerator for this <see cref="T:System.Resources.ResourceReader" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1cf55-224">En règle générale, vous énumérer les ressources en appelant le <xref:System.Resources.ResourceReader.GetEnumerator%2A> méthode et appeler à plusieurs reprises la <xref:System.Collections.IEnumerator.MoveNext%2A> méthode sur retourné <xref:System.Collections.IDictionaryEnumerator> jusqu'à ce que la méthode retourne l’objet `false`.</span><span class="sxs-lookup"><span data-stu-id="1cf55-224">Typically, you enumerate resources by calling the <xref:System.Resources.ResourceReader.GetEnumerator%2A> method and then repeatedly calling the <xref:System.Collections.IEnumerator.MoveNext%2A> method on the returned <xref:System.Collections.IDictionaryEnumerator> object until the method returns `false`.</span></span> <span data-ttu-id="1cf55-225">Le nom de la ressource est disponible à partir de la <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> propriété ; sa valeur à partir de la <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> propriété.</span><span class="sxs-lookup"><span data-stu-id="1cf55-225">The resource name is available from the <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> property; its value from the <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="1cf55-226">L’exemple illustre comment énumérer les ressources de cette façon.</span><span class="sxs-lookup"><span data-stu-id="1cf55-226">The example illustrates how to enumerate resources in this way.</span></span>  
  
 <span data-ttu-id="1cf55-227">L’implémentation de la <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> propriété par le <xref:System.Resources.ResourceReader> classe peut lever les exceptions suivantes :</span><span class="sxs-lookup"><span data-stu-id="1cf55-227">The implementation of the <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> property by the <xref:System.Resources.ResourceReader> class can throw the following exceptions:</span></span>  
  
-   <xref:System.IO.FileNotFoundException>  
  
     <span data-ttu-id="1cf55-228">Impossible de trouver l’assembly qui contient le type auquel appartiennent les données.</span><span class="sxs-lookup"><span data-stu-id="1cf55-228">The assembly that contains the type to which the data belongs cannot be found.</span></span>  
  
-   <xref:System.FormatException>  
  
     <span data-ttu-id="1cf55-229">Les données ne sont pas au format attendu.</span><span class="sxs-lookup"><span data-stu-id="1cf55-229">The data is not in the expected format.</span></span>  
  
-   <xref:System.TypeLoadException>  
  
     <span data-ttu-id="1cf55-230">Impossible de trouver le type auquel appartiennent les données.</span><span class="sxs-lookup"><span data-stu-id="1cf55-230">The type to which the data belongs cannot be found.</span></span>  
  
 <span data-ttu-id="1cf55-231">Vous pouvez gérer l’exception en appelant le <xref:System.Resources.ResourceReader.GetResourceData%2A> méthode pour récupérer des informations sur le type de données et le tableau d’octets affectée à la ressource nommée.</span><span class="sxs-lookup"><span data-stu-id="1cf55-231">You can handle the exception by calling the <xref:System.Resources.ResourceReader.GetResourceData%2A> method to retrieve information about the data type and the byte array assigned to the named resource.</span></span> <span data-ttu-id="1cf55-232">Pour plus d’informations, consultez la section « Récupération des ressources par nom avec GetResourceData » dans le <xref:System.Resources.ResourceReader> rubrique de la classe.</span><span class="sxs-lookup"><span data-stu-id="1cf55-232">For more information, see the "Retrieving Resources by Name with GetResourceData" section in the <xref:System.Resources.ResourceReader> class topic.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1cf55-233">Le <xref:System.Resources.ResourceReader> classe inclut deux méthodes qui retournent des énumérateurs.</span><span class="sxs-lookup"><span data-stu-id="1cf55-233">The <xref:System.Resources.ResourceReader> class includes two methods that return enumerators.</span></span> <span data-ttu-id="1cf55-234">Le <xref:System.Resources.ResourceReader.GetEnumerator%2A> méthode retourne un <xref:System.Collections.IDictionaryEnumerator> objet d’interface et est la méthode recommandée pour appeler lorsque l’énumération des ressources.</span><span class="sxs-lookup"><span data-stu-id="1cf55-234">The <xref:System.Resources.ResourceReader.GetEnumerator%2A> method returns an <xref:System.Collections.IDictionaryEnumerator> interface object and is the recommended method to call when enumerating resources.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1cf55-235">L’exemple dans cette section utilise le fichier .txt suivant nommé `PatientForm.txt` pour définir les ressources utilisées par une application.</span><span class="sxs-lookup"><span data-stu-id="1cf55-235">The example in this section uses the following .txt file named `PatientForm.txt` to define the resources used by an application.</span></span>  
  
```  
  
Title="Top Pet Animal Clinic"  
Label1="Patient Number:"  
Label2="Pet Name:"  
Label3="Species:"  
Label4="Breed:"  
Label5="Date of Birth:"  
Label6="Age:"  
Label7="Owner:"  
Label8="Address:"  
Label9="Home Phone:"  
Label10="Work Phone:"  
Label11="Mobile Phone:"  
  
```  
  
 <span data-ttu-id="1cf55-236">Vous pouvez compiler le fichier .txt en fichier .resources en émettant la commande suivante :</span><span class="sxs-lookup"><span data-stu-id="1cf55-236">You can compile the .txt file into a .resources file by issuing the following command:</span></span>  
  
 <span data-ttu-id="1cf55-237">**Resgen PatientForm.txt**</span><span class="sxs-lookup"><span data-stu-id="1cf55-237">**resgen PatientForm.txt**</span></span>  
  
 <span data-ttu-id="1cf55-238">L’exemple suivant énumère les ressources dans `PatientForm.resources` et affiche le nom et la valeur de chacun d’eux.</span><span class="sxs-lookup"><span data-stu-id="1cf55-238">The following example enumerates the resources in `PatientForm.resources` and displays the name and value of each.</span></span>  
  
 [!code-csharp[System.Resources.ResourceReader.Ctor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/cs/stream2.cs#2)]
 [!code-vb[System.Resources.ResourceReader.Ctor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/vb/stream2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1cf55-239">Le lecteur a été fermé ou supprimé, et il n'est plus possible d'y accéder.</span><span class="sxs-lookup"><span data-stu-id="1cf55-239">The reader has been closed or disposed, and cannot be accessed.</span></span></exception>
        <altmember cref="T:System.Collections.IDictionary" />
        <altmember cref="T:System.Collections.IDictionaryEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="GetResourceData">
      <MemberSignature Language="C#" Value="public void GetResourceData (string resourceName, out string resourceType, out byte[] resourceData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void GetResourceData(string resourceName, [out] string&amp; resourceType, [out] unsigned int8[]&amp; resourceData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetResourceData (resourceName As String, ByRef resourceType As String, ByRef resourceData As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetResourceData(System::String ^ resourceName, [Runtime::InteropServices::Out] System::String ^ % resourceType, [Runtime::InteropServices::Out] cli::array &lt;System::Byte&gt; ^ % resourceData);" />
      <MemberSignature Language="F#" Value="member this.GetResourceData : string *  *  -&gt; unit" Usage="resourceReader.GetResourceData (resourceName, resourceType, resourceData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceName" Type="System.String" />
        <Parameter Name="resourceType" Type="System.String" RefType="out" />
        <Parameter Name="resourceData" Type="System.Byte[]" RefType="out" />
      </Parameters>
      <Docs>
        <param name="resourceName"><span data-ttu-id="1cf55-240">Nom d'une ressource.</span><span class="sxs-lookup"><span data-stu-id="1cf55-240">The name of a resource.</span></span></param>
        <param name="resourceType"><span data-ttu-id="1cf55-241">Quand cette méthode retourne une valeur, contient une chaîne qui représente le nom de type de la ressource récupérée.</span><span class="sxs-lookup"><span data-stu-id="1cf55-241">When this method returns, contains a string that represents the type name of the retrieved resource.</span></span> <span data-ttu-id="1cf55-242">Ce paramètre est passé sans être initialisé.</span><span class="sxs-lookup"><span data-stu-id="1cf55-242">This parameter is passed uninitialized.</span></span></param>
        <param name="resourceData"><span data-ttu-id="1cf55-243">Lorsque cette méthode est retournée, contient un tableau d'octets correspondant à la représentation binaire du type récupéré.</span><span class="sxs-lookup"><span data-stu-id="1cf55-243">When this method returns, contains a byte array that is the binary representation of the retrieved type.</span></span> <span data-ttu-id="1cf55-244">Ce paramètre est passé sans être initialisé.</span><span class="sxs-lookup"><span data-stu-id="1cf55-244">This parameter is passed uninitialized.</span></span></param>
        <summary><span data-ttu-id="1cf55-245">Récupère le nom du type et les données d'une ressource nommée à partir d'un fichier de ressources ouvert ou d'un flux.</span><span class="sxs-lookup"><span data-stu-id="1cf55-245">Retrieves the type name and data of a named resource from an open resource file or stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1cf55-246">Le <xref:System.Resources.ResourceReader.GetResourceData%2A> méthode récupère la valeur d’une ressource nommée en tant que tableau d’octets.</span><span class="sxs-lookup"><span data-stu-id="1cf55-246">The <xref:System.Resources.ResourceReader.GetResourceData%2A> method retrieves the value of a named resource as a byte array.</span></span> <span data-ttu-id="1cf55-247">Il est généralement utilisé lorsque le <xref:System.Collections.IDictionaryEnumerator.Value%2A> propriété lève une exception lorsqu’elle tente de récupérer la valeur d’une ressource.</span><span class="sxs-lookup"><span data-stu-id="1cf55-247">It is typically used when the <xref:System.Collections.IDictionaryEnumerator.Value%2A> property throws an exception when it tries to retrieve the value of a resource.</span></span>  
  
 <span data-ttu-id="1cf55-248">`resourceType` est une chaîne qui représente le type de données de la ressource.</span><span class="sxs-lookup"><span data-stu-id="1cf55-248">`resourceType` is a string that represents the data type of the resource.</span></span> <span data-ttu-id="1cf55-249">Il peut être une des valeurs suivantes :</span><span class="sxs-lookup"><span data-stu-id="1cf55-249">It can be any of the following values:</span></span>  
  
-   <span data-ttu-id="1cf55-250">La représentation sous forme de chaîne d’un `ResourceTypeCode` membre d’énumération qui indique le type de données de la ressource.</span><span class="sxs-lookup"><span data-stu-id="1cf55-250">The string representation of a `ResourceTypeCode` enumeration member that indicates the data type of the resource.</span></span> <span data-ttu-id="1cf55-251">`ResourceTypeCode` est une énumération privée qui est utilisée par .pour indiquer qu’un format binaire spécial est utilisé pour stocker un des types de données courants 19.</span><span class="sxs-lookup"><span data-stu-id="1cf55-251">`ResourceTypeCode` is a private enumeration that is used by .to indicate that a special binary format is used to store one of 19 common data types.</span></span> <span data-ttu-id="1cf55-252">Ceux-ci incluent les types de données primitifs .NET Framework (<xref:System.Boolean>, <xref:System.Byte>, <xref:System.Char>, <xref:System.Decimal>, <xref:System.Double>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.Int64>, <xref:System.Single>, <xref:System.SByte>, <xref:System.UInt16>, <xref:System.UInt32>, <xref:System.UInt64>), ainsi que <xref:System.String>, <xref:System.DateTime>, et <xref:System.TimeSpan>, en outre, le `ResourceTypeCode` énumération inclut les valeurs indiquées dans le tableau suivant.</span><span class="sxs-lookup"><span data-stu-id="1cf55-252">These include the .NET Framework primitive data types (<xref:System.Boolean>, <xref:System.Byte>, <xref:System.Char>, <xref:System.Decimal>, <xref:System.Double>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.Int64>, <xref:System.Single>, <xref:System.SByte>, <xref:System.UInt16>, <xref:System.UInt32>, <xref:System.UInt64>), as well as <xref:System.String>, <xref:System.DateTime>, and <xref:System.TimeSpan>, In addition, the `ResourceTypeCode` enumeration includes the values shown in the following table.</span></span>  
  
    |<span data-ttu-id="1cf55-253">Valeur de ResourceTypeCode</span><span class="sxs-lookup"><span data-stu-id="1cf55-253">ResourceTypeCode value</span></span>|<span data-ttu-id="1cf55-254">Description </span><span class="sxs-lookup"><span data-stu-id="1cf55-254">Description</span></span>|  
    |----------------------------|-----------------|  
    |`ResourceTypeCode.ByteArray`|<span data-ttu-id="1cf55-255">Les données sont un tableau d’octets.</span><span class="sxs-lookup"><span data-stu-id="1cf55-255">The data is a byte array.</span></span> <span data-ttu-id="1cf55-256">Cette type de données couramment des résultats de l’appel à la <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.Byte%5B%5D%29?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="1cf55-256">This data type commonly results from the call to the <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.Byte%5B%5D%29?displayProperty=nameWithType> method.</span></span>|  
    |`ResourceTypeCode.Null`|<span data-ttu-id="1cf55-257">Les données sont une référence null.</span><span class="sxs-lookup"><span data-stu-id="1cf55-257">The data is a null reference.</span></span> <span data-ttu-id="1cf55-258">Cette type de données couramment des résultats de l’appel à la <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.Object%29?displayProperty=nameWithType> méthode avec un objet dont la valeur est `null`.</span><span class="sxs-lookup"><span data-stu-id="1cf55-258">This data type commonly results from the call to the <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.Object%29?displayProperty=nameWithType> method with an object whose value is `null`.</span></span>|  
    |`ResourceTypeCode.Stream`|<span data-ttu-id="1cf55-259">Les données sont stockées dans un flux de données.</span><span class="sxs-lookup"><span data-stu-id="1cf55-259">The data is stored in a stream.</span></span> <span data-ttu-id="1cf55-260">Cette type de données couramment des résultats de l’appel à la <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.IO.Stream%29?displayProperty=nameWithType> ou <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.IO.Stream%2CSystem.Boolean%29?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="1cf55-260">This data type commonly results from the call to the <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.IO.Stream%29?displayProperty=nameWithType> or <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.IO.Stream%2CSystem.Boolean%29?displayProperty=nameWithType> method.</span></span>|  
  
     <span data-ttu-id="1cf55-261">En supposant que `resourceData` n’a pas été endommagé, il peut généralement être converti à partir d’un tableau d’octets à sa valeur d’origine en appelant un <xref:System.BitConverter> ou <xref:System.IO.BinaryReader> (méthode).</span><span class="sxs-lookup"><span data-stu-id="1cf55-261">Assuming that `resourceData` has not been corrupted, it can usually be converted from a byte array back to its original value by calling a <xref:System.BitConverter> or <xref:System.IO.BinaryReader> method.</span></span>  
  
-   <span data-ttu-id="1cf55-262">Chaîne qui contient le nom qualifié complet du type dont les données sérialisées sont affectées à la `resourceData` argument (par exemple, `System.String`).</span><span class="sxs-lookup"><span data-stu-id="1cf55-262">A string that contains the fully qualified name of the type whose serialized data is assigned to the `resourceData` argument (for example, `System.String`).</span></span> <span data-ttu-id="1cf55-263">En outre, pour les types qui ne font pas partie de la bibliothèque de classes .NET Framework, la chaîne inclut le nom, la version, la culture et la clé publique de l’assembly qui contient le type.</span><span class="sxs-lookup"><span data-stu-id="1cf55-263">In addition, for types that are not part of the .NET Framework class library, the string includes the name, version, culture, and public key of the assembly that contains the type.</span></span> <span data-ttu-id="1cf55-264">Par exemple, la chaîne suivante indique que les données sérialisées représentent une instance de la `Person` tapez dans la `Extensions` espace de noms, qui se trouve dans la version 1.0 d’un assembly nommé utilitaire qui a aucune clé publique et aucune culture désignée.</span><span class="sxs-lookup"><span data-stu-id="1cf55-264">For example, the following string indicates that the serialized data represents an instance of the `Person` type in the `Extensions` namespace, which is found in version 1.0 of an assembly named Utility that has no public key and no designated culture.</span></span>  
  
     `Extensions.Person, Utility, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null`  
  
     <span data-ttu-id="1cf55-265">En supposant que `resourceData` n’a pas été endommagée et que le type de source est disponible, `resourceData` peut être converti à partir d’un tableau d’octets à sa valeur d’origine en convertissant le tableau d’octets à un <xref:System.IO.Stream> objet et en passant le flux à la <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize%2A?displayProperty=nameWithType>(méthode).</span><span class="sxs-lookup"><span data-stu-id="1cf55-265">Assuming that `resourceData` has not been corrupted and that the source type is available, `resourceData` can be converted from a byte array back to its original value by converting the byte array to a <xref:System.IO.Stream> object and passing the stream to the <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize%2A?displayProperty=nameWithType> method.</span></span>  
  
-   <span data-ttu-id="1cf55-266">La chaîne utilisée pour décrire le type de données dans le <xref:System.Resources.ResourceWriter.AddResourceData%2A?displayProperty=nameWithType> appel de méthode.</span><span class="sxs-lookup"><span data-stu-id="1cf55-266">The string used to describe the data type in the <xref:System.Resources.ResourceWriter.AddResourceData%2A?displayProperty=nameWithType> method call.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1cf55-267"><paramref name="resourceName" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="1cf55-267"><paramref name="resourceName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="1cf55-268"><paramref name="resourceName" /> n’existe pas.</span><span class="sxs-lookup"><span data-stu-id="1cf55-268"><paramref name="resourceName" /> does not exist.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="1cf55-269"><paramref name="resourceName" /> a un type non valide.</span><span class="sxs-lookup"><span data-stu-id="1cf55-269"><paramref name="resourceName" /> has an invalid type.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="1cf55-270">Les données de ressources récupérées sont endommagées.</span><span class="sxs-lookup"><span data-stu-id="1cf55-270">The retrieved resource data is corrupt.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1cf55-271">L'objet <see cref="T:System.Resources.ResourceReader" /> actuel n'est pas initialisé, probablement parce qu'il est fermé.</span><span class="sxs-lookup"><span data-stu-id="1cf55-271">The current <see cref="T:System.Resources.ResourceReader" /> object is not initialized, probably because it is closed.</span></span></exception>
        <altmember cref="M:System.Resources.ResourceWriter.AddResourceData(System.String,System.String,System.Byte[])" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1cf55-272">Retourne un énumérateur pour cet objet <see cref="T:System.Resources.ResourceReader" />.</span><span class="sxs-lookup"><span data-stu-id="1cf55-272">Returns an enumerator for this <see cref="T:System.Resources.ResourceReader" /> object.</span></span></summary>
        <returns><span data-ttu-id="1cf55-273">Énumérateur pour cet objet <see cref="T:System.Resources.ResourceReader" />.</span><span class="sxs-lookup"><span data-stu-id="1cf55-273">An enumerator for this <see cref="T:System.Resources.ResourceReader" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1cf55-274"><xref:System.Resources.ResourceReader.System%23Collections%23IEnumerable%23GetEnumerator%2A?displayProperty=nameWithType> est une implémentation d’interface explicite.</span><span class="sxs-lookup"><span data-stu-id="1cf55-274"><xref:System.Resources.ResourceReader.System%23Collections%23IEnumerable%23GetEnumerator%2A?displayProperty=nameWithType> is an explicit interface implementation.</span></span> <span data-ttu-id="1cf55-275">Il peut uniquement être utilisé lorsque l'instance de <xref:System.Resources.ResourceReader> est castée en interface <xref:System.Collections.IEnumerable>.</span><span class="sxs-lookup"><span data-stu-id="1cf55-275">It can be used only when the <xref:System.Resources.ResourceReader> instance is cast to an <xref:System.Collections.IEnumerable> interface.</span></span> <span data-ttu-id="1cf55-276">L’approche recommandée pour l’énumération des ressources dans un fichier .resources consiste à appeler le <xref:System.Collections.IEnumerator.MoveNext%2A> méthode de la <xref:System.Collections.IDictionaryEnumerator> objet retourné par la <xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="1cf55-276">The recommended approach to enumerating the resources in a .resources file is to call the <xref:System.Collections.IEnumerator.MoveNext%2A> method of the <xref:System.Collections.IDictionaryEnumerator> object returned by the <xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1cf55-277">Le lecteur a déjà été fermé et il n'est plus possible d'y accéder.</span><span class="sxs-lookup"><span data-stu-id="1cf55-277">The reader has already been closed and cannot be accessed.</span></span></exception>
        <altmember cref="T:System.Collections.IDictionary" />
        <altmember cref="T:System.Collections.IDictionaryEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1cf55-278">Libère les ressources utilisées par le <see cref="T:System.Resources.ResourceReader" />.</span><span class="sxs-lookup"><span data-stu-id="1cf55-278">Releases the resources used by the <see cref="T:System.Resources.ResourceReader" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<span data-ttu-id="1cf55-279">Permet d’appeler Dispose les ressources utilisées par le <xref:System.Resources.ResourceReader> d’être réaffectées à d’autres fins.</span><span class="sxs-lookup"><span data-stu-id="1cf55-279">Calling Dispose allows the resources used by the <xref:System.Resources.ResourceReader> to be reallocated for other purposes.</span></span> <span data-ttu-id="1cf55-280">Pour plus d’informations sur la méthode Dispose, consultez [de nettoyage des ressources non managées](~/docs/standard/garbage-collection/unmanaged.md).</span><span class="sxs-lookup"><span data-stu-id="1cf55-280">For more information about Dispose, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</span></span>

## Examples  
<span data-ttu-id="1cf55-281">L’exemple de code suivant parcourt les ressources d’un fichier et imprime toutes les paires clé/valeur qu’il trouve.</span><span class="sxs-lookup"><span data-stu-id="1cf55-281">The following code example moves through a file's resources and prints out all the key/value pairs it finds.</span></span> <span data-ttu-id="1cf55-282">Le code utilise ensuite la méthode de theIDisposable.Dispose pour arrêter le <xref:System.Resources.ResourceReader> et libérer toutes les ressources utilisées par ce dernier.</span><span class="sxs-lookup"><span data-stu-id="1cf55-282">The code then uses theIDisposable.Dispose method to shut down the <xref:System.Resources.ResourceReader> and to release all resources used by it.</span></span>

```vb
Imports System
Imports System.Resources
Imports System.Collections

Public Class ReadResources

    Public Shared Sub Main(args() As String)
        ' Create a resource reader for items.resources 
        ' and get an enumerator to iterate through the file. 
        Dim reader As IResourceReader = New ResourceReader("items.resources")
        Dim en As IDictionaryEnumerator = reader.GetEnumerator()

        ' Iterate through the file, printing the key and value pairs. 
        While en.MoveNext()
            Console.WriteLine()
            Console.WriteLine("Name: {0}", en.Key)
            Console.WriteLine("Value: {0}", en.Value)
        End While 

        ' Clean up all resources associated with the reader. 
        ' Calling Dispose is equivalent to calling Close.
        reader.Dispose()
    End Sub 

End Class
```

```csharp
using System;
using System.Resources;
using System.Collections;

public class ReadResources 
{
    public static void Main(string[] args) 
    {
        // Create a resource reader for items.resources 
        // and get an enumerator to iterate through the file.
        IResourceReader reader = new ResourceReader("items.resources");
        IDictionaryEnumerator en = reader.GetEnumerator();

        // Iterate through the file, printing the key/value pairs. 
        while (en.MoveNext()) 
        {
            Console.WriteLine();
            Console.WriteLine("Name: {0}", en.Key);
            Console.WriteLine("Value: {0}", en.Value);
        }

        // Clean up all resources associated with the reader. 
        // Calling Dispose is equivalent to calling Close.
        reader.Dispose();
    }
}
```

```cpp
using namespace System;
using namespace System::Resources;
using namespace System::Collections;
int main()
{
   array<String^>^args = Environment::GetCommandLineArgs();

   // Create a resource reader for items.resources 
   // and get an enumerator to iterate through the file.
   IResourceReader^ reader = gcnew ResourceReader( "items.resources" );
   IDictionaryEnumerator^ en = reader->GetEnumerator();

   // Iterate through the file, printing the key/value pairs. 
   while ( en->MoveNext() )
   {
      Console::WriteLine();
      Console::WriteLine( "Name: {0}", en->Key );
      Console::WriteLine( "Value: {0}", en->Value );
   }

   // Clean up all resources associated with the reader. 
   // Calling the destructor is equivalent to calling Close.
   reader->~IResourceReader();
}
```

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>