<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ResourceReader.xml" source-language="en-US" target-language="fr-FR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5682738b4136d074223cbe025a9380b3cca9bc1d0.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">682738b4136d074223cbe025a9380b3cca9bc1d0</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Resources.ResourceReader">
          <source>Enumerates the resources in a binary resources (.resources) file by reading sequential resource name/value pairs.</source>
          <target state="translated">Énumère les ressources dans un fichier de ressources binaire (.resources) en lisant les paires nom/valeur séquentielles de ressources.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Resources.ResourceReader">
          <source><bpt id="p1">**</bpt>Security Note<ept id="p1">**</ept>: Calling methods in this class with untrusted data is a security risk.</source>
          <target state="translated"><bpt id="p1">**</bpt>Note de sécurité<ept id="p1">**</ept> : L’appel de méthodes dans cette classe avec des données non approuvées constitue un risque pour la sécurité.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="T:System.Resources.ResourceReader">
          <source>Call the methods in the class only with trusted data.</source>
          <target state="translated">Appelez les méthodes dans la classe uniquement avec des données approuvées.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" uid="T:System.Resources.ResourceReader">
          <source>For more information, see <bpt id="p1">[</bpt>Untrusted Data Security Risks<ept id="p1">](https://docs.com/rick-anderson-1/8710/untrusted-data-security-risks)</ept>.</source>
          <target state="translated">Pour plus d’informations, consultez <bpt id="p1">[</bpt>Risques de sécurité liés aux données non approuvées<ept id="p1">](https://docs.com/rick-anderson-1/8710/untrusted-data-security-risks)</ept>.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> class provides a standard implementation of the <ph id="ph2">&lt;xref:System.Resources.IResourceReader&gt;</ph> interface.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> classe fournit une implémentation standard de le <ph id="ph2">&lt;xref:System.Resources.IResourceReader&gt;</ph> interface.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>A <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> instance represents either a standalone .resources file or a .resources file that is embedded in an assembly.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> instance représente un fichier .resources ou un fichier .resources incorporé dans un assembly.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>It is used to enumerate the resources in a .resources file and retrieve its name/value pairs.</source>
          <target state="translated">Il est utilisé pour énumérer les ressources dans un fichier .resources et récupérer ses paires nom/valeur.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>It differs from the <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> class, which is used to retrieve specified named resources from a .resources file that is embedded in an assembly.</source>
          <target state="translated">Il diffère de la <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> (classe), qui est utilisée pour récupérer des ressources nommés spécifiés à partir d’un fichier .resources incorporé dans un assembly.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> class is used to retrieve resources whose names are known in advance, whereas the <ph id="ph2">&lt;xref:System.Resources.ResourceReader&gt;</ph> class is useful for retrieving resources whose number or precise names are not known at compile time.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> classe est utilisée pour récupérer les ressources dont les noms sont connus d’avance, alors que la <ph id="ph2">&lt;xref:System.Resources.ResourceReader&gt;</ph> classe est utile pour extraire des ressources dont nombre ou les noms exacts ne sont pas connus au moment de la compilation.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>For example, an application may use a resources file to store configuration information that is organized into sections and items in a section, where the number of sections or items in a section is not known in advance.</source>
          <target state="translated">Par exemple, une application peut utiliser un fichier de ressources pour stocker les informations de configuration qui sont organisées en sections et les éléments d’une section, où le nombre de sections ou d’éléments dans une section n’est pas connu à l’avance.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>Resources can then be named generically (such as <ph id="ph1">`Section1`</ph>, <ph id="ph2">`Section1Item1`</ph>, <ph id="ph3">`Section1Item2`</ph>, and so on) and retrieved by using a <ph id="ph4">&lt;xref:System.Resources.ResourceReader&gt;</ph> object.</source>
          <target state="translated">Ressources peuvent ensuite être nommés de manière générique (tel que <ph id="ph1">`Section1`</ph>, <ph id="ph2">`Section1Item1`</ph>, <ph id="ph3">`Section1Item2`</ph>, et ainsi de suite) et récupérés à l’aide un <ph id="ph4">&lt;xref:System.Resources.ResourceReader&gt;</ph> objet.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>This type implements the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface.</source>
          <target state="translated">Ce type implémente le <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>When you have finished using the type, you should dispose of it either directly or indirectly.</source>
          <target state="translated">Lorsque vous avez fini d’utiliser le type, vous devez la supprimer directement ou indirectement.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>To dispose of the type directly, call its <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method in a <ph id="ph2">`try`</ph><ph id="ph3">/</ph><ph id="ph4">`catch`</ph> block.</source>
          <target state="translated">Pour supprimer le type directement, vous devez appeler sa <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> méthode dans un <ph id="ph2">`try`</ph> <ph id="ph3">/</ph> <ph id="ph4">`catch`</ph> bloc.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>To dispose of it indirectly, use a language construct such as <ph id="ph1">`using`</ph> (in C#) or <ph id="ph2">`Using`</ph> (in Visual Basic).</source>
          <target state="translated">Pour la supprimer indirectement, utiliser une construction de langage telles que <ph id="ph1">`using`</ph> (en c#) ou <ph id="ph2">`Using`</ph> (en Visual Basic).</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>For more information, see the "Using an Object that Implements IDisposable" section in the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface topic.</source>
          <target state="translated">Pour plus d’informations, consultez la section « Utilisant un objet qui implémente IDisposable » dans la <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> rubrique de l’interface.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>For more information about using the <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> class, see the following sections:</source>
          <target state="translated">Pour plus d’informations sur l’utilisation de la <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> de classe, consultez les sections suivantes :</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source><bpt id="p1">[</bpt>Instantiating a ResourceReader object<ept id="p1">](#instantiate)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Instanciation d’un objet ResourceReader<ept id="p1">](#instantiate)</ept></target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source><bpt id="p1">[</bpt>Enumerating a ResourceReader object's resources<ept id="p1">](#enumerate)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>L’énumération des ressources d’un objet ResourceReader<ept id="p1">](#enumerate)</ept></target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source><bpt id="p1">[</bpt>Retrieving resources by using IDictionaryEnumerator properties<ept id="p1">](#idictionaryenumerator)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>La récupération des ressources à l’aide des propriétés de IDictionaryEnumerator<ept id="p1">](#idictionaryenumerator)</ept></target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source><bpt id="p1">[</bpt>Retrieving resources by name with GetResourceData<ept id="p1">](#getresourcedata)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>La récupération des ressources par nom avec GetResourceData<ept id="p1">](#getresourcedata)</ept></target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>Instantiating a ResourceReader Object</source>
          <target state="translated">Instanciation d’un objet ResourceReader</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>A .resources file is a binary file that has been compiled from either a text file or an XML .resx file by <bpt id="p1">[</bpt>Resgen.exe (Resource File Generator)<ept id="p1">](~/docs/framework/tools/resgen-exe-resource-file-generator.md)</ept>.</source>
          <target state="translated">Un fichier .resources est un fichier binaire qui a été compilé à partir d’un fichier texte ou d’un fichier .resx XML par <bpt id="p1">[</bpt>Resgen.exe (Resource File Generator)<ept id="p1">](~/docs/framework/tools/resgen-exe-resource-file-generator.md)</ept>.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>A <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> object can represent either a standalone .resources file or a .resources file that has been embedded in an assembly.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> objet peut représenter un fichier .resources ou un fichier .resources incorporé dans un assembly.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>To instantiate a <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> object that reads from a standalone .resources file, use the <ph id="ph2">&lt;xref:System.Resources.ResourceReader&gt;</ph> class constructor with either an input stream or a string that contains the .resources file name.</source>
          <target state="translated">Pour instancier un <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> de l’objet que lit à partir d’un fichier .resources, utilisez le <ph id="ph2">&lt;xref:System.Resources.ResourceReader&gt;</ph> constructeur de classe avec un flux d’entrée ou une chaîne qui contient le nom du fichier .resources.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>The following example illustrates both approaches.</source>
          <target state="translated">L’exemple suivant illustre ces deux approches.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>The first instantiates a <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> object that represents a .resources file named <ph id="ph2">`Resources1.resources`</ph> by using its file name.</source>
          <target state="translated">Le premier instancie un <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> objet qui représente un fichier .resources nommé <ph id="ph2">`Resources1.resources`</ph> à l’aide de son nom de fichier.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>The second instantiates a <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> object that represents a .resources file named <ph id="ph2">`Resources2.resources`</ph> by using a stream created from the file.</source>
          <target state="translated">La seconde instancie un <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> objet qui représente un fichier .resources nommé <ph id="ph2">`Resources2.resources`</ph> à l’aide d’un flux de données créé à partir du fichier.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>To create a <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> object that represents an embedded .resources file, instantiate an <ph id="ph2">&lt;xref:System.Reflection.Assembly&gt;</ph> object from the assembly in which the .resources file is embedded.</source>
          <target state="translated">Pour créer un <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> objet qui représente un fichier .resources incorporé, instanciez un <ph id="ph2">&lt;xref:System.Reflection.Assembly&gt;</ph> objet à partir de l’assembly dans lequel le fichier .resources est incorporé.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>Its <ph id="ph1">&lt;xref:System.Reflection.Assembly.GetManifestResourceStream%2A?displayProperty=nameWithType&gt;</ph> method returns a <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> object that can be passed to the <ph id="ph3">&lt;xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29&gt;</ph> constructor.</source>
          <target state="translated">Son <ph id="ph1">&lt;xref:System.Reflection.Assembly.GetManifestResourceStream%2A?displayProperty=nameWithType&gt;</ph> méthode retourne un <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> objet qui peut être passé à la <ph id="ph3">&lt;xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29&gt;</ph> constructeur.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>The following example instantiates a <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> object that represents an embedded .resources file.</source>
          <target state="translated">L’exemple suivant instancie un <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> objet qui représente un fichier .resources incorporé.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>Enumerating a ResourceReader Object's Resources</source>
          <target state="translated">L’énumération des ressources d’un objet ResourceReader</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>To enumerate the resources in a .resources file, you call the <ph id="ph1">&lt;xref:System.Resources.ResourceReader.GetEnumerator%2A&gt;</ph> method, which returns an <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType&gt;</ph> object.</source>
          <target state="translated">Pour énumérer les ressources dans un fichier .resources, vous appelez le <ph id="ph1">&lt;xref:System.Resources.ResourceReader.GetEnumerator%2A&gt;</ph> (méthode), qui retourne un <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType&gt;</ph> objet.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>You call the <ph id="ph1">`IDictionaryEnumerator.MoveNext`</ph> method to move from one resource to the next.</source>
          <target state="translated">Vous appelez le <ph id="ph1">`IDictionaryEnumerator.MoveNext`</ph> méthode pour déplacer d’une ressource à l’autre.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>The method returns <ph id="ph1">`false`</ph> when all the resources in the .resources file have been enumerated.</source>
          <target state="translated">La méthode retourne <ph id="ph1">`false`</ph> lorsque toutes les ressources dans le fichier .resources ont été énumérés.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>Although the <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> class implements the <ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph> interface and the <ph id="ph3">&lt;xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> method, the <ph id="ph4">&lt;xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> method does not provide the <ph id="ph5">&lt;xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> implementation.</source>
          <target state="translated">Bien que le <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> la classe implémente le <ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph> interface et la <ph id="ph3">&lt;xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> (méthode), la <ph id="ph4">&lt;xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> ne fournit pas de méthode le <ph id="ph5">&lt;xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> implémentation.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>Instead, the <ph id="ph1">&lt;xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> method  returns an <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator&gt;</ph> interface object that provides access to each resource's name/value pair.</source>
          <target state="translated">Au lieu de cela, le <ph id="ph1">&lt;xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> méthode retourne un <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator&gt;</ph> objet d’interface qui fournit l’accès à une paire nom/valeur de chaque ressource.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>You can retrieve the individual resources in the collection in two ways:</source>
          <target state="translated">Vous pouvez récupérer les ressources individuelles dans la collection de deux manières :</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>You can iterate each resource in the <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType&gt;</ph> collection and use <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType&gt;</ph> properties to retrieve the resource name and value.</source>
          <target state="translated">Vous pouvez itérer au sein de chaque ressource dans le <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType&gt;</ph> collecte et utilisation <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType&gt;</ph> propriétés à récupérer le nom de la ressource et la valeur.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>We recommend this technique when all the resources are of the same type, or you know the data type of each resource.</source>
          <target state="translated">Nous recommandons cette technique lorsque toutes les ressources sont du même type, ou si vous connaissez le type de données de chaque ressource.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>You can retrieve the name of each resource when you iterate the <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType&gt;</ph> collection and call the <ph id="ph2">&lt;xref:System.Resources.ResourceReader.GetResourceData%2A&gt;</ph> method to retrieve the resource's data.</source>
          <target state="translated">Vous pouvez récupérer le nom de chaque ressource lorsque vous itérez la <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType&gt;</ph> collection et appelez le <ph id="ph2">&lt;xref:System.Resources.ResourceReader.GetResourceData%2A&gt;</ph> pour récupérer les données de la ressource.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>We recommend this approach when you do not know the data type of each resource or if the previous approach throws exceptions.</source>
          <target state="translated">Nous recommandons cette approche lorsque vous ne connaissez pas le type de données de chaque ressource, ou si l’approche précédente lève des exceptions.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>Retrieving Resources by Using IDictionaryEnumerator Properties</source>
          <target state="translated">La récupération des ressources à l’aide des propriétés de IDictionaryEnumerator</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>The first method of enumerating the resources in a .resources file involves directly retrieving each resource's name/value pair.</source>
          <target state="translated">La première méthode d’énumération des ressources dans un fichier .resources implique de récupérer directement une paire nom/valeur de chaque ressource.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>After you call the <ph id="ph1">`IDictionaryEnumerator.MoveNext`</ph> method to move to each resource in the collection, you can retrieve the resource name from the <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType&gt;</ph> property and the resource data from the <ph id="ph3">&lt;xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">Après avoir appelé la <ph id="ph1">`IDictionaryEnumerator.MoveNext`</ph> nom de méthode pour déplacer vers chaque ressource dans la collection, vous pouvez récupérer la ressource à partir de la <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType&gt;</ph> propriété et les données de ressources à partir de la <ph id="ph3">&lt;xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType&gt;</ph> propriété.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>The following example shows how to retrieve the name and value of each resource in a .resources file by using the <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType&gt;</ph> properties.</source>
          <target state="translated">L’exemple suivant montre comment récupérer le nom et la valeur de chaque ressource dans un fichier .resources à l’aide de la <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType&gt;</ph> et <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType&gt;</ph> propriétés.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>To run the example, create the following text file named ApplicationResources.txt to define string resources.</source>
          <target state="translated">Pour exécuter l’exemple, créez le fichier texte suivant nommé ApplicationResources.txt pour définir des ressources de chaîne.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>You can then convert the text resource file to a binary file named ApplicationResources.resources by using the following command:</source>
          <target state="translated">Vous pouvez ensuite convertir le fichier de ressources du texte dans un fichier binaire nommé ApplicationResources.resources à l’aide de la commande suivante :</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source><bpt id="p1">**</bpt>resgen ApplicationResources.txt<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>resgen ApplicationResources.txt<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>The following example then uses the <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> class to enumerate each resource in the standalone binary .resources file and to display its key name and corresponding value.</source>
          <target state="translated">L’exemple suivant utilise ensuite la <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> classe énumérer chaque ressource dans le fichier .resources binaire et afficher son nom de la clé et la valeur correspondante.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>The attempt to retrieve resource data from the <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType&gt;</ph> property can throw the following exceptions:</source>
          <target state="translated">La tentative de récupérer des données de ressources de le <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType&gt;</ph> propriété peut lever les exceptions suivantes :</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>A <ph id="ph1">&lt;xref:System.FormatException&gt;</ph> if the data is not in the expected format.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.FormatException&gt;</ph> si les données ne sont pas au format attendu.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>A <ph id="ph1">&lt;xref:System.IO.FileNotFoundException&gt;</ph> if the assembly that contains the type to which the data belongs cannot be found.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.IO.FileNotFoundException&gt;</ph> si l’assembly qui contient le type auquel appartient les données est introuvable.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>A <ph id="ph1">&lt;xref:System.TypeLoadException&gt;</ph> if the type to which the data belongs cannot be cannot be found.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.TypeLoadException&gt;</ph> si le type auquel appartient les données ne peut pas être ne peut pas être trouvé.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>Typically, these exceptions are thrown if the .resources file has been modified manually, if the assembly in which a type is defined has either not been included with an application or has been inadvertently deleted, or if the assembly is an older version that predates a type.</source>
          <target state="translated">En règle générale, ces exceptions sont levées si le fichier .resources a été modifié manuellement, si l’assembly dans lequel un type est défini n’a ne pas été inclus dans une application ou a été supprimé par inadvertance, ou si l’assembly est une ancienne version qui est antérieure à un type.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>If one of these exceptions is thrown, you can retrieve resources by enumerating each resource and calling the <ph id="ph1">&lt;xref:System.Resources.ResourceReader.GetResourceData%2A&gt;</ph> method, as the following section shows.</source>
          <target state="translated">Si une de ces exceptions est levée, vous pouvez récupérer des ressources par l’énumération de chaque ressource et en appelant le <ph id="ph1">&lt;xref:System.Resources.ResourceReader.GetResourceData%2A&gt;</ph> méthode, comme l’indique la section suivante.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>This approach provides you with some information about the data type that the <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType&gt;</ph> property attempted to return.</source>
          <target state="translated">Cette approche fournit certaines informations sur les données de type qui le <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType&gt;</ph> propriété a tenté de retourner.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>Retrieving Resources by Name with GetResourceData</source>
          <target state="translated">La récupération des ressources par nom avec GetResourceData</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>The second approach to enumerating resources in a .resources file also involves navigating through the resources in the file by calling the <ph id="ph1">`IDictionaryEnumerator.MoveNext`</ph> method.</source>
          <target state="translated">La deuxième approche de l’énumération des ressources dans un fichier .resources implique également de parcourir les ressources dans le fichier en appelant le <ph id="ph1">`IDictionaryEnumerator.MoveNext`</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>For each resource, you retrieve the resource's name from the <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType&gt;</ph> property, which is then passed to the <ph id="ph2">&lt;xref:System.Resources.ResourceReader.GetResourceData%28System.String%2CSystem.String%40%2CSystem.Byte%5B%5D%40%29&gt;</ph> method to retrieve the resource's data.</source>
          <target state="translated">Pour chaque ressource, vous récupérez le nom de la ressource à partir de la <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType&gt;</ph> propriété, qui est ensuite transmise à la <ph id="ph2">&lt;xref:System.Resources.ResourceReader.GetResourceData%28System.String%2CSystem.String%40%2CSystem.Byte%5B%5D%40%29&gt;</ph> méthode pour récupérer les données de la ressource.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>This is returned as a byte array in the <ph id="ph1">`resourceData`</ph> argument.</source>
          <target state="translated">Cela est retourné comme un tableau d’octets dans le <ph id="ph1">`resourceData`</ph> argument.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>This approach is more awkward than retrieving the resource name and value from the <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType&gt;</ph> properties, because it returns the actual bytes that form the resource value.</source>
          <target state="translated">Cette approche est plus difficile que la récupération du nom de la ressource et la valeur de la <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType&gt;</ph> et <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType&gt;</ph> propriétés, car elle retourne les octets réels qui forment la valeur de ressource.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>However, if the attempt to retrieve the resource throws an exception, the <ph id="ph1">&lt;xref:System.Resources.ResourceReader.GetResourceData%2A&gt;</ph> method can help identify the source of the exception by supplying information about the resource's data type.</source>
          <target state="translated">Toutefois, si la tentative de récupération de la ressource lève une exception, le <ph id="ph1">&lt;xref:System.Resources.ResourceReader.GetResourceData%2A&gt;</ph> méthode peut aider à identifier la source de l’exception, vous devez fournir des informations sur le type de données de la ressource.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>For more information about the string that indicates the resource's data type, see <ph id="ph1">&lt;xref:System.Resources.ResourceReader.GetResourceData%2A&gt;</ph>.</source>
          <target state="translated">Pour plus d’informations sur la chaîne qui indique le type de données de la ressource, consultez <ph id="ph1">&lt;xref:System.Resources.ResourceReader.GetResourceData%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>The following example illustrates how to use this approach to retrieve resources and to handle any exceptions that are thrown.</source>
          <target state="translated">L’exemple suivant illustre comment utiliser cette approche pour récupérer des ressources et pour gérer les exceptions sont levées.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>It programmatically creates a binary .resources file that contains four strings, one Boolean, one integer, one bitmap, and one custom <ph id="ph1">`DateTimeTZI`</ph> object.</source>
          <target state="translated">Il crée par programmation un fichier .resources binaire qui contient quatre chaînes, une valeur booléenne, un entier, une image bitmap et un personnalisée <ph id="ph1">`DateTimeTZI`</ph> objet.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>To run the example, do the following:</source>
          <target state="translated">Pour exécuter l’exemple, procédez comme suit :</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>Create an assembly named Library.dll that contains the <ph id="ph1">`DateTimeTZI`</ph> structure.</source>
          <target state="translated">Créer un assembly nommé Library.dll qui contient le <ph id="ph1">`DateTimeTZI`</ph> structure.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>The following is the source code for the assembly.</source>
          <target state="translated">Voici le code source pour l’assembly.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>Compile the source code in C# by using the following command:</source>
          <target state="translated">Compiler du code source c# à l’aide de la commande suivante :</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>Or, you can compile it in Visual Basic by using the following command:</source>
          <target state="translated">Ou bien, vous pouvez les compiler dans Visual Basic à l’aide de la commande suivante :</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>Compile and execute the following source code, which creates a .resources file named ContactResources.resources.</source>
          <target state="translated">Compilez et exécutez le code source suivant, qui crée un fichier .resources nommé ContactResources.resources.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>The source code file is named CreateResources.cs.</source>
          <target state="translated">Le fichier de code source est nommé CreateResources.cs.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>You can compile it in C# by using the following command:</source>
          <target state="translated">Vous pouvez le compiler en c# à l’aide de la commande suivante :</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>Or, you can compile it in Visual Basic by using the following command:</source>
          <target state="translated">Ou bien, vous pouvez les compiler dans Visual Basic à l’aide de la commande suivante :</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>Compile and run the following code to enumerate the resources in the ContactResources.resources file.</source>
          <target state="translated">Compilez et exécutez le code suivant pour énumérer les ressources dans le fichier ContactResources.resources.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>After modifying the source code (for example, by deliberately throwing a <ph id="ph1">&lt;xref:System.FormatException&gt;</ph> at the end of the <ph id="ph2">`try`</ph> block) or renaming the Library.dll assembly so that it is unavailable at runtime, you can run the example to see how calls to <ph id="ph3">&lt;xref:System.Resources.ResourceReader.GetResourceData%2A&gt;</ph> enable you to retrieve or recreate some resource information.</source>
          <target state="translated">Après avoir modifié le code source (par exemple, en levant délibérément une <ph id="ph1">&lt;xref:System.FormatException&gt;</ph> à la fin de la <ph id="ph2">`try`</ph> bloc) ou renommez l’assembly Library.dll afin qu’il n’est pas disponible lors de l’exécution, vous pouvez exécuter l’exemple pour comprendre comment les appels à <ph id="ph3">&lt;xref:System.Resources.ResourceReader.GetResourceData%2A&gt;</ph> permettent de récupérer ou de recréer des informations sur la ressource.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="T:System.Resources.ResourceReader">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph> class.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>Using an instance of this object with untrusted data is a security risk.</source>
          <target state="translated">À l’aide d’une instance de cet objet de données non fiables est un risque de sécurité.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>Use this object only with trusted data.</source>
          <target state="translated">Utilisez cet objet uniquement avec des données approuvées.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>For more information, see <bpt id="p1">[</bpt>Data Validation<ept id="p1">](https://www.owasp.org/index.php/Data_Validation)</ept>.</source>
          <target state="translated">Pour plus d’informations, consultez <bpt id="p1">[</bpt>Validation des données<ept id="p1">](https://www.owasp.org/index.php/Data_Validation)</ept>.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>The input stream for reading resources.</source>
          <target state="translated">Flux d'entrée pour lire des ressources.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph> class for the specified stream.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph> pour le flux spécifié.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29&gt;</ph> constructor instantiates a <ph id="ph2">&lt;xref:System.Resources.ResourceReader&gt;</ph> object that retrieves resources either from a standalone .resources file or from a .resources file that is embedded in an assembly.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29&gt;</ph> constructeur instancie un <ph id="ph2">&lt;xref:System.Resources.ResourceReader&gt;</ph> objet qui Récupère les ressources à partir d’un fichier .resources ou .resources à partir de fichier qui est incorporé dans un assembly.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>To read from a standalone .resources file, instantiate a <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> object and pass it to the <ph id="ph2">&lt;xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29&gt;</ph> constructor.</source>
          <target state="translated">Pour lire un fichier .resources, instanciez un <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> de l’objet et le passer à la <ph id="ph2">&lt;xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29&gt;</ph> constructeur.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>To read from an embedded .resources file, call the <ph id="ph1">&lt;xref:System.Reflection.Assembly.GetManifestResourceStream%2A?displayProperty=nameWithType&gt;</ph> method with the case-sensitive name of the .resources file, and pass the returned <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> object to the <ph id="ph3">&lt;xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29&gt;</ph> constructor.</source>
          <target state="translated">Pour lire à partir d’un fichier .resources incorporé, appelez le <ph id="ph1">&lt;xref:System.Reflection.Assembly.GetManifestResourceStream%2A?displayProperty=nameWithType&gt;</ph> méthode portant le nom qui respecte la casse du fichier .resources et passez retourné <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> de l’objet à le <ph id="ph3">&lt;xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29&gt;</ph> constructeur.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>Using an instance of this object with untrusted data is a security risk.</source>
          <target state="translated">À l’aide d’une instance de cet objet de données non fiables est un risque de sécurité.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>Use this object only with trusted data.</source>
          <target state="translated">Utilisez cet objet uniquement avec des données approuvées.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>For more information, see <bpt id="p1">[</bpt>Data Validation<ept id="p1">](https://www.owasp.org/index.php/Data_Validation)</ept>.</source>
          <target state="translated">Pour plus d’informations, consultez <bpt id="p1">[</bpt>Validation des données<ept id="p1">](https://www.owasp.org/index.php/Data_Validation)</ept>.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>The example in this section uses the following .txt file named <ph id="ph1">`PatientForm.txt`</ph> to define the resources used by an application.</source>
          <target state="translated">L’exemple de cette section utilise le fichier .txt suivant nommé <ph id="ph1">`PatientForm.txt`</ph> pour définir les ressources utilisées par une application.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>You can compile the .txt file into a .resources file by issuing the following command:</source>
          <target state="translated">Vous pouvez compiler le fichier .txt dans un fichier .resources en émettant la commande suivante :</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source><bpt id="p1">**</bpt>resgen PatientForm.txt<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>resgen PatientForm.txt<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>The following example assumes that the resource file is embedded in the assembly that contains the application's executable code.</source>
          <target state="translated">L’exemple suivant suppose que le fichier de ressources est incorporé dans l’assembly qui contienne du code exécutable de l’application.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>It retrieves a resource file named <ph id="ph1">`PatientForm.resources`</ph> from the currently executing assemblies and displays the name and value of each of its resources.</source>
          <target state="translated">Il récupère un fichier de ressources nommé <ph id="ph1">`PatientForm.resources`</ph> à partir des assemblys en cours d’exécution et affiche le nom et la valeur de chacune de ses ressources.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>If the C# example is named <ph id="ph1">`Example.cs`</ph>, you can compile it by using the following command:</source>
          <target state="translated">Si l’exemple c# est nommé <ph id="ph1">`Example.cs`</ph>, vous pouvez la compiler à l’aide de la commande suivante :</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source><bpt id="p1">**</bpt>csc Example.cs /res:PatientForm.resources<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>csc Example.cs /res:PatientForm.resources<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>If the Visual Basic example is named <ph id="ph1">`Example.vb`</ph>, you can compile it by using the following command:</source>
          <target state="translated">Si l’exemple Visual Basic nommé <ph id="ph1">`Example.vb`</ph>, vous pouvez la compiler à l’aide de la commande suivante :</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source><bpt id="p1">**</bpt>vbc Example.vb /res:PatientForm.resources<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>vbc Example.vb /res:PatientForm.resources<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>The <ph id="ph1">&lt;paramref name="stream" /&gt;</ph> parameter is not readable.</source>
          <target state="translated">Le paramètre <ph id="ph1">&lt;paramref name="stream" /&gt;</ph> n'est pas accessible en lecture.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>The <ph id="ph1">&lt;paramref name="stream" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Le paramètre <ph id="ph1">&lt;paramref name="stream" /&gt;</ph> a la valeur <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>An I/O error has occurred while accessing <ph id="ph1">&lt;paramref name="stream" /&gt;</ph>.</source>
          <target state="translated">Une erreur d'E/S s'est produite lors de l'accès à <ph id="ph1">&lt;paramref name="stream" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>for providing serialization services.</source>
          <target state="translated">pour fournir des services de sérialisation.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>Security action: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph>.</source>
          <target state="translated">Action de sécurité : <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" /&gt;</ph></source>
          <target state="translated">Énumération associée : <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">requiert une confiance totale pour l’appelant immédiat.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Ce membre ne peut pas être utilisé par le code de confiance partielle ou transparent.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.#ctor(System.String)">
          <source>The path and name of the resource file to read.</source>
          <target state="translated">Chemin d’accès et nom du fichier de ressources à lire.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.#ctor(System.String)">
          <source><bpt id="p1">&lt;c&gt;</bpt>filename<ept id="p1">&lt;/c&gt;</ept> is not case-sensitive.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>filename<ept id="p1">&lt;/c&gt;</ept> ne respecte pas la casse.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.#ctor(System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph> class for the specified named resource file.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph> pour le fichier de ressources nommé spécifié.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResourceReader.%23ctor%28System.String%29&gt;</ph> constructor instantiates a <ph id="ph2">&lt;xref:System.Resources.ResourceReader&gt;</ph> object that retrieves resources from a standalone .resources file.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Resources.ResourceReader.%23ctor%28System.String%29&gt;</ph> constructeur instancie un <ph id="ph2">&lt;xref:System.Resources.ResourceReader&gt;</ph> objet qui Récupère les ressources à partir d’un fichier .resources.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.String)">
          <source>To retrieve resources from an embedded .resources file, use the <ph id="ph1">&lt;xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29&gt;</ph> constructor.</source>
          <target state="translated">Pour récupérer des ressources à partir d’un fichier .resources incorporé, utilisez la <ph id="ph1">&lt;xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29&gt;</ph> constructeur.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.String)">
          <source>Using an instance of this object with untrusted data is a security risk.</source>
          <target state="translated">À l’aide d’une instance de cet objet de données non fiables est un risque de sécurité.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.String)">
          <source>Use this object only with trusted data.</source>
          <target state="translated">Utilisez cet objet uniquement avec des données approuvées.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.String)">
          <source>For more information, see <bpt id="p1">[</bpt>Data Validation<ept id="p1">](https://www.owasp.org/index.php/Data_Validation)</ept>.</source>
          <target state="translated">Pour plus d’informations, consultez <bpt id="p1">[</bpt>Validation des données<ept id="p1">](https://www.owasp.org/index.php/Data_Validation)</ept>.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.String)">
          <source>The example in this section uses the following .txt file named <ph id="ph1">`PatientForm.txt`</ph> to define the resources used by an application.</source>
          <target state="translated">L’exemple de cette section utilise le fichier .txt suivant nommé <ph id="ph1">`PatientForm.txt`</ph> pour définir les ressources utilisées par une application.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.String)">
          <source>You can compile this .txt file into a .resources file by issuing the following command:</source>
          <target state="translated">Vous pouvez compiler ce fichier .txt en fichier .resources en émettant la commande suivante :</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.String)">
          <source><bpt id="p1">**</bpt>resgen PatientForm.txt<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>resgen PatientForm.txt<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.String)">
          <source>The following example enumerates the resources in <ph id="ph1">`PatientForm.resources`</ph> and displays the name and value of each.</source>
          <target state="translated">L’exemple suivant énumère les ressources dans <ph id="ph1">`PatientForm.resources`</ph> et affiche le nom et la valeur de chaque.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.#ctor(System.String)">
          <source>The <ph id="ph1">&lt;paramref name="fileName" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Le paramètre <ph id="ph1">&lt;paramref name="fileName" /&gt;</ph> a la valeur <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.#ctor(System.String)">
          <source>The file cannot be found.</source>
          <target state="translated">Impossible de trouver le fichier.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.#ctor(System.String)">
          <source>An I/O error has occurred.</source>
          <target state="translated">Une erreur d’E/S s’est produite.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.#ctor(System.String)">
          <source>The resource file has an invalid format.</source>
          <target state="translated">Le format du fichier de ressources n'est pas valide.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.#ctor(System.String)">
          <source>For example, the length of the file may be zero.</source>
          <target state="translated">Par exemple, la longueur du fichier peut être égale à zéro.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.Close">
          <source>Releases all operating system resources associated with this <ph id="ph1">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph> object.</source>
          <target state="translated">Libère toutes les ressources du système d'exploitation associées à cet objet <ph id="ph1">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.Close">
          <source><ph id="ph1">&lt;xref:System.Resources.ResourceReader.Close%2A&gt;</ph> can be safely called multiple times.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Resources.ResourceReader.Close%2A&gt;</ph> peut être appelée en toute sécurité plusieurs fois.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.Close">
          <source>The following example moves through a file's resources and displays all the key/value pairs it finds.</source>
          <target state="translated">L’exemple suivant déplace via des ressources d’un fichier et affiche toutes les paires clé/valeur qu’il trouve.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.Close">
          <source>The code then uses the <ph id="ph1">&lt;xref:System.Resources.ResourceReader.Close%2A&gt;</ph> method to shut down the <ph id="ph2">&lt;xref:System.Resources.ResourceReader&gt;</ph> and to release all resources used by it.</source>
          <target state="translated">Le code utilise ensuite la <ph id="ph1">&lt;xref:System.Resources.ResourceReader.Close%2A&gt;</ph> méthode pour arrêter le <ph id="ph2">&lt;xref:System.Resources.ResourceReader&gt;</ph> et libérer toutes les ressources utilisées par ce dernier.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.Dispose">
          <source>Releases all resources used by the current instance of the <ph id="ph1">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph> class.</source>
          <target state="translated">Libère toutes les ressources utilisées par l'instance actuelle de la classe <ph id="ph1">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.Dispose">
          <source>When you are finished using this instance of <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph>, call <ph id="ph2">&lt;xref:System.Resources.ResourceReader.Dispose%2A&gt;</ph> to release all resources used by this instance.</source>
          <target state="translated">Lorsque vous avez terminé à l’aide de cette instance de <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph>, appelez <ph id="ph2">&lt;xref:System.Resources.ResourceReader.Dispose%2A&gt;</ph> pour libérer toutes les ressources utilisées par cette instance.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.Dispose">
          <source>You should eliminate further references to this <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> instance so that the garbage collector can reclaim the memory of the instance instead of keeping it alive for finalization.</source>
          <target state="translated">Vous devez supprimer les références à ce <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> afin que le garbage collector puisse récupérer la mémoire de l’instance au lieu de conserver actif pour la finalisation de l’instance.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.Dispose">
          <source><ph id="ph1">&lt;xref:System.Resources.ResourceReader.Dispose%2A&gt;</ph> calls the private Dispose(Boolean) method, which contains the code to release managed and unmanaged resources.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Resources.ResourceReader.Dispose%2A&gt;</ph> appelle la méthode privée dispose (Boolean), qui contient le code pour libérer les ressources managées et non managées.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.Dispose">
          <source>For more information, see <bpt id="p1">[</bpt>Implementing a Dispose Method<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">Pour plus d’informations, consultez <bpt id="p1">[</bpt>implémentant une méthode de suppression<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.GetEnumerator">
          <source>Returns an enumerator for this <ph id="ph1">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph> object.</source>
          <target state="translated">Retourne un énumérateur pour cet objet <ph id="ph1">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.GetEnumerator">
          <source>An enumerator for this <ph id="ph1">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph> object.</source>
          <target state="translated">Énumérateur pour cet objet <ph id="ph1">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetEnumerator">
          <source>Typically, you enumerate resources by calling the <ph id="ph1">&lt;xref:System.Resources.ResourceReader.GetEnumerator%2A&gt;</ph> method and then repeatedly calling the <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> method on the returned <ph id="ph3">&lt;xref:System.Collections.IDictionaryEnumerator&gt;</ph> object until the method returns <ph id="ph4">`false`</ph>.</source>
          <target state="translated">En règle générale, vous énumérer les ressources en appelant le <ph id="ph1">&lt;xref:System.Resources.ResourceReader.GetEnumerator%2A&gt;</ph> (méthode), puis à plusieurs reprises la <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> méthode sur le <ph id="ph3">&lt;xref:System.Collections.IDictionaryEnumerator&gt;</ph> jusqu'à ce que la méthode retourne l’objet <ph id="ph4">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetEnumerator">
          <source>The resource name is available from the <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType&gt;</ph> property; its value from the <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">Le nom de la ressource est disponible à partir de la <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType&gt;</ph> propriété ; sa valeur à partir de la <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType&gt;</ph> propriété.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetEnumerator">
          <source>The example illustrates how to enumerate resources in this way.</source>
          <target state="translated">L’exemple illustre comment énumérer les ressources de cette façon.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetEnumerator">
          <source>The implementation of the <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType&gt;</ph> property by the <ph id="ph2">&lt;xref:System.Resources.ResourceReader&gt;</ph> class can throw the following exceptions:</source>
          <target state="translated">L’implémentation de la <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType&gt;</ph> propriété par le <ph id="ph2">&lt;xref:System.Resources.ResourceReader&gt;</ph> classe peut lever les exceptions suivantes :</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetEnumerator">
          <source>The assembly that contains the type to which the data belongs cannot be found.</source>
          <target state="translated">Impossible de trouver l’assembly qui contient le type auquel les données appartient.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetEnumerator">
          <source>The data is not in the expected format.</source>
          <target state="translated">Les données ne sont pas au format attendu.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetEnumerator">
          <source>The type to which the data belongs cannot be found.</source>
          <target state="translated">Impossible de trouver le type auquel les données appartient.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetEnumerator">
          <source>You can handle the exception by calling the <ph id="ph1">&lt;xref:System.Resources.ResourceReader.GetResourceData%2A&gt;</ph> method to retrieve information about the data type and the byte array assigned to the named resource.</source>
          <target state="translated">Vous pouvez gérer l’exception en appelant le <ph id="ph1">&lt;xref:System.Resources.ResourceReader.GetResourceData%2A&gt;</ph> méthode pour récupérer des informations sur le type de données et le tableau d’octets affecté à la ressource nommée.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetEnumerator">
          <source>For more information, see the "Retrieving Resources by Name with GetResourceData" section in the <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> class topic.</source>
          <target state="translated">Pour plus d’informations, consultez la section « Récupération des ressources par nom avec GetResourceData » dans le <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> rubrique de la classe.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetEnumerator">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> class includes two methods that return enumerators.</source>
          <target state="translated">La <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> classe inclut deux méthodes qui retournent des énumérateurs.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetEnumerator">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResourceReader.GetEnumerator%2A&gt;</ph> method returns an <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator&gt;</ph> interface object and is the recommended method to call when enumerating resources.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Resources.ResourceReader.GetEnumerator%2A&gt;</ph> méthode retourne un <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator&gt;</ph> objet d’interface et est la méthode recommandée à appeler lorsque l’énumération des ressources.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetEnumerator">
          <source>The example in this section uses the following .txt file named <ph id="ph1">`PatientForm.txt`</ph> to define the resources used by an application.</source>
          <target state="translated">L’exemple de cette section utilise le fichier .txt suivant nommé <ph id="ph1">`PatientForm.txt`</ph> pour définir les ressources utilisées par une application.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetEnumerator">
          <source>You can compile the .txt file into a .resources file by issuing the following command:</source>
          <target state="translated">Vous pouvez compiler le fichier .txt dans un fichier .resources en émettant la commande suivante :</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetEnumerator">
          <source><bpt id="p1">**</bpt>resgen PatientForm.txt<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>resgen PatientForm.txt<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetEnumerator">
          <source>The following example enumerates the resources in <ph id="ph1">`PatientForm.resources`</ph> and displays the name and value of each.</source>
          <target state="translated">L’exemple suivant énumère les ressources dans <ph id="ph1">`PatientForm.resources`</ph> et affiche le nom et la valeur de chaque.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.GetEnumerator">
          <source>The reader has been closed or disposed, and cannot be accessed.</source>
          <target state="translated">Le lecteur a été fermé ou supprimé, et il n'est plus possible d'y accéder.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>The name of a resource.</source>
          <target state="translated">Nom d'une ressource.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>When this method returns, contains a string that represents the type name of the retrieved resource.</source>
          <target state="translated">Quand cette méthode retourne une valeur, contient une chaîne qui représente le nom de type de la ressource récupérée.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>This parameter is passed uninitialized.</source>
          <target state="translated">Ce paramètre est passé sans être initialisé.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>When this method returns, contains a byte array that is the binary representation of the retrieved type.</source>
          <target state="translated">Lorsque cette méthode est retournée, contient un tableau d'octets correspondant à la représentation binaire du type récupéré.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>This parameter is passed uninitialized.</source>
          <target state="translated">Ce paramètre est passé sans être initialisé.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>Retrieves the type name and data of a named resource from an open resource file or stream.</source>
          <target state="translated">Récupère le nom du type et les données d'une ressource nommée à partir d'un fichier de ressources ouvert ou d'un flux.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResourceReader.GetResourceData%2A&gt;</ph> method retrieves the value of a named resource as a byte array.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Resources.ResourceReader.GetResourceData%2A&gt;</ph> méthode extrait la valeur d’une ressource nommée en tant que tableau d’octets.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>It is typically used when the <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Value%2A&gt;</ph> property throws an exception when it tries to retrieve the value of a resource.</source>
          <target state="translated">Il est généralement utilisé lorsque le <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Value%2A&gt;</ph> propriété lève une exception lorsqu’il tente de récupérer la valeur d’une ressource.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source><ph id="ph1">`resourceType`</ph> is a string that represents the data type of the resource.</source>
          <target state="translated"><ph id="ph1">`resourceType`</ph> est une chaîne qui représente le type de données de la ressource.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>It can be any of the following values:</source>
          <target state="translated">Il peut être une des valeurs suivantes :</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>The string representation of a <ph id="ph1">`ResourceTypeCode`</ph> enumeration member that indicates the data type of the resource.</source>
          <target state="translated">La représentation sous forme de chaîne d’un <ph id="ph1">`ResourceTypeCode`</ph> membre d’énumération qui indique le type de données de la ressource.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source><ph id="ph1">`ResourceTypeCode`</ph> is a private enumeration that is used by .to indicate that a special binary format is used to store one of 19 common data types.</source>
          <target state="translated"><ph id="ph1">`ResourceTypeCode`</ph> est une énumération privée qui est utilisée par .pour indique qu’un format binaire spécial permet de stocker un des types de données communs 19.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>These include the .NET Framework primitive data types (<ph id="ph1">&lt;xref:System.Boolean&gt;</ph>, <ph id="ph2">&lt;xref:System.Byte&gt;</ph>, <ph id="ph3">&lt;xref:System.Char&gt;</ph>, <ph id="ph4">&lt;xref:System.Decimal&gt;</ph>, <ph id="ph5">&lt;xref:System.Double&gt;</ph>, <ph id="ph6">&lt;xref:System.Int16&gt;</ph>, <ph id="ph7">&lt;xref:System.Int32&gt;</ph>, <ph id="ph8">&lt;xref:System.Int64&gt;</ph>, <ph id="ph9">&lt;xref:System.Single&gt;</ph>, <ph id="ph10">&lt;xref:System.SByte&gt;</ph>, <ph id="ph11">&lt;xref:System.UInt16&gt;</ph>, <ph id="ph12">&lt;xref:System.UInt32&gt;</ph>, <ph id="ph13">&lt;xref:System.UInt64&gt;</ph>), as well as <ph id="ph14">&lt;xref:System.String&gt;</ph>, <ph id="ph15">&lt;xref:System.DateTime&gt;</ph>, and <ph id="ph16">&lt;xref:System.TimeSpan&gt;</ph>, In addition, the <ph id="ph17">`ResourceTypeCode`</ph> enumeration includes the values shown in the following table.</source>
          <target state="translated">Ceux-ci comprennent les types de données primitifs .NET Framework (<ph id="ph1">&lt;xref:System.Boolean&gt;</ph>, <ph id="ph2">&lt;xref:System.Byte&gt;</ph>, <ph id="ph3">&lt;xref:System.Char&gt;</ph>, <ph id="ph4">&lt;xref:System.Decimal&gt;</ph>, <ph id="ph5">&lt;xref:System.Double&gt;</ph>, <ph id="ph6">&lt;xref:System.Int16&gt;</ph>, <ph id="ph7">&lt;xref:System.Int32&gt;</ph>, <ph id="ph8">&lt;xref:System.Int64&gt;</ph>, <ph id="ph9">&lt;xref:System.Single&gt;</ph>, <ph id="ph10">&lt;xref:System.SByte&gt;</ph>, <ph id="ph11">&lt;xref:System.UInt16&gt;</ph>, <ph id="ph12">&lt;xref:System.UInt32&gt;</ph>, <ph id="ph13">&lt;xref:System.UInt64&gt;</ph>), ainsi que <ph id="ph14">&lt;xref:System.String&gt;</ph>, <ph id="ph15">&lt;xref:System.DateTime&gt;</ph>, et <ph id="ph16">&lt;xref:System.TimeSpan&gt;</ph>, en outre, le <ph id="ph17">`ResourceTypeCode`</ph> énumération inclut les valeurs indiquées dans le tableau suivant.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>ResourceTypeCode value</source>
          <target state="translated">Valeur de ResourceTypeCode</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>Description</source>
          <target state="translated">Description </target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>The data is a byte array.</source>
          <target state="translated">Les données sont un tableau d’octets.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>This data type commonly results from the call to the <ph id="ph1">&lt;xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.Byte%5B%5D%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Ces données type couramment résulte de l’appel à la <ph id="ph1">&lt;xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.Byte%5B%5D%29?displayProperty=nameWithType&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>The data is a null reference.</source>
          <target state="translated">Les données sont une référence null.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>This data type commonly results from the call to the <ph id="ph1">&lt;xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.Object%29?displayProperty=nameWithType&gt;</ph> method with an object whose value is <ph id="ph2">`null`</ph>.</source>
          <target state="translated">Ces données type couramment résulte de l’appel à la <ph id="ph1">&lt;xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.Object%29?displayProperty=nameWithType&gt;</ph> méthode avec un objet dont la valeur est <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>The data is stored in a stream.</source>
          <target state="translated">Les données sont stockées dans un flux de données.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>This data type commonly results from the call to the <ph id="ph1">&lt;xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.IO.Stream%29?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.IO.Stream%2CSystem.Boolean%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Ces données type couramment résulte de l’appel à la <ph id="ph1">&lt;xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.IO.Stream%29?displayProperty=nameWithType&gt;</ph> ou <ph id="ph2">&lt;xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.IO.Stream%2CSystem.Boolean%29?displayProperty=nameWithType&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>Assuming that <ph id="ph1">`resourceData`</ph> has not been corrupted, it can usually be converted from a byte array back to its original value by calling a <ph id="ph2">&lt;xref:System.BitConverter&gt;</ph> or <ph id="ph3">&lt;xref:System.IO.BinaryReader&gt;</ph> method.</source>
          <target state="translated">En supposant que <ph id="ph1">`resourceData`</ph> n’a pas été endommagé, il peut généralement être converti à partir d’un tableau d’octets à sa valeur d’origine en appelant une <ph id="ph2">&lt;xref:System.BitConverter&gt;</ph> ou <ph id="ph3">&lt;xref:System.IO.BinaryReader&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>A string that contains the fully qualified name of the type whose serialized data is assigned to the <ph id="ph1">`resourceData`</ph> argument (for example, <ph id="ph2">`System.String`</ph>).</source>
          <target state="translated">Chaîne qui contient le nom qualifié complet du type dont les données sérialisées sont assignées à la <ph id="ph1">`resourceData`</ph> argument (par exemple, <ph id="ph2">`System.String`</ph>).</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>In addition, for types that are not part of the .NET Framework class library, the string includes the name, version, culture, and public key of the assembly that contains the type.</source>
          <target state="translated">En outre, pour les types qui ne font pas partie de la bibliothèque de classes .NET Framework, la chaîne inclut le nom, la version, la culture et la clé publique de l’assembly qui contient le type.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>For example, the following string indicates that the serialized data represents an instance of the <ph id="ph1">`Person`</ph> type in the <ph id="ph2">`Extensions`</ph> namespace, which is found in version 1.0 of an assembly named Utility that has no public key and no designated culture.</source>
          <target state="translated">Par exemple, la chaîne suivante indique que les données sérialisées représentent une instance de la <ph id="ph1">`Person`</ph> de type dans le <ph id="ph2">`Extensions`</ph> espace de noms, qui se trouve dans la version 1.0 d’un assembly nommé utilitaire qui a aucune clé publique et aucune culture désignée.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>Assuming that <ph id="ph1">`resourceData`</ph> has not been corrupted and that the source type is available, <ph id="ph2">`resourceData`</ph> can be converted from a byte array back to its original value by converting the byte array to a <ph id="ph3">&lt;xref:System.IO.Stream&gt;</ph> object and passing the stream to the <ph id="ph4">&lt;xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">En supposant que <ph id="ph1">`resourceData`</ph> n’a pas été endommagée et que le type de source est disponible, <ph id="ph2">`resourceData`</ph> peut être converti à partir d’un tableau d’octets à sa valeur d’origine en les convertissant en tableau d’octets à un <ph id="ph3">&lt;xref:System.IO.Stream&gt;</ph> objet et en passant le flux de données pour le <ph id="ph4">&lt;xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize%2A?displayProperty=nameWithType&gt;</ph>(méthode).</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>The string used to describe the data type in the <ph id="ph1">&lt;xref:System.Resources.ResourceWriter.AddResourceData%2A?displayProperty=nameWithType&gt;</ph> method call.</source>
          <target state="translated">La chaîne utilisée pour décrire le type de données dans le <ph id="ph1">&lt;xref:System.Resources.ResourceWriter.AddResourceData%2A?displayProperty=nameWithType&gt;</ph> appel de méthode.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source><ph id="ph1">&lt;paramref name="resourceName" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="resourceName" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source><ph id="ph1">&lt;paramref name="resourceName" /&gt;</ph> does not exist.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="resourceName" /&gt;</ph> n’existe pas.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source><ph id="ph1">&lt;paramref name="resourceName" /&gt;</ph> has an invalid type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="resourceName" /&gt;</ph> a un type non valide.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>The retrieved resource data is corrupt.</source>
          <target state="translated">Les données de ressources récupérées sont endommagées.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>The current <ph id="ph1">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph> object is not initialized, probably because it is closed.</source>
          <target state="translated">L'objet <ph id="ph1">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph> actuel n'est pas initialisé, probablement parce qu'il est fermé.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.System#Collections#IEnumerable#GetEnumerator">
          <source>Returns an enumerator for this <ph id="ph1">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph> object.</source>
          <target state="translated">Retourne un énumérateur pour cet objet <ph id="ph1">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.System#Collections#IEnumerable#GetEnumerator">
          <source>An enumerator for this <ph id="ph1">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph> object.</source>
          <target state="translated">Énumérateur pour cet objet <ph id="ph1">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.System#Collections#IEnumerable#GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Resources.ResourceReader.System%23Collections%23IEnumerable%23GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> is an explicit interface implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Resources.ResourceReader.System%23Collections%23IEnumerable%23GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> est une implémentation d’interface explicite.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.System#Collections#IEnumerable#GetEnumerator">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph> interface.</source>
          <target state="translated">Il peut uniquement être utilisé lorsque l'instance de <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> est castée en interface <ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.System#Collections#IEnumerable#GetEnumerator">
          <source>The recommended approach to enumerating the resources in a .resources file is to call the <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> method of the <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator&gt;</ph> object returned by the <ph id="ph3">&lt;xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">L’approche recommandée pour énumérer les ressources dans un fichier .resources consiste à appeler la <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> méthode de la <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator&gt;</ph> objet retourné par la <ph id="ph3">&lt;xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.System#Collections#IEnumerable#GetEnumerator">
          <source>The reader has already been closed and cannot be accessed.</source>
          <target state="translated">Le lecteur a déjà été fermé et il n'est plus possible d'y accéder.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>