<Type Name="PartConventionBuilder" FullName="System.Composition.Convention.PartConventionBuilder">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="979c38a520f7ccca9201f130f6ef1631cc482ccd" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="36699933" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class PartConventionBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PartConventionBuilder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Composition.Convention.PartConventionBuilder" />
  <TypeSignature Language="VB.NET" Value="Public Class PartConventionBuilder" />
  <TypeSignature Language="C++ CLI" Value="public ref class PartConventionBuilder" />
  <TypeSignature Language="F#" Value="type PartConventionBuilder = class" />
  <AssemblyInfo>
    <AssemblyName>System.Composition.Convention</AssemblyName>
    <AssemblyVersion>1.0.31.0</AssemblyVersion>
    <AssemblyVersion>1.0.32.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="3a47a-101">Configure un type en tant que composant MEF (Managed Extensibility Framework).</span>
      <span class="sxs-lookup">
        <span data-stu-id="3a47a-101">Configures a type as a Managed Extensibility Framework (MEF) part.</span>
      </span>
    </summary>
    <remarks></remarks>
  </Docs>
  <Members>
    <Member MemberName="AddPartMetadata">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.PartConventionBuilder AddPartMetadata (string name, Func&lt;Type,object&gt; getValueFromPartType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.PartConventionBuilder AddPartMetadata(string name, class System.Func`2&lt;class System.Type, object&gt; getValueFromPartType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.PartConventionBuilder.AddPartMetadata(System.String,System.Func{System.Type,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Function AddPartMetadata (name As String, getValueFromPartType As Func(Of Type, Object)) As PartConventionBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Composition::Convention::PartConventionBuilder ^ AddPartMetadata(System::String ^ name, Func&lt;Type ^, System::Object ^&gt; ^ getValueFromPartType);" />
      <MemberSignature Language="F#" Value="member this.AddPartMetadata : string * Func&lt;Type, obj&gt; -&gt; System.Composition.Convention.PartConventionBuilder" Usage="partConventionBuilder.AddPartMetadata (name, getValueFromPartType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.PartConventionBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="getValueFromPartType" Type="System.Func&lt;System.Type,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="3a47a-102">Nom des métadonnées à ajouter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a47a-102">The name of the metadata to add.</span>
          </span>
        </param>
        <param name="getValueFromPartType">
          <span data-ttu-id="3a47a-103">Fonction qui retourne la valeur des métadonnées sur le type de composant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a47a-103">A function that returns the metadata value on the part type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3a47a-104">Ajoute des métadonnées avec le nom et la valeur indiqués au composant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a47a-104">Adds metadata that has the specified name and value to the part.</span>
          </span>
          <span data-ttu-id="3a47a-105">La valeur est retournée par une fonction qui mappe le type de composant à la valeur des métadonnées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a47a-105">The value is returned by a function that maps the part type to the metadata value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3a47a-106">Générateur de composant qui peut être utilisé pour configurer davantage le composant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a47a-106">A part builder that can be used to further configure the part.</span>
          </span>
        </returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="AddPartMetadata">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.PartConventionBuilder AddPartMetadata (string name, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.PartConventionBuilder AddPartMetadata(string name, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.PartConventionBuilder.AddPartMetadata(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddPartMetadata (name As String, value As Object) As PartConventionBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Composition::Convention::PartConventionBuilder ^ AddPartMetadata(System::String ^ name, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.AddPartMetadata : string * obj -&gt; System.Composition.Convention.PartConventionBuilder" Usage="partConventionBuilder.AddPartMetadata (name, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.PartConventionBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="3a47a-107">Nom des métadonnées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a47a-107">The metadata name.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="3a47a-108">Valeur des métadonnées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a47a-108">The metadata value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3a47a-109">Ajoute des métadonnées avec le nom et la valeur indiqués au composant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a47a-109">Adds metadata that has the specified name and value to the part.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3a47a-110">Générateur de composant qui peut être utilisé pour configurer davantage le composant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a47a-110">A part builder that can be used to further configure the part.</span>
          </span>
        </returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Export">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.PartConventionBuilder Export ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.PartConventionBuilder Export() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.PartConventionBuilder.Export" />
      <MemberSignature Language="VB.NET" Value="Public Function Export () As PartConventionBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Composition::Convention::PartConventionBuilder ^ Export();" />
      <MemberSignature Language="F#" Value="member this.Export : unit -&gt; System.Composition.Convention.PartConventionBuilder" Usage="partConventionBuilder.Export " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.PartConventionBuilder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="3a47a-111">Exporte le composant avec son type concret comme type de contrat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a47a-111">Exports the part with its concrete type as the contract type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3a47a-112">Générateur de composant qui peut être utilisé pour configurer davantage le composant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a47a-112">A part builder that can be used to further configure the part.</span>
          </span>
        </returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Export">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.PartConventionBuilder Export (Action&lt;System.Composition.Convention.ExportConventionBuilder&gt; exportConfiguration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.PartConventionBuilder Export(class System.Action`1&lt;class System.Composition.Convention.ExportConventionBuilder&gt; exportConfiguration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.PartConventionBuilder.Export(System.Action{System.Composition.Convention.ExportConventionBuilder})" />
      <MemberSignature Language="VB.NET" Value="Public Function Export (exportConfiguration As Action(Of ExportConventionBuilder)) As PartConventionBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Composition::Convention::PartConventionBuilder ^ Export(Action&lt;System::Composition::Convention::ExportConventionBuilder ^&gt; ^ exportConfiguration);" />
      <MemberSignature Language="F#" Value="member this.Export : Action&lt;System.Composition.Convention.ExportConventionBuilder&gt; -&gt; System.Composition.Convention.PartConventionBuilder" Usage="partConventionBuilder.Export exportConfiguration" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.PartConventionBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exportConfiguration" Type="System.Action&lt;System.Composition.Convention.ExportConventionBuilder&gt;" />
      </Parameters>
      <Docs>
        <param name="exportConfiguration">
          <span data-ttu-id="3a47a-113">Action qui configure le composant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a47a-113">An action that configures the part.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3a47a-114">Exporte le composant avec la configuration spécifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a47a-114">Exports the part that has the specified configuration.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3a47a-115">Générateur de composant qui peut être utilisé pour configurer davantage le composant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a47a-115">A part builder that can be used to further configure the part.</span>
          </span>
        </returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Export&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.PartConventionBuilder Export&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.PartConventionBuilder Export&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.PartConventionBuilder.Export``1" />
      <MemberSignature Language="VB.NET" Value="Public Function Export(Of T) () As PartConventionBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; System::Composition::Convention::PartConventionBuilder ^ Export();" />
      <MemberSignature Language="F#" Value="member this.Export : unit -&gt; System.Composition.Convention.PartConventionBuilder" Usage="partConventionBuilder.Export " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.PartConventionBuilder</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="3a47a-116">Type de contrat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a47a-116">The contract type.</span>
          </span>
        </typeparam>
        <summary>
          <span data-ttu-id="3a47a-117">Exporte le composant qui a le type de contrat spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a47a-117">Exports the part that has the specified contract type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3a47a-118">Générateur de composant qui peut être utilisé pour configurer davantage le composant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a47a-118">A part builder that can be used to further configure the part.</span>
          </span>
        </returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Export&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.PartConventionBuilder Export&lt;T&gt; (Action&lt;System.Composition.Convention.ExportConventionBuilder&gt; exportConfiguration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.PartConventionBuilder Export&lt;T&gt;(class System.Action`1&lt;class System.Composition.Convention.ExportConventionBuilder&gt; exportConfiguration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.PartConventionBuilder.Export``1(System.Action{System.Composition.Convention.ExportConventionBuilder})" />
      <MemberSignature Language="VB.NET" Value="Public Function Export(Of T) (exportConfiguration As Action(Of ExportConventionBuilder)) As PartConventionBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; System::Composition::Convention::PartConventionBuilder ^ Export(Action&lt;System::Composition::Convention::ExportConventionBuilder ^&gt; ^ exportConfiguration);" />
      <MemberSignature Language="F#" Value="member this.Export : Action&lt;System.Composition.Convention.ExportConventionBuilder&gt; -&gt; System.Composition.Convention.PartConventionBuilder" Usage="partConventionBuilder.Export exportConfiguration" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.PartConventionBuilder</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="exportConfiguration" Type="System.Action&lt;System.Composition.Convention.ExportConventionBuilder&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="3a47a-119">Type de contrat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a47a-119">The contract type.</span>
          </span>
        </typeparam>
        <param name="exportConfiguration">
          <span data-ttu-id="3a47a-120">Action qui configure le composant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a47a-120">An action that configures the part.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3a47a-121">Exporte le composant qui a le type de contrat spécifié en utilisant la configuration spécifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a47a-121">Exports the part that has the specified contract type by using the specified configuration.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3a47a-122">Générateur de composant qui peut être utilisé pour configurer davantage le composant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a47a-122">A part builder that can be used to further configure the part.</span>
          </span>
        </returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="ExportInterfaces">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.PartConventionBuilder ExportInterfaces ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.PartConventionBuilder ExportInterfaces() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.PartConventionBuilder.ExportInterfaces" />
      <MemberSignature Language="VB.NET" Value="Public Function ExportInterfaces () As PartConventionBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Composition::Convention::PartConventionBuilder ^ ExportInterfaces();" />
      <MemberSignature Language="F#" Value="member this.ExportInterfaces : unit -&gt; System.Composition.Convention.PartConventionBuilder" Usage="partConventionBuilder.ExportInterfaces " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.PartConventionBuilder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="3a47a-123">Sélectionne toutes les interfaces sur le type de composant à exporter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a47a-123">Selects all interfaces on the part type to be exported.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3a47a-124">Générateur de composant qui peut être utilisé pour configurer davantage le composant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a47a-124">A part builder that can be used to further configure the part.</span>
          </span>
        </returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="ExportInterfaces">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.PartConventionBuilder ExportInterfaces (Predicate&lt;Type&gt; interfaceFilter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.PartConventionBuilder ExportInterfaces(class System.Predicate`1&lt;class System.Type&gt; interfaceFilter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.PartConventionBuilder.ExportInterfaces(System.Predicate{System.Type})" />
      <MemberSignature Language="VB.NET" Value="Public Function ExportInterfaces (interfaceFilter As Predicate(Of Type)) As PartConventionBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Composition::Convention::PartConventionBuilder ^ ExportInterfaces(Predicate&lt;Type ^&gt; ^ interfaceFilter);" />
      <MemberSignature Language="F#" Value="member this.ExportInterfaces : Predicate&lt;Type&gt; -&gt; System.Composition.Convention.PartConventionBuilder" Usage="partConventionBuilder.ExportInterfaces interfaceFilter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.PartConventionBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interfaceFilter" Type="System.Predicate&lt;System.Type&gt;" />
      </Parameters>
      <Docs>
        <param name="interfaceFilter">
          <span data-ttu-id="3a47a-125">Prédicat qui spécifie les interfaces à sélectionner.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a47a-125">A predicate that specifies the interfaces to be selected.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3a47a-126">Sélectionne les interfaces sur le type de composant à exporter selon le filtre spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a47a-126">Selects interfaces on the part type to be exported according to the specified filter.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3a47a-127">Générateur de composant qui peut être utilisé pour configurer davantage le composant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a47a-127">A part builder that can be used to further configure the part.</span>
          </span>
        </returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="ExportInterfaces">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.PartConventionBuilder ExportInterfaces (Predicate&lt;Type&gt; interfaceFilter, Action&lt;Type,System.Composition.Convention.ExportConventionBuilder&gt; exportConfiguration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.PartConventionBuilder ExportInterfaces(class System.Predicate`1&lt;class System.Type&gt; interfaceFilter, class System.Action`2&lt;class System.Type, class System.Composition.Convention.ExportConventionBuilder&gt; exportConfiguration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.PartConventionBuilder.ExportInterfaces(System.Predicate{System.Type},System.Action{System.Type,System.Composition.Convention.ExportConventionBuilder})" />
      <MemberSignature Language="VB.NET" Value="Public Function ExportInterfaces (interfaceFilter As Predicate(Of Type), exportConfiguration As Action(Of Type, ExportConventionBuilder)) As PartConventionBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Composition::Convention::PartConventionBuilder ^ ExportInterfaces(Predicate&lt;Type ^&gt; ^ interfaceFilter, Action&lt;Type ^, System::Composition::Convention::ExportConventionBuilder ^&gt; ^ exportConfiguration);" />
      <MemberSignature Language="F#" Value="member this.ExportInterfaces : Predicate&lt;Type&gt; * Action&lt;Type, System.Composition.Convention.ExportConventionBuilder&gt; -&gt; System.Composition.Convention.PartConventionBuilder" Usage="partConventionBuilder.ExportInterfaces (interfaceFilter, exportConfiguration)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.PartConventionBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interfaceFilter" Type="System.Predicate&lt;System.Type&gt;" />
        <Parameter Name="exportConfiguration" Type="System.Action&lt;System.Type,System.Composition.Convention.ExportConventionBuilder&gt;" />
      </Parameters>
      <Docs>
        <param name="interfaceFilter">
          <span data-ttu-id="3a47a-128">Prédicat qui spécifie les interfaces à sélectionner.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a47a-128">A predicate that specifies the interfaces to be selected.</span>
          </span>
        </param>
        <param name="exportConfiguration">
          <span data-ttu-id="3a47a-129">Action qui configure les exportations.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a47a-129">An action that configures the exports.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3a47a-130">Sélectionne les interfaces sur le type de composant à exporter selon le filtre spécifié, à l'aide de la configuration d'exportation spécifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a47a-130">Selects interfaces on the part type to be exported according to the specified filter, using the specified export configuration.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3a47a-131">Générateur de composant qui peut être utilisé pour configurer davantage le composant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a47a-131">A part builder that can be used to further configure the part.</span>
          </span>
        </returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="ExportProperties">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.PartConventionBuilder ExportProperties (Predicate&lt;System.Reflection.PropertyInfo&gt; propertyFilter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.PartConventionBuilder ExportProperties(class System.Predicate`1&lt;class System.Reflection.PropertyInfo&gt; propertyFilter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.PartConventionBuilder.ExportProperties(System.Predicate{System.Reflection.PropertyInfo})" />
      <MemberSignature Language="VB.NET" Value="Public Function ExportProperties (propertyFilter As Predicate(Of PropertyInfo)) As PartConventionBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Composition::Convention::PartConventionBuilder ^ ExportProperties(Predicate&lt;System::Reflection::PropertyInfo ^&gt; ^ propertyFilter);" />
      <MemberSignature Language="F#" Value="member this.ExportProperties : Predicate&lt;System.Reflection.PropertyInfo&gt; -&gt; System.Composition.Convention.PartConventionBuilder" Usage="partConventionBuilder.ExportProperties propertyFilter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.PartConventionBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyFilter" Type="System.Predicate&lt;System.Reflection.PropertyInfo&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyFilter">
          <span data-ttu-id="3a47a-132">Prédicat qui spécifie les propriétés à exporter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a47a-132">A predicate that specifies the properites to export.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3a47a-133">Sélectionne les propriétés sur le composant à exporter en fonction du prédicat spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a47a-133">Selects the properties on the part to export according to the specified predicate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3a47a-134">Générateur de composant qui peut être utilisé pour configurer davantage le composant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a47a-134">A part builder that can be used to further configure the part.</span>
          </span>
        </returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="ExportProperties">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.PartConventionBuilder ExportProperties (Predicate&lt;System.Reflection.PropertyInfo&gt; propertyFilter, Action&lt;System.Reflection.PropertyInfo,System.Composition.Convention.ExportConventionBuilder&gt; exportConfiguration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.PartConventionBuilder ExportProperties(class System.Predicate`1&lt;class System.Reflection.PropertyInfo&gt; propertyFilter, class System.Action`2&lt;class System.Reflection.PropertyInfo, class System.Composition.Convention.ExportConventionBuilder&gt; exportConfiguration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.PartConventionBuilder.ExportProperties(System.Predicate{System.Reflection.PropertyInfo},System.Action{System.Reflection.PropertyInfo,System.Composition.Convention.ExportConventionBuilder})" />
      <MemberSignature Language="VB.NET" Value="Public Function ExportProperties (propertyFilter As Predicate(Of PropertyInfo), exportConfiguration As Action(Of PropertyInfo, ExportConventionBuilder)) As PartConventionBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Composition::Convention::PartConventionBuilder ^ ExportProperties(Predicate&lt;System::Reflection::PropertyInfo ^&gt; ^ propertyFilter, Action&lt;System::Reflection::PropertyInfo ^, System::Composition::Convention::ExportConventionBuilder ^&gt; ^ exportConfiguration);" />
      <MemberSignature Language="F#" Value="member this.ExportProperties : Predicate&lt;System.Reflection.PropertyInfo&gt; * Action&lt;System.Reflection.PropertyInfo, System.Composition.Convention.ExportConventionBuilder&gt; -&gt; System.Composition.Convention.PartConventionBuilder" Usage="partConventionBuilder.ExportProperties (propertyFilter, exportConfiguration)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.PartConventionBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyFilter" Type="System.Predicate&lt;System.Reflection.PropertyInfo&gt;" />
        <Parameter Name="exportConfiguration" Type="System.Action&lt;System.Reflection.PropertyInfo,System.Composition.Convention.ExportConventionBuilder&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyFilter">
          <span data-ttu-id="3a47a-135">Prédicat qui spécifie les propriétés à exporter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a47a-135">A predicate that specifies the properites to export.</span>
          </span>
        </param>
        <param name="exportConfiguration">
          <span data-ttu-id="3a47a-136">Action qui configure les exportations.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a47a-136">An action that configures the exports.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3a47a-137">Sélectionne les propriétés sur le composant à exporter en fonction du prédicat spécifié, à l’aide de la configuration d’exportation spécifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a47a-137">Selects the properties on the part to export according to the specified predicate, using the specified export configuration.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3a47a-138">Générateur de composant qui peut être utilisé pour configurer davantage le composant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a47a-138">A part builder that can be used to further configure the part.</span>
          </span>
        </returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="ExportProperties&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.PartConventionBuilder ExportProperties&lt;T&gt; (Predicate&lt;System.Reflection.PropertyInfo&gt; propertyFilter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.PartConventionBuilder ExportProperties&lt;T&gt;(class System.Predicate`1&lt;class System.Reflection.PropertyInfo&gt; propertyFilter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.PartConventionBuilder.ExportProperties``1(System.Predicate{System.Reflection.PropertyInfo})" />
      <MemberSignature Language="VB.NET" Value="Public Function ExportProperties(Of T) (propertyFilter As Predicate(Of PropertyInfo)) As PartConventionBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; System::Composition::Convention::PartConventionBuilder ^ ExportProperties(Predicate&lt;System::Reflection::PropertyInfo ^&gt; ^ propertyFilter);" />
      <MemberSignature Language="F#" Value="member this.ExportProperties : Predicate&lt;System.Reflection.PropertyInfo&gt; -&gt; System.Composition.Convention.PartConventionBuilder" Usage="partConventionBuilder.ExportProperties propertyFilter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.PartConventionBuilder</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="propertyFilter" Type="System.Predicate&lt;System.Reflection.PropertyInfo&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="3a47a-139">Type de contrat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a47a-139">The contract type.</span>
          </span>
        </typeparam>
        <param name="propertyFilter">
          <span data-ttu-id="3a47a-140">Prédicat qui spécifie les propriétés à exporter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a47a-140">A predicate that specifies the properites to export.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3a47a-141">Sélectionne les propriétés sur le composant à exporter en fonction du prédicat spécifié, à l’aide du type de contrat spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a47a-141">Selects the properties on the part to export according to the specified predicate, using the specified contract type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3a47a-142">Générateur de composant qui peut être utilisé pour configurer davantage le composant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a47a-142">A part builder that can be used to further configure the part.</span>
          </span>
        </returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="ExportProperties&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.PartConventionBuilder ExportProperties&lt;T&gt; (Predicate&lt;System.Reflection.PropertyInfo&gt; propertyFilter, Action&lt;System.Reflection.PropertyInfo,System.Composition.Convention.ExportConventionBuilder&gt; exportConfiguration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.PartConventionBuilder ExportProperties&lt;T&gt;(class System.Predicate`1&lt;class System.Reflection.PropertyInfo&gt; propertyFilter, class System.Action`2&lt;class System.Reflection.PropertyInfo, class System.Composition.Convention.ExportConventionBuilder&gt; exportConfiguration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.PartConventionBuilder.ExportProperties``1(System.Predicate{System.Reflection.PropertyInfo},System.Action{System.Reflection.PropertyInfo,System.Composition.Convention.ExportConventionBuilder})" />
      <MemberSignature Language="VB.NET" Value="Public Function ExportProperties(Of T) (propertyFilter As Predicate(Of PropertyInfo), exportConfiguration As Action(Of PropertyInfo, ExportConventionBuilder)) As PartConventionBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; System::Composition::Convention::PartConventionBuilder ^ ExportProperties(Predicate&lt;System::Reflection::PropertyInfo ^&gt; ^ propertyFilter, Action&lt;System::Reflection::PropertyInfo ^, System::Composition::Convention::ExportConventionBuilder ^&gt; ^ exportConfiguration);" />
      <MemberSignature Language="F#" Value="member this.ExportProperties : Predicate&lt;System.Reflection.PropertyInfo&gt; * Action&lt;System.Reflection.PropertyInfo, System.Composition.Convention.ExportConventionBuilder&gt; -&gt; System.Composition.Convention.PartConventionBuilder" Usage="partConventionBuilder.ExportProperties (propertyFilter, exportConfiguration)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.PartConventionBuilder</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="propertyFilter" Type="System.Predicate&lt;System.Reflection.PropertyInfo&gt;" />
        <Parameter Name="exportConfiguration" Type="System.Action&lt;System.Reflection.PropertyInfo,System.Composition.Convention.ExportConventionBuilder&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="3a47a-143">Type de contrat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a47a-143">The contract type.</span>
          </span>
        </typeparam>
        <param name="propertyFilter">
          <span data-ttu-id="3a47a-144">Prédicat qui spécifie les propriétés à exporter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a47a-144">A predicate that specifies the properites to export.</span>
          </span>
        </param>
        <param name="exportConfiguration">
          <span data-ttu-id="3a47a-145">Action qui configure les exportations.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a47a-145">An action that configures the exports.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3a47a-146">Sélectionne les propriétés sur le composant à exporter en fonction du prédicat spécifié, à l’aide du type de contrat et de la configuration d’exportation spécifiés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a47a-146">Selects the properties on the part to export according to the specified predicate, using the specified contract type and export configuration.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3a47a-147">Générateur de composant qui peut être utilisé pour configurer davantage le composant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a47a-147">A part builder that can be used to further configure the part.</span>
          </span>
        </returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImportProperties">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.PartConventionBuilder ImportProperties (Predicate&lt;System.Reflection.PropertyInfo&gt; propertyFilter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.PartConventionBuilder ImportProperties(class System.Predicate`1&lt;class System.Reflection.PropertyInfo&gt; propertyFilter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.PartConventionBuilder.ImportProperties(System.Predicate{System.Reflection.PropertyInfo})" />
      <MemberSignature Language="VB.NET" Value="Public Function ImportProperties (propertyFilter As Predicate(Of PropertyInfo)) As PartConventionBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Composition::Convention::PartConventionBuilder ^ ImportProperties(Predicate&lt;System::Reflection::PropertyInfo ^&gt; ^ propertyFilter);" />
      <MemberSignature Language="F#" Value="member this.ImportProperties : Predicate&lt;System.Reflection.PropertyInfo&gt; -&gt; System.Composition.Convention.PartConventionBuilder" Usage="partConventionBuilder.ImportProperties propertyFilter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.PartConventionBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyFilter" Type="System.Predicate&lt;System.Reflection.PropertyInfo&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyFilter">
          <span data-ttu-id="3a47a-148">Prédicat qui spécifie les propriétés à importer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a47a-148">A predicate that specifies the properites to import.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3a47a-149">Sélectionne les propriétés sur le composant à importer selon le prédicat spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a47a-149">Selects the properties on the part to import according to the specified predicate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3a47a-150">Générateur de composant qui peut être utilisé pour configurer davantage le composant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a47a-150">A part builder that can be used to further configure the part.</span>
          </span>
        </returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImportProperties">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.PartConventionBuilder ImportProperties (Predicate&lt;System.Reflection.PropertyInfo&gt; propertyFilter, Action&lt;System.Reflection.PropertyInfo,System.Composition.Convention.ImportConventionBuilder&gt; importConfiguration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.PartConventionBuilder ImportProperties(class System.Predicate`1&lt;class System.Reflection.PropertyInfo&gt; propertyFilter, class System.Action`2&lt;class System.Reflection.PropertyInfo, class System.Composition.Convention.ImportConventionBuilder&gt; importConfiguration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.PartConventionBuilder.ImportProperties(System.Predicate{System.Reflection.PropertyInfo},System.Action{System.Reflection.PropertyInfo,System.Composition.Convention.ImportConventionBuilder})" />
      <MemberSignature Language="VB.NET" Value="Public Function ImportProperties (propertyFilter As Predicate(Of PropertyInfo), importConfiguration As Action(Of PropertyInfo, ImportConventionBuilder)) As PartConventionBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Composition::Convention::PartConventionBuilder ^ ImportProperties(Predicate&lt;System::Reflection::PropertyInfo ^&gt; ^ propertyFilter, Action&lt;System::Reflection::PropertyInfo ^, System::Composition::Convention::ImportConventionBuilder ^&gt; ^ importConfiguration);" />
      <MemberSignature Language="F#" Value="member this.ImportProperties : Predicate&lt;System.Reflection.PropertyInfo&gt; * Action&lt;System.Reflection.PropertyInfo, System.Composition.Convention.ImportConventionBuilder&gt; -&gt; System.Composition.Convention.PartConventionBuilder" Usage="partConventionBuilder.ImportProperties (propertyFilter, importConfiguration)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.PartConventionBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyFilter" Type="System.Predicate&lt;System.Reflection.PropertyInfo&gt;" />
        <Parameter Name="importConfiguration" Type="System.Action&lt;System.Reflection.PropertyInfo,System.Composition.Convention.ImportConventionBuilder&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyFilter">
          <span data-ttu-id="3a47a-151">Prédicat qui spécifie les propriétés à importer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a47a-151">A predicate that specifies the properites to import.</span>
          </span>
        </param>
        <param name="importConfiguration">
          <span data-ttu-id="3a47a-152">Action qui configure les importations.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a47a-152">An action that configures the imports.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3a47a-153">Sélectionne les propriétés sur le composant à importer en fonction du prédicat spécifié, à l’aide de la configuration d’importation spécifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a47a-153">Selects the properties on the part to import according to the specified predicate, using the specified import configuration.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3a47a-154">Générateur de composant qui peut être utilisé pour configurer davantage le composant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a47a-154">A part builder that can be used to further configure the part.</span>
          </span>
        </returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImportProperties&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.PartConventionBuilder ImportProperties&lt;T&gt; (Predicate&lt;System.Reflection.PropertyInfo&gt; propertyFilter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.PartConventionBuilder ImportProperties&lt;T&gt;(class System.Predicate`1&lt;class System.Reflection.PropertyInfo&gt; propertyFilter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.PartConventionBuilder.ImportProperties``1(System.Predicate{System.Reflection.PropertyInfo})" />
      <MemberSignature Language="VB.NET" Value="Public Function ImportProperties(Of T) (propertyFilter As Predicate(Of PropertyInfo)) As PartConventionBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; System::Composition::Convention::PartConventionBuilder ^ ImportProperties(Predicate&lt;System::Reflection::PropertyInfo ^&gt; ^ propertyFilter);" />
      <MemberSignature Language="F#" Value="member this.ImportProperties : Predicate&lt;System.Reflection.PropertyInfo&gt; -&gt; System.Composition.Convention.PartConventionBuilder" Usage="partConventionBuilder.ImportProperties propertyFilter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.PartConventionBuilder</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="propertyFilter" Type="System.Predicate&lt;System.Reflection.PropertyInfo&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="3a47a-155">Type de contrat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a47a-155">The contract type.</span>
          </span>
        </typeparam>
        <param name="propertyFilter">
          <span data-ttu-id="3a47a-156">Prédicat qui spécifie les propriétés à importer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a47a-156">A predicate that specifies the properties to import.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3a47a-157">Sélectionne les propriétés sur le composant à importer en fonction du prédicat spécifié, à l’aide du type de contrat spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a47a-157">Selects the properties on the part to import according to the specified predicate, using the specified contract type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3a47a-158">Générateur de composant qui peut être utilisé pour configurer davantage le composant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a47a-158">A part builder that can be used to further configure the part.</span>
          </span>
        </returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImportProperties&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.PartConventionBuilder ImportProperties&lt;T&gt; (Predicate&lt;System.Reflection.PropertyInfo&gt; propertyFilter, Action&lt;System.Reflection.PropertyInfo,System.Composition.Convention.ImportConventionBuilder&gt; importConfiguration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.PartConventionBuilder ImportProperties&lt;T&gt;(class System.Predicate`1&lt;class System.Reflection.PropertyInfo&gt; propertyFilter, class System.Action`2&lt;class System.Reflection.PropertyInfo, class System.Composition.Convention.ImportConventionBuilder&gt; importConfiguration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.PartConventionBuilder.ImportProperties``1(System.Predicate{System.Reflection.PropertyInfo},System.Action{System.Reflection.PropertyInfo,System.Composition.Convention.ImportConventionBuilder})" />
      <MemberSignature Language="VB.NET" Value="Public Function ImportProperties(Of T) (propertyFilter As Predicate(Of PropertyInfo), importConfiguration As Action(Of PropertyInfo, ImportConventionBuilder)) As PartConventionBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; System::Composition::Convention::PartConventionBuilder ^ ImportProperties(Predicate&lt;System::Reflection::PropertyInfo ^&gt; ^ propertyFilter, Action&lt;System::Reflection::PropertyInfo ^, System::Composition::Convention::ImportConventionBuilder ^&gt; ^ importConfiguration);" />
      <MemberSignature Language="F#" Value="member this.ImportProperties : Predicate&lt;System.Reflection.PropertyInfo&gt; * Action&lt;System.Reflection.PropertyInfo, System.Composition.Convention.ImportConventionBuilder&gt; -&gt; System.Composition.Convention.PartConventionBuilder" Usage="partConventionBuilder.ImportProperties (propertyFilter, importConfiguration)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.PartConventionBuilder</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="propertyFilter" Type="System.Predicate&lt;System.Reflection.PropertyInfo&gt;" />
        <Parameter Name="importConfiguration" Type="System.Action&lt;System.Reflection.PropertyInfo,System.Composition.Convention.ImportConventionBuilder&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="3a47a-159">Type de contrat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a47a-159">The contract type.</span>
          </span>
        </typeparam>
        <param name="propertyFilter">
          <span data-ttu-id="3a47a-160">Prédicat qui spécifie les propriétés à importer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a47a-160">A predicate that specifies the properties to import.</span>
          </span>
        </param>
        <param name="importConfiguration">
          <span data-ttu-id="3a47a-161">Action qui configure les importations.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a47a-161">An action that configures the imports.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3a47a-162">Sélectionne les propriétés sur le composant à importer en fonction du prédicat spécifié, à l’aide du type de contrat et de la configuration d’importation spécifiés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a47a-162">Selects the properties on the part to import according to the specified predicate, using the specified contract type and import configuration.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3a47a-163">Générateur de composant qui peut être utilisé pour configurer davantage le composant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a47a-163">A part builder that can be used to further configure the part.</span>
          </span>
        </returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="NotifyImportsSatisfied">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.PartConventionBuilder NotifyImportsSatisfied (Predicate&lt;System.Reflection.MethodInfo&gt; methodFilter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.PartConventionBuilder NotifyImportsSatisfied(class System.Predicate`1&lt;class System.Reflection.MethodInfo&gt; methodFilter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.PartConventionBuilder.NotifyImportsSatisfied(System.Predicate{System.Reflection.MethodInfo})" />
      <MemberSignature Language="VB.NET" Value="Public Function NotifyImportsSatisfied (methodFilter As Predicate(Of MethodInfo)) As PartConventionBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Composition::Convention::PartConventionBuilder ^ NotifyImportsSatisfied(Predicate&lt;System::Reflection::MethodInfo ^&gt; ^ methodFilter);" />
      <MemberSignature Language="F#" Value="member this.NotifyImportsSatisfied : Predicate&lt;System.Reflection.MethodInfo&gt; -&gt; System.Composition.Convention.PartConventionBuilder" Usage="partConventionBuilder.NotifyImportsSatisfied methodFilter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.PartConventionBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodFilter" Type="System.Predicate&lt;System.Reflection.MethodInfo&gt;" />
      </Parameters>
      <Docs>
        <param name="methodFilter">
          <span data-ttu-id="3a47a-164">Prédicat qui sélectionne les méthodes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a47a-164">A predicate that selects the methods.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3a47a-165">Sélectionne les méthodes à utiliser comme notification quand la composition est terminée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a47a-165">Select methods to be used as a notification when composition is complete.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3a47a-166">Générateur de composant qui peut être utilisé pour configurer davantage le composant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a47a-166">A part builder that can be used to further configure the part.</span>
          </span>
        </returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectConstructor">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.PartConventionBuilder SelectConstructor (Func&lt;System.Collections.Generic.IEnumerable&lt;System.Reflection.ConstructorInfo&gt;,System.Reflection.ConstructorInfo&gt; constructorSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.PartConventionBuilder SelectConstructor(class System.Func`2&lt;class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.ConstructorInfo&gt;, class System.Reflection.ConstructorInfo&gt; constructorSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.PartConventionBuilder.SelectConstructor(System.Func{System.Collections.Generic.IEnumerable{System.Reflection.ConstructorInfo},System.Reflection.ConstructorInfo})" />
      <MemberSignature Language="VB.NET" Value="Public Function SelectConstructor (constructorSelector As Func(Of IEnumerable(Of ConstructorInfo), ConstructorInfo)) As PartConventionBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Composition::Convention::PartConventionBuilder ^ SelectConstructor(Func&lt;System::Collections::Generic::IEnumerable&lt;System::Reflection::ConstructorInfo ^&gt; ^, System::Reflection::ConstructorInfo ^&gt; ^ constructorSelector);" />
      <MemberSignature Language="F#" Value="member this.SelectConstructor : Func&lt;seq&lt;System.Reflection.ConstructorInfo&gt;, System.Reflection.ConstructorInfo&gt; -&gt; System.Composition.Convention.PartConventionBuilder" Usage="partConventionBuilder.SelectConstructor constructorSelector" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.PartConventionBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constructorSelector" Type="System.Func&lt;System.Collections.Generic.IEnumerable&lt;System.Reflection.ConstructorInfo&gt;,System.Reflection.ConstructorInfo&gt;" />
      </Parameters>
      <Docs>
        <param name="constructorSelector">
          <span data-ttu-id="3a47a-167">Fonction retournant un constructeur unique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a47a-167">A function that returns a single constructor.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3a47a-168">Sélectionne le constructeur utilisé pour initialiser le composant à l'aide de la fonction spécifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a47a-168">Selects the constructor used to initialize the part by using the specified function.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3a47a-169">Générateur de composant qui peut être utilisé pour configurer davantage le composant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a47a-169">A part builder that can be used to further configure the part.</span>
          </span>
        </returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectConstructor">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.PartConventionBuilder SelectConstructor (Func&lt;System.Collections.Generic.IEnumerable&lt;System.Reflection.ConstructorInfo&gt;,System.Reflection.ConstructorInfo&gt; constructorSelector, Action&lt;System.Reflection.ParameterInfo,System.Composition.Convention.ImportConventionBuilder&gt; importConfiguration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.PartConventionBuilder SelectConstructor(class System.Func`2&lt;class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.ConstructorInfo&gt;, class System.Reflection.ConstructorInfo&gt; constructorSelector, class System.Action`2&lt;class System.Reflection.ParameterInfo, class System.Composition.Convention.ImportConventionBuilder&gt; importConfiguration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.PartConventionBuilder.SelectConstructor(System.Func{System.Collections.Generic.IEnumerable{System.Reflection.ConstructorInfo},System.Reflection.ConstructorInfo},System.Action{System.Reflection.ParameterInfo,System.Composition.Convention.ImportConventionBuilder})" />
      <MemberSignature Language="VB.NET" Value="Public Function SelectConstructor (constructorSelector As Func(Of IEnumerable(Of ConstructorInfo), ConstructorInfo), importConfiguration As Action(Of ParameterInfo, ImportConventionBuilder)) As PartConventionBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Composition::Convention::PartConventionBuilder ^ SelectConstructor(Func&lt;System::Collections::Generic::IEnumerable&lt;System::Reflection::ConstructorInfo ^&gt; ^, System::Reflection::ConstructorInfo ^&gt; ^ constructorSelector, Action&lt;System::Reflection::ParameterInfo ^, System::Composition::Convention::ImportConventionBuilder ^&gt; ^ importConfiguration);" />
      <MemberSignature Language="F#" Value="member this.SelectConstructor : Func&lt;seq&lt;System.Reflection.ConstructorInfo&gt;, System.Reflection.ConstructorInfo&gt; * Action&lt;System.Reflection.ParameterInfo, System.Composition.Convention.ImportConventionBuilder&gt; -&gt; System.Composition.Convention.PartConventionBuilder" Usage="partConventionBuilder.SelectConstructor (constructorSelector, importConfiguration)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.PartConventionBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constructorSelector" Type="System.Func&lt;System.Collections.Generic.IEnumerable&lt;System.Reflection.ConstructorInfo&gt;,System.Reflection.ConstructorInfo&gt;" />
        <Parameter Name="importConfiguration" Type="System.Action&lt;System.Reflection.ParameterInfo,System.Composition.Convention.ImportConventionBuilder&gt;" />
      </Parameters>
      <Docs>
        <param name="constructorSelector">
          <span data-ttu-id="3a47a-170">Fonction retournant un constructeur unique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a47a-170">A function that returns a single constructor.</span>
          </span>
        </param>
        <param name="importConfiguration">
          <span data-ttu-id="3a47a-171">Méthode qui configure les importations du constructeur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a47a-171">A method that configures the constructor's imports.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3a47a-172">Sélectionne le constructeur utilisé pour initialiser le composant à l'aide de la fonction et de la configuration d'importation spécifiées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a47a-172">Selects the constructor used to initialize the part by using the specified function and import configuration.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3a47a-173">Générateur de composant qui peut être utilisé pour configurer davantage le composant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a47a-173">A part builder that can be used to further configure the part.</span>
          </span>
        </returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Shared">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.PartConventionBuilder Shared ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.PartConventionBuilder Shared() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.PartConventionBuilder.Shared" />
      <MemberSignature Language="VB.NET" Value="Public Function Shared () As PartConventionBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Composition::Convention::PartConventionBuilder ^ Shared();" />
      <MemberSignature Language="F#" Value="member this.Shared : unit -&gt; System.Composition.Convention.PartConventionBuilder" Usage="partConventionBuilder.Shared " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.PartConventionBuilder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="3a47a-174">Marque le composant comme étant partagé dans la composition entière.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a47a-174">Marks the part as being shared throughout the entire composition.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3a47a-175">Générateur de composant qui peut être utilisé pour configurer davantage le composant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a47a-175">A part builder that can be used to further configure the part.</span>
          </span>
        </returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Shared">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.PartConventionBuilder Shared (string sharingBoundary);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.PartConventionBuilder Shared(string sharingBoundary) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.PartConventionBuilder.Shared(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Shared (sharingBoundary As String) As PartConventionBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Composition::Convention::PartConventionBuilder ^ Shared(System::String ^ sharingBoundary);" />
      <MemberSignature Language="F#" Value="member this.Shared : string -&gt; System.Composition.Convention.PartConventionBuilder" Usage="partConventionBuilder.Shared sharingBoundary" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.PartConventionBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sharingBoundary" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sharingBoundary">
          <span data-ttu-id="3a47a-176">Limite.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a47a-176">The boundary.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3a47a-177">Marque le composant comme étant partagé dans la limite spécifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a47a-177">Marks the part as being shared within the specified boundary.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3a47a-178">Générateur de composant qui peut être utilisé pour configurer davantage le composant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3a47a-178">A part builder that can be used to further configure the part.</span>
          </span>
        </returns>
        <remarks></remarks>
      </Docs>
    </Member>
  </Members>
</Type>