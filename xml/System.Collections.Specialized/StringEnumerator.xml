<Type Name="StringEnumerator" FullName="System.Collections.Specialized.StringEnumerator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c041a8b7314667b2cd66b4388f0771909ef8bb23" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="37700211" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class StringEnumerator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit StringEnumerator extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Specialized.StringEnumerator" />
  <TypeSignature Language="VB.NET" Value="Public Class StringEnumerator" />
  <TypeSignature Language="C++ CLI" Value="public ref class StringEnumerator" />
  <TypeSignature Language="F#" Value="type StringEnumerator = class" />
  <AssemblyInfo>
    <AssemblyName>System.Collections.Specialized</AssemblyName>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Prend en charge une itération simple au sein de <see cref="T:System.Collections.Specialized.StringCollection" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'instruction `foreach` du langage C# (`for each` en Visual Basic) se charge de la complexité des énumérateurs.  Il est donc recommandé d'utiliser `foreach` plutôt que de manipuler l'énumérateur directement.  
  
 Les énumérateurs peuvent être utilisés pour lire les données de la collection, mais ils ne permettent pas de modifier la collection sous-jacente.  
  
 Au départ, l’énumérateur est positionné avant le premier élément de la collection. <xref:System.Collections.Specialized.StringEnumerator.Reset%2A> replace également l'énumérateur à cette position. À cette position, l’appel <xref:System.Collections.Specialized.StringEnumerator.Current%2A> lève une exception. Par conséquent, vous devez appeler <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> pour avancer l'énumérateur jusqu'au premier élément de la collection avant de lire la valeur de <xref:System.Collections.Specialized.StringEnumerator.Current%2A>.  
  
 <xref:System.Collections.Specialized.StringEnumerator.Current%2A> retourne le même objet tant que <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> ou <xref:System.Collections.Specialized.StringEnumerator.Reset%2A> n'est pas appelé. <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> affecte l'élément suivant à <xref:System.Collections.Specialized.StringEnumerator.Current%2A>.  
  
 Si <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> passe à la fin de la collection, l’énumérateur est positionnée après le dernier élément dans la collection et <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> retourne `false`. Lorsque l’énumérateur se trouve à cette position, les appels suivants à <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> également retourner `false`. Si le dernier appel à <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> retourné `false`, l’appel <xref:System.Collections.Specialized.StringEnumerator.Current%2A> lève une exception. Pour attribuer une nouvelle fois <xref:System.Collections.Specialized.StringEnumerator.Current%2A> au premier élément de la collection, vous pouvez appeler <xref:System.Collections.Specialized.StringEnumerator.Reset%2A> suivi de <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A>.  
  
 Un énumérateur est valide tant que la collection demeure inchangée. Si des modifications sont apportées à la collection, telles que l’ajout, modification, ou la suppression d’éléments, l’énumérateur est définitivement invalidé et l’appel suivant à <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> ou <xref:System.Collections.Specialized.StringEnumerator.Reset%2A> lève une <xref:System.InvalidOperationException>. Si la collection est modifiée entre <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> et <xref:System.Collections.Specialized.StringEnumerator.Current%2A>, <xref:System.Collections.Specialized.StringEnumerator.Current%2A> retourne l’élément auquel il est attribué, même si l’énumérateur est déjà invalidé.  
  
 Comme l’énumérateur ne dispose pas d’un accès exclusif à la collection, l’énumération d’une collection n’est pas intrinsèquement une procédure thread-safe. Même lorsqu'une collection est synchronisée, les autres threads peuvent toujours la modifier, ce qui entraîne la levée d'une exception par l'énumérateur. Pour garantir la sécurité des threads au cours de l’énumération, vous pouvez verrouiller la collection pendant l’ensemble de l’énumération ou bien intercepter les exceptions résultant des modifications apportées par les autres threads.  
  
   
  
## Examples  
 L’exemple de code suivant illustre plusieurs des propriétés et méthodes de <xref:System.Collections.Specialized.StringEnumerator>.  
  
 [!code-cpp[System.Collections.Specialized.StringEnumerator2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.StringEnumerator2/CPP/stringenumerator.cpp#1)]
 [!code-csharp[System.Collections.Specialized.StringEnumerator2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.StringEnumerator2/CS/stringenumerator.cs#1)]
 [!code-vb[System.Collections.Specialized.StringEnumerator2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.StringEnumerator2/VB/stringenumerator.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Statique public (<see langword="Shared" /> en Visual Basic) de ce type sont thread-safe. Il n'est pas garanti que les membres d'instance soient thread-safe.  
  
L’énumération d’une collection n’est intrinsèquement pas une procédure thread-safe. Même lorsqu'une collection est synchronisée, les autres threads peuvent toujours la modifier, ce qui entraîne la levée d'une exception par l'énumérateur. Pour garantir la sécurité des threads au cours de l’énumération, vous pouvez verrouiller la collection pendant l’ensemble de l’énumération ou bien intercepter les exceptions résultant des modifications apportées par les autres threads.</threadsafe>
    <altmember cref="T:System.Collections.IEnumerable" />
    <altmember cref="T:System.Collections.IEnumerator" />
    <altmember cref="T:System.Collections.Specialized.StringCollection" />
  </Docs>
  <Members>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public string Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Current" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Specialized.StringEnumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Current { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Current : string" Usage="System.Collections.Specialized.StringEnumerator.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient l’élément actuel dans la collection.</summary>
        <value>Élément actuel dans la collection.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Après avoir créé un énumérateur ou après un <xref:System.Collections.Specialized.StringEnumerator.Reset%2A> est appelée, <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> doit être appelée pour avancer l’énumérateur vers le premier élément de la collection avant de lire la valeur de <xref:System.Collections.Specialized.StringEnumerator.Current%2A>; sinon, <xref:System.Collections.Specialized.StringEnumerator.Current%2A> n’est pas défini.  
  
 <xref:System.Collections.Specialized.StringEnumerator.Current%2A> lève également une exception si le dernier appel à <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> retourné `false`, ce qui indique la fin de la collection.  
  
 <xref:System.Collections.Specialized.StringEnumerator.Current%2A> ne déplace pas la position de l’énumérateur et les appels consécutifs à <xref:System.Collections.Specialized.StringEnumerator.Current%2A> retournent le même objet jusqu'à ce que <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> ou <xref:System.Collections.Specialized.StringEnumerator.Reset%2A> est appelée.  
  
 Un énumérateur est valide tant que la collection demeure inchangée. Si des modifications sont apportées à la collection, telles que l’ajout, modification, ou la suppression d’éléments, l’énumérateur est définitivement invalidé et l’appel suivant à <xref:System.Collections.IEnumerator.MoveNext%2A> ou <xref:System.Collections.IEnumerator.Reset%2A> lève une <xref:System.InvalidOperationException>. Si la collection est modifiée entre <xref:System.Collections.IEnumerator.MoveNext%2A> et <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> retourne l’élément auquel il est attribué, même si l’énumérateur est déjà invalidé.  
  
   
  
## Examples  
 L’exemple de code suivant illustre plusieurs des propriétés et méthodes de <xref:System.Collections.Specialized.StringEnumerator>.  
  
 [!code-cpp[System.Collections.Specialized.StringEnumerator2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.StringEnumerator2/CPP/stringenumerator.cpp#1)]
 [!code-csharp[System.Collections.Specialized.StringEnumerator2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.StringEnumerator2/CS/stringenumerator.cs#1)]
 [!code-vb[System.Collections.Specialized.StringEnumerator2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.StringEnumerator2/VB/stringenumerator.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">L'énumérateur est placé avant le premier élément de la collection ou après le dernier élément.</exception>
        <altmember cref="M:System.Collections.Specialized.StringEnumerator.MoveNext" />
        <altmember cref="M:System.Collections.Specialized.StringEnumerator.Reset" />
        <altmember cref="P:System.Collections.IEnumerator.Current" />
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.StringEnumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool MoveNext();" />
      <MemberSignature Language="F#" Value="member this.MoveNext : unit -&gt; bool" Usage="stringEnumerator.MoveNext " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Avance l’énumérateur à l’élément suivant de la collection.</summary>
        <returns>
          <see langword="true" /> si l'énumérateur a pu avancer jusqu'à l'élément suivant ; <see langword="false" /> si l'énumérateur a dépassé la fin de la collection.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Après avoir créé un énumérateur ou après un <xref:System.Collections.Specialized.StringEnumerator.Reset%2A> est appelée, un énumérateur est positionné avant le premier élément de la collection et le premier appel à <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> déplace l’énumérateur sur le premier élément de la collection.  
  
 Si <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> passe à la fin de la collection, l’énumérateur est positionnée après le dernier élément dans la collection et <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> retourne `false`. Lorsque l’énumérateur se trouve à cette position, les appels suivants à <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> également retourner `false` jusqu'à ce que <xref:System.Collections.Specialized.StringEnumerator.Reset%2A> est appelée.  
  
 Un énumérateur est valide tant que la collection demeure inchangée. Si des modifications sont apportées à la collection, telles que l’ajout, modification, ou la suppression d’éléments, l’énumérateur est définitivement invalidé et l’appel suivant à <xref:System.Collections.IEnumerator.MoveNext%2A> ou <xref:System.Collections.IEnumerator.Reset%2A> lève une <xref:System.InvalidOperationException>. Si la collection est modifiée entre <xref:System.Collections.IEnumerator.MoveNext%2A> et <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> retourne l’élément auquel il est attribué, même si l’énumérateur est déjà invalidé.  
  
   
  
## Examples  
 L’exemple de code suivant illustre plusieurs des propriétés et méthodes de <xref:System.Collections.Specialized.StringEnumerator>.  
  
 [!code-cpp[System.Collections.Specialized.StringEnumerator2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.StringEnumerator2/CPP/stringenumerator.cpp#1)]
 [!code-csharp[System.Collections.Specialized.StringEnumerator2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.StringEnumerator2/CS/stringenumerator.cs#1)]
 [!code-vb[System.Collections.Specialized.StringEnumerator2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.StringEnumerator2/VB/stringenumerator.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">La collection a été modifiée après la création de l'énumérateur.</exception>
        <altmember cref="P:System.Collections.Specialized.StringEnumerator.Current" />
        <altmember cref="M:System.Collections.Specialized.StringEnumerator.Reset" />
        <altmember cref="M:System.Collections.IEnumerator.MoveNext" />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.StringEnumerator.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; unit" Usage="stringEnumerator.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Rétablit l’énumérateur à sa position initiale, qui précède le premier élément de la collection.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Specialized.StringEnumerator.Reset%2A> Déplace l’énumérateur au début de la collection, avant le premier élément. Après avoir <xref:System.Collections.Specialized.StringEnumerator.Reset%2A>, <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> doit être appelée pour avancer l’énumérateur vers le premier élément de la collection avant de lire la valeur de <xref:System.Collections.Specialized.StringEnumerator.Current%2A>.  
  
   
  
## Examples  
 L’exemple de code suivant illustre plusieurs des propriétés et méthodes de <xref:System.Collections.Specialized.StringEnumerator>.  
  
 [!code-cpp[System.Collections.Specialized.StringEnumerator2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.StringEnumerator2/CPP/stringenumerator.cpp#1)]
 [!code-csharp[System.Collections.Specialized.StringEnumerator2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.StringEnumerator2/CS/stringenumerator.cs#1)]
 [!code-vb[System.Collections.Specialized.StringEnumerator2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.StringEnumerator2/VB/stringenumerator.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">La collection a été modifiée après la création de l'énumérateur.</exception>
        <altmember cref="M:System.Collections.Specialized.StringEnumerator.MoveNext" />
        <altmember cref="P:System.Collections.Specialized.StringEnumerator.Current" />
        <altmember cref="M:System.Collections.IEnumerator.Reset" />
      </Docs>
    </Member>
  </Members>
</Type>