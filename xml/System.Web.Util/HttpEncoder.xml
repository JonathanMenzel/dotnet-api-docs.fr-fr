<Type Name="HttpEncoder" FullName="System.Web.Util.HttpEncoder">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6c850ad4d898af0ca92a20c28ec46edd2944b59e" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57946844" /></Metadata><TypeSignature Language="C#" Value="public class HttpEncoder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi HttpEncoder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Util.HttpEncoder" />
  <TypeSignature Language="VB.NET" Value="Public Class HttpEncoder" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpEncoder" />
  <TypeSignature Language="F#" Value="type HttpEncoder = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Web.Services</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fournit la logique d'encodage et de décodage.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La classe contient l’encodage et décodage logique qui est utilisée par les méthodes dans les classes telles que <xref:System.Web.HttpUtility>, <xref:System.Web.HttpServerUtility>, et <xref:System.Net.HttpResponseHeader>.  
  
 Vous pouvez hériter la <xref:System.Web.Util.HttpEncoder> classe et remplacer son comportement pour personnaliser la valeur par défaut, codage et décodage de comportement d’ASP.NET. Vous définissez ensuite la <xref:System.Web.Configuration.HttpRuntimeSection.EncoderType%2A> propriété de la <xref:System.Web.Configuration.HttpRuntimeSection> classe de configuration de votre classe personnalisée.  
  
 Une classe personnalisée pour l’encodage et décodage qui dérive <xref:System.Web.Util.HttpEncoder> peuvent substituer ASP.NET intégrés de codage et décodage de comportement ou modifier certains aspects de celui-ci.  
  
 Vous pouvez configurer le type d’encodage personnalisé dans ASP.NET pour remplacer ou compléter le comportement d’encodage suivant :  
  
-   Codage HTML  
  
-   Codage d’attribut HTML  
  
-   L’encodage des URL  
  
-   Codage de chemin d’accès URL  
  
-   Nom d’en-tête HTTP et le codage de valeur d’en-tête  
  
 Par défaut, les applications ASP.NET sont configurées pour utiliser le <xref:System.Web.Security.AntiXss.AntiXssEncoder> le type de toutes les sorties d’encodage.  
  
 L’exemple suivant à partir d’un fichier Web.config s’affiche au niveau de l’application comment la <xref:System.Web.Security.AntiXss.AntiXssEncoder> type est défini pour une application ASP.NET :  
  
 `<httpRuntime requestValidationMode="4.5" encoderType="System.Web.Security.AntiXss.AntiXssEncoder, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"/>`  
  
 Le paramètre de configuration dans l’exemple définit la <xref:System.Web.Security.AntiXss.AntiXssEncoder> classe pour effectuer tout codage dans l’application de sortie. Pour plus d’informations, consultez le <xref:System.Web.Security.AntiXss.AntiXssEncoder> vue d’ensemble de la classe.  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>Lorsque vous créez une classe d’encodeur personnalisé et que vous substituez les méthodes de base de la classe de base, l’encodeur dérivée peut lever une exception à partir d’une des méthodes substituées. Toutefois, dans les cas suivants lever cette exception peut provoquer un comportement inattendu dans ASP.NET : 
-Si ASP.NET est rendu d’une page d’erreur qui est provoquée par une exception non gérée a été levée à partir d’un encodeur personnalisé, ASP.NET ne tente pas d’encoder sa sortie d’erreur en appelant l’encodeur personnalisé. Cela évite les conditions d’erreur récursive.  
  
-Lorsque ASP.NET envoie des en-têtes HTTP à IIS, ASP.NET n’a aucune provision pour les exceptions non gérées. Par conséquent, la page d’erreurs ASP.NET standard sera rendue (si les paramètres de configuration permet à cette page à afficher).</para></block>
    <altmember cref="T:System.Web.HttpUtility" />
    <altmember cref="T:System.Web.HttpServerUtility" />
    <altmember cref="T:System.Web.Configuration.HttpRuntimeSection" />
    <altmember cref="T:System.Web.Security.AntiXss.AntiXssEncoder" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpEncoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpEncoder();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Util.HttpEncoder" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public static System.Web.Util.HttpEncoder Current { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.Util.HttpEncoder Current" />
      <MemberSignature Language="DocId" Value="P:System.Web.Util.HttpEncoder.Current" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property Current As HttpEncoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Util::HttpEncoder ^ Current { System::Web::Util::HttpEncoder ^ get(); void set(System::Web::Util::HttpEncoder ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Current : System.Web.Util.HttpEncoder with get, set" Usage="System.Web.Util.HttpEncoder.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Util.HttpEncoder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le type de <see cref="T:System.Web.Util.HttpEncoder" /> qui sera utilisé dans une application.</summary>
        <value>Référence au type d'encodeur/décodeur qui sera utilisé.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si une dérivée <xref:System.Web.Util.HttpEncoder> type est spécifié dans le fichier de configuration, le <xref:System.Web.Util.HttpEncoder.Current%2A> propriété retourne une référence au type personnalisé. Toutefois, si aucun encodeur personnalisé n’est utilisé, la propriété retourne une référence à la valeur par défaut ASP.NET <xref:System.Web.Util.HttpEncoder> instance.  
  
 Le <xref:System.Web.Util.HttpEncoder.Current%2A> propriété n’est pas thread-safe. Définir cette propriété uniquement dans l’application `Application_Start` (méthode), étant donné que `Application_Start` s’exécute sur un thread unique.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">L'instance d'encodeur assignée à cette propriété est <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Default">
      <MemberSignature Language="C#" Value="public static System.Web.Util.HttpEncoder Default { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.Util.HttpEncoder Default" />
      <MemberSignature Language="DocId" Value="P:System.Web.Util.HttpEncoder.Default" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Default As HttpEncoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Util::HttpEncoder ^ Default { System::Web::Util::HttpEncoder ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Default : System.Web.Util.HttpEncoder" Usage="System.Web.Util.HttpEncoder.Default" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.Util.HttpEncoder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une référence à l'encodeur par défaut pour ASP.NET.</summary>
        <value>Référence à l'encodeur par défaut.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un problème de codage courantes qui est la valeur par défaut ASP.NET <xref:System.Web.Util.HttpEncoder.UrlEncode%2A> comportement espaces convertit le caractère « + ». Historiquement, le caractère « + » a été une convention Internet pour l’encodage des caractères d’espace dans une URL dans une manière plus lisible. Toutefois, en fonction des normes, le caractère espace est supposée être encodées en tant que « %20 » et à la place d’en tant que le caractère « + ». ASP.NET vous permet d’implémenter un algorithme de codage normes plus conforme.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HeaderNameValueEncode">
      <MemberSignature Language="C#" Value="protected internal virtual void HeaderNameValueEncode (string headerName, string headerValue, out string encodedHeaderName, out string encodedHeaderValue);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void HeaderNameValueEncode(string headerName, string headerValue, [out] string&amp; encodedHeaderName, [out] string&amp; encodedHeaderValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.HeaderNameValueEncode(System.String,System.String,System.String@,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub HeaderNameValueEncode (headerName As String, headerValue As String, ByRef encodedHeaderName As String, ByRef encodedHeaderValue As String)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void HeaderNameValueEncode(System::String ^ headerName, System::String ^ headerValue, [Runtime::InteropServices::Out] System::String ^ % encodedHeaderName, [Runtime::InteropServices::Out] System::String ^ % encodedHeaderValue);" />
      <MemberSignature Language="F#" Value="abstract member HeaderNameValueEncode : string * string *  *  -&gt; unit&#xA;override this.HeaderNameValueEncode : string * string *  *  -&gt; unit" Usage="httpEncoder.HeaderNameValueEncode (headerName, headerValue, encodedHeaderName, encodedHeaderValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="headerName" Type="System.String" />
        <Parameter Name="headerValue" Type="System.String" />
        <Parameter Name="encodedHeaderName" Type="System.String" RefType="out" />
        <Parameter Name="encodedHeaderValue" Type="System.String" RefType="out" />
      </Parameters>
      <Docs>
        <param name="headerName">Nom d'en-tête HTTP à encoder.</param>
        <param name="headerValue">Valeur d'en-tête HTTP à encoder.</param>
        <param name="encodedHeaderName">Lorsque cette méthode est retournée, contient le nom encodé à utiliser pour un en-tête HTTP. Ce paramètre est passé sans être initialisé.</param>
        <param name="encodedHeaderValue">Lorsque cette méthode est retournée, contient la valeur encodée à utiliser pour un en-tête HTTP. Ce paramètre est passé sans être initialisé.</param>
        <summary>Encode un nom et une valeur d'en-tête dans une chaîne qui peut être utilisée comme en-tête HTTP.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.Util.HttpEncoder.HeaderNameValueEncode%2A> méthode accepte les chaînes d’entrée à partir de la `headerName` et `headerValue` paramètres et les encode. Les valeurs encodées sont retournées comme les paramètres de sortie.  
  
 Le <xref:System.Web.Util.HttpEncoder.HeaderNameValueEncode%2A> méthode utilise la logique suivante pour encoder les noms et valeurs :  
  
-   Tous les caractères Unicode dont la valeur est inférieure au caractère ASCII 32, sauf le caractère ASCII 9 sont codés en URL dans un format de `%NN` où le `N` caractères représentent des valeurs hexadécimales.  
  
-   Caractère ASCII 9 (le caractère de tabulation horizontale) n’est pas encodé en URL.  
  
-   Caractère ASCII 127 est encodé comme `%7F`.  
  
-   Tous les autres caractères ne sont pas encodés.  
  
    > [!NOTE]
    >  Bien que cette méthode peut être utilisée pour les valeurs Unicode, il est généralement utilisé pour les valeurs dans la plage ASCII.  
  
 L’implémentation par défaut de la <xref:System.Web.Util.HttpEncoder.HeaderNameValueEncode%2A> méthode retourne la valeur de `headerValue` dans `encodedHeaderValue` si `headerValue` est `null` ou est une chaîne vide. De même, l’implémentation par défaut retourne la valeur de `headerName` dans `encodedHeaderName` si `headerName` est `null` ou est une chaîne vide.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HtmlAttributeEncode">
      <MemberSignature Language="C#" Value="protected internal virtual void HtmlAttributeEncode (string value, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void HtmlAttributeEncode(string value, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.HtmlAttributeEncode(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub HtmlAttributeEncode (value As String, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void HtmlAttributeEncode(System::String ^ value, System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="abstract member HtmlAttributeEncode : string * System.IO.TextWriter -&gt; unit&#xA;override this.HtmlAttributeEncode : string * System.IO.TextWriter -&gt; unit" Usage="httpEncoder.HtmlAttributeEncode (value, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="value">Chaîne à encoder.</param>
        <param name="output">TextWriter dans lequel écrire la valeur encodée.</param>
        <summary>Encode une valeur entrante en une chaîne qui peut être insérée dans un attribut HTML délimité à l'aide de guillemets simples ou doubles.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.Util.HttpEncoder.HtmlAttributeEncode%2A> méthode encode les caractères à l’aide des entités HTML standard. Par exemple, le `<` (chevron gauche) est encodé comme `&lt;` et `\` (barre oblique inverse) est encodée comme `&#92;`.  
  
 Il est déconseillé d’utiliser <xref:System.Web.Util.HttpEncoder.HtmlAttributeEncode%2A> dans les attributs entre guillemets simples et entre guillemets doubles. Les valeurs doivent être mis entre guillemets.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="output" /> est <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HtmlDecode">
      <MemberSignature Language="C#" Value="protected internal virtual void HtmlDecode (string value, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void HtmlDecode(string value, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.HtmlDecode(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub HtmlDecode (value As String, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void HtmlDecode(System::String ^ value, System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="abstract member HtmlDecode : string * System.IO.TextWriter -&gt; unit&#xA;override this.HtmlDecode : string * System.IO.TextWriter -&gt; unit" Usage="httpEncoder.HtmlDecode (value, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="value">Chaîne à décoder.</param>
        <param name="output">TextWriter dans lequel écrire la valeur décodée.</param>
        <summary>Décode une valeur à partir d'une chaîne encodée en HTML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le tableau suivant répertorie les séquences de caractères que la logique de décodage ASP.NET peut décoder.  
  
|Séquence de caractères|Règle|  
|------------------------|----------|  
|`&#NNN;` (codes décimales pour les caractères ASCII).|Décodé comme caractère ASCII spécifié. La séquence de caractères démarre au premier chiffre après le caractère # et se termine au point-virgule.|  
|`&#xZZ;` (codes hexadécimaux pour les caractères ASCII).|Décodé comme caractère ASCII spécifié. Le formulaire encodé spécifie le caractère à l’aide de caractères hexadécimaux au lieu d’une valeur décimale. La séquence de caractères démarre au premier chiffre après le caractère # et se termine au point-virgule.|  
|Entités HTML nommées.|Décodé comme caractère ASCII équivalent.|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="output" /> est <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HtmlEncode">
      <MemberSignature Language="C#" Value="protected internal virtual void HtmlEncode (string value, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void HtmlEncode(string value, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.HtmlEncode(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub HtmlEncode (value As String, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void HtmlEncode(System::String ^ value, System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="abstract member HtmlEncode : string * System.IO.TextWriter -&gt; unit&#xA;override this.HtmlEncode : string * System.IO.TextWriter -&gt; unit" Usage="httpEncoder.HtmlEncode (value, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="value">Chaîne à encoder.</param>
        <param name="output">TextWriter dans lequel écrire la valeur encodée.</param>
        <summary>Encode une chaîne sous la forme d'une chaîne encodée en HTML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le tableau suivant répertorie les séquences de caractères que la logique de codage ASP.NET peut décoder.  
  
|Caractère|Encodé sous la forme|  
|---------------|----------------|  
|`<` (crochet pointu)|`&lt;`|  
|`>` (crochet angulaire à droite)|`&gt;`|  
|`"` (guillemets doubles)|`&quot;`|  
|`&` (esperluette)|`&amp;`|  
|`\` barre oblique inverse)|`&#92;`|  
|Caractères ASCII de 160 à 255|`&#NNN;`, où `NNN` est le code de caractère décimal à trois chiffres|  
  
 Si vous remplacez le <xref:System.Web.Util.HttpEncoder.HtmlEncode%2A> (méthode), vous devez générer une sortie qui est également sécurisé au sein des attributs HTML entre guillemets doubles ou entre guillemets simples. Cela prend en charge l’analyse par le moteur Razor, où les balisage et code peuvent être combinés, tel que \<balise attr = «@value» >. En outre, le @ opérateur n’est pas sensible au contexte lors du traitement par le moteur Razor, par conséquent, il appelle <xref:System.Web.Util.HttpEncoder.HtmlEncode%2A> plutôt que <xref:System.Web.Util.HttpEncoder.HtmlAttributeEncode%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="output" /> est <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="JavaScriptStringEncode">
      <MemberSignature Language="C#" Value="protected internal virtual string JavaScriptStringEncode (string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance string JavaScriptStringEncode(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.JavaScriptStringEncode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function JavaScriptStringEncode (value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::String ^ JavaScriptStringEncode(System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member JavaScriptStringEncode : string -&gt; string&#xA;override this.JavaScriptStringEncode : string -&gt; string" Usage="httpEncoder.JavaScriptStringEncode value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="value">Chaîne à encoder.</param>
        <summary>Encode une chaîne.</summary>
        <returns>Chaîne encodée.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’encodage des URL permet de s’assurer que tous les navigateurs transmettent correctement le texte dans les chaînes d’URL. Caractères comme un point d’interrogation ( ?), esperluette (&), barre oblique (/) et des espaces peuvent tronquées ou endommagés par certains navigateurs. Par conséquent, ces caractères doivent être encodés.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UrlEncode">
      <MemberSignature Language="C#" Value="protected internal virtual byte[] UrlEncode (byte[] bytes, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance unsigned int8[] UrlEncode(unsigned int8[] bytes, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.UrlEncode(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function UrlEncode (bytes As Byte(), offset As Integer, count As Integer) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual cli::array &lt;System::Byte&gt; ^ UrlEncode(cli::array &lt;System::Byte&gt; ^ bytes, int offset, int count);" />
      <MemberSignature Language="F#" Value="abstract member UrlEncode : byte[] * int * int -&gt; byte[]&#xA;override this.UrlEncode : byte[] * int * int -&gt; byte[]" Usage="httpEncoder.UrlEncode (bytes, offset, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">Tableau d'octets à encoder.</param>
        <param name="offset">Position dans le tableau <paramref name="bytes" /> au niveau de laquelle commencer l'encodage.</param>
        <param name="count">Nombre d'éléments dans le tableau <paramref name="bytes" /> à encoder.</param>
        <summary>Encode un tableau des caractères non autorisés dans une URL sous la forme d'une entité de caractère hexadécimal équivalente.</summary>
        <returns>Tableau de caractères encodés.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.Util.HttpEncoder.UrlEncode%2A> méthode est appelée par plusieurs méthodes d’encodage d’URL dans le <xref:System.Web.HttpUtility> classe.  
  
 Le <xref:System.Web.Util.HttpEncoder.UrlEncode%2A> méthode encode en URL tout caractère qui n’est pas dans le jeu de caractères ASCII qui est considéré comme sécurisé pour les URL. Espaces sont encodés comme ASCII «`+"` caractère. Des caractères ASCII sécurisés pour les URL incluent les caractères peut-être (A à Z et a à z), des chiffres (0 à 9) et certains signes de ponctuation. Le tableau suivant répertorie les marques de ponctuation sont considérés comme des caractères sécurisés pour les URL ASCII.  
  
|Caractère|Description |  
|---------------|-----------------|  
|-|Trait d’union|  
|_|Trait de soulignement|  
|.|Période (point)|  
|!|Point d’exclamation|  
|*|Astérisque (étoile)|  
|(|Parenthèse ouvrante|  
|)|La parenthèse fermante|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" /> est inférieur à zéro ou supérieur à la longueur du tableau  <paramref name="bytes" />.  
  
ou 
 <paramref name="count" /> est inférieur à zéro ou <paramref name="count" /> plus <paramref name="offset" /> est supérieur à la longueur du tableau <paramref name="bytes" />.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="bytes" /> est <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="UrlPathEncode">
      <MemberSignature Language="C#" Value="protected internal virtual string UrlPathEncode (string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance string UrlPathEncode(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.UrlPathEncode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function UrlPathEncode (value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::String ^ UrlPathEncode(System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member UrlPathEncode : string -&gt; string&#xA;override this.UrlPathEncode : string -&gt; string" Usage="httpEncoder.UrlPathEncode value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">Chaîne à encoder.</param>
        <summary>Encode une sous-section d'une URL.</summary>
        <returns>Chaîne encodée en URL.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La méthode <xref:System.Web.Util.HttpEncoder.UrlPathEncode%2A> est appelée par la méthode <xref:System.Web.HttpUtility.UrlPathEncode%2A>. Le <xref:System.Web.HttpUtility.UrlPathEncode%2A> méthode effectue les étapes suivantes :  
  
-   S’applique la logique de codage de la <xref:System.Web.Util.HttpEncoder.UrlPathEncode%2A> méthode uniquement la partie de chemin d’accès de l’URL (lequel exclut la chaîne de requête). La méthode suppose que l’URL est encodée sous forme de chaîne UTF-8.  
  
-   Encode non espaces afin que seul un sous-ensemble de 128 premiers caractères ASCII est utilisé dans la chaîne encodée qui en résulte. Valeur Unicode 128 et supérieur, ou 32 et inférieur, tous les caractères sont encodés.  
  
-   Encode les espaces sous la forme % 20.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>