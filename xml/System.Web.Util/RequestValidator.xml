<Type Name="RequestValidator" FullName="System.Web.Util.RequestValidator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="5a1a02ab1b22e8e2744b95cd33f805989c51eedd" />
    <Meta Name="ms.sourcegitcommit" Value="d877ae76e9e11799bf919379507239e2c4072742" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="08/09/2018" />
    <Meta Name="ms.locfileid" Value="39813496" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class RequestValidator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RequestValidator extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Util.RequestValidator" />
  <TypeSignature Language="VB.NET" Value="Public Class RequestValidator" />
  <TypeSignature Language="C++ CLI" Value="public ref class RequestValidator" />
  <TypeSignature Language="F#" Value="type RequestValidator = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Définit les méthodes de base pour la validation de la requête personnalisée.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Par défaut, ASP.NET ne valide pas les demandes jusqu'à ce que le code demande explicitement une valeur à partir de la demande. Par exemple, ASP.NET ne valide pas les valeurs de chaîne de requête jusqu'à ce que le code accède à la <xref:System.Web.HttpRequest.QueryString%2A> collection. Par défaut, ASP.NET ne valide pas certains types de données de requête, telles que les valeurs de formulaire, les cookies, les noms des fichiers qui ont été téléchargés à l’aide de HTTP et la valeur de la <xref:System.Web.HttpRequest.RawUrl%2A> propriété.  
  
 Le <xref:System.Web.Util.RequestValidator> est une classe de base que vous pouvez implémenter afin de fournir la validation de requête personnalisée. En implémentant cette classe, vous pouvez déterminer quand la validation se produit et le type de données de requête pour effectuer la validation sur.  
  
 Par défaut, ASP.NET fournit des vérifications par script intersites (XSS). Toutefois, vous pouvez compléter ou remplacer la logique de validation de demande qui est fournie dans ASP.NET en créant une implémentation personnalisée du XSS. Par exemple, vous pouvez écrire une implémentation de validation de demande personnalisé qui analyse les attaques par injection SQL en plus de rechercher des attaques XSS.  
  
 Pour créer la validation de requête personnalisée, vous écrivez une classe personnalisée qui dérive de la <xref:System.Web.Util.RequestValidator> classe de base. Puis, vous configurez ASP.NET pour utiliser le validateur de requête personnalisé dans le fichier Web.config de niveau application. Vous pouvez placer la classe personnalisée dans le dossier App_Code, dans une bibliothèque de classes compilée dans le dossier Bin, ou dans une bibliothèque de classes compilée dans le GAC.  
  
> [!NOTE]
>  Qu’un seul type de validation de demande personnalisé peut être configuré pour une application. Il n’est pas possible de configurer un type de validation de demande différentes pour les chemins d’accès virtuels individuels ou les pages.  
  
   
  
## Examples  
 L’exemple suivant montre comment créer un validateur de requête personnalisé qui autorise uniquement une chaîne spécifique à utiliser pour les valeurs de chaîne de requête.  
  
 [!code-csharp[System.Web.Util.RequestValidator#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.util.requestvalidator/cs/requestvalidator.cs#1)]
 [!code-vb[System.Web.Util.RequestValidator#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.util.requestvalidator/vb/requestvalidator.vb#1)]  
  
 L’exemple suivant montre comment configurer ASP.NET pour utiliser le validateur personnalisé dans le fichier Web.config pour une application.  
  
```  
<system.web>  
  <httpRuntime requestValidationType="CustomRequestValidation" />  
</system.web>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.Util.RequestValidationSource" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RequestValidator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.RequestValidator.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RequestValidator();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Util.RequestValidator" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.Util.RequestValidator> classe a un constructeur par défaut. Lorsqu’une nouvelle instance de la classe est initialisée, une méthode interne récupère les détails de validation personnalisée à partir des informations de configuration de l’application. Les détails de configuration sont contenus dans le <xref:System.Web.Configuration.HttpRuntimeSection> section. Pour plus d’informations, consultez [httpRuntime, élément (schéma des paramètres ASP.NET)](http://msdn.microsoft.com/library/e9b81350-8aaf-47cc-9843-5f7d0c59f369) et <xref:System.Web.Configuration.HttpRuntimeSection.RequestValidationType%2A> attribut.  
  
 Pendant l’initialisation, une seule instance de la <xref:System.Web.Util.RequestValidator> classe est créée, et une référence à l’instance est conservée dans le <xref:System.Web.Util.RequestValidator.Current%2A> propriété. ASP.NET ne crée pas une nouvelle instance du programme de validation de demande par demande. Par conséquent, les implémentations personnalisées de la <xref:System.Web.Util.RequestValidator> classe doit être thread-safe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public static System.Web.Util.RequestValidator Current { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.Util.RequestValidator Current" />
      <MemberSignature Language="DocId" Value="P:System.Web.Util.RequestValidator.Current" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property Current As RequestValidator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Util::RequestValidator ^ Current { System::Web::Util::RequestValidator ^ get(); void set(System::Web::Util::RequestValidator ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Current : System.Web.Util.RequestValidator with get, set" Usage="System.Web.Util.RequestValidator.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Util.RequestValidator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une référence à l'instance de <see cref="T:System.Web.Util.RequestValidator" /> actuelle qui sera utilisée dans une application.</summary>
        <value>Instance de la classe <see cref="T:System.Web.Util.RequestValidator" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.Util.RequestValidator.Current%2A> propriété conserve une référence à l’instance unique autorisée de la <xref:System.Web.Util.RequestValidator> classe. Si aucune instance n’existe, un nouveau est créé. Si une instance existe déjà, l’instance actuelle est retournée.  
  
 Pendant l’initialisation, une seule instance de la <xref:System.Web.Util.RequestValidator> classe est créée, et une référence à l’instance est rendue disponible dans le <xref:System.Web.Util.RequestValidator.Current%2A> propriété. ASP.NET ne crée pas une nouvelle instance du programme de validation de demande par demande. Par conséquent, les implémentations personnalisées de la <xref:System.Web.Util.RequestValidator> classe doit être thread-safe.  
  
> [!NOTE]
>  Le <xref:System.Web.Util.RequestValidator.Current%2A> propriété n’est pas thread-safe, tandis que la propriété consiste à définir une référence à le <xref:System.Web.Util.RequestValidator> classe.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">La propriété est <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="InvokeIsValidRequestString">
      <MemberSignature Language="C#" Value="public bool InvokeIsValidRequestString (System.Web.HttpContext context, string value, System.Web.Util.RequestValidationSource requestValidationSource, string collectionKey, out int validationFailureIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool InvokeIsValidRequestString(class System.Web.HttpContext context, string value, valuetype System.Web.Util.RequestValidationSource requestValidationSource, string collectionKey, [out] int32&amp; validationFailureIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.RequestValidator.InvokeIsValidRequestString(System.Web.HttpContext,System.String,System.Web.Util.RequestValidationSource,System.String,System.Int32@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool InvokeIsValidRequestString(System::Web::HttpContext ^ context, System::String ^ value, System::Web::Util::RequestValidationSource requestValidationSource, System::String ^ collectionKey, [Runtime::InteropServices::Out] int % validationFailureIndex);" />
      <MemberSignature Language="F#" Value="member this.InvokeIsValidRequestString : System.Web.HttpContext * string * System.Web.Util.RequestValidationSource * string *  -&gt; bool" Usage="requestValidator.InvokeIsValidRequestString (context, value, requestValidationSource, collectionKey, validationFailureIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="requestValidationSource" Type="System.Web.Util.RequestValidationSource" />
        <Parameter Name="collectionKey" Type="System.String" />
        <Parameter Name="validationFailureIndex" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="context">Le contexte HTTP de la requête.</param>
        <param name="value">Les données de requête HTTP à valider.</param>
        <param name="requestValidationSource">Énumération représentant la source de données de requête en cours de validation. Voici les valeurs possibles pour l’énumération :  -   <see langword="QueryString" />  
  
-   <see langword="Form" />  
  
-   <see langword="Cookies" />  
  
-   <see langword="Files" />  
  
-   <see langword="Path" />  
  
-   <see langword="PathInfo" />  
  
-   <see langword="Headers" /></param>
        <param name="collectionKey">(Facultatif) La clé dans la collection de requêtes de l’élément à valider. Ce paramètre est utilisé si les données à valider sont obtenues à partir d’une collection. Si les données à valider ne proviennent pas d’une collection, ce paramètre peut être <see langword="null" />.</param>
        <param name="validationFailureIndex">Lorsque cette méthode est retournée, elle indique le point de départ de base zéro du texte problématique ou non valide dans la collection de requêtes. Ce paramètre est passé sans être initialisé.</param>
        <summary>Fournit une méthode publique qui appelle la méthode <see cref="M:System.Web.Util.RequestValidator.IsValidRequestString(System.Web.HttpContext,System.String,System.Web.Util.RequestValidationSource,System.String,System.Int32@)" /> protégée afin de valider les données de requête HTTP.</summary>
        <returns>
          <see langword="true" /> si la chaîne à valider ne contient pas de caractères non encodés susceptibles d’être utilisés dans une attaque par script malveillant ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.Util.RequestValidator.InvokeIsValidRequestString%2A> méthode fournit un accès public à l’élément protégé <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> (méthode). Cela vous permet de créer une classe wrapper personnalisé pour le <xref:System.Web.Util.RequestValidator> classe et appelez le <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> méthode sans avoir à hériter la <xref:System.Web.Util.RequestValidator> classe.  
  
 Pour plus d’informations sur la validation de demande, consultez <xref:System.Web.UnvalidatedRequestValues>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValidRequestString">
      <MemberSignature Language="C#" Value="protected internal virtual bool IsValidRequestString (System.Web.HttpContext context, string value, System.Web.Util.RequestValidationSource requestValidationSource, string collectionKey, out int validationFailureIndex);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool IsValidRequestString(class System.Web.HttpContext context, string value, valuetype System.Web.Util.RequestValidationSource requestValidationSource, string collectionKey, [out] int32&amp; validationFailureIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.RequestValidator.IsValidRequestString(System.Web.HttpContext,System.String,System.Web.Util.RequestValidationSource,System.String,System.Int32@)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual bool IsValidRequestString(System::Web::HttpContext ^ context, System::String ^ value, System::Web::Util::RequestValidationSource requestValidationSource, System::String ^ collectionKey, [Runtime::InteropServices::Out] int % validationFailureIndex);" />
      <MemberSignature Language="F#" Value="abstract member IsValidRequestString : System.Web.HttpContext * string * System.Web.Util.RequestValidationSource * string *  -&gt; bool&#xA;override this.IsValidRequestString : System.Web.HttpContext * string * System.Web.Util.RequestValidationSource * string *  -&gt; bool" Usage="requestValidator.IsValidRequestString (context, value, requestValidationSource, collectionKey, validationFailureIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="requestValidationSource" Type="System.Web.Util.RequestValidationSource" />
        <Parameter Name="collectionKey" Type="System.String" />
        <Parameter Name="validationFailureIndex" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="context">Le contexte de la requête actuelle.</param>
        <param name="value">Les données de requête HTTP à valider.</param>
        <param name="requestValidationSource">Énumération représentant la source de données de requête en cours de validation. Voici les valeurs possibles pour l’énumération :  - <see langword="QueryString" />
- <see langword="Form " />
- <see langword="Cookies" />
- <see langword="Files" />
- <see langword="RawUrl" />
- <see langword="Path" />
- <see langword="PathInfo" />
- <see langword="Headers" /></param>
        <param name="collectionKey">La clé dans la collection de requêtes de l’élément à valider. Ce paramètre est optionnel. Ce paramètre est utilisé si les données à valider sont obtenues à partir d’une collection. Si les données à valider ne proviennent pas d’une collection, <c>collectionKey</c> peut être <see langword="null" />.</param>
        <param name="validationFailureIndex">Lorsque cette méthode est retournée, elle indique le point de départ de base zéro du texte problématique ou non valide dans la collection de requêtes. Ce paramètre est passé sans être initialisé.</param>
        <summary>Valide une chaîne qui contient des données de requête HTTP.</summary>
        <returns>
          <see langword="true" /> si la chaîne à valider est valide ; sinon <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous implémentez cette méthode pour effectuer une validation personnalisée des données de requête. Le comportement de base de la <xref:System.Web.Util.RequestValidator.IsValidRequestString%28System.Web.HttpContext%2CSystem.String%2CSystem.Web.Util.RequestValidationSource%2CSystem.String%2CSystem.Int32%40%29> méthode est comme le comportement qu’ASP.NET implémente en interne pour rechercher des chaînes dangereuses dans la validation de script entre sites. Pour plus d’informations, consultez [Comment : empêcher les scripts inter-sites dans ASP.NET](http://go.microsoft.com/fwlink/?LinkID=178708).  
  
 Si la logique de validation personnalisée détecte une erreur, cette méthode doit retourner `false` et fournir une valeur dans `validationFailureIndex` pour indiquer le point de départ du texte qui a provoqué l’erreur. La valeur de `validationFailureIndex` doit être 0 ou un entier positif.  
  
 La logique dans un contrôle de validation de demande procède comme suit :  
  
-   Le <xref:System.Web.HttpRequest> classe effectue une vérification de la suppression des caractères null sur les données entrantes.  
  
-   Le <xref:System.Web.HttpRequest> classe appelle le <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> (méthode) (l’implémentation par défaut de la méthode de base) ou une version dérivée de la méthode.  
  
-   Si <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> retourne de la méthode `false` pour indiquer un échec de validation, ASP.NET construit une chaîne d’erreur (si nécessaire) et lève une <xref:System.Web.HttpRequestValidationException> exception.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>