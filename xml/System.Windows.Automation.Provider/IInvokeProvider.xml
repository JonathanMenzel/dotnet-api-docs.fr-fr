<Type Name="IInvokeProvider" FullName="System.Windows.Automation.Provider.IInvokeProvider">
  <TypeSignature Language="C#" Value="public interface IInvokeProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IInvokeProvider" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Automation.Provider.IInvokeProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IInvokeProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IInvokeProvider" />
  <AssemblyInfo>
    <AssemblyName>UIAutomationProvider</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("54fcb24b-e18e-47a2-b4d3-eccbe77599a2")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="e2efd-101">Expose des méthodes et des propriétés pour prendre en charge l’accès client UI Automation aux contrôles qui initialisent ou effectuent une action unique et non ambiguë et qui ne conservent pas l’état quand ils sont activées.</span><span class="sxs-lookup"><span data-stu-id="e2efd-101">Exposes methods and properties to support UI Automation client access to controls that initiate or perform a single, unambiguous action and do not maintain state when activated.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2efd-102">Implémentée sur un fournisseur UI Automation qui doit prendre en charge la <xref:System.Windows.Automation.InvokePattern> modèle de contrôle.</span><span class="sxs-lookup"><span data-stu-id="e2efd-102">Implemented on a UI Automation provider that must support the <xref:System.Windows.Automation.InvokePattern> control pattern.</span></span>  
  
 <span data-ttu-id="e2efd-103">Les contrôles implémentent <xref:System.Windows.Automation.Provider.IInvokeProvider> si le même comportement n’est pas exposé par le biais d’un autre fournisseur de modèle de contrôle.</span><span class="sxs-lookup"><span data-stu-id="e2efd-103">Controls implement <xref:System.Windows.Automation.Provider.IInvokeProvider> if the same behavior is not exposed through another control pattern provider.</span></span> <span data-ttu-id="e2efd-104">Par exemple, si la méthode <xref:System.Windows.Automation.InvokePattern.Invoke%2A> exécute, sur un contrôle, la même action que la méthode <xref:System.Windows.Automation.ExpandCollapsePattern.Expand%2A> ou <xref:System.Windows.Automation.ExpandCollapsePattern.Collapse%2A> , le contrôle ne doit pas implémenter <xref:System.Windows.Automation.Provider.IInvokeProvider>.</span><span class="sxs-lookup"><span data-stu-id="e2efd-104">For example, if the <xref:System.Windows.Automation.InvokePattern.Invoke%2A> method on a control performs the same action as the <xref:System.Windows.Automation.ExpandCollapsePattern.Expand%2A> or <xref:System.Windows.Automation.ExpandCollapsePattern.Collapse%2A> method, the control should not implement <xref:System.Windows.Automation.Provider.IInvokeProvider>.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Automation.InvokePattern" />
  </Docs>
  <Members>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Invoke() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.IInvokeProvider.Invoke" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invoke ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e2efd-105">Envoie une requête pour activer un contrôle et initier son action unique et non équivoque.</span><span class="sxs-lookup"><span data-stu-id="e2efd-105">Sends a request to activate a control and initiate its single, unambiguous action.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2efd-106"><xref:System.Windows.Automation.Provider.IInvokeProvider.Invoke%2A> est un appel asynchrone et doit retourner immédiatement une valeur sans se bloquer.</span><span class="sxs-lookup"><span data-stu-id="e2efd-106"><xref:System.Windows.Automation.Provider.IInvokeProvider.Invoke%2A> is an asynchronous call and must return immediately without blocking.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e2efd-107">Ce comportement est particulièrement critique pour les contrôles qui, directement ou indirectement, lancent une boîte de dialogue modale lorsqu’ils sont appelés.</span><span class="sxs-lookup"><span data-stu-id="e2efd-107">This behavior is particularly critical for controls that, directly or indirectly, launch a modal dialog when invoked.</span></span> <span data-ttu-id="e2efd-108">Tout client UI Automation à l’origine de l’événement reste bloqué jusqu’à la fermeture de la boîte de dialogue modale.</span><span class="sxs-lookup"><span data-stu-id="e2efd-108">Any UI Automation client that instigated the event will remain blocked until the modal dialog is closed.</span></span>  
  
 <span data-ttu-id="e2efd-109"><xref:System.Windows.Automation.Provider.IInvokeProvider.Invoke%2A> déclenche l'événement <xref:System.Windows.Automation.InvokePatternIdentifiers.InvokedEvent>.</span><span class="sxs-lookup"><span data-stu-id="e2efd-109"><xref:System.Windows.Automation.Provider.IInvokeProvider.Invoke%2A> raises the <xref:System.Windows.Automation.InvokePatternIdentifiers.InvokedEvent> event.</span></span> <span data-ttu-id="e2efd-110">Si possible, l’événement doit être déclenché une fois que le contrôle a terminé son action associée.</span><span class="sxs-lookup"><span data-stu-id="e2efd-110">If possible, the event should be raised after the control has completed its associated action.</span></span>  
  
 <span data-ttu-id="e2efd-111"><xref:System.Windows.Automation.InvokePatternIdentifiers.InvokedEvent> doit être déclenché avant la maintenance du <xref:System.Windows.Automation.Provider.IInvokeProvider.Invoke%2A> demande dans les scénarios suivants :</span><span class="sxs-lookup"><span data-stu-id="e2efd-111"><xref:System.Windows.Automation.InvokePatternIdentifiers.InvokedEvent> should be raised before servicing the <xref:System.Windows.Automation.Provider.IInvokeProvider.Invoke%2A> request in the following scenarios:</span></span>  
  
-   <span data-ttu-id="e2efd-112">Il n’est pas possible ou pratique d’attendre que l’action soit terminée.</span><span class="sxs-lookup"><span data-stu-id="e2efd-112">It is not possible or practical to wait until the action is complete.</span></span>  
  
-   <span data-ttu-id="e2efd-113">L’action requiert une intervention de l’utilisateur.</span><span class="sxs-lookup"><span data-stu-id="e2efd-113">The action requires user interaction.</span></span>  
  
-   <span data-ttu-id="e2efd-114">L’action prend du temps et entraînera le client bloquer pendant une longue période.</span><span class="sxs-lookup"><span data-stu-id="e2efd-114">The action is time-consuming and will cause the calling client to block for a significant length of time.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2efd-115">L’exemple suivant implémente la <xref:System.Windows.Automation.Provider.IInvokeProvider.Invoke%2A> méthode sur le Gestionnaire d’événements MouseDown d’un contrôle.</span><span class="sxs-lookup"><span data-stu-id="e2efd-115">The following example implements the <xref:System.Windows.Automation.Provider.IInvokeProvider.Invoke%2A> method on the MouseDown event handler of a control.</span></span> <span data-ttu-id="e2efd-116">Supposons que `providerControl` est une variable membre qui a été initialisée lors de la construction de la classe.</span><span class="sxs-lookup"><span data-stu-id="e2efd-116">Assume that `providerControl` is a member variable that was initialized when the class was constructed.</span></span>  
  
 [!code-csharp[UIAProvider_snip#106](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAProvider_snip/CSharp/Invoker.cs#106)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Windows.Automation.ElementNotEnabledException"><span data-ttu-id="e2efd-117">Si le contrôle n’est pas activé.</span><span class="sxs-lookup"><span data-stu-id="e2efd-117">If the control is not enabled.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>