<Type Name="ISynchronizedInputProvider" FullName="System.Windows.Automation.Provider.ISynchronizedInputProvider">
  <TypeSignature Language="C#" Value="public interface ISynchronizedInputProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ISynchronizedInputProvider" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Automation.Provider.ISynchronizedInputProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface ISynchronizedInputProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class ISynchronizedInputProvider" />
  <AssemblyInfo>
    <AssemblyName>UIAutomationProvider</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("29db1a06-02ce-4cf7-9b42-565d4fab20ee")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="ce41b-101">Expose des méthodes afin de faciliter l'accès des clients UI Automation aux contrôles qui prennent en charge l'entrée synchronisée.</span><span class="sxs-lookup"><span data-stu-id="ce41b-101">Exposes methods to facilitate UI Automation client access to controls that support synchronized input.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ce41b-102">Implémentez cette interface sur un fournisseur UI Automation qui doit prendre en charge la <xref:System.Windows.Automation.SynchronizedInputPattern> modèle de contrôle.</span><span class="sxs-lookup"><span data-stu-id="ce41b-102">Implement this interface on a UI Automation provider that must support the <xref:System.Windows.Automation.SynchronizedInputPattern> control pattern.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Cancel">
      <MemberSignature Language="C#" Value="public void Cancel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Cancel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.ISynchronizedInputProvider.Cancel" />
      <MemberSignature Language="VB.NET" Value="Public Sub Cancel ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Cancel();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ce41b-103">Cesse d'écouter l'entrée.</span><span class="sxs-lookup"><span data-stu-id="ce41b-103">Stops listening for input.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ce41b-104">Si le fournisseur écoute actuellement pour l’entrée, il revient à un fonctionnement normal.</span><span class="sxs-lookup"><span data-stu-id="ce41b-104">If the provider is currently listening for input, it reverts to normal operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartListening">
      <MemberSignature Language="C#" Value="public void StartListening (System.Windows.Automation.SynchronizedInputType inputType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartListening(valuetype System.Windows.Automation.SynchronizedInputType inputType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.ISynchronizedInputProvider.StartListening(System.Windows.Automation.SynchronizedInputType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartListening (inputType As SynchronizedInputType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartListening(System::Windows::Automation::SynchronizedInputType inputType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputType" Type="System.Windows.Automation.SynchronizedInputType" />
      </Parameters>
      <Docs>
        <param name="inputType"><span data-ttu-id="ce41b-105">Type d'entrée à écouter.</span><span class="sxs-lookup"><span data-stu-id="ce41b-105">The type of input to listen for.</span></span></param>
        <summary><span data-ttu-id="ce41b-106">Indique que le fournisseur doit commencer à écouter l'entrée du type spécifié.</span><span class="sxs-lookup"><span data-stu-id="ce41b-106">Designates that the provider start listening for input of the specified type.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ce41b-107">Lorsque WPF recherche l’entrée correspondante, il vérifie l’itinéraire de l’événement entrant.</span><span class="sxs-lookup"><span data-stu-id="ce41b-107">When WPF finds matching input, it checks the route of the incoming event.</span></span> <span data-ttu-id="ce41b-108">Si l’élément d’automation qui écoute l’entrée n’est pas dans l’itinéraire, l’entrée est ignorée et la <xref:System.Windows.Automation.SynchronizedInputPattern.InputDiscardedEvent> événement est déclenché.</span><span class="sxs-lookup"><span data-stu-id="ce41b-108">If the automation element that is listening for the input is not in the route, the input is discarded and the <xref:System.Windows.Automation.SynchronizedInputPattern.InputDiscardedEvent> event is raised.</span></span> <span data-ttu-id="ce41b-109">Si l’entrée est reçue par l’élément d’automation qui écoute ce type, le <xref:System.Windows.Automation.SynchronizedInputPattern.InputReachedTargetEvent> événement est déclenché ; sinon, le <xref:System.Windows.Automation.SynchronizedInputPattern.InputReachedOtherElementEvent> événement est déclenché.</span><span class="sxs-lookup"><span data-stu-id="ce41b-109">If the input is received by the automation element listening for that type, the <xref:System.Windows.Automation.SynchronizedInputPattern.InputReachedTargetEvent> event is raised; otherwise, the <xref:System.Windows.Automation.SynchronizedInputPattern.InputReachedOtherElementEvent> event is raised.</span></span>  
  
 <span data-ttu-id="ce41b-110">Après avoir reçu l’entrée, le fournisseur arrête d’écouter et se poursuit normalement.</span><span class="sxs-lookup"><span data-stu-id="ce41b-110">After receiving the input, the provider stops listening and continues normally.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>