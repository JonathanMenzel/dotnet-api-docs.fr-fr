<Type Name="DataPoint" FullName="System.Windows.Forms.DataVisualization.Charting.DataPoint">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c5f3ae35ead0d41d0075e87a14f2dc320a1cfb37" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30629703" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DataPoint : System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DataPoint extends System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.DataVisualization.Charting.DataPoint" />
  <TypeSignature Language="VB.NET" Value="Public Class DataPoint&#xA;Inherits DataPointCustomProperties" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataPoint : System::Windows::Forms::DataVisualization::Charting::DataPointCustomProperties" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("YValues")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter("System.Windows.Forms.Design.DataVisualization.Charting.DataPointConverter, System.Windows.Forms.DataVisualization.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Représente un point de données stocké dans la classe <see cref="T:System.Windows.Forms.DataVisualization.Charting.DataPointCollection" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La <xref:System.Windows.Forms.DataVisualization.Charting.DataPoint> classe stocke des propriétés associées aux valeurs de point de données, ainsi que des données. Par exemple, un point de données a une valeur, mais il possède également une propriété de couleur, la propriété image d’arrière-plan, propriété de dégradé d’arrière-plan et ainsi de suite. Pour plus d’informations sur les données de point de propriétés, consultez la <xref:System.Windows.Forms.DataVisualization.Charting.DataPointCustomProperties> rubrique Vue d’ensemble de la classe.  
  
 Chaque point de données se compose d’une valeur X et une ou plusieurs valeurs Y. La valeur X peut être égal à zéro, ou vous pouvez définir explicitement.  
  
 Une seule valeur Y par point est obligatoire pour tous les types de graphiques, à l’exception des graphiques en bulles, en bougies et stock. Ces types de graphiques requièrent plusieurs valeurs Y car un point de données se compose de plusieurs valeurs. Par exemple, pour tracer une colonne de graphique boursier, quatre valeurs sont obligatoires : haute, basses, ouvrir et fermer des valeurs.  
  
 Données peuvent être ajoutées au moment du design ou exécution ; Vous pouvez également utiliser la liaison de données en cours d’exécution.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Forms.DataVisualization.Charting.DataPoint" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataPoint ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataPoint.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataPoint();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Forms.DataVisualization.Charting.DataPoint" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce constructeur peut être utilisé pour créer et initialiser une nouvelle instance de la <xref:System.Windows.Forms.DataVisualization.Charting.DataPoint> classe.  
  
 Toutefois, il est fortement recommandé d’ajouter à la place des points de données à exécuter de temps, à l’aide de la <xref:System.Windows.Forms.DataVisualization.Charting.Series.Points%2A> propriété de collection.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataPoint (System.Windows.Forms.DataVisualization.Charting.Series series);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Forms.DataVisualization.Charting.Series series) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataPoint.#ctor(System.Windows.Forms.DataVisualization.Charting.Series)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataPoint(System::Windows::Forms::DataVisualization::Charting::Series ^ series);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="series" Type="System.Windows.Forms.DataVisualization.Charting.Series" />
      </Parameters>
      <Docs>
        <param name="series">Objet <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> auquel le point de données appartient.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Forms.DataVisualization.Charting.DataPoint" /> et définit l'objet <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> auquel le point de données appartient.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce constructeur peut être utilisé pour créer et initialiser une nouvelle instance de la <xref:System.Windows.Forms.DataVisualization.Charting.DataPoint> classe.  
  
 Toutefois, il est fortement recommandé d’ajouter à la place des points de données à exécuter de temps, à l’aide de la <xref:System.Windows.Forms.DataVisualization.Charting.Series.Points%2A> propriété de collection.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataPoint (double xValue, double yValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float64 xValue, float64 yValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataPoint.#ctor(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (xValue As Double, yValue As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataPoint(double xValue, double yValue);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="xValue" Type="System.Double" />
        <Parameter Name="yValue" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="xValue">Valeur X du point de données.</param>
        <param name="yValue">Valeur Y du point de données.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Forms.DataVisualization.Charting.DataPoint" /> avec les valeurs X et Y spécifiées.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce constructeur peut être utilisé pour créer et initialiser une nouvelle instance de la <xref:System.Windows.Forms.DataVisualization.Charting.DataPoint> classe.  
  
 Toutefois, il est fortement recommandé d’ajouter à la place des points de données à exécuter de temps, à l’aide de la <xref:System.Windows.Forms.DataVisualization.Charting.Series.Points%2A> propriété de collection.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataPoint (double xValue, double[] yValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float64 xValue, float64[] yValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataPoint.#ctor(System.Double,System.Double[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (xValue As Double, yValues As Double())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataPoint(double xValue, cli::array &lt;double&gt; ^ yValues);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="xValue" Type="System.Double" />
        <Parameter Name="yValues" Type="System.Double[]" />
      </Parameters>
      <Docs>
        <param name="xValue">Valeur X du point de données.</param>
        <param name="yValues">Tableau des valeurs Y du point de données.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Forms.DataVisualization.Charting.DataPoint" /> avec la valeur X spécifiée et un tableau de valeurs Y.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce constructeur peut être utilisé pour créer et initialiser une nouvelle instance de la <xref:System.Windows.Forms.DataVisualization.Charting.DataPoint> classe.  
  
 Toutefois, il est fortement recommandé d’ajouter à la place des points de données à exécuter de temps, à l’aide de la <xref:System.Windows.Forms.DataVisualization.Charting.Series.Points%2A> propriété de collection.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataPoint (double xValue, string yValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float64 xValue, string yValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataPoint.#ctor(System.Double,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (xValue As Double, yValues As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataPoint(double xValue, System::String ^ yValues);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="xValue" Type="System.Double" />
        <Parameter Name="yValues" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="xValue">Valeur X du point de données.</param>
        <param name="yValues">
          <see langword="string" /> séparée par des virgules contenant les valeurs Y du point de données.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Forms.DataVisualization.Charting.DataPoint" /> avec la valeur X et les valeurs Y spécifiées.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce constructeur peut être utilisé pour créer et initialiser une nouvelle instance de la <xref:System.Windows.Forms.DataVisualization.Charting.DataPoint> classe.  
  
 Toutefois, il est fortement recommandé d’ajouter à la place des points de données à exécuter de temps, à l’aide de la <xref:System.Windows.Forms.DataVisualization.Charting.Series.Points%2A> propriété de collection.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataVisualization.Charting.DataPoint Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.DataVisualization.Charting.DataPoint Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataPoint.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As DataPoint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::DataVisualization::Charting::DataPoint ^ Clone();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataVisualization.Charting.DataPoint</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retourne une nouvelle instance qui est une copie exacte du point de données.</summary>
        <returns>Objet <see cref="T:System.Windows.Forms.DataVisualization.Charting.DataPoint" /> cloné qui est une copie exacte du point de données.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez la <xref:System.Windows.Forms.DataVisualization.Charting.DataPoint.Clone%2A> méthode pour obtenir une copie exacte du point de données.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetValueByName">
      <MemberSignature Language="C#" Value="public double GetValueByName (string valueName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 GetValueByName(string valueName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataPoint.GetValueByName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetValueByName (valueName As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double GetValueByName(System::String ^ valueName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="valueName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="valueName">Noms des valeurs de points. X, Y, Y2...</param>
        <summary>Retourne un point de données spécifié par son nom. Il s'agit d'une fonction d'assistance.</summary>
        <returns>Valeur <see langword="string" /> qui représente un point de données.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEmpty">
      <MemberSignature Language="C#" Value="public bool IsEmpty { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.DataPoint.IsEmpty" />
      <MemberSignature Language="VB.NET" Value="Public Property IsEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEmpty { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit un indicateur qui détermine si un point de données est marqué comme vide.</summary>
        <value>
          <see langword="true" /> si le point est marqué comme vide ; sinon <see langword="false" />. La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Définissez cette propriété sur `true` pour marquer un point de données comme un point vide.  
  
 Vous pouvez également un de la `InsertEmptyPoints` méthodes dans la <xref:System.Windows.Forms.DataVisualization.Charting.DataManipulator> classe peut être utilisée pour marquer des données manquantes comme des points vides.  
  
 Le <xref:System.Windows.Forms.DataVisualization.Charting.Series.EmptyPointStyle%2A> propriété détermine les points vides sont affichées.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public override string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.DataPoint.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le nom du point de données.</summary>
        <value>Valeur <see langword="string" /> qui représente le nom textuel du point de données.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetValueXY">
      <MemberSignature Language="C#" Value="public void SetValueXY (object xValue, params object[] yValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetValueXY(object xValue, object[] yValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataPoint.SetValueXY(System.Object,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetValueXY (xValue As Object, ParamArray yValue As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetValueXY(System::Object ^ xValue, ... cli::array &lt;System::Object ^&gt; ^ yValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xValue" Type="System.Object" />
        <Parameter Name="yValue" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="xValue">Valeur X du point de données.</param>
        <param name="yValue">Liste des valeurs Y du point de données.</param>
        <summary>Définit la valeur X et une ou plusieurs valeurs Y du point de données.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Windows.Forms.DataVisualization.Charting.DataPoint.SetValueXY%2A> pour définir les valeurs d’un point de données au moment de l’exécution.  
  
 Notez que si vous définissez la valeur X sur une valeur différente de zéro (0), un nuage est généré. Pour plus d’informations, consultez la section Notes de la <xref:System.Windows.Forms.DataVisualization.Charting.DataPoint.XValue%2A> propriété.  
  
 Consultez le tableau suivant pour une liste complète des types .NET Framework valides qui peut être utilisé pour le paramètre de type d’objet.  
  
||||  
|-|-|-|  
|Chaîne|DateTime|Double|  
|Decimal|Single|Int32|  
|UInt32|Int64|UInt64|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetValueY">
      <MemberSignature Language="C#" Value="public void SetValueY (params object[] yValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetValueY(object[] yValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataPoint.SetValueY(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetValueY (ParamArray yValue As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetValueY(... cli::array &lt;System::Object ^&gt; ^ yValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="yValue" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="yValue">Valeur(s) Y d'un objet <see cref="T:System.Windows.Forms.DataVisualization.Charting.DataPoint" /> de la collection. Se présente sous la forme d'une ou de plusieurs valeurs séparées par des virgules.</param>
        <summary>Définit la ou les valeurs Y d'un point de données unique.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.DataVisualization.Charting.DataPoint.SetValueY%2A> propriété est utilisée pour définir la Y-point de valeur (s) de données en cours d’exécution.  
  
 Une seule valeur Y par point est obligatoire pour tous les types de graphique à l’exception des bulles, en bougies et graphiques boursiers. Ces types de graphiques requièrent plusieurs valeurs Y car un point de données se compose de plusieurs valeurs. Par exemple, pour tracer une colonne de graphique boursier, quatre valeurs sont obligatoires : haute, basses, ouvrir et fermer des valeurs.  
  
 Cette propriété retourne un tableau de `double` valeurs lorsqu’il est utilisé pour récupérer plusieurs valeurs Y.  
  
> [!IMPORTANT]
>  Le <xref:System.Windows.Forms.DataVisualization.Charting.Series.YValuesPerPoint%2A> propriété détermine le nombre maximal de valeurs Y des points de toutes les données dans un <xref:System.Windows.Forms.DataVisualization.Charting.Series> peut avoir. Si vous spécifiez plus que le nombre autorisé de valeurs Y, une exception sera levée.  
>   
>  Consultez le tableau suivant pour une liste complète des types .NET Framework valides qui peut être utilisé pour le paramètre de type d’objet :  
  
||||  
|-|-|-|  
|Chaîne|DateTime|Double|  
|Decimal|Single|Int32|  
|UInt32|Int64|UInt64|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XValue">
      <MemberSignature Language="C#" Value="public double XValue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 XValue" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.DataPoint.XValue" />
      <MemberSignature Language="VB.NET" Value="Public Property XValue As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double XValue { double get(); void set(double value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Double), "0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Forms.DataVisualization.Charting.DataPointValueConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la valeur X d'un point de données.</summary>
        <value>Valeur <see langword="double" /> qui représente la valeur X d'un point de données.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tous les types de graphique peuvent être affichés sous deux nuages de points ou de nuages, étant donné que les valeurs X et les valeurs Y peuvent être définies. Définition d’une valeur de X entraîne un nuage, que vous ne définissez ne pas cette propriété, ce qui équivaut à la valeur zéro, entraîne un nuage. Par exemple, pour dessiner un type de graphique de point, vous devez ajouter des points de données qui ont des valeurs X de zéro. Pour afficher un graphique à nuages de points traditionnel, ajoutez des points de données qui ont des valeurs X différente de zéro.  
  
 Les valeurs X des points de données ne doivent pas être définie. S’ils ne sont pas définis, les points de données sont tracés séquentiellement, à l’aide de leurs valeurs d’index à partir de la <xref:System.Windows.Forms.DataVisualization.Charting.DataPointCollection>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="YValues">
      <MemberSignature Language="C#" Value="public double[] YValues { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64[] YValues" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.DataPoint.YValues" />
      <MemberSignature Language="VB.NET" Value="Public Property YValues As Double()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;double&gt; ^ YValues { cli::array &lt;double&gt; ^ get(); void set(cli::array &lt;double&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor(typeof(System.Drawing.Design.UITypeEditor), typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Forms.DataVisualization.Charting.DoubleArrayConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la ou les valeurs Y d'un point de données.</summary>
        <value>Tableau de valeurs <see langword="double" /> qui représentent la ou les valeurs Y d'un point de données.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.DataVisualization.Charting.DataPoint.YValues%2A> propriété est utilisée pour définir les valeurs Y de points de données.  
  
 Une seule valeur Y par point est obligatoire pour tous les types de graphiques, à l’exception des graphiques en bulles, en bougies et stock. Ces types de graphiques requièrent plusieurs valeurs Y car un point de données se compose de plusieurs valeurs. Par exemple, pour tracer une colonne de graphique boursier, quatre valeurs sont obligatoires : haute, basses, ouvrir et fermer des valeurs.  
  
 Le <xref:System.Windows.Forms.DataVisualization.Charting.DataPoint.YValues%2A> propriété retourne un tableau de `double` valeurs lorsqu’il est utilisé pour récupérer les valeurs Y.  
  
 **Important** le <xref:System.Windows.Forms.DataVisualization.Charting.Series.YValuesPerPoint%2A> propriété détermine le nombre maximal de valeurs Y des points de toutes les données dans un <xref:System.Windows.Forms.DataVisualization.Charting.Series> peut avoir. Si vous spécifiez plus que le nombre autorisé de valeurs Y, une exception sera levée.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>