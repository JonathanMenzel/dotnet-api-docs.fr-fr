<Type Name="WebServiceHost" FullName="System.ServiceModel.Web.WebServiceHost">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="935e6487c5f10f2176cd18ef5933e974be8d8e51" />
    <Meta Name="ms.sourcegitcommit" Value="cc0c87a2e12b0fb9ba9ecdd3d4950f0572524db8" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="05/03/2018" />
    <Meta Name="ms.locfileid" Value="32690263" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class WebServiceHost : System.ServiceModel.ServiceHost" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit WebServiceHost extends System.ServiceModel.ServiceHost" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Web.WebServiceHost" />
  <TypeSignature Language="VB.NET" Value="Public Class WebServiceHost&#xA;Inherits ServiceHost" />
  <TypeSignature Language="C++ CLI" Value="public ref class WebServiceHost : System::ServiceModel::ServiceHost" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ServiceModel.ServiceHost</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Classe dérivée <see cref="T:System.ServiceModel.ServiceHost" /> qui complète le modèle de programmation REST Windows Communication Foundation (WCF).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si <xref:System.ServiceModel.Web.WebServiceHost> ne trouve aucun point de terminaison dans la description du service, il crée automatiquement un point de terminaison par défaut à l'adresse de base du service pour les adresses de base HTTP et HTTPS. Il ne crée pas automatiquement un point de terminaison si l'utilisateur en a configuré un, de façon explicite, au niveau de l'adresse de base. <xref:System.ServiceModel.Web.WebServiceHost> configure automatiquement la liaison du point de terminaison afin qu'il puisse profiter des paramètres de sécurité IIS (Internet Information Services) en cas d'utilisation dans un répertoire virtuel sécurisé.  
  
 Lors de la création d'un point de terminaison HTTP par défaut, <xref:System.ServiceModel.Web.WebServiceHost> désactive également la page d'aide HTTP et la fonctionnalité WSDL (Web Services Description Language) GET afin que le point de terminaison des métadonnées n'interfère pas avec le point de terminaison HTTP par défaut.   
  
 De plus, la classe <xref:System.ServiceModel.Web.WebServiceHost> ajoute <xref:System.ServiceModel.Description.WebHttpBehavior> à tous les points de terminaison qui n'ont pas déjà le comportement et qui possèdent un <xref:System.ServiceModel.Configuration.WebMessageEncodingElement>. Si toutes les opérations sur le service ont des corps de requête HTTP vides ou gèrent ceux-ci comme un flux de données, <xref:System.ServiceModel.Web.WebServiceHost> configure alors automatiquement le mappeur de type de contenu approprié pour la liaison.  
  
   
  
## Examples  
 L’exemple suivant montre comment utiliser la <xref:System.ServiceModel.Web.WebServiceHost> classe pour héberger un service qui rend utiliser du modèle de programmation WCF REST.  
  
 [!code-csharp[WebServiceHost#0](~/samples/snippets/csharp/VS_Snippets_CFX/webservicehost/cs/program.cs#0)]
 [!code-vb[WebServiceHost#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/webservicehost/vb/program.vb#0)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ServiceModel.Web.WebServiceHost" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebServiceHost ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Web.WebServiceHost.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebServiceHost();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ServiceModel.Web.WebServiceHost" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebServiceHost (object singletonInstance, params Uri[] baseAddresses);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object singletonInstance, class System.Uri[] baseAddresses) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Web.WebServiceHost.#ctor(System.Object,System.Uri[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (singletonInstance As Object, ParamArray baseAddresses As Uri())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebServiceHost(System::Object ^ singletonInstance, ... cli::array &lt;Uri ^&gt; ^ baseAddresses);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="singletonInstance" Type="System.Object" />
        <Parameter Name="baseAddresses" Type="System.Uri[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="singletonInstance">Instance de service à utiliser comme instance de singleton.</param>
        <param name="baseAddresses">Adresse de base du service.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ServiceModel.Web.WebServiceHost" /> avec l'instance de serveur singleton et l'adresse de base spécifiés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le paramètre `baseAddresses` peut se composer d'une ou plusieurs adresses de base.  
  
   
  
## Examples  
 L'exemple suivant montre comment appeler ce constructeur.  
  
 [!code-csharp[WebServiceHost#1](~/samples/snippets/csharp/VS_Snippets_CFX/webservicehost/cs/snippets.cs#1)]
 [!code-vb[WebServiceHost#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/webservicehost/vb/snippets.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebServiceHost (Type serviceType, params Uri[] baseAddresses);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type serviceType, class System.Uri[] baseAddresses) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Web.WebServiceHost.#ctor(System.Type,System.Uri[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (serviceType As Type, ParamArray baseAddresses As Uri())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebServiceHost(Type ^ serviceType, ... cli::array &lt;Uri ^&gt; ^ baseAddresses);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
        <Parameter Name="baseAddresses" Type="System.Uri[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="serviceType">Type de service.</param>
        <param name="baseAddresses">Adresse de base du service.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ServiceModel.Web.WebServiceHost" /> avec le type de service et l'adresse de base spécifiés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le paramètre `baseAddresses` peut se composer d'une ou plusieurs adresses de base.  
  
   
  
## Examples  
 L'exemple suivant montre comment appeler ce constructeur.  
  
 [!code-csharp[WebServiceHost#2](~/samples/snippets/csharp/VS_Snippets_CFX/webservicehost/cs/snippets.cs#2)]
 [!code-vb[WebServiceHost#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/webservicehost/vb/snippets.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnOpening">
      <MemberSignature Language="C#" Value="protected override void OnOpening ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnOpening() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Web.WebServiceHost.OnOpening" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnOpening ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnOpening();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Appelé lors de l'ouverture de l'instance de <see cref="T:System.ServiceModel.Web.WebServiceHost" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Voici ce qui se produit lorsque la méthode est appelée :  
  
1.  Si <xref:System.ServiceModel.Web.WebServiceHost> ne trouve aucun point de terminaison dans la description du service, il crée un point de terminaison par défaut au niveau de l'adresse de base du service. <xref:System.ServiceModel.Web.WebServiceHost> désactive automatiquement la page d'aide HTTP et la fonctionnalité WSDL GET afin que le point de terminaison de métadonnées n'interfère pas avec le point de terminaison HTTP par défaut.  
  
2.  <xref:System.ServiceModel.Web.WebServiceHost> vérifie tous les points de terminaison qui utilisent <xref:System.ServiceModel.WebHttpBinding> pour déterminer s'ils ont le <xref:System.ServiceModel.Description.WebHttpBehavior> requis. S'il n'est pas présent, <xref:System.ServiceModel.Web.WebServiceHost> ajoute le <xref:System.ServiceModel.Description.WebHttpBehavior> pour le point de terminaison.  
  
3.  <xref:System.ServiceModel.Web.WebServiceHost> configure la liaison du point de terminaison pour utiliser les paramètres de sécurité IIS associés lorsqu'ils sont utilisés dans un répertoire virtuel sécurisé.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>