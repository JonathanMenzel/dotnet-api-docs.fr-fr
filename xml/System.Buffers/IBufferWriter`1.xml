<Type Name="IBufferWriter&lt;T&gt;" FullName="System.Buffers.IBufferWriter&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="252b1dee3638a541d810d3dd33e85217543072a1" /><Meta Name="ms.sourcegitcommit" Value="4ee26ac79338b0bf99fa1e0913e8a06b21994d8e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="03/26/2019" /><Meta Name="ms.locfileid" Value="58460530" /></Metadata><TypeSignature Language="C#" Value="public interface IBufferWriter&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IBufferWriter`1&lt;T&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Buffers.IBufferWriter`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IBufferWriter(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IBufferWriter" />
  <TypeSignature Language="F#" Value="type IBufferWriter&lt;'T&gt; = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Memory</AssemblyName>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="T">Le type des éléments dans le <see cref="T:System.Buffers.IBufferWriter`1" />.</typeparam>
    <summary>Représente un récepteur de sortie dans lequel des données <typeparamref name="T" /> peuvent être écrites.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Advance">
      <MemberSignature Language="C#" Value="public void Advance (int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Advance(int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.IBufferWriter`1.Advance(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Advance (count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Advance(int count);" />
      <MemberSignature Language="F#" Value="abstract member Advance : int -&gt; unit" Usage="iBufferWriter.Advance count" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="count" Type="System.Int32" Index="0" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="count">Nombre d'éléments de données écrits dans <see cref="T:System.Span`1" /> ou <see cref="T:System.Memory`1" />.</param>
        <summary>Indique à <see cref="T:System.Buffers.IBufferWriter`1" /> que des éléments de données <paramref name="count" /> ont été écrits dans les sorties <see cref="T:System.Span`1" /> ou <see cref="T:System.Memory`1" />.</summary>
        <remarks>Vous devez demander une nouvelle mémoire tampon après l’appel à l’avance pour continuer à écrire plus de données ; Impossible d’écrire vers une mémoire tampon obtenue précédemment.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMemory">
      <MemberSignature Language="C#" Value="public Memory&lt;T&gt; GetMemory (int sizeHint = 0);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Memory`1&lt;!T&gt; GetMemory(int32 sizeHint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.IBufferWriter`1.GetMemory(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMemory (Optional sizeHint As Integer = 0) As Memory(Of T)" />
      <MemberSignature Language="F#" Value="abstract member GetMemory : int -&gt; Memory&lt;'T&gt;" Usage="iBufferWriter.GetMemory sizeHint" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sizeHint" Type="System.Int32" Index="0" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="sizeHint">La longueur minimale de l’élément <see cref="T:System.Memory`1" /> retourné. Si 0, une mémoire tampon est renvoyé.</param>
        <summary>Renvoie un élément <see cref="T:System.Memory`1" /> à écrire d’au moins la taille requise (spécifiée par <paramref name="sizeHint" />).</summary>
        <returns>Un élément <see cref="T:System.Memory`1" /> d’au moins <paramref name="sizeHint" />. Si <paramref name="sizeHint" /> est 0, renvoie une mémoire tampon non vide.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

Il n’existe aucune garantie que les appels successifs retournera la même mémoire tampon ou la mémoire tampon de même taille.

Cela ne doit jamais retourner <xref:System.Span%601.Empty?displayProperty=nameWithType>, mais il peut lever si la taille de mémoire tampon demandée n’est pas disponible.

Vous devez demander une nouvelle mémoire tampon après l’appel `Advance` de continuer d’écrire plus de données ; vous ne peut pas écrire dans une mémoire tampon obtenue précédemment.

         ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">La mémoire tampon demandée n'est pas disponible.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSpan">
      <MemberSignature Language="C#" Value="public Span&lt;T&gt; GetSpan (int sizeHint = 0);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Span`1&lt;!T&gt; GetSpan(int32 sizeHint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.IBufferWriter`1.GetSpan(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSpan (Optional sizeHint As Integer = 0) As Span(Of T)" />
      <MemberSignature Language="F#" Value="abstract member GetSpan : int -&gt; Span&lt;'T&gt;" Usage="iBufferWriter.GetSpan sizeHint" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sizeHint" Type="System.Int32" Index="0" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="sizeHint">La longueur minimale de l’élément <see cref="T:System.Span`1" /> retourné. Si 0, une mémoire tampon est renvoyé.</param>
        <summary>Renvoie un élément <see cref="T:System.Span`1" /> à écrire d’au moins la taille requise (spécifiée par <paramref name="sizeHint" />).</summary>
        <returns>Un élément <see cref="T:System.Span`1" /> d’au moins <paramref name="sizeHint" />. Si <paramref name="sizeHint" /> est 0, renvoie une mémoire tampon non vide.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
  
Il n’existe aucune garantie que les appels successifs retournera la même mémoire tampon ou la mémoire tampon de même taille.

Cette méthode ne doit jamais retourner <xref:System.Span%601.Empty?displayProperty=nameWithType>, mais il peut lever si la taille de mémoire tampon demandée n’est pas disponible.

Vous devez demander une nouvelle mémoire tampon après l’appel `Advance` de continuer d’écrire plus de données ; vous ne peut pas écrire dans une mémoire tampon obtenue précédemment.
         ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>