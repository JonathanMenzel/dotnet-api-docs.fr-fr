<Type Name="IMemoryOwner&lt;T&gt;" FullName="System.Buffers.IMemoryOwner&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3ed983f4803ee3a9e7d76d02411a109fec50bbae" /><Meta Name="ms.sourcegitcommit" Value="1654a92bac785a221098172d9cacd405ceaac9b7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="12/01/2018" /><Meta Name="ms.locfileid" Value="52734602" /></Metadata><TypeSignature Language="C#" Value="public interface IMemoryOwner&lt;T&gt; : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IMemoryOwner`1&lt;T&gt; implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Buffers.IMemoryOwner`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IMemoryOwner(Of T)&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IMemoryOwner : IDisposable" />
  <TypeSignature Language="F#" Value="type IMemoryOwner&lt;'T&gt; = interface&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Memory</AssemblyName>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T"><span data-ttu-id="db320-101">Le type d’éléments à stocker dans la mémoire.</span><span class="sxs-lookup"><span data-stu-id="db320-101">The type of elements to store in memory.</span></span></typeparam>
    <summary><span data-ttu-id="db320-102">Identifie le propriétaire d’un bloc de mémoire, responsable de la suppression de la mémoire sous-jacente.</span><span class="sxs-lookup"><span data-stu-id="db320-102">Identifies the owner of a block of memory who is responsible for disposing of the underlying memory appropriately.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

<span data-ttu-id="db320-103">Le `IMemoryOwner<T>` interface est utilisée pour définir le propriétaire responsable de la gestion de la durée de vie d’un <xref:System.Memory%601> mémoire tampon.</span><span class="sxs-lookup"><span data-stu-id="db320-103">The `IMemoryOwner<T>` interface is used to define the owner responsible for the lifetime management of a <xref:System.Memory%601> buffer.</span></span> <span data-ttu-id="db320-104">Une instance de la `IMemoryOwner<T>` interface est retournée par la <xref:System.Buffers.MemoryPool%601.Rent%2A?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="db320-104">An instance of the `IMemoryOwner<T>` interface is returned by the <xref:System.Buffers.MemoryPool%601.Rent%2A?displayProperty=nameWithType> method.</span></span> 

<span data-ttu-id="db320-105">Une mémoire tampon peut avoir plusieurs consommateurs, il peut uniquement avoir un seul propriétaire à un moment donné.</span><span class="sxs-lookup"><span data-stu-id="db320-105">While a buffer can have multiple consumers, it can only have a single owner at any given time.</span></span> <span data-ttu-id="db320-106">Le propriétaire peut :</span><span class="sxs-lookup"><span data-stu-id="db320-106">The owner can:</span></span>

- <span data-ttu-id="db320-107">Créer la mémoire tampon soit directement, soit en appelant une méthode de fabrique.</span><span class="sxs-lookup"><span data-stu-id="db320-107">Create the buffer either directly or by calling a factory method.</span></span>

- <span data-ttu-id="db320-108">Transférer la propriété à un autre consommateur.</span><span class="sxs-lookup"><span data-stu-id="db320-108">Transfer ownership to another consumer.</span></span> <span data-ttu-id="db320-109">Dans ce cas, l’ancien propriétaire doit ne plus utiliser la mémoire tampon.</span><span class="sxs-lookup"><span data-stu-id="db320-109">In this case, the previous owner should no longer use the buffer.</span></span>

- <span data-ttu-id="db320-110">Détruire la mémoire tampon lorsqu’il n’est plus en cours d’utilisation.</span><span class="sxs-lookup"><span data-stu-id="db320-110">Destroy the buffer when it is no longer in use.</span></span>

<span data-ttu-id="db320-111">Étant donné que le `IMemoryOwner<T>` objet implémente la <xref:System.IDisposable> interface, vous devez appeler son <xref:System.IDisposable.Dispose%2A> méthode une fois que la mémoire tampon n’est plus nécessaire et vous l’avez détruit.</span><span class="sxs-lookup"><span data-stu-id="db320-111">Because the `IMemoryOwner<T>` object implements the <xref:System.IDisposable> interface, you should call its <xref:System.IDisposable.Dispose%2A> method only after the memory buffer is no longer needed and you have destroyed it.</span></span> <span data-ttu-id="db320-112">Vous devez *pas* dispose de la `IMemoryOnwer<T>` de l’objet pendant une référence à sa mémoire est disponible.</span><span class="sxs-lookup"><span data-stu-id="db320-112">You should *not* dispose of the `IMemoryOnwer<T>` object while a reference to its memory is available.</span></span> <span data-ttu-id="db320-113">Cela signifie que le type dans lequel `IMemoryOwner<T>` est déclaré ne doit pas avoir un <xref:System.Object.Finalize%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="db320-113">This means that the type in which `IMemoryOwner<T>` is declared should not have a <xref:System.Object.Finalize%2A> method.</span></span>

   ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Memory">
      <MemberSignature Language="C#" Value="public Memory&lt;T&gt; Memory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Memory`1&lt;!T&gt; Memory" />
      <MemberSignature Language="DocId" Value="P:System.Buffers.IMemoryOwner`1.Memory" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Memory As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Memory&lt;T&gt; Memory { Memory&lt;T&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.Memory : Memory&lt;'T&gt;" Usage="System.Buffers.IMemoryOwner&lt;'T&gt;.Memory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="db320-114">Obtient la mémoire appartenant à ce propriétaire.</span><span class="sxs-lookup"><span data-stu-id="db320-114">Gets the memory belonging to this owner.</span></span></summary>
        <value><span data-ttu-id="db320-115">La mémoire appartenant à ce propriétaire.</span><span class="sxs-lookup"><span data-stu-id="db320-115">The memory belonging to this owner.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>