<Type Name="TouchEventArgs" FullName="System.Windows.Input.TouchEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7c74a7ee25dbc4576c25b963031c93ff156a6ffb" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39770644" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class TouchEventArgs : System.Windows.Input.InputEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TouchEventArgs extends System.Windows.Input.InputEventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.TouchEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class TouchEventArgs&#xA;Inherits InputEventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class TouchEventArgs : System::Windows::Input::InputEventArgs" />
  <TypeSignature Language="F#" Value="type TouchEventArgs = class&#xA;    inherit InputEventArgs" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Input.InputEventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fournit des données pour les événements d'entrée tactile.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisent les événements suivants <xref:System.Windows.Input.TouchEventArgs>.  
  
-   <xref:System.Windows.UIElement.TouchUp?displayProperty=nameWithType>  
  
-   <xref:System.Windows.UIElement.TouchDown?displayProperty=nameWithType>  
  
-   <xref:System.Windows.UIElement.TouchEnter?displayProperty=nameWithType>  
  
-   <xref:System.Windows.UIElement.TouchLeave?displayProperty=nameWithType>  
  
-   <xref:System.Windows.UIElement.TouchMove?displayProperty=nameWithType>  
  
-   <xref:System.Windows.UIElement3D.TouchUp?displayProperty=nameWithType>  
  
-   <xref:System.Windows.UIElement3D.TouchDown?displayProperty=nameWithType>  
  
-   <xref:System.Windows.UIElement3D.TouchEnter?displayProperty=nameWithType>  
  
-   <xref:System.Windows.UIElement3D.TouchLeave?displayProperty=nameWithType>  
  
-   <xref:System.Windows.UIElement3D.TouchMove?displayProperty=nameWithType>  
  
-   <xref:System.Windows.ContentElement.TouchUp?displayProperty=nameWithType>  
  
-   <xref:System.Windows.ContentElement.TouchDown?displayProperty=nameWithType>  
  
-   <xref:System.Windows.ContentElement.TouchEnter?displayProperty=nameWithType>  
  
-   <xref:System.Windows.ContentElement.TouchLeave?displayProperty=nameWithType>  
  
-   <xref:System.Windows.ContentElement.TouchMove?displayProperty=nameWithType>  
  
   
  
## Examples  
 L’exemple suivant gère la <xref:System.Windows.UIElement.TouchUp> les événements qui se produisent sur un <xref:System.Windows.Controls.Canvas>. Il vérifie le <xref:System.Windows.Input.TouchDevice.Captured%2A> propriété pour vérifier que le périphérique qui a déclenché l’événement est capturé dans le <xref:System.Windows.Controls.Canvas>. Dans le cas, le <xref:System.Windows.Input.TouchDevice> est libéré.  
  
 Cet exemple fait partie d’un exemple plus complet qui est disponible dans le <xref:System.Windows.Input.TouchDevice> vue d’ensemble de la classe.  
  
 [!code-csharp[TouchEventsSample#130](~/samples/snippets/csharp/VS_Snippets_Wpf/toucheventssample/cs/mainwindow.xaml.cs#130)]
 [!code-vb[TouchEventsSample#130](~/samples/snippets/visualbasic/VS_Snippets_Wpf/toucheventssample/vb/mainwindow.xaml.vb#130)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TouchEventArgs (System.Windows.Input.TouchDevice touchDevice, int timestamp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Input.TouchDevice touchDevice, int32 timestamp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.TouchEventArgs.#ctor(System.Windows.Input.TouchDevice,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TouchEventArgs(System::Windows::Input::TouchDevice ^ touchDevice, int timestamp);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.TouchEventArgs : System.Windows.Input.TouchDevice * int -&gt; System.Windows.Input.TouchEventArgs" Usage="new System.Windows.Input.TouchEventArgs (touchDevice, timestamp)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="touchDevice" Type="System.Windows.Input.TouchDevice" />
        <Parameter Name="timestamp" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="touchDevice">Périphérique d'entrée à associer à cet événement.</param>
        <param name="timestamp">Heure à laquelle l'entrée s'est produite.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Input.TouchEventArgs" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIntermediateTouchPoints">
      <MemberSignature Language="C#" Value="public System.Windows.Input.TouchPointCollection GetIntermediateTouchPoints (System.Windows.IInputElement relativeTo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Input.TouchPointCollection GetIntermediateTouchPoints(class System.Windows.IInputElement relativeTo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.TouchEventArgs.GetIntermediateTouchPoints(System.Windows.IInputElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetIntermediateTouchPoints (relativeTo As IInputElement) As TouchPointCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Input::TouchPointCollection ^ GetIntermediateTouchPoints(System::Windows::IInputElement ^ relativeTo);" />
      <MemberSignature Language="F#" Value="member this.GetIntermediateTouchPoints : System.Windows.IInputElement -&gt; System.Windows.Input.TouchPointCollection" Usage="touchEventArgs.GetIntermediateTouchPoints relativeTo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.TouchPointCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="relativeTo" Type="System.Windows.IInputElement" />
      </Parameters>
      <Docs>
        <param name="relativeTo">Élément qui définit l'espace de coordonnées.</param>
        <summary>Retourne tous les points tactiles collectés entre les événements tactiles les plus récents et précédents.</summary>
        <returns>Tous les points tactiles collectés entre les événements tactiles les plus récents et précédents.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTouchPoint">
      <MemberSignature Language="C#" Value="public System.Windows.Input.TouchPoint GetTouchPoint (System.Windows.IInputElement relativeTo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Input.TouchPoint GetTouchPoint(class System.Windows.IInputElement relativeTo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.TouchEventArgs.GetTouchPoint(System.Windows.IInputElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTouchPoint (relativeTo As IInputElement) As TouchPoint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Input::TouchPoint ^ GetTouchPoint(System::Windows::IInputElement ^ relativeTo);" />
      <MemberSignature Language="F#" Value="member this.GetTouchPoint : System.Windows.IInputElement -&gt; System.Windows.Input.TouchPoint" Usage="touchEventArgs.GetTouchPoint relativeTo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.TouchPoint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="relativeTo" Type="System.Windows.IInputElement" />
      </Parameters>
      <Docs>
        <param name="relativeTo">Élément qui définit l'espace de coordonnées.</param>
        <summary>Retourne la position actuelle du périphérique tactile relatif à l'élément spécifié.</summary>
        <returns>Position actuelle du périphérique tactile relatif à l'élément spécifié.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeEventHandler">
      <MemberSignature Language="C#" Value="protected override void InvokeEventHandler (Delegate genericHandler, object genericTarget);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void InvokeEventHandler(class System.Delegate genericHandler, object genericTarget) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.TouchEventArgs.InvokeEventHandler(System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub InvokeEventHandler (genericHandler As Delegate, genericTarget As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void InvokeEventHandler(Delegate ^ genericHandler, System::Object ^ genericTarget);" />
      <MemberSignature Language="F#" Value="override this.InvokeEventHandler : Delegate * obj -&gt; unit" Usage="touchEventArgs.InvokeEventHandler (genericHandler, genericTarget)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="genericHandler" Type="System.Delegate" />
        <Parameter Name="genericTarget" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="genericHandler">Gestionnaire générique à appeler selon une méthode spécifique au type.</param>
        <param name="genericTarget">Cible sur laquelle le gestionnaire doit être appelé.</param>
        <summary>Appelle des gestionnaires d'événements selon une méthode spécifique à un type, ce qui peut améliorer l'efficacité du système d'événements.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette implémentation effectue un cast du gestionnaire générique en un <xref:System.EventHandler%601> de type <xref:System.Windows.Input.TouchEventArgs> , puis l’appelle. Pour plus d’informations sur ce modèle d’implémentation et les raisons pour qu’il, consultez <xref:System.Windows.RoutedEventArgs.InvokeEventHandler%2A> et [vue d’ensemble des événements routés](~/docs/framework/wpf/advanced/routed-events-overview.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchDevice">
      <MemberSignature Language="C#" Value="public System.Windows.Input.TouchDevice TouchDevice { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.TouchDevice TouchDevice" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.TouchEventArgs.TouchDevice" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchDevice As TouchDevice" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::TouchDevice ^ TouchDevice { System::Windows::Input::TouchDevice ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TouchDevice : System.Windows.Input.TouchDevice" Usage="System.Windows.Input.TouchEventArgs.TouchDevice" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.TouchDevice</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la pression tactile qui a généré l'événement.</summary>
        <value>Pression tactile qui a généré l'événement.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple suivant gère la <xref:System.Windows.UIElement.TouchUp> les événements qui se produisent sur un <xref:System.Windows.Controls.Canvas>. Il vérifie le <xref:System.Windows.Input.TouchDevice.Captured%2A> propriété pour vérifier que le périphérique qui a déclenché l’événement est capturé dans le <xref:System.Windows.Controls.Canvas>. Dans le cas, le <xref:System.Windows.Input.TouchDevice> est libéré.  
  
 Cet exemple fait partie d’un exemple plus complet qui est disponible dans le <xref:System.Windows.Input.TouchDevice> vue d’ensemble de la classe.  
  
 [!code-csharp[TouchEventsSample#130](~/samples/snippets/csharp/VS_Snippets_Wpf/toucheventssample/cs/mainwindow.xaml.cs#130)]
 [!code-vb[TouchEventsSample#130](~/samples/snippets/visualbasic/VS_Snippets_Wpf/toucheventssample/vb/mainwindow.xaml.vb#130)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>