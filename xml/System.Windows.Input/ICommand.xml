<Type Name="ICommand" FullName="System.Windows.Input.ICommand">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1e3bd24a573191a92b9df1b2ed4985310f9306bd" /><Meta Name="ms.sourcegitcommit" Value="c5fd6b431a16f0412349201a0e93a9eacddf4b35" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="12/14/2018" /><Meta Name="ms.locfileid" Value="53391014" /></Metadata><TypeSignature Language="C#" Value="public interface ICommand" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICommand" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.ICommand" />
  <TypeSignature Language="VB.NET" Value="Public Interface ICommand" />
  <TypeSignature Language="C++ CLI" Value="public interface class ICommand" />
  <TypeSignature Language="F#" Value="type ICommand = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ObjectModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Windows</AssemblyName>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("PresentationCore, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
      <AttributeName>System.ComponentModel.TypeConverter("System.Windows.Input.CommandConverter, PresentationFramework, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
      <AttributeName>System.Windows.Markup.ValueSerializer("System.Windows.Input.CommandValueSerializer, PresentationFramework, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.TypeConverter("System.Windows.Input.CommandConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Windows.Markup.ValueSerializer("System.Windows.Input.CommandValueSerializer, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="07eda-101">Définit une commande.</span><span class="sxs-lookup"><span data-stu-id="07eda-101">Defines a command.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07eda-102"><xref:System.Windows.Input.RoutedCommand> et <xref:System.Windows.Input.RoutedUICommand> deux implémentations de la <xref:System.Windows.Input.ICommand> dans l’interface [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)].</span><span class="sxs-lookup"><span data-stu-id="07eda-102"><xref:System.Windows.Input.RoutedCommand> and <xref:System.Windows.Input.RoutedUICommand> are two implementations of the <xref:System.Windows.Input.ICommand> interface in [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)].</span></span>  
  
## <a name="icommand-in-windows-runtime-apps"></a><span data-ttu-id="07eda-103">ICommand dans Windows Runtime des applications</span><span class="sxs-lookup"><span data-stu-id="07eda-103">ICommand in Windows Runtime apps</span></span>  
 <span data-ttu-id="07eda-104">Le <xref:System.Windows.Input.ICommand> interface est le contrat de code pour les commandes qui sont écrits dans les applications .NET pour Windows Runtime.</span><span class="sxs-lookup"><span data-stu-id="07eda-104">The <xref:System.Windows.Input.ICommand> interface is the code contract for commands that are written in .NET for Windows Runtime apps.</span></span> <span data-ttu-id="07eda-105">Ces commandes fournissent le comportement d’exécution de commandes pour les éléments d’interface utilisateur comme un XAML de Runtime Windows `Button` et en particulier un `AppBarButton`.</span><span class="sxs-lookup"><span data-stu-id="07eda-105">These commands provide the commanding behavior for UI elements such as a Windows Runtime XAML `Button` and in particular an `AppBarButton`.</span></span> <span data-ttu-id="07eda-106">Si vous définissez des commandes pour les applications Windows Runtime vous utilisez essentiellement les mêmes techniques que vous utiliseriez pour la définition de commandes pour une application .NET.</span><span class="sxs-lookup"><span data-stu-id="07eda-106">If you're defining commands for Windows Runtime apps you use basically the same techniques you'd use for defining commands for a .NET app.</span></span> <span data-ttu-id="07eda-107">Implémenter la commande en définissant une classe qui implémente <xref:System.Windows.Input.ICommand> et mettre en œuvre plus précisément le <xref:System.Windows.Input.ICommand.Execute%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="07eda-107">Implement the command by defining a class that implements <xref:System.Windows.Input.ICommand> and specifically implement the <xref:System.Windows.Input.ICommand.Execute%2A> method.</span></span>  
  
 <span data-ttu-id="07eda-108">XAML pour Windows Runtime ne prend pas en charge x`:Static`, afin de ne pas tenter d’utiliser le `x:Static` extension de balisage si la commande est utilisée à partir de Windows Runtime XAML.</span><span class="sxs-lookup"><span data-stu-id="07eda-108">XAML for Windows Runtime does not support x`:Static`, so don't attempt to use the `x:Static` markup extension if the command is used from Windows Runtime XAML.</span></span> <span data-ttu-id="07eda-109">En outre, le Runtime de Windows n’a pas de toutes les bibliothèques commande prédéfinie, donc la syntaxe XAML illustrée ici ne s’appliquent pas réellement dans le cas où vous êtes implémentant l’interface et la définition de la commande pour l’utilisation de Windows Runtime.</span><span class="sxs-lookup"><span data-stu-id="07eda-109">Also, the Windows Runtime does not have any predefined command libraries, so the XAML syntax shown here doesn't really apply for the case where you're implementing the interface and defining the command for Windows Runtime usage.</span></span>  
  
<a name="xamlTextUsage_ICommand"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="07eda-110">Utilisation d'attributs XAML</span><span class="sxs-lookup"><span data-stu-id="07eda-110">XAML Attribute Usage</span></span>  
 <span data-ttu-id="07eda-111">\<*propriété d’objet*= «*predefinedCommandName*« / ></span><span class="sxs-lookup"><span data-stu-id="07eda-111">\<*object property*="*predefinedCommandName*"/></span></span>  
  
<span data-ttu-id="07eda-112">ou</span><span class="sxs-lookup"><span data-stu-id="07eda-112">-or-</span></span>
  
 <span data-ttu-id="07eda-113">\<*propriété d’objet*= «*predefinedCommandName.predefinedCommandName*« / ></span><span class="sxs-lookup"><span data-stu-id="07eda-113">\<*object property*="*predefinedCommandName.predefinedCommandName*"/></span></span>  
  
<span data-ttu-id="07eda-114">ou</span><span class="sxs-lookup"><span data-stu-id="07eda-114">-or-</span></span>
  
 <span data-ttu-id="07eda-115">\<*propriété d’objet*= « { *customClassName.customCommandName*} "/ ></span><span class="sxs-lookup"><span data-stu-id="07eda-115">\<*object property*="{ *customClassName.customCommandName*}"/></span></span>  
  
<a name="xamlValues_ICommand"></a>   
## <a name="xaml-values"></a><span data-ttu-id="07eda-116">Valeurs XAML</span><span class="sxs-lookup"><span data-stu-id="07eda-116">XAML Values</span></span>  
 <span data-ttu-id="07eda-117">*predefinedClassName*</span><span class="sxs-lookup"><span data-stu-id="07eda-117">*predefinedClassName*</span></span>  
 <span data-ttu-id="07eda-118">Une des classes de commande prédéfinies.</span><span class="sxs-lookup"><span data-stu-id="07eda-118">One of the predefined command classes.</span></span>  
  
 <span data-ttu-id="07eda-119">*predefinedCommandName*</span><span class="sxs-lookup"><span data-stu-id="07eda-119">*predefinedCommandName*</span></span>  
 <span data-ttu-id="07eda-120">Une des commandes prédéfinies.</span><span class="sxs-lookup"><span data-stu-id="07eda-120">One of the predefined commands.</span></span>  
  
 <span data-ttu-id="07eda-121">*customClassName*</span><span class="sxs-lookup"><span data-stu-id="07eda-121">*customClassName*</span></span>  
 <span data-ttu-id="07eda-122">Une classe personnalisée qui contient la commande personnalisée.</span><span class="sxs-lookup"><span data-stu-id="07eda-122">A custom class that contains the custom command.</span></span> <span data-ttu-id="07eda-123">Classes personnalisées requièrent généralement un `xlmns` de préfixe de mappage ; consultez [espaces de noms XAML et mappage Namespace pour WPF XAML](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md).</span><span class="sxs-lookup"><span data-stu-id="07eda-123">Custom classes generally require an `xlmns` prefix mapping; see [XAML Namespaces and Namespace Mapping for WPF XAML](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md).</span></span>  
  
 <span data-ttu-id="07eda-124">*customCommandName*</span><span class="sxs-lookup"><span data-stu-id="07eda-124">*customCommandName*</span></span>  
 <span data-ttu-id="07eda-125">Une commande personnalisée.</span><span class="sxs-lookup"><span data-stu-id="07eda-125">A custom command.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CanExecute">
      <MemberSignature Language="C#" Value="public bool CanExecute (object parameter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanExecute(object parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.ICommand.CanExecute(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanExecute (parameter As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanExecute(System::Object ^ parameter);" />
      <MemberSignature Language="F#" Value="abstract member CanExecute : obj -&gt; bool" Usage="iCommand.CanExecute parameter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Windows</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="parameter"><span data-ttu-id="07eda-126">Données utilisées par la commande.</span><span class="sxs-lookup"><span data-stu-id="07eda-126">Data used by the command.</span></span>  <span data-ttu-id="07eda-127">Si la commande n’exige pas que des données soient passées, cet objet peut avoir la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="07eda-127">If the command does not require data to be passed, this object can be set to <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="07eda-128">Définit la méthode qui détermine si la commande peut s'exécuter dans son état actuel.</span><span class="sxs-lookup"><span data-stu-id="07eda-128">Defines the method that determines whether the command can execute in its current state.</span></span></summary>
        <returns><span data-ttu-id="07eda-129"><see langword="true" /> si cette commande peut être exécutée ; sinon <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="07eda-129"><see langword="true" /> if this command can be executed; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07eda-130">En règle générale, une source de commande appelle le <xref:System.Windows.Input.ICommand.CanExecute%2A> méthode lorsque le <xref:System.Windows.Input.ICommand.CanExecuteChanged> événement est déclenché.</span><span class="sxs-lookup"><span data-stu-id="07eda-130">Typically, a command source calls the <xref:System.Windows.Input.ICommand.CanExecute%2A> method when the <xref:System.Windows.Input.ICommand.CanExecuteChanged> event is raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.ICommandSource" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="CanExecuteChanged">
      <MemberSignature Language="C#" Value="event EventHandler CanExecuteChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler CanExecuteChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.ICommand.CanExecuteChanged" />
      <MemberSignature Language="VB.NET" Value="Event CanExecuteChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ CanExecuteChanged;" />
      <MemberSignature Language="F#" Value="member this.CanExecuteChanged : EventHandler " Usage="member this.CanExecuteChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Windows</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="07eda-131">Se produit lorsque des modifications influent sur l'exécution de la commande.</span><span class="sxs-lookup"><span data-stu-id="07eda-131">Occurs when changes occur that affect whether or not the command should execute.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07eda-132">Normalement, une source de commande appelle <xref:System.Windows.Input.ICommand.CanExecute%2A> sur la commande lorsque cet événement se produit.</span><span class="sxs-lookup"><span data-stu-id="07eda-132">Normally, a command source calls <xref:System.Windows.Input.ICommand.CanExecute%2A> on the command when this event occurs.</span></span>  
  
 <span data-ttu-id="07eda-133">En règle générale, si la commande ne peut pas s’exécuter, la source de commande désactive.</span><span class="sxs-lookup"><span data-stu-id="07eda-133">Normally, if the command cannot execute, the command source disables itself.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.ICommandSource" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public void Execute (object parameter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Execute(object parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.ICommand.Execute(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Execute (parameter As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Execute(System::Object ^ parameter);" />
      <MemberSignature Language="F#" Value="abstract member Execute : obj -&gt; unit" Usage="iCommand.Execute parameter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Windows</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="parameter"><span data-ttu-id="07eda-134">Données utilisées par la commande.</span><span class="sxs-lookup"><span data-stu-id="07eda-134">Data used by the command.</span></span>  <span data-ttu-id="07eda-135">Si la commande n’exige pas que des données soient passées, cet objet peut avoir la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="07eda-135">If the command does not require data to be passed, this object can be set to <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="07eda-136">Définit la méthode à appeler lorsque la commande est invoquée.</span><span class="sxs-lookup"><span data-stu-id="07eda-136">Defines the method to be called when the command is invoked.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Input.ICommandSource" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
  </Members>
</Type>