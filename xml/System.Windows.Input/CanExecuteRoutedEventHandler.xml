<Type Name="CanExecuteRoutedEventHandler" FullName="System.Windows.Input.CanExecuteRoutedEventHandler">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a252bc967121eea51fe378caf080a9b7c5a519bc" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37505117" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate void CanExecuteRoutedEventHandler(object sender, CanExecuteRoutedEventArgs e);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed CanExecuteRoutedEventHandler extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.CanExecuteRoutedEventHandler" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub CanExecuteRoutedEventHandler(sender As Object, e As CanExecuteRoutedEventArgs)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void CanExecuteRoutedEventHandler(System::Object ^ sender, CanExecuteRoutedEventArgs ^ e);" />
  <TypeSignature Language="F#" Value="type CanExecuteRoutedEventHandler = delegate of obj * CanExecuteRoutedEventArgs -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="sender" Type="System.Object" />
    <Parameter Name="e" Type="System.Windows.Input.CanExecuteRoutedEventArgs" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="sender">
      <span data-ttu-id="ed633-101">Cible de la commande qui appelle le gestionnaire.</span>
      <span class="sxs-lookup">
        <span data-stu-id="ed633-101">The command target that is invoking the handler.</span>
      </span>
    </param>
    <param name="e">
      <span data-ttu-id="ed633-102">Données d'événement.</span>
      <span class="sxs-lookup">
        <span data-stu-id="ed633-102">The event data.</span>
      </span>
    </param>
    <summary>
      <span data-ttu-id="ed633-103">Représente la méthode qui gérera l'événement <see cref="E:System.Windows.Input.CommandBinding.CanExecute" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="ed633-103">Represents the method that will handle the <see cref="E:System.Windows.Input.CommandBinding.CanExecute" /> event.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ed633-104">Le <xref:System.Windows.Input.CanExecuteRoutedEventHandler> détermine si la commande associée à la source d’événements est en mesure de s’exécuter sur la cible de commande.</span><span class="sxs-lookup"><span data-stu-id="ed633-104">The <xref:System.Windows.Input.CanExecuteRoutedEventHandler> determines if the command associated with the event source is able to execute on the command target.</span></span> <span data-ttu-id="ed633-105">Si la commande a une source de commande qui spécifie une cible, les informations de la cible peuvent être obtenues via `sender`.</span><span class="sxs-lookup"><span data-stu-id="ed633-105">If the command has a command source that specifies a target, then the target information can be obtained through `sender`.</span></span> <span data-ttu-id="ed633-106">Si le <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> n’est pas défini, l’élément ayant le focus clavier est la cible et peut également être obtenu via `sender`.</span><span class="sxs-lookup"><span data-stu-id="ed633-106">If the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> is not set, the element with keyboard focus is the target, and can also be obtained through `sender`.</span></span>  <span data-ttu-id="ed633-107">S’il est déterminé que la commande peut s’exécuter sur la cible, puis le <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A?displayProperty=nameWithType> propriété doit être définie sur `true`; sinon, affectez-lui la valeur `false`.</span><span class="sxs-lookup"><span data-stu-id="ed633-107">If it is determined that the command can execute on the target, then the <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A?displayProperty=nameWithType> property should be set to `true`; otherwise, set it to `false`.</span></span>  
  
 <span data-ttu-id="ed633-108">Vous n’avez pas besoin de s’appuyer sur les données d’événement pour déterminer la commande, la source et la cible.</span><span class="sxs-lookup"><span data-stu-id="ed633-108">You do not need to rely on event data to determine the command, source, and target.</span></span> <span data-ttu-id="ed633-109">Vous pouvez limiter l’utilisation du Gestionnaire aux appels de commande possibles connus, bien que cela est plus difficile d’y parvenir si votre structure de commande repose largement sur le routage des commandes pour exécuter la même commande sur des cibles potentielles consécutives dans un événement itinéraire.</span><span class="sxs-lookup"><span data-stu-id="ed633-109">You can limit the usage of the handler to known possible command invocations, although this is more difficult to accomplish if your command structure relies extensively on the command routing to execute the same command on successive potential targets in an event route.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ed633-110">L’exemple suivant montre un <xref:System.Windows.Input.CanExecuteRoutedEventHandler> qui définit <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> à `true`.</span><span class="sxs-lookup"><span data-stu-id="ed633-110">The following example shows a <xref:System.Windows.Input.CanExecuteRoutedEventHandler> that sets <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> to `true`.</span></span>  
  
 [!code-csharp[commandwithhandler#CommandHandlerCanExecuteHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml.cs#commandhandlercanexecutehandler)]
 [!code-vb[commandwithhandler#CommandHandlerCanExecuteHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/commandWithHandler/VisualBasic/Window1.xaml.vb#commandhandlercanexecutehandler)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.ExecutedRoutedEventHandler" />
  </Docs>
</Type>