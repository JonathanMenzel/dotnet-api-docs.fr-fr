<Type Name="CanExecuteRoutedEventHandler" FullName="System.Windows.Input.CanExecuteRoutedEventHandler">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a252bc967121eea51fe378caf080a9b7c5a519bc" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="37505117" /></Metadata><TypeSignature Language="C#" Value="public delegate void CanExecuteRoutedEventHandler(object sender, CanExecuteRoutedEventArgs e);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed CanExecuteRoutedEventHandler extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.CanExecuteRoutedEventHandler" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub CanExecuteRoutedEventHandler(sender As Object, e As CanExecuteRoutedEventArgs)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void CanExecuteRoutedEventHandler(System::Object ^ sender, CanExecuteRoutedEventArgs ^ e);" />
  <TypeSignature Language="F#" Value="type CanExecuteRoutedEventHandler = delegate of obj * CanExecuteRoutedEventArgs -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="sender" Type="System.Object" />
    <Parameter Name="e" Type="System.Windows.Input.CanExecuteRoutedEventArgs" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="sender">Cible de la commande qui appelle le gestionnaire.</param>
    <param name="e">Données d'événement.</param>
    <summary>Représente la méthode qui gérera l'événement <see cref="E:System.Windows.Input.CommandBinding.CanExecute" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Input.CanExecuteRoutedEventHandler> détermine si la commande associée à la source d’événements est en mesure de s’exécuter sur la cible de commande. Si la commande a une source de commande qui spécifie une cible, les informations de la cible peuvent être obtenues via `sender`. Si le <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> n’est pas défini, l’élément ayant le focus clavier est la cible et peut également être obtenu via `sender`.  S’il est déterminé que la commande peut s’exécuter sur la cible, puis le <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A?displayProperty=nameWithType> propriété doit être définie sur `true`; sinon, affectez-lui la valeur `false`.  
  
 Vous n’avez pas besoin de s’appuyer sur les données d’événement pour déterminer la commande, la source et la cible. Vous pouvez limiter l’utilisation du Gestionnaire aux appels de commande possibles connus, bien que cela est plus difficile d’y parvenir si votre structure de commande repose largement sur le routage des commandes pour exécuter la même commande sur des cibles potentielles consécutives dans un événement itinéraire.  
  
   
  
## Examples  
 L’exemple suivant montre un <xref:System.Windows.Input.CanExecuteRoutedEventHandler> qui définit <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> à `true`.  
  
 [!code-csharp[commandwithhandler#CommandHandlerCanExecuteHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml.cs#commandhandlercanexecutehandler)]
 [!code-vb[commandwithhandler#CommandHandlerCanExecuteHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/commandWithHandler/VisualBasic/Window1.xaml.vb#commandhandlercanexecutehandler)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.ExecutedRoutedEventHandler" />
  </Docs>
</Type>