<Type Name="ExecutedRoutedEventHandler" FullName="System.Windows.Input.ExecutedRoutedEventHandler">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="5e7060feb6bd9cc789b91cd51b75c1f71d708b5f" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30647813" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate void ExecutedRoutedEventHandler(object sender, ExecutedRoutedEventArgs e);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ExecutedRoutedEventHandler extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.ExecutedRoutedEventHandler" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub ExecutedRoutedEventHandler(sender As Object, e As ExecutedRoutedEventArgs)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void ExecutedRoutedEventHandler(System::Object ^ sender, ExecutedRoutedEventArgs ^ e);" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="sender" Type="System.Object" />
    <Parameter Name="e" Type="System.Windows.Input.ExecutedRoutedEventArgs" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="sender">Objet où le gestionnaire d’événements est attaché.</param>
    <param name="e">Données d'événement.</param>
    <summary>Représente la méthode qui gère les événements routés <see cref="E:System.Windows.Input.CommandBinding.Executed" /> et <see cref="E:System.Windows.Input.CommandBinding.PreviewExecuted" />, ainsi que les événements attachés associés.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce délégué contient la logique d’implémentation pour un <xref:System.Windows.Input.RoutedCommand>.  Séparer la logique d’implémentation de la commande permet la commande à appeler à partir de types et de différentes sources et la centralisation de la logique de commande.  
  
 Ce délégué est également utilisé pour <xref:System.Windows.Input.CommandManager.Executed?displayProperty=nameWithType> et <xref:System.Windows.Input.CommandManager.PreviewExecuted?displayProperty=nameWithType>, qui sont des événements attachés sur la <xref:System.Windows.Input.CommandManager> classe qui implémente une grande partie de l’infrastructure d’exécution de commandes. Mais gèrent des gestionnaires plus pratiques le <xref:System.Windows.Input.CommandBinding.Executed> événements provenant d’un <xref:System.Windows.Input.CommandBinding>, plutôt que de travailler au <xref:System.Windows.Input.CommandManager> au niveau du.  
  
 Dans <xref:System.Windows.Input.ExecutedRoutedEventArgs>, les propriétés suivantes sont généralement un intérêt lorsque vous écrivez un gestionnaire d’événements pour un événement routé qui résulte d’une commande exécutée :  
  
-   <xref:System.Windows.RoutedEventArgs.Source%2A> signale la cible où la commande a été exécutée. Une fois la commande exécutée, vous pouvez également considérer le <xref:System.Windows.RoutedEventArgs.Source%2A> plus générale dans routés termes d’événement, comme l’objet qui a déclenché un événement routé.  
  
-   <xref:System.Windows.Input.ExecutedRoutedEventArgs.Command%2A> signale la commande exécutée. Cette propriété est utile si vous utilisez des liaisons de commande et si vous écrivez des gestionnaires qui peuvent gérer plusieurs commandes.  
  
-   <xref:System.Windows.Input.ExecutedRoutedEventArgs.Parameter%2A> signale tous les paramètres de commande spécifiques qui ont été passés à la commande en cours d’exécution. Pas toutes les commandes utilisent ou attendent des paramètres spécifiques à la commande.  
  
-   <xref:System.Windows.RoutedEventArgs.Handled%2A> Indique si l’événement routé qui a généré à partir de la commande exécutée a déjà été contrôlé par un autre élément le long de l’itinéraire. Pour les gestionnaires d’événements routés, il est recommandé d’avoir des gestionnaires qui font un travail explicite lors de la gestion de l’événement pour définir <xref:System.Windows.RoutedEventArgs.Handled%2A> à `true`. Cela empêche les gestionnaires classiques pour l’événement de la gestion de l’événement encore plus loin sur l’itinéraire. Pour plus d’informations sur la gestion des événements routés, consultez [le marquage des événements routés comme Handled et de gestion de la classe](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md).  
  
 Ce délégué représente également des gestionnaires pour <xref:System.Windows.Input.CommandManager.Executed?displayProperty=nameWithType> et <xref:System.Windows.Input.CommandManager.PreviewExecutedEvent?displayProperty=nameWithType>, qui sont des événements attachés sur la <xref:System.Windows.Input.CommandManager> classe qui implémente une grande partie de l’infrastructure d’exécution de commandes. Mais gèrent des gestionnaires plus pratiques le <xref:System.Windows.Input.CommandBinding.Executed> événements provenant d’un <xref:System.Windows.Input.CommandBinding>, plutôt que de travailler au <xref:System.Windows.Input.CommandManager> au niveau du.  
  
 Pour plus d’informations sur l’exécution des commandes, consultez [Vue d’ensemble des commandes](~/docs/framework/wpf/advanced/commanding-overview.md).  
  
   
  
## Examples  
 Cet exemple crée un <xref:System.Windows.Input.ExecutedRoutedEventHandler> qui définit une propriété visuelle sur la cible lors de la commande est exécutée. L’exemple inclut également le <xref:System.Windows.Input.CanExecuteRoutedEventHandler> pour la même commande.  
  
 [!code-csharp[Custom_RoutedCommand#Custom_RoutedCommandHandlers](~/samples/snippets/csharp/VS_Snippets_Wpf/Custom_RoutedCommand/CSharp/Window1.xaml.cs#custom_routedcommandhandlers)]
 [!code-vb[Custom_RoutedCommand#Custom_RoutedCommandHandlers](~/samples/snippets/visualbasic/VS_Snippets_Wpf/Custom_RoutedCommand/visualbasic/window1.xaml.vb#custom_routedcommandhandlers)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.ExecutedRoutedEventArgs" />
  </Docs>
</Type>