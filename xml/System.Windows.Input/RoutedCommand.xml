<Type Name="RoutedCommand" FullName="System.Windows.Input.RoutedCommand">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9d7469aafedfab5bf01be9f8214fc44809973b73" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30659623" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class RoutedCommand : System.Windows.Input.ICommand" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RoutedCommand extends System.Object implements class System.Windows.Input.ICommand" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.RoutedCommand" />
  <TypeSignature Language="VB.NET" Value="Public Class RoutedCommand&#xA;Implements ICommand" />
  <TypeSignature Language="C++ CLI" Value="public ref class RoutedCommand : System::Windows::Input::ICommand" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Input.ICommand</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter("System.Windows.Input.CommandConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.ValueSerializer("System.Windows.Input.CommandValueSerializer, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Définit une commande qui implémente <see cref="T:System.Windows.Input.ICommand" /> et qui est routée via l'arborescence d'éléments.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Input.RoutedCommand.Execute%2A> et <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> méthodes sur un <xref:System.Windows.Input.RoutedCommand> ne contiennent pas la logique d’application pour la commande comme c’est le cas avec un type <xref:System.Windows.Input.ICommand>, mais au lieu de cela, ces méthodes déclenchent des événements qui parcourent l’arborescence d’éléments pour trouver un objet avec un <xref:System.Windows.Input.CommandBinding>.  Les gestionnaires d’événements est attaché à la <xref:System.Windows.Input.CommandBinding> contiennent la logique de commande.  
  
 Le <xref:System.Windows.Input.RoutedCommand.Execute%2A> méthode déclenche le <xref:System.Windows.Input.CommandManager.PreviewExecuted> et <xref:System.Windows.Input.CommandManager.Executed> les événements.  Le <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> méthode déclenche le <xref:System.Windows.Input.CommandManager.PreviewCanExecute> et <xref:System.Windows.Input.CommandManager.CanExecute> les événements.  
  
<a name="xamlAttributeUsage_RoutedCommand"></a>   
## <a name="xaml-attribute-usage"></a>Utilisation d'attributs XAML  
 \<*object* *property*="*predefinedCommandName*"/>  
  
 \- ou -  
  
 \<*object* *property*="*predefinedClassName*.*predefinedCommandName*"/>  
  
 \- ou -  
  
 \<*object* *property*="{ *customClassName*.*customCommandName*}"/>  
  
<a name="xamlValues_RoutedCommand"></a>   
## <a name="xaml-values"></a>Valeurs XAML  
 *predefinedClassName*  
 Une des classes de commande prédéfinies.  
  
 *predefinedCommandName*  
 Une des commandes prédéfinies.  
  
 *customClassName*  
 Une classe personnalisée qui contient la commande personnalisée. Classes personnalisées requièrent généralement un `xlmns` préfixe de mappage, consultez [espaces de noms XAML et mappage Namespace pour XAML WPF](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md).  
  
 *customCommandName*  
 Une commande personnalisée.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.RoutedUICommand" />
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.InputBinding" />
    <altmember cref="T:System.Windows.Input.KeyGesture" />
    <altmember cref="T:System.Windows.Input.MouseGesture" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Input.RoutedCommand" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RoutedCommand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RoutedCommand();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Input.RoutedCommand" />.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.ExecutedRoutedEventArgs" />
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RoutedCommand (string name, Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, ownerType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RoutedCommand(System::String ^ name, Type ^ ownerType);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name">Nom déclaré pour la sérialisation.</param>
        <param name="ownerType">Type qui inscrit la commande.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Input.RoutedCommand" /> avec le nom et le type de propriétaire spécifiés.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> est <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="ownerType" /> est <see langword="null" />.</exception>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.ExecutedRoutedEventArgs" />
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RoutedCommand (string name, Type ownerType, System.Windows.Input.InputGestureCollection inputGestures);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type ownerType, class System.Windows.Input.InputGestureCollection inputGestures) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type,System.Windows.Input.InputGestureCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, ownerType As Type, inputGestures As InputGestureCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RoutedCommand(System::String ^ name, Type ^ ownerType, System::Windows::Input::InputGestureCollection ^ inputGestures);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="inputGestures" Type="System.Windows.Input.InputGestureCollection" />
      </Parameters>
      <Docs>
        <param name="name">Nom déclaré pour la sérialisation.</param>
        <param name="ownerType">Type qui inscrit la commande.</param>
        <param name="inputGestures">Mouvements d'entrée par défaut associés à cette commande.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Input.RoutedCommand" /> avec le nom, le type de propriétaire et la collection de mouvements spécifiés.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> est <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">La longueur de <paramref name="name" /> est égale à zéro.  
  
 \- ou -  
  
 <paramref name="ownerType" /> est <see langword="null" />.</exception>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.ExecutedRoutedEventArgs" />
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="CanExecute">
      <MemberSignature Language="C#" Value="public bool CanExecute (object parameter, System.Windows.IInputElement target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CanExecute(object parameter, class System.Windows.IInputElement target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanExecute (parameter As Object, target As IInputElement) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanExecute(System::Object ^ parameter, System::Windows::IInputElement ^ target);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
        <Parameter Name="target" Type="System.Windows.IInputElement" />
      </Parameters>
      <Docs>
        <param name="parameter">Type de données défini par l'utilisateur.</param>
        <param name="target">Cible de la commande.</param>
        <summary>Détermine si ce <see cref="T:System.Windows.Input.RoutedCommand" /> peut s'exécuter dans son état actuel.</summary>
        <returns>
          <see langword="true" /> si la commande peut s'exécuter sur la cible de commande actuelle ; sinon <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La logique réelle qui détermine si un <xref:System.Windows.Input.RoutedCommand> peut s’exécuter sur actuel cible de la commande n’est pas contenue dans le <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> méthodes, au lieu de cela <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> déclenche le <xref:System.Windows.Input.CommandManager.PreviewCanExecute> et le <xref:System.Windows.Input.CommandManager.CanExecute> événements tunnel et se propagent via élément arborescence pour trouver un objet avec un <xref:System.Windows.Input.CommandBinding>.  Si un <xref:System.Windows.Input.CommandBinding> pour qui <xref:System.Windows.Input.RoutedCommand> est trouvée, le <xref:System.Windows.Input.CanExecuteRoutedEventHandler> attaché à <xref:System.Windows.Input.CommandBinding> est appelée.  Ces gestionnaires fournissent la logique de programmation pour déterminer si le <xref:System.Windows.Input.RoutedCommand> peut s’exécuter ou non.  
  
 Le <xref:System.Windows.Input.CommandManager.PreviewCanExecute> et <xref:System.Windows.Input.CommandManager.PreviewExecuted> les événements sont déclenchés sur le <xref:System.Windows.Input.ICommandSource.CommandTarget%2A>.  Si le <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> n’est pas définie sur le <xref:System.Windows.Input.ICommandSource>, le <xref:System.Windows.Input.CommandManager.PreviewCanExecute> et <xref:System.Windows.Input.CommandManager.CanExecute> sont déclenchés sur l’élément avec le focus clavier.  
  
   
  
## Examples  
 L’exemple suivant est un <xref:System.Windows.Input.ICommand.CanExecuteChanged> Gestionnaire d’événements à partir d’une implémentation personnalisée de <xref:System.Windows.Input.ICommandSource>.  
  
 `this.Command` Dans cet exemple est la <xref:System.Windows.Input.ICommandSource.Command%2A> propriété sur le <xref:System.Windows.Input.ICommandSource>.  Si la commande n’est pas `null`, la commande est effectuée en une <xref:System.Windows.Input.RoutedCommand>.  Si la commande est un <xref:System.Windows.Input.RoutedCommand>, puis le <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> méthode est appelée en passant le <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> et <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.  Si la commande n’est pas un <xref:System.Windows.Input.RoutedCommand>, elle est convertie en un <xref:System.Windows.Input.ICommand> et <xref:System.Windows.Input.ICommand.CanExecute%2A> méthode est appelée en passant le <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.  
  
 Si le <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> méthode retourne `true`, puis le contrôle est activé ; sinon, il est désactivé.  
  
 [!code-csharp[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/samples/snippets/csharp/VS_Snippets_Wpf/ImplementICommandSource/CSharp/CommandSlider.cs#implementicommandcanexecutechanged)]
 [!code-vb[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ImplementICommandSource/visualbasic/commandslider.vb#implementicommandcanexecutechanged)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="target" /> n'est ni <see cref="T:System.Windows.UIElement" /> ni <see cref="T:System.Windows.ContentElement" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CanExecuteChanged">
      <MemberSignature Language="C#" Value="public event EventHandler CanExecuteChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler CanExecuteChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.RoutedCommand.CanExecuteChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CanExecuteChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event EventHandler ^ CanExecuteChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque le gestionnaire de commandes détecte des modifications de la source de la commande. Ces modifications déterminent souvent si la commande doit s'exécuter sur la cible de la commande actuelle.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Input.RoutedCommand> écoute le <xref:System.Windows.Input.CommandManager.RequerySuggested> événement, qui est déclenché par le <xref:System.Windows.Input.CommandManager>. Le <xref:System.Windows.Input.CommandManager.RequerySuggested> événement est déclenché chaque fois que des conditions qui peuvent changer si l’exécution de la commande, tels qu’un changement dans le focus clavier.  Lorsque la commande reçoit le <xref:System.Windows.Input.CommandManager.RequerySuggested> événement, il déclenche le <xref:System.Windows.Input.RoutedCommand.CanExecuteChanged> événement.  En règle générale, la source de commande écoute cet événement et de la requête la <xref:System.Windows.Input.RoutedCommand> par le biais de la <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> (méthode).  La plupart des sources de commande seront désactivent si la commande ne peut pas être exécutée dans le cadre de leur liaison de commande.  Est un exemple quand un <xref:System.Windows.Controls.MenuItem> se grise lorsque la commande ne peut pas être exécutée.  
  
 Dans certains cas, le <xref:System.Windows.Input.CommandManager> n’a pas connaissance d’un changement dans les conditions qui affectent la capacité d’une commande à exécuter.  Dans ces cas, vous pouvez forcer la <xref:System.Windows.Input.CommandManager> à déclenche le <xref:System.Windows.Input.CommandManager.RequerySuggested> événement en appelant le <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> (méthode), cela entraîne le le <xref:System.Windows.Input.RoutedCommand> pour déclencher le <xref:System.Windows.Input.RoutedCommand.CanExecuteChanged> événement.  
  
   
  
## Examples  
 L’exemple suivant est un <xref:System.Windows.Input.ICommand.CanExecuteChanged> Gestionnaire d’événements à partir d’une implémentation personnalisée de <xref:System.Windows.Input.ICommandSource>.  
  
 `this.Command` Dans cet exemple est la <xref:System.Windows.Input.ICommandSource.Command%2A> propriété sur le <xref:System.Windows.Input.ICommandSource>.  Si la commande n’est pas `null`, la commande est effectuée en une <xref:System.Windows.Input.RoutedCommand>.  Si la commande est un <xref:System.Windows.Input.RoutedCommand>, puis le <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> méthode est appelée en passant le <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> et <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.  Si la commande n’est pas un <xref:System.Windows.Input.RoutedCommand>, elle est convertie en un <xref:System.Windows.Input.ICommand> et <xref:System.Windows.Input.ICommand.CanExecute%2A> méthode est appelée en passant le <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.  
  
 Si le <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> méthode retourne `true`, puis le contrôle est activé ; sinon, le contrôle est désactivé.  
  
 [!code-csharp[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/samples/snippets/csharp/VS_Snippets_Wpf/ImplementICommandSource/CSharp/CommandSlider.cs#implementicommandcanexecutechanged)]
 [!code-vb[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ImplementICommandSource/visualbasic/commandslider.vb#implementicommandcanexecutechanged)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public void Execute (object parameter, System.Windows.IInputElement target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Execute(object parameter, class System.Windows.IInputElement target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.Execute(System.Object,System.Windows.IInputElement)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Execute (parameter As Object, target As IInputElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Execute(System::Object ^ parameter, System::Windows::IInputElement ^ target);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
        <Parameter Name="target" Type="System.Windows.IInputElement" />
      </Parameters>
      <Docs>
        <param name="parameter">Paramètre défini par l'utilisateur à passer au gestionnaire.</param>
        <param name="target">Élément sur lequel commencer à rechercher des gestionnaires de commandes.</param>
        <summary>Exécute le <see cref="T:System.Windows.Input.RoutedCommand" /> sur la cible de la commande actuelle.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La logique réelle qui exécute le <xref:System.Windows.Input.RoutedCommand> n’est pas contenue dans le <xref:System.Windows.Input.RoutedCommand.Execute%2A> méthodes.  <xref:System.Windows.Input.RoutedCommand.Execute%2A> déclenche la <xref:System.Windows.Input.CommandManager.PreviewExecuted> et <xref:System.Windows.Input.CommandManager.Executed> les événements qui créent un tunnel et se propagent dans l’élément d’arborescence pour trouver un objet avec un <xref:System.Windows.Input.CommandBinding>.  Si un <xref:System.Windows.Input.CommandBinding> pour qui <xref:System.Windows.Input.RoutedCommand> est trouvée, le <xref:System.Windows.Input.ExecutedRoutedEventHandler> attaché à <xref:System.Windows.Input.CommandBinding> est appelée.  Ces gestionnaires fournissent la logique de programmation qui effectue le <xref:System.Windows.Input.RoutedCommand>.  
  
 Le <xref:System.Windows.Input.CommandManager.PreviewExecuted> et <xref:System.Windows.Input.CommandManager.Executed> les événements sont déclenchés sur le <xref:System.Windows.Input.ICommandSource.CommandTarget%2A>.  Si le <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> n’est pas définie sur le <xref:System.Windows.Input.ICommandSource>, le <xref:System.Windows.Input.CommandManager.PreviewExecuted> et <xref:System.Windows.Input.CommandManager.Executed> sont déclenchés sur l’élément avec le focus clavier.  
  
   
  
## Examples  
 L’exemple suivant provient d’une implémentation personnalisée de <xref:System.Windows.Input.ICommandSource> exemple.  
  
 `this.Command` Dans cet exemple est la propriété de commande sur le <xref:System.Windows.Input.ICommandSource>.  Si la commande n’est pas null, la commande est effectuée en une <xref:System.Windows.Input.RoutedCommand>.  S’il s’agit un <xref:System.Windows.Input.RoutedCommand>, le <xref:System.Windows.Input.RoutedCommand.Execute%2A> méthode est appelée en passant le <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> et <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.  Si la commande n’est pas un <xref:System.Windows.Input.RoutedCommand>, elle est convertie en un <xref:System.Windows.Input.ICommand> et <xref:System.Windows.Input.ICommand.Execute%2A> méthode est appelée en passant le <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.  
  
 [!code-csharp[ImplementICommandSource#ImplementICommandExecute](~/samples/snippets/csharp/VS_Snippets_Wpf/ImplementICommandSource/CSharp/CommandSlider.cs#implementicommandexecute)]
 [!code-vb[ImplementICommandSource#ImplementICommandExecute](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ImplementICommandSource/visualbasic/commandslider.vb#implementicommandexecute)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="target" /> n'est ni <see cref="T:System.Windows.UIElement" /> ni <see cref="T:System.Windows.ContentElement" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="InputGestures">
      <MemberSignature Language="C#" Value="public System.Windows.Input.InputGestureCollection InputGestures { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InputGestureCollection InputGestures" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.RoutedCommand.InputGestures" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InputGestures As InputGestureCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::InputGestureCollection ^ InputGestures { System::Windows::Input::InputGestureCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InputGestureCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la collection d'objets <see cref="T:System.Windows.Input.InputGesture" /> associés à cette commande.</summary>
        <value>Mouvements d'entrée.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple suivant montre comment ajouter un nouveau <xref:System.Windows.Input.MouseGesture> à un <xref:System.Windows.Input.RoutedCommand>.  
  
 [!code-csharp[commandlibrarysnippets#MouseBindingAddedCommand](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#mousebindingaddedcommand)]
 [!code-vb[commandlibrarysnippets#MouseBindingAddedCommand](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#mousebindingaddedcommand)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.InputGesture" />
        <altmember cref="T:System.Windows.Input.KeyGesture" />
        <altmember cref="T:System.Windows.Input.MouseGesture" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.KeyBinding" />
        <altmember cref="T:System.Windows.Input.MouseBinding" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.RoutedCommand.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le nom de la commande.</summary>
        <value>Nom de la commande.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété peut être utilisée lors du référencement d’un <xref:System.Windows.Input.RoutedCommand> dans [!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)].  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OwnerType">
      <MemberSignature Language="C#" Value="public Type OwnerType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type OwnerType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.RoutedCommand.OwnerType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OwnerType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ OwnerType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le type inscrit avec la commande.</summary>
        <value>Type du propriétaire de commande.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Input.ICommand.CanExecute">
      <MemberSignature Language="C#" Value="bool ICommand.CanExecute (object parameter);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Windows.Input.ICommand.CanExecute(object parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#CanExecute(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CanExecute (parameter As Object) As Boolean Implements ICommand.CanExecute" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Windows.Input.ICommand.CanExecute(System::Object ^ parameter) = System::Windows::Input::ICommand::CanExecute;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="parameter">Données utilisées par la commande.  Si la commande n’exige pas que des données soient passées, cet objet peut avoir la valeur <see langword="null" />.</param>
        <summary>Pour obtenir une description de ce membre, consultez <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)" />.</summary>
        <returns>
          <see langword="true" /> si cette commande peut être exécutée ; sinon <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce membre est une implémentation d'un membre d'interface explicite. Il peut uniquement être utilisé lorsque l'instance de <xref:System.Windows.Input.RoutedCommand> est castée en interface <xref:System.Windows.Input.ICommand>.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)" />
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Input.ICommand.Execute">
      <MemberSignature Language="C#" Value="void ICommand.Execute (object parameter);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Input.ICommand.Execute(object parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#Execute(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Execute (parameter As Object) Implements ICommand.Execute" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Input.ICommand.Execute(System::Object ^ parameter) = System::Windows::Input::ICommand::Execute;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="parameter">Données utilisées par la commande.  Si la commande n’exige pas que des données soient passées, cet objet peut avoir la valeur <see langword="null" />.</param>
        <summary>Pour obtenir une description de ce membre, consultez <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce membre est une implémentation d'un membre d'interface explicite. Il peut uniquement être utilisé lorsque l'instance de <xref:System.Windows.Input.RoutedCommand> est castée en interface <xref:System.Windows.Input.ICommand>.  
  
   
  
## Examples  
 Voir aussi  
  
 <xref:System.Windows.Input.RoutedCommand.Execute%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>