<Type Name="RoutedCommand" FullName="System.Windows.Input.RoutedCommand">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9d7469aafedfab5bf01be9f8214fc44809973b73" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class RoutedCommand : System.Windows.Input.ICommand" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RoutedCommand extends System.Object implements class System.Windows.Input.ICommand" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.RoutedCommand" />
  <TypeSignature Language="VB.NET" Value="Public Class RoutedCommand&#xA;Implements ICommand" />
  <TypeSignature Language="C++ CLI" Value="public ref class RoutedCommand : System::Windows::Input::ICommand" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Input.ICommand</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter("System.Windows.Input.CommandConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.ValueSerializer("System.Windows.Input.CommandValueSerializer, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="2203f-101">Définit une commande qui implémente <see cref="T:System.Windows.Input.ICommand" /> et qui est routée via l'arborescence d'éléments.</span>
      <span class="sxs-lookup">
        <span data-stu-id="2203f-101">Defines a command that implements <see cref="T:System.Windows.Input.ICommand" /> and is routed through the element tree.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2203f-102">Le <xref:System.Windows.Input.RoutedCommand.Execute%2A> et <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> méthodes sur un <xref:System.Windows.Input.RoutedCommand> ne contiennent pas la logique d’application pour la commande comme c’est le cas avec un type <xref:System.Windows.Input.ICommand>, mais au lieu de cela, ces méthodes déclenchent des événements qui parcourent l’arborescence d’éléments pour trouver un objet avec un <xref:System.Windows.Input.CommandBinding>.</span><span class="sxs-lookup"><span data-stu-id="2203f-102">The <xref:System.Windows.Input.RoutedCommand.Execute%2A> and <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> methods on a <xref:System.Windows.Input.RoutedCommand> do not contain the application logic for the command as is the case with a typical <xref:System.Windows.Input.ICommand>, but rather, these methods raise events that traverse the element tree looking for an object with a <xref:System.Windows.Input.CommandBinding>.</span></span>  <span data-ttu-id="2203f-103">Les gestionnaires d’événements est attaché à la <xref:System.Windows.Input.CommandBinding> contiennent la logique de commande.</span><span class="sxs-lookup"><span data-stu-id="2203f-103">The event handlers attached to the <xref:System.Windows.Input.CommandBinding> contain the command logic.</span></span>  
  
 <span data-ttu-id="2203f-104">Le <xref:System.Windows.Input.RoutedCommand.Execute%2A> méthode déclenche le <xref:System.Windows.Input.CommandManager.PreviewExecuted> et <xref:System.Windows.Input.CommandManager.Executed> les événements.</span><span class="sxs-lookup"><span data-stu-id="2203f-104">The <xref:System.Windows.Input.RoutedCommand.Execute%2A> method raises the <xref:System.Windows.Input.CommandManager.PreviewExecuted> and <xref:System.Windows.Input.CommandManager.Executed> events.</span></span>  <span data-ttu-id="2203f-105">Le <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> méthode déclenche le <xref:System.Windows.Input.CommandManager.PreviewCanExecute> et <xref:System.Windows.Input.CommandManager.CanExecute> les événements.</span><span class="sxs-lookup"><span data-stu-id="2203f-105">The <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method raises the <xref:System.Windows.Input.CommandManager.PreviewCanExecute> and <xref:System.Windows.Input.CommandManager.CanExecute> events.</span></span>  
  
<a name="xamlAttributeUsage_RoutedCommand"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="2203f-106">Utilisation d'attributs XAML</span><span class="sxs-lookup"><span data-stu-id="2203f-106">XAML Attribute Usage</span></span>  
 <span data-ttu-id="2203f-107">\<*object* *property*="*predefinedCommandName*"/></span><span class="sxs-lookup"><span data-stu-id="2203f-107">\<*object* *property*="*predefinedCommandName*"/></span></span>  
  
 <span data-ttu-id="2203f-108">\- ou -</span><span class="sxs-lookup"><span data-stu-id="2203f-108">\- or -</span></span>  
  
 <span data-ttu-id="2203f-109">\<*object* *property*="*predefinedClassName*.*predefinedCommandName*"/></span><span class="sxs-lookup"><span data-stu-id="2203f-109">\<*object* *property*="*predefinedClassName*.*predefinedCommandName*"/></span></span>  
  
 <span data-ttu-id="2203f-110">\- ou -</span><span class="sxs-lookup"><span data-stu-id="2203f-110">\- or -</span></span>  
  
 <span data-ttu-id="2203f-111">\<*object* *property*="{ *customClassName*.*customCommandName*}"/></span><span class="sxs-lookup"><span data-stu-id="2203f-111">\<*object* *property*="{ *customClassName*.*customCommandName*}"/></span></span>  
  
<a name="xamlValues_RoutedCommand"></a>   
## <a name="xaml-values"></a><span data-ttu-id="2203f-112">Valeurs XAML</span><span class="sxs-lookup"><span data-stu-id="2203f-112">XAML Values</span></span>  
 <span data-ttu-id="2203f-113">*predefinedClassName*</span><span class="sxs-lookup"><span data-stu-id="2203f-113">*predefinedClassName*</span></span>  
 <span data-ttu-id="2203f-114">Une des classes de commande prédéfinies.</span><span class="sxs-lookup"><span data-stu-id="2203f-114">One of the predefined command classes.</span></span>  
  
 <span data-ttu-id="2203f-115">*predefinedCommandName*</span><span class="sxs-lookup"><span data-stu-id="2203f-115">*predefinedCommandName*</span></span>  
 <span data-ttu-id="2203f-116">Une des commandes prédéfinies.</span><span class="sxs-lookup"><span data-stu-id="2203f-116">One of the predefined commands.</span></span>  
  
 <span data-ttu-id="2203f-117">*customClassName*</span><span class="sxs-lookup"><span data-stu-id="2203f-117">*customClassName*</span></span>  
 <span data-ttu-id="2203f-118">Une classe personnalisée qui contient la commande personnalisée.</span><span class="sxs-lookup"><span data-stu-id="2203f-118">A custom class which contains the custom command.</span></span> <span data-ttu-id="2203f-119">Classes personnalisées requièrent généralement un `xlmns` préfixe de mappage, consultez [espaces de noms XAML et mappage Namespace pour XAML WPF](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md).</span><span class="sxs-lookup"><span data-stu-id="2203f-119">Custom classes generally require an `xlmns` prefix mapping; see [XAML Namespaces and Namespace Mapping for WPF XAML](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md).</span></span>  
  
 <span data-ttu-id="2203f-120">*customCommandName*</span><span class="sxs-lookup"><span data-stu-id="2203f-120">*customCommandName*</span></span>  
 <span data-ttu-id="2203f-121">Une commande personnalisée.</span><span class="sxs-lookup"><span data-stu-id="2203f-121">A custom command.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.RoutedUICommand" />
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.InputBinding" />
    <altmember cref="T:System.Windows.Input.KeyGesture" />
    <altmember cref="T:System.Windows.Input.MouseGesture" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2203f-122">Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Input.RoutedCommand" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2203f-122">Initializes a new instance of the <see cref="T:System.Windows.Input.RoutedCommand" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RoutedCommand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RoutedCommand();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2203f-123">Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Input.RoutedCommand" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2203f-123">Initializes a new instance of the <see cref="T:System.Windows.Input.RoutedCommand" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.ExecutedRoutedEventArgs" />
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RoutedCommand (string name, Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, ownerType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RoutedCommand(System::String ^ name, Type ^ ownerType);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="2203f-124">Nom déclaré pour la sérialisation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2203f-124">Declared name for serialization.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="2203f-125">Type qui inscrit la commande.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2203f-125">The type which is registering the command.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2203f-126">Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Input.RoutedCommand" /> avec le nom et le type de propriétaire spécifiés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2203f-126">Initializes a new instance of the <see cref="T:System.Windows.Input.RoutedCommand" /> class with the specified name and owner type.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2203f-127">
            <paramref name="name" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2203f-127">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2203f-128">
            <paramref name="ownerType" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2203f-128">
              <paramref name="ownerType" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.ExecutedRoutedEventArgs" />
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RoutedCommand (string name, Type ownerType, System.Windows.Input.InputGestureCollection inputGestures);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type ownerType, class System.Windows.Input.InputGestureCollection inputGestures) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type,System.Windows.Input.InputGestureCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, ownerType As Type, inputGestures As InputGestureCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RoutedCommand(System::String ^ name, Type ^ ownerType, System::Windows::Input::InputGestureCollection ^ inputGestures);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="inputGestures" Type="System.Windows.Input.InputGestureCollection" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="2203f-129">Nom déclaré pour la sérialisation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2203f-129">Declared name for serialization.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="2203f-130">Type qui inscrit la commande.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2203f-130">The type that is registering the command.</span>
          </span>
        </param>
        <param name="inputGestures">
          <span data-ttu-id="2203f-131">Mouvements d'entrée par défaut associés à cette commande.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2203f-131">Default input gestures associated with this command.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2203f-132">Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Input.RoutedCommand" /> avec le nom, le type de propriétaire et la collection de mouvements spécifiés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2203f-132">Initializes a new instance of the <see cref="T:System.Windows.Input.RoutedCommand" /> class with the specified name, owner type, and collection of gestures.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2203f-133">
            <paramref name="name" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2203f-133">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2203f-134">La longueur de <paramref name="name" /> est égale à zéro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2203f-134">the length of <paramref name="name" /> is zero</span>
          </span>
          <span data-ttu-id="2203f-135">\- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="2203f-135">\- or -</span>
          </span>
          <span data-ttu-id="2203f-136">
            <paramref name="ownerType" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2203f-136">
              <paramref name="ownerType" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.ExecutedRoutedEventArgs" />
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="CanExecute">
      <MemberSignature Language="C#" Value="public bool CanExecute (object parameter, System.Windows.IInputElement target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CanExecute(object parameter, class System.Windows.IInputElement target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanExecute (parameter As Object, target As IInputElement) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanExecute(System::Object ^ parameter, System::Windows::IInputElement ^ target);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
        <Parameter Name="target" Type="System.Windows.IInputElement" />
      </Parameters>
      <Docs>
        <param name="parameter">
          <span data-ttu-id="2203f-137">Type de données défini par l'utilisateur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2203f-137">A user defined data type.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="2203f-138">Cible de la commande.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2203f-138">The command target.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2203f-139">Détermine si ce <see cref="T:System.Windows.Input.RoutedCommand" /> peut s'exécuter dans son état actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2203f-139">Determines whether this <see cref="T:System.Windows.Input.RoutedCommand" /> can execute in its current state.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2203f-140">
            <see langword="true" /> si la commande peut s'exécuter sur la cible de commande actuelle ; sinon <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2203f-140">
              <see langword="true" /> if the command can execute on the current command target; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2203f-141">La logique réelle qui détermine si un <xref:System.Windows.Input.RoutedCommand> peut s’exécuter sur actuel cible de la commande n’est pas contenue dans le <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> méthodes, au lieu de cela <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> déclenche le <xref:System.Windows.Input.CommandManager.PreviewCanExecute> et le <xref:System.Windows.Input.CommandManager.CanExecute> événements tunnel et se propagent via élément arborescence pour trouver un objet avec un <xref:System.Windows.Input.CommandBinding>.</span><span class="sxs-lookup"><span data-stu-id="2203f-141">The actual logic that determines if a <xref:System.Windows.Input.RoutedCommand> can execute on the current command target is not contained in the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> methods, rather <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> raises the <xref:System.Windows.Input.CommandManager.PreviewCanExecute> and the <xref:System.Windows.Input.CommandManager.CanExecute> events which tunnel and bubble through element tree looking for a object with a <xref:System.Windows.Input.CommandBinding>.</span></span>  <span data-ttu-id="2203f-142">Si un <xref:System.Windows.Input.CommandBinding> pour qui <xref:System.Windows.Input.RoutedCommand> est trouvée, le <xref:System.Windows.Input.CanExecuteRoutedEventHandler> attaché à <xref:System.Windows.Input.CommandBinding> est appelée.</span><span class="sxs-lookup"><span data-stu-id="2203f-142">If a <xref:System.Windows.Input.CommandBinding> for that <xref:System.Windows.Input.RoutedCommand> is found, then the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> attached to <xref:System.Windows.Input.CommandBinding> is called.</span></span>  <span data-ttu-id="2203f-143">Ces gestionnaires fournissent la logique de programmation pour déterminer si le <xref:System.Windows.Input.RoutedCommand> peut s’exécuter ou non.</span><span class="sxs-lookup"><span data-stu-id="2203f-143">These handlers supply the programming logic for determining if the <xref:System.Windows.Input.RoutedCommand> can execute or not.</span></span>  
  
 <span data-ttu-id="2203f-144">Le <xref:System.Windows.Input.CommandManager.PreviewCanExecute> et <xref:System.Windows.Input.CommandManager.PreviewExecuted> les événements sont déclenchés sur le <xref:System.Windows.Input.ICommandSource.CommandTarget%2A>.</span><span class="sxs-lookup"><span data-stu-id="2203f-144">The <xref:System.Windows.Input.CommandManager.PreviewCanExecute> and <xref:System.Windows.Input.CommandManager.PreviewExecuted> events are raised on the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A>.</span></span>  <span data-ttu-id="2203f-145">Si le <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> n’est pas définie sur le <xref:System.Windows.Input.ICommandSource>, le <xref:System.Windows.Input.CommandManager.PreviewCanExecute> et <xref:System.Windows.Input.CommandManager.CanExecute> sont déclenchés sur l’élément avec le focus clavier.</span><span class="sxs-lookup"><span data-stu-id="2203f-145">If the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> is not set on the <xref:System.Windows.Input.ICommandSource>, the <xref:System.Windows.Input.CommandManager.PreviewCanExecute> and <xref:System.Windows.Input.CommandManager.CanExecute> events are raised on the element with keyboard focus.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2203f-146">L’exemple suivant est un <xref:System.Windows.Input.ICommand.CanExecuteChanged> Gestionnaire d’événements à partir d’une implémentation personnalisée de <xref:System.Windows.Input.ICommandSource>.</span><span class="sxs-lookup"><span data-stu-id="2203f-146">The following example is a <xref:System.Windows.Input.ICommand.CanExecuteChanged> event handler from a custom implementation of <xref:System.Windows.Input.ICommandSource>.</span></span>  
  
 <span data-ttu-id="2203f-147">`this.Command` Dans cet exemple est la <xref:System.Windows.Input.ICommandSource.Command%2A> propriété sur le <xref:System.Windows.Input.ICommandSource>.</span><span class="sxs-lookup"><span data-stu-id="2203f-147">`this.Command` in this example is the <xref:System.Windows.Input.ICommandSource.Command%2A> property on the <xref:System.Windows.Input.ICommandSource>.</span></span>  <span data-ttu-id="2203f-148">Si la commande n’est pas `null`, la commande est effectuée en une <xref:System.Windows.Input.RoutedCommand>.</span><span class="sxs-lookup"><span data-stu-id="2203f-148">If the command is not `null`, the command is cast to a <xref:System.Windows.Input.RoutedCommand>.</span></span>  <span data-ttu-id="2203f-149">Si la commande est un <xref:System.Windows.Input.RoutedCommand>, puis le <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> méthode est appelée en passant le <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> et <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.</span><span class="sxs-lookup"><span data-stu-id="2203f-149">If the command is a <xref:System.Windows.Input.RoutedCommand>, then the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method is called passing the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> and the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.</span></span>  <span data-ttu-id="2203f-150">Si la commande n’est pas un <xref:System.Windows.Input.RoutedCommand>, elle est convertie en un <xref:System.Windows.Input.ICommand> et <xref:System.Windows.Input.ICommand.CanExecute%2A> méthode est appelée en passant le <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.</span><span class="sxs-lookup"><span data-stu-id="2203f-150">If command is not a <xref:System.Windows.Input.RoutedCommand>, it is cast to an <xref:System.Windows.Input.ICommand> and the <xref:System.Windows.Input.ICommand.CanExecute%2A> method is called passing the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.</span></span>  
  
 <span data-ttu-id="2203f-151">Si le <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> méthode retourne `true`, puis le contrôle est activé ; sinon, il est désactivé.</span><span class="sxs-lookup"><span data-stu-id="2203f-151">If the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method returns `true`, then the control is enabled; otherwise, the control is disable.</span></span>  
  
 [!code-csharp[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/samples/snippets/csharp/VS_Snippets_Wpf/ImplementICommandSource/CSharp/CommandSlider.cs#implementicommandcanexecutechanged)]
 [!code-vb[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ImplementICommandSource/visualbasic/commandslider.vb#implementicommandcanexecutechanged)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="2203f-152">
            <paramref name="target" /> n'est ni <see cref="T:System.Windows.UIElement" /> ni <see cref="T:System.Windows.ContentElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2203f-152">
              <paramref name="target" /> is not a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CanExecuteChanged">
      <MemberSignature Language="C#" Value="public event EventHandler CanExecuteChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler CanExecuteChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.RoutedCommand.CanExecuteChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CanExecuteChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event EventHandler ^ CanExecuteChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2203f-153">Se produit lorsque le gestionnaire de commandes détecte des modifications de la source de la commande.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2203f-153">Occurs when changes to the command source are detected by the command manager.</span>
          </span>
          <span data-ttu-id="2203f-154">Ces modifications déterminent souvent si la commande doit s'exécuter sur la cible de la commande actuelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2203f-154">These changes often affect whether the command should execute on the current command target.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2203f-155">Le <xref:System.Windows.Input.RoutedCommand> écoute le <xref:System.Windows.Input.CommandManager.RequerySuggested> événement, qui est déclenché par le <xref:System.Windows.Input.CommandManager>.</span><span class="sxs-lookup"><span data-stu-id="2203f-155">The <xref:System.Windows.Input.RoutedCommand> listens for the <xref:System.Windows.Input.CommandManager.RequerySuggested> event, which is raised by the <xref:System.Windows.Input.CommandManager>.</span></span> <span data-ttu-id="2203f-156">Le <xref:System.Windows.Input.CommandManager.RequerySuggested> événement est déclenché chaque fois que des conditions qui peuvent changer si l’exécution de la commande, tels qu’un changement dans le focus clavier.</span><span class="sxs-lookup"><span data-stu-id="2203f-156">The <xref:System.Windows.Input.CommandManager.RequerySuggested> event is raised whenever conditions are met that may change the whether the command should execute, such as a change in keyboard focus.</span></span>  <span data-ttu-id="2203f-157">Lorsque la commande reçoit le <xref:System.Windows.Input.CommandManager.RequerySuggested> événement, il déclenche le <xref:System.Windows.Input.RoutedCommand.CanExecuteChanged> événement.</span><span class="sxs-lookup"><span data-stu-id="2203f-157">When the command receives the <xref:System.Windows.Input.CommandManager.RequerySuggested> event, it raises the <xref:System.Windows.Input.RoutedCommand.CanExecuteChanged> event.</span></span>  <span data-ttu-id="2203f-158">En règle générale, la source de commande écoute cet événement et de la requête la <xref:System.Windows.Input.RoutedCommand> par le biais de la <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="2203f-158">Generally, the command source will listen for this event and query the <xref:System.Windows.Input.RoutedCommand> by way of the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method.</span></span>  <span data-ttu-id="2203f-159">La plupart des sources de commande seront désactivent si la commande ne peut pas être exécutée dans le cadre de leur liaison de commande.</span><span class="sxs-lookup"><span data-stu-id="2203f-159">Most command sources will disable themselves if the command cannot be executed, as part of their command binding.</span></span>  <span data-ttu-id="2203f-160">Est un exemple quand un <xref:System.Windows.Controls.MenuItem> se grise lorsque la commande ne peut pas être exécutée.</span><span class="sxs-lookup"><span data-stu-id="2203f-160">An example of this is when a <xref:System.Windows.Controls.MenuItem> grays itself out when the command cannot be executed.</span></span>  
  
 <span data-ttu-id="2203f-161">Dans certains cas, le <xref:System.Windows.Input.CommandManager> n’a pas connaissance d’un changement dans les conditions qui affectent la capacité d’une commande à exécuter.</span><span class="sxs-lookup"><span data-stu-id="2203f-161">In some situations, the <xref:System.Windows.Input.CommandManager> is unaware of a change in conditions that alters the ability of a command to execute.</span></span>  <span data-ttu-id="2203f-162">Dans ces cas, vous pouvez forcer la <xref:System.Windows.Input.CommandManager> à déclenche le <xref:System.Windows.Input.CommandManager.RequerySuggested> événement en appelant le <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> (méthode), cela entraîne le le <xref:System.Windows.Input.RoutedCommand> pour déclencher le <xref:System.Windows.Input.RoutedCommand.CanExecuteChanged> événement.</span><span class="sxs-lookup"><span data-stu-id="2203f-162">In these cases, you can force the <xref:System.Windows.Input.CommandManager> to raises the <xref:System.Windows.Input.CommandManager.RequerySuggested> event by calling the <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> method, this will in turn cause the <xref:System.Windows.Input.RoutedCommand> to raise the <xref:System.Windows.Input.RoutedCommand.CanExecuteChanged> event.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2203f-163">L’exemple suivant est un <xref:System.Windows.Input.ICommand.CanExecuteChanged> Gestionnaire d’événements à partir d’une implémentation personnalisée de <xref:System.Windows.Input.ICommandSource>.</span><span class="sxs-lookup"><span data-stu-id="2203f-163">The following example is a <xref:System.Windows.Input.ICommand.CanExecuteChanged> event handler from a custom implementation of <xref:System.Windows.Input.ICommandSource>.</span></span>  
  
 <span data-ttu-id="2203f-164">`this.Command` Dans cet exemple est la <xref:System.Windows.Input.ICommandSource.Command%2A> propriété sur le <xref:System.Windows.Input.ICommandSource>.</span><span class="sxs-lookup"><span data-stu-id="2203f-164">`this.Command` in this example is the <xref:System.Windows.Input.ICommandSource.Command%2A> property on the <xref:System.Windows.Input.ICommandSource>.</span></span>  <span data-ttu-id="2203f-165">Si la commande n’est pas `null`, la commande est effectuée en une <xref:System.Windows.Input.RoutedCommand>.</span><span class="sxs-lookup"><span data-stu-id="2203f-165">If the command is not `null`, the command is cast to a <xref:System.Windows.Input.RoutedCommand>.</span></span>  <span data-ttu-id="2203f-166">Si la commande est un <xref:System.Windows.Input.RoutedCommand>, puis le <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> méthode est appelée en passant le <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> et <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.</span><span class="sxs-lookup"><span data-stu-id="2203f-166">If the command is a <xref:System.Windows.Input.RoutedCommand>, then the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method is called passing the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> and the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.</span></span>  <span data-ttu-id="2203f-167">Si la commande n’est pas un <xref:System.Windows.Input.RoutedCommand>, elle est convertie en un <xref:System.Windows.Input.ICommand> et <xref:System.Windows.Input.ICommand.CanExecute%2A> méthode est appelée en passant le <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.</span><span class="sxs-lookup"><span data-stu-id="2203f-167">If command is not a <xref:System.Windows.Input.RoutedCommand>, it is cast to an <xref:System.Windows.Input.ICommand> and the <xref:System.Windows.Input.ICommand.CanExecute%2A> method is called passing the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.</span></span>  
  
 <span data-ttu-id="2203f-168">Si le <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> méthode retourne `true`, puis le contrôle est activé ; sinon, le contrôle est désactivé.</span><span class="sxs-lookup"><span data-stu-id="2203f-168">If the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method returns `true`, then the control is enabled; otherwise, the control is disabled.</span></span>  
  
 [!code-csharp[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/samples/snippets/csharp/VS_Snippets_Wpf/ImplementICommandSource/CSharp/CommandSlider.cs#implementicommandcanexecutechanged)]
 [!code-vb[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ImplementICommandSource/visualbasic/commandslider.vb#implementicommandcanexecutechanged)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public void Execute (object parameter, System.Windows.IInputElement target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Execute(object parameter, class System.Windows.IInputElement target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.Execute(System.Object,System.Windows.IInputElement)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Execute (parameter As Object, target As IInputElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Execute(System::Object ^ parameter, System::Windows::IInputElement ^ target);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
        <Parameter Name="target" Type="System.Windows.IInputElement" />
      </Parameters>
      <Docs>
        <param name="parameter">
          <span data-ttu-id="2203f-169">Paramètre défini par l'utilisateur à passer au gestionnaire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2203f-169">User defined parameter to be passed to the handler.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="2203f-170">Élément sur lequel commencer à rechercher des gestionnaires de commandes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2203f-170">Element at which to begin looking for command handlers.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2203f-171">Exécute le <see cref="T:System.Windows.Input.RoutedCommand" /> sur la cible de la commande actuelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2203f-171">Executes the <see cref="T:System.Windows.Input.RoutedCommand" /> on the current command target.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2203f-172">La logique réelle qui exécute le <xref:System.Windows.Input.RoutedCommand> n’est pas contenue dans le <xref:System.Windows.Input.RoutedCommand.Execute%2A> méthodes.</span><span class="sxs-lookup"><span data-stu-id="2203f-172">The actual logic that executes the <xref:System.Windows.Input.RoutedCommand> is not contained in the <xref:System.Windows.Input.RoutedCommand.Execute%2A> methods.</span></span>  <span data-ttu-id="2203f-173"><xref:System.Windows.Input.RoutedCommand.Execute%2A> déclenche la <xref:System.Windows.Input.CommandManager.PreviewExecuted> et <xref:System.Windows.Input.CommandManager.Executed> les événements qui créent un tunnel et se propagent dans l’élément d’arborescence pour trouver un objet avec un <xref:System.Windows.Input.CommandBinding>.</span><span class="sxs-lookup"><span data-stu-id="2203f-173"><xref:System.Windows.Input.RoutedCommand.Execute%2A> raises the <xref:System.Windows.Input.CommandManager.PreviewExecuted> and <xref:System.Windows.Input.CommandManager.Executed> events, which tunnel and bubble through the element tree looking for an object with a <xref:System.Windows.Input.CommandBinding>.</span></span>  <span data-ttu-id="2203f-174">Si un <xref:System.Windows.Input.CommandBinding> pour qui <xref:System.Windows.Input.RoutedCommand> est trouvée, le <xref:System.Windows.Input.ExecutedRoutedEventHandler> attaché à <xref:System.Windows.Input.CommandBinding> est appelée.</span><span class="sxs-lookup"><span data-stu-id="2203f-174">If a <xref:System.Windows.Input.CommandBinding> for that <xref:System.Windows.Input.RoutedCommand> is found, then the <xref:System.Windows.Input.ExecutedRoutedEventHandler> attached to <xref:System.Windows.Input.CommandBinding> is called.</span></span>  <span data-ttu-id="2203f-175">Ces gestionnaires fournissent la logique de programmation qui effectue le <xref:System.Windows.Input.RoutedCommand>.</span><span class="sxs-lookup"><span data-stu-id="2203f-175">These handlers supply the programming logic that performs the <xref:System.Windows.Input.RoutedCommand>.</span></span>  
  
 <span data-ttu-id="2203f-176">Le <xref:System.Windows.Input.CommandManager.PreviewExecuted> et <xref:System.Windows.Input.CommandManager.Executed> les événements sont déclenchés sur le <xref:System.Windows.Input.ICommandSource.CommandTarget%2A>.</span><span class="sxs-lookup"><span data-stu-id="2203f-176">The <xref:System.Windows.Input.CommandManager.PreviewExecuted> and <xref:System.Windows.Input.CommandManager.Executed> events are raised on the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A>.</span></span>  <span data-ttu-id="2203f-177">Si le <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> n’est pas définie sur le <xref:System.Windows.Input.ICommandSource>, le <xref:System.Windows.Input.CommandManager.PreviewExecuted> et <xref:System.Windows.Input.CommandManager.Executed> sont déclenchés sur l’élément avec le focus clavier.</span><span class="sxs-lookup"><span data-stu-id="2203f-177">If the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> is not set on the <xref:System.Windows.Input.ICommandSource>, the <xref:System.Windows.Input.CommandManager.PreviewExecuted> and <xref:System.Windows.Input.CommandManager.Executed> events are raised on the element with keyboard focus.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2203f-178">L’exemple suivant provient d’une implémentation personnalisée de <xref:System.Windows.Input.ICommandSource> exemple.</span><span class="sxs-lookup"><span data-stu-id="2203f-178">The following example is from a custom implementation of <xref:System.Windows.Input.ICommandSource> sample.</span></span>  
  
 <span data-ttu-id="2203f-179">`this.Command` Dans cet exemple est la propriété de commande sur le <xref:System.Windows.Input.ICommandSource>.</span><span class="sxs-lookup"><span data-stu-id="2203f-179">`this.Command` in this example is the Command property on the <xref:System.Windows.Input.ICommandSource>.</span></span>  <span data-ttu-id="2203f-180">Si la commande n’est pas null, la commande est effectuée en une <xref:System.Windows.Input.RoutedCommand>.</span><span class="sxs-lookup"><span data-stu-id="2203f-180">If the command is not null, the command is cast to a <xref:System.Windows.Input.RoutedCommand>.</span></span>  <span data-ttu-id="2203f-181">S’il s’agit un <xref:System.Windows.Input.RoutedCommand>, le <xref:System.Windows.Input.RoutedCommand.Execute%2A> méthode est appelée en passant le <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> et <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.</span><span class="sxs-lookup"><span data-stu-id="2203f-181">If it is a <xref:System.Windows.Input.RoutedCommand>, then the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is called passing the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> and the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.</span></span>  <span data-ttu-id="2203f-182">Si la commande n’est pas un <xref:System.Windows.Input.RoutedCommand>, elle est convertie en un <xref:System.Windows.Input.ICommand> et <xref:System.Windows.Input.ICommand.Execute%2A> méthode est appelée en passant le <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.</span><span class="sxs-lookup"><span data-stu-id="2203f-182">If the command is not a <xref:System.Windows.Input.RoutedCommand>, it is cast to an <xref:System.Windows.Input.ICommand> and the <xref:System.Windows.Input.ICommand.Execute%2A> method is called passing the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.</span></span>  
  
 [!code-csharp[ImplementICommandSource#ImplementICommandExecute](~/samples/snippets/csharp/VS_Snippets_Wpf/ImplementICommandSource/CSharp/CommandSlider.cs#implementicommandexecute)]
 [!code-vb[ImplementICommandSource#ImplementICommandExecute](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ImplementICommandSource/visualbasic/commandslider.vb#implementicommandexecute)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="2203f-183">
            <paramref name="target" /> n'est ni <see cref="T:System.Windows.UIElement" /> ni <see cref="T:System.Windows.ContentElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2203f-183">
              <paramref name="target" /> is not a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="InputGestures">
      <MemberSignature Language="C#" Value="public System.Windows.Input.InputGestureCollection InputGestures { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InputGestureCollection InputGestures" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.RoutedCommand.InputGestures" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InputGestures As InputGestureCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::InputGestureCollection ^ InputGestures { System::Windows::Input::InputGestureCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InputGestureCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2203f-184">Obtient la collection d'objets <see cref="T:System.Windows.Input.InputGesture" /> associés à cette commande.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2203f-184">Gets the collection of <see cref="T:System.Windows.Input.InputGesture" /> objects that are associated with this command.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2203f-185">Mouvements d'entrée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2203f-185">The input gestures.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="2203f-186">L’exemple suivant montre comment ajouter un nouveau <xref:System.Windows.Input.MouseGesture> à un <xref:System.Windows.Input.RoutedCommand>.</span><span class="sxs-lookup"><span data-stu-id="2203f-186">The following example shows how to add a new <xref:System.Windows.Input.MouseGesture> to a <xref:System.Windows.Input.RoutedCommand>.</span></span>  
  
 [!code-csharp[commandlibrarysnippets#MouseBindingAddedCommand](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#mousebindingaddedcommand)]
 [!code-vb[commandlibrarysnippets#MouseBindingAddedCommand](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#mousebindingaddedcommand)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.InputGesture" />
        <altmember cref="T:System.Windows.Input.KeyGesture" />
        <altmember cref="T:System.Windows.Input.MouseGesture" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.KeyBinding" />
        <altmember cref="T:System.Windows.Input.MouseBinding" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.RoutedCommand.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2203f-187">Obtient le nom de la commande.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2203f-187">Gets the name of the command.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2203f-188">Nom de la commande.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2203f-188">The name of the command.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2203f-189">Cette propriété peut être utilisée lors du référencement d’un <xref:System.Windows.Input.RoutedCommand> dans [!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="2203f-189">This property can be used when referencing a <xref:System.Windows.Input.RoutedCommand> in [!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OwnerType">
      <MemberSignature Language="C#" Value="public Type OwnerType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type OwnerType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.RoutedCommand.OwnerType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OwnerType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ OwnerType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2203f-190">Obtient le type inscrit avec la commande.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2203f-190">Gets the type that is registered with the command.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2203f-191">Type du propriétaire de commande.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2203f-191">The type of the command owner.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Input.ICommand.CanExecute">
      <MemberSignature Language="C#" Value="bool ICommand.CanExecute (object parameter);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Windows.Input.ICommand.CanExecute(object parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#CanExecute(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CanExecute (parameter As Object) As Boolean Implements ICommand.CanExecute" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Windows.Input.ICommand.CanExecute(System::Object ^ parameter) = System::Windows::Input::ICommand::CanExecute;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="parameter">
          <span data-ttu-id="2203f-192">Données utilisées par la commande.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2203f-192">Data used by the command.</span>
          </span>
          <span data-ttu-id="2203f-193">Si la commande n’exige pas que des données soient passées, cet objet peut avoir la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2203f-193">If the command does not require data to be passed, this object can be set to <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2203f-194">Pour obtenir une description de ce membre, consultez <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2203f-194">For a description of this members, see <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2203f-195">
            <see langword="true" /> si cette commande peut être exécutée ; sinon <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2203f-195">
              <see langword="true" /> if this command can be executed; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2203f-196">Ce membre est une implémentation d'un membre d'interface explicite.</span><span class="sxs-lookup"><span data-stu-id="2203f-196">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="2203f-197">Il peut uniquement être utilisé lorsque l'instance de <xref:System.Windows.Input.RoutedCommand> est castée en interface <xref:System.Windows.Input.ICommand>.</span><span class="sxs-lookup"><span data-stu-id="2203f-197">It can be used only when the <xref:System.Windows.Input.RoutedCommand> instance is cast to an <xref:System.Windows.Input.ICommand> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)" />
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Input.ICommand.Execute">
      <MemberSignature Language="C#" Value="void ICommand.Execute (object parameter);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Input.ICommand.Execute(object parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#Execute(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Execute (parameter As Object) Implements ICommand.Execute" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Input.ICommand.Execute(System::Object ^ parameter) = System::Windows::Input::ICommand::Execute;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="parameter">
          <span data-ttu-id="2203f-198">Données utilisées par la commande.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2203f-198">Data used by the command.</span>
          </span>
          <span data-ttu-id="2203f-199">Si la commande n’exige pas que des données soient passées, cet objet peut avoir la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2203f-199">If the command does not require data to be passed, this object can be set to <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2203f-200">Pour obtenir une description de ce membre, consultez <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2203f-200">For a description of this members, see <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2203f-201">Ce membre est une implémentation d'un membre d'interface explicite.</span><span class="sxs-lookup"><span data-stu-id="2203f-201">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="2203f-202">Il peut uniquement être utilisé lorsque l'instance de <xref:System.Windows.Input.RoutedCommand> est castée en interface <xref:System.Windows.Input.ICommand>.</span><span class="sxs-lookup"><span data-stu-id="2203f-202">It can be used only when the <xref:System.Windows.Input.RoutedCommand> instance is cast to an <xref:System.Windows.Input.ICommand> interface.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2203f-203">Voir aussi</span><span class="sxs-lookup"><span data-stu-id="2203f-203">See Also</span></span>  
  
 <xref:System.Windows.Input.RoutedCommand.Execute%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>