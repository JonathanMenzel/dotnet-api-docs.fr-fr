<Type Name="CanExecuteRoutedEventArgs" FullName="System.Windows.Input.CanExecuteRoutedEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4b8dddd7cb69affee96be90bc72d1409afcef3d8" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="08/25/2018" /><Meta Name="ms.locfileid" Value="39751765" /></Metadata><TypeSignature Language="C#" Value="public sealed class CanExecuteRoutedEventArgs : System.Windows.RoutedEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit CanExecuteRoutedEventArgs extends System.Windows.RoutedEventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.CanExecuteRoutedEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class CanExecuteRoutedEventArgs&#xA;Inherits RoutedEventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class CanExecuteRoutedEventArgs sealed : System::Windows::RoutedEventArgs" />
  <TypeSignature Language="F#" Value="type CanExecuteRoutedEventArgs = class&#xA;    inherit RoutedEventArgs" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.RoutedEventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fournit des données pour les événements routés <see cref="E:System.Windows.Input.CommandBinding.CanExecute" /> et <see cref="E:System.Windows.Input.CommandManager.PreviewCanExecute" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En règle générale, une source de commande, telle une <xref:System.Windows.Controls.MenuItem>, appellera le <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> méthode sur un <xref:System.Windows.Input.RoutedCommand> pour déterminer si la commande peut ou ne peut pas s’exécuter sur la cible de commande actuelle.  Si <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> a la valeur `false` à partir d’un gestionnaire d’événements, la source de commande se désactivera.  Par exemple, si un <xref:System.Windows.Controls.MenuItem> agit comme la source de commande pour une commande et la commande ne peut pas s’exécuter sur la cible de commande actuelle, puis la <xref:System.Windows.Controls.MenuItem> se grise.  
  
 Le <xref:System.Windows.Input.ICommand.CanExecuteChanged> événement avertit une source de commande lorsque la capacité d’une commande à exécuter peut ont changé.  
  
   
  
## Examples  
 L’exemple suivant crée un <xref:System.Windows.Input.CanExecuteRoutedEventHandler> qui retourne `true` uniquement si la cible de commande est un contrôle.  Tout d’abord, <xref:System.Windows.RoutedEventArgs.Source%2A> est casté en un <xref:System.Windows.Controls.Control>.  Si <xref:System.Windows.RoutedEventArgs.Source%2A> est un <xref:System.Windows.Controls.Control>, <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> a la valeur `true`; sinon, elle est définie sur `false`.  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewCanExecute](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewcanexecute)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewCanExecute](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewcanexecute)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" />
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.CommandManager" />
  </Docs>
  <Members>
    <Member MemberName="CanExecute">
      <MemberSignature Language="C#" Value="public bool CanExecute { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanExecute" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute" />
      <MemberSignature Language="VB.NET" Value="Public Property CanExecute As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanExecute { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CanExecute : bool with get, set" Usage="System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui indique si le <see cref="T:System.Windows.Input.RoutedCommand" /> associé à cet événement peut être exécuté sur la cible de commande.</summary>
        <value><see langword="true" /> si l'événement peut être exécuté sur la cible de commande ; sinon, <see langword="false" />.  La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Plusieurs sources de commande, telles que <xref:System.Windows.Controls.MenuItem> et <xref:System.Windows.Controls.Button>, sont désactivées lorsque <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> est `false` et activées lorsque la <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> est `true`.  
  
   
  
## Examples  
 L’exemple suivant crée un <xref:System.Windows.Input.CanExecuteRoutedEventHandler> qui retourne true uniquement si la cible de commande est un contrôle.  Première le <xref:System.Windows.RoutedEventArgs.Source%2A> données d’événement sont castées en un <xref:System.Windows.Controls.Control>.  S’il s’agit une <xref:System.Windows.Controls.Control>, <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> a la valeur `true`; sinon, elle est définie sur `false`.  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewCanExecute](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewcanexecute)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewCanExecute](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewcanexecute)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="Command">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ICommand Command { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.ICommand Command" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.CanExecuteRoutedEventArgs.Command" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Command As ICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::ICommand ^ Command { System::Windows::Input::ICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Command : System.Windows.Input.ICommand" Usage="System.Windows.Input.CanExecuteRoutedEventArgs.Command" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la commande associée à cet événement.</summary>
        <value>La commande. À moins que la commande soit une commande personnalisée, il s'agit en général d'un <see cref="T:System.Windows.Input.RoutedCommand" />. Il n'y a pas de valeur par défaut.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour plus d’informations sur l’exécution de commandes, consultez le [vue d’ensemble des commandes](~/docs/framework/wpf/advanced/commanding-overview.md).  
  
   
  
## Examples  
 L’exemple suivant crée un <xref:System.Windows.Input.CanExecuteRoutedEventHandler> qui gère plusieurs commandes.  Si le <xref:System.Windows.Input.CanExecuteRoutedEventArgs.Command%2A> propriété est égale à la <xref:System.Windows.Input.MediaCommands.Play%2A> commande et la méthode `IsPlaying` retourne `false`, <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> a la valeur `true`; sinon, <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> est défini sur `false`.  Si le <xref:System.Windows.Input.CanExecuteRoutedEventArgs.Command%2A> propriété est égale à la <xref:System.Windows.Input.MediaCommands.Stop%2A> commande et la méthode `IsPlaying` retourne `true`, <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> a la valeur `true`; sinon, <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> est défini sur `false`.  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewMultipleCanExecute](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewmultiplecanexecute)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewMultipleCanExecute](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewmultiplecanexecute)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="ContinueRouting">
      <MemberSignature Language="C#" Value="public bool ContinueRouting { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ContinueRouting" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.CanExecuteRoutedEventArgs.ContinueRouting" />
      <MemberSignature Language="VB.NET" Value="Public Property ContinueRouting As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ContinueRouting { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ContinueRouting : bool with get, set" Usage="System.Windows.Input.CanExecuteRoutedEventArgs.ContinueRouting" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Détermine si l’événement routé d’entrée qui a appelé la commande doit continuer à parcourir l’arborescence d’éléments.</summary>
        <value><see langword="true" /> si l’événement routé doit continuer à parcourir l’arborescence des éléments ; sinon, <see langword="false" />.   La valeur par défaut est <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeEventHandler">
      <MemberSignature Language="C#" Value="protected override void InvokeEventHandler (Delegate genericHandler, object target);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void InvokeEventHandler(class System.Delegate genericHandler, object target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CanExecuteRoutedEventArgs.InvokeEventHandler(System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub InvokeEventHandler (genericHandler As Delegate, target As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void InvokeEventHandler(Delegate ^ genericHandler, System::Object ^ target);" />
      <MemberSignature Language="F#" Value="override this.InvokeEventHandler : Delegate * obj -&gt; unit" Usage="canExecuteRoutedEventArgs.InvokeEventHandler (genericHandler, target)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="genericHandler" Type="System.Delegate" />
        <Parameter Name="target" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="genericHandler">To be added.</param>
        <param name="target">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parameter">
      <MemberSignature Language="C#" Value="public object Parameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Parameter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.CanExecuteRoutedEventArgs.Parameter" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parameter As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Parameter { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Parameter : obj" Usage="System.Windows.Input.CanExecuteRoutedEventArgs.Parameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient les données spécifiques à la commande.</summary>
        <value>Données de commande.  La valeur par défaut est <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le paramètre de commande est utilisé pour passer des informations spécifiques à la commande lorsqu’elle est exécutée.  Le type de données est défini par la commande.  
  
 <xref:System.Windows.Input.CanExecuteRoutedEventArgs.Parameter%2A> peut être `null`. De nombreuses commandes ne pas traiter ou attendent des paramètres de commande.  
  
   
  
## Examples  
 L’exemple suivant s’affiche pour utiliser un <xref:System.Windows.Controls.Button> comme source de commande pour une commande personnalisée.  Le <xref:System.Windows.Input.ICommandSource.Command%2A> propriété du <xref:System.Windows.Controls.Button> est défini sur personnalisé <xref:System.Windows.Input.RoutedCommand> appelé `customComand` et le <xref:System.Windows.Input.ICommandSource.CommandParameter%2A> est utilisé pour transmettre la valeur de la <xref:System.Windows.Controls.Primitives.RangeBase.Value%2A> propriété d’un <xref:System.Windows.Controls.Slider> contrôle.  Ceci est réalisé à l’aide de la liaison de données pour lier le <xref:System.Windows.Input.ICommandSource.CommandParameter%2A> à la <xref:System.Windows.Controls.Primitives.RangeBase.Value%2A> propriété.  Le convertisseur dans l’expression de liaison est personnalisé <xref:System.Windows.Data.IValueConverter> qui convertit <xref:System.Windows.Controls.Primitives.RangeBase.Value%2A> dans un <xref:System.Int32> avant de pouvoir lier le <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.  
  
 [!code-xaml[invalidaterequerywithdispatchertimer#InvalidateSampleSliderCommandParameter](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml#invalidatesampleslidercommandparameter)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
  </Members>
</Type>