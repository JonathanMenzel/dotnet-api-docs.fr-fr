<Type Name="CommandBinding" FullName="System.Windows.Input.CommandBinding">
  <Metadata><Meta Name="ms.openlocfilehash" Value="73971c0ddba6c7d04667419167297e08af183edc" /><Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="10/04/2018" /><Meta Name="ms.locfileid" Value="48720789" /></Metadata><TypeSignature Language="C#" Value="public class CommandBinding" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CommandBinding extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.CommandBinding" />
  <TypeSignature Language="VB.NET" Value="Public Class CommandBinding" />
  <TypeSignature Language="C++ CLI" Value="public ref class CommandBinding" />
  <TypeSignature Language="F#" Value="type CommandBinding = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Lie un <see cref="T:System.Windows.Input.RoutedCommand" /> aux gestionnaires d’événements qui implémentent la commande.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.Windows.Input.CommandBinding> associe une commande avec le <xref:System.Windows.Input.CommandBinding.PreviewExecuted> / <xref:System.Windows.Input.CommandBinding.Executed> et <xref:System.Windows.Input.CommandBinding.PreviewCanExecute> / <xref:System.Windows.Input.CommandBinding.CanExecute> les événements qui implémentent et déterminent l’état de la commande.  
  
 Lorsque le <xref:System.Windows.Input.RoutedCommand.Execute%2A> ou <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> méthode d’un <xref:System.Windows.Input.RoutedCommand> est appelée, le <xref:System.Windows.Input.CommandBinding.PreviewExecuted> / <xref:System.Windows.Input.CommandBinding.Executed> ou le <xref:System.Windows.Input.CommandBinding.PreviewCanExecute> / <xref:System.Windows.Input.CommandBinding.CanExecute> événements sont déclenchés sur la cible de commande.  Si la cible de commande a un <xref:System.Windows.Input.CommandBinding> pour la commande, les gestionnaires appropriés sont appelés.  Si la cible de commande n’a pas un <xref:System.Windows.Input.CommandBinding> pour la commande, les événements sont routés via l’arborescence d’éléments jusqu'à ce qu’un élément qui a un <xref:System.Windows.Input.CommandBinding> est trouvé.  
  
 Un <xref:System.Windows.Input.CommandBinding> présente peu d’utilité avec un <xref:System.Windows.Input.ICommand> qui n’est pas un <xref:System.Windows.Input.RoutedCommand>.  Il s’agit, car un <xref:System.Windows.Input.CommandBinding> lie la commande pour le <xref:System.Windows.Input.ExecutedRoutedEventHandler> et le <xref:System.Windows.Input.CanExecuteRoutedEventHandler> qui écoutent le <xref:System.Windows.Input.CommandManager.Executed> et <xref:System.Windows.Input.CommandManager.CanExecute> les événements qui sont routés déclenché lorsque le <xref:System.Windows.Input.RoutedCommand.Execute%2A> et <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> procédé de la <xref:System.Windows.Input.RoutedCommand>sont appelées.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.RoutedCommand" />
    <altmember cref="T:System.Windows.Input.InputBinding" />
    <altmember cref="T:System.Windows.Input.CommandManager" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Input.CommandBinding" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CommandBinding ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CommandBinding.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CommandBinding();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Input.CommandBinding" />.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CommandBinding (System.Windows.Input.ICommand command);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Input.ICommand command) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (command As ICommand)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CommandBinding(System::Windows::Input::ICommand ^ command);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.CommandBinding : System.Windows.Input.ICommand -&gt; System.Windows.Input.CommandBinding" Usage="new System.Windows.Input.CommandBinding command" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="command" Type="System.Windows.Input.ICommand" />
      </Parameters>
      <Docs>
        <param name="command">Commande sur laquelle baser la nouvelle instance de <see cref="T:System.Windows.Input.RoutedCommand" />.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Input.CommandBinding" /> à l'aide du <see cref="T:System.Windows.Input.ICommand" /> spécifié.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CommandBinding (System.Windows.Input.ICommand command, System.Windows.Input.ExecutedRoutedEventHandler executed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Input.ICommand command, class System.Windows.Input.ExecutedRoutedEventHandler executed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (command As ICommand, executed As ExecutedRoutedEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CommandBinding(System::Windows::Input::ICommand ^ command, System::Windows::Input::ExecutedRoutedEventHandler ^ executed);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.CommandBinding : System.Windows.Input.ICommand * System.Windows.Input.ExecutedRoutedEventHandler -&gt; System.Windows.Input.CommandBinding" Usage="new System.Windows.Input.CommandBinding (command, executed)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="command" Type="System.Windows.Input.ICommand" />
        <Parameter Name="executed" Type="System.Windows.Input.ExecutedRoutedEventHandler" />
      </Parameters>
      <Docs>
        <param name="command">Commande sur laquelle baser la nouvelle instance de <see cref="T:System.Windows.Input.RoutedCommand" />.</param>
        <param name="executed">Gestionnaire de l'événement <see cref="E:System.Windows.Input.CommandBinding.Executed" /> sur la nouvelle instance de <see cref="T:System.Windows.Input.RoutedCommand" />.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Input.CommandBinding" /> à l'aide de l'interface <see cref="T:System.Windows.Input.ICommand" /> et du gestionnaire d'événements <see cref="E:System.Windows.Input.CommandBinding.Executed" /> spécifiés.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CommandBinding (System.Windows.Input.ICommand command, System.Windows.Input.ExecutedRoutedEventHandler executed, System.Windows.Input.CanExecuteRoutedEventHandler canExecute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Input.ICommand command, class System.Windows.Input.ExecutedRoutedEventHandler executed, class System.Windows.Input.CanExecuteRoutedEventHandler canExecute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler,System.Windows.Input.CanExecuteRoutedEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (command As ICommand, executed As ExecutedRoutedEventHandler, canExecute As CanExecuteRoutedEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CommandBinding(System::Windows::Input::ICommand ^ command, System::Windows::Input::ExecutedRoutedEventHandler ^ executed, System::Windows::Input::CanExecuteRoutedEventHandler ^ canExecute);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.CommandBinding : System.Windows.Input.ICommand * System.Windows.Input.ExecutedRoutedEventHandler * System.Windows.Input.CanExecuteRoutedEventHandler -&gt; System.Windows.Input.CommandBinding" Usage="new System.Windows.Input.CommandBinding (command, executed, canExecute)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="command" Type="System.Windows.Input.ICommand" />
        <Parameter Name="executed" Type="System.Windows.Input.ExecutedRoutedEventHandler" />
        <Parameter Name="canExecute" Type="System.Windows.Input.CanExecuteRoutedEventHandler" />
      </Parameters>
      <Docs>
        <param name="command">Commande sur laquelle baser la nouvelle instance de <see cref="T:System.Windows.Input.RoutedCommand" />.</param>
        <param name="executed">Gestionnaire de l'événement <see cref="E:System.Windows.Input.CommandBinding.Executed" /> sur la nouvelle instance de <see cref="T:System.Windows.Input.RoutedCommand" />.</param>
        <param name="canExecute">Gestionnaire de l'événement <see cref="E:System.Windows.Input.CommandBinding.CanExecute" /> sur la nouvelle instance de <see cref="T:System.Windows.Input.RoutedCommand" />.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Input.CommandBinding" /> à l'aide de l'interface <see cref="T:System.Windows.Input.ICommand" /> et des gestionnaires d'événements <see cref="E:System.Windows.Input.CommandBinding.Executed" /> et <see cref="E:System.Windows.Input.CommandBinding.CanExecute" /> spécifiés.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanExecute">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.CanExecuteRoutedEventHandler CanExecute;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.CanExecuteRoutedEventHandler CanExecute" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.CommandBinding.CanExecute" />
      <MemberSignature Language="VB.NET" Value="Public Event CanExecute As CanExecuteRoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::CanExecuteRoutedEventHandler ^ CanExecute;" />
      <MemberSignature Language="F#" Value="member this.CanExecute : System.Windows.Input.CanExecuteRoutedEventHandler " Usage="member this.CanExecute : System.Windows.Input.CanExecuteRoutedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.CanExecuteRoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit quand la commande associée à ce <see cref="T:System.Windows.Input.CommandBinding" /> lance une vérification pour déterminer si la commande peut être exécutée sur la cible de commande.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsque le <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> méthode sur un <xref:System.Windows.Input.RoutedCommand> est appelée, le <xref:System.Windows.Input.CommandBinding.PreviewCanExecute> événement est déclenché sur la cible de commande.  Si l’événement n’est pas gérée, le <xref:System.Windows.Input.CommandBinding.CanExecute> événement est déclenché.  Si la cible de commande a un <xref:System.Windows.Input.CommandBinding> pour la commande, le <xref:System.Windows.Input.CommandBinding.CanExecute> gestionnaire correspondant <xref:System.Windows.Input.CommandBinding> est appelée.  Si la cible de commande n’a pas un <xref:System.Windows.Input.CommandBinding> pour la commande, le <xref:System.Windows.Input.CommandBinding.CanExecute> événement se propage jusqu'à l’arborescence d’éléments recherche un élément qui a un <xref:System.Windows.Input.CommandBinding> associé à la commande.  
  
<a name="routedEventInfo_CanExecute"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.Input.CommandManager.CanExecuteEvent>|  
|Stratégie de routage|Propagation|  
|délégué|<xref:System.Windows.Input.CanExecuteRoutedEventHandler>|  
  
-   L’événement de tunneling correspondant est <xref:System.Windows.Input.CommandBinding.PreviewCanExecute>.  
  
   
  
## Examples  
 L’exemple suivant crée un <xref:System.Windows.Input.CommandBinding> qui mappe un <xref:System.Windows.Input.ExecutedRoutedEventHandler> et un <xref:System.Windows.Input.CanExecuteRoutedEventArgs> gestionnaire à la <xref:System.Windows.Input.ApplicationCommands.Open%2A> commande.  
  
 [!code-xaml[commandwithhandler#CommandHandlerCommandBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml#commandhandlercommandbinding)]  
  
 [!code-csharp[CommandHandlerProcedural#CommandHandlerBindingInit](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandHandlerProcedural/CSharp/Window1.xaml.cs#commandhandlerbindinginit)]
 [!code-vb[CommandHandlerProcedural#CommandHandlerBindingInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandHandlerProcedural/visualbasic/window1.xaml.vb#commandhandlerbindinginit)]  
  
 Le suivant le <xref:System.Windows.Input.CanExecuteRoutedEventHandler> les ensembles <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> à `true`.  
  
 [!code-csharp[commandwithhandler#CommandHandlerCanExecuteHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml.cs#commandhandlercanexecutehandler)]
 [!code-vb[commandwithhandler#CommandHandlerCanExecuteHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/commandWithHandler/VisualBasic/Window1.xaml.vb#commandhandlercanexecutehandler)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="Command">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ICommand Command { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.ICommand Command" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.CommandBinding.Command" />
      <MemberSignature Language="VB.NET" Value="Public Property Command As ICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::ICommand ^ Command { System::Windows::Input::ICommand ^ get(); void set(System::Windows::Input::ICommand ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Command : System.Windows.Input.ICommand with get, set" Usage="System.Windows.Input.CommandBinding.Command" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit l'objet <see cref="T:System.Windows.Input.ICommand" /> associé à <see cref="T:System.Windows.Input.CommandBinding" />.</summary>
        <value>Commande associée à cette liaison.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple suivant crée un <xref:System.Windows.Input.CommandBinding> qui mappe un <xref:System.Windows.Input.ExecutedRoutedEventHandler> et un <xref:System.Windows.Input.CanExecuteRoutedEventArgs> gestionnaire à la <xref:System.Windows.Input.ApplicationCommands.Open%2A> commande.  
  
 [!code-xaml[commandWithHandler#CommandHandlerCommandBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml#commandhandlercommandbinding)]  
  
 [!code-csharp[commandhandlerprocedural#CommandHandlerBindingInit](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandHandlerProcedural/CSharp/Window1.xaml.cs#commandhandlerbindinginit)]
 [!code-vb[commandhandlerprocedural#CommandHandlerBindingInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandHandlerProcedural/visualbasic/window1.xaml.vb#commandhandlerbindinginit)]  
  
 Le suivant le <xref:System.Windows.Input.CanExecuteRoutedEventHandler> les ensembles <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> à `true`.  
  
 [!code-csharp[commandWithHandler#CommandHandlerCanExecuteHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml.cs#commandhandlercanexecutehandler)]
 [!code-vb[commandWithHandler#CommandHandlerCanExecuteHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/commandWithHandler/VisualBasic/Window1.xaml.vb#commandhandlercanexecutehandler)]  
  
 Le suivant le <xref:System.Windows.Input.ExecutedRoutedEventHandler> qui crée un <xref:System.Windows.MessageBox> lorsque la commande est exécutée.  
  
 [!code-csharp[commandWithHandler#CommandHandlerExecutedHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml.cs#commandhandlerexecutedhandler)]
 [!code-vb[commandWithHandler#CommandHandlerExecutedHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/commandWithHandler/VisualBasic/Window1.xaml.vb#commandhandlerexecutedhandler)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="Executed">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.ExecutedRoutedEventHandler Executed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.ExecutedRoutedEventHandler Executed" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.CommandBinding.Executed" />
      <MemberSignature Language="VB.NET" Value="Public Event Executed As ExecutedRoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::ExecutedRoutedEventHandler ^ Executed;" />
      <MemberSignature Language="F#" Value="member this.Executed : System.Windows.Input.ExecutedRoutedEventHandler " Usage="member this.Executed : System.Windows.Input.ExecutedRoutedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ExecutedRoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit quand la commande associée à ce <see cref="T:System.Windows.Input.CommandBinding" /> s’exécute.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quand un <xref:System.Windows.Input.RoutedCommand> s’exécute, il déclenche le <xref:System.Windows.Input.CommandBinding.PreviewExecuted> événement sur la cible de commande.  Si le <xref:System.Windows.Input.CommandBinding.PreviewExecuted> événement n’est pas géré, le <xref:System.Windows.Input.CommandBinding.Executed> événement est déclenché sur la cible de commande.  Si la cible de commande a un <xref:System.Windows.Input.CommandBinding> pour la commande spécifique, le <xref:System.Windows.Input.CommandBinding.Executed> gestionnaire correspondant <xref:System.Windows.Input.CommandBinding> est appelée.  Si la cible de commande n’a pas un <xref:System.Windows.Input.CommandBinding> pour cette commande spécifique le <xref:System.Windows.Input.CommandBinding.Executed> événement se propage jusqu'à l’arborescence d’éléments recherche un élément qui a un <xref:System.Windows.Input.CommandBinding> associé à la commande.  Si un <xref:System.Windows.Input.CommandBinding> est introuvable, la commande n’est pas gérée.  
  
<a name="routedEventInfo_Executed"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.Input.CommandManager.ExecutedEvent>|  
|Stratégie de routage|Propagation|  
|délégué|<xref:System.Windows.Input.ExecutedRoutedEventHandler>|  
  
-   L’événement de tunneling correspondant est <xref:System.Windows.Input.CommandBinding.PreviewExecuted>.  
  
   
  
## Examples  
 L’exemple suivant crée un <xref:System.Windows.Input.CommandBinding> qui mappe un <xref:System.Windows.Input.ExecutedRoutedEventHandler> et un <xref:System.Windows.Input.CanExecuteRoutedEventArgs> gestionnaire à la <xref:System.Windows.Input.ApplicationCommands.Open%2A> commande.  
  
 [!code-xaml[commandwithhandler#CommandHandlerCommandBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml#commandhandlercommandbinding)]  
  
 [!code-csharp[CommandHandlerProcedural#CommandHandlerBindingInit](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandHandlerProcedural/CSharp/Window1.xaml.cs#commandhandlerbindinginit)]
 [!code-vb[CommandHandlerProcedural#CommandHandlerBindingInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandHandlerProcedural/visualbasic/window1.xaml.vb#commandhandlerbindinginit)]  
  
 Le suivant le <xref:System.Windows.Input.ExecutedRoutedEventHandler> qui crée un <xref:System.Windows.MessageBox> lorsque la commande est exécutée.  
  
 [!code-csharp[commandWithHandler#CommandHandlerExecutedHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml.cs#commandhandlerexecutedhandler)]
 [!code-vb[commandWithHandler#CommandHandlerExecutedHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/commandWithHandler/VisualBasic/Window1.xaml.vb#commandhandlerexecutedhandler)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="PreviewCanExecute">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.CanExecuteRoutedEventHandler PreviewCanExecute;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.CanExecuteRoutedEventHandler PreviewCanExecute" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.CommandBinding.PreviewCanExecute" />
      <MemberSignature Language="VB.NET" Value="Public Event PreviewCanExecute As CanExecuteRoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::CanExecuteRoutedEventHandler ^ PreviewCanExecute;" />
      <MemberSignature Language="F#" Value="member this.PreviewCanExecute : System.Windows.Input.CanExecuteRoutedEventHandler " Usage="member this.PreviewCanExecute : System.Windows.Input.CanExecuteRoutedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.CanExecuteRoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque la commande associée à ce <see cref="T:System.Windows.Input.CommandBinding" /> lance un contrôle pour déterminer si la commande peut être exécutée sur la cible de la commande actuelle.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsque le <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> méthode sur un <xref:System.Windows.Input.RoutedCommand> est appelée, le <xref:System.Windows.Input.CommandBinding.PreviewCanExecute> événement est déclenché sur la cible de commande si la cible de commande a un <xref:System.Windows.Input.CommandBinding> pour la commande. Le <xref:System.Windows.Input.CommandBinding.CanExecute> gestionnaire correspondant <xref:System.Windows.Input.CommandBinding> est appelée.  Si la cible de commande n’a pas un <xref:System.Windows.Input.CommandBinding> pour la commande, le <xref:System.Windows.Input.CommandBinding.CanExecute> événement se propage jusqu'à l’arborescence d’éléments recherche un élément qui a un <xref:System.Windows.Input.CommandBinding> associé à la commande.  Si l’événement n’est pas gérée, le <xref:System.Windows.Input.CommandBinding.CanExecute> événement est déclenché.  
  
<a name="routedEventInfo_PreviewCanExecute"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.Input.CommandManager.PreviewCanExecuteEvent>|  
|Stratégie de routage|Le tunneling|  
|délégué|<xref:System.Windows.Input.CanExecuteRoutedEventHandler>|  
  
-   L’événement de propagation correspondante est <xref:System.Windows.Input.CommandBinding.CanExecute>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="PreviewExecuted">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.ExecutedRoutedEventHandler PreviewExecuted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.ExecutedRoutedEventHandler PreviewExecuted" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.CommandBinding.PreviewExecuted" />
      <MemberSignature Language="VB.NET" Value="Public Event PreviewExecuted As ExecutedRoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::ExecutedRoutedEventHandler ^ PreviewExecuted;" />
      <MemberSignature Language="F#" Value="member this.PreviewExecuted : System.Windows.Input.ExecutedRoutedEventHandler " Usage="member this.PreviewExecuted : System.Windows.Input.ExecutedRoutedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ExecutedRoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit quand la commande associée à ce <see cref="T:System.Windows.Input.CommandBinding" /> s’exécute.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quand un <xref:System.Windows.Input.RoutedCommand> s’exécute, il déclenche le <xref:System.Windows.Input.CommandBinding.PreviewExecuted> événement sur la cible de commande.  Si la cible de commande a un <xref:System.Windows.Input.CommandBinding> pour la commande le <xref:System.Windows.Input.CommandBinding.PreviewExecuted> gestionnaire correspondant <xref:System.Windows.Input.CommandBinding> est appelée.  Si la cible de commande n’a pas un <xref:System.Windows.Input.CommandBinding> pour la commande le <xref:System.Windows.Input.CommandBinding.PreviewExecuted> tunnel de l’événement dans l’arborescence d’éléments recherche un élément qui a un <xref:System.Windows.Input.CommandBinding> associé à la commande.  Si l’événement preview n’est pas gérée, le <xref:System.Windows.Input.CommandBinding.Executed> événement est déclenché sur la cible de commande.  
  
<a name="routedEventInfo_PreviewExecuted"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.Input.CommandManager.PreviewExecutedEvent>|  
|Stratégie de routage|Le tunneling|  
|délégué|<xref:System.Windows.Input.ExecutedRoutedEventHandler>|  
  
-   L’événement de propagation correspondante est <xref:System.Windows.Input.CommandBinding.Executed>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
  </Members>
</Type>