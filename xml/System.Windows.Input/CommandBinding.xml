<Type Name="CommandBinding" FullName="System.Windows.Input.CommandBinding">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9cd6cc1db8a9294825364baefa27d3832a998bdc" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36508342" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class CommandBinding" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CommandBinding extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.CommandBinding" />
  <TypeSignature Language="VB.NET" Value="Public Class CommandBinding" />
  <TypeSignature Language="C++ CLI" Value="public ref class CommandBinding" />
  <TypeSignature Language="F#" Value="type CommandBinding = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="c2b0d-101">Lie un <see cref="T:System.Windows.Input.RoutedCommand" /> aux gestionnaires d’événements qui implémentent la commande.</span>
      <span class="sxs-lookup">
        <span data-stu-id="c2b0d-101">Binds a <see cref="T:System.Windows.Input.RoutedCommand" /> to the event handlers that implement the command.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2b0d-102">A <xref:System.Windows.Input.CommandBinding> associe une commande avec le <xref:System.Windows.Input.CommandBinding.PreviewExecuted> / <xref:System.Windows.Input.CommandBinding.Executed> et <xref:System.Windows.Input.CommandBinding.PreviewCanExecute> / <xref:System.Windows.Input.CommandBinding.CanExecute> les événements qui implémentent et déterminent l’état de la commande.</span><span class="sxs-lookup"><span data-stu-id="c2b0d-102">A <xref:System.Windows.Input.CommandBinding> associates a command with the <xref:System.Windows.Input.CommandBinding.PreviewExecuted>/<xref:System.Windows.Input.CommandBinding.Executed> and <xref:System.Windows.Input.CommandBinding.PreviewCanExecute>/<xref:System.Windows.Input.CommandBinding.CanExecute> events which implement and determine the status of the command.</span></span>  
  
 <span data-ttu-id="c2b0d-103">Lorsque le <xref:System.Windows.Input.RoutedCommand.Execute%2A> ou <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> méthode d’un <xref:System.Windows.Input.RoutedCommand> est appelée, le <xref:System.Windows.Input.CommandBinding.PreviewExecuted> / <xref:System.Windows.Input.CommandBinding.Executed> ou <xref:System.Windows.Input.CommandBinding.PreviewCanExecute> / <xref:System.Windows.Input.CommandBinding.CanExecute> les événements sont déclenchés sur la cible de commande.</span><span class="sxs-lookup"><span data-stu-id="c2b0d-103">When the <xref:System.Windows.Input.RoutedCommand.Execute%2A> or <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method of a <xref:System.Windows.Input.RoutedCommand> is called, the <xref:System.Windows.Input.CommandBinding.PreviewExecuted>/<xref:System.Windows.Input.CommandBinding.Executed> or the <xref:System.Windows.Input.CommandBinding.PreviewCanExecute>/<xref:System.Windows.Input.CommandBinding.CanExecute> events are raised on the command target.</span></span>  <span data-ttu-id="c2b0d-104">Si la cible de commande possède un <xref:System.Windows.Input.CommandBinding> pour la commande, les gestionnaires appropriés sont appelés.</span><span class="sxs-lookup"><span data-stu-id="c2b0d-104">If the command target has a <xref:System.Windows.Input.CommandBinding> for the command, the appropriate handlers are called.</span></span>  <span data-ttu-id="c2b0d-105">Si la cible de commande n’a pas un <xref:System.Windows.Input.CommandBinding> pour la commande, les événements sont routés via l’arborescence d’éléments jusqu'à ce qu’un élément qui a un <xref:System.Windows.Input.CommandBinding> est trouvé.</span><span class="sxs-lookup"><span data-stu-id="c2b0d-105">If the command target does not have a <xref:System.Windows.Input.CommandBinding> for the command, the events are routed through the element tree until an element that has a <xref:System.Windows.Input.CommandBinding> is found.</span></span>  
  
 <span data-ttu-id="c2b0d-106">A <xref:System.Windows.Input.CommandBinding> a utilisation limitée avec un <xref:System.Windows.Input.ICommand> qui n’est pas un <xref:System.Windows.Input.RoutedCommand>.</span><span class="sxs-lookup"><span data-stu-id="c2b0d-106">A <xref:System.Windows.Input.CommandBinding> has limited use with an <xref:System.Windows.Input.ICommand> that is not a <xref:System.Windows.Input.RoutedCommand>.</span></span>  <span data-ttu-id="c2b0d-107">C’est parce qu’une <xref:System.Windows.Input.CommandBinding> lie la commande le <xref:System.Windows.Input.ExecutedRoutedEventHandler> et le <xref:System.Windows.Input.CanExecuteRoutedEventHandler> qui écoutent la <xref:System.Windows.Input.CommandManager.Executed> et <xref:System.Windows.Input.CommandManager.CanExecute> les événements qui sont routés déclenché lorsque le <xref:System.Windows.Input.RoutedCommand.Execute%2A> et <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> méthode de la <xref:System.Windows.Input.RoutedCommand>sont appelées.</span><span class="sxs-lookup"><span data-stu-id="c2b0d-107">This is because a <xref:System.Windows.Input.CommandBinding> binds the command to the <xref:System.Windows.Input.ExecutedRoutedEventHandler> and the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> which listen to the <xref:System.Windows.Input.CommandManager.Executed> and <xref:System.Windows.Input.CommandManager.CanExecute> routed events which are raised when the <xref:System.Windows.Input.RoutedCommand.Execute%2A> and <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method of the <xref:System.Windows.Input.RoutedCommand> are called.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.RoutedCommand" />
    <altmember cref="T:System.Windows.Input.InputBinding" />
    <altmember cref="T:System.Windows.Input.CommandManager" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c2b0d-108">Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Input.CommandBinding" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c2b0d-108">Initializes a new instance of the <see cref="T:System.Windows.Input.CommandBinding" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CommandBinding ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CommandBinding.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CommandBinding();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c2b0d-109">Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Input.CommandBinding" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c2b0d-109">Initializes a new instance of the <see cref="T:System.Windows.Input.CommandBinding" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CommandBinding (System.Windows.Input.ICommand command);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Input.ICommand command) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (command As ICommand)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CommandBinding(System::Windows::Input::ICommand ^ command);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.CommandBinding : System.Windows.Input.ICommand -&gt; System.Windows.Input.CommandBinding" Usage="new System.Windows.Input.CommandBinding command" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="command" Type="System.Windows.Input.ICommand" />
      </Parameters>
      <Docs>
        <param name="command">
          <span data-ttu-id="c2b0d-110">Commande sur laquelle baser la nouvelle instance de <see cref="T:System.Windows.Input.RoutedCommand" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c2b0d-110">The command to base the new <see cref="T:System.Windows.Input.RoutedCommand" /> on.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c2b0d-111">Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Input.CommandBinding" /> à l'aide du <see cref="T:System.Windows.Input.ICommand" /> spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c2b0d-111">Initializes a new instance of the <see cref="T:System.Windows.Input.CommandBinding" /> class by using the specified <see cref="T:System.Windows.Input.ICommand" />.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CommandBinding (System.Windows.Input.ICommand command, System.Windows.Input.ExecutedRoutedEventHandler executed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Input.ICommand command, class System.Windows.Input.ExecutedRoutedEventHandler executed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (command As ICommand, executed As ExecutedRoutedEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CommandBinding(System::Windows::Input::ICommand ^ command, System::Windows::Input::ExecutedRoutedEventHandler ^ executed);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.CommandBinding : System.Windows.Input.ICommand * System.Windows.Input.ExecutedRoutedEventHandler -&gt; System.Windows.Input.CommandBinding" Usage="new System.Windows.Input.CommandBinding (command, executed)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="command" Type="System.Windows.Input.ICommand" />
        <Parameter Name="executed" Type="System.Windows.Input.ExecutedRoutedEventHandler" />
      </Parameters>
      <Docs>
        <param name="command">
          <span data-ttu-id="c2b0d-112">Commande sur laquelle baser la nouvelle instance de <see cref="T:System.Windows.Input.RoutedCommand" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c2b0d-112">The command to base the new <see cref="T:System.Windows.Input.RoutedCommand" /> on.</span>
          </span>
        </param>
        <param name="executed">
          <span data-ttu-id="c2b0d-113">Gestionnaire de l'événement <see cref="E:System.Windows.Input.CommandBinding.Executed" /> sur la nouvelle instance de <see cref="T:System.Windows.Input.RoutedCommand" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c2b0d-113">The handler for the <see cref="E:System.Windows.Input.CommandBinding.Executed" /> event on the new <see cref="T:System.Windows.Input.RoutedCommand" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c2b0d-114">Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Input.CommandBinding" /> à l'aide de l'interface <see cref="T:System.Windows.Input.ICommand" /> et du gestionnaire d'événements <see cref="E:System.Windows.Input.CommandBinding.Executed" /> spécifiés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c2b0d-114">Initializes a new instance of the <see cref="T:System.Windows.Input.CommandBinding" /> class by using the specified <see cref="T:System.Windows.Input.ICommand" /> and the specified <see cref="E:System.Windows.Input.CommandBinding.Executed" /> event handler.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CommandBinding (System.Windows.Input.ICommand command, System.Windows.Input.ExecutedRoutedEventHandler executed, System.Windows.Input.CanExecuteRoutedEventHandler canExecute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Input.ICommand command, class System.Windows.Input.ExecutedRoutedEventHandler executed, class System.Windows.Input.CanExecuteRoutedEventHandler canExecute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler,System.Windows.Input.CanExecuteRoutedEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (command As ICommand, executed As ExecutedRoutedEventHandler, canExecute As CanExecuteRoutedEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CommandBinding(System::Windows::Input::ICommand ^ command, System::Windows::Input::ExecutedRoutedEventHandler ^ executed, System::Windows::Input::CanExecuteRoutedEventHandler ^ canExecute);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.CommandBinding : System.Windows.Input.ICommand * System.Windows.Input.ExecutedRoutedEventHandler * System.Windows.Input.CanExecuteRoutedEventHandler -&gt; System.Windows.Input.CommandBinding" Usage="new System.Windows.Input.CommandBinding (command, executed, canExecute)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="command" Type="System.Windows.Input.ICommand" />
        <Parameter Name="executed" Type="System.Windows.Input.ExecutedRoutedEventHandler" />
        <Parameter Name="canExecute" Type="System.Windows.Input.CanExecuteRoutedEventHandler" />
      </Parameters>
      <Docs>
        <param name="command">
          <span data-ttu-id="c2b0d-115">Commande sur laquelle baser la nouvelle instance de <see cref="T:System.Windows.Input.RoutedCommand" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c2b0d-115">The command to base the new <see cref="T:System.Windows.Input.RoutedCommand" /> on.</span>
          </span>
        </param>
        <param name="executed">
          <span data-ttu-id="c2b0d-116">Gestionnaire de l'événement <see cref="E:System.Windows.Input.CommandBinding.Executed" /> sur la nouvelle instance de <see cref="T:System.Windows.Input.RoutedCommand" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c2b0d-116">The handler for the <see cref="E:System.Windows.Input.CommandBinding.Executed" /> event on the new <see cref="T:System.Windows.Input.RoutedCommand" />.</span>
          </span>
        </param>
        <param name="canExecute">
          <span data-ttu-id="c2b0d-117">Gestionnaire de l'événement <see cref="E:System.Windows.Input.CommandBinding.CanExecute" /> sur la nouvelle instance de <see cref="T:System.Windows.Input.RoutedCommand" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c2b0d-117">The handler for the <see cref="E:System.Windows.Input.CommandBinding.CanExecute" /> event on the new <see cref="T:System.Windows.Input.RoutedCommand" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c2b0d-118">Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Input.CommandBinding" /> à l'aide de l'interface <see cref="T:System.Windows.Input.ICommand" /> et des gestionnaires d'événements <see cref="E:System.Windows.Input.CommandBinding.Executed" /> et <see cref="E:System.Windows.Input.CommandBinding.CanExecute" /> spécifiés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c2b0d-118">Initializes a new instance of the <see cref="T:System.Windows.Input.CommandBinding" /> class by using the specified <see cref="T:System.Windows.Input.ICommand" /> and the specified <see cref="E:System.Windows.Input.CommandBinding.Executed" /> and <see cref="E:System.Windows.Input.CommandBinding.CanExecute" /> event handlers.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanExecute">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.CanExecuteRoutedEventHandler CanExecute;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.CanExecuteRoutedEventHandler CanExecute" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.CommandBinding.CanExecute" />
      <MemberSignature Language="VB.NET" Value="Public Event CanExecute As CanExecuteRoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::CanExecuteRoutedEventHandler ^ CanExecute;" />
      <MemberSignature Language="F#" Value="member this.CanExecute : System.Windows.Input.CanExecuteRoutedEventHandler " Usage="member this.CanExecute : System.Windows.Input.CanExecuteRoutedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.CanExecuteRoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c2b0d-119">Se produit quand la commande associée à ce <see cref="T:System.Windows.Input.CommandBinding" /> lance une vérification pour déterminer si la commande peut être exécutée sur la cible de commande.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c2b0d-119">Occurs when the command associated with this <see cref="T:System.Windows.Input.CommandBinding" /> initiates a check to determine whether the command can be executed on the command target.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2b0d-120">Lorsque le <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> méthode sur un <xref:System.Windows.Input.RoutedCommand> est appelée, le <xref:System.Windows.Input.CommandBinding.PreviewCanExecute> événement est déclenché sur la cible de commande.</span><span class="sxs-lookup"><span data-stu-id="c2b0d-120">When the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method on a <xref:System.Windows.Input.RoutedCommand> is called, the <xref:System.Windows.Input.CommandBinding.PreviewCanExecute> event is raised on the command target.</span></span>  <span data-ttu-id="c2b0d-121">Si l’événement n’est pas gérée, le <xref:System.Windows.Input.CommandBinding.CanExecute> événement est déclenché.</span><span class="sxs-lookup"><span data-stu-id="c2b0d-121">If the event is not handled, the <xref:System.Windows.Input.CommandBinding.CanExecute> event is raised.</span></span>  <span data-ttu-id="c2b0d-122">Si la cible de commande possède un <xref:System.Windows.Input.CommandBinding> pour la commande, le <xref:System.Windows.Input.CommandBinding.CanExecute> gestionnaire pour que <xref:System.Windows.Input.CommandBinding> est appelée.</span><span class="sxs-lookup"><span data-stu-id="c2b0d-122">If the command target has a <xref:System.Windows.Input.CommandBinding> for the command, the <xref:System.Windows.Input.CommandBinding.CanExecute> handler for that <xref:System.Windows.Input.CommandBinding> is called.</span></span>  <span data-ttu-id="c2b0d-123">Si la cible de commande n’a pas un <xref:System.Windows.Input.CommandBinding> pour la commande, le <xref:System.Windows.Input.CommandBinding.CanExecute> événement se propage vers le haut l’arborescence d’éléments recherche un élément qui a un <xref:System.Windows.Input.CommandBinding> associé à la commande.</span><span class="sxs-lookup"><span data-stu-id="c2b0d-123">If the command target does not have a <xref:System.Windows.Input.CommandBinding> for the command, the <xref:System.Windows.Input.CommandBinding.CanExecute> event bubbles up the element tree searching for an element that has a <xref:System.Windows.Input.CommandBinding> associated with the command.</span></span>  
  
<a name="routedEventInfo_CanExecute"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="c2b0d-124">Informations sur les événements acheminés</span><span class="sxs-lookup"><span data-stu-id="c2b0d-124">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="c2b0d-125">Champ d’identificateur</span><span class="sxs-lookup"><span data-stu-id="c2b0d-125">Identifier field</span></span>|<xref:System.Windows.Input.CommandManager.CanExecuteEvent>|  
|<span data-ttu-id="c2b0d-126">Stratégie de routage</span><span class="sxs-lookup"><span data-stu-id="c2b0d-126">Routing strategy</span></span>|<span data-ttu-id="c2b0d-127">Propagation</span><span class="sxs-lookup"><span data-stu-id="c2b0d-127">Bubbling</span></span>|  
|<span data-ttu-id="c2b0d-128">délégué</span><span class="sxs-lookup"><span data-stu-id="c2b0d-128">Delegate</span></span>|<xref:System.Windows.Input.CanExecuteRoutedEventHandler>|  
  
-   <span data-ttu-id="c2b0d-129">L’événement de tunneling correspondant est <xref:System.Windows.Input.CommandBinding.PreviewCanExecute>.</span><span class="sxs-lookup"><span data-stu-id="c2b0d-129">The corresponding tunneling event is <xref:System.Windows.Input.CommandBinding.PreviewCanExecute>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c2b0d-130">L’exemple suivant crée un <xref:System.Windows.Input.CommandBinding> qui mappe un <xref:System.Windows.Input.ExecutedRoutedEventHandler> et un <xref:System.Windows.Input.CanExecuteRoutedEventArgs> gestionnaire à la <xref:System.Windows.Input.ApplicationCommands.Open%2A> commande.</span><span class="sxs-lookup"><span data-stu-id="c2b0d-130">The following example creates a <xref:System.Windows.Input.CommandBinding> that maps an <xref:System.Windows.Input.ExecutedRoutedEventHandler> and a <xref:System.Windows.Input.CanExecuteRoutedEventArgs> handler to the <xref:System.Windows.Input.ApplicationCommands.Open%2A> command.</span></span>  
  
 [!code-xaml[commandwithhandler#CommandHandlerCommandBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml#commandhandlercommandbinding)]  
  
 [!code-csharp[CommandHandlerProcedural#CommandHandlerBindingInit](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandHandlerProcedural/CSharp/Window1.xaml.cs#commandhandlerbindinginit)]
 [!code-vb[CommandHandlerProcedural#CommandHandlerBindingInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandHandlerProcedural/visualbasic/window1.xaml.vb#commandhandlerbindinginit)]  
  
 <span data-ttu-id="c2b0d-131">Le suivant le <xref:System.Windows.Input.CanExecuteRoutedEventHandler> quels jeux <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> à `true`.</span><span class="sxs-lookup"><span data-stu-id="c2b0d-131">The following shows the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> which sets <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> to `true`.</span></span>  
  
 [!code-csharp[commandwithhandler#CommandHandlerCanExecuteHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml.cs#commandhandlercanexecutehandler)]
 [!code-vb[commandwithhandler#CommandHandlerCanExecuteHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/commandWithHandler/VisualBasic/Window1.xaml.vb#commandhandlercanexecutehandler)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="Command">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ICommand Command { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.ICommand Command" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.CommandBinding.Command" />
      <MemberSignature Language="VB.NET" Value="Public Property Command As ICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::ICommand ^ Command { System::Windows::Input::ICommand ^ get(); void set(System::Windows::Input::ICommand ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Command : System.Windows.Input.ICommand with get, set" Usage="System.Windows.Input.CommandBinding.Command" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c2b0d-132">Obtient ou définit l'objet <see cref="T:System.Windows.Input.ICommand" /> associé à <see cref="T:System.Windows.Input.CommandBinding" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c2b0d-132">Gets or sets the <see cref="T:System.Windows.Input.ICommand" /> associated with this <see cref="T:System.Windows.Input.CommandBinding" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c2b0d-133">Commande associée à cette liaison.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c2b0d-133">The command associated with this binding.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c2b0d-134">L’exemple suivant crée un <xref:System.Windows.Input.CommandBinding> qui mappe un <xref:System.Windows.Input.ExecutedRoutedEventHandler> et un <xref:System.Windows.Input.CanExecuteRoutedEventArgs> gestionnaire à la <xref:System.Windows.Input.ApplicationCommands.Open%2A> commande.</span><span class="sxs-lookup"><span data-stu-id="c2b0d-134">The following example creates a <xref:System.Windows.Input.CommandBinding> that maps an <xref:System.Windows.Input.ExecutedRoutedEventHandler> and a <xref:System.Windows.Input.CanExecuteRoutedEventArgs> handler to the <xref:System.Windows.Input.ApplicationCommands.Open%2A> command.</span></span>  
  
 [!code-xaml[commandWithHandler#CommandHandlerCommandBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml#commandhandlercommandbinding)]  
  
 [!code-csharp[commandhandlerprocedural#CommandHandlerBindingInit](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandHandlerProcedural/CSharp/Window1.xaml.cs#commandhandlerbindinginit)]
 [!code-vb[commandhandlerprocedural#CommandHandlerBindingInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandHandlerProcedural/visualbasic/window1.xaml.vb#commandhandlerbindinginit)]  
  
 <span data-ttu-id="c2b0d-135">Le suivant le <xref:System.Windows.Input.CanExecuteRoutedEventHandler> quels jeux <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> à `true`.</span><span class="sxs-lookup"><span data-stu-id="c2b0d-135">The following shows the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> which sets <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> to `true`.</span></span>  
  
 [!code-csharp[commandWithHandler#CommandHandlerCanExecuteHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml.cs#commandhandlercanexecutehandler)]
 [!code-vb[commandWithHandler#CommandHandlerCanExecuteHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/commandWithHandler/VisualBasic/Window1.xaml.vb#commandhandlercanexecutehandler)]  
  
 <span data-ttu-id="c2b0d-136">Le suivant le <xref:System.Windows.Input.ExecutedRoutedEventHandler> qui crée un <xref:System.Windows.MessageBox> lorsque la commande est exécutée.</span><span class="sxs-lookup"><span data-stu-id="c2b0d-136">The following shows the <xref:System.Windows.Input.ExecutedRoutedEventHandler> which creates a <xref:System.Windows.MessageBox> when the command is executed.</span></span>  
  
 [!code-csharp[commandWithHandler#CommandHandlerExecutedHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml.cs#commandhandlerexecutedhandler)]
 [!code-vb[commandWithHandler#CommandHandlerExecutedHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/commandWithHandler/VisualBasic/Window1.xaml.vb#commandhandlerexecutedhandler)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="Executed">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.ExecutedRoutedEventHandler Executed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.ExecutedRoutedEventHandler Executed" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.CommandBinding.Executed" />
      <MemberSignature Language="VB.NET" Value="Public Event Executed As ExecutedRoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::ExecutedRoutedEventHandler ^ Executed;" />
      <MemberSignature Language="F#" Value="member this.Executed : System.Windows.Input.ExecutedRoutedEventHandler " Usage="member this.Executed : System.Windows.Input.ExecutedRoutedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ExecutedRoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c2b0d-137">Se produit quand la commande associée à ce <see cref="T:System.Windows.Input.CommandBinding" /> s’exécute.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c2b0d-137">Occurs when the command associated with this <see cref="T:System.Windows.Input.CommandBinding" /> executes.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2b0d-138">Lorsqu’un <xref:System.Windows.Input.RoutedCommand> s’exécute, il déclenche le <xref:System.Windows.Input.CommandBinding.PreviewExecuted> événement sur la cible de commande.</span><span class="sxs-lookup"><span data-stu-id="c2b0d-138">When a <xref:System.Windows.Input.RoutedCommand> executes, it raises the <xref:System.Windows.Input.CommandBinding.PreviewExecuted> event on the command target.</span></span>  <span data-ttu-id="c2b0d-139">Si le <xref:System.Windows.Input.CommandBinding.PreviewExecuted> événement n’est pas géré, le <xref:System.Windows.Input.CommandBinding.Executed> événement est déclenché sur la cible de commande.</span><span class="sxs-lookup"><span data-stu-id="c2b0d-139">If the <xref:System.Windows.Input.CommandBinding.PreviewExecuted> event is not handled, the <xref:System.Windows.Input.CommandBinding.Executed> event is raised on the command target.</span></span>  <span data-ttu-id="c2b0d-140">Si la cible de commande possède un <xref:System.Windows.Input.CommandBinding> pour la commande spécifique, le <xref:System.Windows.Input.CommandBinding.Executed> gestionnaire pour que <xref:System.Windows.Input.CommandBinding> est appelée.</span><span class="sxs-lookup"><span data-stu-id="c2b0d-140">If the command target has a <xref:System.Windows.Input.CommandBinding> for the specific command, the <xref:System.Windows.Input.CommandBinding.Executed> handler for that <xref:System.Windows.Input.CommandBinding> is called.</span></span>  <span data-ttu-id="c2b0d-141">Si la cible de commande n’a pas un <xref:System.Windows.Input.CommandBinding> pour la commande spécifiée la <xref:System.Windows.Input.CommandBinding.Executed> événement se propage vers le haut l’arborescence d’éléments recherche un élément qui a un <xref:System.Windows.Input.CommandBinding> associé à la commande.</span><span class="sxs-lookup"><span data-stu-id="c2b0d-141">If the command target does not have a <xref:System.Windows.Input.CommandBinding> for that specific command the <xref:System.Windows.Input.CommandBinding.Executed> event bubbles up the element tree searching for an element that has a <xref:System.Windows.Input.CommandBinding> associated with the command.</span></span>  <span data-ttu-id="c2b0d-142">Si un <xref:System.Windows.Input.CommandBinding> est introuvable, la commande n’est pas gérée.</span><span class="sxs-lookup"><span data-stu-id="c2b0d-142">If a <xref:System.Windows.Input.CommandBinding> is not found, the command is not handled.</span></span>  
  
<a name="routedEventInfo_Executed"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="c2b0d-143">Informations sur les événements acheminés</span><span class="sxs-lookup"><span data-stu-id="c2b0d-143">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="c2b0d-144">Champ d’identificateur</span><span class="sxs-lookup"><span data-stu-id="c2b0d-144">Identifier field</span></span>|<xref:System.Windows.Input.CommandManager.ExecutedEvent>|  
|<span data-ttu-id="c2b0d-145">Stratégie de routage</span><span class="sxs-lookup"><span data-stu-id="c2b0d-145">Routing strategy</span></span>|<span data-ttu-id="c2b0d-146">Propagation</span><span class="sxs-lookup"><span data-stu-id="c2b0d-146">Bubbling</span></span>|  
|<span data-ttu-id="c2b0d-147">délégué</span><span class="sxs-lookup"><span data-stu-id="c2b0d-147">Delegate</span></span>|<xref:System.Windows.Input.ExecutedRoutedEventHandler>|  
  
-   <span data-ttu-id="c2b0d-148">L’événement de tunneling correspondant est <xref:System.Windows.Input.CommandBinding.PreviewExecuted>.</span><span class="sxs-lookup"><span data-stu-id="c2b0d-148">The corresponding tunneling event is <xref:System.Windows.Input.CommandBinding.PreviewExecuted>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c2b0d-149">L’exemple suivant crée un <xref:System.Windows.Input.CommandBinding> qui mappe un <xref:System.Windows.Input.ExecutedRoutedEventHandler> et un <xref:System.Windows.Input.CanExecuteRoutedEventArgs> gestionnaire à la <xref:System.Windows.Input.ApplicationCommands.Open%2A> commande.</span><span class="sxs-lookup"><span data-stu-id="c2b0d-149">The following example creates a <xref:System.Windows.Input.CommandBinding> that maps an <xref:System.Windows.Input.ExecutedRoutedEventHandler> and a <xref:System.Windows.Input.CanExecuteRoutedEventArgs> handler to the <xref:System.Windows.Input.ApplicationCommands.Open%2A> command.</span></span>  
  
 [!code-xaml[commandwithhandler#CommandHandlerCommandBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml#commandhandlercommandbinding)]  
  
 [!code-csharp[CommandHandlerProcedural#CommandHandlerBindingInit](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandHandlerProcedural/CSharp/Window1.xaml.cs#commandhandlerbindinginit)]
 [!code-vb[CommandHandlerProcedural#CommandHandlerBindingInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandHandlerProcedural/visualbasic/window1.xaml.vb#commandhandlerbindinginit)]  
  
 <span data-ttu-id="c2b0d-150">Le suivant le <xref:System.Windows.Input.ExecutedRoutedEventHandler> qui crée un <xref:System.Windows.MessageBox> lorsque la commande est exécutée.</span><span class="sxs-lookup"><span data-stu-id="c2b0d-150">The following shows the <xref:System.Windows.Input.ExecutedRoutedEventHandler> which creates a <xref:System.Windows.MessageBox> when the command is executed.</span></span>  
  
 [!code-csharp[commandWithHandler#CommandHandlerExecutedHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml.cs#commandhandlerexecutedhandler)]
 [!code-vb[commandWithHandler#CommandHandlerExecutedHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/commandWithHandler/VisualBasic/Window1.xaml.vb#commandhandlerexecutedhandler)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="PreviewCanExecute">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.CanExecuteRoutedEventHandler PreviewCanExecute;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.CanExecuteRoutedEventHandler PreviewCanExecute" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.CommandBinding.PreviewCanExecute" />
      <MemberSignature Language="VB.NET" Value="Public Event PreviewCanExecute As CanExecuteRoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::CanExecuteRoutedEventHandler ^ PreviewCanExecute;" />
      <MemberSignature Language="F#" Value="member this.PreviewCanExecute : System.Windows.Input.CanExecuteRoutedEventHandler " Usage="member this.PreviewCanExecute : System.Windows.Input.CanExecuteRoutedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.CanExecuteRoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c2b0d-151">Se produit lorsque la commande associée à ce <see cref="T:System.Windows.Input.CommandBinding" /> lance un contrôle pour déterminer si la commande peut être exécutée sur la cible de la commande actuelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c2b0d-151">Occurs when the command associated with this <see cref="T:System.Windows.Input.CommandBinding" /> initiates a check to determine whether the command can be executed on the current command target.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2b0d-152">Lorsque le <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> méthode sur un <xref:System.Windows.Input.RoutedCommand> est appelée, le <xref:System.Windows.Input.CommandBinding.PreviewCanExecute> événement est déclenché sur la cible de commande si la cible de commande a un <xref:System.Windows.Input.CommandBinding> pour la commande.</span><span class="sxs-lookup"><span data-stu-id="c2b0d-152">When the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method on a <xref:System.Windows.Input.RoutedCommand> is called, the <xref:System.Windows.Input.CommandBinding.PreviewCanExecute> event is raised on the command target if the command target has a <xref:System.Windows.Input.CommandBinding> for the command.</span></span> <span data-ttu-id="c2b0d-153">Le <xref:System.Windows.Input.CommandBinding.CanExecute> gestionnaire pour que <xref:System.Windows.Input.CommandBinding> est appelée.</span><span class="sxs-lookup"><span data-stu-id="c2b0d-153">Then the <xref:System.Windows.Input.CommandBinding.CanExecute> handler for that <xref:System.Windows.Input.CommandBinding> is called.</span></span>  <span data-ttu-id="c2b0d-154">Si la cible de commande n’a pas un <xref:System.Windows.Input.CommandBinding> pour la commande, le <xref:System.Windows.Input.CommandBinding.CanExecute> événement se propage vers le haut l’arborescence d’éléments recherche un élément qui a un <xref:System.Windows.Input.CommandBinding> associé à la commande.</span><span class="sxs-lookup"><span data-stu-id="c2b0d-154">If the command target does not have a <xref:System.Windows.Input.CommandBinding> for the command, the <xref:System.Windows.Input.CommandBinding.CanExecute> event bubbles up the element tree searching for an element that has a <xref:System.Windows.Input.CommandBinding> associated with the command.</span></span>  <span data-ttu-id="c2b0d-155">Si l’événement n’est pas gérée, le <xref:System.Windows.Input.CommandBinding.CanExecute> événement est déclenché.</span><span class="sxs-lookup"><span data-stu-id="c2b0d-155">If the event is not handled, the <xref:System.Windows.Input.CommandBinding.CanExecute> event is raised.</span></span>  
  
<a name="routedEventInfo_PreviewCanExecute"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="c2b0d-156">Informations sur les événements acheminés</span><span class="sxs-lookup"><span data-stu-id="c2b0d-156">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="c2b0d-157">Champ d’identificateur</span><span class="sxs-lookup"><span data-stu-id="c2b0d-157">Identifier field</span></span>|<xref:System.Windows.Input.CommandManager.PreviewCanExecuteEvent>|  
|<span data-ttu-id="c2b0d-158">Stratégie de routage</span><span class="sxs-lookup"><span data-stu-id="c2b0d-158">Routing strategy</span></span>|<span data-ttu-id="c2b0d-159">Tunneling</span><span class="sxs-lookup"><span data-stu-id="c2b0d-159">Tunneling</span></span>|  
|<span data-ttu-id="c2b0d-160">délégué</span><span class="sxs-lookup"><span data-stu-id="c2b0d-160">Delegate</span></span>|<xref:System.Windows.Input.CanExecuteRoutedEventHandler>|  
  
-   <span data-ttu-id="c2b0d-161">L’événement par propagation correspondant est <xref:System.Windows.Input.CommandBinding.CanExecute>.</span><span class="sxs-lookup"><span data-stu-id="c2b0d-161">The corresponding bubbling event is <xref:System.Windows.Input.CommandBinding.CanExecute>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="PreviewExecuted">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.ExecutedRoutedEventHandler PreviewExecuted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.ExecutedRoutedEventHandler PreviewExecuted" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.CommandBinding.PreviewExecuted" />
      <MemberSignature Language="VB.NET" Value="Public Event PreviewExecuted As ExecutedRoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::ExecutedRoutedEventHandler ^ PreviewExecuted;" />
      <MemberSignature Language="F#" Value="member this.PreviewExecuted : System.Windows.Input.ExecutedRoutedEventHandler " Usage="member this.PreviewExecuted : System.Windows.Input.ExecutedRoutedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ExecutedRoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c2b0d-162">Se produit quand la commande associée à ce <see cref="T:System.Windows.Input.CommandBinding" /> s’exécute.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c2b0d-162">Occurs when the command associated with this <see cref="T:System.Windows.Input.CommandBinding" /> executes.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2b0d-163">Lorsqu’un <xref:System.Windows.Input.RoutedCommand> s’exécute, il déclenche le <xref:System.Windows.Input.CommandBinding.PreviewExecuted> événement sur la cible de commande.</span><span class="sxs-lookup"><span data-stu-id="c2b0d-163">When a <xref:System.Windows.Input.RoutedCommand> executes, it raises the <xref:System.Windows.Input.CommandBinding.PreviewExecuted> event on the command target.</span></span>  <span data-ttu-id="c2b0d-164">Si la cible de commande possède un <xref:System.Windows.Input.CommandBinding> pour la commande le <xref:System.Windows.Input.CommandBinding.PreviewExecuted> gestionnaire pour cet <xref:System.Windows.Input.CommandBinding> est appelée.</span><span class="sxs-lookup"><span data-stu-id="c2b0d-164">If the command target has a <xref:System.Windows.Input.CommandBinding> for the command the <xref:System.Windows.Input.CommandBinding.PreviewExecuted> handler for that <xref:System.Windows.Input.CommandBinding> is called.</span></span>  <span data-ttu-id="c2b0d-165">Si la cible de commande n’a pas un <xref:System.Windows.Input.CommandBinding> pour la commande le <xref:System.Windows.Input.CommandBinding.PreviewExecuted> tunnel de l’événement dans l’arborescence d’éléments recherche un élément qui a un <xref:System.Windows.Input.CommandBinding> associé à la commande.</span><span class="sxs-lookup"><span data-stu-id="c2b0d-165">If the command target does not have a <xref:System.Windows.Input.CommandBinding> for the command the <xref:System.Windows.Input.CommandBinding.PreviewExecuted> event tunnels down the element tree searching for an element that has a <xref:System.Windows.Input.CommandBinding> associated with the command.</span></span>  <span data-ttu-id="c2b0d-166">Si l’événement de prévisualisation n’est pas gérée, le <xref:System.Windows.Input.CommandBinding.Executed> événement est déclenché sur la cible de la commande.</span><span class="sxs-lookup"><span data-stu-id="c2b0d-166">If the preview event is not handled, the <xref:System.Windows.Input.CommandBinding.Executed> event is raised on command target.</span></span>  
  
<a name="routedEventInfo_PreviewExecuted"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="c2b0d-167">Informations sur les événements acheminés</span><span class="sxs-lookup"><span data-stu-id="c2b0d-167">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="c2b0d-168">Champ d’identificateur</span><span class="sxs-lookup"><span data-stu-id="c2b0d-168">Identifier field</span></span>|<xref:System.Windows.Input.CommandManager.PreviewExecutedEvent>|  
|<span data-ttu-id="c2b0d-169">Stratégie de routage</span><span class="sxs-lookup"><span data-stu-id="c2b0d-169">Routing strategy</span></span>|<span data-ttu-id="c2b0d-170">Tunneling</span><span class="sxs-lookup"><span data-stu-id="c2b0d-170">Tunneling</span></span>|  
|<span data-ttu-id="c2b0d-171">délégué</span><span class="sxs-lookup"><span data-stu-id="c2b0d-171">Delegate</span></span>|<xref:System.Windows.Input.ExecutedRoutedEventHandler>|  
  
-   <span data-ttu-id="c2b0d-172">L’événement par propagation correspondant est <xref:System.Windows.Input.CommandBinding.Executed>.</span><span class="sxs-lookup"><span data-stu-id="c2b0d-172">The corresponding bubbling event is <xref:System.Windows.Input.CommandBinding.Executed>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
  </Members>
</Type>