<Type Name="MouseGesture" FullName="System.Windows.Input.MouseGesture">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="fe51cc5b84e488cd46f702658fd67b15f54297bc" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30657603" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class MouseGesture : System.Windows.Input.InputGesture" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MouseGesture extends System.Windows.Input.InputGesture" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.MouseGesture" />
  <TypeSignature Language="VB.NET" Value="Public Class MouseGesture&#xA;Inherits InputGesture" />
  <TypeSignature Language="C++ CLI" Value="public ref class MouseGesture : System::Windows::Input::InputGesture" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Input.InputGesture</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Input.MouseGestureConverter))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.ValueSerializer(typeof(System.Windows.Input.MouseGestureValueSerializer))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Définit un mouvement d'entrée de souris qui peut être utilisé pour appeler une commande.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Contrairement à un <xref:System.Windows.Input.KeyGesture>, un <xref:System.Windows.Input.MouseAction> pas nécessairement être associés à <xref:System.Windows.Input.ModifierKeys> valide <xref:System.Windows.Input.MouseGesture>.  
  
 A <xref:System.Windows.Input.MouseGesture> peuvent être liés à un <xref:System.Windows.Input.RoutedCommand> (ou autres <xref:System.Windows.Input.ICommand> implémentations) via un <xref:System.Windows.Input.MouseBinding> afin que la commande est appelée lorsque le <xref:System.Windows.Input.MouseGesture> se produit.  
  
 Pour <xref:System.Windows.Input.MouseGesture> [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] utilisations d’attributs, la propriété qui est généralement définie dans [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] est <xref:System.Windows.Input.MouseBinding.Gesture%2A>, dans les cas où le mouvement peut représenter une action de la souris et une ou plusieurs touches de modification. Vous pouvez également définir le <xref:System.Windows.Input.MouseBinding.Gesture%2A> propriété seulement une action de la souris. En règle générale, il est recommandé d’utiliser uniquement la <xref:System.Windows.Input.KeyBinding.Gesture%2A> d’attribut de [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], plutôt que de définir <xref:System.Windows.Input.MouseBinding.MouseAction%2A>, même si vous ne spécifiez pas de modificateurs. Cela permet d’éviter toute ambiguïté, fournit la syntaxe la plus simplifiée et la représentation la plus simple pour la sérialisation.  
  
 <xref:System.Windows.Input.MouseGesture> [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] utilisations d’éléments objet sont possibles, mais rare, car vous pouvez définir normalement la <xref:System.Windows.Input.MouseBinding.Gesture%2A> propriété du <xref:System.Windows.Input.MouseBinding> inline sans l’utilisation de la syntaxe d’élément de propriété.  
  
<a name="xamlAttributeUsage_MouseGesture"></a>   
## <a name="xaml-attribute-usage"></a>Utilisation d'attributs XAML  
  
```  
<object property="mouseAction"/>  
- or -  
<object property="oneOrMoreModifierKeys+mouseAction"/>  
```  
  
<a name="xamlValues_MouseGesture"></a>   
## <a name="xaml-values"></a>Valeurs XAML  
 `mouseAction`  
 <xref:System.Windows.Input.MouseAction>  
  
 Action de souris unique.  
  
 `oneOrMoreModifierKeys`  
 Une ou plusieurs touches de modification, définies par le <xref:System.Windows.Input.ModifierKeys> énumération. Si plusieurs clés de modificateur est fourni, chaque est délimitée par un caractère « + ».  
  
   
  
## Examples  
 L’exemple suivant montre comment pour créer un <xref:System.Windows.Input.MouseGesture> et y associer un <xref:System.Windows.Input.RoutedCommand> via un <xref:System.Windows.Input.MouseBinding>.  Lorsque vous cliquez sur la roulette de la souris alors que le <xref:System.Windows.Input.ModifierKeys.Control> touche est enfoncée, le <xref:System.Windows.Input.ApplicationCommands.Open%2A> est appelé.  
  
 [!code-xaml[commandlibrarysnippets#MouseBindingMouseGestureXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml#mousebindingmousegesturexaml)]  
  
 [!code-csharp[commandlibrarysnippets#MouseBindingAddedToInputBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#mousebindingaddedtoinputbinding)]
 [!code-vb[commandlibrarysnippets#MouseBindingAddedToInputBinding](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#mousebindingaddedtoinputbinding)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.MouseBinding" />
    <altmember cref="T:System.Windows.Input.KeyGesture" />
    <altmember cref="T:System.Windows.Input.KeyBinding" />
    <altmember cref="T:System.Windows.Input.RoutedCommand" />
    <altmember cref="T:System.Windows.Input.CommandBinding" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Input.MouseGesture" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MouseGesture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.MouseGesture.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MouseGesture();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Input.MouseGesture" />.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Input.MouseBinding" />
        <altmember cref="T:System.Windows.Input.KeyGesture" />
        <altmember cref="T:System.Windows.Input.KeyBinding" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MouseGesture (System.Windows.Input.MouseAction mouseAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Input.MouseAction mouseAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.MouseGesture.#ctor(System.Windows.Input.MouseAction)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MouseGesture(System::Windows::Input::MouseAction mouseAction);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="mouseAction" Type="System.Windows.Input.MouseAction" />
      </Parameters>
      <Docs>
        <param name="mouseAction">Action associée à ce mouvement.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Input.MouseGesture" /> à l'aide du <see cref="T:System.Windows.Input.MouseAction" /> spécifié.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="mouseAction" /> n’est pas une valeur de <see cref="T:System.Windows.Input.MouseAction" /> valide.</exception>
        <altmember cref="T:System.Windows.Input.MouseBinding" />
        <altmember cref="T:System.Windows.Input.KeyGesture" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MouseGesture (System.Windows.Input.MouseAction mouseAction, System.Windows.Input.ModifierKeys modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Input.MouseAction mouseAction, valuetype System.Windows.Input.ModifierKeys modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.MouseGesture.#ctor(System.Windows.Input.MouseAction,System.Windows.Input.ModifierKeys)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MouseGesture(System::Windows::Input::MouseAction mouseAction, System::Windows::Input::ModifierKeys modifiers);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="mouseAction" Type="System.Windows.Input.MouseAction" />
        <Parameter Name="modifiers" Type="System.Windows.Input.ModifierKeys" />
      </Parameters>
      <Docs>
        <param name="mouseAction">Action associée à ce mouvement.</param>
        <param name="modifiers">Modificateurs associés à ce mouvement.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Input.MouseGesture" /> avec les <see cref="T:System.Windows.Input.MouseAction" /> et <see cref="T:System.Windows.Input.ModifierKeys" /> spécifiés.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="mouseAction" /> n'est pas une valeur <see cref="T:System.Windows.Input.MouseAction" /> valide.  
  
 - ou -  
  
 <paramref name="modifiers" /> n’est pas une valeur de <see cref="T:System.Windows.Input.ModifierKeys" /> valide.</exception>
        <altmember cref="T:System.Windows.Input.MouseBinding" />
        <altmember cref="T:System.Windows.Input.KeyGesture" />
        <altmember cref="T:System.Windows.Input.KeyBinding" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
      </Docs>
    </Member>
    <Member MemberName="Matches">
      <MemberSignature Language="C#" Value="public override bool Matches (object targetElement, System.Windows.Input.InputEventArgs inputEventArgs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Matches(object targetElement, class System.Windows.Input.InputEventArgs inputEventArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.MouseGesture.Matches(System.Object,System.Windows.Input.InputEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Matches(System::Object ^ targetElement, System::Windows::Input::InputEventArgs ^ inputEventArgs);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetElement" Type="System.Object" />
        <Parameter Name="inputEventArgs" Type="System.Windows.Input.InputEventArgs" />
      </Parameters>
      <Docs>
        <param name="targetElement">Cible.</param>
        <param name="inputEventArgs">Données d'événement d'entrée à comparer à ce mouvement.</param>
        <summary>Détermine si le <see cref="T:System.Windows.Input.MouseGesture" /> correspond à l'entrée associée à l'objet <see cref="T:System.Windows.Input.InputEventArgs" /> spécifié.</summary>
        <returns>
          <see langword="true" /> si les données d'événement correspondent à ce <see cref="T:System.Windows.Input.MouseGesture" /> ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple suivant montre comment tester si un <xref:System.Windows.Input.MouseGesture> correspond à l’entrée associée à une instance d’un <xref:System.Windows.Input.InputEventArgs>. A <xref:System.Windows.UIElement.MouseDown> Gestionnaire d’événements compare les données d’événement avec le <xref:System.Windows.Input.MouseGesture> à l’aide de la <xref:System.Windows.Input.MouseGesture.Matches%2A> (méthode).  
  
 [!code-csharp[commandlibrarysnippets#KeyDownHandlerMouseGestureMatches](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#keydownhandlermousegesturematches)]
 [!code-vb[commandlibrarysnippets#KeyDownHandlerMouseGestureMatches](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#keydownhandlermousegesturematches)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Modifiers">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ModifierKeys Modifiers { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Input.ModifierKeys Modifiers" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.MouseGesture.Modifiers" />
      <MemberSignature Language="VB.NET" Value="Public Property Modifiers As ModifierKeys" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::ModifierKeys Modifiers { System::Windows::Input::ModifierKeys get(); void set(System::Windows::Input::ModifierKeys value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ModifierKeys</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit les touches de modification associées à ce <see cref="T:System.Windows.Input.MouseGesture" />.</summary>
        <value>Touches de modification associées à ce mouvement. La valeur par défaut est <see cref="F:System.Windows.Input.ModifierKeys.None" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Contrairement à un <xref:System.Windows.Input.KeyGesture>, un <xref:System.Windows.Input.MouseAction> pas nécessairement être associés à <xref:System.Windows.Input.ModifierKeys> pour être valide <xref:System.Windows.Input.MouseGesture>.  
  
 <xref:System.Windows.Input.ModifierKeys> est un peu énumération de champ, il est donc possible pour plusieurs touches de modification être enfoncées en même temps. Utilisez des opérations de bits pour déterminer le jeu exact de touches de modification enfoncées.  
  
<a name="xamlAttributeUsage_Modifiers"></a>   
## <a name="xaml-attribute-usage"></a>Utilisation d'attributs XAML  
  
```  
<object Modifiers="oneOrMoreModifierKeys"/>  
```  
  
<a name="xamlValues_Modifiers"></a>   
## <a name="xaml-values"></a>Valeurs XAML  
 *oneOrMoreModifierKeys*  
 Une ou plusieurs touches de modification, définies par le <xref:System.Windows.Input.ModifierKeys> énumération, délimitée par un caractère « + ».  
  
   
  
## Examples  
 L’exemple suivant montre comment pour créer un <xref:System.Windows.Input.MouseGesture> et y associer un <xref:System.Windows.Input.RoutedCommand> via un <xref:System.Windows.Input.MouseBinding>.  
  
 [!code-csharp[commandlibrarysnippets#MouseBindingAddedToInputBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#mousebindingaddedtoinputbinding)]
 [!code-vb[commandlibrarysnippets#MouseBindingAddedToInputBinding](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#mousebindingaddedtoinputbinding)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.MouseBinding" />
        <altmember cref="T:System.Windows.Input.KeyGesture" />
        <altmember cref="T:System.Windows.Input.KeyBinding" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
      </Docs>
    </Member>
    <Member MemberName="MouseAction">
      <MemberSignature Language="C#" Value="public System.Windows.Input.MouseAction MouseAction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Input.MouseAction MouseAction" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.MouseGesture.MouseAction" />
      <MemberSignature Language="VB.NET" Value="Public Property MouseAction As MouseAction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::MouseAction MouseAction { System::Windows::Input::MouseAction get(); void set(System::Windows::Input::MouseAction value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseAction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le <see cref="T:System.Windows.Input.MouseAction" /> associé à ce mouvement.</summary>
        <value>Action de souris associée à ce mouvement. La valeur par défaut est <see cref="F:System.Windows.Input.MouseAction.None" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Contrairement à un <xref:System.Windows.Input.KeyGesture>, un <xref:System.Windows.Input.MouseAction> pas nécessairement être associés à <xref:System.Windows.Input.ModifierKeys> pour être valide <xref:System.Windows.Input.MouseGesture>.  
  
   
  
## Examples  
 L’exemple suivant montre comment pour créer un <xref:System.Windows.Input.MouseGesture> et y associer un <xref:System.Windows.Input.RoutedCommand> via un <xref:System.Windows.Input.MouseBinding>.  
  
 [!code-csharp[commandlibrarysnippets#MouseBindingAddedToInputBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#mousebindingaddedtoinputbinding)]
 [!code-vb[commandlibrarysnippets#MouseBindingAddedToInputBinding](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#mousebindingaddedtoinputbinding)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.MouseBinding" />
        <altmember cref="T:System.Windows.Input.KeyGesture" />
        <altmember cref="T:System.Windows.Input.KeyBinding" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
      </Docs>
    </Member>
  </Members>
</Type>