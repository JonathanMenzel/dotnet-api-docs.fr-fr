<Type Name="ICommandSource" FullName="System.Windows.Input.ICommandSource">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c2cc671612548463db8b444d52a8d84986b73927" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="37505169" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface ICommandSource" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICommandSource" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.ICommandSource" />
  <TypeSignature Language="VB.NET" Value="Public Interface ICommandSource" />
  <TypeSignature Language="C++ CLI" Value="public interface class ICommandSource" />
  <TypeSignature Language="F#" Value="type ICommandSource = interface" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Définit un objet qui sait comment appeler une commande.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La source de commande définit comment une commande est appelée par l’objet particulier.  Par exemple, si un <xref:System.Windows.Controls.Button> est associé à une commande, la commande est appelée lorsque le <xref:System.Windows.Controls.Button> vous cliquez sur.  
  
 Une source de commande sera normalement désactivée si la commande que lui est associée ne peut pas s’exécuter sur la cible de commande actuelle.  Par exemple, un <xref:System.Windows.Controls.MenuItem> associé à la <xref:System.Windows.Input.ApplicationCommands.Paste%2A> commande sera grise lorsque le <xref:System.Windows.Input.ApplicationCommands.Paste%2A> commande ne peut pas s’exécuter sur la cible de commande actuelle.  
  
 Normalement, une source de commande écoute le <xref:System.Windows.Input.ICommand.CanExecuteChanged> événement sur la commande.  Cela indique la source de commande lorsque le changement des conditions sur la cible de commande, tels que la perte de focus clavier.  La source de commande peut ensuite interroger la commande à l’aide de la <xref:System.Windows.Input.ICommand.CanExecute%2A> (méthode).  
  
 Certaines des classes dans [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] qui implémentent <xref:System.Windows.Input.ICommandSource> sont : <xref:System.Windows.Controls.Primitives.ButtonBase>, <xref:System.Windows.Controls.MenuItem>, et <xref:System.Windows.Documents.Hyperlink>.  
  
 Dans Windows Presentation Foundation commandes système, le <xref:System.Windows.Input.InputBinding.CommandTarget%2A> propriété sur un <xref:System.Windows.Input.ICommandSource> s’applique uniquement lorsque le <xref:System.Windows.Input.ICommand> est un <xref:System.Windows.Input.RoutedCommand>.  Si le <xref:System.Windows.Input.InputBinding.CommandTarget%2A> est définie sur une <xref:System.Windows.Input.ICommandSource> et la commande correspondante n’est pas un <xref:System.Windows.Input.RoutedCommand>, la cible de commande est ignorée.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.ICommand" />
    <altmember cref="T:System.Windows.Input.RoutedCommand" />
  </Docs>
  <Members>
    <Member MemberName="Command">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ICommand Command { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.ICommand Command" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ICommandSource.Command" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Command As ICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::ICommand ^ Command { System::Windows::Input::ICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Command : System.Windows.Input.ICommand" Usage="System.Windows.Input.ICommandSource.Command" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la commande qui est exécutée quand la source de la commande est appelée.</summary>
        <value>Commande qui est exécutée quand la source de la commande est appelée.</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Input.ICommand" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
      </Docs>
    </Member>
    <Member MemberName="CommandParameter">
      <MemberSignature Language="C#" Value="public object CommandParameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object CommandParameter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ICommandSource.CommandParameter" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CommandParameter As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ CommandParameter { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CommandParameter : obj" Usage="System.Windows.Input.ICommandSource.CommandParameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Représente une valeur de données définie par l’utilisateur qui peut être passée à la commande lors de son exécution.</summary>
        <value>Données spécifiques à la commande.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Normalement, le <xref:System.Windows.Input.ICommandSource.CommandParameter%2A> est utilisé pour passer des informations spécifiques à la commande lorsqu’elle est exécutée.  Le type de données est défini par la commande.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.ICommand" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
      </Docs>
    </Member>
    <Member MemberName="CommandTarget">
      <MemberSignature Language="C#" Value="public System.Windows.IInputElement CommandTarget { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.IInputElement CommandTarget" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ICommandSource.CommandTarget" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CommandTarget As IInputElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::IInputElement ^ CommandTarget { System::Windows::IInputElement ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CommandTarget : System.Windows.IInputElement" Usage="System.Windows.Input.ICommandSource.CommandTarget" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.IInputElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Objet sur lequel la commande est exécutée.</summary>
        <value>Objet sur lequel la commande est exécutée.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dans Windows Presentation Foundation commandes système, le <xref:System.Windows.Input.InputBinding.CommandTarget%2A> propriété sur un <xref:System.Windows.Input.ICommandSource> s’applique uniquement lorsque le <xref:System.Windows.Input.ICommand> est un <xref:System.Windows.Input.RoutedCommand>.  Si le <xref:System.Windows.Input.InputBinding.CommandTarget%2A> est définie sur une <xref:System.Windows.Input.ICommandSource> et la commande correspondante n’est pas un <xref:System.Windows.Input.RoutedCommand>, la cible de commande est ignorée.  
  
 Lorsqu’il est utilisé avec un <xref:System.Windows.Input.RoutedCommand>, la cible de commande est l’objet sur lequel le <xref:System.Windows.Input.CommandManager.Executed> et <xref:System.Windows.Input.CommandManager.CanExecute> sont déclenchés. Si le <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> propriété n’est pas définie, l’élément ayant le focus clavier est utilisé comme cible.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.ICommand" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
      </Docs>
    </Member>
  </Members>
</Type>