<Type Name="KeyGesture" FullName="System.Windows.Input.KeyGesture">
  <Metadata><Meta Name="ms.openlocfilehash" Value="bad0a28c8c2e6be4a282aba0b5f688860f65741c" /><Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="10/04/2018" /><Meta Name="ms.locfileid" Value="48677070" /></Metadata><TypeSignature Language="C#" Value="public class KeyGesture : System.Windows.Input.InputGesture" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit KeyGesture extends System.Windows.Input.InputGesture" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.KeyGesture" />
  <TypeSignature Language="VB.NET" Value="Public Class KeyGesture&#xA;Inherits InputGesture" />
  <TypeSignature Language="C++ CLI" Value="public ref class KeyGesture : System::Windows::Input::InputGesture" />
  <TypeSignature Language="F#" Value="type KeyGesture = class&#xA;    inherit InputGesture" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Input.InputGesture</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Input.KeyGestureConverter))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Windows.Markup.ValueSerializer(typeof(System.Windows.Input.KeyGestureValueSerializer))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Définit une combinaison de touches qui peut être utilisée pour appeler une commande.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dans la plupart des cas, un <xref:System.Windows.Input.KeyGesture> doit être associé à un ou plusieurs <xref:System.Windows.Input.ModifierKeys>. Les exceptions à cette règle sont les touches de fonction et des touches du pavé numérique, ce qui peuvent être valide <xref:System.Windows.Input.KeyGesture> par eux-mêmes. Par exemple, vous pouvez créer un <xref:System.Windows.Input.KeyGesture> en utilisant uniquement la touche F12, mais pour utiliser le X de clé dans un <xref:System.Windows.Input.KeyGesture> elle doit être associée à une touche de modification.  
  
 En règle générale, vous pouvez  
  
 Vous pouvez utiliser un <xref:System.Windows.Input.KeyBinding> pour lier un <xref:System.Windows.Input.KeyGesture> à un <xref:System.Windows.Input.ICommand>, de sorte que la commande est appelée lorsque le <xref:System.Windows.Input.KeyGesture> se produit.  
  
 Pour <xref:System.Windows.Input.KeyGesture> [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] utilisations, la propriété qui est généralement définie dans [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] est <xref:System.Windows.Input.KeyBinding.Gesture%2A>, dans les cas où le mouvement représente une clé standard et une touche de modification. Vous pouvez également définir le <xref:System.Windows.Input.KeyBinding.Gesture%2A> propriété sur juste une clé de fonction, ou simplement un modificateur de combinaison de touches. Toutefois, il est plus courant pour définir le <xref:System.Windows.Input.KeyBinding.Key%2A> propriété si la liaison de commande prévue est une touche de fonction sans modificateurs, ou <xref:System.Windows.Input.KeyBinding.Modifiers%2A> si la liaison de commande prévue concerne uniquement les touches de modification.  
  
<a name="xamlAttributeUsage_KeyGesture"></a>   
## <a name="xaml-attribute-usage"></a>Utilisation d'attributs XAML  
  
```  
<object property="oneOrMoreModifierKeys+key"/>  
- or -  
<object property="functionKey"/>  
```  
  
<a name="xamlValues_KeyGesture"></a>   
## <a name="xaml-values"></a>Valeurs XAML  
 `functionKey`  
 <xref:System.Windows.Input.Key>  
  
 Une valeur de clé unique qui doit être une des touches de fonction (F1-12) ou des clés du pavé numérique.  
  
 `oneOrMoreModifierKeys`  
 Un ou plusieurs touches de modification, définis par le <xref:System.Windows.Input.ModifierKeys> énumération, séparée par un caractère « + ».  
  
 `key`  
 <xref:System.Windows.Input.Key>  
  
 Une valeur de clé unique.  
  
   
  
## Examples  
 L’exemple suivant montre comment lier le <xref:System.Windows.Input.ApplicationCommands.Close%2A> commande à un <xref:System.Windows.Input.KeyGesture> à l’aide un <xref:System.Windows.Input.KeyBinding>.  
  
 [!code-csharp[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#keybindingwithkeyandmodifiers)]
 [!code-vb[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#keybindingwithkeyandmodifiers)]  
  
 L’exemple suivant montre comment utiliser <xref:System.Windows.Input.KeyGesture> dans [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]. Notez que le [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] utilisation ne déclare pas directement un `<KeyGesture>` élément. Utilisation d’élément objet n’est pas possible, car <xref:System.Windows.Input.KeyGesture> n’expose pas de constructeur public par défaut. Au lieu de cela, le [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] utilisation utilise le comportement typeconverter pour déclarer l’intégralité d’un <xref:System.Windows.Input.KeyGesture> inline en tant que le `Gesture` valeur d’attribut.  
  
 [!code-xaml[commandWithHandler#CommandHandlerKeyBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml#commandhandlerkeybinding)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.KeyBinding" />
    <altmember cref="T:System.Windows.Input.MouseBinding" />
    <altmember cref="T:System.Windows.Input.RoutedCommand" />
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.MouseGesture" />
    <altmember cref="T:System.Windows.Input.InputBinding" />
    <altmember cref="T:System.Windows.Input.InputGesture" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Input.KeyGesture" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public KeyGesture (System.Windows.Input.Key key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Input.Key key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; KeyGesture(System::Windows::Input::Key key);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.KeyGesture : System.Windows.Input.Key -&gt; System.Windows.Input.KeyGesture" Usage="new System.Windows.Input.KeyGesture key" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="key" Type="System.Windows.Input.Key" />
      </Parameters>
      <Docs>
        <param name="key">Touche associée à cette opération.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Input.KeyGesture" /> avec le <see cref="T:System.Windows.Input.Key" /> spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dans la plupart des cas, un <xref:System.Windows.Input.KeyGesture> doit être associé à un ou plusieurs <xref:System.Windows.Input.ModifierKeys>.  Les exceptions à cette règle sont les touches de fonction et des touches du pavé numérique, ce qui peuvent être valide <xref:System.Windows.Input.KeyGesture> par eux-mêmes.  
  
   
  
## Examples  
 L’exemple suivant montre comment utiliser ce constructeur pour créer un <xref:System.Windows.Input.KeyGesture> et associez-la à un <xref:System.Windows.Input.KeyBinding>.  Le <xref:System.Windows.Input.KeyBinding> est ensuite ajoutée à la <xref:System.Windows.Input.InputBindingCollection> d’un <xref:System.Windows.Window>.  
  
 [!code-csharp[commandlibrarysnippets#KeyBindingWithNoModifier](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#keybindingwithnomodifier)]
 [!code-vb[commandlibrarysnippets#KeyBindingWithNoModifier](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#keybindingwithnomodifier)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="key" /> n’est pas un <see cref="T:System.Windows.Input.Key" /> valide.</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="key" /> n’est pas un <see cref="T:System.Windows.Input.KeyGesture" /> valide.</exception>
        <altmember cref="T:System.Windows.Input.KeyBinding" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public KeyGesture (System.Windows.Input.Key key, System.Windows.Input.ModifierKeys modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Input.Key key, valuetype System.Windows.Input.ModifierKeys modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; KeyGesture(System::Windows::Input::Key key, System::Windows::Input::ModifierKeys modifiers);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.KeyGesture : System.Windows.Input.Key * System.Windows.Input.ModifierKeys -&gt; System.Windows.Input.KeyGesture" Usage="new System.Windows.Input.KeyGesture (key, modifiers)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="key" Type="System.Windows.Input.Key" />
        <Parameter Name="modifiers" Type="System.Windows.Input.ModifierKeys" />
      </Parameters>
      <Docs>
        <param name="key">Touche associée à l'opération.</param>
        <param name="modifiers">Touches de modification associées à l'opération.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Input.KeyGesture" /> avec les <see cref="T:System.Windows.Input.Key" /> et <see cref="T:System.Windows.Input.ModifierKeys" /> spécifiés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dans la plupart des cas, un <xref:System.Windows.Input.KeyGesture> doit être associé à un ou plusieurs <xref:System.Windows.Input.ModifierKeys>. Les exceptions à cette règle sont les touches de fonction et des touches du pavé numérique, ce qui peuvent être valide <xref:System.Windows.Input.KeyGesture> par eux-mêmes.  
  
   
  
## Examples  
 L’exemple suivant montre comment utiliser ce constructeur pour créer un <xref:System.Windows.Input.KeyGesture> et associez-la à un <xref:System.Windows.Input.KeyBinding>. Le <xref:System.Windows.Input.KeyBinding> est ensuite ajoutée à la <xref:System.Windows.Input.InputBindingCollection> d’un <xref:System.Windows.Window>.  
  
 [!code-csharp[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#keybindingwithkeyandmodifiers)]
 [!code-vb[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#keybindingwithkeyandmodifiers)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="modifiers" /> n'est pas un <see cref="T:System.Windows.Input.ModifierKeys" /> valide.  
  
- ou - 
 <paramref name="key" /> n’est pas un <see cref="T:System.Windows.Input.Key" /> valide.</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="key" /> et <paramref name="modifiers" /> ne forment pas de <see cref="T:System.Windows.Input.KeyGesture" /> valide.</exception>
        <altmember cref="T:System.Windows.Input.KeyBinding" />
        <altmember cref="T:System.Windows.Input.MouseBinding" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.MouseGesture" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.InputGesture" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public KeyGesture (System.Windows.Input.Key key, System.Windows.Input.ModifierKeys modifiers, string displayString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Input.Key key, valuetype System.Windows.Input.ModifierKeys modifiers, string displayString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; KeyGesture(System::Windows::Input::Key key, System::Windows::Input::ModifierKeys modifiers, System::String ^ displayString);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.KeyGesture : System.Windows.Input.Key * System.Windows.Input.ModifierKeys * string -&gt; System.Windows.Input.KeyGesture" Usage="new System.Windows.Input.KeyGesture (key, modifiers, displayString)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="key" Type="System.Windows.Input.Key" />
        <Parameter Name="modifiers" Type="System.Windows.Input.ModifierKeys" />
        <Parameter Name="displayString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Touche associée à l'opération.</param>
        <param name="modifiers">Touches de modification associées à l'opération.</param>
        <param name="displayString">Représentation sous forme de chaîne de <see cref="T:System.Windows.Input.KeyGesture" />.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Input.KeyGesture" />, avec les <see cref="T:System.Windows.Input.Key" />, <see cref="T:System.Windows.Input.ModifierKeys" /> et la chaîne d'affichage spécifiés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Input.KeyGesture.DisplayString%2A> propriété est définie sur le `displayString` paramètre.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="modifiers" /> n'est pas un <see cref="T:System.Windows.Input.ModifierKeys" /> valide.  
  
- ou - 
 <paramref name="key" /> n’est pas un <see cref="T:System.Windows.Input.Key" /> valide.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="displayString" /> est <see langword="null" />.</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="key" /> et <paramref name="modifiers" /> ne forment pas de <see cref="T:System.Windows.Input.KeyGesture" /> valide.</exception>
        <altmember cref="T:System.Windows.Input.KeyBinding" />
      </Docs>
    </Member>
    <Member MemberName="DisplayString">
      <MemberSignature Language="C#" Value="public string DisplayString { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayString" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyGesture.DisplayString" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DisplayString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DisplayString { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DisplayString : string" Usage="System.Windows.Input.KeyGesture.DisplayString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une représentation sous forme de chaîne de ce <see cref="T:System.Windows.Input.KeyGesture" />.</summary>
        <value>Chaîne d'affichage pour ce <see cref="T:System.Windows.Input.KeyGesture" />. La valeur par défaut est <see cref="F:System.String.Empty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si une chaîne d’affichage n’a pas été définie dans le constructeur, une chaîne vide est retournée.  
  
 Si cette propriété est vide, le <xref:System.Windows.Input.KeyGesture.GetDisplayStringForCulture%2A> méthode retourne une chaîne créée à partir de la <xref:System.Windows.Input.KeyGesture.Key%2A> et <xref:System.Windows.Input.KeyGesture.Modifiers%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyBinding" />
      </Docs>
    </Member>
    <Member MemberName="GetDisplayStringForCulture">
      <MemberSignature Language="C#" Value="public string GetDisplayStringForCulture (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetDisplayStringForCulture(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.KeyGesture.GetDisplayStringForCulture(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDisplayStringForCulture (culture As CultureInfo) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetDisplayStringForCulture(System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="member this.GetDisplayStringForCulture : System.Globalization.CultureInfo -&gt; string" Usage="keyGesture.GetDisplayStringForCulture culture" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="culture">Informations propres à la culture.</param>
        <summary>Renvoie une chaîne qui peut être utilisée pour afficher le <see cref="T:System.Windows.Input.KeyGesture" />.</summary>
        <returns>Chaîne à afficher</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si la chaîne d’affichage a été définie par le constructeur, cette chaîne est retournée ; Sinon, une chaîne est créée à partir de la <xref:System.Windows.Input.KeyGesture.Key%2A> et <xref:System.Windows.Input.KeyGesture.Modifiers%2A> avec toutes les conversions nécessaires régies par le <xref:System.Globalization.CultureInfo> objet.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyBinding" />
      </Docs>
    </Member>
    <Member MemberName="Key">
      <MemberSignature Language="C#" Value="public System.Windows.Input.Key Key { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Input.Key Key" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyGesture.Key" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Key As Key" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::Key Key { System::Windows::Input::Key get(); };" />
      <MemberSignature Language="F#" Value="member this.Key : System.Windows.Input.Key" Usage="System.Windows.Input.KeyGesture.Key" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.Key</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la touche associée à ce <see cref="T:System.Windows.Input.KeyGesture" />.</summary>
        <value>Touche associée à l'opération.  La valeur par défaut est <see cref="F:System.Windows.Input.Key.None" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dans la plupart des cas, un <xref:System.Windows.Input.KeyGesture> doit être associé à un ou plusieurs <xref:System.Windows.Input.ModifierKeys>.  Les exceptions à cette règle sont les touches de fonction et des touches du pavé numérique, ce qui peuvent être valide <xref:System.Windows.Input.KeyGesture> par eux-mêmes.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyBinding" />
        <altmember cref="T:System.Windows.Input.MouseBinding" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.MouseGesture" />
      </Docs>
    </Member>
    <Member MemberName="Matches">
      <MemberSignature Language="C#" Value="public override bool Matches (object targetElement, System.Windows.Input.InputEventArgs inputEventArgs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Matches(object targetElement, class System.Windows.Input.InputEventArgs inputEventArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.KeyGesture.Matches(System.Object,System.Windows.Input.InputEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Matches(System::Object ^ targetElement, System::Windows::Input::InputEventArgs ^ inputEventArgs);" />
      <MemberSignature Language="F#" Value="override this.Matches : obj * System.Windows.Input.InputEventArgs -&gt; bool" Usage="keyGesture.Matches (targetElement, inputEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetElement" Type="System.Object" />
        <Parameter Name="inputEventArgs" Type="System.Windows.Input.InputEventArgs" />
      </Parameters>
      <Docs>
        <param name="targetElement">Cible.</param>
        <param name="inputEventArgs">Données d'événement d'entrée auxquelles comparer cette opération.</param>
        <summary>Détermine si ce <see cref="T:System.Windows.Input.KeyGesture" /> correspond à l'entrée associée à l'objet <see cref="T:System.Windows.Input.InputEventArgs" /> spécifié.</summary>
        <returns><see langword="true" /> si les données d'événement correspondent à ce <see cref="T:System.Windows.Input.KeyGesture" /> ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `targetElement` peut être utilisé pour prendre une décision plus spécifique sur si une commande doit être appelée sur un élément spécifique.  
  
   
  
## Examples  
 L’exemple suivant montre comment tester si un <xref:System.Windows.Input.KeyGesture> correspond à l’entrée associée à une instance d’un <xref:System.Windows.Input.InputEventArgs>. Un <xref:System.Windows.UIElement.KeyDown> Gestionnaire d’événements est créé qui compare les données d’événement avec le <xref:System.Windows.Input.KeyGesture> à l’aide de la <xref:System.Windows.Input.KeyGesture.Matches%2A> (méthode).  
  
 [!code-csharp[commandlibrarysnippets#KeyDownHandlerKeyGestureMatches](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#keydownhandlerkeygesturematches)]
 [!code-vb[commandlibrarysnippets#KeyDownHandlerKeyGestureMatches](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#keydownhandlerkeygesturematches)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Modifiers">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ModifierKeys Modifiers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Input.ModifierKeys Modifiers" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyGesture.Modifiers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Modifiers As ModifierKeys" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::ModifierKeys Modifiers { System::Windows::Input::ModifierKeys get(); };" />
      <MemberSignature Language="F#" Value="member this.Modifiers : System.Windows.Input.ModifierKeys" Usage="System.Windows.Input.KeyGesture.Modifiers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ModifierKeys</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient les touches de modification associées à ce <see cref="T:System.Windows.Input.KeyGesture" />.</summary>
        <value>Touches de modification associées à l'opération. La valeur par défaut est <see cref="F:System.Windows.Input.ModifierKeys.None" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dans la plupart des cas, un <xref:System.Windows.Input.KeyGesture> doit être associé à un ou plusieurs <xref:System.Windows.Input.ModifierKeys>. Les exceptions à cette règle sont les touches de fonction et des touches du pavé numérique, ce qui peuvent être valide <xref:System.Windows.Input.KeyGesture> par eux-mêmes. Par exemple, vous pouvez créer un <xref:System.Windows.Input.KeyGesture> en utilisant uniquement la touche F12, mais pour utiliser le X de clé dans un <xref:System.Windows.Input.KeyGesture> elle doit être associée à une touche de modification.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyBinding" />
        <altmember cref="T:System.Windows.Input.MouseBinding" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.MouseGesture" />
      </Docs>
    </Member>
  </Members>
</Type>