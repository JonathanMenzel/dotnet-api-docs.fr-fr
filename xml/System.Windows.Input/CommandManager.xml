<Type Name="CommandManager" FullName="System.Windows.Input.CommandManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="67872d417ef12f0a53a5ee10a7a4feeee7555e71" /><Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="11/20/2018" /><Meta Name="ms.locfileid" Value="52224883" /></Metadata><TypeSignature Language="C#" Value="public sealed class CommandManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit CommandManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.CommandManager" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class CommandManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class CommandManager sealed" />
  <TypeSignature Language="F#" Value="type CommandManager = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="06802-101">Fournit des méthodes utilitaires liées à des commandes qui inscrivent des objets <see cref="T:System.Windows.Input.CommandBinding" /> et <see cref="T:System.Windows.Input.InputBinding" /> pour les propriétaires de classe et les commandes, ajoutent et suppriment des gestionnaires d'événements de commande et fournissent des services pour interroger l'état d'une commande.</span><span class="sxs-lookup"><span data-stu-id="06802-101">Provides command related utility methods that register <see cref="T:System.Windows.Input.CommandBinding" /> and <see cref="T:System.Windows.Input.InputBinding" /> objects for class owners and commands, add and remove command event handlers, and provides services for querying the status of a command.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="06802-102">Le <xref:System.Windows.Input.CommandManager> est chargé de gérer les commandes routées.</span><span class="sxs-lookup"><span data-stu-id="06802-102">The <xref:System.Windows.Input.CommandManager> is responsible for managing routed commands.</span></span>  <span data-ttu-id="06802-103">Pour plus d’informations sur l’exécution de commandes, consultez [vue d’ensemble des commandes](~/docs/framework/wpf/advanced/commanding-overview.md).</span><span class="sxs-lookup"><span data-stu-id="06802-103">For more information about commanding, see [Commanding Overview](~/docs/framework/wpf/advanced/commanding-overview.md).</span></span>  
  
 <span data-ttu-id="06802-104">Utilisez <xref:System.Windows.Input.CommandManager.RegisterClassCommandBinding%2A> pour inscrire un <xref:System.Windows.Input.CommandBinding> à une classe, par opposition à une instance.</span><span class="sxs-lookup"><span data-stu-id="06802-104">Use <xref:System.Windows.Input.CommandManager.RegisterClassCommandBinding%2A> to register a <xref:System.Windows.Input.CommandBinding> to a class as opposed to an instance.</span></span>  
  
 <span data-ttu-id="06802-105">Utilisez <xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A> pour inscrire un <xref:System.Windows.Input.InputBinding> à une classe, par opposition à une instance.</span><span class="sxs-lookup"><span data-stu-id="06802-105">Use <xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A> to register an <xref:System.Windows.Input.InputBinding> to a class as opposed to an instance.</span></span>  
  
 <span data-ttu-id="06802-106">La méthode <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> force <xref:System.Windows.Input.CommandManager> à déclencher l’événement <xref:System.Windows.Input.CommandManager.RequerySuggested>.</span><span class="sxs-lookup"><span data-stu-id="06802-106">The <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> method forces the <xref:System.Windows.Input.CommandManager> to raise the <xref:System.Windows.Input.CommandManager.RequerySuggested> event.</span></span>  <span data-ttu-id="06802-107">Le <xref:System.Windows.Input.CommandManager.RequerySuggested> événement informe la source de commande pour interroger la commande, elle est associée pour déterminer si la commande peut s’exécuter.</span><span class="sxs-lookup"><span data-stu-id="06802-107">The <xref:System.Windows.Input.CommandManager.RequerySuggested> event informs a command source to query the command it is associated with to determine whether or not the command can execute.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.RoutedCommand" />
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.ICommandSource" />
    <altmember cref="T:System.Windows.Input.ICommand" />
  </Docs>
  <Members>
    <Member MemberName="AddCanExecuteHandler">
      <MemberSignature Language="C#" Value="public static void AddCanExecuteHandler (System.Windows.UIElement element, System.Windows.Input.CanExecuteRoutedEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddCanExecuteHandler(class System.Windows.UIElement element, class System.Windows.Input.CanExecuteRoutedEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CommandManager.AddCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddCanExecuteHandler (element As UIElement, handler As CanExecuteRoutedEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddCanExecuteHandler(System::Windows::UIElement ^ element, System::Windows::Input::CanExecuteRoutedEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member AddCanExecuteHandler : System.Windows.UIElement * System.Windows.Input.CanExecuteRoutedEventHandler -&gt; unit" Usage="System.Windows.Input.CommandManager.AddCanExecuteHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.UIElement" />
        <Parameter Name="handler" Type="System.Windows.Input.CanExecuteRoutedEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="06802-108">Élément auquel attacher <paramref name="handler" />.</span><span class="sxs-lookup"><span data-stu-id="06802-108">The element to attach <paramref name="handler" /> to.</span></span></param>
        <param name="handler"><span data-ttu-id="06802-109">Gestionnaire de l'événement CanExecute.</span><span class="sxs-lookup"><span data-stu-id="06802-109">The can execute handler.</span></span></param>
        <summary><span data-ttu-id="06802-110">Attache le <see cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" /> spécifié à l'élément spécifié.</span><span class="sxs-lookup"><span data-stu-id="06802-110">Attaches the specified <see cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" /> to the specified element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="06802-111">L’exemple suivant crée un <xref:System.Windows.Input.CanExecuteRoutedEventHandler> et un <xref:System.Windows.Input.ExecutedRoutedEventHandler> et les attache à un <xref:System.Windows.Controls.Button> qui est une source de commande pour le <xref:System.Windows.Input.ApplicationCommands.Help%2A> commande.</span><span class="sxs-lookup"><span data-stu-id="06802-111">The following example creates a <xref:System.Windows.Input.CanExecuteRoutedEventHandler> and an <xref:System.Windows.Input.ExecutedRoutedEventHandler> and attaches them to a <xref:System.Windows.Controls.Button> which is a command source for the <xref:System.Windows.Input.ApplicationCommands.Help%2A> command.</span></span>  
  
 <span data-ttu-id="06802-112">Tout d’abord, le <xref:System.Windows.Controls.Button> est créé et associé à la <xref:System.Windows.Input.ApplicationCommands.Help%2A> commande.</span><span class="sxs-lookup"><span data-stu-id="06802-112">First, the <xref:System.Windows.Controls.Button> is created and associated with the <xref:System.Windows.Input.ApplicationCommands.Help%2A> command.</span></span>  
  
 [!code-xaml[commandingoverviewsnippets#CommandingOverviewCmdManagerAddHandlersXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml#commandingoverviewcmdmanageraddhandlersxaml)]  
  
 <span data-ttu-id="06802-113"><xref:System.Windows.Input.CanExecuteRoutedEventHandler> et <xref:System.Windows.Input.ExecutedRoutedEventHandler> sont ensuite créés.</span><span class="sxs-lookup"><span data-stu-id="06802-113">Next, the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> and the <xref:System.Windows.Input.ExecutedRoutedEventHandler> are created.</span></span>  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewCmdManagerExecutedHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewcmdmanagerexecutedhandler)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewCmdManagerExecutedHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewcmdmanagerexecutedhandler)]  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewCmdManagerCanExecuteHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewcmdmanagercanexecutehandler)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewCmdManagerCanExecuteHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewcmdmanagercanexecutehandler)]  
  
 <span data-ttu-id="06802-114">Et enfin, les gestionnaires sont attachés à la <xref:System.Windows.Controls.Button> à l’aide de la <xref:System.Windows.Input.CommandManager.AddCanExecuteHandler%2A> et <xref:System.Windows.Input.CommandManager.AddExecutedHandler%2A>.</span><span class="sxs-lookup"><span data-stu-id="06802-114">And finally, the handlers are attached to the <xref:System.Windows.Controls.Button> using the <xref:System.Windows.Input.CommandManager.AddCanExecuteHandler%2A> and <xref:System.Windows.Input.CommandManager.AddExecutedHandler%2A>.</span></span>  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewCmdManagerAddHandlers](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewcmdmanageraddhandlers)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewCmdManagerAddHandlers](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewcmdmanageraddhandlers)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="06802-115"><paramref name="element" /> ou <paramref name="handler" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="06802-115"><paramref name="element" /> or <paramref name="handler" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.ICommand" />
      </Docs>
    </Member>
    <Member MemberName="AddExecutedHandler">
      <MemberSignature Language="C#" Value="public static void AddExecutedHandler (System.Windows.UIElement element, System.Windows.Input.ExecutedRoutedEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddExecutedHandler(class System.Windows.UIElement element, class System.Windows.Input.ExecutedRoutedEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CommandManager.AddExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddExecutedHandler (element As UIElement, handler As ExecutedRoutedEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddExecutedHandler(System::Windows::UIElement ^ element, System::Windows::Input::ExecutedRoutedEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member AddExecutedHandler : System.Windows.UIElement * System.Windows.Input.ExecutedRoutedEventHandler -&gt; unit" Usage="System.Windows.Input.CommandManager.AddExecutedHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.UIElement" />
        <Parameter Name="handler" Type="System.Windows.Input.ExecutedRoutedEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="06802-116">Élément auquel attacher <paramref name="handler" />.</span><span class="sxs-lookup"><span data-stu-id="06802-116">The element to attach <paramref name="handler" /> to.</span></span></param>
        <param name="handler"><span data-ttu-id="06802-117">Gestionnaire exécuté.</span><span class="sxs-lookup"><span data-stu-id="06802-117">The executed handler.</span></span></param>
        <summary><span data-ttu-id="06802-118">Attache le <see cref="T:System.Windows.Input.ExecutedRoutedEventHandler" /> spécifié à l'élément spécifié.</span><span class="sxs-lookup"><span data-stu-id="06802-118">Attaches the specified <see cref="T:System.Windows.Input.ExecutedRoutedEventHandler" /> to the specified element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="06802-119">L’exemple suivant crée un <xref:System.Windows.Input.CanExecuteRoutedEventHandler> et un <xref:System.Windows.Input.ExecutedRoutedEventHandler> et les attache à un <xref:System.Windows.Controls.Button> qui est une source de commande pour le <xref:System.Windows.Input.ApplicationCommands.Help%2A> commande.</span><span class="sxs-lookup"><span data-stu-id="06802-119">The following example creates a <xref:System.Windows.Input.CanExecuteRoutedEventHandler> and an <xref:System.Windows.Input.ExecutedRoutedEventHandler> and attaches them to a <xref:System.Windows.Controls.Button> which is a command source for the <xref:System.Windows.Input.ApplicationCommands.Help%2A> command.</span></span>  
  
 <span data-ttu-id="06802-120">Tout d’abord, le <xref:System.Windows.Controls.Button> est créé et associé à la <xref:System.Windows.Input.ApplicationCommands.Help%2A> commande.</span><span class="sxs-lookup"><span data-stu-id="06802-120">First, the <xref:System.Windows.Controls.Button> is created and associated with the <xref:System.Windows.Input.ApplicationCommands.Help%2A> command.</span></span>  
  
 [!code-xaml[commandingoverviewsnippets#CommandingOverviewCmdManagerAddHandlersXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml#commandingoverviewcmdmanageraddhandlersxaml)]  
  
 <span data-ttu-id="06802-121"><xref:System.Windows.Input.CanExecuteRoutedEventHandler> et <xref:System.Windows.Input.ExecutedRoutedEventHandler> sont ensuite créés.</span><span class="sxs-lookup"><span data-stu-id="06802-121">Next, the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> and the <xref:System.Windows.Input.ExecutedRoutedEventHandler> are created.</span></span>  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewCmdManagerExecutedHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewcmdmanagerexecutedhandler)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewCmdManagerExecutedHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewcmdmanagerexecutedhandler)]  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewCmdManagerCanExecuteHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewcmdmanagercanexecutehandler)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewCmdManagerCanExecuteHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewcmdmanagercanexecutehandler)]  
  
 <span data-ttu-id="06802-122">Et enfin, les gestionnaires sont attachés à la <xref:System.Windows.Controls.Button> à l’aide de la <xref:System.Windows.Input.CommandManager.AddCanExecuteHandler%2A> et <xref:System.Windows.Input.CommandManager.AddExecutedHandler%2A>.</span><span class="sxs-lookup"><span data-stu-id="06802-122">And finally, the handlers are attached to the <xref:System.Windows.Controls.Button> using the <xref:System.Windows.Input.CommandManager.AddCanExecuteHandler%2A> and <xref:System.Windows.Input.CommandManager.AddExecutedHandler%2A>.</span></span>  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewCmdManagerAddHandlers](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewcmdmanageraddhandlers)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewCmdManagerAddHandlers](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewcmdmanageraddhandlers)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="06802-123"><paramref name="element" /> ou <paramref name="handler" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="06802-123"><paramref name="element" /> or <paramref name="handler" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.ICommand" />
      </Docs>
    </Member>
    <Member MemberName="AddPreviewCanExecuteHandler">
      <MemberSignature Language="C#" Value="public static void AddPreviewCanExecuteHandler (System.Windows.UIElement element, System.Windows.Input.CanExecuteRoutedEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddPreviewCanExecuteHandler(class System.Windows.UIElement element, class System.Windows.Input.CanExecuteRoutedEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CommandManager.AddPreviewCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddPreviewCanExecuteHandler (element As UIElement, handler As CanExecuteRoutedEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddPreviewCanExecuteHandler(System::Windows::UIElement ^ element, System::Windows::Input::CanExecuteRoutedEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member AddPreviewCanExecuteHandler : System.Windows.UIElement * System.Windows.Input.CanExecuteRoutedEventHandler -&gt; unit" Usage="System.Windows.Input.CommandManager.AddPreviewCanExecuteHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.UIElement" />
        <Parameter Name="handler" Type="System.Windows.Input.CanExecuteRoutedEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="06802-124">Élément auquel attacher <paramref name="handler" />.</span><span class="sxs-lookup"><span data-stu-id="06802-124">The element to attach <paramref name="handler" /> to.</span></span></param>
        <param name="handler"><span data-ttu-id="06802-125">Gestionnaire de l'événement CanExecute.</span><span class="sxs-lookup"><span data-stu-id="06802-125">The can execute handler.</span></span></param>
        <summary><span data-ttu-id="06802-126">Attache le <see cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" /> spécifié à l'élément spécifié.</span><span class="sxs-lookup"><span data-stu-id="06802-126">Attaches the specified <see cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" /> to the specified element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="06802-127">L’exemple suivant crée un <xref:System.Windows.Input.CanExecuteRoutedEventHandler> et un <xref:System.Windows.Input.ExecutedRoutedEventHandler> et les attache à un <xref:System.Windows.Controls.Button> qui est une source de commande pour le <xref:System.Windows.Input.ApplicationCommands.Help%2A> commande.</span><span class="sxs-lookup"><span data-stu-id="06802-127">The following example creates a <xref:System.Windows.Input.CanExecuteRoutedEventHandler> and an <xref:System.Windows.Input.ExecutedRoutedEventHandler> and attaches them to a <xref:System.Windows.Controls.Button> which is a command source for the <xref:System.Windows.Input.ApplicationCommands.Help%2A> command.</span></span>  
  
 <span data-ttu-id="06802-128">Tout d’abord, le <xref:System.Windows.Controls.Button> est créé et associé à la <xref:System.Windows.Input.ApplicationCommands.Help%2A> commande.</span><span class="sxs-lookup"><span data-stu-id="06802-128">First, the <xref:System.Windows.Controls.Button> is created and associated with the <xref:System.Windows.Input.ApplicationCommands.Help%2A> command.</span></span>  
  
 [!code-xaml[commandingoverviewsnippets#CommandingOverviewCmdManagerAddHandlersXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml#commandingoverviewcmdmanageraddhandlersxaml)]  
  
 <span data-ttu-id="06802-129"><xref:System.Windows.Input.CanExecuteRoutedEventHandler> et <xref:System.Windows.Input.ExecutedRoutedEventHandler> sont ensuite créés.</span><span class="sxs-lookup"><span data-stu-id="06802-129">Next, the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> and the <xref:System.Windows.Input.ExecutedRoutedEventHandler> are created.</span></span>  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewCmdManagerExecutedHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewcmdmanagerexecutedhandler)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewCmdManagerExecutedHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewcmdmanagerexecutedhandler)]  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewCmdManagerCanExecuteHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewcmdmanagercanexecutehandler)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewCmdManagerCanExecuteHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewcmdmanagercanexecutehandler)]  
  
 <span data-ttu-id="06802-130">Enfin, les gestionnaires sont attachés à la <xref:System.Windows.Controls.Button> à l’aide de la <xref:System.Windows.Input.CommandManager.AddCanExecuteHandler%2A> et <xref:System.Windows.Input.CommandManager.AddExecutedHandler%2A>.</span><span class="sxs-lookup"><span data-stu-id="06802-130">Finally, the handlers are attached to the <xref:System.Windows.Controls.Button> using the <xref:System.Windows.Input.CommandManager.AddCanExecuteHandler%2A> and <xref:System.Windows.Input.CommandManager.AddExecutedHandler%2A>.</span></span>  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewCmdManagerAddHandlers](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewcmdmanageraddhandlers)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewCmdManagerAddHandlers](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewcmdmanageraddhandlers)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="06802-131"><paramref name="element" /> ou <paramref name="handler" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="06802-131"><paramref name="element" /> or <paramref name="handler" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.ICommand" />
      </Docs>
    </Member>
    <Member MemberName="AddPreviewExecutedHandler">
      <MemberSignature Language="C#" Value="public static void AddPreviewExecutedHandler (System.Windows.UIElement element, System.Windows.Input.ExecutedRoutedEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddPreviewExecutedHandler(class System.Windows.UIElement element, class System.Windows.Input.ExecutedRoutedEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CommandManager.AddPreviewExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddPreviewExecutedHandler (element As UIElement, handler As ExecutedRoutedEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddPreviewExecutedHandler(System::Windows::UIElement ^ element, System::Windows::Input::ExecutedRoutedEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member AddPreviewExecutedHandler : System.Windows.UIElement * System.Windows.Input.ExecutedRoutedEventHandler -&gt; unit" Usage="System.Windows.Input.CommandManager.AddPreviewExecutedHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.UIElement" />
        <Parameter Name="handler" Type="System.Windows.Input.ExecutedRoutedEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="06802-132">Élément auquel attacher <paramref name="handler" />.</span><span class="sxs-lookup"><span data-stu-id="06802-132">The element to attach <paramref name="handler" /> to.</span></span></param>
        <param name="handler"><span data-ttu-id="06802-133">Gestionnaire de l'événement CanExecute.</span><span class="sxs-lookup"><span data-stu-id="06802-133">The can execute handler.</span></span></param>
        <summary><span data-ttu-id="06802-134">Attache le <see cref="T:System.Windows.Input.ExecutedRoutedEventHandler" /> spécifié à l'élément spécifié.</span><span class="sxs-lookup"><span data-stu-id="06802-134">Attaches the specified <see cref="T:System.Windows.Input.ExecutedRoutedEventHandler" /> to the specified element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="06802-135">L’exemple suivant crée un <xref:System.Windows.Input.CanExecuteRoutedEventHandler> et un <xref:System.Windows.Input.ExecutedRoutedEventHandler> et les attache à un <xref:System.Windows.Controls.Button> qui est une source de commande pour le <xref:System.Windows.Input.ApplicationCommands.Help%2A> commande.</span><span class="sxs-lookup"><span data-stu-id="06802-135">The following example creates a <xref:System.Windows.Input.CanExecuteRoutedEventHandler> and an <xref:System.Windows.Input.ExecutedRoutedEventHandler> and attaches them to a <xref:System.Windows.Controls.Button> which is a command source for the <xref:System.Windows.Input.ApplicationCommands.Help%2A> command.</span></span>  
  
 <span data-ttu-id="06802-136">Tout d’abord, le <xref:System.Windows.Controls.Button> est créé et associé à la <xref:System.Windows.Input.ApplicationCommands.Help%2A> commande.</span><span class="sxs-lookup"><span data-stu-id="06802-136">First, the <xref:System.Windows.Controls.Button> is created and associated with the <xref:System.Windows.Input.ApplicationCommands.Help%2A> command.</span></span>  
  
 [!code-xaml[commandingoverviewsnippets#CommandingOverviewCmdManagerAddHandlersXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml#commandingoverviewcmdmanageraddhandlersxaml)]  
  
 <span data-ttu-id="06802-137"><xref:System.Windows.Input.CanExecuteRoutedEventHandler> et <xref:System.Windows.Input.ExecutedRoutedEventHandler> sont ensuite créés.</span><span class="sxs-lookup"><span data-stu-id="06802-137">Next, the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> and the <xref:System.Windows.Input.ExecutedRoutedEventHandler> are created.</span></span>  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewCmdManagerExecutedHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewcmdmanagerexecutedhandler)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewCmdManagerExecutedHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewcmdmanagerexecutedhandler)]  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewCmdManagerCanExecuteHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewcmdmanagercanexecutehandler)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewCmdManagerCanExecuteHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewcmdmanagercanexecutehandler)]  
  
 <span data-ttu-id="06802-138">Enfin, les gestionnaires sont attachés à la <xref:System.Windows.Controls.Button> à l’aide de la <xref:System.Windows.Input.CommandManager.AddCanExecuteHandler%2A> et <xref:System.Windows.Input.CommandManager.AddExecutedHandler%2A>.</span><span class="sxs-lookup"><span data-stu-id="06802-138">Finally, the handlers are attached to the <xref:System.Windows.Controls.Button> using the <xref:System.Windows.Input.CommandManager.AddCanExecuteHandler%2A> and <xref:System.Windows.Input.CommandManager.AddExecutedHandler%2A>.</span></span>  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewCmdManagerAddHandlers](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewcmdmanageraddhandlers)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewCmdManagerAddHandlers](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewcmdmanageraddhandlers)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="06802-139"><paramref name="element" /> ou <paramref name="handler" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="06802-139"><paramref name="element" /> or <paramref name="handler" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.ICommand" />
      </Docs>
    </Member>
    <Member MemberName="CanExecute">
      <MemberSignature Language="C#" Value="see AddCanExecuteHandler, and RemoveCanExecuteHandler" />
      <MemberSignature Language="ILAsm" Value="see AddCanExecuteHandler, and RemoveCanExecuteHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.CommandManager.CanExecute" />
      <MemberSignature Language="VB.NET" Value="see AddCanExecuteHandler, and RemoveCanExecuteHandler" />
      <MemberSignature Language="F#" Value="see AddCanExecuteHandler, and RemoveCanExecuteHandler" Usage="see AddCanExecuteHandler, and RemoveCanExecuteHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="06802-140">Se produit lorsque la méthode <see cref="M:System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)" /> sur <see cref="T:System.Windows.Input.RoutedCommand" /> est appelée et que l'événement <see cref="E:System.Windows.Input.CommandManager.PreviewCanExecute" /> n'a pas été géré.</span><span class="sxs-lookup"><span data-stu-id="06802-140">Occurs when the <see cref="M:System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)" /> method on the <see cref="T:System.Windows.Input.RoutedCommand" /> is called and the <see cref="E:System.Windows.Input.CommandManager.PreviewCanExecute" /> event was not handled.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_CanExecute"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="06802-141">Informations sur les événements acheminés</span><span class="sxs-lookup"><span data-stu-id="06802-141">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="06802-142">Champ d’identificateur</span><span class="sxs-lookup"><span data-stu-id="06802-142">Identifier field</span></span>|<xref:System.Windows.Input.CommandManager.CanExecuteEvent>|  
|<span data-ttu-id="06802-143">Stratégie de routage</span><span class="sxs-lookup"><span data-stu-id="06802-143">Routing strategy</span></span>|<span data-ttu-id="06802-144">Propagation</span><span class="sxs-lookup"><span data-stu-id="06802-144">Bubbling</span></span>|  
|<span data-ttu-id="06802-145">délégué</span><span class="sxs-lookup"><span data-stu-id="06802-145">Delegate</span></span>|<xref:System.Windows.Input.CanExecuteRoutedEventHandler>|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Input.CommandManager.PreviewCanExecute" />
      </Docs>
    </Member>
    <Member MemberName="CanExecuteEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent CanExecuteEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent CanExecuteEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.CommandManager.CanExecuteEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CanExecuteEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ CanExecuteEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable CanExecuteEvent : System.Windows.RoutedEvent" Usage="System.Windows.Input.CommandManager.CanExecuteEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="06802-146">Identifie l’événement attaché <see cref="E:System.Windows.Input.CommandManager.CanExecute" />.</span><span class="sxs-lookup"><span data-stu-id="06802-146">Identifies the <see cref="E:System.Windows.Input.CommandManager.CanExecute" /> attached event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Executed">
      <MemberSignature Language="C#" Value="see AddExecutedHandler, and RemoveExecutedHandler" />
      <MemberSignature Language="ILAsm" Value="see AddExecutedHandler, and RemoveExecutedHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.CommandManager.Executed" />
      <MemberSignature Language="VB.NET" Value="see AddExecutedHandler, and RemoveExecutedHandler" />
      <MemberSignature Language="F#" Value="see AddExecutedHandler, and RemoveExecutedHandler" Usage="see AddExecutedHandler, and RemoveExecutedHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="06802-147">Se produit lorsque la méthode <see cref="M:System.Windows.Input.RoutedCommand.Execute(System.Object,System.Windows.IInputElement)" /> sur <see cref="T:System.Windows.Input.RoutedCommand" /> est appelée et que l'événement <see cref="E:System.Windows.Input.CommandManager.PreviewExecuted" /> n'a pas été géré.</span><span class="sxs-lookup"><span data-stu-id="06802-147">Occurs when the <see cref="M:System.Windows.Input.RoutedCommand.Execute(System.Object,System.Windows.IInputElement)" /> method on the <see cref="T:System.Windows.Input.RoutedCommand" /> is called and the <see cref="E:System.Windows.Input.CommandManager.PreviewExecuted" /> event was not handled.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_Executed"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="06802-148">Informations sur les événements acheminés</span><span class="sxs-lookup"><span data-stu-id="06802-148">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="06802-149">Champ d’identificateur</span><span class="sxs-lookup"><span data-stu-id="06802-149">Identifier field</span></span>|<xref:System.Windows.Input.CommandManager.ExecutedEvent>|  
|<span data-ttu-id="06802-150">Stratégie de routage</span><span class="sxs-lookup"><span data-stu-id="06802-150">Routing strategy</span></span>|<span data-ttu-id="06802-151">Propagation</span><span class="sxs-lookup"><span data-stu-id="06802-151">Bubbling</span></span>|  
|<span data-ttu-id="06802-152">délégué</span><span class="sxs-lookup"><span data-stu-id="06802-152">Delegate</span></span>|<xref:System.Windows.Input.ExecutedRoutedEventHandler>|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Input.CommandManager.PreviewExecuted" />
      </Docs>
    </Member>
    <Member MemberName="ExecutedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ExecutedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ExecutedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.CommandManager.ExecutedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ExecutedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ExecutedEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ExecutedEvent : System.Windows.RoutedEvent" Usage="System.Windows.Input.CommandManager.ExecutedEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="06802-153">Identifie l’événement attaché <see cref="E:System.Windows.Input.CommandManager.Executed" />.</span><span class="sxs-lookup"><span data-stu-id="06802-153">Identifies the <see cref="E:System.Windows.Input.CommandManager.Executed" /> attached event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidateRequerySuggested">
      <MemberSignature Language="C#" Value="public static void InvalidateRequerySuggested ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void InvalidateRequerySuggested() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CommandManager.InvalidateRequerySuggested" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub InvalidateRequerySuggested ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void InvalidateRequerySuggested();" />
      <MemberSignature Language="F#" Value="static member InvalidateRequerySuggested : unit -&gt; unit" Usage="System.Windows.Input.CommandManager.InvalidateRequerySuggested " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="06802-154">Force le <see cref="T:System.Windows.Input.CommandManager" /> à déclencher l'événement <see cref="E:System.Windows.Input.CommandManager.RequerySuggested" />.</span><span class="sxs-lookup"><span data-stu-id="06802-154">Forces the <see cref="T:System.Windows.Input.CommandManager" /> to raise the <see cref="E:System.Windows.Input.CommandManager.RequerySuggested" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="06802-155">Le <xref:System.Windows.Input.CommandManager> tient compte uniquement de certaines conditions pour déterminer quand la cible de commande a changé, tel que de la modification du focus clavier.</span><span class="sxs-lookup"><span data-stu-id="06802-155">The <xref:System.Windows.Input.CommandManager> only pays attention to certain conditions in determining when the command target has changed, such as change in keyboard focus.</span></span>  <span data-ttu-id="06802-156">Dans les situations où la <xref:System.Windows.Input.CommandManager> ne détermine pas suffisamment de changements de conditions qui entraînent une commande ne pas être en mesure d’exécuter, <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> peut être appelée pour forcer le <xref:System.Windows.Input.CommandManager> pour déclencher le <xref:System.Windows.Input.CommandManager.RequerySuggested> événement.</span><span class="sxs-lookup"><span data-stu-id="06802-156">In situations where the <xref:System.Windows.Input.CommandManager> does not sufficiently determine a change in conditions that cause a command to not be able to execute, <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> can be called to force the <xref:System.Windows.Input.CommandManager> to raise the <xref:System.Windows.Input.CommandManager.RequerySuggested> event.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="06802-157">L’exemple suivant utilise un <xref:System.Windows.Threading.DispatcherTimer> pour appeler régulièrement <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> pour forcer la <xref:System.Windows.Input.CommandManager> pour déclencher le <xref:System.Windows.Input.CommandManager.RequerySuggested> événement.</span><span class="sxs-lookup"><span data-stu-id="06802-157">The following example uses a <xref:System.Windows.Threading.DispatcherTimer> to periodically call <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> to force the <xref:System.Windows.Input.CommandManager> to raise the <xref:System.Windows.Input.CommandManager.RequerySuggested> event.</span></span>  
  
 [!code-csharp[InvalidateRequeryWithDispatcherTimer#InvalidateSampleDispatcherTimer](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml.cs#invalidatesampledispatchertimer)]
 [!code-vb[InvalidateRequeryWithDispatcherTimer#InvalidateSampleDispatcherTimer](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/visualbasic/window1.xaml.vb#invalidatesampledispatchertimer)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewCanExecute">
      <MemberSignature Language="C#" Value="see AddPreviewCanExecuteHandler, and RemovePreviewCanExecuteHandler" />
      <MemberSignature Language="ILAsm" Value="see AddPreviewCanExecuteHandler, and RemovePreviewCanExecuteHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.CommandManager.PreviewCanExecute" />
      <MemberSignature Language="VB.NET" Value="see AddPreviewCanExecuteHandler, and RemovePreviewCanExecuteHandler" />
      <MemberSignature Language="F#" Value="see AddPreviewCanExecuteHandler, and RemovePreviewCanExecuteHandler" Usage="see AddPreviewCanExecuteHandler, and RemovePreviewCanExecuteHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="06802-158">Se produit lorsque la méthode <see cref="M:System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)" /> sur <see cref="T:System.Windows.Input.RoutedCommand" /> est appelée.</span><span class="sxs-lookup"><span data-stu-id="06802-158">Occurs when the <see cref="M:System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)" /> method on the <see cref="T:System.Windows.Input.RoutedCommand" /> is called.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_PreviewCanExecute"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="06802-159">Informations sur les événements acheminés</span><span class="sxs-lookup"><span data-stu-id="06802-159">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="06802-160">Champ d’identificateur</span><span class="sxs-lookup"><span data-stu-id="06802-160">Identifier field</span></span>|<xref:System.Windows.Input.CommandManager.PreviewCanExecuteEvent>|  
|<span data-ttu-id="06802-161">Stratégie de routage</span><span class="sxs-lookup"><span data-stu-id="06802-161">Routing strategy</span></span>|<span data-ttu-id="06802-162">Le tunneling</span><span class="sxs-lookup"><span data-stu-id="06802-162">Tunneling</span></span>|  
|<span data-ttu-id="06802-163">délégué</span><span class="sxs-lookup"><span data-stu-id="06802-163">Delegate</span></span>|<xref:System.Windows.Input.CanExecuteRoutedEventHandler>|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Input.CommandManager.CanExecute" />
      </Docs>
    </Member>
    <Member MemberName="PreviewCanExecuteEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewCanExecuteEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewCanExecuteEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.CommandManager.PreviewCanExecuteEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewCanExecuteEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewCanExecuteEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewCanExecuteEvent : System.Windows.RoutedEvent" Usage="System.Windows.Input.CommandManager.PreviewCanExecuteEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="06802-164">Identifie l’événement attaché <see cref="E:System.Windows.Input.CommandManager.PreviewCanExecute" />.</span><span class="sxs-lookup"><span data-stu-id="06802-164">Identifies the <see cref="E:System.Windows.Input.CommandManager.PreviewCanExecute" /> attached event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewExecuted">
      <MemberSignature Language="C#" Value="see AddPreviewExecutedHandler, and RemovePreviewExecutedHandler" />
      <MemberSignature Language="ILAsm" Value="see AddPreviewExecutedHandler, and RemovePreviewExecutedHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.CommandManager.PreviewExecuted" />
      <MemberSignature Language="VB.NET" Value="see AddPreviewExecutedHandler, and RemovePreviewExecutedHandler" />
      <MemberSignature Language="F#" Value="see AddPreviewExecutedHandler, and RemovePreviewExecutedHandler" Usage="see AddPreviewExecutedHandler, and RemovePreviewExecutedHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="06802-165">Se produit lorsque la méthode <see cref="M:System.Windows.Input.RoutedCommand.Execute(System.Object,System.Windows.IInputElement)" /> sur <see cref="T:System.Windows.Input.RoutedCommand" /> est appelée.</span><span class="sxs-lookup"><span data-stu-id="06802-165">Occurs when the <see cref="M:System.Windows.Input.RoutedCommand.Execute(System.Object,System.Windows.IInputElement)" /> method on the <see cref="T:System.Windows.Input.RoutedCommand" /> is called.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_PreviewExecuted"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="06802-166">Informations sur les événements acheminés</span><span class="sxs-lookup"><span data-stu-id="06802-166">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="06802-167">Champ d’identificateur</span><span class="sxs-lookup"><span data-stu-id="06802-167">Identifier field</span></span>|<xref:System.Windows.Input.CommandManager.PreviewExecutedEvent>|  
|<span data-ttu-id="06802-168">Stratégie de routage</span><span class="sxs-lookup"><span data-stu-id="06802-168">Routing strategy</span></span>|<span data-ttu-id="06802-169">Le tunneling</span><span class="sxs-lookup"><span data-stu-id="06802-169">Tunneling</span></span>|  
|<span data-ttu-id="06802-170">délégué</span><span class="sxs-lookup"><span data-stu-id="06802-170">Delegate</span></span>|<xref:System.Windows.Input.ExecutedRoutedEventHandler>|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Input.CommandManager.Executed" />
      </Docs>
    </Member>
    <Member MemberName="PreviewExecutedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewExecutedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewExecutedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.CommandManager.PreviewExecutedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewExecutedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewExecutedEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewExecutedEvent : System.Windows.RoutedEvent" Usage="System.Windows.Input.CommandManager.PreviewExecutedEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="06802-171">Identifie l’événement attaché <see cref="E:System.Windows.Input.CommandManager.PreviewExecuted" />.</span><span class="sxs-lookup"><span data-stu-id="06802-171">Identifies the <see cref="E:System.Windows.Input.CommandManager.PreviewExecuted" /> attached event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterClassCommandBinding">
      <MemberSignature Language="C#" Value="public static void RegisterClassCommandBinding (Type type, System.Windows.Input.CommandBinding commandBinding);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClassCommandBinding(class System.Type type, class System.Windows.Input.CommandBinding commandBinding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CommandManager.RegisterClassCommandBinding(System.Type,System.Windows.Input.CommandBinding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClassCommandBinding(Type ^ type, System::Windows::Input::CommandBinding ^ commandBinding);" />
      <MemberSignature Language="F#" Value="static member RegisterClassCommandBinding : Type * System.Windows.Input.CommandBinding -&gt; unit" Usage="System.Windows.Input.CommandManager.RegisterClassCommandBinding (type, commandBinding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="commandBinding" Type="System.Windows.Input.CommandBinding" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="06802-172">Classe avec laquelle inscrire <paramref name="commandBinding" />.</span><span class="sxs-lookup"><span data-stu-id="06802-172">The class with which to register <paramref name="commandBinding" />.</span></span></param>
        <param name="commandBinding"><span data-ttu-id="06802-173">Liaison de commande à inscrire.</span><span class="sxs-lookup"><span data-stu-id="06802-173">The command binding to register.</span></span></param>
        <summary><span data-ttu-id="06802-174">Inscrit un <see cref="T:System.Windows.Input.CommandBinding" /> avec le type spécifié.</span><span class="sxs-lookup"><span data-stu-id="06802-174">Registers a <see cref="T:System.Windows.Input.CommandBinding" /> with the specified type.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="06802-175">Cette méthode permet un <xref:System.Windows.Input.CommandBinding> à associer à une classe plutôt qu’à une instance d’une classe.</span><span class="sxs-lookup"><span data-stu-id="06802-175">This method enables a <xref:System.Windows.Input.CommandBinding> to be associated with a class instead than an instance of a class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="06802-176"><paramref name="type" /> ou <paramref name="commandBinding" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="06802-176"><paramref name="type" /> or <paramref name="commandBinding" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="RegisterClassInputBinding">
      <MemberSignature Language="C#" Value="public static void RegisterClassInputBinding (Type type, System.Windows.Input.InputBinding inputBinding);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClassInputBinding(class System.Type type, class System.Windows.Input.InputBinding inputBinding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CommandManager.RegisterClassInputBinding(System.Type,System.Windows.Input.InputBinding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClassInputBinding(Type ^ type, System::Windows::Input::InputBinding ^ inputBinding);" />
      <MemberSignature Language="F#" Value="static member RegisterClassInputBinding : Type * System.Windows.Input.InputBinding -&gt; unit" Usage="System.Windows.Input.CommandManager.RegisterClassInputBinding (type, inputBinding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="inputBinding" Type="System.Windows.Input.InputBinding" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="06802-177">Type avec lequel inscrire <paramref name="inputBinding" />.</span><span class="sxs-lookup"><span data-stu-id="06802-177">The type to register <paramref name="inputBinding" /> with.</span></span></param>
        <param name="inputBinding"><span data-ttu-id="06802-178">Liaison d'entrée à inscrire.</span><span class="sxs-lookup"><span data-stu-id="06802-178">The input binding to register.</span></span></param>
        <summary><span data-ttu-id="06802-179">Inscrit le <see cref="T:System.Windows.Input.InputBinding" /> spécifié avec le type spécifié.</span><span class="sxs-lookup"><span data-stu-id="06802-179">Registers the specified <see cref="T:System.Windows.Input.InputBinding" /> with the specified type.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="06802-180">Cette méthode permet un <xref:System.Windows.Input.InputBinding> à associer à un type plutôt qu’une instance d’une classe.</span><span class="sxs-lookup"><span data-stu-id="06802-180">This method enables an <xref:System.Windows.Input.InputBinding> to be associated with a type instead of an instance of a class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="06802-181"><paramref name="type" /> ou <paramref name="inputBinding" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="06802-181"><paramref name="type" /> or <paramref name="inputBinding" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveCanExecuteHandler">
      <MemberSignature Language="C#" Value="public static void RemoveCanExecuteHandler (System.Windows.UIElement element, System.Windows.Input.CanExecuteRoutedEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveCanExecuteHandler(class System.Windows.UIElement element, class System.Windows.Input.CanExecuteRoutedEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CommandManager.RemoveCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveCanExecuteHandler (element As UIElement, handler As CanExecuteRoutedEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveCanExecuteHandler(System::Windows::UIElement ^ element, System::Windows::Input::CanExecuteRoutedEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member RemoveCanExecuteHandler : System.Windows.UIElement * System.Windows.Input.CanExecuteRoutedEventHandler -&gt; unit" Usage="System.Windows.Input.CommandManager.RemoveCanExecuteHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.UIElement" />
        <Parameter Name="handler" Type="System.Windows.Input.CanExecuteRoutedEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="06802-182">Élément à partir duquel supprimer <paramref name="handler" />.</span><span class="sxs-lookup"><span data-stu-id="06802-182">The element to remove <paramref name="handler" /> from.</span></span></param>
        <param name="handler"><span data-ttu-id="06802-183">Gestionnaire de l'événement CanExecute.</span><span class="sxs-lookup"><span data-stu-id="06802-183">The can execute handler.</span></span></param>
        <summary><span data-ttu-id="06802-184">Détache le <see cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" /> spécifié de l'élément spécifié.</span><span class="sxs-lookup"><span data-stu-id="06802-184">Detaches the specified <see cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" /> from the specified element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="06802-185">L’exemple suivant détache un <xref:System.Windows.Input.CanExecuteRoutedEventHandler> et un <xref:System.Windows.Input.ExecutedRoutedEventHandler> qui a précédemment été joint à un <xref:System.Windows.Controls.Button>.</span><span class="sxs-lookup"><span data-stu-id="06802-185">The following example detaches a <xref:System.Windows.Input.CanExecuteRoutedEventHandler> and an <xref:System.Windows.Input.ExecutedRoutedEventHandler> which had previously been attached to a <xref:System.Windows.Controls.Button>.</span></span>  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewCmdManagerRemoveHandlers](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewcmdmanagerremovehandlers)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewCmdManagerRemoveHandlers](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewcmdmanagerremovehandlers)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="06802-186"><paramref name="element" /> ou <paramref name="handler" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="06802-186"><paramref name="element" /> or <paramref name="handler" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.ICommand" />
      </Docs>
    </Member>
    <Member MemberName="RemoveExecutedHandler">
      <MemberSignature Language="C#" Value="public static void RemoveExecutedHandler (System.Windows.UIElement element, System.Windows.Input.ExecutedRoutedEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveExecutedHandler(class System.Windows.UIElement element, class System.Windows.Input.ExecutedRoutedEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CommandManager.RemoveExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveExecutedHandler (element As UIElement, handler As ExecutedRoutedEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveExecutedHandler(System::Windows::UIElement ^ element, System::Windows::Input::ExecutedRoutedEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member RemoveExecutedHandler : System.Windows.UIElement * System.Windows.Input.ExecutedRoutedEventHandler -&gt; unit" Usage="System.Windows.Input.CommandManager.RemoveExecutedHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.UIElement" />
        <Parameter Name="handler" Type="System.Windows.Input.ExecutedRoutedEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="06802-187">Élément à partir duquel supprimer <paramref name="handler" />.</span><span class="sxs-lookup"><span data-stu-id="06802-187">The element to remove <paramref name="handler" /> from.</span></span></param>
        <param name="handler"><span data-ttu-id="06802-188">Gestionnaire exécuté.</span><span class="sxs-lookup"><span data-stu-id="06802-188">The executed handler.</span></span></param>
        <summary><span data-ttu-id="06802-189">Détache le <see cref="T:System.Windows.Input.ExecutedRoutedEventHandler" /> spécifié de l'élément spécifié.</span><span class="sxs-lookup"><span data-stu-id="06802-189">Detaches the specified <see cref="T:System.Windows.Input.ExecutedRoutedEventHandler" /> from the specified element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="06802-190">L’exemple suivant détache un <xref:System.Windows.Input.CanExecuteRoutedEventHandler> et un <xref:System.Windows.Input.ExecutedRoutedEventHandler> qui a précédemment été joint à un <xref:System.Windows.Controls.Button>.</span><span class="sxs-lookup"><span data-stu-id="06802-190">The following example detaches a <xref:System.Windows.Input.CanExecuteRoutedEventHandler> and an <xref:System.Windows.Input.ExecutedRoutedEventHandler> which had previously been attached to a <xref:System.Windows.Controls.Button>.</span></span>  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewCmdManagerRemoveHandlers](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewcmdmanagerremovehandlers)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewCmdManagerRemoveHandlers](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewcmdmanagerremovehandlers)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="06802-191"><paramref name="element" /> ou <paramref name="handler" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="06802-191"><paramref name="element" /> or <paramref name="handler" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.ICommand" />
      </Docs>
    </Member>
    <Member MemberName="RemovePreviewCanExecuteHandler">
      <MemberSignature Language="C#" Value="public static void RemovePreviewCanExecuteHandler (System.Windows.UIElement element, System.Windows.Input.CanExecuteRoutedEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemovePreviewCanExecuteHandler(class System.Windows.UIElement element, class System.Windows.Input.CanExecuteRoutedEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CommandManager.RemovePreviewCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemovePreviewCanExecuteHandler (element As UIElement, handler As CanExecuteRoutedEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemovePreviewCanExecuteHandler(System::Windows::UIElement ^ element, System::Windows::Input::CanExecuteRoutedEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member RemovePreviewCanExecuteHandler : System.Windows.UIElement * System.Windows.Input.CanExecuteRoutedEventHandler -&gt; unit" Usage="System.Windows.Input.CommandManager.RemovePreviewCanExecuteHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.UIElement" />
        <Parameter Name="handler" Type="System.Windows.Input.CanExecuteRoutedEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="06802-192">Élément à partir duquel supprimer <paramref name="handler" />.</span><span class="sxs-lookup"><span data-stu-id="06802-192">The element to remove <paramref name="handler" /> from.</span></span></param>
        <param name="handler"><span data-ttu-id="06802-193">Gestionnaire de l'événement CanExecute.</span><span class="sxs-lookup"><span data-stu-id="06802-193">The can execute handler.</span></span></param>
        <summary><span data-ttu-id="06802-194">Détache le <see cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" /> spécifié de l'élément spécifié.</span><span class="sxs-lookup"><span data-stu-id="06802-194">Detaches the specified <see cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" /> from the specified element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="06802-195">L’exemple suivant détache un <xref:System.Windows.Input.CanExecuteRoutedEventHandler> et un <xref:System.Windows.Input.ExecutedRoutedEventHandler> qui a précédemment été joint à un <xref:System.Windows.Controls.Button>.</span><span class="sxs-lookup"><span data-stu-id="06802-195">The following example detaches a <xref:System.Windows.Input.CanExecuteRoutedEventHandler> and an <xref:System.Windows.Input.ExecutedRoutedEventHandler> which had previously been attached to a <xref:System.Windows.Controls.Button>.</span></span>  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewCmdManagerRemoveHandlers](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewcmdmanagerremovehandlers)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewCmdManagerRemoveHandlers](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewcmdmanagerremovehandlers)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="06802-196"><paramref name="element" /> ou <paramref name="handler" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="06802-196"><paramref name="element" /> or <paramref name="handler" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.ICommand" />
      </Docs>
    </Member>
    <Member MemberName="RemovePreviewExecutedHandler">
      <MemberSignature Language="C#" Value="public static void RemovePreviewExecutedHandler (System.Windows.UIElement element, System.Windows.Input.ExecutedRoutedEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemovePreviewExecutedHandler(class System.Windows.UIElement element, class System.Windows.Input.ExecutedRoutedEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CommandManager.RemovePreviewExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemovePreviewExecutedHandler (element As UIElement, handler As ExecutedRoutedEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemovePreviewExecutedHandler(System::Windows::UIElement ^ element, System::Windows::Input::ExecutedRoutedEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member RemovePreviewExecutedHandler : System.Windows.UIElement * System.Windows.Input.ExecutedRoutedEventHandler -&gt; unit" Usage="System.Windows.Input.CommandManager.RemovePreviewExecutedHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.UIElement" />
        <Parameter Name="handler" Type="System.Windows.Input.ExecutedRoutedEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="06802-197">Élément à partir duquel supprimer <paramref name="handler" />.</span><span class="sxs-lookup"><span data-stu-id="06802-197">The element to remove <paramref name="handler" /> from.</span></span></param>
        <param name="handler"><span data-ttu-id="06802-198">Gestionnaire exécuté.</span><span class="sxs-lookup"><span data-stu-id="06802-198">The executed handler.</span></span></param>
        <summary><span data-ttu-id="06802-199">Détache le <see cref="T:System.Windows.Input.ExecutedRoutedEventHandler" /> spécifié de l'élément spécifié.</span><span class="sxs-lookup"><span data-stu-id="06802-199">Detaches the specified <see cref="T:System.Windows.Input.ExecutedRoutedEventHandler" /> from the specified element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="06802-200">L’exemple suivant détache un <xref:System.Windows.Input.CanExecuteRoutedEventHandler> et un <xref:System.Windows.Input.ExecutedRoutedEventHandler> qui a précédemment été joint à un <xref:System.Windows.Controls.Button>.</span><span class="sxs-lookup"><span data-stu-id="06802-200">The following example detaches a <xref:System.Windows.Input.CanExecuteRoutedEventHandler> and an <xref:System.Windows.Input.ExecutedRoutedEventHandler> which had previously been attached to a <xref:System.Windows.Controls.Button>.</span></span>  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewCmdManagerRemoveHandlers](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewcmdmanagerremovehandlers)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewCmdManagerRemoveHandlers](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewcmdmanagerremovehandlers)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="06802-201"><paramref name="element" /> ou <paramref name="handler" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="06802-201"><paramref name="element" /> or <paramref name="handler" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.ICommand" />
      </Docs>
    </Member>
    <Member MemberName="RequerySuggested">
      <MemberSignature Language="C#" Value="public static event EventHandler RequerySuggested;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler RequerySuggested" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.CommandManager.RequerySuggested" />
      <MemberSignature Language="VB.NET" Value="Public Shared Custom Event RequerySuggested As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static event EventHandler ^ RequerySuggested;" />
      <MemberSignature Language="F#" Value="member this.RequerySuggested : EventHandler " Usage="member this.RequerySuggested : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="06802-202">Se produit lorsque le <see cref="T:System.Windows.Input.CommandManager" /> détecte des conditions qui peuvent influer sur la capacité d'exécution d'une commande.</span><span class="sxs-lookup"><span data-stu-id="06802-202">Occurs when the <see cref="T:System.Windows.Input.CommandManager" /> detects conditions that might change the ability of a command to execute.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="06802-203">Cet événement conserve le gestionnaire comme une référence faible.</span><span class="sxs-lookup"><span data-stu-id="06802-203">This event holds onto the handler as a weak reference.</span></span> <span data-ttu-id="06802-204">Objets qui écoutent cet événement doivent conserver une référence forte à leur gestionnaire d’événements afin d’éviter qu’il soit par le garbage collecté.</span><span class="sxs-lookup"><span data-stu-id="06802-204">Objects that listen for this event should keep a strong reference to their event handler to avoid it being garbage collected.</span></span> <span data-ttu-id="06802-205">Cela est possible en ayant un champ privé et en assignant le gestionnaire comme valeur avant ou après avoir attaché à cet événement.</span><span class="sxs-lookup"><span data-stu-id="06802-205">This can be accomplished by having a private field and assigning the handler as the value before or after attaching to this event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>