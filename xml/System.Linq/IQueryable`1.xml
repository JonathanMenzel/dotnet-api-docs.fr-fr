<Type Name="IQueryable&lt;T&gt;" FullName="System.Linq.IQueryable&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9c1ee483853f893653b4fa2f9215993fc6571208" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="37650067" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IQueryable&lt;out T&gt; : System.Collections.Generic.IEnumerable&lt;out T&gt;, System.Linq.IQueryable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IQueryable`1&lt;+ T&gt; implements class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.IEnumerable, class System.Linq.IQueryable" />
  <TypeSignature Language="DocId" Value="T:System.Linq.IQueryable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IQueryable(Of Out T)&#xA;Implements IEnumerable(Of Out T), IQueryable" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IQueryable : System::Collections::Generic::IEnumerable&lt;T&gt;, System::Linq::IQueryable" />
  <TypeSignature Language="F#" Value="type IQueryable&lt;'T&gt; = interface&#xA;    interface seq&lt;'T&gt;&#xA;    interface IQueryable&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Linq.Expressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IQueryable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T">
      <span data-ttu-id="04c84-101">Type des données contenues dans la source de données.</span>
      <span class="sxs-lookup">
        <span data-stu-id="04c84-101">The type of the data in the data source.</span>
      </span>
    </typeparam>
    <summary>
      <span data-ttu-id="04c84-102">Fournit des fonctionnalités permettant d'évaluer des requêtes par rapport à une source de données spécifique dans laquelle le type des données est connu.</span>
      <span class="sxs-lookup">
        <span data-stu-id="04c84-102">Provides functionality to evaluate queries against a specific data source wherein the type of the data is known.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="04c84-103">Le <xref:System.Linq.IQueryable%601> interface est destinée à être mise en œuvre par les fournisseurs de requêtes.</span><span class="sxs-lookup"><span data-stu-id="04c84-103">The <xref:System.Linq.IQueryable%601> interface is intended for implementation by query providers.</span></span>  
  
 <span data-ttu-id="04c84-104">Cette interface hérite le <xref:System.Collections.Generic.IEnumerable%601> interface afin que si elle représente une requête, les résultats de cette requête peuvent être énumérés.</span><span class="sxs-lookup"><span data-stu-id="04c84-104">This interface inherits the <xref:System.Collections.Generic.IEnumerable%601> interface so that if it represents a query, the results of that query can be enumerated.</span></span> <span data-ttu-id="04c84-105">Énumération force l’arborescence d’expression associé à un <xref:System.Linq.IQueryable%601> objet doit être exécuté.</span><span class="sxs-lookup"><span data-stu-id="04c84-105">Enumeration forces the expression tree associated with an <xref:System.Linq.IQueryable%601> object to be executed.</span></span> <span data-ttu-id="04c84-106">Les requêtes qui ne retournent pas de résultats énumérables sont exécutées lorsque la <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> méthode est appelée.</span><span class="sxs-lookup"><span data-stu-id="04c84-106">Queries that do not return enumerable results are executed when the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method is called.</span></span>  
  
 <span data-ttu-id="04c84-107">La définition de « l’exécution d’une arborescence d’expressions » est spécifique à un fournisseur de requête.</span><span class="sxs-lookup"><span data-stu-id="04c84-107">The definition of "executing an expression tree" is specific to a query provider.</span></span> <span data-ttu-id="04c84-108">Par exemple, elle peut impliquer la traduction de l’arborescence d’expression à un langage de requête approprié pour une source de données sous-jacente.</span><span class="sxs-lookup"><span data-stu-id="04c84-108">For example, it may involve translating the expression tree to a query language appropriate for an underlying data source.</span></span>  
  
 <span data-ttu-id="04c84-109">Le <xref:System.Linq.IQueryable%601> interface permet aux requêtes polymorphes.</span><span class="sxs-lookup"><span data-stu-id="04c84-109">The <xref:System.Linq.IQueryable%601> interface enables queries to be polymorphic.</span></span> <span data-ttu-id="04c84-110">Autrement dit, étant donné que l’interrogation d’un `IQueryable` source de données est représentée comme une arborescence d’expression, elle peut être exécutée par rapport à différents types de sources de données.</span><span class="sxs-lookup"><span data-stu-id="04c84-110">That is, because a query against an `IQueryable` data source is represented as an expression tree, it can be executed against different types of data sources.</span></span>  
  
 <span data-ttu-id="04c84-111">Le `static` (`Shared` en Visual Basic) méthodes définies dans la classe <xref:System.Linq.Queryable> (à l’exception de <xref:System.Linq.Queryable.AsQueryable%2A>, <xref:System.Linq.Queryable.ThenBy%2A>, et <xref:System.Linq.Queryable.ThenByDescending%2A>) étendent les objets des types qui implémentent le <xref:System.Linq.IQueryable%601> interface.</span><span class="sxs-lookup"><span data-stu-id="04c84-111">The `static` (`Shared` in Visual Basic) methods defined in the class <xref:System.Linq.Queryable> (except for <xref:System.Linq.Queryable.AsQueryable%2A>, <xref:System.Linq.Queryable.ThenBy%2A>, and <xref:System.Linq.Queryable.ThenByDescending%2A>) extend objects of types that implement the <xref:System.Linq.IQueryable%601> interface.</span></span>  
  
 <span data-ttu-id="04c84-112">Pour plus d’informations sur la façon de créer votre propre fournisseur LINQ, consultez [LINQ : création d’un fournisseur IQueryable](http://go.microsoft.com/fwlink/?LinkID=112370) sur les Blogs MSDN.</span><span class="sxs-lookup"><span data-stu-id="04c84-112">For more information about how to create your own LINQ provider, see [LINQ: Building an IQueryable Provider](http://go.microsoft.com/fwlink/?LinkID=112370) on MSDN Blogs.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Linq.Queryable" />
  </Docs>
  <Members />
</Type>